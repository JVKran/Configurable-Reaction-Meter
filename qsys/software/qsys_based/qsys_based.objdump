
qsys_based.elf:     file format elf32-littlenios2
qsys_based.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x000001c0

Program Header:
    LOAD off    0x00001000 vaddr 0x00000000 paddr 0x00000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00000020 paddr 0x00000020 align 2**12
         filesz 0x00017fbc memsz 0x00017fbc flags r-x
    LOAD off    0x00018fdc vaddr 0x00017fdc paddr 0x00019b50 align 2**12
         filesz 0x00001b74 memsz 0x00001b74 flags rw-
    LOAD off    0x0001b6c4 vaddr 0x0001b6c4 paddr 0x0001b6c4 align 2**12
         filesz 0x00000000 memsz 0x000043f4 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00000000  00000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   000001a0  00000020  00000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         000179d4  000001c0  000001c0  000011c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000448  00017b94  00017b94  00018b94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001b74  00017fdc  00019b50  00018fdc  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          000043f4  0001b6c4  0001b6c4  0001b6c4  2**2
                  ALLOC, SMALL_DATA
  6 .memory       00000000  0001fab8  0001fab8  0001ab50  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  0001ab50  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00000fc8  00000000  00000000  0001ab78  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   0002c0ef  00000000  00000000  0001bb40  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0000a77c  00000000  00000000  00047c2f  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   0000d81a  00000000  00000000  000523ab  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  000030b4  00000000  00000000  0005fbc8  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00004592  00000000  00000000  00062c7c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00017755  00000000  00000000  0006720e  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000010  00000000  00000000  0007e964  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00001888  00000000  00000000  0007e978  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000006  00000000  00000000  00084b12  2**0
                  CONTENTS, READONLY
 18 .cpu          00000005  00000000  00000000  00084b18  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  00084b1d  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  00084b1e  2**0
                  CONTENTS, READONLY
 21 .sysid_hash   00000004  00000000  00000000  00084b1f  2**0
                  CONTENTS, READONLY
 22 .sysid_base   00000004  00000000  00000000  00084b23  2**0
                  CONTENTS, READONLY
 23 .sysid_time   00000004  00000000  00000000  00084b27  2**0
                  CONTENTS, READONLY
 24 .stderr_dev   00000004  00000000  00000000  00084b2b  2**0
                  CONTENTS, READONLY
 25 .stdin_dev    00000004  00000000  00000000  00084b2f  2**0
                  CONTENTS, READONLY
 26 .stdout_dev   00000004  00000000  00000000  00084b33  2**0
                  CONTENTS, READONLY
 27 .sopc_system_name 0000000f  00000000  00000000  00084b37  2**0
                  CONTENTS, READONLY
 28 .quartus_project_dir 00000046  00000000  00000000  00084b46  2**0
                  CONTENTS, READONLY
 29 .jdi          00004beb  00000000  00000000  00084b8c  2**0
                  CONTENTS, READONLY
 30 .sopcinfo     0003d3a1  00000000  00000000  00089777  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00000000 l    d  .entry	00000000 .entry
00000020 l    d  .exceptions	00000000 .exceptions
000001c0 l    d  .text	00000000 .text
00017b94 l    d  .rodata	00000000 .rodata
00017fdc l    d  .rwdata	00000000 .rwdata
0001b6c4 l    d  .bss	00000000 .bss
0001fab8 l    d  .memory	00000000 .memory
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../qsys_based_bsp//obj/HAL/src/crt0.o
000001f8 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_exception_entry.o
00000094 l       .exceptions	00000000 alt_exception_unknown
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 hello_ucosii.c
000003dc l     F .text	0000004c isr
0001b6c4 l     O .bss	00000004 counter.3767
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 vfprintf.c
00017c0e l     O .rodata	00000010 zeroes.4404
000029ec l     F .text	000000bc __sbprintf
00017c1e l     O .rodata	00000010 blanks.4403
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
00002bfc l     F .text	00000228 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
00004754 l     F .text	00000008 __fp_unlock
00004768 l     F .text	0000019c __sinit.part.1
00004904 l     F .text	00000008 __fp_lock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
00017fdc l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 locale.c
00018420 l     O .rwdata	00000020 lc_ctype_charset
00018400 l     O .rwdata	00000020 lc_message_charset
00018440 l     O .rwdata	00000038 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mprec.c
00017c50 l     O .rodata	0000000c p05.2768
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
000072e8 l     F .text	000000fc __sprint_r.part.0
00017d74 l     O .rodata	00000010 zeroes.4349
00008924 l     F .text	000000bc __sbprintf
00017d84 l     O .rodata	00000010 blanks.4348
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 alt_close.c
0000d340 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
0000d454 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
0000d480 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_isatty.c
0000d814 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
0000d8fc l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
0000d9e8 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_read.c
0000dbbc l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
00019ac8 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
0000de30 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_env_lock.c
00019acc l     O .rwdata	00000004 lockid
0001b704 l     O .bss	00000004 locks
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00019ad0 l     O .rwdata	00000004 lockid
0001b70c l     O .bss	00000004 locks
00000000 l    df *ABS*	00000000 os_core.c
0000f868 l     F .text	00000048 OS_InitMisc
0000f8b0 l     F .text	0000006c OS_InitRdyList
0000fa1c l     F .text	000000e4 OS_InitTCBList
0000f788 l     F .text	000000e0 OS_InitEventList
0000f91c l     F .text	00000080 OS_InitTaskIdle
0000f99c l     F .text	00000080 OS_InitTaskStat
0000fc8c l     F .text	00000074 OS_SchedNew
00000000 l    df *ABS*	00000000 os_dbg.c
00000000 l    df *ABS*	00000000 os_flag.c
0001199c l     F .text	000000f4 OS_FlagTaskRdy
0001175c l     F .text	00000160 OS_FlagBlock
00000000 l    df *ABS*	00000000 os_mem.c
00000000 l    df *ABS*	00000000 os_q.c
00000000 l    df *ABS*	00000000 os_sem.c
00000000 l    df *ABS*	00000000 os_task.c
00000000 l    df *ABS*	00000000 os_time.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
00015a74 l     F .text	00000034 alt_dev_reg
00018a28 l     O .rwdata	0000106c jtag
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
00015df0 l     F .text	000002a4 altera_avalon_jtag_uart_irq
00016094 l     F .text	00000104 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
00016870 l     F .text	00000078 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
00016ab0 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
00016c70 l     F .text	000000e4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_open.c
00016dd0 l     F .text	0000003c alt_get_errno
00016e0c l     F .text	000000ec alt_file_locked
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000000 l    df *ABS*	00000000 os_cpu_a.o
00000040 l       *ABS*	00000000 OSCtxSw_SWITCH_PC
00000000 l    df *ABS*	00000000 os_cpu_c.c
00000014 l       *ABS*	00000000 OSTCBNext_OFFSET
00000032 l       *ABS*	00000000 OSTCBPrio_OFFSET
00000000 l       *ABS*	00000000 OSTCBStkPtr_OFFSET
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
00006df8 g     F .text	00000074 _mprec_log10
00019b1e g     O .rwdata	00000002 OSTaskNameSize
00006ee4 g     F .text	0000008c __any_on
000093a0 g     F .text	00000054 _isatty_r
00017c5c g     O .rodata	00000028 __mprec_tinytens
0000db00 g     F .text	000000bc alt_main
0001c794 g     O .bss	00000100 alt_irq
000093f4 g     F .text	00000060 _lseek_r
000121bc g     F .text	000000d8 OS_MemInit
00019b50 g       *ABS*	00000000 __flash_rwdata_start
00015a14 g     F .text	00000060 OSTimeSet
0000bd18 g     F .text	00000088 .hidden __eqdf2
0000e4dc g     F .text	00000610 OSEventPendMulti
0001fab8 g       *ABS*	00000000 __alt_heap_start
00017448 g     F .text	00000024 OSTaskCreateHook
0001b794 g     O .bss	00001000 task1_stk
000006b8 g     F .text	0000003c printf
00019af6 g     O .rwdata	00000002 OSMboxEn
0000eb44 g     F .text	0000004c OSIntEnter
00009ccc g     F .text	0000009c _wcrtomb_r
00007110 g     F .text	0000005c __sseek
00004ab4 g     F .text	00000010 __sinit
00009b74 g     F .text	00000140 __swbuf_r
00019b06 g     O .rwdata	00000002 OSQEn
000050c0 g     F .text	0000007c _setlocale_r
0000490c g     F .text	00000078 __sfmoreglue
0000e1b0 g     F .text	000000cc __malloc_unlock
000174b0 g     F .text	00000020 OSTaskStatHook
0001b714 g     O .bss	00000001 OSLockNesting
00019b44 g     O .rwdata	00000002 OSDataSize
0001b715 g     O .bss	00000001 OSRunning
00009454 g     F .text	0000015c memmove
000174f0 g     F .text	00000020 OSInitHookBegin
00019b3c g     O .rwdata	00000002 OSTmrSize
00004a9c g     F .text	00000018 _cleanup
00005eb8 g     F .text	000000a8 _Balloc
0001b718 g     O .bss	00000004 OSIdleCtr
0000bda0 g     F .text	000000dc .hidden __gtdf2
000172c8 g       .text	00000000 OSStartTsk
0000ffbc g     F .text	000002d4 OS_TCBInit
00000000 g     F .entry	0000000c __reset
00019b42 g     O .rwdata	00000002 OSTmrWheelTblSize
00000020 g       *ABS*	00000000 __flash_exceptions_start
0001b6c8 g     O .bss	00000004 running_sem
00019ae2 g     O .rwdata	00000002 OSEventSize
0001b71c g     O .bss	00000001 OSPrioHighRdy
00008e7c g     F .text	0000005c _fstat_r
0001746c g     F .text	00000024 OSTaskDelHook
0001b6ec g     O .bss	00000004 errno
0000708c g     F .text	00000008 __seofread
000172a8 g       .text	00000000 OSStartHighRdy
00014494 g     F .text	000001e4 OSTaskCreateExt
000112a4 g     F .text	00000060 OSFlagPendGetFlagsRdy
00019b22 g     O .rwdata	00000002 OSTaskStatStkSize
00010420 g     F .text	00000308 OSFlagAccept
00012800 g     F .text	000000b8 OSQFlush
00012294 g     F .text	00000140 OSQAccept
0001b6fc g     O .bss	00000004 alt_argv
00021a94 g       *ABS*	00000000 _gp
000142e8 g     F .text	000001ac OSTaskCreate
00013df8 g     F .text	000004f0 OSTaskChangePrio
0001b710 g     O .bss	00000004 alt_heapsem
00010290 g     F .text	00000190 OSDebugInit
00014678 g     F .text	00000344 OSTaskDel
000188a8 g     O .rwdata	00000180 alt_fd_list
0001c894 g     O .bss	00000370 OSFlagTbl
0000f568 g     F .text	000000b8 OS_EventTaskRemove
00017574 g     F .text	00000090 alt_find_dev
00005c48 g     F .text	00000148 memcpy
00019b0c g     O .rwdata	00000002 OSRdyTblSize
0000475c g     F .text	0000000c _cleanup_r
0000d158 g     F .text	000000dc .hidden __floatsidf
00016d54 g     F .text	0000007c alt_io_redirect
0000be7c g     F .text	000000f4 .hidden __ltdf2
00017b94 g       *ABS*	00000000 __DTOR_END__
0000e27c g     F .text	00000120 OSEventNameGet
00019af0 g     O .rwdata	00000002 OSFlagMax
00006f70 g     F .text	00000074 __fpclassifyd
00006d54 g     F .text	000000a4 __ratio
0000eb90 g     F .text	000000f8 OSIntExit
00008908 g     F .text	0000001c __vfiprintf_internal
00019b2a g     O .rwdata	00000002 OSTCBSize
0001b71d g     O .bss	00000001 OSPrioCur
000162f0 g     F .text	000002bc altera_avalon_jtag_uart_read
00000688 g     F .text	00000030 _printf_r
000005cc g     F .text	00000064 .hidden __udivsi3
0000d850 g     F .text	000000ac isatty
00019b10 g     O .rwdata	00000002 OSStkWidth
00017cac g     O .rodata	000000c8 __mprec_tens
00019b04 g     O .rwdata	00000002 OSPtrSize
000001fc g     F .text	000000d4 show_score
0000513c g     F .text	0000000c __locale_charset
00019ae4 g     O .rwdata	00000002 OSEventTblSize
0001721c g       .text	00000000 OSCtxSw
0001b6e8 g     O .bss	00000004 __malloc_top_pad
0001b720 g     O .bss	00000004 OSTCBList
0001b6f0 g     O .bss	00000004 alt_fd_list_lock
00019a9c g     O .rwdata	00000004 __mb_cur_max
0000516c g     F .text	0000000c _localeconv_r
00008ed8 g     F .text	000004c8 __sfvwrite_r
000062ec g     F .text	0000003c __i2b
0001cc04 g     O .bss	00000c30 OSMemTbl
0001b724 g     O .bss	00000001 OSTickStepState
00006fe4 g     F .text	00000054 _sbrk_r
00019b08 g     O .rwdata	00000002 OSQMax
0001d834 g     O .bss	00000800 OSTaskStatStk
00011df8 g     F .text	000000f0 OSMemNameGet
00019ae8 g     O .rwdata	00000002 OSFlagEn
000095b0 g     F .text	00000060 _read_r
00019b2e g     O .rwdata	00000002 OSTimeTickHookEn
00012cb0 g     F .text	00000168 OSQPost
00011a90 g     F .text	000000a4 OS_FlagUnlink
00019abc g     O .rwdata	00000004 alt_max_fd
0000fb54 g     F .text	00000068 OS_MemCopy
0000fbbc g     F .text	000000d0 OS_Sched
00008b70 g     F .text	000000f0 _fclose_r
00011d08 g     F .text	000000f0 OSMemGet
00014ca4 g     F .text	000001b4 OSTaskNameSet
00004724 g     F .text	00000030 fflush
0001b6e4 g     O .bss	00000004 __malloc_max_sbrked_mem
0001b728 g     O .bss	00000004 OSCtxSwCtr
000174d0 g     F .text	00000020 OSTimeTickHook
00019af2 g     O .rwdata	00000002 OSFlagNameSize
0000f620 g     F .text	00000100 OS_EventTaskRemoveMulti
0000aa9c g     F .text	000008ac .hidden __adddf3
0000f418 g     F .text	00000150 OS_EventTaskWaitMulti
00006afc g     F .text	0000010c __b2d
00019b0a g     O .rwdata	00000002 OSQSize
0000a4b0 g     F .text	000005c4 .hidden __umoddi3
0000da24 g     F .text	000000dc lseek
00013760 g     F .text	0000020c OSSemPend
00019a94 g     O .rwdata	00000004 _global_impure_ptr
00009610 g     F .text	00000564 _realloc_r
00019af4 g     O .rwdata	00000002 OSLowestPrio
0001fab8 g       *ABS*	00000000 __bss_end
0000d724 g     F .text	000000f0 alt_iic_isr_register
00017550 g     F .text	00000024 OSTCBInitHook
00019b3a g     O .rwdata	00000002 OSTmrCfgTicksPerSec
000170f0 g     F .text	00000108 alt_tick
00009eb4 g     F .text	000005fc .hidden __udivdi3
00008dd8 g     F .text	00000024 _fputwc_r
00019adc g     O .rwdata	00000002 OSEventEn
00017c84 g     O .rodata	00000028 __mprec_bigtens
000060d0 g     F .text	00000104 __s2b
00019b36 g     O .rwdata	00000002 OSTmrCfgNameSize
0000d234 g     F .text	000000a8 .hidden __floatunsidf
0000683c g     F .text	00000060 __mcmp
00004ad4 g     F .text	00000018 __fp_lock_all
0000d6d8 g     F .text	0000004c alt_ic_irq_enabled
000118bc g     F .text	000000e0 OS_FlagInit
00017054 g     F .text	0000009c alt_alarm_stop
00019b18 g     O .rwdata	00000002 OSTaskIdleStkSize
0001b6f4 g     O .bss	00000004 alt_irq_active
00013398 g     F .text	000000b0 OSSemAccept
00011ffc g     F .text	000000d8 OSMemPut
00011b34 g     F .text	000001d4 OSMemCreate
0001b72c g     O .bss	00000004 OSIdleCtrMax
000000ec g     F .exceptions	000000d4 alt_irq_handler
00018880 g     O .rwdata	00000028 alt_dev_null
00019b2c g     O .rwdata	00000002 OSTicksPerSec
0001721c g       .text	00000000 OSIntCtxSw
00016a90 g     F .text	00000020 alt_dcache_flush_all
000061d4 g     F .text	00000068 __hi0bits
0000d0d8 g     F .text	00000080 .hidden __fixdfsi
0001b730 g     O .bss	00000004 OSTCBFreeList
00019b50 g       *ABS*	00000000 __ram_rwdata_end
0001396c g     F .text	0000016c OSSemPendAbort
00019ab4 g     O .rwdata	00000008 alt_dev_list
0000de6c g     F .text	00000100 write
00019b30 g     O .rwdata	00000002 OSVersionNbr
00017fdc g       *ABS*	00000000 __ram_rodata_end
0000d4bc g     F .text	000000b8 fstat
0000034c g     F .text	00000090 reaction_meter
0000be7c g     F .text	000000f4 .hidden __ledf2
00019ad8 g     O .rwdata	00000004 OSEndiannessTest
000065b4 g     F .text	00000140 __pow5mult
000073fc g     F .text	0000150c ___vfiprintf_internal_r
0001b6dc g     O .bss	00000004 __nlocale_changed
00000630 g     F .text	00000058 .hidden __umodsi3
00019aea g     O .rwdata	00000002 OSFlagGrpSize
0001fab8 g       *ABS*	00000000 end
00015ca8 g     F .text	00000148 altera_avalon_jtag_uart_init
0000fe24 g     F .text	000000cc OS_TaskStat
00017b94 g       *ABS*	00000000 __CTOR_LIST__
00030000 g       *ABS*	00000000 __alt_stack_pointer
000168e8 g     F .text	0000007c alt_avalon_timer_sc_init
0000d2dc g     F .text	00000064 .hidden __clzsi2
000165ac g     F .text	000002c4 altera_avalon_jtag_uart_write
00004ac4 g     F .text	00000004 __sfp_lock_acquire
00005b64 g     F .text	000000e4 memchr
0000fb00 g     F .text	00000054 OS_MemClr
000006f4 g     F .text	000022dc ___vfprintf_internal_r
000172ec g     F .text	0000015c OSTaskStkInit
00004c28 g     F .text	00000310 _free_r
00005148 g     F .text	00000010 __locale_mb_cur_max
0000f170 g     F .text	00000198 OS_EventTaskRdy
000179e0 g     F .text	00000180 __call_exitprocs
0001b734 g     O .bss	00000001 OSCPUUsage
0001b6d8 g     O .bss	00000004 __mlocale_changed
00019aa0 g     O .rwdata	00000004 __malloc_sbrk_base
000001c0 g     F .text	0000003c _start
0001b764 g     O .bss	00000004 _alt_tick_rate
000128b8 g     F .text	0000028c OSQPend
00015564 g     F .text	00000104 OSTimeDly
000066f4 g     F .text	00000148 __lshift
0001b768 g     O .bss	00000004 _alt_nticks
0000dbf8 g     F .text	00000104 read
00015ae0 g     F .text	00000064 alt_sys_init
000178c8 g     F .text	00000118 __register_exitproc
0001b735 g     O .bss	00000001 OSTaskCtr
00015668 g     F .text	0000017c OSTimeDlyHMSM
00006328 g     F .text	0000028c __multiply
00016198 g     F .text	00000068 altera_avalon_jtag_uart_close
0000aa74 g     F .text	00000028 .hidden __mulsi3
00017fdc g       *ABS*	00000000 __ram_rwdata_start
00017b94 g       *ABS*	00000000 __ram_rodata_start
0001b76c g     O .bss	00000028 __malloc_current_mallinfo
00019ade g     O .rwdata	00000002 OSEventMax
00006c08 g     F .text	0000014c __d2b
00013ad8 g     F .text	00000110 OSSemPost
0000ed14 g     F .text	000000dc OSSchedUnlock
00015b44 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
0001770c g     F .text	000000f4 alt_get_fd
0001b738 g     O .bss	00000004 OSMemFreeList
0000ee60 g     F .text	000000b0 OSStatInit
00011698 g     F .text	000000c4 OSFlagQuery
00019b14 g     O .rwdata	00000002 OSTaskCreateExtEn
00008a40 g     F .text	00000054 _close_r
0001784c g     F .text	0000007c memcmp
0000f150 g     F .text	00000020 OS_Dummy
00015c04 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
0001fab8 g       *ABS*	00000000 __alt_stack_base
00015c54 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
0001b6cc g     O .bss	00000004 start_sem
00002aa8 g     F .text	00000154 __swsetup_r
0001e034 g     O .bss	000001e0 OSQTbl
0000b348 g     F .text	000009d0 .hidden __divdf3
00004984 g     F .text	00000118 __sfp
00006e6c g     F .text	00000078 __copybits
00018478 g     O .rwdata	00000408 __malloc_av_
00004ad0 g     F .text	00000004 __sinit_lock_release
0001b73c g     O .bss	00000004 OSTCBHighRdy
0000bf70 g     F .text	0000086c .hidden __muldf3
00007038 g     F .text	00000054 __sread
0001b740 g     O .bss	00000004 OSQFreeList
000002d0 g     F .text	0000007c show_tries
00017604 g     F .text	00000108 alt_find_file
00016aec g     F .text	000000a4 alt_dev_llist_insert
0000e090 g     F .text	00000120 __malloc_lock
0000dd80 g     F .text	000000b0 sbrk
0000e39c g     F .text	00000140 OSEventNameSet
000046c8 g     F .text	0000005c _fflush_r
0001b6d0 g     O .bss	00000004 stop_sem
00008a94 g     F .text	000000dc _calloc_r
0001b744 g     O .bss	00000001 OSRdyGrp
0001b6c4 g       *ABS*	00000000 __bss_start
00005d90 g     F .text	00000128 memset
00000428 g     F .text	000000ac main
0001b700 g     O .bss	00000004 alt_envp
0001b6e0 g     O .bss	00000004 __malloc_max_total_mem
00015ba4 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
00009cb4 g     F .text	00000018 __swbuf
00017eac g     O .rodata	00000100 OSUnMapTbl
00019b0e g     O .rwdata	00000002 OSSemEn
00011304 g     F .text	00000394 OSFlagPost
0000716c g     F .text	00000008 __sclose
00030000 g       *ABS*	00000000 __alt_heap_limit
00008c60 g     F .text	00000014 fclose
0000f308 g     F .text	00000110 OS_EventTaskWait
0000fef0 g     F .text	000000cc OS_TaskStatStkChk
000149bc g     F .text	00000150 OSTaskDelReq
00002e24 g     F .text	00001688 _dtoa_r
00005358 g     F .text	0000080c _malloc_r
00009e28 g     F .text	00000030 __ascii_wctomb
00019ac0 g     O .rwdata	00000004 alt_errno
0000edf0 g     F .text	00000070 OSStart
0000e030 g     F .text	00000060 __env_unlock
00004f38 g     F .text	000000c4 _fwalk
00014e58 g     F .text	000001d4 OSTaskResume
000120d4 g     F .text	000000e8 OSMemQuery
00019b20 g     O .rwdata	00000002 OSTaskStatEn
00019afa g     O .rwdata	00000002 OSMemMax
00012e18 g     F .text	00000170 OSQPostFront
000004d4 g     F .text	00000084 .hidden __divsi3
0001b745 g     O .bss	00000003 OSRdyTbl
00019ad4 g     O .rwdata	00000002 OSDebugEn
00004b04 g     F .text	00000124 _malloc_trim_r
00017b94 g       *ABS*	00000000 __CTOR_END__
00019aec g     O .rwdata	00000002 OSFlagNodeSize
00019b34 g     O .rwdata	00000002 OSTmrCfgMax
00007174 g     F .text	000000dc strcmp
000123d4 g     F .text	000001ac OSQCreate
00014b0c g     F .text	00000198 OSTaskNameGet
00017b94 g       *ABS*	00000000 __flash_rodata_start
00012f88 g     F .text	0000020c OSQPostOpt
0000ef10 g     F .text	00000220 OSTimeTick
00019b1c g     O .rwdata	00000002 OSTaskMax
00017b94 g       *ABS*	00000000 __DTOR_LIST__
00013448 g     F .text	000000d8 OSSemCreate
00019b40 g     O .rwdata	00000002 OSTmrWheelSize
0000bd18 g     F .text	00000088 .hidden __nedf2
00019b16 g     O .rwdata	00000002 OSTaskDelEn
00013be8 g     F .text	00000110 OSSemQuery
00012580 g     F .text	00000280 OSQDel
00012b44 g     F .text	0000016c OSQPendAbort
00015aa8 g     F .text	00000038 alt_irq_init
0000dcfc g     F .text	00000084 alt_release_fd
00017d94 g     O .rodata	00000100 .hidden __clz_tab
0001b6d4 g     O .bss	00000004 _PathLocale
00017800 g     F .text	00000014 atexit
000089e0 g     F .text	00000060 _write_r
0000ec88 g     F .text	0000008c OSSchedLock
00005178 g     F .text	00000018 setlocale
00010728 g     F .text	00000108 OSFlagCreate
00019a98 g     O .rwdata	00000004 _impure_ptr
0001b6f8 g     O .bss	00000004 alt_argc
000044ac g     F .text	0000021c __sflush_r
00016bf0 g     F .text	00000060 _do_dtors
00005164 g     F .text	00000008 __locale_cjk_lang
00019ae6 g     O .rwdata	00000002 OSEventMultiEn
00010830 g     F .text	00000248 OSFlagDel
0001b748 g     O .bss	00000004 OSEventFreeList
00000020 g       .exceptions	00000000 alt_irq_entry
00006a98 g     F .text	00000064 __ulp
00010cec g     F .text	000005b8 OSFlagPend
00019b32 g     O .rwdata	00000002 OSTmrEn
00004aec g     F .text	00000018 __fp_unlock_all
00019aac g     O .rwdata	00000008 alt_fs_list
0000fd00 g     F .text	00000074 OS_StrCopy
00019afc g     O .rwdata	00000002 OSMemNameSize
00017510 g     F .text	00000020 OSInitHookEnd
00000020 g       *ABS*	00000000 __ram_exceptions_start
00019b28 g     O .rwdata	00000002 OSTCBPrioTblMax
00005190 g     F .text	0000000c localeconv
00019b24 g     O .rwdata	00000002 OSTaskStatStkChkEn
0000d574 g     F .text	00000050 alt_ic_isr_register
00019af8 g     O .rwdata	00000002 OSMemEn
00019b02 g     O .rwdata	00000002 OSMutexEn
00019b50 g       *ABS*	00000000 _edata
0001fab8 g       *ABS*	00000000 _end
0001b74c g     O .bss	00000001 OSIntNesting
00008c74 g     F .text	00000164 __fputwc
000001c0 g       *ABS*	00000000 __ram_exceptions_end
00016200 g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
000157e4 g     F .text	000001d4 OSTimeDlyResume
00010ba0 g     F .text	0000014c OSFlagNameSet
0001502c g     F .text	000001c0 OSTaskStkChk
0000d64c g     F .text	0000008c alt_ic_irq_disable
00019afe g     O .rwdata	00000002 OSMemSize
00007094 g     F .text	0000007c __swrite
00000000 g       *ABS*	00000000 __alt_mem_memory
00019aa4 g     O .rwdata	00000004 __malloc_trim_threshold
000171f8 g     F .text	00000024 altera_nios2_qsys_irq_init
00005158 g     F .text	0000000c __locale_msgcharset
0001b750 g     O .bss	00000004 OSTCBCur
00017814 g     F .text	00000038 exit
00019b00 g     O .rwdata	00000002 OSMemTblSize
00004ffc g     F .text	000000c4 _fwalk_reent
0000689c g     F .text	000001fc __mdiff
00000558 g     F .text	00000074 .hidden __modsi3
00030000 g       *ABS*	00000000 __alt_data_end
00000020 g     F .exceptions	00000000 alt_exception
00004ac8 g     F .text	00000004 __sfp_lock_release
0000eaec g     F .text	00000058 OSInit
000153d0 g     F .text	00000124 OSTaskQuery
000132f0 g     F .text	000000a8 OS_QInit
0000fd74 g     F .text	00000054 OS_StrLen
00011ee8 g     F .text	00000114 OSMemNameSet
00019b1a g     O .rwdata	00000002 OSTaskProfileEn
0001b754 g     O .bss	00000004 OSTime
0001e214 g     O .bss	00000800 OSTaskIdleStk
00017b60 g     F .text	00000034 _exit
00016964 g     F .text	0000012c alt_alarm_start
00010a78 g     F .text	00000128 OSFlagNameGet
000159b8 g     F .text	0000005c OSTimeGet
0000519c g     F .text	000001bc __smakebuf_r
00007250 g     F .text	00000098 strlen
00017490 g     F .text	00000020 OSTaskSwHook
00016ef8 g     F .text	0000015c open
0001ea14 g     O .bss	00000b40 OSEventTbl
0000bda0 g     F .text	000000dc .hidden __gedf2
0001f554 g     O .bss	00000510 OSTCBTbl
00013cf8 g     F .text	00000100 OSSemSet
00019aa8 g     O .rwdata	00000004 __wctomb
000073e4 g     F .text	00000018 __sprint_r
00016c50 g     F .text	00000020 alt_icache_flush_all
00019ac4 g     O .rwdata	00000004 alt_priority_mask
00013520 g     F .text	00000240 OSSemDel
0001b758 g     O .bss	00000004 OSFlagFreeList
0000d5c4 g     F .text	00000088 alt_ic_irq_enable
00019ae0 g     O .rwdata	00000002 OSEventNameSize
000029d0 g     F .text	0000001c __vfprintf_internal
0001b75c g     O .bss	00000001 OSStatRdy
0001fa64 g     O .bss	00000054 OSTCBPrioTbl
00009e58 g     F .text	0000005c _wctomb_r
0000df6c g     F .text	000000c4 __env_lock
00019b26 g     O .rwdata	00000002 OSTaskSwHookEn
0000c7dc g     F .text	000008fc .hidden __subdf3
0000623c g     F .text	000000b0 __lo0bits
00019b48 g     O .rwdata	00000008 alt_alarm_list
00019aee g     O .rwdata	00000002 OSFlagWidth
00016b90 g     F .text	00000060 _do_ctors
00009d68 g     F .text	000000c0 wcrtomb
0000d37c g     F .text	000000d8 close
0001b708 g     O .bss	00000004 alt_envsem
0001b760 g     O .bss	00000004 OSIdleCtrRun
0000f130 g     F .text	00000020 OSVersion
00019b38 g     O .rwdata	00000002 OSTmrCfgWheelSize
0000d964 g     F .text	00000084 alt_load
000154f4 g     F .text	00000070 OS_TaskStkClr
00019b12 g     O .rwdata	00000002 OSTaskCreateEn
0000f720 g     F .text	00000068 OS_EventWaitListInit
00008dfc g     F .text	00000080 fputwc
00017530 g     F .text	00000020 OSTaskIdleHook
00004acc g     F .text	00000004 __sinit_lock_acquire
00005f88 g     F .text	00000148 __multadd
000151ec g     F .text	000001e4 OSTaskSuspend
00005f60 g     F .text	00000028 _Bfree
0000fdc8 g     F .text	0000005c OS_TaskIdle
00019b3e g     O .rwdata	00000002 OSTmrTblSize
00013194 g     F .text	0000015c OSQQuery



Disassembly of section .entry:

00000000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   0:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
   4:	08407014 	ori	at,at,448
    jmp r1
   8:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

00000020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
  20:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
  24:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
  28:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
  2c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
  30:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
  34:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
  38:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
  3c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
  40:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
  44:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
  48:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
  4c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
  50:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
  54:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
  58:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
  5c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
  60:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
  64:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
  68:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
  6c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  70:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
  74:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
  78:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
  7c:	10000326 	beq	r2,zero,8c <OSCtxSw_SWITCH_PC+0x4c>
        beq   r4, zero, .Lnot_irq
  80:	20000226 	beq	r4,zero,8c <OSCtxSw_SWITCH_PC+0x4c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
  84:	00000ec0 	call	ec <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
  88:	00000306 	br	98 <alt_exception_unknown+0x4>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
  8c:	df401215 	stw	ea,72(sp)
        ldw   r2, -4(ea)   /* Instruction that caused exception */
  90:	e8bfff17 	ldw	r2,-4(ea)

00000094 <alt_exception_unknown>:
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
  94:	003da03a 	break	0
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
  98:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
  9c:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
  a0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
  a4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
  a8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
  ac:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
  b0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
  b4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
  b8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
  bc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
  c0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
  c4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
  c8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
  cc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
  d0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
  d4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
  d8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
  dc:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
  e0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
  e4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
  e8:	ef80083a 	eret

000000ec <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
  ec:	defff904 	addi	sp,sp,-28
  f0:	dfc00615 	stw	ra,24(sp)
  f4:	df000515 	stw	fp,20(sp)
  f8:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
  fc:	000eb440 	call	eb44 <OSIntEnter>
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 100:	0005313a 	rdctl	r2,ipending
 104:	e0bffe15 	stw	r2,-8(fp)

  return active;
 108:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 10c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
 110:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 114:	00800044 	movi	r2,1
 118:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 11c:	e0fffb17 	ldw	r3,-20(fp)
 120:	e0bffc17 	ldw	r2,-16(fp)
 124:	1884703a 	and	r2,r3,r2
 128:	10001426 	beq	r2,zero,17c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
 12c:	008000b4 	movhi	r2,2
 130:	10b1e504 	addi	r2,r2,-14444
 134:	e0fffd17 	ldw	r3,-12(fp)
 138:	180690fa 	slli	r3,r3,3
 13c:	10c5883a 	add	r2,r2,r3
 140:	10c00017 	ldw	r3,0(r2)
 144:	008000b4 	movhi	r2,2
 148:	10b1e504 	addi	r2,r2,-14444
 14c:	e13ffd17 	ldw	r4,-12(fp)
 150:	200890fa 	slli	r4,r4,3
 154:	1105883a 	add	r2,r2,r4
 158:	10800104 	addi	r2,r2,4
 15c:	10800017 	ldw	r2,0(r2)
 160:	1009883a 	mov	r4,r2
 164:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
 168:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 16c:	0005313a 	rdctl	r2,ipending
 170:	e0bfff15 	stw	r2,-4(fp)

  return active;
 174:	e0bfff17 	ldw	r2,-4(fp)
 178:	00000706 	br	198 <alt_irq_handler+0xac>
      }
      mask <<= 1;
 17c:	e0bffc17 	ldw	r2,-16(fp)
 180:	1085883a 	add	r2,r2,r2
 184:	e0bffc15 	stw	r2,-16(fp)
      i++;
 188:	e0bffd17 	ldw	r2,-12(fp)
 18c:	10800044 	addi	r2,r2,1
 190:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 194:	003fe106 	br	11c <__alt_data_end+0xfffd011c>

    active = alt_irq_pending ();
 198:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
 19c:	e0bffb17 	ldw	r2,-20(fp)
 1a0:	103fdb1e 	bne	r2,zero,110 <__alt_data_end+0xfffd0110>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
 1a4:	000eb900 	call	eb90 <OSIntExit>
}
 1a8:	0001883a 	nop
 1ac:	e037883a 	mov	sp,fp
 1b0:	dfc00117 	ldw	ra,4(sp)
 1b4:	df000017 	ldw	fp,0(sp)
 1b8:	dec00204 	addi	sp,sp,8
 1bc:	f800283a 	ret

Disassembly of section .text:

000001c0 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
     1c0:	06c000f4 	movhi	sp,3
    ori sp, sp, %lo(__alt_stack_pointer)
     1c4:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
     1c8:	068000b4 	movhi	gp,2
    ori gp, gp, %lo(_gp)
     1cc:	d686a514 	ori	gp,gp,6804
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
     1d0:	00800074 	movhi	r2,1
    ori r2, r2, %lo(__bss_start)
     1d4:	10adb114 	ori	r2,r2,46788

    movhi r3, %hi(__bss_end)
     1d8:	00c00074 	movhi	r3,1
    ori r3, r3, %lo(__bss_end)
     1dc:	18feae14 	ori	r3,r3,64184

    beq r2, r3, 1f
     1e0:	10c00326 	beq	r2,r3,1f0 <_start+0x30>

0:
    stw zero, (r2)
     1e4:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
     1e8:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
     1ec:	10fffd36 	bltu	r2,r3,1e4 <__alt_data_end+0xfffd01e4>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
     1f0:	000d9640 	call	d964 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
     1f4:	000db000 	call	db00 <alt_main>

000001f8 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
     1f8:	003fff06 	br	1f8 <__alt_data_end+0xfffd01f8>

000001fc <show_score>:
#define   TASK1_PRIORITY      1		// Period of 1ms (highest priority)

// Synchronisation mechanisms.
OS_EVENT *running_sem, *start_sem, *stop_sem;

void show_score(unsigned int score){
     1fc:	defffc04 	addi	sp,sp,-16
     200:	dfc00315 	stw	ra,12(sp)
     204:	df000215 	stw	fp,8(sp)
     208:	df000204 	addi	fp,sp,8
     20c:	e13fff15 	stw	r4,-4(fp)
	int data = score % 10;
     210:	e0bfff17 	ldw	r2,-4(fp)
     214:	01400284 	movi	r5,10
     218:	1009883a 	mov	r4,r2
     21c:	00006300 	call	630 <__umodsi3>
     220:	e0bffe15 	stw	r2,-8(fp)
	data |= (score / 10 % 10) << 4;
     224:	e0bfff17 	ldw	r2,-4(fp)
     228:	01400284 	movi	r5,10
     22c:	1009883a 	mov	r4,r2
     230:	00005cc0 	call	5cc <__udivsi3>
     234:	01400284 	movi	r5,10
     238:	1009883a 	mov	r4,r2
     23c:	00006300 	call	630 <__umodsi3>
     240:	1006913a 	slli	r3,r2,4
     244:	e0bffe17 	ldw	r2,-8(fp)
     248:	1884b03a 	or	r2,r3,r2
     24c:	e0bffe15 	stw	r2,-8(fp)
	data |= (score / 100 % 10) << 8;
     250:	e0bfff17 	ldw	r2,-4(fp)
     254:	01401904 	movi	r5,100
     258:	1009883a 	mov	r4,r2
     25c:	00005cc0 	call	5cc <__udivsi3>
     260:	01400284 	movi	r5,10
     264:	1009883a 	mov	r4,r2
     268:	00006300 	call	630 <__umodsi3>
     26c:	1006923a 	slli	r3,r2,8
     270:	e0bffe17 	ldw	r2,-8(fp)
     274:	1884b03a 	or	r2,r3,r2
     278:	e0bffe15 	stw	r2,-8(fp)
	data |= (score / 1000 % 10) << 12;
     27c:	e0bfff17 	ldw	r2,-4(fp)
     280:	0140fa04 	movi	r5,1000
     284:	1009883a 	mov	r4,r2
     288:	00005cc0 	call	5cc <__udivsi3>
     28c:	01400284 	movi	r5,10
     290:	1009883a 	mov	r4,r2
     294:	00006300 	call	630 <__umodsi3>
     298:	1006933a 	slli	r3,r2,12
     29c:	e0bffe17 	ldw	r2,-8(fp)
     2a0:	1884b03a 	or	r2,r3,r2
     2a4:	e0bffe15 	stw	r2,-8(fp)
	IOWR_32DIRECT(SSD_CONTROLLER_BASE, 4, data);
     2a8:	00800134 	movhi	r2,4
     2ac:	10840b04 	addi	r2,r2,4140
     2b0:	e0fffe17 	ldw	r3,-8(fp)
     2b4:	10c00035 	stwio	r3,0(r2)
}
     2b8:	0001883a 	nop
     2bc:	e037883a 	mov	sp,fp
     2c0:	dfc00117 	ldw	ra,4(sp)
     2c4:	df000017 	ldw	fp,0(sp)
     2c8:	dec00204 	addi	sp,sp,8
     2cc:	f800283a 	ret

000002d0 <show_tries>:

void show_tries(unsigned int tries){
     2d0:	defffc04 	addi	sp,sp,-16
     2d4:	dfc00315 	stw	ra,12(sp)
     2d8:	df000215 	stw	fp,8(sp)
     2dc:	df000204 	addi	fp,sp,8
     2e0:	e13fff15 	stw	r4,-4(fp)
	int data = tries % 10;
     2e4:	e0bfff17 	ldw	r2,-4(fp)
     2e8:	01400284 	movi	r5,10
     2ec:	1009883a 	mov	r4,r2
     2f0:	00006300 	call	630 <__umodsi3>
     2f4:	e0bffe15 	stw	r2,-8(fp)
	data |= (tries / 10 % 10) << 4;
     2f8:	e0bfff17 	ldw	r2,-4(fp)
     2fc:	01400284 	movi	r5,10
     300:	1009883a 	mov	r4,r2
     304:	00005cc0 	call	5cc <__udivsi3>
     308:	01400284 	movi	r5,10
     30c:	1009883a 	mov	r4,r2
     310:	00006300 	call	630 <__umodsi3>
     314:	1006913a 	slli	r3,r2,4
     318:	e0bffe17 	ldw	r2,-8(fp)
     31c:	1884b03a 	or	r2,r3,r2
     320:	e0bffe15 	stw	r2,-8(fp)
	IOWR_32DIRECT(SSD_CONTROLLER_BASE, 0, data);
     324:	00800134 	movhi	r2,4
     328:	10840a04 	addi	r2,r2,4136
     32c:	e0fffe17 	ldw	r3,-8(fp)
     330:	10c00035 	stwio	r3,0(r2)
}
     334:	0001883a 	nop
     338:	e037883a 	mov	sp,fp
     33c:	dfc00117 	ldw	ra,4(sp)
     340:	df000017 	ldw	fp,0(sp)
     344:	dec00204 	addi	sp,sp,8
     348:	f800283a 	ret

0000034c <reaction_meter>:

void reaction_meter(void* pdata){
     34c:	defffc04 	addi	sp,sp,-16
     350:	dfc00315 	stw	ra,12(sp)
     354:	df000215 	stw	fp,8(sp)
     358:	df000204 	addi	fp,sp,8
     35c:	e13fff15 	stw	r4,-4(fp)
	uint16_t data;

	while (1){
		data = IORD_16DIRECT(RESPONSE_TIME_METER_0_BASE, 0);
     360:	00800134 	movhi	r2,4
     364:	10840e04 	addi	r2,r2,4152
     368:	1080002b 	ldhuio	r2,0(r2)
     36c:	10bfffcc 	andi	r2,r2,65535
     370:	e0bffe0d 	sth	r2,-8(fp)
		printf("Register 0 contains \'%i\'.\n", data);
     374:	e0bffe0b 	ldhu	r2,-8(fp)
     378:	100b883a 	mov	r5,r2
     37c:	01000074 	movhi	r4,1
     380:	211ee504 	addi	r4,r4,31636
     384:	00006b80 	call	6b8 <printf>
		OSTimeDlyHMSM(0, 0, 1, 0);
     388:	000f883a 	mov	r7,zero
     38c:	01800044 	movi	r6,1
     390:	000b883a 	mov	r5,zero
     394:	0009883a 	mov	r4,zero
     398:	00156680 	call	15668 <OSTimeDlyHMSM>

		data = IORD_16DIRECT(RESPONSE_TIME_METER_0_BASE, 2);
     39c:	00800134 	movhi	r2,4
     3a0:	10840e84 	addi	r2,r2,4154
     3a4:	1080002b 	ldhuio	r2,0(r2)
     3a8:	10bfffcc 	andi	r2,r2,65535
     3ac:	e0bffe0d 	sth	r2,-8(fp)
		printf("Register 1 contains \'%i\'.\n", data);
     3b0:	e0bffe0b 	ldhu	r2,-8(fp)
     3b4:	100b883a 	mov	r5,r2
     3b8:	01000074 	movhi	r4,1
     3bc:	211eec04 	addi	r4,r4,31664
     3c0:	00006b80 	call	6b8 <printf>
		OSTimeDlyHMSM(0, 0, 1, 0);
     3c4:	000f883a 	mov	r7,zero
     3c8:	01800044 	movi	r6,1
     3cc:	000b883a 	mov	r5,zero
     3d0:	0009883a 	mov	r4,zero
     3d4:	00156680 	call	15668 <OSTimeDlyHMSM>
	}
     3d8:	003fe106 	br	360 <__alt_data_end+0xfffd0360>

000003dc <isr>:
}

static void isr(void * isr_context){
     3dc:	defffd04 	addi	sp,sp,-12
     3e0:	dfc00215 	stw	ra,8(sp)
     3e4:	df000115 	stw	fp,4(sp)
     3e8:	df000104 	addi	fp,sp,4
     3ec:	e13fff15 	stw	r4,-4(fp)
	static int counter = 0;
	IORD_16DIRECT(RESPONSE_TIME_METER_0_BASE, 0);
     3f0:	00800134 	movhi	r2,4
     3f4:	10840e04 	addi	r2,r2,4152
     3f8:	1080002b 	ldhuio	r2,0(r2)
	show_tries(counter++);
     3fc:	d0a70c17 	ldw	r2,-25552(gp)
     400:	10c00044 	addi	r3,r2,1
     404:	d0e70c15 	stw	r3,-25552(gp)
     408:	1009883a 	mov	r4,r2
     40c:	00002d00 	call	2d0 <show_tries>
}
     410:	0001883a 	nop
     414:	e037883a 	mov	sp,fp
     418:	dfc00117 	ldw	ra,4(sp)
     41c:	df000017 	ldw	fp,0(sp)
     420:	dec00204 	addi	sp,sp,8
     424:	f800283a 	ret

00000428 <main>:

int main(void){
     428:	defff904 	addi	sp,sp,-28
     42c:	dfc00615 	stw	ra,24(sp)
     430:	df000515 	stw	fp,20(sp)
     434:	df000504 	addi	fp,sp,20
	running_sem = OSSemCreate(0);
     438:	0009883a 	mov	r4,zero
     43c:	00134480 	call	13448 <OSSemCreate>
     440:	d0a70d15 	stw	r2,-25548(gp)
	start_sem = OSSemCreate(0);
     444:	0009883a 	mov	r4,zero
     448:	00134480 	call	13448 <OSSemCreate>
     44c:	d0a70e15 	stw	r2,-25544(gp)
	stop_sem = OSSemCreate(0);
     450:	0009883a 	mov	r4,zero
     454:	00134480 	call	13448 <OSSemCreate>
     458:	d0a70f15 	stw	r2,-25540(gp)

	alt_ic_isr_register(RESPONSE_TIME_METER_0_IRQ_INTERRUPT_CONTROLLER_ID, RESPONSE_TIME_METER_0_IRQ, isr, 0, 0x0);
     45c:	d8000015 	stw	zero,0(sp)
     460:	000f883a 	mov	r7,zero
     464:	01800034 	movhi	r6,0
     468:	3180f704 	addi	r6,r6,988
     46c:	01400044 	movi	r5,1
     470:	0009883a 	mov	r4,zero
     474:	000d5740 	call	d574 <alt_ic_isr_register>

	OSTaskCreateExt(reaction_meter,
     478:	d8000415 	stw	zero,16(sp)
     47c:	d8000315 	stw	zero,12(sp)
     480:	00810004 	movi	r2,1024
     484:	d8800215 	stw	r2,8(sp)
     488:	008000b4 	movhi	r2,2
     48c:	10ade504 	addi	r2,r2,-18540
     490:	d8800115 	stw	r2,4(sp)
     494:	00800044 	movi	r2,1
     498:	d8800015 	stw	r2,0(sp)
     49c:	01c00044 	movi	r7,1
     4a0:	018000b4 	movhi	r6,2
     4a4:	31b1e404 	addi	r6,r6,-14448
     4a8:	000b883a 	mov	r5,zero
     4ac:	01000034 	movhi	r4,0
     4b0:	2100d304 	addi	r4,r4,844
     4b4:	00144940 	call	14494 <OSTaskCreateExt>
                  task1_stk,
                  TASK_STACKSIZE,
                  NULL,
                  0);

	OSStart();
     4b8:	000edf00 	call	edf0 <OSStart>
	return 0;
     4bc:	0005883a 	mov	r2,zero
}
     4c0:	e037883a 	mov	sp,fp
     4c4:	dfc00117 	ldw	ra,4(sp)
     4c8:	df000017 	ldw	fp,0(sp)
     4cc:	dec00204 	addi	sp,sp,8
     4d0:	f800283a 	ret

000004d4 <__divsi3>:
     4d4:	20001b16 	blt	r4,zero,544 <__divsi3+0x70>
     4d8:	000f883a 	mov	r7,zero
     4dc:	28001616 	blt	r5,zero,538 <__divsi3+0x64>
     4e0:	200d883a 	mov	r6,r4
     4e4:	29001a2e 	bgeu	r5,r4,550 <__divsi3+0x7c>
     4e8:	00800804 	movi	r2,32
     4ec:	00c00044 	movi	r3,1
     4f0:	00000106 	br	4f8 <__divsi3+0x24>
     4f4:	10000d26 	beq	r2,zero,52c <__divsi3+0x58>
     4f8:	294b883a 	add	r5,r5,r5
     4fc:	10bfffc4 	addi	r2,r2,-1
     500:	18c7883a 	add	r3,r3,r3
     504:	293ffb36 	bltu	r5,r4,4f4 <__alt_data_end+0xfffd04f4>
     508:	0005883a 	mov	r2,zero
     50c:	18000726 	beq	r3,zero,52c <__divsi3+0x58>
     510:	0005883a 	mov	r2,zero
     514:	31400236 	bltu	r6,r5,520 <__divsi3+0x4c>
     518:	314dc83a 	sub	r6,r6,r5
     51c:	10c4b03a 	or	r2,r2,r3
     520:	1806d07a 	srli	r3,r3,1
     524:	280ad07a 	srli	r5,r5,1
     528:	183ffa1e 	bne	r3,zero,514 <__alt_data_end+0xfffd0514>
     52c:	38000126 	beq	r7,zero,534 <__divsi3+0x60>
     530:	0085c83a 	sub	r2,zero,r2
     534:	f800283a 	ret
     538:	014bc83a 	sub	r5,zero,r5
     53c:	39c0005c 	xori	r7,r7,1
     540:	003fe706 	br	4e0 <__alt_data_end+0xfffd04e0>
     544:	0109c83a 	sub	r4,zero,r4
     548:	01c00044 	movi	r7,1
     54c:	003fe306 	br	4dc <__alt_data_end+0xfffd04dc>
     550:	00c00044 	movi	r3,1
     554:	003fee06 	br	510 <__alt_data_end+0xfffd0510>

00000558 <__modsi3>:
     558:	20001716 	blt	r4,zero,5b8 <__modsi3+0x60>
     55c:	000f883a 	mov	r7,zero
     560:	2005883a 	mov	r2,r4
     564:	28001216 	blt	r5,zero,5b0 <__modsi3+0x58>
     568:	2900162e 	bgeu	r5,r4,5c4 <__modsi3+0x6c>
     56c:	01800804 	movi	r6,32
     570:	00c00044 	movi	r3,1
     574:	00000106 	br	57c <__modsi3+0x24>
     578:	30000a26 	beq	r6,zero,5a4 <__modsi3+0x4c>
     57c:	294b883a 	add	r5,r5,r5
     580:	31bfffc4 	addi	r6,r6,-1
     584:	18c7883a 	add	r3,r3,r3
     588:	293ffb36 	bltu	r5,r4,578 <__alt_data_end+0xfffd0578>
     58c:	18000526 	beq	r3,zero,5a4 <__modsi3+0x4c>
     590:	1806d07a 	srli	r3,r3,1
     594:	11400136 	bltu	r2,r5,59c <__modsi3+0x44>
     598:	1145c83a 	sub	r2,r2,r5
     59c:	280ad07a 	srli	r5,r5,1
     5a0:	183ffb1e 	bne	r3,zero,590 <__alt_data_end+0xfffd0590>
     5a4:	38000126 	beq	r7,zero,5ac <__modsi3+0x54>
     5a8:	0085c83a 	sub	r2,zero,r2
     5ac:	f800283a 	ret
     5b0:	014bc83a 	sub	r5,zero,r5
     5b4:	003fec06 	br	568 <__alt_data_end+0xfffd0568>
     5b8:	0109c83a 	sub	r4,zero,r4
     5bc:	01c00044 	movi	r7,1
     5c0:	003fe706 	br	560 <__alt_data_end+0xfffd0560>
     5c4:	00c00044 	movi	r3,1
     5c8:	003ff106 	br	590 <__alt_data_end+0xfffd0590>

000005cc <__udivsi3>:
     5cc:	200d883a 	mov	r6,r4
     5d0:	2900152e 	bgeu	r5,r4,628 <__udivsi3+0x5c>
     5d4:	28001416 	blt	r5,zero,628 <__udivsi3+0x5c>
     5d8:	00800804 	movi	r2,32
     5dc:	00c00044 	movi	r3,1
     5e0:	00000206 	br	5ec <__udivsi3+0x20>
     5e4:	10000e26 	beq	r2,zero,620 <__udivsi3+0x54>
     5e8:	28000516 	blt	r5,zero,600 <__udivsi3+0x34>
     5ec:	294b883a 	add	r5,r5,r5
     5f0:	10bfffc4 	addi	r2,r2,-1
     5f4:	18c7883a 	add	r3,r3,r3
     5f8:	293ffa36 	bltu	r5,r4,5e4 <__alt_data_end+0xfffd05e4>
     5fc:	18000826 	beq	r3,zero,620 <__udivsi3+0x54>
     600:	0005883a 	mov	r2,zero
     604:	31400236 	bltu	r6,r5,610 <__udivsi3+0x44>
     608:	314dc83a 	sub	r6,r6,r5
     60c:	10c4b03a 	or	r2,r2,r3
     610:	1806d07a 	srli	r3,r3,1
     614:	280ad07a 	srli	r5,r5,1
     618:	183ffa1e 	bne	r3,zero,604 <__alt_data_end+0xfffd0604>
     61c:	f800283a 	ret
     620:	0005883a 	mov	r2,zero
     624:	f800283a 	ret
     628:	00c00044 	movi	r3,1
     62c:	003ff406 	br	600 <__alt_data_end+0xfffd0600>

00000630 <__umodsi3>:
     630:	2005883a 	mov	r2,r4
     634:	2900122e 	bgeu	r5,r4,680 <__umodsi3+0x50>
     638:	28001116 	blt	r5,zero,680 <__umodsi3+0x50>
     63c:	01800804 	movi	r6,32
     640:	00c00044 	movi	r3,1
     644:	00000206 	br	650 <__umodsi3+0x20>
     648:	30000c26 	beq	r6,zero,67c <__umodsi3+0x4c>
     64c:	28000516 	blt	r5,zero,664 <__umodsi3+0x34>
     650:	294b883a 	add	r5,r5,r5
     654:	31bfffc4 	addi	r6,r6,-1
     658:	18c7883a 	add	r3,r3,r3
     65c:	293ffa36 	bltu	r5,r4,648 <__alt_data_end+0xfffd0648>
     660:	18000626 	beq	r3,zero,67c <__umodsi3+0x4c>
     664:	1806d07a 	srli	r3,r3,1
     668:	11400136 	bltu	r2,r5,670 <__umodsi3+0x40>
     66c:	1145c83a 	sub	r2,r2,r5
     670:	280ad07a 	srli	r5,r5,1
     674:	183ffb1e 	bne	r3,zero,664 <__alt_data_end+0xfffd0664>
     678:	f800283a 	ret
     67c:	f800283a 	ret
     680:	00c00044 	movi	r3,1
     684:	003ff706 	br	664 <__alt_data_end+0xfffd0664>

00000688 <_printf_r>:
     688:	defffd04 	addi	sp,sp,-12
     68c:	2805883a 	mov	r2,r5
     690:	dfc00015 	stw	ra,0(sp)
     694:	d9800115 	stw	r6,4(sp)
     698:	d9c00215 	stw	r7,8(sp)
     69c:	21400217 	ldw	r5,8(r4)
     6a0:	d9c00104 	addi	r7,sp,4
     6a4:	100d883a 	mov	r6,r2
     6a8:	00006f40 	call	6f4 <___vfprintf_internal_r>
     6ac:	dfc00017 	ldw	ra,0(sp)
     6b0:	dec00304 	addi	sp,sp,12
     6b4:	f800283a 	ret

000006b8 <printf>:
     6b8:	defffc04 	addi	sp,sp,-16
     6bc:	dfc00015 	stw	ra,0(sp)
     6c0:	d9400115 	stw	r5,4(sp)
     6c4:	d9800215 	stw	r6,8(sp)
     6c8:	d9c00315 	stw	r7,12(sp)
     6cc:	008000b4 	movhi	r2,2
     6d0:	10a6a604 	addi	r2,r2,-25960
     6d4:	10800017 	ldw	r2,0(r2)
     6d8:	200b883a 	mov	r5,r4
     6dc:	d9800104 	addi	r6,sp,4
     6e0:	11000217 	ldw	r4,8(r2)
     6e4:	00029d00 	call	29d0 <__vfprintf_internal>
     6e8:	dfc00017 	ldw	ra,0(sp)
     6ec:	dec00404 	addi	sp,sp,16
     6f0:	f800283a 	ret

000006f4 <___vfprintf_internal_r>:
     6f4:	deffb804 	addi	sp,sp,-288
     6f8:	dfc04715 	stw	ra,284(sp)
     6fc:	ddc04515 	stw	r23,276(sp)
     700:	dd404315 	stw	r21,268(sp)
     704:	d9002d15 	stw	r4,180(sp)
     708:	282f883a 	mov	r23,r5
     70c:	302b883a 	mov	r21,r6
     710:	d9c02e15 	stw	r7,184(sp)
     714:	df004615 	stw	fp,280(sp)
     718:	dd804415 	stw	r22,272(sp)
     71c:	dd004215 	stw	r20,264(sp)
     720:	dcc04115 	stw	r19,260(sp)
     724:	dc804015 	stw	r18,256(sp)
     728:	dc403f15 	stw	r17,252(sp)
     72c:	dc003e15 	stw	r16,248(sp)
     730:	000516c0 	call	516c <_localeconv_r>
     734:	10800017 	ldw	r2,0(r2)
     738:	1009883a 	mov	r4,r2
     73c:	d8803415 	stw	r2,208(sp)
     740:	00072500 	call	7250 <strlen>
     744:	d8803715 	stw	r2,220(sp)
     748:	d8802d17 	ldw	r2,180(sp)
     74c:	10000226 	beq	r2,zero,758 <___vfprintf_internal_r+0x64>
     750:	10800e17 	ldw	r2,56(r2)
     754:	1000fb26 	beq	r2,zero,b44 <___vfprintf_internal_r+0x450>
     758:	b880030b 	ldhu	r2,12(r23)
     75c:	10c8000c 	andi	r3,r2,8192
     760:	1800061e 	bne	r3,zero,77c <___vfprintf_internal_r+0x88>
     764:	b9001917 	ldw	r4,100(r23)
     768:	00f7ffc4 	movi	r3,-8193
     76c:	10880014 	ori	r2,r2,8192
     770:	20c6703a 	and	r3,r4,r3
     774:	b880030d 	sth	r2,12(r23)
     778:	b8c01915 	stw	r3,100(r23)
     77c:	10c0020c 	andi	r3,r2,8
     780:	1800c326 	beq	r3,zero,a90 <___vfprintf_internal_r+0x39c>
     784:	b8c00417 	ldw	r3,16(r23)
     788:	1800c126 	beq	r3,zero,a90 <___vfprintf_internal_r+0x39c>
     78c:	1080068c 	andi	r2,r2,26
     790:	00c00284 	movi	r3,10
     794:	10c0c626 	beq	r2,r3,ab0 <___vfprintf_internal_r+0x3bc>
     798:	d8c00404 	addi	r3,sp,16
     79c:	05000074 	movhi	r20,1
     7a0:	d9001e04 	addi	r4,sp,120
     7a4:	a51f0384 	addi	r20,r20,31758
     7a8:	d8c01e15 	stw	r3,120(sp)
     7ac:	d8002015 	stw	zero,128(sp)
     7b0:	d8001f15 	stw	zero,124(sp)
     7b4:	d8003315 	stw	zero,204(sp)
     7b8:	d8003615 	stw	zero,216(sp)
     7bc:	d8003815 	stw	zero,224(sp)
     7c0:	1811883a 	mov	r8,r3
     7c4:	d8003915 	stw	zero,228(sp)
     7c8:	d8003a15 	stw	zero,232(sp)
     7cc:	d8002f15 	stw	zero,188(sp)
     7d0:	d9002815 	stw	r4,160(sp)
     7d4:	a8800007 	ldb	r2,0(r21)
     7d8:	10028b26 	beq	r2,zero,1208 <___vfprintf_internal_r+0xb14>
     7dc:	00c00944 	movi	r3,37
     7e0:	a823883a 	mov	r17,r21
     7e4:	10c0021e 	bne	r2,r3,7f0 <___vfprintf_internal_r+0xfc>
     7e8:	00001406 	br	83c <___vfprintf_internal_r+0x148>
     7ec:	10c00326 	beq	r2,r3,7fc <___vfprintf_internal_r+0x108>
     7f0:	8c400044 	addi	r17,r17,1
     7f4:	88800007 	ldb	r2,0(r17)
     7f8:	103ffc1e 	bne	r2,zero,7ec <__alt_data_end+0xfffd07ec>
     7fc:	8d61c83a 	sub	r16,r17,r21
     800:	80000e26 	beq	r16,zero,83c <___vfprintf_internal_r+0x148>
     804:	d8c02017 	ldw	r3,128(sp)
     808:	d8801f17 	ldw	r2,124(sp)
     80c:	45400015 	stw	r21,0(r8)
     810:	1c07883a 	add	r3,r3,r16
     814:	10800044 	addi	r2,r2,1
     818:	d8c02015 	stw	r3,128(sp)
     81c:	44000115 	stw	r16,4(r8)
     820:	d8801f15 	stw	r2,124(sp)
     824:	00c001c4 	movi	r3,7
     828:	1880a916 	blt	r3,r2,ad0 <___vfprintf_internal_r+0x3dc>
     82c:	42000204 	addi	r8,r8,8
     830:	d9402f17 	ldw	r5,188(sp)
     834:	2c0b883a 	add	r5,r5,r16
     838:	d9402f15 	stw	r5,188(sp)
     83c:	88800007 	ldb	r2,0(r17)
     840:	1000aa26 	beq	r2,zero,aec <___vfprintf_internal_r+0x3f8>
     844:	8d400044 	addi	r21,r17,1
     848:	8c400047 	ldb	r17,1(r17)
     84c:	0021883a 	mov	r16,zero
     850:	00bfffc4 	movi	r2,-1
     854:	0025883a 	mov	r18,zero
     858:	dc002905 	stb	r16,164(sp)
     85c:	d8002785 	stb	zero,158(sp)
     860:	d8002b05 	stb	zero,172(sp)
     864:	d8802a15 	stw	r2,168(sp)
     868:	d8003115 	stw	zero,196(sp)
     86c:	04c01604 	movi	r19,88
     870:	05800244 	movi	r22,9
     874:	9021883a 	mov	r16,r18
     878:	4039883a 	mov	fp,r8
     87c:	ad400044 	addi	r21,r21,1
     880:	88bff804 	addi	r2,r17,-32
     884:	98833236 	bltu	r19,r2,1550 <___vfprintf_internal_r+0xe5c>
     888:	100490ba 	slli	r2,r2,2
     88c:	00c00034 	movhi	r3,0
     890:	18c22804 	addi	r3,r3,2208
     894:	10c5883a 	add	r2,r2,r3
     898:	10800017 	ldw	r2,0(r2)
     89c:	1000683a 	jmp	r2
     8a0:	00001448 	cmpgei	zero,zero,81
     8a4:	00001550 	cmplti	zero,zero,85
     8a8:	00001550 	cmplti	zero,zero,85
     8ac:	00001468 	cmpgeui	zero,zero,81
     8b0:	00001550 	cmplti	zero,zero,85
     8b4:	00001550 	cmplti	zero,zero,85
     8b8:	00001550 	cmplti	zero,zero,85
     8bc:	00001550 	cmplti	zero,zero,85
     8c0:	00001550 	cmplti	zero,zero,85
     8c4:	00001550 	cmplti	zero,zero,85
     8c8:	00000b50 	cmplti	zero,zero,45
     8cc:	00001358 	cmpnei	zero,zero,77
     8d0:	00001550 	cmplti	zero,zero,85
     8d4:	00000a14 	movui	zero,40
     8d8:	00000b74 	movhi	zero,45
     8dc:	00001550 	cmplti	zero,zero,85
     8e0:	00000bc4 	movi	zero,47
     8e4:	00000bd0 	cmplti	zero,zero,47
     8e8:	00000bd0 	cmplti	zero,zero,47
     8ec:	00000bd0 	cmplti	zero,zero,47
     8f0:	00000bd0 	cmplti	zero,zero,47
     8f4:	00000bd0 	cmplti	zero,zero,47
     8f8:	00000bd0 	cmplti	zero,zero,47
     8fc:	00000bd0 	cmplti	zero,zero,47
     900:	00000bd0 	cmplti	zero,zero,47
     904:	00000bd0 	cmplti	zero,zero,47
     908:	00001550 	cmplti	zero,zero,85
     90c:	00001550 	cmplti	zero,zero,85
     910:	00001550 	cmplti	zero,zero,85
     914:	00001550 	cmplti	zero,zero,85
     918:	00001550 	cmplti	zero,zero,85
     91c:	00001550 	cmplti	zero,zero,85
     920:	00001550 	cmplti	zero,zero,85
     924:	00001550 	cmplti	zero,zero,85
     928:	00001550 	cmplti	zero,zero,85
     92c:	00001550 	cmplti	zero,zero,85
     930:	00000c0c 	andi	zero,zero,48
     934:	00000cd4 	movui	zero,51
     938:	00001550 	cmplti	zero,zero,85
     93c:	00000cd4 	movui	zero,51
     940:	00001550 	cmplti	zero,zero,85
     944:	00001550 	cmplti	zero,zero,85
     948:	00001550 	cmplti	zero,zero,85
     94c:	00001550 	cmplti	zero,zero,85
     950:	00000d80 	call	d8 <alt_exception_unknown+0x44>
     954:	00001550 	cmplti	zero,zero,85
     958:	00001550 	cmplti	zero,zero,85
     95c:	00000d8c 	andi	zero,zero,54
     960:	00001550 	cmplti	zero,zero,85
     964:	00001550 	cmplti	zero,zero,85
     968:	00001550 	cmplti	zero,zero,85
     96c:	00001550 	cmplti	zero,zero,85
     970:	00001550 	cmplti	zero,zero,85
     974:	00001210 	cmplti	zero,zero,72
     978:	00001550 	cmplti	zero,zero,85
     97c:	00001550 	cmplti	zero,zero,85
     980:	0000127c 	xorhi	zero,zero,73
     984:	00001550 	cmplti	zero,zero,85
     988:	00001550 	cmplti	zero,zero,85
     98c:	00001550 	cmplti	zero,zero,85
     990:	00001550 	cmplti	zero,zero,85
     994:	00001550 	cmplti	zero,zero,85
     998:	00001550 	cmplti	zero,zero,85
     99c:	00001550 	cmplti	zero,zero,85
     9a0:	00001550 	cmplti	zero,zero,85
     9a4:	00001550 	cmplti	zero,zero,85
     9a8:	00001550 	cmplti	zero,zero,85
     9ac:	000014f4 	movhi	zero,83
     9b0:	00001474 	movhi	zero,81
     9b4:	00000cd4 	movui	zero,51
     9b8:	00000cd4 	movui	zero,51
     9bc:	00000cd4 	movui	zero,51
     9c0:	00001494 	movui	zero,82
     9c4:	00001474 	movhi	zero,81
     9c8:	00001550 	cmplti	zero,zero,85
     9cc:	00001550 	cmplti	zero,zero,85
     9d0:	000014a0 	cmpeqi	zero,zero,82
     9d4:	00001550 	cmplti	zero,zero,85
     9d8:	000014b4 	movhi	zero,82
     9dc:	00001338 	rdprs	zero,zero,76
     9e0:	00000a20 	cmpeqi	zero,zero,40
     9e4:	00001370 	cmpltui	zero,zero,77
     9e8:	00001550 	cmplti	zero,zero,85
     9ec:	0000137c 	xorhi	zero,zero,77
     9f0:	00001550 	cmplti	zero,zero,85
     9f4:	000013e0 	cmpeqi	zero,zero,79
     9f8:	00001550 	cmplti	zero,zero,85
     9fc:	00001550 	cmplti	zero,zero,85
     a00:	00001400 	call	140 <alt_irq_handler+0x54>
     a04:	d8c03117 	ldw	r3,196(sp)
     a08:	d8802e15 	stw	r2,184(sp)
     a0c:	00c7c83a 	sub	r3,zero,r3
     a10:	d8c03115 	stw	r3,196(sp)
     a14:	84000114 	ori	r16,r16,4
     a18:	ac400007 	ldb	r17,0(r21)
     a1c:	003f9706 	br	87c <__alt_data_end+0xfffd087c>
     a20:	00800c04 	movi	r2,48
     a24:	d8802705 	stb	r2,156(sp)
     a28:	00801e04 	movi	r2,120
     a2c:	d8802745 	stb	r2,157(sp)
     a30:	d9002a17 	ldw	r4,168(sp)
     a34:	d8802e17 	ldw	r2,184(sp)
     a38:	d8002785 	stb	zero,158(sp)
     a3c:	e011883a 	mov	r8,fp
     a40:	10c00104 	addi	r3,r2,4
     a44:	14c00017 	ldw	r19,0(r2)
     a48:	002d883a 	mov	r22,zero
     a4c:	80800094 	ori	r2,r16,2
     a50:	2002ca16 	blt	r4,zero,157c <___vfprintf_internal_r+0xe88>
     a54:	00bfdfc4 	movi	r2,-129
     a58:	80a4703a 	and	r18,r16,r2
     a5c:	d8c02e15 	stw	r3,184(sp)
     a60:	94800094 	ori	r18,r18,2
     a64:	9802b41e 	bne	r19,zero,1538 <___vfprintf_internal_r+0xe44>
     a68:	01400074 	movhi	r5,1
     a6c:	295efc04 	addi	r5,r5,31728
     a70:	d9403915 	stw	r5,228(sp)
     a74:	04401e04 	movi	r17,120
     a78:	d8802a17 	ldw	r2,168(sp)
     a7c:	0039883a 	mov	fp,zero
     a80:	1001fa26 	beq	r2,zero,126c <___vfprintf_internal_r+0xb78>
     a84:	0027883a 	mov	r19,zero
     a88:	002d883a 	mov	r22,zero
     a8c:	00021906 	br	12f4 <___vfprintf_internal_r+0xc00>
     a90:	d9002d17 	ldw	r4,180(sp)
     a94:	b80b883a 	mov	r5,r23
     a98:	0002aa80 	call	2aa8 <__swsetup_r>
     a9c:	1005dc1e 	bne	r2,zero,2210 <___vfprintf_internal_r+0x1b1c>
     aa0:	b880030b 	ldhu	r2,12(r23)
     aa4:	00c00284 	movi	r3,10
     aa8:	1080068c 	andi	r2,r2,26
     aac:	10ff3a1e 	bne	r2,r3,798 <__alt_data_end+0xfffd0798>
     ab0:	b880038f 	ldh	r2,14(r23)
     ab4:	103f3816 	blt	r2,zero,798 <__alt_data_end+0xfffd0798>
     ab8:	d9c02e17 	ldw	r7,184(sp)
     abc:	d9002d17 	ldw	r4,180(sp)
     ac0:	a80d883a 	mov	r6,r21
     ac4:	b80b883a 	mov	r5,r23
     ac8:	00029ec0 	call	29ec <__sbprintf>
     acc:	00001106 	br	b14 <___vfprintf_internal_r+0x420>
     ad0:	d9002d17 	ldw	r4,180(sp)
     ad4:	d9801e04 	addi	r6,sp,120
     ad8:	b80b883a 	mov	r5,r23
     adc:	00073e40 	call	73e4 <__sprint_r>
     ae0:	1000081e 	bne	r2,zero,b04 <___vfprintf_internal_r+0x410>
     ae4:	da000404 	addi	r8,sp,16
     ae8:	003f5106 	br	830 <__alt_data_end+0xfffd0830>
     aec:	d8802017 	ldw	r2,128(sp)
     af0:	10000426 	beq	r2,zero,b04 <___vfprintf_internal_r+0x410>
     af4:	d9002d17 	ldw	r4,180(sp)
     af8:	d9801e04 	addi	r6,sp,120
     afc:	b80b883a 	mov	r5,r23
     b00:	00073e40 	call	73e4 <__sprint_r>
     b04:	b880030b 	ldhu	r2,12(r23)
     b08:	1080100c 	andi	r2,r2,64
     b0c:	1005c01e 	bne	r2,zero,2210 <___vfprintf_internal_r+0x1b1c>
     b10:	d8802f17 	ldw	r2,188(sp)
     b14:	dfc04717 	ldw	ra,284(sp)
     b18:	df004617 	ldw	fp,280(sp)
     b1c:	ddc04517 	ldw	r23,276(sp)
     b20:	dd804417 	ldw	r22,272(sp)
     b24:	dd404317 	ldw	r21,268(sp)
     b28:	dd004217 	ldw	r20,264(sp)
     b2c:	dcc04117 	ldw	r19,260(sp)
     b30:	dc804017 	ldw	r18,256(sp)
     b34:	dc403f17 	ldw	r17,252(sp)
     b38:	dc003e17 	ldw	r16,248(sp)
     b3c:	dec04804 	addi	sp,sp,288
     b40:	f800283a 	ret
     b44:	d9002d17 	ldw	r4,180(sp)
     b48:	0004ab40 	call	4ab4 <__sinit>
     b4c:	003f0206 	br	758 <__alt_data_end+0xfffd0758>
     b50:	d9002e17 	ldw	r4,184(sp)
     b54:	d9402e17 	ldw	r5,184(sp)
     b58:	21000017 	ldw	r4,0(r4)
     b5c:	28800104 	addi	r2,r5,4
     b60:	d9003115 	stw	r4,196(sp)
     b64:	203fa716 	blt	r4,zero,a04 <__alt_data_end+0xfffd0a04>
     b68:	d8802e15 	stw	r2,184(sp)
     b6c:	ac400007 	ldb	r17,0(r21)
     b70:	003f4206 	br	87c <__alt_data_end+0xfffd087c>
     b74:	ac400007 	ldb	r17,0(r21)
     b78:	01000a84 	movi	r4,42
     b7c:	a8c00044 	addi	r3,r21,1
     b80:	89075826 	beq	r17,r4,28e4 <___vfprintf_internal_r+0x21f0>
     b84:	8cbff404 	addi	r18,r17,-48
     b88:	b486ae36 	bltu	r22,r18,2644 <___vfprintf_internal_r+0x1f50>
     b8c:	0009883a 	mov	r4,zero
     b90:	1823883a 	mov	r17,r3
     b94:	01400284 	movi	r5,10
     b98:	000aa740 	call	aa74 <__mulsi3>
     b9c:	88c00007 	ldb	r3,0(r17)
     ba0:	1489883a 	add	r4,r2,r18
     ba4:	8d400044 	addi	r21,r17,1
     ba8:	1cbff404 	addi	r18,r3,-48
     bac:	a823883a 	mov	r17,r21
     bb0:	b4bff82e 	bgeu	r22,r18,b94 <__alt_data_end+0xfffd0b94>
     bb4:	1823883a 	mov	r17,r3
     bb8:	2005f616 	blt	r4,zero,2394 <___vfprintf_internal_r+0x1ca0>
     bbc:	d9002a15 	stw	r4,168(sp)
     bc0:	003f2f06 	br	880 <__alt_data_end+0xfffd0880>
     bc4:	84002014 	ori	r16,r16,128
     bc8:	ac400007 	ldb	r17,0(r21)
     bcc:	003f2b06 	br	87c <__alt_data_end+0xfffd087c>
     bd0:	8cbff404 	addi	r18,r17,-48
     bd4:	d8003115 	stw	zero,196(sp)
     bd8:	0009883a 	mov	r4,zero
     bdc:	a823883a 	mov	r17,r21
     be0:	01400284 	movi	r5,10
     be4:	000aa740 	call	aa74 <__mulsi3>
     be8:	88c00007 	ldb	r3,0(r17)
     bec:	9089883a 	add	r4,r18,r2
     bf0:	ad400044 	addi	r21,r21,1
     bf4:	1cbff404 	addi	r18,r3,-48
     bf8:	a823883a 	mov	r17,r21
     bfc:	b4bff82e 	bgeu	r22,r18,be0 <__alt_data_end+0xfffd0be0>
     c00:	1823883a 	mov	r17,r3
     c04:	d9003115 	stw	r4,196(sp)
     c08:	003f1d06 	br	880 <__alt_data_end+0xfffd0880>
     c0c:	8025883a 	mov	r18,r16
     c10:	dc002903 	ldbu	r16,164(sp)
     c14:	e011883a 	mov	r8,fp
     c18:	84003fcc 	andi	r16,r16,255
     c1c:	8007531e 	bne	r16,zero,296c <___vfprintf_internal_r+0x2278>
     c20:	94800414 	ori	r18,r18,16
     c24:	9080080c 	andi	r2,r18,32
     c28:	1003a326 	beq	r2,zero,1ab8 <___vfprintf_internal_r+0x13c4>
     c2c:	d9002e17 	ldw	r4,184(sp)
     c30:	20800117 	ldw	r2,4(r4)
     c34:	24c00017 	ldw	r19,0(r4)
     c38:	21000204 	addi	r4,r4,8
     c3c:	d9002e15 	stw	r4,184(sp)
     c40:	102d883a 	mov	r22,r2
     c44:	10047316 	blt	r2,zero,1e14 <___vfprintf_internal_r+0x1720>
     c48:	d9002a17 	ldw	r4,168(sp)
     c4c:	df002783 	ldbu	fp,158(sp)
     c50:	2003e416 	blt	r4,zero,1be4 <___vfprintf_internal_r+0x14f0>
     c54:	00ffdfc4 	movi	r3,-129
     c58:	9d84b03a 	or	r2,r19,r22
     c5c:	90e4703a 	and	r18,r18,r3
     c60:	10018026 	beq	r2,zero,1264 <___vfprintf_internal_r+0xb70>
     c64:	b003ab26 	beq	r22,zero,1b14 <___vfprintf_internal_r+0x1420>
     c68:	dc402915 	stw	r17,164(sp)
     c6c:	dc001e04 	addi	r16,sp,120
     c70:	b023883a 	mov	r17,r22
     c74:	402d883a 	mov	r22,r8
     c78:	9809883a 	mov	r4,r19
     c7c:	880b883a 	mov	r5,r17
     c80:	01800284 	movi	r6,10
     c84:	000f883a 	mov	r7,zero
     c88:	000a4b00 	call	a4b0 <__umoddi3>
     c8c:	10800c04 	addi	r2,r2,48
     c90:	843fffc4 	addi	r16,r16,-1
     c94:	9809883a 	mov	r4,r19
     c98:	880b883a 	mov	r5,r17
     c9c:	80800005 	stb	r2,0(r16)
     ca0:	01800284 	movi	r6,10
     ca4:	000f883a 	mov	r7,zero
     ca8:	0009eb40 	call	9eb4 <__udivdi3>
     cac:	1027883a 	mov	r19,r2
     cb0:	10c4b03a 	or	r2,r2,r3
     cb4:	1823883a 	mov	r17,r3
     cb8:	103fef1e 	bne	r2,zero,c78 <__alt_data_end+0xfffd0c78>
     cbc:	d8c02817 	ldw	r3,160(sp)
     cc0:	dc402917 	ldw	r17,164(sp)
     cc4:	b011883a 	mov	r8,r22
     cc8:	1c07c83a 	sub	r3,r3,r16
     ccc:	d8c02b15 	stw	r3,172(sp)
     cd0:	00005f06 	br	e50 <___vfprintf_internal_r+0x75c>
     cd4:	8025883a 	mov	r18,r16
     cd8:	dc002903 	ldbu	r16,164(sp)
     cdc:	e011883a 	mov	r8,fp
     ce0:	84003fcc 	andi	r16,r16,255
     ce4:	80071e1e 	bne	r16,zero,2960 <___vfprintf_internal_r+0x226c>
     ce8:	9080020c 	andi	r2,r18,8
     cec:	1004af26 	beq	r2,zero,1fac <___vfprintf_internal_r+0x18b8>
     cf0:	d9002e17 	ldw	r4,184(sp)
     cf4:	d9402e17 	ldw	r5,184(sp)
     cf8:	d8802e17 	ldw	r2,184(sp)
     cfc:	21000017 	ldw	r4,0(r4)
     d00:	29400117 	ldw	r5,4(r5)
     d04:	10800204 	addi	r2,r2,8
     d08:	d9003615 	stw	r4,216(sp)
     d0c:	d9403815 	stw	r5,224(sp)
     d10:	d8802e15 	stw	r2,184(sp)
     d14:	d9003617 	ldw	r4,216(sp)
     d18:	d9403817 	ldw	r5,224(sp)
     d1c:	da003d15 	stw	r8,244(sp)
     d20:	04000044 	movi	r16,1
     d24:	0006f700 	call	6f70 <__fpclassifyd>
     d28:	da003d17 	ldw	r8,244(sp)
     d2c:	1404441e 	bne	r2,r16,1e40 <___vfprintf_internal_r+0x174c>
     d30:	d9003617 	ldw	r4,216(sp)
     d34:	d9403817 	ldw	r5,224(sp)
     d38:	000d883a 	mov	r6,zero
     d3c:	000f883a 	mov	r7,zero
     d40:	000be7c0 	call	be7c <__ledf2>
     d44:	da003d17 	ldw	r8,244(sp)
     d48:	1005e316 	blt	r2,zero,24d8 <___vfprintf_internal_r+0x1de4>
     d4c:	df002783 	ldbu	fp,158(sp)
     d50:	008011c4 	movi	r2,71
     d54:	1445580e 	bge	r2,r17,22b8 <___vfprintf_internal_r+0x1bc4>
     d58:	04000074 	movhi	r16,1
     d5c:	841ef404 	addi	r16,r16,31696
     d60:	00c000c4 	movi	r3,3
     d64:	00bfdfc4 	movi	r2,-129
     d68:	d8c02915 	stw	r3,164(sp)
     d6c:	90a4703a 	and	r18,r18,r2
     d70:	d8c02b15 	stw	r3,172(sp)
     d74:	d8002a15 	stw	zero,168(sp)
     d78:	d8003215 	stw	zero,200(sp)
     d7c:	00003a06 	br	e68 <___vfprintf_internal_r+0x774>
     d80:	84000214 	ori	r16,r16,8
     d84:	ac400007 	ldb	r17,0(r21)
     d88:	003ebc06 	br	87c <__alt_data_end+0xfffd087c>
     d8c:	8025883a 	mov	r18,r16
     d90:	dc002903 	ldbu	r16,164(sp)
     d94:	e011883a 	mov	r8,fp
     d98:	84003fcc 	andi	r16,r16,255
     d9c:	8007001e 	bne	r16,zero,29a0 <___vfprintf_internal_r+0x22ac>
     da0:	94800414 	ori	r18,r18,16
     da4:	9080080c 	andi	r2,r18,32
     da8:	1002fa26 	beq	r2,zero,1994 <___vfprintf_internal_r+0x12a0>
     dac:	d9002e17 	ldw	r4,184(sp)
     db0:	d9402a17 	ldw	r5,168(sp)
     db4:	d8002785 	stb	zero,158(sp)
     db8:	20800204 	addi	r2,r4,8
     dbc:	24c00017 	ldw	r19,0(r4)
     dc0:	25800117 	ldw	r22,4(r4)
     dc4:	2804b116 	blt	r5,zero,208c <___vfprintf_internal_r+0x1998>
     dc8:	013fdfc4 	movi	r4,-129
     dcc:	9d86b03a 	or	r3,r19,r22
     dd0:	d8802e15 	stw	r2,184(sp)
     dd4:	9124703a 	and	r18,r18,r4
     dd8:	1802fb1e 	bne	r3,zero,19c8 <___vfprintf_internal_r+0x12d4>
     ddc:	d8c02a17 	ldw	r3,168(sp)
     de0:	0039883a 	mov	fp,zero
     de4:	1805e526 	beq	r3,zero,257c <___vfprintf_internal_r+0x1e88>
     de8:	0027883a 	mov	r19,zero
     dec:	002d883a 	mov	r22,zero
     df0:	dc001e04 	addi	r16,sp,120
     df4:	9806d0fa 	srli	r3,r19,3
     df8:	b008977a 	slli	r4,r22,29
     dfc:	b02cd0fa 	srli	r22,r22,3
     e00:	9cc001cc 	andi	r19,r19,7
     e04:	98800c04 	addi	r2,r19,48
     e08:	843fffc4 	addi	r16,r16,-1
     e0c:	20e6b03a 	or	r19,r4,r3
     e10:	80800005 	stb	r2,0(r16)
     e14:	9d86b03a 	or	r3,r19,r22
     e18:	183ff61e 	bne	r3,zero,df4 <__alt_data_end+0xfffd0df4>
     e1c:	90c0004c 	andi	r3,r18,1
     e20:	18014126 	beq	r3,zero,1328 <___vfprintf_internal_r+0xc34>
     e24:	10803fcc 	andi	r2,r2,255
     e28:	1080201c 	xori	r2,r2,128
     e2c:	10bfe004 	addi	r2,r2,-128
     e30:	00c00c04 	movi	r3,48
     e34:	10c13c26 	beq	r2,r3,1328 <___vfprintf_internal_r+0xc34>
     e38:	80ffffc5 	stb	r3,-1(r16)
     e3c:	d8c02817 	ldw	r3,160(sp)
     e40:	80bfffc4 	addi	r2,r16,-1
     e44:	1021883a 	mov	r16,r2
     e48:	1887c83a 	sub	r3,r3,r2
     e4c:	d8c02b15 	stw	r3,172(sp)
     e50:	d8802b17 	ldw	r2,172(sp)
     e54:	d9002a17 	ldw	r4,168(sp)
     e58:	1100010e 	bge	r2,r4,e60 <___vfprintf_internal_r+0x76c>
     e5c:	2005883a 	mov	r2,r4
     e60:	d8802915 	stw	r2,164(sp)
     e64:	d8003215 	stw	zero,200(sp)
     e68:	e7003fcc 	andi	fp,fp,255
     e6c:	e700201c 	xori	fp,fp,128
     e70:	e73fe004 	addi	fp,fp,-128
     e74:	e0000326 	beq	fp,zero,e84 <___vfprintf_internal_r+0x790>
     e78:	d8c02917 	ldw	r3,164(sp)
     e7c:	18c00044 	addi	r3,r3,1
     e80:	d8c02915 	stw	r3,164(sp)
     e84:	90c0008c 	andi	r3,r18,2
     e88:	d8c02c15 	stw	r3,176(sp)
     e8c:	18000326 	beq	r3,zero,e9c <___vfprintf_internal_r+0x7a8>
     e90:	d8c02917 	ldw	r3,164(sp)
     e94:	18c00084 	addi	r3,r3,2
     e98:	d8c02915 	stw	r3,164(sp)
     e9c:	90c0210c 	andi	r3,r18,132
     ea0:	d8c03015 	stw	r3,192(sp)
     ea4:	1801c51e 	bne	r3,zero,15bc <___vfprintf_internal_r+0xec8>
     ea8:	d9003117 	ldw	r4,196(sp)
     eac:	d8c02917 	ldw	r3,164(sp)
     eb0:	20e7c83a 	sub	r19,r4,r3
     eb4:	04c1c10e 	bge	zero,r19,15bc <___vfprintf_internal_r+0xec8>
     eb8:	02400404 	movi	r9,16
     ebc:	d8c02017 	ldw	r3,128(sp)
     ec0:	d8801f17 	ldw	r2,124(sp)
     ec4:	4cc52f0e 	bge	r9,r19,2384 <___vfprintf_internal_r+0x1c90>
     ec8:	01400074 	movhi	r5,1
     ecc:	295f0784 	addi	r5,r5,31774
     ed0:	dc403b15 	stw	r17,236(sp)
     ed4:	d9403515 	stw	r5,212(sp)
     ed8:	9823883a 	mov	r17,r19
     edc:	482d883a 	mov	r22,r9
     ee0:	9027883a 	mov	r19,r18
     ee4:	070001c4 	movi	fp,7
     ee8:	8025883a 	mov	r18,r16
     eec:	dc002d17 	ldw	r16,180(sp)
     ef0:	00000306 	br	f00 <___vfprintf_internal_r+0x80c>
     ef4:	8c7ffc04 	addi	r17,r17,-16
     ef8:	42000204 	addi	r8,r8,8
     efc:	b440130e 	bge	r22,r17,f4c <___vfprintf_internal_r+0x858>
     f00:	01000074 	movhi	r4,1
     f04:	18c00404 	addi	r3,r3,16
     f08:	10800044 	addi	r2,r2,1
     f0c:	211f0784 	addi	r4,r4,31774
     f10:	41000015 	stw	r4,0(r8)
     f14:	45800115 	stw	r22,4(r8)
     f18:	d8c02015 	stw	r3,128(sp)
     f1c:	d8801f15 	stw	r2,124(sp)
     f20:	e0bff40e 	bge	fp,r2,ef4 <__alt_data_end+0xfffd0ef4>
     f24:	d9801e04 	addi	r6,sp,120
     f28:	b80b883a 	mov	r5,r23
     f2c:	8009883a 	mov	r4,r16
     f30:	00073e40 	call	73e4 <__sprint_r>
     f34:	103ef31e 	bne	r2,zero,b04 <__alt_data_end+0xfffd0b04>
     f38:	8c7ffc04 	addi	r17,r17,-16
     f3c:	d8c02017 	ldw	r3,128(sp)
     f40:	d8801f17 	ldw	r2,124(sp)
     f44:	da000404 	addi	r8,sp,16
     f48:	b47fed16 	blt	r22,r17,f00 <__alt_data_end+0xfffd0f00>
     f4c:	9021883a 	mov	r16,r18
     f50:	9825883a 	mov	r18,r19
     f54:	8827883a 	mov	r19,r17
     f58:	dc403b17 	ldw	r17,236(sp)
     f5c:	d9403517 	ldw	r5,212(sp)
     f60:	98c7883a 	add	r3,r19,r3
     f64:	10800044 	addi	r2,r2,1
     f68:	41400015 	stw	r5,0(r8)
     f6c:	44c00115 	stw	r19,4(r8)
     f70:	d8c02015 	stw	r3,128(sp)
     f74:	d8801f15 	stw	r2,124(sp)
     f78:	010001c4 	movi	r4,7
     f7c:	2082c516 	blt	r4,r2,1a94 <___vfprintf_internal_r+0x13a0>
     f80:	df002787 	ldb	fp,158(sp)
     f84:	42000204 	addi	r8,r8,8
     f88:	e0000c26 	beq	fp,zero,fbc <___vfprintf_internal_r+0x8c8>
     f8c:	d8801f17 	ldw	r2,124(sp)
     f90:	d9002784 	addi	r4,sp,158
     f94:	18c00044 	addi	r3,r3,1
     f98:	10800044 	addi	r2,r2,1
     f9c:	41000015 	stw	r4,0(r8)
     fa0:	01000044 	movi	r4,1
     fa4:	41000115 	stw	r4,4(r8)
     fa8:	d8c02015 	stw	r3,128(sp)
     fac:	d8801f15 	stw	r2,124(sp)
     fb0:	010001c4 	movi	r4,7
     fb4:	20825e16 	blt	r4,r2,1930 <___vfprintf_internal_r+0x123c>
     fb8:	42000204 	addi	r8,r8,8
     fbc:	d8802c17 	ldw	r2,176(sp)
     fc0:	10000c26 	beq	r2,zero,ff4 <___vfprintf_internal_r+0x900>
     fc4:	d8801f17 	ldw	r2,124(sp)
     fc8:	d9002704 	addi	r4,sp,156
     fcc:	18c00084 	addi	r3,r3,2
     fd0:	10800044 	addi	r2,r2,1
     fd4:	41000015 	stw	r4,0(r8)
     fd8:	01000084 	movi	r4,2
     fdc:	41000115 	stw	r4,4(r8)
     fe0:	d8c02015 	stw	r3,128(sp)
     fe4:	d8801f15 	stw	r2,124(sp)
     fe8:	010001c4 	movi	r4,7
     fec:	20825816 	blt	r4,r2,1950 <___vfprintf_internal_r+0x125c>
     ff0:	42000204 	addi	r8,r8,8
     ff4:	d9003017 	ldw	r4,192(sp)
     ff8:	00802004 	movi	r2,128
     ffc:	2081bb26 	beq	r4,r2,16ec <___vfprintf_internal_r+0xff8>
    1000:	d9402a17 	ldw	r5,168(sp)
    1004:	d8802b17 	ldw	r2,172(sp)
    1008:	28adc83a 	sub	r22,r5,r2
    100c:	0580310e 	bge	zero,r22,10d4 <___vfprintf_internal_r+0x9e0>
    1010:	07000404 	movi	fp,16
    1014:	d8801f17 	ldw	r2,124(sp)
    1018:	e584360e 	bge	fp,r22,20f4 <___vfprintf_internal_r+0x1a00>
    101c:	01400074 	movhi	r5,1
    1020:	295f0384 	addi	r5,r5,31758
    1024:	dc402a15 	stw	r17,168(sp)
    1028:	d9402c15 	stw	r5,176(sp)
    102c:	b023883a 	mov	r17,r22
    1030:	04c001c4 	movi	r19,7
    1034:	a82d883a 	mov	r22,r21
    1038:	902b883a 	mov	r21,r18
    103c:	8025883a 	mov	r18,r16
    1040:	dc002d17 	ldw	r16,180(sp)
    1044:	00000306 	br	1054 <___vfprintf_internal_r+0x960>
    1048:	8c7ffc04 	addi	r17,r17,-16
    104c:	42000204 	addi	r8,r8,8
    1050:	e440110e 	bge	fp,r17,1098 <___vfprintf_internal_r+0x9a4>
    1054:	18c00404 	addi	r3,r3,16
    1058:	10800044 	addi	r2,r2,1
    105c:	45000015 	stw	r20,0(r8)
    1060:	47000115 	stw	fp,4(r8)
    1064:	d8c02015 	stw	r3,128(sp)
    1068:	d8801f15 	stw	r2,124(sp)
    106c:	98bff60e 	bge	r19,r2,1048 <__alt_data_end+0xfffd1048>
    1070:	d9801e04 	addi	r6,sp,120
    1074:	b80b883a 	mov	r5,r23
    1078:	8009883a 	mov	r4,r16
    107c:	00073e40 	call	73e4 <__sprint_r>
    1080:	103ea01e 	bne	r2,zero,b04 <__alt_data_end+0xfffd0b04>
    1084:	8c7ffc04 	addi	r17,r17,-16
    1088:	d8c02017 	ldw	r3,128(sp)
    108c:	d8801f17 	ldw	r2,124(sp)
    1090:	da000404 	addi	r8,sp,16
    1094:	e47fef16 	blt	fp,r17,1054 <__alt_data_end+0xfffd1054>
    1098:	9021883a 	mov	r16,r18
    109c:	a825883a 	mov	r18,r21
    10a0:	b02b883a 	mov	r21,r22
    10a4:	882d883a 	mov	r22,r17
    10a8:	dc402a17 	ldw	r17,168(sp)
    10ac:	d9002c17 	ldw	r4,176(sp)
    10b0:	1d87883a 	add	r3,r3,r22
    10b4:	10800044 	addi	r2,r2,1
    10b8:	41000015 	stw	r4,0(r8)
    10bc:	45800115 	stw	r22,4(r8)
    10c0:	d8c02015 	stw	r3,128(sp)
    10c4:	d8801f15 	stw	r2,124(sp)
    10c8:	010001c4 	movi	r4,7
    10cc:	20821016 	blt	r4,r2,1910 <___vfprintf_internal_r+0x121c>
    10d0:	42000204 	addi	r8,r8,8
    10d4:	9080400c 	andi	r2,r18,256
    10d8:	10013a1e 	bne	r2,zero,15c4 <___vfprintf_internal_r+0xed0>
    10dc:	d9402b17 	ldw	r5,172(sp)
    10e0:	d8801f17 	ldw	r2,124(sp)
    10e4:	44000015 	stw	r16,0(r8)
    10e8:	1947883a 	add	r3,r3,r5
    10ec:	10800044 	addi	r2,r2,1
    10f0:	41400115 	stw	r5,4(r8)
    10f4:	d8c02015 	stw	r3,128(sp)
    10f8:	d8801f15 	stw	r2,124(sp)
    10fc:	010001c4 	movi	r4,7
    1100:	2081f516 	blt	r4,r2,18d8 <___vfprintf_internal_r+0x11e4>
    1104:	42000204 	addi	r8,r8,8
    1108:	9480010c 	andi	r18,r18,4
    110c:	90003226 	beq	r18,zero,11d8 <___vfprintf_internal_r+0xae4>
    1110:	d9403117 	ldw	r5,196(sp)
    1114:	d8802917 	ldw	r2,164(sp)
    1118:	28a1c83a 	sub	r16,r5,r2
    111c:	04002e0e 	bge	zero,r16,11d8 <___vfprintf_internal_r+0xae4>
    1120:	04400404 	movi	r17,16
    1124:	d8801f17 	ldw	r2,124(sp)
    1128:	8c04c40e 	bge	r17,r16,243c <___vfprintf_internal_r+0x1d48>
    112c:	01400074 	movhi	r5,1
    1130:	295f0784 	addi	r5,r5,31774
    1134:	d9403515 	stw	r5,212(sp)
    1138:	048001c4 	movi	r18,7
    113c:	dcc02d17 	ldw	r19,180(sp)
    1140:	00000306 	br	1150 <___vfprintf_internal_r+0xa5c>
    1144:	843ffc04 	addi	r16,r16,-16
    1148:	42000204 	addi	r8,r8,8
    114c:	8c00130e 	bge	r17,r16,119c <___vfprintf_internal_r+0xaa8>
    1150:	01000074 	movhi	r4,1
    1154:	18c00404 	addi	r3,r3,16
    1158:	10800044 	addi	r2,r2,1
    115c:	211f0784 	addi	r4,r4,31774
    1160:	41000015 	stw	r4,0(r8)
    1164:	44400115 	stw	r17,4(r8)
    1168:	d8c02015 	stw	r3,128(sp)
    116c:	d8801f15 	stw	r2,124(sp)
    1170:	90bff40e 	bge	r18,r2,1144 <__alt_data_end+0xfffd1144>
    1174:	d9801e04 	addi	r6,sp,120
    1178:	b80b883a 	mov	r5,r23
    117c:	9809883a 	mov	r4,r19
    1180:	00073e40 	call	73e4 <__sprint_r>
    1184:	103e5f1e 	bne	r2,zero,b04 <__alt_data_end+0xfffd0b04>
    1188:	843ffc04 	addi	r16,r16,-16
    118c:	d8c02017 	ldw	r3,128(sp)
    1190:	d8801f17 	ldw	r2,124(sp)
    1194:	da000404 	addi	r8,sp,16
    1198:	8c3fed16 	blt	r17,r16,1150 <__alt_data_end+0xfffd1150>
    119c:	d9403517 	ldw	r5,212(sp)
    11a0:	1c07883a 	add	r3,r3,r16
    11a4:	10800044 	addi	r2,r2,1
    11a8:	41400015 	stw	r5,0(r8)
    11ac:	44000115 	stw	r16,4(r8)
    11b0:	d8c02015 	stw	r3,128(sp)
    11b4:	d8801f15 	stw	r2,124(sp)
    11b8:	010001c4 	movi	r4,7
    11bc:	2080060e 	bge	r4,r2,11d8 <___vfprintf_internal_r+0xae4>
    11c0:	d9002d17 	ldw	r4,180(sp)
    11c4:	d9801e04 	addi	r6,sp,120
    11c8:	b80b883a 	mov	r5,r23
    11cc:	00073e40 	call	73e4 <__sprint_r>
    11d0:	103e4c1e 	bne	r2,zero,b04 <__alt_data_end+0xfffd0b04>
    11d4:	d8c02017 	ldw	r3,128(sp)
    11d8:	d8803117 	ldw	r2,196(sp)
    11dc:	d9002917 	ldw	r4,164(sp)
    11e0:	1100010e 	bge	r2,r4,11e8 <___vfprintf_internal_r+0xaf4>
    11e4:	2005883a 	mov	r2,r4
    11e8:	d9402f17 	ldw	r5,188(sp)
    11ec:	288b883a 	add	r5,r5,r2
    11f0:	d9402f15 	stw	r5,188(sp)
    11f4:	1801c01e 	bne	r3,zero,18f8 <___vfprintf_internal_r+0x1204>
    11f8:	a8800007 	ldb	r2,0(r21)
    11fc:	d8001f15 	stw	zero,124(sp)
    1200:	da000404 	addi	r8,sp,16
    1204:	103d751e 	bne	r2,zero,7dc <__alt_data_end+0xfffd07dc>
    1208:	a823883a 	mov	r17,r21
    120c:	003d8b06 	br	83c <__alt_data_end+0xfffd083c>
    1210:	8025883a 	mov	r18,r16
    1214:	dc002903 	ldbu	r16,164(sp)
    1218:	e011883a 	mov	r8,fp
    121c:	84003fcc 	andi	r16,r16,255
    1220:	8005e51e 	bne	r16,zero,29b8 <___vfprintf_internal_r+0x22c4>
    1224:	94800414 	ori	r18,r18,16
    1228:	9080080c 	andi	r2,r18,32
    122c:	10022b26 	beq	r2,zero,1adc <___vfprintf_internal_r+0x13e8>
    1230:	d9002e17 	ldw	r4,184(sp)
    1234:	d9402a17 	ldw	r5,168(sp)
    1238:	d8002785 	stb	zero,158(sp)
    123c:	20c00204 	addi	r3,r4,8
    1240:	24c00017 	ldw	r19,0(r4)
    1244:	25800117 	ldw	r22,4(r4)
    1248:	28042e16 	blt	r5,zero,2304 <___vfprintf_internal_r+0x1c10>
    124c:	013fdfc4 	movi	r4,-129
    1250:	9d84b03a 	or	r2,r19,r22
    1254:	d8c02e15 	stw	r3,184(sp)
    1258:	9124703a 	and	r18,r18,r4
    125c:	0039883a 	mov	fp,zero
    1260:	103e801e 	bne	r2,zero,c64 <__alt_data_end+0xfffd0c64>
    1264:	d9002a17 	ldw	r4,168(sp)
    1268:	2002e01e 	bne	r4,zero,1dec <___vfprintf_internal_r+0x16f8>
    126c:	d8002a15 	stw	zero,168(sp)
    1270:	d8002b15 	stw	zero,172(sp)
    1274:	dc001e04 	addi	r16,sp,120
    1278:	003ef506 	br	e50 <__alt_data_end+0xfffd0e50>
    127c:	8025883a 	mov	r18,r16
    1280:	dc002903 	ldbu	r16,164(sp)
    1284:	e011883a 	mov	r8,fp
    1288:	84003fcc 	andi	r16,r16,255
    128c:	8005ba1e 	bne	r16,zero,2978 <___vfprintf_internal_r+0x2284>
    1290:	01000074 	movhi	r4,1
    1294:	211ef704 	addi	r4,r4,31708
    1298:	d9003915 	stw	r4,228(sp)
    129c:	9080080c 	andi	r2,r18,32
    12a0:	10006126 	beq	r2,zero,1428 <___vfprintf_internal_r+0xd34>
    12a4:	d9402e17 	ldw	r5,184(sp)
    12a8:	2cc00017 	ldw	r19,0(r5)
    12ac:	2d800117 	ldw	r22,4(r5)
    12b0:	29400204 	addi	r5,r5,8
    12b4:	d9402e15 	stw	r5,184(sp)
    12b8:	9080004c 	andi	r2,r18,1
    12bc:	1001ac26 	beq	r2,zero,1970 <___vfprintf_internal_r+0x127c>
    12c0:	9d84b03a 	or	r2,r19,r22
    12c4:	10038526 	beq	r2,zero,20dc <___vfprintf_internal_r+0x19e8>
    12c8:	d8c02a17 	ldw	r3,168(sp)
    12cc:	00800c04 	movi	r2,48
    12d0:	d8802705 	stb	r2,156(sp)
    12d4:	dc402745 	stb	r17,157(sp)
    12d8:	d8002785 	stb	zero,158(sp)
    12dc:	90800094 	ori	r2,r18,2
    12e0:	18047916 	blt	r3,zero,24c8 <___vfprintf_internal_r+0x1dd4>
    12e4:	00bfdfc4 	movi	r2,-129
    12e8:	90a4703a 	and	r18,r18,r2
    12ec:	94800094 	ori	r18,r18,2
    12f0:	0039883a 	mov	fp,zero
    12f4:	d9003917 	ldw	r4,228(sp)
    12f8:	dc001e04 	addi	r16,sp,120
    12fc:	988003cc 	andi	r2,r19,15
    1300:	b006973a 	slli	r3,r22,28
    1304:	2085883a 	add	r2,r4,r2
    1308:	9826d13a 	srli	r19,r19,4
    130c:	10800003 	ldbu	r2,0(r2)
    1310:	b02cd13a 	srli	r22,r22,4
    1314:	843fffc4 	addi	r16,r16,-1
    1318:	1ce6b03a 	or	r19,r3,r19
    131c:	80800005 	stb	r2,0(r16)
    1320:	9d84b03a 	or	r2,r19,r22
    1324:	103ff51e 	bne	r2,zero,12fc <__alt_data_end+0xfffd12fc>
    1328:	d8c02817 	ldw	r3,160(sp)
    132c:	1c07c83a 	sub	r3,r3,r16
    1330:	d8c02b15 	stw	r3,172(sp)
    1334:	003ec606 	br	e50 <__alt_data_end+0xfffd0e50>
    1338:	8025883a 	mov	r18,r16
    133c:	dc002903 	ldbu	r16,164(sp)
    1340:	e011883a 	mov	r8,fp
    1344:	84003fcc 	andi	r16,r16,255
    1348:	803e9626 	beq	r16,zero,da4 <__alt_data_end+0xfffd0da4>
    134c:	d8c02b03 	ldbu	r3,172(sp)
    1350:	d8c02785 	stb	r3,158(sp)
    1354:	003e9306 	br	da4 <__alt_data_end+0xfffd0da4>
    1358:	00c00044 	movi	r3,1
    135c:	d8c02905 	stb	r3,164(sp)
    1360:	00c00ac4 	movi	r3,43
    1364:	d8c02b05 	stb	r3,172(sp)
    1368:	ac400007 	ldb	r17,0(r21)
    136c:	003d4306 	br	87c <__alt_data_end+0xfffd087c>
    1370:	84000814 	ori	r16,r16,32
    1374:	ac400007 	ldb	r17,0(r21)
    1378:	003d4006 	br	87c <__alt_data_end+0xfffd087c>
    137c:	d8802e17 	ldw	r2,184(sp)
    1380:	8025883a 	mov	r18,r16
    1384:	d8002785 	stb	zero,158(sp)
    1388:	14000017 	ldw	r16,0(r2)
    138c:	e011883a 	mov	r8,fp
    1390:	14c00104 	addi	r19,r2,4
    1394:	80042d26 	beq	r16,zero,244c <___vfprintf_internal_r+0x1d58>
    1398:	d8c02a17 	ldw	r3,168(sp)
    139c:	1803e416 	blt	r3,zero,2330 <___vfprintf_internal_r+0x1c3c>
    13a0:	180d883a 	mov	r6,r3
    13a4:	000b883a 	mov	r5,zero
    13a8:	8009883a 	mov	r4,r16
    13ac:	df003d15 	stw	fp,244(sp)
    13b0:	0005b640 	call	5b64 <memchr>
    13b4:	da003d17 	ldw	r8,244(sp)
    13b8:	10046826 	beq	r2,zero,255c <___vfprintf_internal_r+0x1e68>
    13bc:	1405c83a 	sub	r2,r2,r16
    13c0:	d8802b15 	stw	r2,172(sp)
    13c4:	1003e016 	blt	r2,zero,2348 <___vfprintf_internal_r+0x1c54>
    13c8:	df002783 	ldbu	fp,158(sp)
    13cc:	d8802915 	stw	r2,164(sp)
    13d0:	dcc02e15 	stw	r19,184(sp)
    13d4:	d8002a15 	stw	zero,168(sp)
    13d8:	d8003215 	stw	zero,200(sp)
    13dc:	003ea206 	br	e68 <__alt_data_end+0xfffd0e68>
    13e0:	8025883a 	mov	r18,r16
    13e4:	dc002903 	ldbu	r16,164(sp)
    13e8:	e011883a 	mov	r8,fp
    13ec:	84003fcc 	andi	r16,r16,255
    13f0:	803f8d26 	beq	r16,zero,1228 <__alt_data_end+0xfffd1228>
    13f4:	d8c02b03 	ldbu	r3,172(sp)
    13f8:	d8c02785 	stb	r3,158(sp)
    13fc:	003f8a06 	br	1228 <__alt_data_end+0xfffd1228>
    1400:	8025883a 	mov	r18,r16
    1404:	dc002903 	ldbu	r16,164(sp)
    1408:	e011883a 	mov	r8,fp
    140c:	84003fcc 	andi	r16,r16,255
    1410:	8005661e 	bne	r16,zero,29ac <___vfprintf_internal_r+0x22b8>
    1414:	01000074 	movhi	r4,1
    1418:	211efc04 	addi	r4,r4,31728
    141c:	d9003915 	stw	r4,228(sp)
    1420:	9080080c 	andi	r2,r18,32
    1424:	103f9f1e 	bne	r2,zero,12a4 <__alt_data_end+0xfffd12a4>
    1428:	9080040c 	andi	r2,r18,16
    142c:	1002eb26 	beq	r2,zero,1fdc <___vfprintf_internal_r+0x18e8>
    1430:	d8802e17 	ldw	r2,184(sp)
    1434:	002d883a 	mov	r22,zero
    1438:	14c00017 	ldw	r19,0(r2)
    143c:	10800104 	addi	r2,r2,4
    1440:	d8802e15 	stw	r2,184(sp)
    1444:	003f9c06 	br	12b8 <__alt_data_end+0xfffd12b8>
    1448:	d8802b07 	ldb	r2,172(sp)
    144c:	1002e11e 	bne	r2,zero,1fd4 <___vfprintf_internal_r+0x18e0>
    1450:	00c00044 	movi	r3,1
    1454:	d8c02905 	stb	r3,164(sp)
    1458:	00c00804 	movi	r3,32
    145c:	d8c02b05 	stb	r3,172(sp)
    1460:	ac400007 	ldb	r17,0(r21)
    1464:	003d0506 	br	87c <__alt_data_end+0xfffd087c>
    1468:	84000054 	ori	r16,r16,1
    146c:	ac400007 	ldb	r17,0(r21)
    1470:	003d0206 	br	87c <__alt_data_end+0xfffd087c>
    1474:	8025883a 	mov	r18,r16
    1478:	dc002903 	ldbu	r16,164(sp)
    147c:	e011883a 	mov	r8,fp
    1480:	84003fcc 	andi	r16,r16,255
    1484:	803de726 	beq	r16,zero,c24 <__alt_data_end+0xfffd0c24>
    1488:	d8c02b03 	ldbu	r3,172(sp)
    148c:	d8c02785 	stb	r3,158(sp)
    1490:	003de406 	br	c24 <__alt_data_end+0xfffd0c24>
    1494:	84001014 	ori	r16,r16,64
    1498:	ac400007 	ldb	r17,0(r21)
    149c:	003cf706 	br	87c <__alt_data_end+0xfffd087c>
    14a0:	ac400007 	ldb	r17,0(r21)
    14a4:	00801b04 	movi	r2,108
    14a8:	88838f26 	beq	r17,r2,22e8 <___vfprintf_internal_r+0x1bf4>
    14ac:	84000414 	ori	r16,r16,16
    14b0:	003cf206 	br	87c <__alt_data_end+0xfffd087c>
    14b4:	8025883a 	mov	r18,r16
    14b8:	dc002903 	ldbu	r16,164(sp)
    14bc:	e011883a 	mov	r8,fp
    14c0:	84003fcc 	andi	r16,r16,255
    14c4:	80053f1e 	bne	r16,zero,29c4 <___vfprintf_internal_r+0x22d0>
    14c8:	9080080c 	andi	r2,r18,32
    14cc:	1002d226 	beq	r2,zero,2018 <___vfprintf_internal_r+0x1924>
    14d0:	d9002e17 	ldw	r4,184(sp)
    14d4:	d9402f17 	ldw	r5,188(sp)
    14d8:	20800017 	ldw	r2,0(r4)
    14dc:	2807d7fa 	srai	r3,r5,31
    14e0:	21000104 	addi	r4,r4,4
    14e4:	d9002e15 	stw	r4,184(sp)
    14e8:	11400015 	stw	r5,0(r2)
    14ec:	10c00115 	stw	r3,4(r2)
    14f0:	003cb806 	br	7d4 <__alt_data_end+0xfffd07d4>
    14f4:	d8c02e17 	ldw	r3,184(sp)
    14f8:	d9002e17 	ldw	r4,184(sp)
    14fc:	8025883a 	mov	r18,r16
    1500:	18800017 	ldw	r2,0(r3)
    1504:	21000104 	addi	r4,r4,4
    1508:	00c00044 	movi	r3,1
    150c:	e011883a 	mov	r8,fp
    1510:	d8c02915 	stw	r3,164(sp)
    1514:	d8002785 	stb	zero,158(sp)
    1518:	d8801405 	stb	r2,80(sp)
    151c:	d9002e15 	stw	r4,184(sp)
    1520:	d8c02b15 	stw	r3,172(sp)
    1524:	d8002a15 	stw	zero,168(sp)
    1528:	d8003215 	stw	zero,200(sp)
    152c:	dc001404 	addi	r16,sp,80
    1530:	0039883a 	mov	fp,zero
    1534:	003e5306 	br	e84 <__alt_data_end+0xfffd0e84>
    1538:	01000074 	movhi	r4,1
    153c:	211efc04 	addi	r4,r4,31728
    1540:	0039883a 	mov	fp,zero
    1544:	d9003915 	stw	r4,228(sp)
    1548:	04401e04 	movi	r17,120
    154c:	003f6906 	br	12f4 <__alt_data_end+0xfffd12f4>
    1550:	8025883a 	mov	r18,r16
    1554:	dc002903 	ldbu	r16,164(sp)
    1558:	e011883a 	mov	r8,fp
    155c:	84003fcc 	andi	r16,r16,255
    1560:	8005081e 	bne	r16,zero,2984 <___vfprintf_internal_r+0x2290>
    1564:	883d6126 	beq	r17,zero,aec <__alt_data_end+0xfffd0aec>
    1568:	00c00044 	movi	r3,1
    156c:	d8c02915 	stw	r3,164(sp)
    1570:	dc401405 	stb	r17,80(sp)
    1574:	d8002785 	stb	zero,158(sp)
    1578:	003fe906 	br	1520 <__alt_data_end+0xfffd1520>
    157c:	01400074 	movhi	r5,1
    1580:	295efc04 	addi	r5,r5,31728
    1584:	d9403915 	stw	r5,228(sp)
    1588:	d8c02e15 	stw	r3,184(sp)
    158c:	1025883a 	mov	r18,r2
    1590:	04401e04 	movi	r17,120
    1594:	9d84b03a 	or	r2,r19,r22
    1598:	1000fc1e 	bne	r2,zero,198c <___vfprintf_internal_r+0x1298>
    159c:	0039883a 	mov	fp,zero
    15a0:	00800084 	movi	r2,2
    15a4:	10803fcc 	andi	r2,r2,255
    15a8:	00c00044 	movi	r3,1
    15ac:	10c20f26 	beq	r2,r3,1dec <___vfprintf_internal_r+0x16f8>
    15b0:	00c00084 	movi	r3,2
    15b4:	10fd3326 	beq	r2,r3,a84 <__alt_data_end+0xfffd0a84>
    15b8:	003e0b06 	br	de8 <__alt_data_end+0xfffd0de8>
    15bc:	d8c02017 	ldw	r3,128(sp)
    15c0:	003e7106 	br	f88 <__alt_data_end+0xfffd0f88>
    15c4:	00801944 	movi	r2,101
    15c8:	14407e0e 	bge	r2,r17,17c4 <___vfprintf_internal_r+0x10d0>
    15cc:	d9003617 	ldw	r4,216(sp)
    15d0:	d9403817 	ldw	r5,224(sp)
    15d4:	000d883a 	mov	r6,zero
    15d8:	000f883a 	mov	r7,zero
    15dc:	d8c03c15 	stw	r3,240(sp)
    15e0:	da003d15 	stw	r8,244(sp)
    15e4:	000bd180 	call	bd18 <__eqdf2>
    15e8:	d8c03c17 	ldw	r3,240(sp)
    15ec:	da003d17 	ldw	r8,244(sp)
    15f0:	1000f71e 	bne	r2,zero,19d0 <___vfprintf_internal_r+0x12dc>
    15f4:	d8801f17 	ldw	r2,124(sp)
    15f8:	01000074 	movhi	r4,1
    15fc:	211f0304 	addi	r4,r4,31756
    1600:	18c00044 	addi	r3,r3,1
    1604:	10800044 	addi	r2,r2,1
    1608:	41000015 	stw	r4,0(r8)
    160c:	01000044 	movi	r4,1
    1610:	41000115 	stw	r4,4(r8)
    1614:	d8c02015 	stw	r3,128(sp)
    1618:	d8801f15 	stw	r2,124(sp)
    161c:	010001c4 	movi	r4,7
    1620:	2082b816 	blt	r4,r2,2104 <___vfprintf_internal_r+0x1a10>
    1624:	42000204 	addi	r8,r8,8
    1628:	d8802617 	ldw	r2,152(sp)
    162c:	d9403317 	ldw	r5,204(sp)
    1630:	11400216 	blt	r2,r5,163c <___vfprintf_internal_r+0xf48>
    1634:	9080004c 	andi	r2,r18,1
    1638:	103eb326 	beq	r2,zero,1108 <__alt_data_end+0xfffd1108>
    163c:	d8803717 	ldw	r2,220(sp)
    1640:	d9003417 	ldw	r4,208(sp)
    1644:	d9403717 	ldw	r5,220(sp)
    1648:	1887883a 	add	r3,r3,r2
    164c:	d8801f17 	ldw	r2,124(sp)
    1650:	41000015 	stw	r4,0(r8)
    1654:	41400115 	stw	r5,4(r8)
    1658:	10800044 	addi	r2,r2,1
    165c:	d8c02015 	stw	r3,128(sp)
    1660:	d8801f15 	stw	r2,124(sp)
    1664:	010001c4 	movi	r4,7
    1668:	20832916 	blt	r4,r2,2310 <___vfprintf_internal_r+0x1c1c>
    166c:	42000204 	addi	r8,r8,8
    1670:	d8803317 	ldw	r2,204(sp)
    1674:	143fffc4 	addi	r16,r2,-1
    1678:	043ea30e 	bge	zero,r16,1108 <__alt_data_end+0xfffd1108>
    167c:	04400404 	movi	r17,16
    1680:	d8801f17 	ldw	r2,124(sp)
    1684:	8c00880e 	bge	r17,r16,18a8 <___vfprintf_internal_r+0x11b4>
    1688:	01400074 	movhi	r5,1
    168c:	295f0384 	addi	r5,r5,31758
    1690:	d9402c15 	stw	r5,176(sp)
    1694:	058001c4 	movi	r22,7
    1698:	dcc02d17 	ldw	r19,180(sp)
    169c:	00000306 	br	16ac <___vfprintf_internal_r+0xfb8>
    16a0:	42000204 	addi	r8,r8,8
    16a4:	843ffc04 	addi	r16,r16,-16
    16a8:	8c00820e 	bge	r17,r16,18b4 <___vfprintf_internal_r+0x11c0>
    16ac:	18c00404 	addi	r3,r3,16
    16b0:	10800044 	addi	r2,r2,1
    16b4:	45000015 	stw	r20,0(r8)
    16b8:	44400115 	stw	r17,4(r8)
    16bc:	d8c02015 	stw	r3,128(sp)
    16c0:	d8801f15 	stw	r2,124(sp)
    16c4:	b0bff60e 	bge	r22,r2,16a0 <__alt_data_end+0xfffd16a0>
    16c8:	d9801e04 	addi	r6,sp,120
    16cc:	b80b883a 	mov	r5,r23
    16d0:	9809883a 	mov	r4,r19
    16d4:	00073e40 	call	73e4 <__sprint_r>
    16d8:	103d0a1e 	bne	r2,zero,b04 <__alt_data_end+0xfffd0b04>
    16dc:	d8c02017 	ldw	r3,128(sp)
    16e0:	d8801f17 	ldw	r2,124(sp)
    16e4:	da000404 	addi	r8,sp,16
    16e8:	003fee06 	br	16a4 <__alt_data_end+0xfffd16a4>
    16ec:	d9403117 	ldw	r5,196(sp)
    16f0:	d8802917 	ldw	r2,164(sp)
    16f4:	28adc83a 	sub	r22,r5,r2
    16f8:	05be410e 	bge	zero,r22,1000 <__alt_data_end+0xfffd1000>
    16fc:	07000404 	movi	fp,16
    1700:	d8801f17 	ldw	r2,124(sp)
    1704:	e5838f0e 	bge	fp,r22,2544 <___vfprintf_internal_r+0x1e50>
    1708:	01400074 	movhi	r5,1
    170c:	295f0384 	addi	r5,r5,31758
    1710:	dc403015 	stw	r17,192(sp)
    1714:	d9402c15 	stw	r5,176(sp)
    1718:	b023883a 	mov	r17,r22
    171c:	04c001c4 	movi	r19,7
    1720:	a82d883a 	mov	r22,r21
    1724:	902b883a 	mov	r21,r18
    1728:	8025883a 	mov	r18,r16
    172c:	dc002d17 	ldw	r16,180(sp)
    1730:	00000306 	br	1740 <___vfprintf_internal_r+0x104c>
    1734:	8c7ffc04 	addi	r17,r17,-16
    1738:	42000204 	addi	r8,r8,8
    173c:	e440110e 	bge	fp,r17,1784 <___vfprintf_internal_r+0x1090>
    1740:	18c00404 	addi	r3,r3,16
    1744:	10800044 	addi	r2,r2,1
    1748:	45000015 	stw	r20,0(r8)
    174c:	47000115 	stw	fp,4(r8)
    1750:	d8c02015 	stw	r3,128(sp)
    1754:	d8801f15 	stw	r2,124(sp)
    1758:	98bff60e 	bge	r19,r2,1734 <__alt_data_end+0xfffd1734>
    175c:	d9801e04 	addi	r6,sp,120
    1760:	b80b883a 	mov	r5,r23
    1764:	8009883a 	mov	r4,r16
    1768:	00073e40 	call	73e4 <__sprint_r>
    176c:	103ce51e 	bne	r2,zero,b04 <__alt_data_end+0xfffd0b04>
    1770:	8c7ffc04 	addi	r17,r17,-16
    1774:	d8c02017 	ldw	r3,128(sp)
    1778:	d8801f17 	ldw	r2,124(sp)
    177c:	da000404 	addi	r8,sp,16
    1780:	e47fef16 	blt	fp,r17,1740 <__alt_data_end+0xfffd1740>
    1784:	9021883a 	mov	r16,r18
    1788:	a825883a 	mov	r18,r21
    178c:	b02b883a 	mov	r21,r22
    1790:	882d883a 	mov	r22,r17
    1794:	dc403017 	ldw	r17,192(sp)
    1798:	d9002c17 	ldw	r4,176(sp)
    179c:	1d87883a 	add	r3,r3,r22
    17a0:	10800044 	addi	r2,r2,1
    17a4:	41000015 	stw	r4,0(r8)
    17a8:	45800115 	stw	r22,4(r8)
    17ac:	d8c02015 	stw	r3,128(sp)
    17b0:	d8801f15 	stw	r2,124(sp)
    17b4:	010001c4 	movi	r4,7
    17b8:	20818e16 	blt	r4,r2,1df4 <___vfprintf_internal_r+0x1700>
    17bc:	42000204 	addi	r8,r8,8
    17c0:	003e0f06 	br	1000 <__alt_data_end+0xfffd1000>
    17c4:	d9403317 	ldw	r5,204(sp)
    17c8:	00800044 	movi	r2,1
    17cc:	18c00044 	addi	r3,r3,1
    17d0:	1141530e 	bge	r2,r5,1d20 <___vfprintf_internal_r+0x162c>
    17d4:	dc401f17 	ldw	r17,124(sp)
    17d8:	00800044 	movi	r2,1
    17dc:	40800115 	stw	r2,4(r8)
    17e0:	8c400044 	addi	r17,r17,1
    17e4:	44000015 	stw	r16,0(r8)
    17e8:	d8c02015 	stw	r3,128(sp)
    17ec:	dc401f15 	stw	r17,124(sp)
    17f0:	008001c4 	movi	r2,7
    17f4:	14416b16 	blt	r2,r17,1da4 <___vfprintf_internal_r+0x16b0>
    17f8:	42000204 	addi	r8,r8,8
    17fc:	d8803717 	ldw	r2,220(sp)
    1800:	d9003417 	ldw	r4,208(sp)
    1804:	8c400044 	addi	r17,r17,1
    1808:	10c7883a 	add	r3,r2,r3
    180c:	40800115 	stw	r2,4(r8)
    1810:	41000015 	stw	r4,0(r8)
    1814:	d8c02015 	stw	r3,128(sp)
    1818:	dc401f15 	stw	r17,124(sp)
    181c:	008001c4 	movi	r2,7
    1820:	14416916 	blt	r2,r17,1dc8 <___vfprintf_internal_r+0x16d4>
    1824:	45800204 	addi	r22,r8,8
    1828:	d9003617 	ldw	r4,216(sp)
    182c:	d9403817 	ldw	r5,224(sp)
    1830:	000d883a 	mov	r6,zero
    1834:	000f883a 	mov	r7,zero
    1838:	d8c03c15 	stw	r3,240(sp)
    183c:	000bd180 	call	bd18 <__eqdf2>
    1840:	d8c03c17 	ldw	r3,240(sp)
    1844:	1000bc26 	beq	r2,zero,1b38 <___vfprintf_internal_r+0x1444>
    1848:	d9403317 	ldw	r5,204(sp)
    184c:	84000044 	addi	r16,r16,1
    1850:	8c400044 	addi	r17,r17,1
    1854:	28bfffc4 	addi	r2,r5,-1
    1858:	1887883a 	add	r3,r3,r2
    185c:	b0800115 	stw	r2,4(r22)
    1860:	b4000015 	stw	r16,0(r22)
    1864:	d8c02015 	stw	r3,128(sp)
    1868:	dc401f15 	stw	r17,124(sp)
    186c:	008001c4 	movi	r2,7
    1870:	14414316 	blt	r2,r17,1d80 <___vfprintf_internal_r+0x168c>
    1874:	b5800204 	addi	r22,r22,8
    1878:	d9003a17 	ldw	r4,232(sp)
    187c:	df0022c4 	addi	fp,sp,139
    1880:	8c400044 	addi	r17,r17,1
    1884:	20c7883a 	add	r3,r4,r3
    1888:	b7000015 	stw	fp,0(r22)
    188c:	b1000115 	stw	r4,4(r22)
    1890:	d8c02015 	stw	r3,128(sp)
    1894:	dc401f15 	stw	r17,124(sp)
    1898:	008001c4 	movi	r2,7
    189c:	14400e16 	blt	r2,r17,18d8 <___vfprintf_internal_r+0x11e4>
    18a0:	b2000204 	addi	r8,r22,8
    18a4:	003e1806 	br	1108 <__alt_data_end+0xfffd1108>
    18a8:	01000074 	movhi	r4,1
    18ac:	211f0384 	addi	r4,r4,31758
    18b0:	d9002c15 	stw	r4,176(sp)
    18b4:	d9002c17 	ldw	r4,176(sp)
    18b8:	1c07883a 	add	r3,r3,r16
    18bc:	44000115 	stw	r16,4(r8)
    18c0:	41000015 	stw	r4,0(r8)
    18c4:	10800044 	addi	r2,r2,1
    18c8:	d8c02015 	stw	r3,128(sp)
    18cc:	d8801f15 	stw	r2,124(sp)
    18d0:	010001c4 	movi	r4,7
    18d4:	20be0b0e 	bge	r4,r2,1104 <__alt_data_end+0xfffd1104>
    18d8:	d9002d17 	ldw	r4,180(sp)
    18dc:	d9801e04 	addi	r6,sp,120
    18e0:	b80b883a 	mov	r5,r23
    18e4:	00073e40 	call	73e4 <__sprint_r>
    18e8:	103c861e 	bne	r2,zero,b04 <__alt_data_end+0xfffd0b04>
    18ec:	d8c02017 	ldw	r3,128(sp)
    18f0:	da000404 	addi	r8,sp,16
    18f4:	003e0406 	br	1108 <__alt_data_end+0xfffd1108>
    18f8:	d9002d17 	ldw	r4,180(sp)
    18fc:	d9801e04 	addi	r6,sp,120
    1900:	b80b883a 	mov	r5,r23
    1904:	00073e40 	call	73e4 <__sprint_r>
    1908:	103e3b26 	beq	r2,zero,11f8 <__alt_data_end+0xfffd11f8>
    190c:	003c7d06 	br	b04 <__alt_data_end+0xfffd0b04>
    1910:	d9002d17 	ldw	r4,180(sp)
    1914:	d9801e04 	addi	r6,sp,120
    1918:	b80b883a 	mov	r5,r23
    191c:	00073e40 	call	73e4 <__sprint_r>
    1920:	103c781e 	bne	r2,zero,b04 <__alt_data_end+0xfffd0b04>
    1924:	d8c02017 	ldw	r3,128(sp)
    1928:	da000404 	addi	r8,sp,16
    192c:	003de906 	br	10d4 <__alt_data_end+0xfffd10d4>
    1930:	d9002d17 	ldw	r4,180(sp)
    1934:	d9801e04 	addi	r6,sp,120
    1938:	b80b883a 	mov	r5,r23
    193c:	00073e40 	call	73e4 <__sprint_r>
    1940:	103c701e 	bne	r2,zero,b04 <__alt_data_end+0xfffd0b04>
    1944:	d8c02017 	ldw	r3,128(sp)
    1948:	da000404 	addi	r8,sp,16
    194c:	003d9b06 	br	fbc <__alt_data_end+0xfffd0fbc>
    1950:	d9002d17 	ldw	r4,180(sp)
    1954:	d9801e04 	addi	r6,sp,120
    1958:	b80b883a 	mov	r5,r23
    195c:	00073e40 	call	73e4 <__sprint_r>
    1960:	103c681e 	bne	r2,zero,b04 <__alt_data_end+0xfffd0b04>
    1964:	d8c02017 	ldw	r3,128(sp)
    1968:	da000404 	addi	r8,sp,16
    196c:	003da106 	br	ff4 <__alt_data_end+0xfffd0ff4>
    1970:	d9402a17 	ldw	r5,168(sp)
    1974:	d8002785 	stb	zero,158(sp)
    1978:	283f0616 	blt	r5,zero,1594 <__alt_data_end+0xfffd1594>
    197c:	00ffdfc4 	movi	r3,-129
    1980:	9d84b03a 	or	r2,r19,r22
    1984:	90e4703a 	and	r18,r18,r3
    1988:	103c3b26 	beq	r2,zero,a78 <__alt_data_end+0xfffd0a78>
    198c:	0039883a 	mov	fp,zero
    1990:	003e5806 	br	12f4 <__alt_data_end+0xfffd12f4>
    1994:	9080040c 	andi	r2,r18,16
    1998:	1001b326 	beq	r2,zero,2068 <___vfprintf_internal_r+0x1974>
    199c:	d8c02e17 	ldw	r3,184(sp)
    19a0:	d9002a17 	ldw	r4,168(sp)
    19a4:	d8002785 	stb	zero,158(sp)
    19a8:	18800104 	addi	r2,r3,4
    19ac:	1cc00017 	ldw	r19,0(r3)
    19b0:	002d883a 	mov	r22,zero
    19b4:	2001b516 	blt	r4,zero,208c <___vfprintf_internal_r+0x1998>
    19b8:	00ffdfc4 	movi	r3,-129
    19bc:	d8802e15 	stw	r2,184(sp)
    19c0:	90e4703a 	and	r18,r18,r3
    19c4:	983d0526 	beq	r19,zero,ddc <__alt_data_end+0xfffd0ddc>
    19c8:	0039883a 	mov	fp,zero
    19cc:	003d0806 	br	df0 <__alt_data_end+0xfffd0df0>
    19d0:	dc402617 	ldw	r17,152(sp)
    19d4:	0441d30e 	bge	zero,r17,2124 <___vfprintf_internal_r+0x1a30>
    19d8:	dc403217 	ldw	r17,200(sp)
    19dc:	d8803317 	ldw	r2,204(sp)
    19e0:	1440010e 	bge	r2,r17,19e8 <___vfprintf_internal_r+0x12f4>
    19e4:	1023883a 	mov	r17,r2
    19e8:	04400a0e 	bge	zero,r17,1a14 <___vfprintf_internal_r+0x1320>
    19ec:	d8801f17 	ldw	r2,124(sp)
    19f0:	1c47883a 	add	r3,r3,r17
    19f4:	44000015 	stw	r16,0(r8)
    19f8:	10800044 	addi	r2,r2,1
    19fc:	44400115 	stw	r17,4(r8)
    1a00:	d8c02015 	stw	r3,128(sp)
    1a04:	d8801f15 	stw	r2,124(sp)
    1a08:	010001c4 	movi	r4,7
    1a0c:	20826516 	blt	r4,r2,23a4 <___vfprintf_internal_r+0x1cb0>
    1a10:	42000204 	addi	r8,r8,8
    1a14:	88026116 	blt	r17,zero,239c <___vfprintf_internal_r+0x1ca8>
    1a18:	d9003217 	ldw	r4,200(sp)
    1a1c:	2463c83a 	sub	r17,r4,r17
    1a20:	04407b0e 	bge	zero,r17,1c10 <___vfprintf_internal_r+0x151c>
    1a24:	05800404 	movi	r22,16
    1a28:	d8801f17 	ldw	r2,124(sp)
    1a2c:	b4419d0e 	bge	r22,r17,20a4 <___vfprintf_internal_r+0x19b0>
    1a30:	01000074 	movhi	r4,1
    1a34:	211f0384 	addi	r4,r4,31758
    1a38:	d9002c15 	stw	r4,176(sp)
    1a3c:	070001c4 	movi	fp,7
    1a40:	dcc02d17 	ldw	r19,180(sp)
    1a44:	00000306 	br	1a54 <___vfprintf_internal_r+0x1360>
    1a48:	42000204 	addi	r8,r8,8
    1a4c:	8c7ffc04 	addi	r17,r17,-16
    1a50:	b441970e 	bge	r22,r17,20b0 <___vfprintf_internal_r+0x19bc>
    1a54:	18c00404 	addi	r3,r3,16
    1a58:	10800044 	addi	r2,r2,1
    1a5c:	45000015 	stw	r20,0(r8)
    1a60:	45800115 	stw	r22,4(r8)
    1a64:	d8c02015 	stw	r3,128(sp)
    1a68:	d8801f15 	stw	r2,124(sp)
    1a6c:	e0bff60e 	bge	fp,r2,1a48 <__alt_data_end+0xfffd1a48>
    1a70:	d9801e04 	addi	r6,sp,120
    1a74:	b80b883a 	mov	r5,r23
    1a78:	9809883a 	mov	r4,r19
    1a7c:	00073e40 	call	73e4 <__sprint_r>
    1a80:	103c201e 	bne	r2,zero,b04 <__alt_data_end+0xfffd0b04>
    1a84:	d8c02017 	ldw	r3,128(sp)
    1a88:	d8801f17 	ldw	r2,124(sp)
    1a8c:	da000404 	addi	r8,sp,16
    1a90:	003fee06 	br	1a4c <__alt_data_end+0xfffd1a4c>
    1a94:	d9002d17 	ldw	r4,180(sp)
    1a98:	d9801e04 	addi	r6,sp,120
    1a9c:	b80b883a 	mov	r5,r23
    1aa0:	00073e40 	call	73e4 <__sprint_r>
    1aa4:	103c171e 	bne	r2,zero,b04 <__alt_data_end+0xfffd0b04>
    1aa8:	d8c02017 	ldw	r3,128(sp)
    1aac:	df002787 	ldb	fp,158(sp)
    1ab0:	da000404 	addi	r8,sp,16
    1ab4:	003d3406 	br	f88 <__alt_data_end+0xfffd0f88>
    1ab8:	9080040c 	andi	r2,r18,16
    1abc:	10016126 	beq	r2,zero,2044 <___vfprintf_internal_r+0x1950>
    1ac0:	d9402e17 	ldw	r5,184(sp)
    1ac4:	2cc00017 	ldw	r19,0(r5)
    1ac8:	29400104 	addi	r5,r5,4
    1acc:	d9402e15 	stw	r5,184(sp)
    1ad0:	982dd7fa 	srai	r22,r19,31
    1ad4:	b005883a 	mov	r2,r22
    1ad8:	003c5a06 	br	c44 <__alt_data_end+0xfffd0c44>
    1adc:	9080040c 	andi	r2,r18,16
    1ae0:	10003526 	beq	r2,zero,1bb8 <___vfprintf_internal_r+0x14c4>
    1ae4:	d8c02e17 	ldw	r3,184(sp)
    1ae8:	d9002a17 	ldw	r4,168(sp)
    1aec:	d8002785 	stb	zero,158(sp)
    1af0:	18800104 	addi	r2,r3,4
    1af4:	1cc00017 	ldw	r19,0(r3)
    1af8:	002d883a 	mov	r22,zero
    1afc:	20003716 	blt	r4,zero,1bdc <___vfprintf_internal_r+0x14e8>
    1b00:	00ffdfc4 	movi	r3,-129
    1b04:	d8802e15 	stw	r2,184(sp)
    1b08:	90e4703a 	and	r18,r18,r3
    1b0c:	0039883a 	mov	fp,zero
    1b10:	983dd426 	beq	r19,zero,1264 <__alt_data_end+0xfffd1264>
    1b14:	00800244 	movi	r2,9
    1b18:	14fc5336 	bltu	r2,r19,c68 <__alt_data_end+0xfffd0c68>
    1b1c:	d8c02817 	ldw	r3,160(sp)
    1b20:	dc001dc4 	addi	r16,sp,119
    1b24:	9cc00c04 	addi	r19,r19,48
    1b28:	1c07c83a 	sub	r3,r3,r16
    1b2c:	dcc01dc5 	stb	r19,119(sp)
    1b30:	d8c02b15 	stw	r3,172(sp)
    1b34:	003cc606 	br	e50 <__alt_data_end+0xfffd0e50>
    1b38:	d8803317 	ldw	r2,204(sp)
    1b3c:	143fffc4 	addi	r16,r2,-1
    1b40:	043f4d0e 	bge	zero,r16,1878 <__alt_data_end+0xfffd1878>
    1b44:	07000404 	movi	fp,16
    1b48:	e400810e 	bge	fp,r16,1d50 <___vfprintf_internal_r+0x165c>
    1b4c:	01400074 	movhi	r5,1
    1b50:	295f0384 	addi	r5,r5,31758
    1b54:	d9402c15 	stw	r5,176(sp)
    1b58:	01c001c4 	movi	r7,7
    1b5c:	dcc02d17 	ldw	r19,180(sp)
    1b60:	00000306 	br	1b70 <___vfprintf_internal_r+0x147c>
    1b64:	b5800204 	addi	r22,r22,8
    1b68:	843ffc04 	addi	r16,r16,-16
    1b6c:	e4007b0e 	bge	fp,r16,1d5c <___vfprintf_internal_r+0x1668>
    1b70:	18c00404 	addi	r3,r3,16
    1b74:	8c400044 	addi	r17,r17,1
    1b78:	b5000015 	stw	r20,0(r22)
    1b7c:	b7000115 	stw	fp,4(r22)
    1b80:	d8c02015 	stw	r3,128(sp)
    1b84:	dc401f15 	stw	r17,124(sp)
    1b88:	3c7ff60e 	bge	r7,r17,1b64 <__alt_data_end+0xfffd1b64>
    1b8c:	d9801e04 	addi	r6,sp,120
    1b90:	b80b883a 	mov	r5,r23
    1b94:	9809883a 	mov	r4,r19
    1b98:	d9c03c15 	stw	r7,240(sp)
    1b9c:	00073e40 	call	73e4 <__sprint_r>
    1ba0:	d9c03c17 	ldw	r7,240(sp)
    1ba4:	103bd71e 	bne	r2,zero,b04 <__alt_data_end+0xfffd0b04>
    1ba8:	d8c02017 	ldw	r3,128(sp)
    1bac:	dc401f17 	ldw	r17,124(sp)
    1bb0:	dd800404 	addi	r22,sp,16
    1bb4:	003fec06 	br	1b68 <__alt_data_end+0xfffd1b68>
    1bb8:	9080100c 	andi	r2,r18,64
    1bbc:	d8002785 	stb	zero,158(sp)
    1bc0:	10010e26 	beq	r2,zero,1ffc <___vfprintf_internal_r+0x1908>
    1bc4:	d9402e17 	ldw	r5,184(sp)
    1bc8:	d8c02a17 	ldw	r3,168(sp)
    1bcc:	002d883a 	mov	r22,zero
    1bd0:	28800104 	addi	r2,r5,4
    1bd4:	2cc0000b 	ldhu	r19,0(r5)
    1bd8:	183fc90e 	bge	r3,zero,1b00 <__alt_data_end+0xfffd1b00>
    1bdc:	d8802e15 	stw	r2,184(sp)
    1be0:	0039883a 	mov	fp,zero
    1be4:	9d84b03a 	or	r2,r19,r22
    1be8:	103c1e1e 	bne	r2,zero,c64 <__alt_data_end+0xfffd0c64>
    1bec:	00800044 	movi	r2,1
    1bf0:	003e6c06 	br	15a4 <__alt_data_end+0xfffd15a4>
    1bf4:	d9002d17 	ldw	r4,180(sp)
    1bf8:	d9801e04 	addi	r6,sp,120
    1bfc:	b80b883a 	mov	r5,r23
    1c00:	00073e40 	call	73e4 <__sprint_r>
    1c04:	103bbf1e 	bne	r2,zero,b04 <__alt_data_end+0xfffd0b04>
    1c08:	d8c02017 	ldw	r3,128(sp)
    1c0c:	da000404 	addi	r8,sp,16
    1c10:	d9003217 	ldw	r4,200(sp)
    1c14:	d8802617 	ldw	r2,152(sp)
    1c18:	d9403317 	ldw	r5,204(sp)
    1c1c:	8123883a 	add	r17,r16,r4
    1c20:	11400216 	blt	r2,r5,1c2c <___vfprintf_internal_r+0x1538>
    1c24:	9100004c 	andi	r4,r18,1
    1c28:	20000d26 	beq	r4,zero,1c60 <___vfprintf_internal_r+0x156c>
    1c2c:	d9003717 	ldw	r4,220(sp)
    1c30:	d9403417 	ldw	r5,208(sp)
    1c34:	1907883a 	add	r3,r3,r4
    1c38:	d9001f17 	ldw	r4,124(sp)
    1c3c:	41400015 	stw	r5,0(r8)
    1c40:	d9403717 	ldw	r5,220(sp)
    1c44:	21000044 	addi	r4,r4,1
    1c48:	d8c02015 	stw	r3,128(sp)
    1c4c:	41400115 	stw	r5,4(r8)
    1c50:	d9001f15 	stw	r4,124(sp)
    1c54:	014001c4 	movi	r5,7
    1c58:	2901e816 	blt	r5,r4,23fc <___vfprintf_internal_r+0x1d08>
    1c5c:	42000204 	addi	r8,r8,8
    1c60:	d9003317 	ldw	r4,204(sp)
    1c64:	8121883a 	add	r16,r16,r4
    1c68:	2085c83a 	sub	r2,r4,r2
    1c6c:	8461c83a 	sub	r16,r16,r17
    1c70:	1400010e 	bge	r2,r16,1c78 <___vfprintf_internal_r+0x1584>
    1c74:	1021883a 	mov	r16,r2
    1c78:	04000a0e 	bge	zero,r16,1ca4 <___vfprintf_internal_r+0x15b0>
    1c7c:	d9001f17 	ldw	r4,124(sp)
    1c80:	1c07883a 	add	r3,r3,r16
    1c84:	44400015 	stw	r17,0(r8)
    1c88:	21000044 	addi	r4,r4,1
    1c8c:	44000115 	stw	r16,4(r8)
    1c90:	d8c02015 	stw	r3,128(sp)
    1c94:	d9001f15 	stw	r4,124(sp)
    1c98:	014001c4 	movi	r5,7
    1c9c:	2901fb16 	blt	r5,r4,248c <___vfprintf_internal_r+0x1d98>
    1ca0:	42000204 	addi	r8,r8,8
    1ca4:	8001f716 	blt	r16,zero,2484 <___vfprintf_internal_r+0x1d90>
    1ca8:	1421c83a 	sub	r16,r2,r16
    1cac:	043d160e 	bge	zero,r16,1108 <__alt_data_end+0xfffd1108>
    1cb0:	04400404 	movi	r17,16
    1cb4:	d8801f17 	ldw	r2,124(sp)
    1cb8:	8c3efb0e 	bge	r17,r16,18a8 <__alt_data_end+0xfffd18a8>
    1cbc:	01400074 	movhi	r5,1
    1cc0:	295f0384 	addi	r5,r5,31758
    1cc4:	d9402c15 	stw	r5,176(sp)
    1cc8:	058001c4 	movi	r22,7
    1ccc:	dcc02d17 	ldw	r19,180(sp)
    1cd0:	00000306 	br	1ce0 <___vfprintf_internal_r+0x15ec>
    1cd4:	42000204 	addi	r8,r8,8
    1cd8:	843ffc04 	addi	r16,r16,-16
    1cdc:	8c3ef50e 	bge	r17,r16,18b4 <__alt_data_end+0xfffd18b4>
    1ce0:	18c00404 	addi	r3,r3,16
    1ce4:	10800044 	addi	r2,r2,1
    1ce8:	45000015 	stw	r20,0(r8)
    1cec:	44400115 	stw	r17,4(r8)
    1cf0:	d8c02015 	stw	r3,128(sp)
    1cf4:	d8801f15 	stw	r2,124(sp)
    1cf8:	b0bff60e 	bge	r22,r2,1cd4 <__alt_data_end+0xfffd1cd4>
    1cfc:	d9801e04 	addi	r6,sp,120
    1d00:	b80b883a 	mov	r5,r23
    1d04:	9809883a 	mov	r4,r19
    1d08:	00073e40 	call	73e4 <__sprint_r>
    1d0c:	103b7d1e 	bne	r2,zero,b04 <__alt_data_end+0xfffd0b04>
    1d10:	d8c02017 	ldw	r3,128(sp)
    1d14:	d8801f17 	ldw	r2,124(sp)
    1d18:	da000404 	addi	r8,sp,16
    1d1c:	003fee06 	br	1cd8 <__alt_data_end+0xfffd1cd8>
    1d20:	9088703a 	and	r4,r18,r2
    1d24:	203eab1e 	bne	r4,zero,17d4 <__alt_data_end+0xfffd17d4>
    1d28:	dc401f17 	ldw	r17,124(sp)
    1d2c:	40800115 	stw	r2,4(r8)
    1d30:	44000015 	stw	r16,0(r8)
    1d34:	8c400044 	addi	r17,r17,1
    1d38:	d8c02015 	stw	r3,128(sp)
    1d3c:	dc401f15 	stw	r17,124(sp)
    1d40:	008001c4 	movi	r2,7
    1d44:	14400e16 	blt	r2,r17,1d80 <___vfprintf_internal_r+0x168c>
    1d48:	45800204 	addi	r22,r8,8
    1d4c:	003eca06 	br	1878 <__alt_data_end+0xfffd1878>
    1d50:	01000074 	movhi	r4,1
    1d54:	211f0384 	addi	r4,r4,31758
    1d58:	d9002c15 	stw	r4,176(sp)
    1d5c:	d8802c17 	ldw	r2,176(sp)
    1d60:	1c07883a 	add	r3,r3,r16
    1d64:	8c400044 	addi	r17,r17,1
    1d68:	b0800015 	stw	r2,0(r22)
    1d6c:	b4000115 	stw	r16,4(r22)
    1d70:	d8c02015 	stw	r3,128(sp)
    1d74:	dc401f15 	stw	r17,124(sp)
    1d78:	008001c4 	movi	r2,7
    1d7c:	147ebd0e 	bge	r2,r17,1874 <__alt_data_end+0xfffd1874>
    1d80:	d9002d17 	ldw	r4,180(sp)
    1d84:	d9801e04 	addi	r6,sp,120
    1d88:	b80b883a 	mov	r5,r23
    1d8c:	00073e40 	call	73e4 <__sprint_r>
    1d90:	103b5c1e 	bne	r2,zero,b04 <__alt_data_end+0xfffd0b04>
    1d94:	d8c02017 	ldw	r3,128(sp)
    1d98:	dc401f17 	ldw	r17,124(sp)
    1d9c:	dd800404 	addi	r22,sp,16
    1da0:	003eb506 	br	1878 <__alt_data_end+0xfffd1878>
    1da4:	d9002d17 	ldw	r4,180(sp)
    1da8:	d9801e04 	addi	r6,sp,120
    1dac:	b80b883a 	mov	r5,r23
    1db0:	00073e40 	call	73e4 <__sprint_r>
    1db4:	103b531e 	bne	r2,zero,b04 <__alt_data_end+0xfffd0b04>
    1db8:	d8c02017 	ldw	r3,128(sp)
    1dbc:	dc401f17 	ldw	r17,124(sp)
    1dc0:	da000404 	addi	r8,sp,16
    1dc4:	003e8d06 	br	17fc <__alt_data_end+0xfffd17fc>
    1dc8:	d9002d17 	ldw	r4,180(sp)
    1dcc:	d9801e04 	addi	r6,sp,120
    1dd0:	b80b883a 	mov	r5,r23
    1dd4:	00073e40 	call	73e4 <__sprint_r>
    1dd8:	103b4a1e 	bne	r2,zero,b04 <__alt_data_end+0xfffd0b04>
    1ddc:	d8c02017 	ldw	r3,128(sp)
    1de0:	dc401f17 	ldw	r17,124(sp)
    1de4:	dd800404 	addi	r22,sp,16
    1de8:	003e8f06 	br	1828 <__alt_data_end+0xfffd1828>
    1dec:	0027883a 	mov	r19,zero
    1df0:	003f4a06 	br	1b1c <__alt_data_end+0xfffd1b1c>
    1df4:	d9002d17 	ldw	r4,180(sp)
    1df8:	d9801e04 	addi	r6,sp,120
    1dfc:	b80b883a 	mov	r5,r23
    1e00:	00073e40 	call	73e4 <__sprint_r>
    1e04:	103b3f1e 	bne	r2,zero,b04 <__alt_data_end+0xfffd0b04>
    1e08:	d8c02017 	ldw	r3,128(sp)
    1e0c:	da000404 	addi	r8,sp,16
    1e10:	003c7b06 	br	1000 <__alt_data_end+0xfffd1000>
    1e14:	d9402a17 	ldw	r5,168(sp)
    1e18:	04e7c83a 	sub	r19,zero,r19
    1e1c:	07000b44 	movi	fp,45
    1e20:	9804c03a 	cmpne	r2,r19,zero
    1e24:	05adc83a 	sub	r22,zero,r22
    1e28:	df002785 	stb	fp,158(sp)
    1e2c:	b0adc83a 	sub	r22,r22,r2
    1e30:	28017b16 	blt	r5,zero,2420 <___vfprintf_internal_r+0x1d2c>
    1e34:	00bfdfc4 	movi	r2,-129
    1e38:	90a4703a 	and	r18,r18,r2
    1e3c:	003b8906 	br	c64 <__alt_data_end+0xfffd0c64>
    1e40:	d9003617 	ldw	r4,216(sp)
    1e44:	d9403817 	ldw	r5,224(sp)
    1e48:	da003d15 	stw	r8,244(sp)
    1e4c:	0006f700 	call	6f70 <__fpclassifyd>
    1e50:	da003d17 	ldw	r8,244(sp)
    1e54:	1000f026 	beq	r2,zero,2218 <___vfprintf_internal_r+0x1b24>
    1e58:	d9002a17 	ldw	r4,168(sp)
    1e5c:	05bff7c4 	movi	r22,-33
    1e60:	00bfffc4 	movi	r2,-1
    1e64:	8dac703a 	and	r22,r17,r22
    1e68:	20820026 	beq	r4,r2,266c <___vfprintf_internal_r+0x1f78>
    1e6c:	008011c4 	movi	r2,71
    1e70:	b081f726 	beq	r22,r2,2650 <___vfprintf_internal_r+0x1f5c>
    1e74:	d9003817 	ldw	r4,224(sp)
    1e78:	90c04014 	ori	r3,r18,256
    1e7c:	d8c02c15 	stw	r3,176(sp)
    1e80:	20021516 	blt	r4,zero,26d8 <___vfprintf_internal_r+0x1fe4>
    1e84:	dcc03817 	ldw	r19,224(sp)
    1e88:	d8002905 	stb	zero,164(sp)
    1e8c:	00801984 	movi	r2,102
    1e90:	8881f926 	beq	r17,r2,2678 <___vfprintf_internal_r+0x1f84>
    1e94:	00801184 	movi	r2,70
    1e98:	88821c26 	beq	r17,r2,270c <___vfprintf_internal_r+0x2018>
    1e9c:	00801144 	movi	r2,69
    1ea0:	b081ef26 	beq	r22,r2,2660 <___vfprintf_internal_r+0x1f6c>
    1ea4:	d8c02a17 	ldw	r3,168(sp)
    1ea8:	d8802104 	addi	r2,sp,132
    1eac:	d8800315 	stw	r2,12(sp)
    1eb0:	d9403617 	ldw	r5,216(sp)
    1eb4:	d8802504 	addi	r2,sp,148
    1eb8:	d9002d17 	ldw	r4,180(sp)
    1ebc:	d8800215 	stw	r2,8(sp)
    1ec0:	d8802604 	addi	r2,sp,152
    1ec4:	d8c00015 	stw	r3,0(sp)
    1ec8:	d8800115 	stw	r2,4(sp)
    1ecc:	01c00084 	movi	r7,2
    1ed0:	980d883a 	mov	r6,r19
    1ed4:	d8c03c15 	stw	r3,240(sp)
    1ed8:	da003d15 	stw	r8,244(sp)
    1edc:	0002e240 	call	2e24 <_dtoa_r>
    1ee0:	1021883a 	mov	r16,r2
    1ee4:	008019c4 	movi	r2,103
    1ee8:	d8c03c17 	ldw	r3,240(sp)
    1eec:	da003d17 	ldw	r8,244(sp)
    1ef0:	88817126 	beq	r17,r2,24b8 <___vfprintf_internal_r+0x1dc4>
    1ef4:	008011c4 	movi	r2,71
    1ef8:	88829126 	beq	r17,r2,2940 <___vfprintf_internal_r+0x224c>
    1efc:	80f9883a 	add	fp,r16,r3
    1f00:	d9003617 	ldw	r4,216(sp)
    1f04:	000d883a 	mov	r6,zero
    1f08:	000f883a 	mov	r7,zero
    1f0c:	980b883a 	mov	r5,r19
    1f10:	da003d15 	stw	r8,244(sp)
    1f14:	000bd180 	call	bd18 <__eqdf2>
    1f18:	da003d17 	ldw	r8,244(sp)
    1f1c:	10018d26 	beq	r2,zero,2554 <___vfprintf_internal_r+0x1e60>
    1f20:	d8802117 	ldw	r2,132(sp)
    1f24:	1700062e 	bgeu	r2,fp,1f40 <___vfprintf_internal_r+0x184c>
    1f28:	01000c04 	movi	r4,48
    1f2c:	10c00044 	addi	r3,r2,1
    1f30:	d8c02115 	stw	r3,132(sp)
    1f34:	11000005 	stb	r4,0(r2)
    1f38:	d8802117 	ldw	r2,132(sp)
    1f3c:	173ffb36 	bltu	r2,fp,1f2c <__alt_data_end+0xfffd1f2c>
    1f40:	1405c83a 	sub	r2,r2,r16
    1f44:	d8803315 	stw	r2,204(sp)
    1f48:	008011c4 	movi	r2,71
    1f4c:	b0817626 	beq	r22,r2,2528 <___vfprintf_internal_r+0x1e34>
    1f50:	00801944 	movi	r2,101
    1f54:	1442800e 	bge	r2,r17,2958 <___vfprintf_internal_r+0x2264>
    1f58:	d8c02617 	ldw	r3,152(sp)
    1f5c:	00801984 	movi	r2,102
    1f60:	d8c03215 	stw	r3,200(sp)
    1f64:	8881fe26 	beq	r17,r2,2760 <___vfprintf_internal_r+0x206c>
    1f68:	d8c03217 	ldw	r3,200(sp)
    1f6c:	d9003317 	ldw	r4,204(sp)
    1f70:	1901dd16 	blt	r3,r4,26e8 <___vfprintf_internal_r+0x1ff4>
    1f74:	9480004c 	andi	r18,r18,1
    1f78:	90022b1e 	bne	r18,zero,2828 <___vfprintf_internal_r+0x2134>
    1f7c:	1805883a 	mov	r2,r3
    1f80:	18028316 	blt	r3,zero,2990 <___vfprintf_internal_r+0x229c>
    1f84:	d8c03217 	ldw	r3,200(sp)
    1f88:	044019c4 	movi	r17,103
    1f8c:	d8c02b15 	stw	r3,172(sp)
    1f90:	df002907 	ldb	fp,164(sp)
    1f94:	e001531e 	bne	fp,zero,24e4 <___vfprintf_internal_r+0x1df0>
    1f98:	df002783 	ldbu	fp,158(sp)
    1f9c:	d8802915 	stw	r2,164(sp)
    1fa0:	dc802c17 	ldw	r18,176(sp)
    1fa4:	d8002a15 	stw	zero,168(sp)
    1fa8:	003baf06 	br	e68 <__alt_data_end+0xfffd0e68>
    1fac:	d8c02e17 	ldw	r3,184(sp)
    1fb0:	d9002e17 	ldw	r4,184(sp)
    1fb4:	d9402e17 	ldw	r5,184(sp)
    1fb8:	18c00017 	ldw	r3,0(r3)
    1fbc:	21000117 	ldw	r4,4(r4)
    1fc0:	29400204 	addi	r5,r5,8
    1fc4:	d8c03615 	stw	r3,216(sp)
    1fc8:	d9003815 	stw	r4,224(sp)
    1fcc:	d9402e15 	stw	r5,184(sp)
    1fd0:	003b5006 	br	d14 <__alt_data_end+0xfffd0d14>
    1fd4:	ac400007 	ldb	r17,0(r21)
    1fd8:	003a2806 	br	87c <__alt_data_end+0xfffd087c>
    1fdc:	9080100c 	andi	r2,r18,64
    1fe0:	1000a826 	beq	r2,zero,2284 <___vfprintf_internal_r+0x1b90>
    1fe4:	d8c02e17 	ldw	r3,184(sp)
    1fe8:	002d883a 	mov	r22,zero
    1fec:	1cc0000b 	ldhu	r19,0(r3)
    1ff0:	18c00104 	addi	r3,r3,4
    1ff4:	d8c02e15 	stw	r3,184(sp)
    1ff8:	003caf06 	br	12b8 <__alt_data_end+0xfffd12b8>
    1ffc:	d9002e17 	ldw	r4,184(sp)
    2000:	d9402a17 	ldw	r5,168(sp)
    2004:	002d883a 	mov	r22,zero
    2008:	20800104 	addi	r2,r4,4
    200c:	24c00017 	ldw	r19,0(r4)
    2010:	283ebb0e 	bge	r5,zero,1b00 <__alt_data_end+0xfffd1b00>
    2014:	003ef106 	br	1bdc <__alt_data_end+0xfffd1bdc>
    2018:	9080040c 	andi	r2,r18,16
    201c:	1000921e 	bne	r2,zero,2268 <___vfprintf_internal_r+0x1b74>
    2020:	9480100c 	andi	r18,r18,64
    2024:	90013926 	beq	r18,zero,250c <___vfprintf_internal_r+0x1e18>
    2028:	d9402e17 	ldw	r5,184(sp)
    202c:	d8c02f17 	ldw	r3,188(sp)
    2030:	28800017 	ldw	r2,0(r5)
    2034:	29400104 	addi	r5,r5,4
    2038:	d9402e15 	stw	r5,184(sp)
    203c:	10c0000d 	sth	r3,0(r2)
    2040:	0039e406 	br	7d4 <__alt_data_end+0xfffd07d4>
    2044:	9080100c 	andi	r2,r18,64
    2048:	10008026 	beq	r2,zero,224c <___vfprintf_internal_r+0x1b58>
    204c:	d8802e17 	ldw	r2,184(sp)
    2050:	14c0000f 	ldh	r19,0(r2)
    2054:	10800104 	addi	r2,r2,4
    2058:	d8802e15 	stw	r2,184(sp)
    205c:	982dd7fa 	srai	r22,r19,31
    2060:	b005883a 	mov	r2,r22
    2064:	003af706 	br	c44 <__alt_data_end+0xfffd0c44>
    2068:	9080100c 	andi	r2,r18,64
    206c:	d8002785 	stb	zero,158(sp)
    2070:	10008a1e 	bne	r2,zero,229c <___vfprintf_internal_r+0x1ba8>
    2074:	d9002e17 	ldw	r4,184(sp)
    2078:	d9402a17 	ldw	r5,168(sp)
    207c:	002d883a 	mov	r22,zero
    2080:	20800104 	addi	r2,r4,4
    2084:	24c00017 	ldw	r19,0(r4)
    2088:	283e4b0e 	bge	r5,zero,19b8 <__alt_data_end+0xfffd19b8>
    208c:	9d86b03a 	or	r3,r19,r22
    2090:	d8802e15 	stw	r2,184(sp)
    2094:	183e4c1e 	bne	r3,zero,19c8 <__alt_data_end+0xfffd19c8>
    2098:	0039883a 	mov	fp,zero
    209c:	0005883a 	mov	r2,zero
    20a0:	003d4006 	br	15a4 <__alt_data_end+0xfffd15a4>
    20a4:	01400074 	movhi	r5,1
    20a8:	295f0384 	addi	r5,r5,31758
    20ac:	d9402c15 	stw	r5,176(sp)
    20b0:	d9402c17 	ldw	r5,176(sp)
    20b4:	1c47883a 	add	r3,r3,r17
    20b8:	10800044 	addi	r2,r2,1
    20bc:	41400015 	stw	r5,0(r8)
    20c0:	44400115 	stw	r17,4(r8)
    20c4:	d8c02015 	stw	r3,128(sp)
    20c8:	d8801f15 	stw	r2,124(sp)
    20cc:	010001c4 	movi	r4,7
    20d0:	20bec816 	blt	r4,r2,1bf4 <__alt_data_end+0xfffd1bf4>
    20d4:	42000204 	addi	r8,r8,8
    20d8:	003ecd06 	br	1c10 <__alt_data_end+0xfffd1c10>
    20dc:	d9002a17 	ldw	r4,168(sp)
    20e0:	d8002785 	stb	zero,158(sp)
    20e4:	203d2d16 	blt	r4,zero,159c <__alt_data_end+0xfffd159c>
    20e8:	00bfdfc4 	movi	r2,-129
    20ec:	90a4703a 	and	r18,r18,r2
    20f0:	003a6106 	br	a78 <__alt_data_end+0xfffd0a78>
    20f4:	01000074 	movhi	r4,1
    20f8:	211f0384 	addi	r4,r4,31758
    20fc:	d9002c15 	stw	r4,176(sp)
    2100:	003bea06 	br	10ac <__alt_data_end+0xfffd10ac>
    2104:	d9002d17 	ldw	r4,180(sp)
    2108:	d9801e04 	addi	r6,sp,120
    210c:	b80b883a 	mov	r5,r23
    2110:	00073e40 	call	73e4 <__sprint_r>
    2114:	103a7b1e 	bne	r2,zero,b04 <__alt_data_end+0xfffd0b04>
    2118:	d8c02017 	ldw	r3,128(sp)
    211c:	da000404 	addi	r8,sp,16
    2120:	003d4106 	br	1628 <__alt_data_end+0xfffd1628>
    2124:	d8801f17 	ldw	r2,124(sp)
    2128:	01400074 	movhi	r5,1
    212c:	01000044 	movi	r4,1
    2130:	18c00044 	addi	r3,r3,1
    2134:	10800044 	addi	r2,r2,1
    2138:	295f0304 	addi	r5,r5,31756
    213c:	41000115 	stw	r4,4(r8)
    2140:	41400015 	stw	r5,0(r8)
    2144:	d8c02015 	stw	r3,128(sp)
    2148:	d8801f15 	stw	r2,124(sp)
    214c:	010001c4 	movi	r4,7
    2150:	20805c16 	blt	r4,r2,22c4 <___vfprintf_internal_r+0x1bd0>
    2154:	42000204 	addi	r8,r8,8
    2158:	8800041e 	bne	r17,zero,216c <___vfprintf_internal_r+0x1a78>
    215c:	d8803317 	ldw	r2,204(sp)
    2160:	1000021e 	bne	r2,zero,216c <___vfprintf_internal_r+0x1a78>
    2164:	9080004c 	andi	r2,r18,1
    2168:	103be726 	beq	r2,zero,1108 <__alt_data_end+0xfffd1108>
    216c:	d9003717 	ldw	r4,220(sp)
    2170:	d8801f17 	ldw	r2,124(sp)
    2174:	d9403417 	ldw	r5,208(sp)
    2178:	20c7883a 	add	r3,r4,r3
    217c:	10800044 	addi	r2,r2,1
    2180:	41000115 	stw	r4,4(r8)
    2184:	41400015 	stw	r5,0(r8)
    2188:	d8c02015 	stw	r3,128(sp)
    218c:	d8801f15 	stw	r2,124(sp)
    2190:	010001c4 	movi	r4,7
    2194:	20812116 	blt	r4,r2,261c <___vfprintf_internal_r+0x1f28>
    2198:	42000204 	addi	r8,r8,8
    219c:	0463c83a 	sub	r17,zero,r17
    21a0:	0440730e 	bge	zero,r17,2370 <___vfprintf_internal_r+0x1c7c>
    21a4:	05800404 	movi	r22,16
    21a8:	b440860e 	bge	r22,r17,23c4 <___vfprintf_internal_r+0x1cd0>
    21ac:	01400074 	movhi	r5,1
    21b0:	295f0384 	addi	r5,r5,31758
    21b4:	d9402c15 	stw	r5,176(sp)
    21b8:	070001c4 	movi	fp,7
    21bc:	dcc02d17 	ldw	r19,180(sp)
    21c0:	00000306 	br	21d0 <___vfprintf_internal_r+0x1adc>
    21c4:	42000204 	addi	r8,r8,8
    21c8:	8c7ffc04 	addi	r17,r17,-16
    21cc:	b440800e 	bge	r22,r17,23d0 <___vfprintf_internal_r+0x1cdc>
    21d0:	18c00404 	addi	r3,r3,16
    21d4:	10800044 	addi	r2,r2,1
    21d8:	45000015 	stw	r20,0(r8)
    21dc:	45800115 	stw	r22,4(r8)
    21e0:	d8c02015 	stw	r3,128(sp)
    21e4:	d8801f15 	stw	r2,124(sp)
    21e8:	e0bff60e 	bge	fp,r2,21c4 <__alt_data_end+0xfffd21c4>
    21ec:	d9801e04 	addi	r6,sp,120
    21f0:	b80b883a 	mov	r5,r23
    21f4:	9809883a 	mov	r4,r19
    21f8:	00073e40 	call	73e4 <__sprint_r>
    21fc:	103a411e 	bne	r2,zero,b04 <__alt_data_end+0xfffd0b04>
    2200:	d8c02017 	ldw	r3,128(sp)
    2204:	d8801f17 	ldw	r2,124(sp)
    2208:	da000404 	addi	r8,sp,16
    220c:	003fee06 	br	21c8 <__alt_data_end+0xfffd21c8>
    2210:	00bfffc4 	movi	r2,-1
    2214:	003a3f06 	br	b14 <__alt_data_end+0xfffd0b14>
    2218:	008011c4 	movi	r2,71
    221c:	1440b816 	blt	r2,r17,2500 <___vfprintf_internal_r+0x1e0c>
    2220:	04000074 	movhi	r16,1
    2224:	841ef504 	addi	r16,r16,31700
    2228:	00c000c4 	movi	r3,3
    222c:	00bfdfc4 	movi	r2,-129
    2230:	d8c02915 	stw	r3,164(sp)
    2234:	90a4703a 	and	r18,r18,r2
    2238:	df002783 	ldbu	fp,158(sp)
    223c:	d8c02b15 	stw	r3,172(sp)
    2240:	d8002a15 	stw	zero,168(sp)
    2244:	d8003215 	stw	zero,200(sp)
    2248:	003b0706 	br	e68 <__alt_data_end+0xfffd0e68>
    224c:	d8c02e17 	ldw	r3,184(sp)
    2250:	1cc00017 	ldw	r19,0(r3)
    2254:	18c00104 	addi	r3,r3,4
    2258:	d8c02e15 	stw	r3,184(sp)
    225c:	982dd7fa 	srai	r22,r19,31
    2260:	b005883a 	mov	r2,r22
    2264:	003a7706 	br	c44 <__alt_data_end+0xfffd0c44>
    2268:	d8c02e17 	ldw	r3,184(sp)
    226c:	d9002f17 	ldw	r4,188(sp)
    2270:	18800017 	ldw	r2,0(r3)
    2274:	18c00104 	addi	r3,r3,4
    2278:	d8c02e15 	stw	r3,184(sp)
    227c:	11000015 	stw	r4,0(r2)
    2280:	00395406 	br	7d4 <__alt_data_end+0xfffd07d4>
    2284:	d9002e17 	ldw	r4,184(sp)
    2288:	002d883a 	mov	r22,zero
    228c:	24c00017 	ldw	r19,0(r4)
    2290:	21000104 	addi	r4,r4,4
    2294:	d9002e15 	stw	r4,184(sp)
    2298:	003c0706 	br	12b8 <__alt_data_end+0xfffd12b8>
    229c:	d9402e17 	ldw	r5,184(sp)
    22a0:	d8c02a17 	ldw	r3,168(sp)
    22a4:	002d883a 	mov	r22,zero
    22a8:	28800104 	addi	r2,r5,4
    22ac:	2cc0000b 	ldhu	r19,0(r5)
    22b0:	183dc10e 	bge	r3,zero,19b8 <__alt_data_end+0xfffd19b8>
    22b4:	003f7506 	br	208c <__alt_data_end+0xfffd208c>
    22b8:	04000074 	movhi	r16,1
    22bc:	841ef304 	addi	r16,r16,31692
    22c0:	003aa706 	br	d60 <__alt_data_end+0xfffd0d60>
    22c4:	d9002d17 	ldw	r4,180(sp)
    22c8:	d9801e04 	addi	r6,sp,120
    22cc:	b80b883a 	mov	r5,r23
    22d0:	00073e40 	call	73e4 <__sprint_r>
    22d4:	103a0b1e 	bne	r2,zero,b04 <__alt_data_end+0xfffd0b04>
    22d8:	dc402617 	ldw	r17,152(sp)
    22dc:	d8c02017 	ldw	r3,128(sp)
    22e0:	da000404 	addi	r8,sp,16
    22e4:	003f9c06 	br	2158 <__alt_data_end+0xfffd2158>
    22e8:	ac400043 	ldbu	r17,1(r21)
    22ec:	84000814 	ori	r16,r16,32
    22f0:	ad400044 	addi	r21,r21,1
    22f4:	8c403fcc 	andi	r17,r17,255
    22f8:	8c40201c 	xori	r17,r17,128
    22fc:	8c7fe004 	addi	r17,r17,-128
    2300:	00395e06 	br	87c <__alt_data_end+0xfffd087c>
    2304:	d8c02e15 	stw	r3,184(sp)
    2308:	0039883a 	mov	fp,zero
    230c:	003e3506 	br	1be4 <__alt_data_end+0xfffd1be4>
    2310:	d9002d17 	ldw	r4,180(sp)
    2314:	d9801e04 	addi	r6,sp,120
    2318:	b80b883a 	mov	r5,r23
    231c:	00073e40 	call	73e4 <__sprint_r>
    2320:	1039f81e 	bne	r2,zero,b04 <__alt_data_end+0xfffd0b04>
    2324:	d8c02017 	ldw	r3,128(sp)
    2328:	da000404 	addi	r8,sp,16
    232c:	003cd006 	br	1670 <__alt_data_end+0xfffd1670>
    2330:	8009883a 	mov	r4,r16
    2334:	df003d15 	stw	fp,244(sp)
    2338:	00072500 	call	7250 <strlen>
    233c:	d8802b15 	stw	r2,172(sp)
    2340:	da003d17 	ldw	r8,244(sp)
    2344:	103c200e 	bge	r2,zero,13c8 <__alt_data_end+0xfffd13c8>
    2348:	0005883a 	mov	r2,zero
    234c:	003c1e06 	br	13c8 <__alt_data_end+0xfffd13c8>
    2350:	d9002d17 	ldw	r4,180(sp)
    2354:	d9801e04 	addi	r6,sp,120
    2358:	b80b883a 	mov	r5,r23
    235c:	00073e40 	call	73e4 <__sprint_r>
    2360:	1039e81e 	bne	r2,zero,b04 <__alt_data_end+0xfffd0b04>
    2364:	d8c02017 	ldw	r3,128(sp)
    2368:	d8801f17 	ldw	r2,124(sp)
    236c:	da000404 	addi	r8,sp,16
    2370:	d9403317 	ldw	r5,204(sp)
    2374:	10800044 	addi	r2,r2,1
    2378:	44000015 	stw	r16,0(r8)
    237c:	28c7883a 	add	r3,r5,r3
    2380:	003b5b06 	br	10f0 <__alt_data_end+0xfffd10f0>
    2384:	01000074 	movhi	r4,1
    2388:	211f0784 	addi	r4,r4,31774
    238c:	d9003515 	stw	r4,212(sp)
    2390:	003af206 	br	f5c <__alt_data_end+0xfffd0f5c>
    2394:	013fffc4 	movi	r4,-1
    2398:	003a0806 	br	bbc <__alt_data_end+0xfffd0bbc>
    239c:	0023883a 	mov	r17,zero
    23a0:	003d9d06 	br	1a18 <__alt_data_end+0xfffd1a18>
    23a4:	d9002d17 	ldw	r4,180(sp)
    23a8:	d9801e04 	addi	r6,sp,120
    23ac:	b80b883a 	mov	r5,r23
    23b0:	00073e40 	call	73e4 <__sprint_r>
    23b4:	1039d31e 	bne	r2,zero,b04 <__alt_data_end+0xfffd0b04>
    23b8:	d8c02017 	ldw	r3,128(sp)
    23bc:	da000404 	addi	r8,sp,16
    23c0:	003d9406 	br	1a14 <__alt_data_end+0xfffd1a14>
    23c4:	01000074 	movhi	r4,1
    23c8:	211f0384 	addi	r4,r4,31758
    23cc:	d9002c15 	stw	r4,176(sp)
    23d0:	d9002c17 	ldw	r4,176(sp)
    23d4:	1c47883a 	add	r3,r3,r17
    23d8:	10800044 	addi	r2,r2,1
    23dc:	41000015 	stw	r4,0(r8)
    23e0:	44400115 	stw	r17,4(r8)
    23e4:	d8c02015 	stw	r3,128(sp)
    23e8:	d8801f15 	stw	r2,124(sp)
    23ec:	010001c4 	movi	r4,7
    23f0:	20bfd716 	blt	r4,r2,2350 <__alt_data_end+0xfffd2350>
    23f4:	42000204 	addi	r8,r8,8
    23f8:	003fdd06 	br	2370 <__alt_data_end+0xfffd2370>
    23fc:	d9002d17 	ldw	r4,180(sp)
    2400:	d9801e04 	addi	r6,sp,120
    2404:	b80b883a 	mov	r5,r23
    2408:	00073e40 	call	73e4 <__sprint_r>
    240c:	1039bd1e 	bne	r2,zero,b04 <__alt_data_end+0xfffd0b04>
    2410:	d8802617 	ldw	r2,152(sp)
    2414:	d8c02017 	ldw	r3,128(sp)
    2418:	da000404 	addi	r8,sp,16
    241c:	003e1006 	br	1c60 <__alt_data_end+0xfffd1c60>
    2420:	00800044 	movi	r2,1
    2424:	10803fcc 	andi	r2,r2,255
    2428:	00c00044 	movi	r3,1
    242c:	10fa0d26 	beq	r2,r3,c64 <__alt_data_end+0xfffd0c64>
    2430:	00c00084 	movi	r3,2
    2434:	10fbaf26 	beq	r2,r3,12f4 <__alt_data_end+0xfffd12f4>
    2438:	003a6d06 	br	df0 <__alt_data_end+0xfffd0df0>
    243c:	01000074 	movhi	r4,1
    2440:	211f0784 	addi	r4,r4,31774
    2444:	d9003515 	stw	r4,212(sp)
    2448:	003b5406 	br	119c <__alt_data_end+0xfffd119c>
    244c:	d8802a17 	ldw	r2,168(sp)
    2450:	00c00184 	movi	r3,6
    2454:	1880012e 	bgeu	r3,r2,245c <___vfprintf_internal_r+0x1d68>
    2458:	1805883a 	mov	r2,r3
    245c:	d8802b15 	stw	r2,172(sp)
    2460:	1000ef16 	blt	r2,zero,2820 <___vfprintf_internal_r+0x212c>
    2464:	04000074 	movhi	r16,1
    2468:	d8802915 	stw	r2,164(sp)
    246c:	dcc02e15 	stw	r19,184(sp)
    2470:	d8002a15 	stw	zero,168(sp)
    2474:	d8003215 	stw	zero,200(sp)
    2478:	841f0104 	addi	r16,r16,31748
    247c:	0039883a 	mov	fp,zero
    2480:	003a8006 	br	e84 <__alt_data_end+0xfffd0e84>
    2484:	0021883a 	mov	r16,zero
    2488:	003e0706 	br	1ca8 <__alt_data_end+0xfffd1ca8>
    248c:	d9002d17 	ldw	r4,180(sp)
    2490:	d9801e04 	addi	r6,sp,120
    2494:	b80b883a 	mov	r5,r23
    2498:	00073e40 	call	73e4 <__sprint_r>
    249c:	1039991e 	bne	r2,zero,b04 <__alt_data_end+0xfffd0b04>
    24a0:	d8802617 	ldw	r2,152(sp)
    24a4:	d9403317 	ldw	r5,204(sp)
    24a8:	d8c02017 	ldw	r3,128(sp)
    24ac:	da000404 	addi	r8,sp,16
    24b0:	2885c83a 	sub	r2,r5,r2
    24b4:	003dfb06 	br	1ca4 <__alt_data_end+0xfffd1ca4>
    24b8:	9080004c 	andi	r2,r18,1
    24bc:	103e8f1e 	bne	r2,zero,1efc <__alt_data_end+0xfffd1efc>
    24c0:	d8802117 	ldw	r2,132(sp)
    24c4:	003e9e06 	br	1f40 <__alt_data_end+0xfffd1f40>
    24c8:	1025883a 	mov	r18,r2
    24cc:	0039883a 	mov	fp,zero
    24d0:	00800084 	movi	r2,2
    24d4:	003fd306 	br	2424 <__alt_data_end+0xfffd2424>
    24d8:	07000b44 	movi	fp,45
    24dc:	df002785 	stb	fp,158(sp)
    24e0:	003a1b06 	br	d50 <__alt_data_end+0xfffd0d50>
    24e4:	00c00b44 	movi	r3,45
    24e8:	d8c02785 	stb	r3,158(sp)
    24ec:	d8802915 	stw	r2,164(sp)
    24f0:	dc802c17 	ldw	r18,176(sp)
    24f4:	d8002a15 	stw	zero,168(sp)
    24f8:	07000b44 	movi	fp,45
    24fc:	003a5e06 	br	e78 <__alt_data_end+0xfffd0e78>
    2500:	04000074 	movhi	r16,1
    2504:	841ef604 	addi	r16,r16,31704
    2508:	003f4706 	br	2228 <__alt_data_end+0xfffd2228>
    250c:	d9002e17 	ldw	r4,184(sp)
    2510:	d9402f17 	ldw	r5,188(sp)
    2514:	20800017 	ldw	r2,0(r4)
    2518:	21000104 	addi	r4,r4,4
    251c:	d9002e15 	stw	r4,184(sp)
    2520:	11400015 	stw	r5,0(r2)
    2524:	0038ab06 	br	7d4 <__alt_data_end+0xfffd07d4>
    2528:	dd802617 	ldw	r22,152(sp)
    252c:	00bfff44 	movi	r2,-3
    2530:	b0801c16 	blt	r22,r2,25a4 <___vfprintf_internal_r+0x1eb0>
    2534:	d9402a17 	ldw	r5,168(sp)
    2538:	2d801a16 	blt	r5,r22,25a4 <___vfprintf_internal_r+0x1eb0>
    253c:	dd803215 	stw	r22,200(sp)
    2540:	003e8906 	br	1f68 <__alt_data_end+0xfffd1f68>
    2544:	01000074 	movhi	r4,1
    2548:	211f0384 	addi	r4,r4,31758
    254c:	d9002c15 	stw	r4,176(sp)
    2550:	003c9106 	br	1798 <__alt_data_end+0xfffd1798>
    2554:	e005883a 	mov	r2,fp
    2558:	003e7906 	br	1f40 <__alt_data_end+0xfffd1f40>
    255c:	d9002a17 	ldw	r4,168(sp)
    2560:	df002783 	ldbu	fp,158(sp)
    2564:	dcc02e15 	stw	r19,184(sp)
    2568:	d9002915 	stw	r4,164(sp)
    256c:	d9002b15 	stw	r4,172(sp)
    2570:	d8002a15 	stw	zero,168(sp)
    2574:	d8003215 	stw	zero,200(sp)
    2578:	003a3b06 	br	e68 <__alt_data_end+0xfffd0e68>
    257c:	9080004c 	andi	r2,r18,1
    2580:	0039883a 	mov	fp,zero
    2584:	10000426 	beq	r2,zero,2598 <___vfprintf_internal_r+0x1ea4>
    2588:	00800c04 	movi	r2,48
    258c:	dc001dc4 	addi	r16,sp,119
    2590:	d8801dc5 	stb	r2,119(sp)
    2594:	003b6406 	br	1328 <__alt_data_end+0xfffd1328>
    2598:	d8002b15 	stw	zero,172(sp)
    259c:	dc001e04 	addi	r16,sp,120
    25a0:	003a2b06 	br	e50 <__alt_data_end+0xfffd0e50>
    25a4:	8c7fff84 	addi	r17,r17,-2
    25a8:	b5bfffc4 	addi	r22,r22,-1
    25ac:	dd802615 	stw	r22,152(sp)
    25b0:	dc4022c5 	stb	r17,139(sp)
    25b4:	b000bf16 	blt	r22,zero,28b4 <___vfprintf_internal_r+0x21c0>
    25b8:	00800ac4 	movi	r2,43
    25bc:	d8802305 	stb	r2,140(sp)
    25c0:	00800244 	movi	r2,9
    25c4:	15807016 	blt	r2,r22,2788 <___vfprintf_internal_r+0x2094>
    25c8:	00800c04 	movi	r2,48
    25cc:	b5800c04 	addi	r22,r22,48
    25d0:	d8802345 	stb	r2,141(sp)
    25d4:	dd802385 	stb	r22,142(sp)
    25d8:	d88023c4 	addi	r2,sp,143
    25dc:	df0022c4 	addi	fp,sp,139
    25e0:	d8c03317 	ldw	r3,204(sp)
    25e4:	1739c83a 	sub	fp,r2,fp
    25e8:	d9003317 	ldw	r4,204(sp)
    25ec:	e0c7883a 	add	r3,fp,r3
    25f0:	df003a15 	stw	fp,232(sp)
    25f4:	d8c02b15 	stw	r3,172(sp)
    25f8:	00800044 	movi	r2,1
    25fc:	1100b30e 	bge	r2,r4,28cc <___vfprintf_internal_r+0x21d8>
    2600:	d8c02b17 	ldw	r3,172(sp)
    2604:	18c00044 	addi	r3,r3,1
    2608:	d8c02b15 	stw	r3,172(sp)
    260c:	1805883a 	mov	r2,r3
    2610:	1800ac16 	blt	r3,zero,28c4 <___vfprintf_internal_r+0x21d0>
    2614:	d8003215 	stw	zero,200(sp)
    2618:	003e5d06 	br	1f90 <__alt_data_end+0xfffd1f90>
    261c:	d9002d17 	ldw	r4,180(sp)
    2620:	d9801e04 	addi	r6,sp,120
    2624:	b80b883a 	mov	r5,r23
    2628:	00073e40 	call	73e4 <__sprint_r>
    262c:	1039351e 	bne	r2,zero,b04 <__alt_data_end+0xfffd0b04>
    2630:	dc402617 	ldw	r17,152(sp)
    2634:	d8c02017 	ldw	r3,128(sp)
    2638:	d8801f17 	ldw	r2,124(sp)
    263c:	da000404 	addi	r8,sp,16
    2640:	003ed606 	br	219c <__alt_data_end+0xfffd219c>
    2644:	182b883a 	mov	r21,r3
    2648:	d8002a15 	stw	zero,168(sp)
    264c:	00388c06 	br	880 <__alt_data_end+0xfffd0880>
    2650:	d8802a17 	ldw	r2,168(sp)
    2654:	103e071e 	bne	r2,zero,1e74 <__alt_data_end+0xfffd1e74>
    2658:	dc002a15 	stw	r16,168(sp)
    265c:	003e0506 	br	1e74 <__alt_data_end+0xfffd1e74>
    2660:	d9002a17 	ldw	r4,168(sp)
    2664:	20c00044 	addi	r3,r4,1
    2668:	003e0f06 	br	1ea8 <__alt_data_end+0xfffd1ea8>
    266c:	01400184 	movi	r5,6
    2670:	d9402a15 	stw	r5,168(sp)
    2674:	003dff06 	br	1e74 <__alt_data_end+0xfffd1e74>
    2678:	d8802104 	addi	r2,sp,132
    267c:	d8800315 	stw	r2,12(sp)
    2680:	d8802504 	addi	r2,sp,148
    2684:	d8800215 	stw	r2,8(sp)
    2688:	d8802604 	addi	r2,sp,152
    268c:	d8800115 	stw	r2,4(sp)
    2690:	d8802a17 	ldw	r2,168(sp)
    2694:	d9403617 	ldw	r5,216(sp)
    2698:	d9002d17 	ldw	r4,180(sp)
    269c:	d8800015 	stw	r2,0(sp)
    26a0:	01c000c4 	movi	r7,3
    26a4:	980d883a 	mov	r6,r19
    26a8:	da003d15 	stw	r8,244(sp)
    26ac:	0002e240 	call	2e24 <_dtoa_r>
    26b0:	d8c02a17 	ldw	r3,168(sp)
    26b4:	da003d17 	ldw	r8,244(sp)
    26b8:	1021883a 	mov	r16,r2
    26bc:	10f9883a 	add	fp,r2,r3
    26c0:	81000007 	ldb	r4,0(r16)
    26c4:	00800c04 	movi	r2,48
    26c8:	20805e26 	beq	r4,r2,2844 <___vfprintf_internal_r+0x2150>
    26cc:	d8c02617 	ldw	r3,152(sp)
    26d0:	e0f9883a 	add	fp,fp,r3
    26d4:	003e0a06 	br	1f00 <__alt_data_end+0xfffd1f00>
    26d8:	00c00b44 	movi	r3,45
    26dc:	24e0003c 	xorhi	r19,r4,32768
    26e0:	d8c02905 	stb	r3,164(sp)
    26e4:	003de906 	br	1e8c <__alt_data_end+0xfffd1e8c>
    26e8:	d8c03217 	ldw	r3,200(sp)
    26ec:	00c07a0e 	bge	zero,r3,28d8 <___vfprintf_internal_r+0x21e4>
    26f0:	00800044 	movi	r2,1
    26f4:	d9003317 	ldw	r4,204(sp)
    26f8:	1105883a 	add	r2,r2,r4
    26fc:	d8802b15 	stw	r2,172(sp)
    2700:	10004e16 	blt	r2,zero,283c <___vfprintf_internal_r+0x2148>
    2704:	044019c4 	movi	r17,103
    2708:	003e2106 	br	1f90 <__alt_data_end+0xfffd1f90>
    270c:	d9002a17 	ldw	r4,168(sp)
    2710:	d8802104 	addi	r2,sp,132
    2714:	d8800315 	stw	r2,12(sp)
    2718:	d9000015 	stw	r4,0(sp)
    271c:	d8802504 	addi	r2,sp,148
    2720:	d9403617 	ldw	r5,216(sp)
    2724:	d9002d17 	ldw	r4,180(sp)
    2728:	d8800215 	stw	r2,8(sp)
    272c:	d8802604 	addi	r2,sp,152
    2730:	d8800115 	stw	r2,4(sp)
    2734:	01c000c4 	movi	r7,3
    2738:	980d883a 	mov	r6,r19
    273c:	da003d15 	stw	r8,244(sp)
    2740:	0002e240 	call	2e24 <_dtoa_r>
    2744:	d8c02a17 	ldw	r3,168(sp)
    2748:	da003d17 	ldw	r8,244(sp)
    274c:	1021883a 	mov	r16,r2
    2750:	00801184 	movi	r2,70
    2754:	80f9883a 	add	fp,r16,r3
    2758:	88bfd926 	beq	r17,r2,26c0 <__alt_data_end+0xfffd26c0>
    275c:	003de806 	br	1f00 <__alt_data_end+0xfffd1f00>
    2760:	d9002a17 	ldw	r4,168(sp)
    2764:	00c04d0e 	bge	zero,r3,289c <___vfprintf_internal_r+0x21a8>
    2768:	2000441e 	bne	r4,zero,287c <___vfprintf_internal_r+0x2188>
    276c:	9480004c 	andi	r18,r18,1
    2770:	9000421e 	bne	r18,zero,287c <___vfprintf_internal_r+0x2188>
    2774:	1805883a 	mov	r2,r3
    2778:	18006f16 	blt	r3,zero,2938 <___vfprintf_internal_r+0x2244>
    277c:	d8c03217 	ldw	r3,200(sp)
    2780:	d8c02b15 	stw	r3,172(sp)
    2784:	003e0206 	br	1f90 <__alt_data_end+0xfffd1f90>
    2788:	df0022c4 	addi	fp,sp,139
    278c:	dc002a15 	stw	r16,168(sp)
    2790:	4027883a 	mov	r19,r8
    2794:	e021883a 	mov	r16,fp
    2798:	b009883a 	mov	r4,r22
    279c:	01400284 	movi	r5,10
    27a0:	00005580 	call	558 <__modsi3>
    27a4:	10800c04 	addi	r2,r2,48
    27a8:	843fffc4 	addi	r16,r16,-1
    27ac:	b009883a 	mov	r4,r22
    27b0:	01400284 	movi	r5,10
    27b4:	80800005 	stb	r2,0(r16)
    27b8:	00004d40 	call	4d4 <__divsi3>
    27bc:	102d883a 	mov	r22,r2
    27c0:	00800244 	movi	r2,9
    27c4:	15bff416 	blt	r2,r22,2798 <__alt_data_end+0xfffd2798>
    27c8:	9811883a 	mov	r8,r19
    27cc:	b0800c04 	addi	r2,r22,48
    27d0:	8027883a 	mov	r19,r16
    27d4:	997fffc4 	addi	r5,r19,-1
    27d8:	98bfffc5 	stb	r2,-1(r19)
    27dc:	dc002a17 	ldw	r16,168(sp)
    27e0:	2f006d2e 	bgeu	r5,fp,2998 <___vfprintf_internal_r+0x22a4>
    27e4:	d9c02384 	addi	r7,sp,142
    27e8:	3ccfc83a 	sub	r7,r7,r19
    27ec:	d9002344 	addi	r4,sp,141
    27f0:	e1cf883a 	add	r7,fp,r7
    27f4:	00000106 	br	27fc <___vfprintf_internal_r+0x2108>
    27f8:	28800003 	ldbu	r2,0(r5)
    27fc:	20800005 	stb	r2,0(r4)
    2800:	21000044 	addi	r4,r4,1
    2804:	29400044 	addi	r5,r5,1
    2808:	393ffb1e 	bne	r7,r4,27f8 <__alt_data_end+0xfffd27f8>
    280c:	d8802304 	addi	r2,sp,140
    2810:	14c5c83a 	sub	r2,r2,r19
    2814:	d8c02344 	addi	r3,sp,141
    2818:	1885883a 	add	r2,r3,r2
    281c:	003f7006 	br	25e0 <__alt_data_end+0xfffd25e0>
    2820:	0005883a 	mov	r2,zero
    2824:	003f0f06 	br	2464 <__alt_data_end+0xfffd2464>
    2828:	d8c03217 	ldw	r3,200(sp)
    282c:	18c00044 	addi	r3,r3,1
    2830:	d8c02b15 	stw	r3,172(sp)
    2834:	1805883a 	mov	r2,r3
    2838:	183fb20e 	bge	r3,zero,2704 <__alt_data_end+0xfffd2704>
    283c:	0005883a 	mov	r2,zero
    2840:	003fb006 	br	2704 <__alt_data_end+0xfffd2704>
    2844:	d9003617 	ldw	r4,216(sp)
    2848:	000d883a 	mov	r6,zero
    284c:	000f883a 	mov	r7,zero
    2850:	980b883a 	mov	r5,r19
    2854:	d8c03c15 	stw	r3,240(sp)
    2858:	da003d15 	stw	r8,244(sp)
    285c:	000bd180 	call	bd18 <__eqdf2>
    2860:	d8c03c17 	ldw	r3,240(sp)
    2864:	da003d17 	ldw	r8,244(sp)
    2868:	103f9826 	beq	r2,zero,26cc <__alt_data_end+0xfffd26cc>
    286c:	00800044 	movi	r2,1
    2870:	10c7c83a 	sub	r3,r2,r3
    2874:	d8c02615 	stw	r3,152(sp)
    2878:	003f9506 	br	26d0 <__alt_data_end+0xfffd26d0>
    287c:	d9002a17 	ldw	r4,168(sp)
    2880:	d8c03217 	ldw	r3,200(sp)
    2884:	20800044 	addi	r2,r4,1
    2888:	1885883a 	add	r2,r3,r2
    288c:	d8802b15 	stw	r2,172(sp)
    2890:	103dbf0e 	bge	r2,zero,1f90 <__alt_data_end+0xfffd1f90>
    2894:	0005883a 	mov	r2,zero
    2898:	003dbd06 	br	1f90 <__alt_data_end+0xfffd1f90>
    289c:	2000201e 	bne	r4,zero,2920 <___vfprintf_internal_r+0x222c>
    28a0:	9480004c 	andi	r18,r18,1
    28a4:	90001e1e 	bne	r18,zero,2920 <___vfprintf_internal_r+0x222c>
    28a8:	00800044 	movi	r2,1
    28ac:	d8802b15 	stw	r2,172(sp)
    28b0:	003db706 	br	1f90 <__alt_data_end+0xfffd1f90>
    28b4:	00800b44 	movi	r2,45
    28b8:	05adc83a 	sub	r22,zero,r22
    28bc:	d8802305 	stb	r2,140(sp)
    28c0:	003f3f06 	br	25c0 <__alt_data_end+0xfffd25c0>
    28c4:	0005883a 	mov	r2,zero
    28c8:	003f5206 	br	2614 <__alt_data_end+0xfffd2614>
    28cc:	90a4703a 	and	r18,r18,r2
    28d0:	903f4e26 	beq	r18,zero,260c <__alt_data_end+0xfffd260c>
    28d4:	003f4a06 	br	2600 <__alt_data_end+0xfffd2600>
    28d8:	00800084 	movi	r2,2
    28dc:	10c5c83a 	sub	r2,r2,r3
    28e0:	003f8406 	br	26f4 <__alt_data_end+0xfffd26f4>
    28e4:	d9402e17 	ldw	r5,184(sp)
    28e8:	d9002e17 	ldw	r4,184(sp)
    28ec:	ac400043 	ldbu	r17,1(r21)
    28f0:	29400017 	ldw	r5,0(r5)
    28f4:	20800104 	addi	r2,r4,4
    28f8:	d8802e15 	stw	r2,184(sp)
    28fc:	d9402a15 	stw	r5,168(sp)
    2900:	182b883a 	mov	r21,r3
    2904:	283e7b0e 	bge	r5,zero,22f4 <__alt_data_end+0xfffd22f4>
    2908:	8c403fcc 	andi	r17,r17,255
    290c:	017fffc4 	movi	r5,-1
    2910:	8c40201c 	xori	r17,r17,128
    2914:	d9402a15 	stw	r5,168(sp)
    2918:	8c7fe004 	addi	r17,r17,-128
    291c:	0037d706 	br	87c <__alt_data_end+0xfffd087c>
    2920:	d8c02a17 	ldw	r3,168(sp)
    2924:	18c00084 	addi	r3,r3,2
    2928:	d8c02b15 	stw	r3,172(sp)
    292c:	1805883a 	mov	r2,r3
    2930:	183d970e 	bge	r3,zero,1f90 <__alt_data_end+0xfffd1f90>
    2934:	003fd706 	br	2894 <__alt_data_end+0xfffd2894>
    2938:	0005883a 	mov	r2,zero
    293c:	003f8f06 	br	277c <__alt_data_end+0xfffd277c>
    2940:	9080004c 	andi	r2,r18,1
    2944:	103f821e 	bne	r2,zero,2750 <__alt_data_end+0xfffd2750>
    2948:	d8802117 	ldw	r2,132(sp)
    294c:	1405c83a 	sub	r2,r2,r16
    2950:	d8803315 	stw	r2,204(sp)
    2954:	b47ef426 	beq	r22,r17,2528 <__alt_data_end+0xfffd2528>
    2958:	dd802617 	ldw	r22,152(sp)
    295c:	003f1206 	br	25a8 <__alt_data_end+0xfffd25a8>
    2960:	d8c02b03 	ldbu	r3,172(sp)
    2964:	d8c02785 	stb	r3,158(sp)
    2968:	0038df06 	br	ce8 <__alt_data_end+0xfffd0ce8>
    296c:	d8c02b03 	ldbu	r3,172(sp)
    2970:	d8c02785 	stb	r3,158(sp)
    2974:	0038aa06 	br	c20 <__alt_data_end+0xfffd0c20>
    2978:	d8c02b03 	ldbu	r3,172(sp)
    297c:	d8c02785 	stb	r3,158(sp)
    2980:	003a4306 	br	1290 <__alt_data_end+0xfffd1290>
    2984:	d8c02b03 	ldbu	r3,172(sp)
    2988:	d8c02785 	stb	r3,158(sp)
    298c:	003af506 	br	1564 <__alt_data_end+0xfffd1564>
    2990:	0005883a 	mov	r2,zero
    2994:	003d7b06 	br	1f84 <__alt_data_end+0xfffd1f84>
    2998:	d8802344 	addi	r2,sp,141
    299c:	003f1006 	br	25e0 <__alt_data_end+0xfffd25e0>
    29a0:	d8c02b03 	ldbu	r3,172(sp)
    29a4:	d8c02785 	stb	r3,158(sp)
    29a8:	0038fd06 	br	da0 <__alt_data_end+0xfffd0da0>
    29ac:	d8c02b03 	ldbu	r3,172(sp)
    29b0:	d8c02785 	stb	r3,158(sp)
    29b4:	003a9706 	br	1414 <__alt_data_end+0xfffd1414>
    29b8:	d8c02b03 	ldbu	r3,172(sp)
    29bc:	d8c02785 	stb	r3,158(sp)
    29c0:	003a1806 	br	1224 <__alt_data_end+0xfffd1224>
    29c4:	d8c02b03 	ldbu	r3,172(sp)
    29c8:	d8c02785 	stb	r3,158(sp)
    29cc:	003abe06 	br	14c8 <__alt_data_end+0xfffd14c8>

000029d0 <__vfprintf_internal>:
    29d0:	008000b4 	movhi	r2,2
    29d4:	10a6a604 	addi	r2,r2,-25960
    29d8:	300f883a 	mov	r7,r6
    29dc:	280d883a 	mov	r6,r5
    29e0:	200b883a 	mov	r5,r4
    29e4:	11000017 	ldw	r4,0(r2)
    29e8:	00006f41 	jmpi	6f4 <___vfprintf_internal_r>

000029ec <__sbprintf>:
    29ec:	2880030b 	ldhu	r2,12(r5)
    29f0:	2ac01917 	ldw	r11,100(r5)
    29f4:	2a80038b 	ldhu	r10,14(r5)
    29f8:	2a400717 	ldw	r9,28(r5)
    29fc:	2a000917 	ldw	r8,36(r5)
    2a00:	defee204 	addi	sp,sp,-1144
    2a04:	00c10004 	movi	r3,1024
    2a08:	dc011a15 	stw	r16,1128(sp)
    2a0c:	10bfff4c 	andi	r2,r2,65533
    2a10:	2821883a 	mov	r16,r5
    2a14:	d8cb883a 	add	r5,sp,r3
    2a18:	dc811c15 	stw	r18,1136(sp)
    2a1c:	dc411b15 	stw	r17,1132(sp)
    2a20:	dfc11d15 	stw	ra,1140(sp)
    2a24:	2025883a 	mov	r18,r4
    2a28:	d881030d 	sth	r2,1036(sp)
    2a2c:	dac11915 	stw	r11,1124(sp)
    2a30:	da81038d 	sth	r10,1038(sp)
    2a34:	da410715 	stw	r9,1052(sp)
    2a38:	da010915 	stw	r8,1060(sp)
    2a3c:	dec10015 	stw	sp,1024(sp)
    2a40:	dec10415 	stw	sp,1040(sp)
    2a44:	d8c10215 	stw	r3,1032(sp)
    2a48:	d8c10515 	stw	r3,1044(sp)
    2a4c:	d8010615 	stw	zero,1048(sp)
    2a50:	00006f40 	call	6f4 <___vfprintf_internal_r>
    2a54:	1023883a 	mov	r17,r2
    2a58:	10000416 	blt	r2,zero,2a6c <__sbprintf+0x80>
    2a5c:	d9410004 	addi	r5,sp,1024
    2a60:	9009883a 	mov	r4,r18
    2a64:	00046c80 	call	46c8 <_fflush_r>
    2a68:	10000d1e 	bne	r2,zero,2aa0 <__sbprintf+0xb4>
    2a6c:	d881030b 	ldhu	r2,1036(sp)
    2a70:	1080100c 	andi	r2,r2,64
    2a74:	10000326 	beq	r2,zero,2a84 <__sbprintf+0x98>
    2a78:	8080030b 	ldhu	r2,12(r16)
    2a7c:	10801014 	ori	r2,r2,64
    2a80:	8080030d 	sth	r2,12(r16)
    2a84:	8805883a 	mov	r2,r17
    2a88:	dfc11d17 	ldw	ra,1140(sp)
    2a8c:	dc811c17 	ldw	r18,1136(sp)
    2a90:	dc411b17 	ldw	r17,1132(sp)
    2a94:	dc011a17 	ldw	r16,1128(sp)
    2a98:	dec11e04 	addi	sp,sp,1144
    2a9c:	f800283a 	ret
    2aa0:	047fffc4 	movi	r17,-1
    2aa4:	003ff106 	br	2a6c <__alt_data_end+0xfffd2a6c>

00002aa8 <__swsetup_r>:
    2aa8:	008000b4 	movhi	r2,2
    2aac:	defffd04 	addi	sp,sp,-12
    2ab0:	10a6a604 	addi	r2,r2,-25960
    2ab4:	dc400115 	stw	r17,4(sp)
    2ab8:	2023883a 	mov	r17,r4
    2abc:	11000017 	ldw	r4,0(r2)
    2ac0:	dc000015 	stw	r16,0(sp)
    2ac4:	dfc00215 	stw	ra,8(sp)
    2ac8:	2821883a 	mov	r16,r5
    2acc:	20000226 	beq	r4,zero,2ad8 <__swsetup_r+0x30>
    2ad0:	20800e17 	ldw	r2,56(r4)
    2ad4:	10003126 	beq	r2,zero,2b9c <__swsetup_r+0xf4>
    2ad8:	8080030b 	ldhu	r2,12(r16)
    2adc:	10c0020c 	andi	r3,r2,8
    2ae0:	1009883a 	mov	r4,r2
    2ae4:	18000f26 	beq	r3,zero,2b24 <__swsetup_r+0x7c>
    2ae8:	80c00417 	ldw	r3,16(r16)
    2aec:	18001526 	beq	r3,zero,2b44 <__swsetup_r+0x9c>
    2af0:	1100004c 	andi	r4,r2,1
    2af4:	20001c1e 	bne	r4,zero,2b68 <__swsetup_r+0xc0>
    2af8:	1080008c 	andi	r2,r2,2
    2afc:	1000291e 	bne	r2,zero,2ba4 <__swsetup_r+0xfc>
    2b00:	80800517 	ldw	r2,20(r16)
    2b04:	80800215 	stw	r2,8(r16)
    2b08:	18001c26 	beq	r3,zero,2b7c <__swsetup_r+0xd4>
    2b0c:	0005883a 	mov	r2,zero
    2b10:	dfc00217 	ldw	ra,8(sp)
    2b14:	dc400117 	ldw	r17,4(sp)
    2b18:	dc000017 	ldw	r16,0(sp)
    2b1c:	dec00304 	addi	sp,sp,12
    2b20:	f800283a 	ret
    2b24:	2080040c 	andi	r2,r4,16
    2b28:	10002e26 	beq	r2,zero,2be4 <__swsetup_r+0x13c>
    2b2c:	2080010c 	andi	r2,r4,4
    2b30:	10001e1e 	bne	r2,zero,2bac <__swsetup_r+0x104>
    2b34:	80c00417 	ldw	r3,16(r16)
    2b38:	20800214 	ori	r2,r4,8
    2b3c:	8080030d 	sth	r2,12(r16)
    2b40:	183feb1e 	bne	r3,zero,2af0 <__alt_data_end+0xfffd2af0>
    2b44:	1100a00c 	andi	r4,r2,640
    2b48:	01408004 	movi	r5,512
    2b4c:	217fe826 	beq	r4,r5,2af0 <__alt_data_end+0xfffd2af0>
    2b50:	800b883a 	mov	r5,r16
    2b54:	8809883a 	mov	r4,r17
    2b58:	000519c0 	call	519c <__smakebuf_r>
    2b5c:	8080030b 	ldhu	r2,12(r16)
    2b60:	80c00417 	ldw	r3,16(r16)
    2b64:	003fe206 	br	2af0 <__alt_data_end+0xfffd2af0>
    2b68:	80800517 	ldw	r2,20(r16)
    2b6c:	80000215 	stw	zero,8(r16)
    2b70:	0085c83a 	sub	r2,zero,r2
    2b74:	80800615 	stw	r2,24(r16)
    2b78:	183fe41e 	bne	r3,zero,2b0c <__alt_data_end+0xfffd2b0c>
    2b7c:	80c0030b 	ldhu	r3,12(r16)
    2b80:	0005883a 	mov	r2,zero
    2b84:	1900200c 	andi	r4,r3,128
    2b88:	203fe126 	beq	r4,zero,2b10 <__alt_data_end+0xfffd2b10>
    2b8c:	18c01014 	ori	r3,r3,64
    2b90:	80c0030d 	sth	r3,12(r16)
    2b94:	00bfffc4 	movi	r2,-1
    2b98:	003fdd06 	br	2b10 <__alt_data_end+0xfffd2b10>
    2b9c:	0004ab40 	call	4ab4 <__sinit>
    2ba0:	003fcd06 	br	2ad8 <__alt_data_end+0xfffd2ad8>
    2ba4:	0005883a 	mov	r2,zero
    2ba8:	003fd606 	br	2b04 <__alt_data_end+0xfffd2b04>
    2bac:	81400c17 	ldw	r5,48(r16)
    2bb0:	28000626 	beq	r5,zero,2bcc <__swsetup_r+0x124>
    2bb4:	80801004 	addi	r2,r16,64
    2bb8:	28800326 	beq	r5,r2,2bc8 <__swsetup_r+0x120>
    2bbc:	8809883a 	mov	r4,r17
    2bc0:	0004c280 	call	4c28 <_free_r>
    2bc4:	8100030b 	ldhu	r4,12(r16)
    2bc8:	80000c15 	stw	zero,48(r16)
    2bcc:	80c00417 	ldw	r3,16(r16)
    2bd0:	00bff6c4 	movi	r2,-37
    2bd4:	1108703a 	and	r4,r2,r4
    2bd8:	80000115 	stw	zero,4(r16)
    2bdc:	80c00015 	stw	r3,0(r16)
    2be0:	003fd506 	br	2b38 <__alt_data_end+0xfffd2b38>
    2be4:	00800244 	movi	r2,9
    2be8:	88800015 	stw	r2,0(r17)
    2bec:	20801014 	ori	r2,r4,64
    2bf0:	8080030d 	sth	r2,12(r16)
    2bf4:	00bfffc4 	movi	r2,-1
    2bf8:	003fc506 	br	2b10 <__alt_data_end+0xfffd2b10>

00002bfc <quorem>:
    2bfc:	defff204 	addi	sp,sp,-56
    2c00:	ddc00b15 	stw	r23,44(sp)
    2c04:	20800417 	ldw	r2,16(r4)
    2c08:	2dc00417 	ldw	r23,16(r5)
    2c0c:	dfc00d15 	stw	ra,52(sp)
    2c10:	df000c15 	stw	fp,48(sp)
    2c14:	dd800a15 	stw	r22,40(sp)
    2c18:	dd400915 	stw	r21,36(sp)
    2c1c:	dd000815 	stw	r20,32(sp)
    2c20:	dcc00715 	stw	r19,28(sp)
    2c24:	dc800615 	stw	r18,24(sp)
    2c28:	dc400515 	stw	r17,20(sp)
    2c2c:	dc000415 	stw	r16,16(sp)
    2c30:	15c07a16 	blt	r2,r23,2e1c <quorem+0x220>
    2c34:	bdffffc4 	addi	r23,r23,-1
    2c38:	bde9883a 	add	r20,r23,r23
    2c3c:	28c00504 	addi	r3,r5,20
    2c40:	a529883a 	add	r20,r20,r20
    2c44:	1d39883a 	add	fp,r3,r20
    2c48:	24c00504 	addi	r19,r4,20
    2c4c:	d9400215 	stw	r5,8(sp)
    2c50:	9d29883a 	add	r20,r19,r20
    2c54:	e1400017 	ldw	r5,0(fp)
    2c58:	d9000015 	stw	r4,0(sp)
    2c5c:	a1000017 	ldw	r4,0(r20)
    2c60:	29400044 	addi	r5,r5,1
    2c64:	d8c00115 	stw	r3,4(sp)
    2c68:	dd000315 	stw	r20,12(sp)
    2c6c:	00005cc0 	call	5cc <__udivsi3>
    2c70:	1025883a 	mov	r18,r2
    2c74:	10003026 	beq	r2,zero,2d38 <quorem+0x13c>
    2c78:	dc400117 	ldw	r17,4(sp)
    2c7c:	9829883a 	mov	r20,r19
    2c80:	002d883a 	mov	r22,zero
    2c84:	0021883a 	mov	r16,zero
    2c88:	8d400017 	ldw	r21,0(r17)
    2c8c:	900b883a 	mov	r5,r18
    2c90:	8c400104 	addi	r17,r17,4
    2c94:	a93fffcc 	andi	r4,r21,65535
    2c98:	000aa740 	call	aa74 <__mulsi3>
    2c9c:	a808d43a 	srli	r4,r21,16
    2ca0:	900b883a 	mov	r5,r18
    2ca4:	15ad883a 	add	r22,r2,r22
    2ca8:	000aa740 	call	aa74 <__mulsi3>
    2cac:	a1000017 	ldw	r4,0(r20)
    2cb0:	b00cd43a 	srli	r6,r22,16
    2cb4:	b0ffffcc 	andi	r3,r22,65535
    2cb8:	217fffcc 	andi	r5,r4,65535
    2cbc:	2c21883a 	add	r16,r5,r16
    2cc0:	80c7c83a 	sub	r3,r16,r3
    2cc4:	2008d43a 	srli	r4,r4,16
    2cc8:	1185883a 	add	r2,r2,r6
    2ccc:	1821d43a 	srai	r16,r3,16
    2cd0:	117fffcc 	andi	r5,r2,65535
    2cd4:	2149c83a 	sub	r4,r4,r5
    2cd8:	2421883a 	add	r16,r4,r16
    2cdc:	8008943a 	slli	r4,r16,16
    2ce0:	18ffffcc 	andi	r3,r3,65535
    2ce4:	102cd43a 	srli	r22,r2,16
    2ce8:	20c8b03a 	or	r4,r4,r3
    2cec:	a1000015 	stw	r4,0(r20)
    2cf0:	8021d43a 	srai	r16,r16,16
    2cf4:	a5000104 	addi	r20,r20,4
    2cf8:	e47fe32e 	bgeu	fp,r17,2c88 <__alt_data_end+0xfffd2c88>
    2cfc:	d8c00317 	ldw	r3,12(sp)
    2d00:	18800017 	ldw	r2,0(r3)
    2d04:	10000c1e 	bne	r2,zero,2d38 <quorem+0x13c>
    2d08:	18bfff04 	addi	r2,r3,-4
    2d0c:	9880082e 	bgeu	r19,r2,2d30 <quorem+0x134>
    2d10:	18ffff17 	ldw	r3,-4(r3)
    2d14:	18000326 	beq	r3,zero,2d24 <quorem+0x128>
    2d18:	00000506 	br	2d30 <quorem+0x134>
    2d1c:	10c00017 	ldw	r3,0(r2)
    2d20:	1800031e 	bne	r3,zero,2d30 <quorem+0x134>
    2d24:	10bfff04 	addi	r2,r2,-4
    2d28:	bdffffc4 	addi	r23,r23,-1
    2d2c:	98bffb36 	bltu	r19,r2,2d1c <__alt_data_end+0xfffd2d1c>
    2d30:	d8c00017 	ldw	r3,0(sp)
    2d34:	1dc00415 	stw	r23,16(r3)
    2d38:	d9400217 	ldw	r5,8(sp)
    2d3c:	d9000017 	ldw	r4,0(sp)
    2d40:	000683c0 	call	683c <__mcmp>
    2d44:	10002816 	blt	r2,zero,2de8 <quorem+0x1ec>
    2d48:	dc400117 	ldw	r17,4(sp)
    2d4c:	94800044 	addi	r18,r18,1
    2d50:	980d883a 	mov	r6,r19
    2d54:	0007883a 	mov	r3,zero
    2d58:	31000017 	ldw	r4,0(r6)
    2d5c:	89400017 	ldw	r5,0(r17)
    2d60:	31800104 	addi	r6,r6,4
    2d64:	20bfffcc 	andi	r2,r4,65535
    2d68:	10c7883a 	add	r3,r2,r3
    2d6c:	28bfffcc 	andi	r2,r5,65535
    2d70:	1885c83a 	sub	r2,r3,r2
    2d74:	280ad43a 	srli	r5,r5,16
    2d78:	2008d43a 	srli	r4,r4,16
    2d7c:	1007d43a 	srai	r3,r2,16
    2d80:	10bfffcc 	andi	r2,r2,65535
    2d84:	2149c83a 	sub	r4,r4,r5
    2d88:	20c9883a 	add	r4,r4,r3
    2d8c:	200a943a 	slli	r5,r4,16
    2d90:	8c400104 	addi	r17,r17,4
    2d94:	2007d43a 	srai	r3,r4,16
    2d98:	2884b03a 	or	r2,r5,r2
    2d9c:	30bfff15 	stw	r2,-4(r6)
    2da0:	e47fed2e 	bgeu	fp,r17,2d58 <__alt_data_end+0xfffd2d58>
    2da4:	bdc5883a 	add	r2,r23,r23
    2da8:	1085883a 	add	r2,r2,r2
    2dac:	9887883a 	add	r3,r19,r2
    2db0:	18800017 	ldw	r2,0(r3)
    2db4:	10000c1e 	bne	r2,zero,2de8 <quorem+0x1ec>
    2db8:	18bfff04 	addi	r2,r3,-4
    2dbc:	9880082e 	bgeu	r19,r2,2de0 <quorem+0x1e4>
    2dc0:	18ffff17 	ldw	r3,-4(r3)
    2dc4:	18000326 	beq	r3,zero,2dd4 <quorem+0x1d8>
    2dc8:	00000506 	br	2de0 <quorem+0x1e4>
    2dcc:	10c00017 	ldw	r3,0(r2)
    2dd0:	1800031e 	bne	r3,zero,2de0 <quorem+0x1e4>
    2dd4:	10bfff04 	addi	r2,r2,-4
    2dd8:	bdffffc4 	addi	r23,r23,-1
    2ddc:	98bffb36 	bltu	r19,r2,2dcc <__alt_data_end+0xfffd2dcc>
    2de0:	d8c00017 	ldw	r3,0(sp)
    2de4:	1dc00415 	stw	r23,16(r3)
    2de8:	9005883a 	mov	r2,r18
    2dec:	dfc00d17 	ldw	ra,52(sp)
    2df0:	df000c17 	ldw	fp,48(sp)
    2df4:	ddc00b17 	ldw	r23,44(sp)
    2df8:	dd800a17 	ldw	r22,40(sp)
    2dfc:	dd400917 	ldw	r21,36(sp)
    2e00:	dd000817 	ldw	r20,32(sp)
    2e04:	dcc00717 	ldw	r19,28(sp)
    2e08:	dc800617 	ldw	r18,24(sp)
    2e0c:	dc400517 	ldw	r17,20(sp)
    2e10:	dc000417 	ldw	r16,16(sp)
    2e14:	dec00e04 	addi	sp,sp,56
    2e18:	f800283a 	ret
    2e1c:	0005883a 	mov	r2,zero
    2e20:	003ff206 	br	2dec <__alt_data_end+0xfffd2dec>

00002e24 <_dtoa_r>:
    2e24:	20801017 	ldw	r2,64(r4)
    2e28:	deffde04 	addi	sp,sp,-136
    2e2c:	df002015 	stw	fp,128(sp)
    2e30:	dcc01b15 	stw	r19,108(sp)
    2e34:	dc801a15 	stw	r18,104(sp)
    2e38:	dc401915 	stw	r17,100(sp)
    2e3c:	dc001815 	stw	r16,96(sp)
    2e40:	dfc02115 	stw	ra,132(sp)
    2e44:	ddc01f15 	stw	r23,124(sp)
    2e48:	dd801e15 	stw	r22,120(sp)
    2e4c:	dd401d15 	stw	r21,116(sp)
    2e50:	dd001c15 	stw	r20,112(sp)
    2e54:	d9c00315 	stw	r7,12(sp)
    2e58:	2039883a 	mov	fp,r4
    2e5c:	3023883a 	mov	r17,r6
    2e60:	2825883a 	mov	r18,r5
    2e64:	dc002417 	ldw	r16,144(sp)
    2e68:	3027883a 	mov	r19,r6
    2e6c:	10000826 	beq	r2,zero,2e90 <_dtoa_r+0x6c>
    2e70:	21801117 	ldw	r6,68(r4)
    2e74:	00c00044 	movi	r3,1
    2e78:	100b883a 	mov	r5,r2
    2e7c:	1986983a 	sll	r3,r3,r6
    2e80:	11800115 	stw	r6,4(r2)
    2e84:	10c00215 	stw	r3,8(r2)
    2e88:	0005f600 	call	5f60 <_Bfree>
    2e8c:	e0001015 	stw	zero,64(fp)
    2e90:	88002e16 	blt	r17,zero,2f4c <_dtoa_r+0x128>
    2e94:	80000015 	stw	zero,0(r16)
    2e98:	889ffc2c 	andhi	r2,r17,32752
    2e9c:	00dffc34 	movhi	r3,32752
    2ea0:	10c01c26 	beq	r2,r3,2f14 <_dtoa_r+0xf0>
    2ea4:	000d883a 	mov	r6,zero
    2ea8:	000f883a 	mov	r7,zero
    2eac:	9009883a 	mov	r4,r18
    2eb0:	980b883a 	mov	r5,r19
    2eb4:	000bd180 	call	bd18 <__eqdf2>
    2eb8:	10002b1e 	bne	r2,zero,2f68 <_dtoa_r+0x144>
    2ebc:	d9c02317 	ldw	r7,140(sp)
    2ec0:	00800044 	movi	r2,1
    2ec4:	38800015 	stw	r2,0(r7)
    2ec8:	d8802517 	ldw	r2,148(sp)
    2ecc:	10019e26 	beq	r2,zero,3548 <_dtoa_r+0x724>
    2ed0:	d8c02517 	ldw	r3,148(sp)
    2ed4:	00800074 	movhi	r2,1
    2ed8:	109f0344 	addi	r2,r2,31757
    2edc:	18800015 	stw	r2,0(r3)
    2ee0:	10bfffc4 	addi	r2,r2,-1
    2ee4:	dfc02117 	ldw	ra,132(sp)
    2ee8:	df002017 	ldw	fp,128(sp)
    2eec:	ddc01f17 	ldw	r23,124(sp)
    2ef0:	dd801e17 	ldw	r22,120(sp)
    2ef4:	dd401d17 	ldw	r21,116(sp)
    2ef8:	dd001c17 	ldw	r20,112(sp)
    2efc:	dcc01b17 	ldw	r19,108(sp)
    2f00:	dc801a17 	ldw	r18,104(sp)
    2f04:	dc401917 	ldw	r17,100(sp)
    2f08:	dc001817 	ldw	r16,96(sp)
    2f0c:	dec02204 	addi	sp,sp,136
    2f10:	f800283a 	ret
    2f14:	d8c02317 	ldw	r3,140(sp)
    2f18:	0089c3c4 	movi	r2,9999
    2f1c:	18800015 	stw	r2,0(r3)
    2f20:	90017726 	beq	r18,zero,3500 <_dtoa_r+0x6dc>
    2f24:	00800074 	movhi	r2,1
    2f28:	109f0f04 	addi	r2,r2,31804
    2f2c:	d9002517 	ldw	r4,148(sp)
    2f30:	203fec26 	beq	r4,zero,2ee4 <__alt_data_end+0xfffd2ee4>
    2f34:	10c000c7 	ldb	r3,3(r2)
    2f38:	1801781e 	bne	r3,zero,351c <_dtoa_r+0x6f8>
    2f3c:	10c000c4 	addi	r3,r2,3
    2f40:	d9802517 	ldw	r6,148(sp)
    2f44:	30c00015 	stw	r3,0(r6)
    2f48:	003fe606 	br	2ee4 <__alt_data_end+0xfffd2ee4>
    2f4c:	04e00034 	movhi	r19,32768
    2f50:	9cffffc4 	addi	r19,r19,-1
    2f54:	00800044 	movi	r2,1
    2f58:	8ce6703a 	and	r19,r17,r19
    2f5c:	80800015 	stw	r2,0(r16)
    2f60:	9823883a 	mov	r17,r19
    2f64:	003fcc06 	br	2e98 <__alt_data_end+0xfffd2e98>
    2f68:	d8800204 	addi	r2,sp,8
    2f6c:	d8800015 	stw	r2,0(sp)
    2f70:	d9c00104 	addi	r7,sp,4
    2f74:	900b883a 	mov	r5,r18
    2f78:	980d883a 	mov	r6,r19
    2f7c:	e009883a 	mov	r4,fp
    2f80:	8820d53a 	srli	r16,r17,20
    2f84:	0006c080 	call	6c08 <__d2b>
    2f88:	d8800915 	stw	r2,36(sp)
    2f8c:	8001651e 	bne	r16,zero,3524 <_dtoa_r+0x700>
    2f90:	dd800217 	ldw	r22,8(sp)
    2f94:	dc000117 	ldw	r16,4(sp)
    2f98:	00800804 	movi	r2,32
    2f9c:	b421883a 	add	r16,r22,r16
    2fa0:	80c10c84 	addi	r3,r16,1074
    2fa4:	10c2d10e 	bge	r2,r3,3aec <_dtoa_r+0xcc8>
    2fa8:	00801004 	movi	r2,64
    2fac:	81010484 	addi	r4,r16,1042
    2fb0:	10c7c83a 	sub	r3,r2,r3
    2fb4:	9108d83a 	srl	r4,r18,r4
    2fb8:	88e2983a 	sll	r17,r17,r3
    2fbc:	2448b03a 	or	r4,r4,r17
    2fc0:	000d2340 	call	d234 <__floatunsidf>
    2fc4:	017f8434 	movhi	r5,65040
    2fc8:	01800044 	movi	r6,1
    2fcc:	1009883a 	mov	r4,r2
    2fd0:	194b883a 	add	r5,r3,r5
    2fd4:	843fffc4 	addi	r16,r16,-1
    2fd8:	d9801115 	stw	r6,68(sp)
    2fdc:	000d883a 	mov	r6,zero
    2fe0:	01cffe34 	movhi	r7,16376
    2fe4:	000c7dc0 	call	c7dc <__subdf3>
    2fe8:	0198dbf4 	movhi	r6,25455
    2fec:	01cff4f4 	movhi	r7,16339
    2ff0:	3190d844 	addi	r6,r6,17249
    2ff4:	39e1e9c4 	addi	r7,r7,-30809
    2ff8:	1009883a 	mov	r4,r2
    2ffc:	180b883a 	mov	r5,r3
    3000:	000bf700 	call	bf70 <__muldf3>
    3004:	01a2d874 	movhi	r6,35681
    3008:	01cff1f4 	movhi	r7,16327
    300c:	31b22cc4 	addi	r6,r6,-14157
    3010:	39e28a04 	addi	r7,r7,-30168
    3014:	180b883a 	mov	r5,r3
    3018:	1009883a 	mov	r4,r2
    301c:	000aa9c0 	call	aa9c <__adddf3>
    3020:	8009883a 	mov	r4,r16
    3024:	1029883a 	mov	r20,r2
    3028:	1823883a 	mov	r17,r3
    302c:	000d1580 	call	d158 <__floatsidf>
    3030:	019427f4 	movhi	r6,20639
    3034:	01cff4f4 	movhi	r7,16339
    3038:	319e7ec4 	addi	r6,r6,31227
    303c:	39d104c4 	addi	r7,r7,17427
    3040:	1009883a 	mov	r4,r2
    3044:	180b883a 	mov	r5,r3
    3048:	000bf700 	call	bf70 <__muldf3>
    304c:	100d883a 	mov	r6,r2
    3050:	180f883a 	mov	r7,r3
    3054:	a009883a 	mov	r4,r20
    3058:	880b883a 	mov	r5,r17
    305c:	000aa9c0 	call	aa9c <__adddf3>
    3060:	1009883a 	mov	r4,r2
    3064:	180b883a 	mov	r5,r3
    3068:	1029883a 	mov	r20,r2
    306c:	1823883a 	mov	r17,r3
    3070:	000d0d80 	call	d0d8 <__fixdfsi>
    3074:	000d883a 	mov	r6,zero
    3078:	000f883a 	mov	r7,zero
    307c:	a009883a 	mov	r4,r20
    3080:	880b883a 	mov	r5,r17
    3084:	d8800515 	stw	r2,20(sp)
    3088:	000be7c0 	call	be7c <__ledf2>
    308c:	10028716 	blt	r2,zero,3aac <_dtoa_r+0xc88>
    3090:	d8c00517 	ldw	r3,20(sp)
    3094:	00800584 	movi	r2,22
    3098:	10c27536 	bltu	r2,r3,3a70 <_dtoa_r+0xc4c>
    309c:	180490fa 	slli	r2,r3,3
    30a0:	00c00074 	movhi	r3,1
    30a4:	18df2b04 	addi	r3,r3,31916
    30a8:	1885883a 	add	r2,r3,r2
    30ac:	11000017 	ldw	r4,0(r2)
    30b0:	11400117 	ldw	r5,4(r2)
    30b4:	900d883a 	mov	r6,r18
    30b8:	980f883a 	mov	r7,r19
    30bc:	000bda00 	call	bda0 <__gedf2>
    30c0:	00828d0e 	bge	zero,r2,3af8 <_dtoa_r+0xcd4>
    30c4:	d9000517 	ldw	r4,20(sp)
    30c8:	d8000e15 	stw	zero,56(sp)
    30cc:	213fffc4 	addi	r4,r4,-1
    30d0:	d9000515 	stw	r4,20(sp)
    30d4:	b42dc83a 	sub	r22,r22,r16
    30d8:	b5bfffc4 	addi	r22,r22,-1
    30dc:	b0026f16 	blt	r22,zero,3a9c <_dtoa_r+0xc78>
    30e0:	d8000815 	stw	zero,32(sp)
    30e4:	d9c00517 	ldw	r7,20(sp)
    30e8:	38026416 	blt	r7,zero,3a7c <_dtoa_r+0xc58>
    30ec:	b1ed883a 	add	r22,r22,r7
    30f0:	d9c00d15 	stw	r7,52(sp)
    30f4:	d8000a15 	stw	zero,40(sp)
    30f8:	d9800317 	ldw	r6,12(sp)
    30fc:	00800244 	movi	r2,9
    3100:	11811436 	bltu	r2,r6,3554 <_dtoa_r+0x730>
    3104:	00800144 	movi	r2,5
    3108:	1184e10e 	bge	r2,r6,4490 <_dtoa_r+0x166c>
    310c:	31bfff04 	addi	r6,r6,-4
    3110:	d9800315 	stw	r6,12(sp)
    3114:	0023883a 	mov	r17,zero
    3118:	d9800317 	ldw	r6,12(sp)
    311c:	008000c4 	movi	r2,3
    3120:	30836726 	beq	r6,r2,3ec0 <_dtoa_r+0x109c>
    3124:	1183410e 	bge	r2,r6,3e2c <_dtoa_r+0x1008>
    3128:	d9c00317 	ldw	r7,12(sp)
    312c:	00800104 	movi	r2,4
    3130:	38827c26 	beq	r7,r2,3b24 <_dtoa_r+0xd00>
    3134:	00800144 	movi	r2,5
    3138:	3884c41e 	bne	r7,r2,444c <_dtoa_r+0x1628>
    313c:	00800044 	movi	r2,1
    3140:	d8800b15 	stw	r2,44(sp)
    3144:	d8c00517 	ldw	r3,20(sp)
    3148:	d9002217 	ldw	r4,136(sp)
    314c:	1907883a 	add	r3,r3,r4
    3150:	19800044 	addi	r6,r3,1
    3154:	d8c00c15 	stw	r3,48(sp)
    3158:	d9800615 	stw	r6,24(sp)
    315c:	0183a40e 	bge	zero,r6,3ff0 <_dtoa_r+0x11cc>
    3160:	d9800617 	ldw	r6,24(sp)
    3164:	3021883a 	mov	r16,r6
    3168:	e0001115 	stw	zero,68(fp)
    316c:	008005c4 	movi	r2,23
    3170:	1184c92e 	bgeu	r2,r6,4498 <_dtoa_r+0x1674>
    3174:	00c00044 	movi	r3,1
    3178:	00800104 	movi	r2,4
    317c:	1085883a 	add	r2,r2,r2
    3180:	11000504 	addi	r4,r2,20
    3184:	180b883a 	mov	r5,r3
    3188:	18c00044 	addi	r3,r3,1
    318c:	313ffb2e 	bgeu	r6,r4,317c <__alt_data_end+0xfffd317c>
    3190:	e1401115 	stw	r5,68(fp)
    3194:	e009883a 	mov	r4,fp
    3198:	0005eb80 	call	5eb8 <_Balloc>
    319c:	d8800715 	stw	r2,28(sp)
    31a0:	e0801015 	stw	r2,64(fp)
    31a4:	00800384 	movi	r2,14
    31a8:	1400f736 	bltu	r2,r16,3588 <_dtoa_r+0x764>
    31ac:	8800f626 	beq	r17,zero,3588 <_dtoa_r+0x764>
    31b0:	d9c00517 	ldw	r7,20(sp)
    31b4:	01c39a0e 	bge	zero,r7,4020 <_dtoa_r+0x11fc>
    31b8:	388003cc 	andi	r2,r7,15
    31bc:	100490fa 	slli	r2,r2,3
    31c0:	382bd13a 	srai	r21,r7,4
    31c4:	00c00074 	movhi	r3,1
    31c8:	18df2b04 	addi	r3,r3,31916
    31cc:	1885883a 	add	r2,r3,r2
    31d0:	a8c0040c 	andi	r3,r21,16
    31d4:	12400017 	ldw	r9,0(r2)
    31d8:	12000117 	ldw	r8,4(r2)
    31dc:	18037926 	beq	r3,zero,3fc4 <_dtoa_r+0x11a0>
    31e0:	00800074 	movhi	r2,1
    31e4:	109f2104 	addi	r2,r2,31876
    31e8:	11800817 	ldw	r6,32(r2)
    31ec:	11c00917 	ldw	r7,36(r2)
    31f0:	9009883a 	mov	r4,r18
    31f4:	980b883a 	mov	r5,r19
    31f8:	da001715 	stw	r8,92(sp)
    31fc:	da401615 	stw	r9,88(sp)
    3200:	000b3480 	call	b348 <__divdf3>
    3204:	da001717 	ldw	r8,92(sp)
    3208:	da401617 	ldw	r9,88(sp)
    320c:	ad4003cc 	andi	r21,r21,15
    3210:	040000c4 	movi	r16,3
    3214:	1023883a 	mov	r17,r2
    3218:	1829883a 	mov	r20,r3
    321c:	a8001126 	beq	r21,zero,3264 <_dtoa_r+0x440>
    3220:	05c00074 	movhi	r23,1
    3224:	bddf2104 	addi	r23,r23,31876
    3228:	4805883a 	mov	r2,r9
    322c:	4007883a 	mov	r3,r8
    3230:	a980004c 	andi	r6,r21,1
    3234:	1009883a 	mov	r4,r2
    3238:	a82bd07a 	srai	r21,r21,1
    323c:	180b883a 	mov	r5,r3
    3240:	30000426 	beq	r6,zero,3254 <_dtoa_r+0x430>
    3244:	b9800017 	ldw	r6,0(r23)
    3248:	b9c00117 	ldw	r7,4(r23)
    324c:	84000044 	addi	r16,r16,1
    3250:	000bf700 	call	bf70 <__muldf3>
    3254:	bdc00204 	addi	r23,r23,8
    3258:	a83ff51e 	bne	r21,zero,3230 <__alt_data_end+0xfffd3230>
    325c:	1013883a 	mov	r9,r2
    3260:	1811883a 	mov	r8,r3
    3264:	480d883a 	mov	r6,r9
    3268:	400f883a 	mov	r7,r8
    326c:	8809883a 	mov	r4,r17
    3270:	a00b883a 	mov	r5,r20
    3274:	000b3480 	call	b348 <__divdf3>
    3278:	d8800f15 	stw	r2,60(sp)
    327c:	d8c01015 	stw	r3,64(sp)
    3280:	d8c00e17 	ldw	r3,56(sp)
    3284:	18000626 	beq	r3,zero,32a0 <_dtoa_r+0x47c>
    3288:	d9000f17 	ldw	r4,60(sp)
    328c:	d9401017 	ldw	r5,64(sp)
    3290:	000d883a 	mov	r6,zero
    3294:	01cffc34 	movhi	r7,16368
    3298:	000be7c0 	call	be7c <__ledf2>
    329c:	10040b16 	blt	r2,zero,42cc <_dtoa_r+0x14a8>
    32a0:	8009883a 	mov	r4,r16
    32a4:	000d1580 	call	d158 <__floatsidf>
    32a8:	d9800f17 	ldw	r6,60(sp)
    32ac:	d9c01017 	ldw	r7,64(sp)
    32b0:	1009883a 	mov	r4,r2
    32b4:	180b883a 	mov	r5,r3
    32b8:	000bf700 	call	bf70 <__muldf3>
    32bc:	000d883a 	mov	r6,zero
    32c0:	01d00734 	movhi	r7,16412
    32c4:	1009883a 	mov	r4,r2
    32c8:	180b883a 	mov	r5,r3
    32cc:	000aa9c0 	call	aa9c <__adddf3>
    32d0:	1021883a 	mov	r16,r2
    32d4:	d8800617 	ldw	r2,24(sp)
    32d8:	047f3034 	movhi	r17,64704
    32dc:	1c63883a 	add	r17,r3,r17
    32e0:	10031826 	beq	r2,zero,3f44 <_dtoa_r+0x1120>
    32e4:	d8c00517 	ldw	r3,20(sp)
    32e8:	db000617 	ldw	r12,24(sp)
    32ec:	d8c01315 	stw	r3,76(sp)
    32f0:	d9000b17 	ldw	r4,44(sp)
    32f4:	20038f26 	beq	r4,zero,4134 <_dtoa_r+0x1310>
    32f8:	60bfffc4 	addi	r2,r12,-1
    32fc:	100490fa 	slli	r2,r2,3
    3300:	00c00074 	movhi	r3,1
    3304:	18df2b04 	addi	r3,r3,31916
    3308:	1885883a 	add	r2,r3,r2
    330c:	11800017 	ldw	r6,0(r2)
    3310:	11c00117 	ldw	r7,4(r2)
    3314:	d8800717 	ldw	r2,28(sp)
    3318:	0009883a 	mov	r4,zero
    331c:	014ff834 	movhi	r5,16352
    3320:	db001615 	stw	r12,88(sp)
    3324:	15c00044 	addi	r23,r2,1
    3328:	000b3480 	call	b348 <__divdf3>
    332c:	800d883a 	mov	r6,r16
    3330:	880f883a 	mov	r7,r17
    3334:	1009883a 	mov	r4,r2
    3338:	180b883a 	mov	r5,r3
    333c:	000c7dc0 	call	c7dc <__subdf3>
    3340:	d9401017 	ldw	r5,64(sp)
    3344:	d9000f17 	ldw	r4,60(sp)
    3348:	102b883a 	mov	r21,r2
    334c:	d8c01215 	stw	r3,72(sp)
    3350:	000d0d80 	call	d0d8 <__fixdfsi>
    3354:	1009883a 	mov	r4,r2
    3358:	1029883a 	mov	r20,r2
    335c:	000d1580 	call	d158 <__floatsidf>
    3360:	d9000f17 	ldw	r4,60(sp)
    3364:	d9401017 	ldw	r5,64(sp)
    3368:	100d883a 	mov	r6,r2
    336c:	180f883a 	mov	r7,r3
    3370:	000c7dc0 	call	c7dc <__subdf3>
    3374:	1823883a 	mov	r17,r3
    3378:	d8c00717 	ldw	r3,28(sp)
    337c:	d9401217 	ldw	r5,72(sp)
    3380:	a2000c04 	addi	r8,r20,48
    3384:	1021883a 	mov	r16,r2
    3388:	1a000005 	stb	r8,0(r3)
    338c:	800d883a 	mov	r6,r16
    3390:	880f883a 	mov	r7,r17
    3394:	a809883a 	mov	r4,r21
    3398:	4029883a 	mov	r20,r8
    339c:	000bda00 	call	bda0 <__gedf2>
    33a0:	00841d16 	blt	zero,r2,4418 <_dtoa_r+0x15f4>
    33a4:	800d883a 	mov	r6,r16
    33a8:	880f883a 	mov	r7,r17
    33ac:	0009883a 	mov	r4,zero
    33b0:	014ffc34 	movhi	r5,16368
    33b4:	000c7dc0 	call	c7dc <__subdf3>
    33b8:	d9401217 	ldw	r5,72(sp)
    33bc:	100d883a 	mov	r6,r2
    33c0:	180f883a 	mov	r7,r3
    33c4:	a809883a 	mov	r4,r21
    33c8:	000bda00 	call	bda0 <__gedf2>
    33cc:	db001617 	ldw	r12,88(sp)
    33d0:	00840e16 	blt	zero,r2,440c <_dtoa_r+0x15e8>
    33d4:	00800044 	movi	r2,1
    33d8:	13006b0e 	bge	r2,r12,3588 <_dtoa_r+0x764>
    33dc:	d9000717 	ldw	r4,28(sp)
    33e0:	dd800f15 	stw	r22,60(sp)
    33e4:	dcc01015 	stw	r19,64(sp)
    33e8:	2319883a 	add	r12,r4,r12
    33ec:	dcc01217 	ldw	r19,72(sp)
    33f0:	602d883a 	mov	r22,r12
    33f4:	dc801215 	stw	r18,72(sp)
    33f8:	b825883a 	mov	r18,r23
    33fc:	00000906 	br	3424 <_dtoa_r+0x600>
    3400:	000c7dc0 	call	c7dc <__subdf3>
    3404:	a80d883a 	mov	r6,r21
    3408:	980f883a 	mov	r7,r19
    340c:	1009883a 	mov	r4,r2
    3410:	180b883a 	mov	r5,r3
    3414:	000be7c0 	call	be7c <__ledf2>
    3418:	1003e816 	blt	r2,zero,43bc <_dtoa_r+0x1598>
    341c:	b825883a 	mov	r18,r23
    3420:	bd83e926 	beq	r23,r22,43c8 <_dtoa_r+0x15a4>
    3424:	a809883a 	mov	r4,r21
    3428:	980b883a 	mov	r5,r19
    342c:	000d883a 	mov	r6,zero
    3430:	01d00934 	movhi	r7,16420
    3434:	000bf700 	call	bf70 <__muldf3>
    3438:	000d883a 	mov	r6,zero
    343c:	01d00934 	movhi	r7,16420
    3440:	8009883a 	mov	r4,r16
    3444:	880b883a 	mov	r5,r17
    3448:	102b883a 	mov	r21,r2
    344c:	1827883a 	mov	r19,r3
    3450:	000bf700 	call	bf70 <__muldf3>
    3454:	180b883a 	mov	r5,r3
    3458:	1009883a 	mov	r4,r2
    345c:	1821883a 	mov	r16,r3
    3460:	1023883a 	mov	r17,r2
    3464:	000d0d80 	call	d0d8 <__fixdfsi>
    3468:	1009883a 	mov	r4,r2
    346c:	1029883a 	mov	r20,r2
    3470:	000d1580 	call	d158 <__floatsidf>
    3474:	8809883a 	mov	r4,r17
    3478:	800b883a 	mov	r5,r16
    347c:	100d883a 	mov	r6,r2
    3480:	180f883a 	mov	r7,r3
    3484:	000c7dc0 	call	c7dc <__subdf3>
    3488:	a5000c04 	addi	r20,r20,48
    348c:	a80d883a 	mov	r6,r21
    3490:	980f883a 	mov	r7,r19
    3494:	1009883a 	mov	r4,r2
    3498:	180b883a 	mov	r5,r3
    349c:	95000005 	stb	r20,0(r18)
    34a0:	1021883a 	mov	r16,r2
    34a4:	1823883a 	mov	r17,r3
    34a8:	000be7c0 	call	be7c <__ledf2>
    34ac:	bdc00044 	addi	r23,r23,1
    34b0:	800d883a 	mov	r6,r16
    34b4:	880f883a 	mov	r7,r17
    34b8:	0009883a 	mov	r4,zero
    34bc:	014ffc34 	movhi	r5,16368
    34c0:	103fcf0e 	bge	r2,zero,3400 <__alt_data_end+0xfffd3400>
    34c4:	d8c01317 	ldw	r3,76(sp)
    34c8:	d8c00515 	stw	r3,20(sp)
    34cc:	d9400917 	ldw	r5,36(sp)
    34d0:	e009883a 	mov	r4,fp
    34d4:	0005f600 	call	5f60 <_Bfree>
    34d8:	d9000517 	ldw	r4,20(sp)
    34dc:	d9802317 	ldw	r6,140(sp)
    34e0:	d9c02517 	ldw	r7,148(sp)
    34e4:	b8000005 	stb	zero,0(r23)
    34e8:	20800044 	addi	r2,r4,1
    34ec:	30800015 	stw	r2,0(r6)
    34f0:	3802aa26 	beq	r7,zero,3f9c <_dtoa_r+0x1178>
    34f4:	3dc00015 	stw	r23,0(r7)
    34f8:	d8800717 	ldw	r2,28(sp)
    34fc:	003e7906 	br	2ee4 <__alt_data_end+0xfffd2ee4>
    3500:	00800434 	movhi	r2,16
    3504:	10bfffc4 	addi	r2,r2,-1
    3508:	88a2703a 	and	r17,r17,r2
    350c:	883e851e 	bne	r17,zero,2f24 <__alt_data_end+0xfffd2f24>
    3510:	00800074 	movhi	r2,1
    3514:	109f0c04 	addi	r2,r2,31792
    3518:	003e8406 	br	2f2c <__alt_data_end+0xfffd2f2c>
    351c:	10c00204 	addi	r3,r2,8
    3520:	003e8706 	br	2f40 <__alt_data_end+0xfffd2f40>
    3524:	01400434 	movhi	r5,16
    3528:	297fffc4 	addi	r5,r5,-1
    352c:	994a703a 	and	r5,r19,r5
    3530:	9009883a 	mov	r4,r18
    3534:	843f0044 	addi	r16,r16,-1023
    3538:	294ffc34 	orhi	r5,r5,16368
    353c:	dd800217 	ldw	r22,8(sp)
    3540:	d8001115 	stw	zero,68(sp)
    3544:	003ea506 	br	2fdc <__alt_data_end+0xfffd2fdc>
    3548:	00800074 	movhi	r2,1
    354c:	109f0304 	addi	r2,r2,31756
    3550:	003e6406 	br	2ee4 <__alt_data_end+0xfffd2ee4>
    3554:	e0001115 	stw	zero,68(fp)
    3558:	000b883a 	mov	r5,zero
    355c:	e009883a 	mov	r4,fp
    3560:	0005eb80 	call	5eb8 <_Balloc>
    3564:	01bfffc4 	movi	r6,-1
    3568:	01c00044 	movi	r7,1
    356c:	d8800715 	stw	r2,28(sp)
    3570:	d9800c15 	stw	r6,48(sp)
    3574:	e0801015 	stw	r2,64(fp)
    3578:	d8000315 	stw	zero,12(sp)
    357c:	d9c00b15 	stw	r7,44(sp)
    3580:	d9800615 	stw	r6,24(sp)
    3584:	d8002215 	stw	zero,136(sp)
    3588:	d8800117 	ldw	r2,4(sp)
    358c:	10008916 	blt	r2,zero,37b4 <_dtoa_r+0x990>
    3590:	d9000517 	ldw	r4,20(sp)
    3594:	00c00384 	movi	r3,14
    3598:	19008616 	blt	r3,r4,37b4 <_dtoa_r+0x990>
    359c:	200490fa 	slli	r2,r4,3
    35a0:	00c00074 	movhi	r3,1
    35a4:	d9802217 	ldw	r6,136(sp)
    35a8:	18df2b04 	addi	r3,r3,31916
    35ac:	1885883a 	add	r2,r3,r2
    35b0:	14000017 	ldw	r16,0(r2)
    35b4:	14400117 	ldw	r17,4(r2)
    35b8:	30016316 	blt	r6,zero,3b48 <_dtoa_r+0xd24>
    35bc:	800d883a 	mov	r6,r16
    35c0:	880f883a 	mov	r7,r17
    35c4:	9009883a 	mov	r4,r18
    35c8:	980b883a 	mov	r5,r19
    35cc:	000b3480 	call	b348 <__divdf3>
    35d0:	180b883a 	mov	r5,r3
    35d4:	1009883a 	mov	r4,r2
    35d8:	000d0d80 	call	d0d8 <__fixdfsi>
    35dc:	1009883a 	mov	r4,r2
    35e0:	102b883a 	mov	r21,r2
    35e4:	000d1580 	call	d158 <__floatsidf>
    35e8:	800d883a 	mov	r6,r16
    35ec:	880f883a 	mov	r7,r17
    35f0:	1009883a 	mov	r4,r2
    35f4:	180b883a 	mov	r5,r3
    35f8:	000bf700 	call	bf70 <__muldf3>
    35fc:	100d883a 	mov	r6,r2
    3600:	180f883a 	mov	r7,r3
    3604:	9009883a 	mov	r4,r18
    3608:	980b883a 	mov	r5,r19
    360c:	000c7dc0 	call	c7dc <__subdf3>
    3610:	d9c00717 	ldw	r7,28(sp)
    3614:	1009883a 	mov	r4,r2
    3618:	a8800c04 	addi	r2,r21,48
    361c:	38800005 	stb	r2,0(r7)
    3620:	3dc00044 	addi	r23,r7,1
    3624:	d9c00617 	ldw	r7,24(sp)
    3628:	01800044 	movi	r6,1
    362c:	180b883a 	mov	r5,r3
    3630:	2005883a 	mov	r2,r4
    3634:	39803826 	beq	r7,r6,3718 <_dtoa_r+0x8f4>
    3638:	000d883a 	mov	r6,zero
    363c:	01d00934 	movhi	r7,16420
    3640:	000bf700 	call	bf70 <__muldf3>
    3644:	000d883a 	mov	r6,zero
    3648:	000f883a 	mov	r7,zero
    364c:	1009883a 	mov	r4,r2
    3650:	180b883a 	mov	r5,r3
    3654:	1025883a 	mov	r18,r2
    3658:	1827883a 	mov	r19,r3
    365c:	000bd180 	call	bd18 <__eqdf2>
    3660:	103f9a26 	beq	r2,zero,34cc <__alt_data_end+0xfffd34cc>
    3664:	d9c00617 	ldw	r7,24(sp)
    3668:	d8c00717 	ldw	r3,28(sp)
    366c:	b829883a 	mov	r20,r23
    3670:	38bfffc4 	addi	r2,r7,-1
    3674:	18ad883a 	add	r22,r3,r2
    3678:	00000a06 	br	36a4 <_dtoa_r+0x880>
    367c:	000bf700 	call	bf70 <__muldf3>
    3680:	000d883a 	mov	r6,zero
    3684:	000f883a 	mov	r7,zero
    3688:	1009883a 	mov	r4,r2
    368c:	180b883a 	mov	r5,r3
    3690:	1025883a 	mov	r18,r2
    3694:	1827883a 	mov	r19,r3
    3698:	b829883a 	mov	r20,r23
    369c:	000bd180 	call	bd18 <__eqdf2>
    36a0:	103f8a26 	beq	r2,zero,34cc <__alt_data_end+0xfffd34cc>
    36a4:	800d883a 	mov	r6,r16
    36a8:	880f883a 	mov	r7,r17
    36ac:	9009883a 	mov	r4,r18
    36b0:	980b883a 	mov	r5,r19
    36b4:	000b3480 	call	b348 <__divdf3>
    36b8:	180b883a 	mov	r5,r3
    36bc:	1009883a 	mov	r4,r2
    36c0:	000d0d80 	call	d0d8 <__fixdfsi>
    36c4:	1009883a 	mov	r4,r2
    36c8:	102b883a 	mov	r21,r2
    36cc:	000d1580 	call	d158 <__floatsidf>
    36d0:	800d883a 	mov	r6,r16
    36d4:	880f883a 	mov	r7,r17
    36d8:	1009883a 	mov	r4,r2
    36dc:	180b883a 	mov	r5,r3
    36e0:	000bf700 	call	bf70 <__muldf3>
    36e4:	100d883a 	mov	r6,r2
    36e8:	180f883a 	mov	r7,r3
    36ec:	9009883a 	mov	r4,r18
    36f0:	980b883a 	mov	r5,r19
    36f4:	000c7dc0 	call	c7dc <__subdf3>
    36f8:	aa000c04 	addi	r8,r21,48
    36fc:	a2000005 	stb	r8,0(r20)
    3700:	000d883a 	mov	r6,zero
    3704:	01d00934 	movhi	r7,16420
    3708:	1009883a 	mov	r4,r2
    370c:	180b883a 	mov	r5,r3
    3710:	a5c00044 	addi	r23,r20,1
    3714:	b53fd91e 	bne	r22,r20,367c <__alt_data_end+0xfffd367c>
    3718:	100d883a 	mov	r6,r2
    371c:	180f883a 	mov	r7,r3
    3720:	1009883a 	mov	r4,r2
    3724:	180b883a 	mov	r5,r3
    3728:	000aa9c0 	call	aa9c <__adddf3>
    372c:	100d883a 	mov	r6,r2
    3730:	180f883a 	mov	r7,r3
    3734:	8009883a 	mov	r4,r16
    3738:	880b883a 	mov	r5,r17
    373c:	1027883a 	mov	r19,r2
    3740:	1825883a 	mov	r18,r3
    3744:	000be7c0 	call	be7c <__ledf2>
    3748:	10000816 	blt	r2,zero,376c <_dtoa_r+0x948>
    374c:	980d883a 	mov	r6,r19
    3750:	900f883a 	mov	r7,r18
    3754:	8009883a 	mov	r4,r16
    3758:	880b883a 	mov	r5,r17
    375c:	000bd180 	call	bd18 <__eqdf2>
    3760:	103f5a1e 	bne	r2,zero,34cc <__alt_data_end+0xfffd34cc>
    3764:	ad40004c 	andi	r21,r21,1
    3768:	a83f5826 	beq	r21,zero,34cc <__alt_data_end+0xfffd34cc>
    376c:	bd3fffc3 	ldbu	r20,-1(r23)
    3770:	b8bfffc4 	addi	r2,r23,-1
    3774:	1007883a 	mov	r3,r2
    3778:	01400e44 	movi	r5,57
    377c:	d9800717 	ldw	r6,28(sp)
    3780:	00000506 	br	3798 <_dtoa_r+0x974>
    3784:	18ffffc4 	addi	r3,r3,-1
    3788:	11824726 	beq	r2,r6,40a8 <_dtoa_r+0x1284>
    378c:	1d000003 	ldbu	r20,0(r3)
    3790:	102f883a 	mov	r23,r2
    3794:	10bfffc4 	addi	r2,r2,-1
    3798:	a1003fcc 	andi	r4,r20,255
    379c:	2100201c 	xori	r4,r4,128
    37a0:	213fe004 	addi	r4,r4,-128
    37a4:	217ff726 	beq	r4,r5,3784 <__alt_data_end+0xfffd3784>
    37a8:	a2000044 	addi	r8,r20,1
    37ac:	12000005 	stb	r8,0(r2)
    37b0:	003f4606 	br	34cc <__alt_data_end+0xfffd34cc>
    37b4:	d9000b17 	ldw	r4,44(sp)
    37b8:	2000c826 	beq	r4,zero,3adc <_dtoa_r+0xcb8>
    37bc:	d9800317 	ldw	r6,12(sp)
    37c0:	00c00044 	movi	r3,1
    37c4:	1980f90e 	bge	r3,r6,3bac <_dtoa_r+0xd88>
    37c8:	d8800617 	ldw	r2,24(sp)
    37cc:	d8c00a17 	ldw	r3,40(sp)
    37d0:	157fffc4 	addi	r21,r2,-1
    37d4:	1d41f316 	blt	r3,r21,3fa4 <_dtoa_r+0x1180>
    37d8:	1d6bc83a 	sub	r21,r3,r21
    37dc:	d9c00617 	ldw	r7,24(sp)
    37e0:	3802aa16 	blt	r7,zero,428c <_dtoa_r+0x1468>
    37e4:	dd000817 	ldw	r20,32(sp)
    37e8:	d8800617 	ldw	r2,24(sp)
    37ec:	d8c00817 	ldw	r3,32(sp)
    37f0:	01400044 	movi	r5,1
    37f4:	e009883a 	mov	r4,fp
    37f8:	1887883a 	add	r3,r3,r2
    37fc:	d8c00815 	stw	r3,32(sp)
    3800:	b0ad883a 	add	r22,r22,r2
    3804:	00062ec0 	call	62ec <__i2b>
    3808:	1023883a 	mov	r17,r2
    380c:	a0000826 	beq	r20,zero,3830 <_dtoa_r+0xa0c>
    3810:	0580070e 	bge	zero,r22,3830 <_dtoa_r+0xa0c>
    3814:	a005883a 	mov	r2,r20
    3818:	b500b916 	blt	r22,r20,3b00 <_dtoa_r+0xcdc>
    381c:	d9000817 	ldw	r4,32(sp)
    3820:	a0a9c83a 	sub	r20,r20,r2
    3824:	b0adc83a 	sub	r22,r22,r2
    3828:	2089c83a 	sub	r4,r4,r2
    382c:	d9000815 	stw	r4,32(sp)
    3830:	d9800a17 	ldw	r6,40(sp)
    3834:	0181810e 	bge	zero,r6,3e3c <_dtoa_r+0x1018>
    3838:	d9c00b17 	ldw	r7,44(sp)
    383c:	3800b326 	beq	r7,zero,3b0c <_dtoa_r+0xce8>
    3840:	a800b226 	beq	r21,zero,3b0c <_dtoa_r+0xce8>
    3844:	880b883a 	mov	r5,r17
    3848:	a80d883a 	mov	r6,r21
    384c:	e009883a 	mov	r4,fp
    3850:	00065b40 	call	65b4 <__pow5mult>
    3854:	d9800917 	ldw	r6,36(sp)
    3858:	100b883a 	mov	r5,r2
    385c:	e009883a 	mov	r4,fp
    3860:	1023883a 	mov	r17,r2
    3864:	00063280 	call	6328 <__multiply>
    3868:	1021883a 	mov	r16,r2
    386c:	d8800a17 	ldw	r2,40(sp)
    3870:	d9400917 	ldw	r5,36(sp)
    3874:	e009883a 	mov	r4,fp
    3878:	1545c83a 	sub	r2,r2,r21
    387c:	d8800a15 	stw	r2,40(sp)
    3880:	0005f600 	call	5f60 <_Bfree>
    3884:	d8c00a17 	ldw	r3,40(sp)
    3888:	18009f1e 	bne	r3,zero,3b08 <_dtoa_r+0xce4>
    388c:	05c00044 	movi	r23,1
    3890:	e009883a 	mov	r4,fp
    3894:	b80b883a 	mov	r5,r23
    3898:	00062ec0 	call	62ec <__i2b>
    389c:	d9000d17 	ldw	r4,52(sp)
    38a0:	102b883a 	mov	r21,r2
    38a4:	2000ce26 	beq	r4,zero,3be0 <_dtoa_r+0xdbc>
    38a8:	200d883a 	mov	r6,r4
    38ac:	100b883a 	mov	r5,r2
    38b0:	e009883a 	mov	r4,fp
    38b4:	00065b40 	call	65b4 <__pow5mult>
    38b8:	d9800317 	ldw	r6,12(sp)
    38bc:	102b883a 	mov	r21,r2
    38c0:	b981810e 	bge	r23,r6,3ec8 <_dtoa_r+0x10a4>
    38c4:	0027883a 	mov	r19,zero
    38c8:	a8800417 	ldw	r2,16(r21)
    38cc:	05c00804 	movi	r23,32
    38d0:	10800104 	addi	r2,r2,4
    38d4:	1085883a 	add	r2,r2,r2
    38d8:	1085883a 	add	r2,r2,r2
    38dc:	a885883a 	add	r2,r21,r2
    38e0:	11000017 	ldw	r4,0(r2)
    38e4:	00061d40 	call	61d4 <__hi0bits>
    38e8:	b885c83a 	sub	r2,r23,r2
    38ec:	1585883a 	add	r2,r2,r22
    38f0:	108007cc 	andi	r2,r2,31
    38f4:	1000b326 	beq	r2,zero,3bc4 <_dtoa_r+0xda0>
    38f8:	00c00804 	movi	r3,32
    38fc:	1887c83a 	sub	r3,r3,r2
    3900:	01000104 	movi	r4,4
    3904:	20c2cd0e 	bge	r4,r3,443c <_dtoa_r+0x1618>
    3908:	00c00704 	movi	r3,28
    390c:	1885c83a 	sub	r2,r3,r2
    3910:	d8c00817 	ldw	r3,32(sp)
    3914:	a0a9883a 	add	r20,r20,r2
    3918:	b0ad883a 	add	r22,r22,r2
    391c:	1887883a 	add	r3,r3,r2
    3920:	d8c00815 	stw	r3,32(sp)
    3924:	d9800817 	ldw	r6,32(sp)
    3928:	0180040e 	bge	zero,r6,393c <_dtoa_r+0xb18>
    392c:	800b883a 	mov	r5,r16
    3930:	e009883a 	mov	r4,fp
    3934:	00066f40 	call	66f4 <__lshift>
    3938:	1021883a 	mov	r16,r2
    393c:	0580050e 	bge	zero,r22,3954 <_dtoa_r+0xb30>
    3940:	a80b883a 	mov	r5,r21
    3944:	b00d883a 	mov	r6,r22
    3948:	e009883a 	mov	r4,fp
    394c:	00066f40 	call	66f4 <__lshift>
    3950:	102b883a 	mov	r21,r2
    3954:	d9c00e17 	ldw	r7,56(sp)
    3958:	3801211e 	bne	r7,zero,3de0 <_dtoa_r+0xfbc>
    395c:	d9800617 	ldw	r6,24(sp)
    3960:	0181380e 	bge	zero,r6,3e44 <_dtoa_r+0x1020>
    3964:	d8c00b17 	ldw	r3,44(sp)
    3968:	1800ab1e 	bne	r3,zero,3c18 <_dtoa_r+0xdf4>
    396c:	dc800717 	ldw	r18,28(sp)
    3970:	dcc00617 	ldw	r19,24(sp)
    3974:	9029883a 	mov	r20,r18
    3978:	00000206 	br	3984 <_dtoa_r+0xb60>
    397c:	0005f880 	call	5f88 <__multadd>
    3980:	1021883a 	mov	r16,r2
    3984:	a80b883a 	mov	r5,r21
    3988:	8009883a 	mov	r4,r16
    398c:	0002bfc0 	call	2bfc <quorem>
    3990:	10800c04 	addi	r2,r2,48
    3994:	90800005 	stb	r2,0(r18)
    3998:	94800044 	addi	r18,r18,1
    399c:	9507c83a 	sub	r3,r18,r20
    39a0:	000f883a 	mov	r7,zero
    39a4:	01800284 	movi	r6,10
    39a8:	800b883a 	mov	r5,r16
    39ac:	e009883a 	mov	r4,fp
    39b0:	1cfff216 	blt	r3,r19,397c <__alt_data_end+0xfffd397c>
    39b4:	1011883a 	mov	r8,r2
    39b8:	d8800617 	ldw	r2,24(sp)
    39bc:	0082370e 	bge	zero,r2,429c <_dtoa_r+0x1478>
    39c0:	d9000717 	ldw	r4,28(sp)
    39c4:	0025883a 	mov	r18,zero
    39c8:	20af883a 	add	r23,r4,r2
    39cc:	01800044 	movi	r6,1
    39d0:	800b883a 	mov	r5,r16
    39d4:	e009883a 	mov	r4,fp
    39d8:	da001715 	stw	r8,92(sp)
    39dc:	00066f40 	call	66f4 <__lshift>
    39e0:	a80b883a 	mov	r5,r21
    39e4:	1009883a 	mov	r4,r2
    39e8:	d8800915 	stw	r2,36(sp)
    39ec:	000683c0 	call	683c <__mcmp>
    39f0:	da001717 	ldw	r8,92(sp)
    39f4:	0081800e 	bge	zero,r2,3ff8 <_dtoa_r+0x11d4>
    39f8:	b93fffc3 	ldbu	r4,-1(r23)
    39fc:	b8bfffc4 	addi	r2,r23,-1
    3a00:	1007883a 	mov	r3,r2
    3a04:	01800e44 	movi	r6,57
    3a08:	d9c00717 	ldw	r7,28(sp)
    3a0c:	00000506 	br	3a24 <_dtoa_r+0xc00>
    3a10:	18ffffc4 	addi	r3,r3,-1
    3a14:	11c12326 	beq	r2,r7,3ea4 <_dtoa_r+0x1080>
    3a18:	19000003 	ldbu	r4,0(r3)
    3a1c:	102f883a 	mov	r23,r2
    3a20:	10bfffc4 	addi	r2,r2,-1
    3a24:	21403fcc 	andi	r5,r4,255
    3a28:	2940201c 	xori	r5,r5,128
    3a2c:	297fe004 	addi	r5,r5,-128
    3a30:	29bff726 	beq	r5,r6,3a10 <__alt_data_end+0xfffd3a10>
    3a34:	21000044 	addi	r4,r4,1
    3a38:	11000005 	stb	r4,0(r2)
    3a3c:	a80b883a 	mov	r5,r21
    3a40:	e009883a 	mov	r4,fp
    3a44:	0005f600 	call	5f60 <_Bfree>
    3a48:	883ea026 	beq	r17,zero,34cc <__alt_data_end+0xfffd34cc>
    3a4c:	90000426 	beq	r18,zero,3a60 <_dtoa_r+0xc3c>
    3a50:	94400326 	beq	r18,r17,3a60 <_dtoa_r+0xc3c>
    3a54:	900b883a 	mov	r5,r18
    3a58:	e009883a 	mov	r4,fp
    3a5c:	0005f600 	call	5f60 <_Bfree>
    3a60:	880b883a 	mov	r5,r17
    3a64:	e009883a 	mov	r4,fp
    3a68:	0005f600 	call	5f60 <_Bfree>
    3a6c:	003e9706 	br	34cc <__alt_data_end+0xfffd34cc>
    3a70:	01800044 	movi	r6,1
    3a74:	d9800e15 	stw	r6,56(sp)
    3a78:	003d9606 	br	30d4 <__alt_data_end+0xfffd30d4>
    3a7c:	d8800817 	ldw	r2,32(sp)
    3a80:	d8c00517 	ldw	r3,20(sp)
    3a84:	d8000d15 	stw	zero,52(sp)
    3a88:	10c5c83a 	sub	r2,r2,r3
    3a8c:	00c9c83a 	sub	r4,zero,r3
    3a90:	d8800815 	stw	r2,32(sp)
    3a94:	d9000a15 	stw	r4,40(sp)
    3a98:	003d9706 	br	30f8 <__alt_data_end+0xfffd30f8>
    3a9c:	05adc83a 	sub	r22,zero,r22
    3aa0:	dd800815 	stw	r22,32(sp)
    3aa4:	002d883a 	mov	r22,zero
    3aa8:	003d8e06 	br	30e4 <__alt_data_end+0xfffd30e4>
    3aac:	d9000517 	ldw	r4,20(sp)
    3ab0:	000d1580 	call	d158 <__floatsidf>
    3ab4:	100d883a 	mov	r6,r2
    3ab8:	180f883a 	mov	r7,r3
    3abc:	a009883a 	mov	r4,r20
    3ac0:	880b883a 	mov	r5,r17
    3ac4:	000bd180 	call	bd18 <__eqdf2>
    3ac8:	103d7126 	beq	r2,zero,3090 <__alt_data_end+0xfffd3090>
    3acc:	d9c00517 	ldw	r7,20(sp)
    3ad0:	39ffffc4 	addi	r7,r7,-1
    3ad4:	d9c00515 	stw	r7,20(sp)
    3ad8:	003d6d06 	br	3090 <__alt_data_end+0xfffd3090>
    3adc:	dd400a17 	ldw	r21,40(sp)
    3ae0:	dd000817 	ldw	r20,32(sp)
    3ae4:	0023883a 	mov	r17,zero
    3ae8:	003f4806 	br	380c <__alt_data_end+0xfffd380c>
    3aec:	10e3c83a 	sub	r17,r2,r3
    3af0:	9448983a 	sll	r4,r18,r17
    3af4:	003d3206 	br	2fc0 <__alt_data_end+0xfffd2fc0>
    3af8:	d8000e15 	stw	zero,56(sp)
    3afc:	003d7506 	br	30d4 <__alt_data_end+0xfffd30d4>
    3b00:	b005883a 	mov	r2,r22
    3b04:	003f4506 	br	381c <__alt_data_end+0xfffd381c>
    3b08:	dc000915 	stw	r16,36(sp)
    3b0c:	d9800a17 	ldw	r6,40(sp)
    3b10:	d9400917 	ldw	r5,36(sp)
    3b14:	e009883a 	mov	r4,fp
    3b18:	00065b40 	call	65b4 <__pow5mult>
    3b1c:	1021883a 	mov	r16,r2
    3b20:	003f5a06 	br	388c <__alt_data_end+0xfffd388c>
    3b24:	01c00044 	movi	r7,1
    3b28:	d9c00b15 	stw	r7,44(sp)
    3b2c:	d8802217 	ldw	r2,136(sp)
    3b30:	0081280e 	bge	zero,r2,3fd4 <_dtoa_r+0x11b0>
    3b34:	100d883a 	mov	r6,r2
    3b38:	1021883a 	mov	r16,r2
    3b3c:	d8800c15 	stw	r2,48(sp)
    3b40:	d8800615 	stw	r2,24(sp)
    3b44:	003d8806 	br	3168 <__alt_data_end+0xfffd3168>
    3b48:	d8800617 	ldw	r2,24(sp)
    3b4c:	00be9b16 	blt	zero,r2,35bc <__alt_data_end+0xfffd35bc>
    3b50:	10010f1e 	bne	r2,zero,3f90 <_dtoa_r+0x116c>
    3b54:	880b883a 	mov	r5,r17
    3b58:	000d883a 	mov	r6,zero
    3b5c:	01d00534 	movhi	r7,16404
    3b60:	8009883a 	mov	r4,r16
    3b64:	000bf700 	call	bf70 <__muldf3>
    3b68:	900d883a 	mov	r6,r18
    3b6c:	980f883a 	mov	r7,r19
    3b70:	1009883a 	mov	r4,r2
    3b74:	180b883a 	mov	r5,r3
    3b78:	000bda00 	call	bda0 <__gedf2>
    3b7c:	002b883a 	mov	r21,zero
    3b80:	0023883a 	mov	r17,zero
    3b84:	1000bf16 	blt	r2,zero,3e84 <_dtoa_r+0x1060>
    3b88:	d9802217 	ldw	r6,136(sp)
    3b8c:	ddc00717 	ldw	r23,28(sp)
    3b90:	018c303a 	nor	r6,zero,r6
    3b94:	d9800515 	stw	r6,20(sp)
    3b98:	a80b883a 	mov	r5,r21
    3b9c:	e009883a 	mov	r4,fp
    3ba0:	0005f600 	call	5f60 <_Bfree>
    3ba4:	883e4926 	beq	r17,zero,34cc <__alt_data_end+0xfffd34cc>
    3ba8:	003fad06 	br	3a60 <__alt_data_end+0xfffd3a60>
    3bac:	d9c01117 	ldw	r7,68(sp)
    3bb0:	3801bc26 	beq	r7,zero,42a4 <_dtoa_r+0x1480>
    3bb4:	10810cc4 	addi	r2,r2,1075
    3bb8:	dd400a17 	ldw	r21,40(sp)
    3bbc:	dd000817 	ldw	r20,32(sp)
    3bc0:	003f0a06 	br	37ec <__alt_data_end+0xfffd37ec>
    3bc4:	00800704 	movi	r2,28
    3bc8:	d9000817 	ldw	r4,32(sp)
    3bcc:	a0a9883a 	add	r20,r20,r2
    3bd0:	b0ad883a 	add	r22,r22,r2
    3bd4:	2089883a 	add	r4,r4,r2
    3bd8:	d9000815 	stw	r4,32(sp)
    3bdc:	003f5106 	br	3924 <__alt_data_end+0xfffd3924>
    3be0:	d8c00317 	ldw	r3,12(sp)
    3be4:	b8c1fc0e 	bge	r23,r3,43d8 <_dtoa_r+0x15b4>
    3be8:	0027883a 	mov	r19,zero
    3bec:	b805883a 	mov	r2,r23
    3bf0:	003f3e06 	br	38ec <__alt_data_end+0xfffd38ec>
    3bf4:	880b883a 	mov	r5,r17
    3bf8:	e009883a 	mov	r4,fp
    3bfc:	000f883a 	mov	r7,zero
    3c00:	01800284 	movi	r6,10
    3c04:	0005f880 	call	5f88 <__multadd>
    3c08:	d9000c17 	ldw	r4,48(sp)
    3c0c:	1023883a 	mov	r17,r2
    3c10:	0102040e 	bge	zero,r4,4424 <_dtoa_r+0x1600>
    3c14:	d9000615 	stw	r4,24(sp)
    3c18:	0500050e 	bge	zero,r20,3c30 <_dtoa_r+0xe0c>
    3c1c:	880b883a 	mov	r5,r17
    3c20:	a00d883a 	mov	r6,r20
    3c24:	e009883a 	mov	r4,fp
    3c28:	00066f40 	call	66f4 <__lshift>
    3c2c:	1023883a 	mov	r17,r2
    3c30:	9801241e 	bne	r19,zero,40c4 <_dtoa_r+0x12a0>
    3c34:	8829883a 	mov	r20,r17
    3c38:	d9000617 	ldw	r4,24(sp)
    3c3c:	dcc00717 	ldw	r19,28(sp)
    3c40:	9480004c 	andi	r18,r18,1
    3c44:	20bfffc4 	addi	r2,r4,-1
    3c48:	9885883a 	add	r2,r19,r2
    3c4c:	d8800415 	stw	r2,16(sp)
    3c50:	dc800615 	stw	r18,24(sp)
    3c54:	a80b883a 	mov	r5,r21
    3c58:	8009883a 	mov	r4,r16
    3c5c:	0002bfc0 	call	2bfc <quorem>
    3c60:	880b883a 	mov	r5,r17
    3c64:	8009883a 	mov	r4,r16
    3c68:	102f883a 	mov	r23,r2
    3c6c:	000683c0 	call	683c <__mcmp>
    3c70:	a80b883a 	mov	r5,r21
    3c74:	a00d883a 	mov	r6,r20
    3c78:	e009883a 	mov	r4,fp
    3c7c:	102d883a 	mov	r22,r2
    3c80:	000689c0 	call	689c <__mdiff>
    3c84:	1007883a 	mov	r3,r2
    3c88:	10800317 	ldw	r2,12(r2)
    3c8c:	bc800c04 	addi	r18,r23,48
    3c90:	180b883a 	mov	r5,r3
    3c94:	10004e1e 	bne	r2,zero,3dd0 <_dtoa_r+0xfac>
    3c98:	8009883a 	mov	r4,r16
    3c9c:	d8c01615 	stw	r3,88(sp)
    3ca0:	000683c0 	call	683c <__mcmp>
    3ca4:	d8c01617 	ldw	r3,88(sp)
    3ca8:	e009883a 	mov	r4,fp
    3cac:	d8801615 	stw	r2,88(sp)
    3cb0:	180b883a 	mov	r5,r3
    3cb4:	0005f600 	call	5f60 <_Bfree>
    3cb8:	d8801617 	ldw	r2,88(sp)
    3cbc:	1000041e 	bne	r2,zero,3cd0 <_dtoa_r+0xeac>
    3cc0:	d9800317 	ldw	r6,12(sp)
    3cc4:	3000021e 	bne	r6,zero,3cd0 <_dtoa_r+0xeac>
    3cc8:	d8c00617 	ldw	r3,24(sp)
    3ccc:	18003726 	beq	r3,zero,3dac <_dtoa_r+0xf88>
    3cd0:	b0002016 	blt	r22,zero,3d54 <_dtoa_r+0xf30>
    3cd4:	b000041e 	bne	r22,zero,3ce8 <_dtoa_r+0xec4>
    3cd8:	d9000317 	ldw	r4,12(sp)
    3cdc:	2000021e 	bne	r4,zero,3ce8 <_dtoa_r+0xec4>
    3ce0:	d8c00617 	ldw	r3,24(sp)
    3ce4:	18001b26 	beq	r3,zero,3d54 <_dtoa_r+0xf30>
    3ce8:	00810716 	blt	zero,r2,4108 <_dtoa_r+0x12e4>
    3cec:	d8c00417 	ldw	r3,16(sp)
    3cf0:	9d800044 	addi	r22,r19,1
    3cf4:	9c800005 	stb	r18,0(r19)
    3cf8:	b02f883a 	mov	r23,r22
    3cfc:	98c10626 	beq	r19,r3,4118 <_dtoa_r+0x12f4>
    3d00:	800b883a 	mov	r5,r16
    3d04:	000f883a 	mov	r7,zero
    3d08:	01800284 	movi	r6,10
    3d0c:	e009883a 	mov	r4,fp
    3d10:	0005f880 	call	5f88 <__multadd>
    3d14:	1021883a 	mov	r16,r2
    3d18:	000f883a 	mov	r7,zero
    3d1c:	01800284 	movi	r6,10
    3d20:	880b883a 	mov	r5,r17
    3d24:	e009883a 	mov	r4,fp
    3d28:	8d002526 	beq	r17,r20,3dc0 <_dtoa_r+0xf9c>
    3d2c:	0005f880 	call	5f88 <__multadd>
    3d30:	a00b883a 	mov	r5,r20
    3d34:	000f883a 	mov	r7,zero
    3d38:	01800284 	movi	r6,10
    3d3c:	e009883a 	mov	r4,fp
    3d40:	1023883a 	mov	r17,r2
    3d44:	0005f880 	call	5f88 <__multadd>
    3d48:	1029883a 	mov	r20,r2
    3d4c:	b027883a 	mov	r19,r22
    3d50:	003fc006 	br	3c54 <__alt_data_end+0xfffd3c54>
    3d54:	9011883a 	mov	r8,r18
    3d58:	00800e0e 	bge	zero,r2,3d94 <_dtoa_r+0xf70>
    3d5c:	800b883a 	mov	r5,r16
    3d60:	01800044 	movi	r6,1
    3d64:	e009883a 	mov	r4,fp
    3d68:	da001715 	stw	r8,92(sp)
    3d6c:	00066f40 	call	66f4 <__lshift>
    3d70:	a80b883a 	mov	r5,r21
    3d74:	1009883a 	mov	r4,r2
    3d78:	1021883a 	mov	r16,r2
    3d7c:	000683c0 	call	683c <__mcmp>
    3d80:	da001717 	ldw	r8,92(sp)
    3d84:	0081960e 	bge	zero,r2,43e0 <_dtoa_r+0x15bc>
    3d88:	00800e44 	movi	r2,57
    3d8c:	40817026 	beq	r8,r2,4350 <_dtoa_r+0x152c>
    3d90:	ba000c44 	addi	r8,r23,49
    3d94:	8825883a 	mov	r18,r17
    3d98:	9dc00044 	addi	r23,r19,1
    3d9c:	9a000005 	stb	r8,0(r19)
    3da0:	a023883a 	mov	r17,r20
    3da4:	dc000915 	stw	r16,36(sp)
    3da8:	003f2406 	br	3a3c <__alt_data_end+0xfffd3a3c>
    3dac:	00800e44 	movi	r2,57
    3db0:	9011883a 	mov	r8,r18
    3db4:	90816626 	beq	r18,r2,4350 <_dtoa_r+0x152c>
    3db8:	05bff516 	blt	zero,r22,3d90 <__alt_data_end+0xfffd3d90>
    3dbc:	003ff506 	br	3d94 <__alt_data_end+0xfffd3d94>
    3dc0:	0005f880 	call	5f88 <__multadd>
    3dc4:	1023883a 	mov	r17,r2
    3dc8:	1029883a 	mov	r20,r2
    3dcc:	003fdf06 	br	3d4c <__alt_data_end+0xfffd3d4c>
    3dd0:	e009883a 	mov	r4,fp
    3dd4:	0005f600 	call	5f60 <_Bfree>
    3dd8:	00800044 	movi	r2,1
    3ddc:	003fbc06 	br	3cd0 <__alt_data_end+0xfffd3cd0>
    3de0:	a80b883a 	mov	r5,r21
    3de4:	8009883a 	mov	r4,r16
    3de8:	000683c0 	call	683c <__mcmp>
    3dec:	103edb0e 	bge	r2,zero,395c <__alt_data_end+0xfffd395c>
    3df0:	800b883a 	mov	r5,r16
    3df4:	000f883a 	mov	r7,zero
    3df8:	01800284 	movi	r6,10
    3dfc:	e009883a 	mov	r4,fp
    3e00:	0005f880 	call	5f88 <__multadd>
    3e04:	1021883a 	mov	r16,r2
    3e08:	d8800517 	ldw	r2,20(sp)
    3e0c:	d8c00b17 	ldw	r3,44(sp)
    3e10:	10bfffc4 	addi	r2,r2,-1
    3e14:	d8800515 	stw	r2,20(sp)
    3e18:	183f761e 	bne	r3,zero,3bf4 <__alt_data_end+0xfffd3bf4>
    3e1c:	d9000c17 	ldw	r4,48(sp)
    3e20:	0101730e 	bge	zero,r4,43f0 <_dtoa_r+0x15cc>
    3e24:	d9000615 	stw	r4,24(sp)
    3e28:	003ed006 	br	396c <__alt_data_end+0xfffd396c>
    3e2c:	00800084 	movi	r2,2
    3e30:	3081861e 	bne	r6,r2,444c <_dtoa_r+0x1628>
    3e34:	d8000b15 	stw	zero,44(sp)
    3e38:	003f3c06 	br	3b2c <__alt_data_end+0xfffd3b2c>
    3e3c:	dc000917 	ldw	r16,36(sp)
    3e40:	003e9206 	br	388c <__alt_data_end+0xfffd388c>
    3e44:	d9c00317 	ldw	r7,12(sp)
    3e48:	00800084 	movi	r2,2
    3e4c:	11fec50e 	bge	r2,r7,3964 <__alt_data_end+0xfffd3964>
    3e50:	d9000617 	ldw	r4,24(sp)
    3e54:	20013c1e 	bne	r4,zero,4348 <_dtoa_r+0x1524>
    3e58:	a80b883a 	mov	r5,r21
    3e5c:	000f883a 	mov	r7,zero
    3e60:	01800144 	movi	r6,5
    3e64:	e009883a 	mov	r4,fp
    3e68:	0005f880 	call	5f88 <__multadd>
    3e6c:	100b883a 	mov	r5,r2
    3e70:	8009883a 	mov	r4,r16
    3e74:	102b883a 	mov	r21,r2
    3e78:	000683c0 	call	683c <__mcmp>
    3e7c:	dc000915 	stw	r16,36(sp)
    3e80:	00bf410e 	bge	zero,r2,3b88 <__alt_data_end+0xfffd3b88>
    3e84:	d9c00717 	ldw	r7,28(sp)
    3e88:	00800c44 	movi	r2,49
    3e8c:	38800005 	stb	r2,0(r7)
    3e90:	d8800517 	ldw	r2,20(sp)
    3e94:	3dc00044 	addi	r23,r7,1
    3e98:	10800044 	addi	r2,r2,1
    3e9c:	d8800515 	stw	r2,20(sp)
    3ea0:	003f3d06 	br	3b98 <__alt_data_end+0xfffd3b98>
    3ea4:	d9800517 	ldw	r6,20(sp)
    3ea8:	d9c00717 	ldw	r7,28(sp)
    3eac:	00800c44 	movi	r2,49
    3eb0:	31800044 	addi	r6,r6,1
    3eb4:	d9800515 	stw	r6,20(sp)
    3eb8:	38800005 	stb	r2,0(r7)
    3ebc:	003edf06 	br	3a3c <__alt_data_end+0xfffd3a3c>
    3ec0:	d8000b15 	stw	zero,44(sp)
    3ec4:	003c9f06 	br	3144 <__alt_data_end+0xfffd3144>
    3ec8:	903e7e1e 	bne	r18,zero,38c4 <__alt_data_end+0xfffd38c4>
    3ecc:	00800434 	movhi	r2,16
    3ed0:	10bfffc4 	addi	r2,r2,-1
    3ed4:	9884703a 	and	r2,r19,r2
    3ed8:	1000ea1e 	bne	r2,zero,4284 <_dtoa_r+0x1460>
    3edc:	9cdffc2c 	andhi	r19,r19,32752
    3ee0:	9800e826 	beq	r19,zero,4284 <_dtoa_r+0x1460>
    3ee4:	d9c00817 	ldw	r7,32(sp)
    3ee8:	b5800044 	addi	r22,r22,1
    3eec:	04c00044 	movi	r19,1
    3ef0:	39c00044 	addi	r7,r7,1
    3ef4:	d9c00815 	stw	r7,32(sp)
    3ef8:	d8800d17 	ldw	r2,52(sp)
    3efc:	103e721e 	bne	r2,zero,38c8 <__alt_data_end+0xfffd38c8>
    3f00:	00800044 	movi	r2,1
    3f04:	003e7906 	br	38ec <__alt_data_end+0xfffd38ec>
    3f08:	8009883a 	mov	r4,r16
    3f0c:	000d1580 	call	d158 <__floatsidf>
    3f10:	d9800f17 	ldw	r6,60(sp)
    3f14:	d9c01017 	ldw	r7,64(sp)
    3f18:	1009883a 	mov	r4,r2
    3f1c:	180b883a 	mov	r5,r3
    3f20:	000bf700 	call	bf70 <__muldf3>
    3f24:	000d883a 	mov	r6,zero
    3f28:	01d00734 	movhi	r7,16412
    3f2c:	1009883a 	mov	r4,r2
    3f30:	180b883a 	mov	r5,r3
    3f34:	000aa9c0 	call	aa9c <__adddf3>
    3f38:	047f3034 	movhi	r17,64704
    3f3c:	1021883a 	mov	r16,r2
    3f40:	1c63883a 	add	r17,r3,r17
    3f44:	d9000f17 	ldw	r4,60(sp)
    3f48:	d9401017 	ldw	r5,64(sp)
    3f4c:	000d883a 	mov	r6,zero
    3f50:	01d00534 	movhi	r7,16404
    3f54:	000c7dc0 	call	c7dc <__subdf3>
    3f58:	800d883a 	mov	r6,r16
    3f5c:	880f883a 	mov	r7,r17
    3f60:	1009883a 	mov	r4,r2
    3f64:	180b883a 	mov	r5,r3
    3f68:	102b883a 	mov	r21,r2
    3f6c:	1829883a 	mov	r20,r3
    3f70:	000bda00 	call	bda0 <__gedf2>
    3f74:	00806c16 	blt	zero,r2,4128 <_dtoa_r+0x1304>
    3f78:	89e0003c 	xorhi	r7,r17,32768
    3f7c:	800d883a 	mov	r6,r16
    3f80:	a809883a 	mov	r4,r21
    3f84:	a00b883a 	mov	r5,r20
    3f88:	000be7c0 	call	be7c <__ledf2>
    3f8c:	103d7e0e 	bge	r2,zero,3588 <__alt_data_end+0xfffd3588>
    3f90:	002b883a 	mov	r21,zero
    3f94:	0023883a 	mov	r17,zero
    3f98:	003efb06 	br	3b88 <__alt_data_end+0xfffd3b88>
    3f9c:	d8800717 	ldw	r2,28(sp)
    3fa0:	003bd006 	br	2ee4 <__alt_data_end+0xfffd2ee4>
    3fa4:	d9000a17 	ldw	r4,40(sp)
    3fa8:	d9800d17 	ldw	r6,52(sp)
    3fac:	dd400a15 	stw	r21,40(sp)
    3fb0:	a905c83a 	sub	r2,r21,r4
    3fb4:	308d883a 	add	r6,r6,r2
    3fb8:	d9800d15 	stw	r6,52(sp)
    3fbc:	002b883a 	mov	r21,zero
    3fc0:	003e0606 	br	37dc <__alt_data_end+0xfffd37dc>
    3fc4:	9023883a 	mov	r17,r18
    3fc8:	9829883a 	mov	r20,r19
    3fcc:	04000084 	movi	r16,2
    3fd0:	003c9206 	br	321c <__alt_data_end+0xfffd321c>
    3fd4:	04000044 	movi	r16,1
    3fd8:	dc000c15 	stw	r16,48(sp)
    3fdc:	dc000615 	stw	r16,24(sp)
    3fe0:	dc002215 	stw	r16,136(sp)
    3fe4:	e0001115 	stw	zero,68(fp)
    3fe8:	000b883a 	mov	r5,zero
    3fec:	003c6906 	br	3194 <__alt_data_end+0xfffd3194>
    3ff0:	3021883a 	mov	r16,r6
    3ff4:	003ffb06 	br	3fe4 <__alt_data_end+0xfffd3fe4>
    3ff8:	1000021e 	bne	r2,zero,4004 <_dtoa_r+0x11e0>
    3ffc:	4200004c 	andi	r8,r8,1
    4000:	403e7d1e 	bne	r8,zero,39f8 <__alt_data_end+0xfffd39f8>
    4004:	01000c04 	movi	r4,48
    4008:	00000106 	br	4010 <_dtoa_r+0x11ec>
    400c:	102f883a 	mov	r23,r2
    4010:	b8bfffc4 	addi	r2,r23,-1
    4014:	10c00007 	ldb	r3,0(r2)
    4018:	193ffc26 	beq	r3,r4,400c <__alt_data_end+0xfffd400c>
    401c:	003e8706 	br	3a3c <__alt_data_end+0xfffd3a3c>
    4020:	d8800517 	ldw	r2,20(sp)
    4024:	00a3c83a 	sub	r17,zero,r2
    4028:	8800a426 	beq	r17,zero,42bc <_dtoa_r+0x1498>
    402c:	888003cc 	andi	r2,r17,15
    4030:	100490fa 	slli	r2,r2,3
    4034:	00c00074 	movhi	r3,1
    4038:	18df2b04 	addi	r3,r3,31916
    403c:	1885883a 	add	r2,r3,r2
    4040:	11800017 	ldw	r6,0(r2)
    4044:	11c00117 	ldw	r7,4(r2)
    4048:	9009883a 	mov	r4,r18
    404c:	980b883a 	mov	r5,r19
    4050:	8823d13a 	srai	r17,r17,4
    4054:	000bf700 	call	bf70 <__muldf3>
    4058:	d8800f15 	stw	r2,60(sp)
    405c:	d8c01015 	stw	r3,64(sp)
    4060:	8800e826 	beq	r17,zero,4404 <_dtoa_r+0x15e0>
    4064:	05000074 	movhi	r20,1
    4068:	a51f2104 	addi	r20,r20,31876
    406c:	04000084 	movi	r16,2
    4070:	8980004c 	andi	r6,r17,1
    4074:	1009883a 	mov	r4,r2
    4078:	8823d07a 	srai	r17,r17,1
    407c:	180b883a 	mov	r5,r3
    4080:	30000426 	beq	r6,zero,4094 <_dtoa_r+0x1270>
    4084:	a1800017 	ldw	r6,0(r20)
    4088:	a1c00117 	ldw	r7,4(r20)
    408c:	84000044 	addi	r16,r16,1
    4090:	000bf700 	call	bf70 <__muldf3>
    4094:	a5000204 	addi	r20,r20,8
    4098:	883ff51e 	bne	r17,zero,4070 <__alt_data_end+0xfffd4070>
    409c:	d8800f15 	stw	r2,60(sp)
    40a0:	d8c01015 	stw	r3,64(sp)
    40a4:	003c7606 	br	3280 <__alt_data_end+0xfffd3280>
    40a8:	00c00c04 	movi	r3,48
    40ac:	10c00005 	stb	r3,0(r2)
    40b0:	d8c00517 	ldw	r3,20(sp)
    40b4:	bd3fffc3 	ldbu	r20,-1(r23)
    40b8:	18c00044 	addi	r3,r3,1
    40bc:	d8c00515 	stw	r3,20(sp)
    40c0:	003db906 	br	37a8 <__alt_data_end+0xfffd37a8>
    40c4:	89400117 	ldw	r5,4(r17)
    40c8:	e009883a 	mov	r4,fp
    40cc:	0005eb80 	call	5eb8 <_Balloc>
    40d0:	89800417 	ldw	r6,16(r17)
    40d4:	89400304 	addi	r5,r17,12
    40d8:	11000304 	addi	r4,r2,12
    40dc:	31800084 	addi	r6,r6,2
    40e0:	318d883a 	add	r6,r6,r6
    40e4:	318d883a 	add	r6,r6,r6
    40e8:	1027883a 	mov	r19,r2
    40ec:	0005c480 	call	5c48 <memcpy>
    40f0:	01800044 	movi	r6,1
    40f4:	980b883a 	mov	r5,r19
    40f8:	e009883a 	mov	r4,fp
    40fc:	00066f40 	call	66f4 <__lshift>
    4100:	1029883a 	mov	r20,r2
    4104:	003ecc06 	br	3c38 <__alt_data_end+0xfffd3c38>
    4108:	00800e44 	movi	r2,57
    410c:	90809026 	beq	r18,r2,4350 <_dtoa_r+0x152c>
    4110:	92000044 	addi	r8,r18,1
    4114:	003f1f06 	br	3d94 <__alt_data_end+0xfffd3d94>
    4118:	9011883a 	mov	r8,r18
    411c:	8825883a 	mov	r18,r17
    4120:	a023883a 	mov	r17,r20
    4124:	003e2906 	br	39cc <__alt_data_end+0xfffd39cc>
    4128:	002b883a 	mov	r21,zero
    412c:	0023883a 	mov	r17,zero
    4130:	003f5406 	br	3e84 <__alt_data_end+0xfffd3e84>
    4134:	61bfffc4 	addi	r6,r12,-1
    4138:	300490fa 	slli	r2,r6,3
    413c:	00c00074 	movhi	r3,1
    4140:	18df2b04 	addi	r3,r3,31916
    4144:	1885883a 	add	r2,r3,r2
    4148:	11000017 	ldw	r4,0(r2)
    414c:	11400117 	ldw	r5,4(r2)
    4150:	d8800717 	ldw	r2,28(sp)
    4154:	880f883a 	mov	r7,r17
    4158:	d9801215 	stw	r6,72(sp)
    415c:	800d883a 	mov	r6,r16
    4160:	db001615 	stw	r12,88(sp)
    4164:	15c00044 	addi	r23,r2,1
    4168:	000bf700 	call	bf70 <__muldf3>
    416c:	d9401017 	ldw	r5,64(sp)
    4170:	d9000f17 	ldw	r4,60(sp)
    4174:	d8c01515 	stw	r3,84(sp)
    4178:	d8801415 	stw	r2,80(sp)
    417c:	000d0d80 	call	d0d8 <__fixdfsi>
    4180:	1009883a 	mov	r4,r2
    4184:	1021883a 	mov	r16,r2
    4188:	000d1580 	call	d158 <__floatsidf>
    418c:	d9000f17 	ldw	r4,60(sp)
    4190:	d9401017 	ldw	r5,64(sp)
    4194:	100d883a 	mov	r6,r2
    4198:	180f883a 	mov	r7,r3
    419c:	000c7dc0 	call	c7dc <__subdf3>
    41a0:	1829883a 	mov	r20,r3
    41a4:	d8c00717 	ldw	r3,28(sp)
    41a8:	84000c04 	addi	r16,r16,48
    41ac:	1023883a 	mov	r17,r2
    41b0:	1c000005 	stb	r16,0(r3)
    41b4:	db001617 	ldw	r12,88(sp)
    41b8:	00800044 	movi	r2,1
    41bc:	60802226 	beq	r12,r2,4248 <_dtoa_r+0x1424>
    41c0:	d9c00717 	ldw	r7,28(sp)
    41c4:	8805883a 	mov	r2,r17
    41c8:	b82b883a 	mov	r21,r23
    41cc:	3b19883a 	add	r12,r7,r12
    41d0:	6023883a 	mov	r17,r12
    41d4:	a007883a 	mov	r3,r20
    41d8:	dc800f15 	stw	r18,60(sp)
    41dc:	000d883a 	mov	r6,zero
    41e0:	01d00934 	movhi	r7,16420
    41e4:	1009883a 	mov	r4,r2
    41e8:	180b883a 	mov	r5,r3
    41ec:	000bf700 	call	bf70 <__muldf3>
    41f0:	180b883a 	mov	r5,r3
    41f4:	1009883a 	mov	r4,r2
    41f8:	1829883a 	mov	r20,r3
    41fc:	1025883a 	mov	r18,r2
    4200:	000d0d80 	call	d0d8 <__fixdfsi>
    4204:	1009883a 	mov	r4,r2
    4208:	1021883a 	mov	r16,r2
    420c:	000d1580 	call	d158 <__floatsidf>
    4210:	100d883a 	mov	r6,r2
    4214:	180f883a 	mov	r7,r3
    4218:	9009883a 	mov	r4,r18
    421c:	a00b883a 	mov	r5,r20
    4220:	84000c04 	addi	r16,r16,48
    4224:	000c7dc0 	call	c7dc <__subdf3>
    4228:	ad400044 	addi	r21,r21,1
    422c:	ac3fffc5 	stb	r16,-1(r21)
    4230:	ac7fea1e 	bne	r21,r17,41dc <__alt_data_end+0xfffd41dc>
    4234:	1023883a 	mov	r17,r2
    4238:	d8801217 	ldw	r2,72(sp)
    423c:	dc800f17 	ldw	r18,60(sp)
    4240:	1829883a 	mov	r20,r3
    4244:	b8af883a 	add	r23,r23,r2
    4248:	d9001417 	ldw	r4,80(sp)
    424c:	d9401517 	ldw	r5,84(sp)
    4250:	000d883a 	mov	r6,zero
    4254:	01cff834 	movhi	r7,16352
    4258:	000aa9c0 	call	aa9c <__adddf3>
    425c:	880d883a 	mov	r6,r17
    4260:	a00f883a 	mov	r7,r20
    4264:	1009883a 	mov	r4,r2
    4268:	180b883a 	mov	r5,r3
    426c:	000be7c0 	call	be7c <__ledf2>
    4270:	10003e0e 	bge	r2,zero,436c <_dtoa_r+0x1548>
    4274:	d9001317 	ldw	r4,76(sp)
    4278:	bd3fffc3 	ldbu	r20,-1(r23)
    427c:	d9000515 	stw	r4,20(sp)
    4280:	003d3b06 	br	3770 <__alt_data_end+0xfffd3770>
    4284:	0027883a 	mov	r19,zero
    4288:	003f1b06 	br	3ef8 <__alt_data_end+0xfffd3ef8>
    428c:	d8800817 	ldw	r2,32(sp)
    4290:	11e9c83a 	sub	r20,r2,r7
    4294:	0005883a 	mov	r2,zero
    4298:	003d5406 	br	37ec <__alt_data_end+0xfffd37ec>
    429c:	00800044 	movi	r2,1
    42a0:	003dc706 	br	39c0 <__alt_data_end+0xfffd39c0>
    42a4:	d8c00217 	ldw	r3,8(sp)
    42a8:	00800d84 	movi	r2,54
    42ac:	dd400a17 	ldw	r21,40(sp)
    42b0:	10c5c83a 	sub	r2,r2,r3
    42b4:	dd000817 	ldw	r20,32(sp)
    42b8:	003d4c06 	br	37ec <__alt_data_end+0xfffd37ec>
    42bc:	dc800f15 	stw	r18,60(sp)
    42c0:	dcc01015 	stw	r19,64(sp)
    42c4:	04000084 	movi	r16,2
    42c8:	003bed06 	br	3280 <__alt_data_end+0xfffd3280>
    42cc:	d9000617 	ldw	r4,24(sp)
    42d0:	203f0d26 	beq	r4,zero,3f08 <__alt_data_end+0xfffd3f08>
    42d4:	d9800c17 	ldw	r6,48(sp)
    42d8:	01bcab0e 	bge	zero,r6,3588 <__alt_data_end+0xfffd3588>
    42dc:	d9401017 	ldw	r5,64(sp)
    42e0:	d9000f17 	ldw	r4,60(sp)
    42e4:	000d883a 	mov	r6,zero
    42e8:	01d00934 	movhi	r7,16420
    42ec:	000bf700 	call	bf70 <__muldf3>
    42f0:	81000044 	addi	r4,r16,1
    42f4:	d8800f15 	stw	r2,60(sp)
    42f8:	d8c01015 	stw	r3,64(sp)
    42fc:	000d1580 	call	d158 <__floatsidf>
    4300:	d9800f17 	ldw	r6,60(sp)
    4304:	d9c01017 	ldw	r7,64(sp)
    4308:	1009883a 	mov	r4,r2
    430c:	180b883a 	mov	r5,r3
    4310:	000bf700 	call	bf70 <__muldf3>
    4314:	01d00734 	movhi	r7,16412
    4318:	000d883a 	mov	r6,zero
    431c:	1009883a 	mov	r4,r2
    4320:	180b883a 	mov	r5,r3
    4324:	000aa9c0 	call	aa9c <__adddf3>
    4328:	d9c00517 	ldw	r7,20(sp)
    432c:	047f3034 	movhi	r17,64704
    4330:	1021883a 	mov	r16,r2
    4334:	39ffffc4 	addi	r7,r7,-1
    4338:	d9c01315 	stw	r7,76(sp)
    433c:	1c63883a 	add	r17,r3,r17
    4340:	db000c17 	ldw	r12,48(sp)
    4344:	003bea06 	br	32f0 <__alt_data_end+0xfffd32f0>
    4348:	dc000915 	stw	r16,36(sp)
    434c:	003e0e06 	br	3b88 <__alt_data_end+0xfffd3b88>
    4350:	01000e44 	movi	r4,57
    4354:	8825883a 	mov	r18,r17
    4358:	9dc00044 	addi	r23,r19,1
    435c:	99000005 	stb	r4,0(r19)
    4360:	a023883a 	mov	r17,r20
    4364:	dc000915 	stw	r16,36(sp)
    4368:	003da406 	br	39fc <__alt_data_end+0xfffd39fc>
    436c:	d9801417 	ldw	r6,80(sp)
    4370:	d9c01517 	ldw	r7,84(sp)
    4374:	0009883a 	mov	r4,zero
    4378:	014ff834 	movhi	r5,16352
    437c:	000c7dc0 	call	c7dc <__subdf3>
    4380:	880d883a 	mov	r6,r17
    4384:	a00f883a 	mov	r7,r20
    4388:	1009883a 	mov	r4,r2
    438c:	180b883a 	mov	r5,r3
    4390:	000bda00 	call	bda0 <__gedf2>
    4394:	00bc7c0e 	bge	zero,r2,3588 <__alt_data_end+0xfffd3588>
    4398:	01000c04 	movi	r4,48
    439c:	00000106 	br	43a4 <_dtoa_r+0x1580>
    43a0:	102f883a 	mov	r23,r2
    43a4:	b8bfffc4 	addi	r2,r23,-1
    43a8:	10c00007 	ldb	r3,0(r2)
    43ac:	193ffc26 	beq	r3,r4,43a0 <__alt_data_end+0xfffd43a0>
    43b0:	d9801317 	ldw	r6,76(sp)
    43b4:	d9800515 	stw	r6,20(sp)
    43b8:	003c4406 	br	34cc <__alt_data_end+0xfffd34cc>
    43bc:	d9801317 	ldw	r6,76(sp)
    43c0:	d9800515 	stw	r6,20(sp)
    43c4:	003cea06 	br	3770 <__alt_data_end+0xfffd3770>
    43c8:	dd800f17 	ldw	r22,60(sp)
    43cc:	dcc01017 	ldw	r19,64(sp)
    43d0:	dc801217 	ldw	r18,72(sp)
    43d4:	003c6c06 	br	3588 <__alt_data_end+0xfffd3588>
    43d8:	903e031e 	bne	r18,zero,3be8 <__alt_data_end+0xfffd3be8>
    43dc:	003ebb06 	br	3ecc <__alt_data_end+0xfffd3ecc>
    43e0:	103e6c1e 	bne	r2,zero,3d94 <__alt_data_end+0xfffd3d94>
    43e4:	4080004c 	andi	r2,r8,1
    43e8:	103e6a26 	beq	r2,zero,3d94 <__alt_data_end+0xfffd3d94>
    43ec:	003e6606 	br	3d88 <__alt_data_end+0xfffd3d88>
    43f0:	d8c00317 	ldw	r3,12(sp)
    43f4:	00800084 	movi	r2,2
    43f8:	10c02916 	blt	r2,r3,44a0 <_dtoa_r+0x167c>
    43fc:	d9000c17 	ldw	r4,48(sp)
    4400:	003e8806 	br	3e24 <__alt_data_end+0xfffd3e24>
    4404:	04000084 	movi	r16,2
    4408:	003b9d06 	br	3280 <__alt_data_end+0xfffd3280>
    440c:	d9001317 	ldw	r4,76(sp)
    4410:	d9000515 	stw	r4,20(sp)
    4414:	003cd606 	br	3770 <__alt_data_end+0xfffd3770>
    4418:	d8801317 	ldw	r2,76(sp)
    441c:	d8800515 	stw	r2,20(sp)
    4420:	003c2a06 	br	34cc <__alt_data_end+0xfffd34cc>
    4424:	d9800317 	ldw	r6,12(sp)
    4428:	00800084 	movi	r2,2
    442c:	11801516 	blt	r2,r6,4484 <_dtoa_r+0x1660>
    4430:	d9c00c17 	ldw	r7,48(sp)
    4434:	d9c00615 	stw	r7,24(sp)
    4438:	003df706 	br	3c18 <__alt_data_end+0xfffd3c18>
    443c:	193d3926 	beq	r3,r4,3924 <__alt_data_end+0xfffd3924>
    4440:	00c00f04 	movi	r3,60
    4444:	1885c83a 	sub	r2,r3,r2
    4448:	003ddf06 	br	3bc8 <__alt_data_end+0xfffd3bc8>
    444c:	e009883a 	mov	r4,fp
    4450:	e0001115 	stw	zero,68(fp)
    4454:	000b883a 	mov	r5,zero
    4458:	0005eb80 	call	5eb8 <_Balloc>
    445c:	d8800715 	stw	r2,28(sp)
    4460:	d8c00717 	ldw	r3,28(sp)
    4464:	00bfffc4 	movi	r2,-1
    4468:	01000044 	movi	r4,1
    446c:	d8800c15 	stw	r2,48(sp)
    4470:	e0c01015 	stw	r3,64(fp)
    4474:	d9000b15 	stw	r4,44(sp)
    4478:	d8800615 	stw	r2,24(sp)
    447c:	d8002215 	stw	zero,136(sp)
    4480:	003c4106 	br	3588 <__alt_data_end+0xfffd3588>
    4484:	d8c00c17 	ldw	r3,48(sp)
    4488:	d8c00615 	stw	r3,24(sp)
    448c:	003e7006 	br	3e50 <__alt_data_end+0xfffd3e50>
    4490:	04400044 	movi	r17,1
    4494:	003b2006 	br	3118 <__alt_data_end+0xfffd3118>
    4498:	000b883a 	mov	r5,zero
    449c:	003b3d06 	br	3194 <__alt_data_end+0xfffd3194>
    44a0:	d8800c17 	ldw	r2,48(sp)
    44a4:	d8800615 	stw	r2,24(sp)
    44a8:	003e6906 	br	3e50 <__alt_data_end+0xfffd3e50>

000044ac <__sflush_r>:
    44ac:	2880030b 	ldhu	r2,12(r5)
    44b0:	defffb04 	addi	sp,sp,-20
    44b4:	dcc00315 	stw	r19,12(sp)
    44b8:	dc400115 	stw	r17,4(sp)
    44bc:	dfc00415 	stw	ra,16(sp)
    44c0:	dc800215 	stw	r18,8(sp)
    44c4:	dc000015 	stw	r16,0(sp)
    44c8:	10c0020c 	andi	r3,r2,8
    44cc:	2823883a 	mov	r17,r5
    44d0:	2027883a 	mov	r19,r4
    44d4:	1800311e 	bne	r3,zero,459c <__sflush_r+0xf0>
    44d8:	28c00117 	ldw	r3,4(r5)
    44dc:	10820014 	ori	r2,r2,2048
    44e0:	2880030d 	sth	r2,12(r5)
    44e4:	00c04b0e 	bge	zero,r3,4614 <__sflush_r+0x168>
    44e8:	8a000a17 	ldw	r8,40(r17)
    44ec:	40002326 	beq	r8,zero,457c <__sflush_r+0xd0>
    44f0:	9c000017 	ldw	r16,0(r19)
    44f4:	10c4000c 	andi	r3,r2,4096
    44f8:	98000015 	stw	zero,0(r19)
    44fc:	18004826 	beq	r3,zero,4620 <__sflush_r+0x174>
    4500:	89801417 	ldw	r6,80(r17)
    4504:	10c0010c 	andi	r3,r2,4
    4508:	18000626 	beq	r3,zero,4524 <__sflush_r+0x78>
    450c:	88c00117 	ldw	r3,4(r17)
    4510:	88800c17 	ldw	r2,48(r17)
    4514:	30cdc83a 	sub	r6,r6,r3
    4518:	10000226 	beq	r2,zero,4524 <__sflush_r+0x78>
    451c:	88800f17 	ldw	r2,60(r17)
    4520:	308dc83a 	sub	r6,r6,r2
    4524:	89400717 	ldw	r5,28(r17)
    4528:	000f883a 	mov	r7,zero
    452c:	9809883a 	mov	r4,r19
    4530:	403ee83a 	callr	r8
    4534:	00ffffc4 	movi	r3,-1
    4538:	10c04426 	beq	r2,r3,464c <__sflush_r+0x1a0>
    453c:	88c0030b 	ldhu	r3,12(r17)
    4540:	89000417 	ldw	r4,16(r17)
    4544:	88000115 	stw	zero,4(r17)
    4548:	197dffcc 	andi	r5,r3,63487
    454c:	8940030d 	sth	r5,12(r17)
    4550:	89000015 	stw	r4,0(r17)
    4554:	18c4000c 	andi	r3,r3,4096
    4558:	18002c1e 	bne	r3,zero,460c <__sflush_r+0x160>
    455c:	89400c17 	ldw	r5,48(r17)
    4560:	9c000015 	stw	r16,0(r19)
    4564:	28000526 	beq	r5,zero,457c <__sflush_r+0xd0>
    4568:	88801004 	addi	r2,r17,64
    456c:	28800226 	beq	r5,r2,4578 <__sflush_r+0xcc>
    4570:	9809883a 	mov	r4,r19
    4574:	0004c280 	call	4c28 <_free_r>
    4578:	88000c15 	stw	zero,48(r17)
    457c:	0005883a 	mov	r2,zero
    4580:	dfc00417 	ldw	ra,16(sp)
    4584:	dcc00317 	ldw	r19,12(sp)
    4588:	dc800217 	ldw	r18,8(sp)
    458c:	dc400117 	ldw	r17,4(sp)
    4590:	dc000017 	ldw	r16,0(sp)
    4594:	dec00504 	addi	sp,sp,20
    4598:	f800283a 	ret
    459c:	2c800417 	ldw	r18,16(r5)
    45a0:	903ff626 	beq	r18,zero,457c <__alt_data_end+0xfffd457c>
    45a4:	2c000017 	ldw	r16,0(r5)
    45a8:	108000cc 	andi	r2,r2,3
    45ac:	2c800015 	stw	r18,0(r5)
    45b0:	84a1c83a 	sub	r16,r16,r18
    45b4:	1000131e 	bne	r2,zero,4604 <__sflush_r+0x158>
    45b8:	28800517 	ldw	r2,20(r5)
    45bc:	88800215 	stw	r2,8(r17)
    45c0:	04000316 	blt	zero,r16,45d0 <__sflush_r+0x124>
    45c4:	003fed06 	br	457c <__alt_data_end+0xfffd457c>
    45c8:	90a5883a 	add	r18,r18,r2
    45cc:	043feb0e 	bge	zero,r16,457c <__alt_data_end+0xfffd457c>
    45d0:	88800917 	ldw	r2,36(r17)
    45d4:	89400717 	ldw	r5,28(r17)
    45d8:	800f883a 	mov	r7,r16
    45dc:	900d883a 	mov	r6,r18
    45e0:	9809883a 	mov	r4,r19
    45e4:	103ee83a 	callr	r2
    45e8:	80a1c83a 	sub	r16,r16,r2
    45ec:	00bff616 	blt	zero,r2,45c8 <__alt_data_end+0xfffd45c8>
    45f0:	88c0030b 	ldhu	r3,12(r17)
    45f4:	00bfffc4 	movi	r2,-1
    45f8:	18c01014 	ori	r3,r3,64
    45fc:	88c0030d 	sth	r3,12(r17)
    4600:	003fdf06 	br	4580 <__alt_data_end+0xfffd4580>
    4604:	0005883a 	mov	r2,zero
    4608:	003fec06 	br	45bc <__alt_data_end+0xfffd45bc>
    460c:	88801415 	stw	r2,80(r17)
    4610:	003fd206 	br	455c <__alt_data_end+0xfffd455c>
    4614:	28c00f17 	ldw	r3,60(r5)
    4618:	00ffb316 	blt	zero,r3,44e8 <__alt_data_end+0xfffd44e8>
    461c:	003fd706 	br	457c <__alt_data_end+0xfffd457c>
    4620:	89400717 	ldw	r5,28(r17)
    4624:	000d883a 	mov	r6,zero
    4628:	01c00044 	movi	r7,1
    462c:	9809883a 	mov	r4,r19
    4630:	403ee83a 	callr	r8
    4634:	100d883a 	mov	r6,r2
    4638:	00bfffc4 	movi	r2,-1
    463c:	30801426 	beq	r6,r2,4690 <__sflush_r+0x1e4>
    4640:	8880030b 	ldhu	r2,12(r17)
    4644:	8a000a17 	ldw	r8,40(r17)
    4648:	003fae06 	br	4504 <__alt_data_end+0xfffd4504>
    464c:	98c00017 	ldw	r3,0(r19)
    4650:	183fba26 	beq	r3,zero,453c <__alt_data_end+0xfffd453c>
    4654:	01000744 	movi	r4,29
    4658:	19000626 	beq	r3,r4,4674 <__sflush_r+0x1c8>
    465c:	01000584 	movi	r4,22
    4660:	19000426 	beq	r3,r4,4674 <__sflush_r+0x1c8>
    4664:	88c0030b 	ldhu	r3,12(r17)
    4668:	18c01014 	ori	r3,r3,64
    466c:	88c0030d 	sth	r3,12(r17)
    4670:	003fc306 	br	4580 <__alt_data_end+0xfffd4580>
    4674:	8880030b 	ldhu	r2,12(r17)
    4678:	88c00417 	ldw	r3,16(r17)
    467c:	88000115 	stw	zero,4(r17)
    4680:	10bdffcc 	andi	r2,r2,63487
    4684:	8880030d 	sth	r2,12(r17)
    4688:	88c00015 	stw	r3,0(r17)
    468c:	003fb306 	br	455c <__alt_data_end+0xfffd455c>
    4690:	98800017 	ldw	r2,0(r19)
    4694:	103fea26 	beq	r2,zero,4640 <__alt_data_end+0xfffd4640>
    4698:	00c00744 	movi	r3,29
    469c:	10c00226 	beq	r2,r3,46a8 <__sflush_r+0x1fc>
    46a0:	00c00584 	movi	r3,22
    46a4:	10c0031e 	bne	r2,r3,46b4 <__sflush_r+0x208>
    46a8:	9c000015 	stw	r16,0(r19)
    46ac:	0005883a 	mov	r2,zero
    46b0:	003fb306 	br	4580 <__alt_data_end+0xfffd4580>
    46b4:	88c0030b 	ldhu	r3,12(r17)
    46b8:	3005883a 	mov	r2,r6
    46bc:	18c01014 	ori	r3,r3,64
    46c0:	88c0030d 	sth	r3,12(r17)
    46c4:	003fae06 	br	4580 <__alt_data_end+0xfffd4580>

000046c8 <_fflush_r>:
    46c8:	defffd04 	addi	sp,sp,-12
    46cc:	dc000115 	stw	r16,4(sp)
    46d0:	dfc00215 	stw	ra,8(sp)
    46d4:	2021883a 	mov	r16,r4
    46d8:	20000226 	beq	r4,zero,46e4 <_fflush_r+0x1c>
    46dc:	20800e17 	ldw	r2,56(r4)
    46e0:	10000c26 	beq	r2,zero,4714 <_fflush_r+0x4c>
    46e4:	2880030f 	ldh	r2,12(r5)
    46e8:	1000051e 	bne	r2,zero,4700 <_fflush_r+0x38>
    46ec:	0005883a 	mov	r2,zero
    46f0:	dfc00217 	ldw	ra,8(sp)
    46f4:	dc000117 	ldw	r16,4(sp)
    46f8:	dec00304 	addi	sp,sp,12
    46fc:	f800283a 	ret
    4700:	8009883a 	mov	r4,r16
    4704:	dfc00217 	ldw	ra,8(sp)
    4708:	dc000117 	ldw	r16,4(sp)
    470c:	dec00304 	addi	sp,sp,12
    4710:	00044ac1 	jmpi	44ac <__sflush_r>
    4714:	d9400015 	stw	r5,0(sp)
    4718:	0004ab40 	call	4ab4 <__sinit>
    471c:	d9400017 	ldw	r5,0(sp)
    4720:	003ff006 	br	46e4 <__alt_data_end+0xfffd46e4>

00004724 <fflush>:
    4724:	20000526 	beq	r4,zero,473c <fflush+0x18>
    4728:	008000b4 	movhi	r2,2
    472c:	10a6a604 	addi	r2,r2,-25960
    4730:	200b883a 	mov	r5,r4
    4734:	11000017 	ldw	r4,0(r2)
    4738:	00046c81 	jmpi	46c8 <_fflush_r>
    473c:	008000b4 	movhi	r2,2
    4740:	10a6a504 	addi	r2,r2,-25964
    4744:	11000017 	ldw	r4,0(r2)
    4748:	01400034 	movhi	r5,0
    474c:	2951b204 	addi	r5,r5,18120
    4750:	0004ffc1 	jmpi	4ffc <_fwalk_reent>

00004754 <__fp_unlock>:
    4754:	0005883a 	mov	r2,zero
    4758:	f800283a 	ret

0000475c <_cleanup_r>:
    475c:	01400074 	movhi	r5,1
    4760:	2962dc04 	addi	r5,r5,-29840
    4764:	0004ffc1 	jmpi	4ffc <_fwalk_reent>

00004768 <__sinit.part.1>:
    4768:	defff704 	addi	sp,sp,-36
    476c:	00c00034 	movhi	r3,0
    4770:	dfc00815 	stw	ra,32(sp)
    4774:	ddc00715 	stw	r23,28(sp)
    4778:	dd800615 	stw	r22,24(sp)
    477c:	dd400515 	stw	r21,20(sp)
    4780:	dd000415 	stw	r20,16(sp)
    4784:	dcc00315 	stw	r19,12(sp)
    4788:	dc800215 	stw	r18,8(sp)
    478c:	dc400115 	stw	r17,4(sp)
    4790:	dc000015 	stw	r16,0(sp)
    4794:	18d1d704 	addi	r3,r3,18268
    4798:	24000117 	ldw	r16,4(r4)
    479c:	20c00f15 	stw	r3,60(r4)
    47a0:	2080bb04 	addi	r2,r4,748
    47a4:	00c000c4 	movi	r3,3
    47a8:	20c0b915 	stw	r3,740(r4)
    47ac:	2080ba15 	stw	r2,744(r4)
    47b0:	2000b815 	stw	zero,736(r4)
    47b4:	05c00204 	movi	r23,8
    47b8:	00800104 	movi	r2,4
    47bc:	2025883a 	mov	r18,r4
    47c0:	b80d883a 	mov	r6,r23
    47c4:	81001704 	addi	r4,r16,92
    47c8:	000b883a 	mov	r5,zero
    47cc:	80000015 	stw	zero,0(r16)
    47d0:	80000115 	stw	zero,4(r16)
    47d4:	80000215 	stw	zero,8(r16)
    47d8:	8080030d 	sth	r2,12(r16)
    47dc:	80001915 	stw	zero,100(r16)
    47e0:	8000038d 	sth	zero,14(r16)
    47e4:	80000415 	stw	zero,16(r16)
    47e8:	80000515 	stw	zero,20(r16)
    47ec:	80000615 	stw	zero,24(r16)
    47f0:	0005d900 	call	5d90 <memset>
    47f4:	05800034 	movhi	r22,0
    47f8:	94400217 	ldw	r17,8(r18)
    47fc:	05400034 	movhi	r21,0
    4800:	05000034 	movhi	r20,0
    4804:	04c00034 	movhi	r19,0
    4808:	b59c0e04 	addi	r22,r22,28728
    480c:	ad5c2504 	addi	r21,r21,28820
    4810:	a51c4404 	addi	r20,r20,28944
    4814:	9cdc5b04 	addi	r19,r19,29036
    4818:	85800815 	stw	r22,32(r16)
    481c:	85400915 	stw	r21,36(r16)
    4820:	85000a15 	stw	r20,40(r16)
    4824:	84c00b15 	stw	r19,44(r16)
    4828:	84000715 	stw	r16,28(r16)
    482c:	00800284 	movi	r2,10
    4830:	8880030d 	sth	r2,12(r17)
    4834:	00800044 	movi	r2,1
    4838:	b80d883a 	mov	r6,r23
    483c:	89001704 	addi	r4,r17,92
    4840:	000b883a 	mov	r5,zero
    4844:	88000015 	stw	zero,0(r17)
    4848:	88000115 	stw	zero,4(r17)
    484c:	88000215 	stw	zero,8(r17)
    4850:	88001915 	stw	zero,100(r17)
    4854:	8880038d 	sth	r2,14(r17)
    4858:	88000415 	stw	zero,16(r17)
    485c:	88000515 	stw	zero,20(r17)
    4860:	88000615 	stw	zero,24(r17)
    4864:	0005d900 	call	5d90 <memset>
    4868:	94000317 	ldw	r16,12(r18)
    486c:	00800484 	movi	r2,18
    4870:	8c400715 	stw	r17,28(r17)
    4874:	8d800815 	stw	r22,32(r17)
    4878:	8d400915 	stw	r21,36(r17)
    487c:	8d000a15 	stw	r20,40(r17)
    4880:	8cc00b15 	stw	r19,44(r17)
    4884:	8080030d 	sth	r2,12(r16)
    4888:	00800084 	movi	r2,2
    488c:	80000015 	stw	zero,0(r16)
    4890:	80000115 	stw	zero,4(r16)
    4894:	80000215 	stw	zero,8(r16)
    4898:	80001915 	stw	zero,100(r16)
    489c:	8080038d 	sth	r2,14(r16)
    48a0:	80000415 	stw	zero,16(r16)
    48a4:	80000515 	stw	zero,20(r16)
    48a8:	80000615 	stw	zero,24(r16)
    48ac:	b80d883a 	mov	r6,r23
    48b0:	000b883a 	mov	r5,zero
    48b4:	81001704 	addi	r4,r16,92
    48b8:	0005d900 	call	5d90 <memset>
    48bc:	00800044 	movi	r2,1
    48c0:	84000715 	stw	r16,28(r16)
    48c4:	85800815 	stw	r22,32(r16)
    48c8:	85400915 	stw	r21,36(r16)
    48cc:	85000a15 	stw	r20,40(r16)
    48d0:	84c00b15 	stw	r19,44(r16)
    48d4:	90800e15 	stw	r2,56(r18)
    48d8:	dfc00817 	ldw	ra,32(sp)
    48dc:	ddc00717 	ldw	r23,28(sp)
    48e0:	dd800617 	ldw	r22,24(sp)
    48e4:	dd400517 	ldw	r21,20(sp)
    48e8:	dd000417 	ldw	r20,16(sp)
    48ec:	dcc00317 	ldw	r19,12(sp)
    48f0:	dc800217 	ldw	r18,8(sp)
    48f4:	dc400117 	ldw	r17,4(sp)
    48f8:	dc000017 	ldw	r16,0(sp)
    48fc:	dec00904 	addi	sp,sp,36
    4900:	f800283a 	ret

00004904 <__fp_lock>:
    4904:	0005883a 	mov	r2,zero
    4908:	f800283a 	ret

0000490c <__sfmoreglue>:
    490c:	defffc04 	addi	sp,sp,-16
    4910:	dc800215 	stw	r18,8(sp)
    4914:	2825883a 	mov	r18,r5
    4918:	dc000015 	stw	r16,0(sp)
    491c:	01401a04 	movi	r5,104
    4920:	2021883a 	mov	r16,r4
    4924:	913fffc4 	addi	r4,r18,-1
    4928:	dfc00315 	stw	ra,12(sp)
    492c:	dc400115 	stw	r17,4(sp)
    4930:	000aa740 	call	aa74 <__mulsi3>
    4934:	8009883a 	mov	r4,r16
    4938:	11401d04 	addi	r5,r2,116
    493c:	1023883a 	mov	r17,r2
    4940:	00053580 	call	5358 <_malloc_r>
    4944:	1021883a 	mov	r16,r2
    4948:	10000726 	beq	r2,zero,4968 <__sfmoreglue+0x5c>
    494c:	11000304 	addi	r4,r2,12
    4950:	10000015 	stw	zero,0(r2)
    4954:	14800115 	stw	r18,4(r2)
    4958:	11000215 	stw	r4,8(r2)
    495c:	89801a04 	addi	r6,r17,104
    4960:	000b883a 	mov	r5,zero
    4964:	0005d900 	call	5d90 <memset>
    4968:	8005883a 	mov	r2,r16
    496c:	dfc00317 	ldw	ra,12(sp)
    4970:	dc800217 	ldw	r18,8(sp)
    4974:	dc400117 	ldw	r17,4(sp)
    4978:	dc000017 	ldw	r16,0(sp)
    497c:	dec00404 	addi	sp,sp,16
    4980:	f800283a 	ret

00004984 <__sfp>:
    4984:	defffb04 	addi	sp,sp,-20
    4988:	dc000015 	stw	r16,0(sp)
    498c:	040000b4 	movhi	r16,2
    4990:	8426a504 	addi	r16,r16,-25964
    4994:	dcc00315 	stw	r19,12(sp)
    4998:	2027883a 	mov	r19,r4
    499c:	81000017 	ldw	r4,0(r16)
    49a0:	dfc00415 	stw	ra,16(sp)
    49a4:	dc800215 	stw	r18,8(sp)
    49a8:	20800e17 	ldw	r2,56(r4)
    49ac:	dc400115 	stw	r17,4(sp)
    49b0:	1000021e 	bne	r2,zero,49bc <__sfp+0x38>
    49b4:	00047680 	call	4768 <__sinit.part.1>
    49b8:	81000017 	ldw	r4,0(r16)
    49bc:	2480b804 	addi	r18,r4,736
    49c0:	047fffc4 	movi	r17,-1
    49c4:	91000117 	ldw	r4,4(r18)
    49c8:	94000217 	ldw	r16,8(r18)
    49cc:	213fffc4 	addi	r4,r4,-1
    49d0:	20000a16 	blt	r4,zero,49fc <__sfp+0x78>
    49d4:	8080030f 	ldh	r2,12(r16)
    49d8:	10000c26 	beq	r2,zero,4a0c <__sfp+0x88>
    49dc:	80c01d04 	addi	r3,r16,116
    49e0:	00000206 	br	49ec <__sfp+0x68>
    49e4:	18bfe60f 	ldh	r2,-104(r3)
    49e8:	10000826 	beq	r2,zero,4a0c <__sfp+0x88>
    49ec:	213fffc4 	addi	r4,r4,-1
    49f0:	1c3ffd04 	addi	r16,r3,-12
    49f4:	18c01a04 	addi	r3,r3,104
    49f8:	247ffa1e 	bne	r4,r17,49e4 <__alt_data_end+0xfffd49e4>
    49fc:	90800017 	ldw	r2,0(r18)
    4a00:	10001d26 	beq	r2,zero,4a78 <__sfp+0xf4>
    4a04:	1025883a 	mov	r18,r2
    4a08:	003fee06 	br	49c4 <__alt_data_end+0xfffd49c4>
    4a0c:	00bfffc4 	movi	r2,-1
    4a10:	8080038d 	sth	r2,14(r16)
    4a14:	00800044 	movi	r2,1
    4a18:	8080030d 	sth	r2,12(r16)
    4a1c:	80001915 	stw	zero,100(r16)
    4a20:	80000015 	stw	zero,0(r16)
    4a24:	80000215 	stw	zero,8(r16)
    4a28:	80000115 	stw	zero,4(r16)
    4a2c:	80000415 	stw	zero,16(r16)
    4a30:	80000515 	stw	zero,20(r16)
    4a34:	80000615 	stw	zero,24(r16)
    4a38:	01800204 	movi	r6,8
    4a3c:	000b883a 	mov	r5,zero
    4a40:	81001704 	addi	r4,r16,92
    4a44:	0005d900 	call	5d90 <memset>
    4a48:	8005883a 	mov	r2,r16
    4a4c:	80000c15 	stw	zero,48(r16)
    4a50:	80000d15 	stw	zero,52(r16)
    4a54:	80001115 	stw	zero,68(r16)
    4a58:	80001215 	stw	zero,72(r16)
    4a5c:	dfc00417 	ldw	ra,16(sp)
    4a60:	dcc00317 	ldw	r19,12(sp)
    4a64:	dc800217 	ldw	r18,8(sp)
    4a68:	dc400117 	ldw	r17,4(sp)
    4a6c:	dc000017 	ldw	r16,0(sp)
    4a70:	dec00504 	addi	sp,sp,20
    4a74:	f800283a 	ret
    4a78:	01400104 	movi	r5,4
    4a7c:	9809883a 	mov	r4,r19
    4a80:	000490c0 	call	490c <__sfmoreglue>
    4a84:	90800015 	stw	r2,0(r18)
    4a88:	103fde1e 	bne	r2,zero,4a04 <__alt_data_end+0xfffd4a04>
    4a8c:	00800304 	movi	r2,12
    4a90:	98800015 	stw	r2,0(r19)
    4a94:	0005883a 	mov	r2,zero
    4a98:	003ff006 	br	4a5c <__alt_data_end+0xfffd4a5c>

00004a9c <_cleanup>:
    4a9c:	008000b4 	movhi	r2,2
    4aa0:	10a6a504 	addi	r2,r2,-25964
    4aa4:	11000017 	ldw	r4,0(r2)
    4aa8:	01400074 	movhi	r5,1
    4aac:	2962dc04 	addi	r5,r5,-29840
    4ab0:	0004ffc1 	jmpi	4ffc <_fwalk_reent>

00004ab4 <__sinit>:
    4ab4:	20800e17 	ldw	r2,56(r4)
    4ab8:	10000126 	beq	r2,zero,4ac0 <__sinit+0xc>
    4abc:	f800283a 	ret
    4ac0:	00047681 	jmpi	4768 <__sinit.part.1>

00004ac4 <__sfp_lock_acquire>:
    4ac4:	f800283a 	ret

00004ac8 <__sfp_lock_release>:
    4ac8:	f800283a 	ret

00004acc <__sinit_lock_acquire>:
    4acc:	f800283a 	ret

00004ad0 <__sinit_lock_release>:
    4ad0:	f800283a 	ret

00004ad4 <__fp_lock_all>:
    4ad4:	008000b4 	movhi	r2,2
    4ad8:	10a6a604 	addi	r2,r2,-25960
    4adc:	11000017 	ldw	r4,0(r2)
    4ae0:	01400034 	movhi	r5,0
    4ae4:	29524104 	addi	r5,r5,18692
    4ae8:	0004f381 	jmpi	4f38 <_fwalk>

00004aec <__fp_unlock_all>:
    4aec:	008000b4 	movhi	r2,2
    4af0:	10a6a604 	addi	r2,r2,-25960
    4af4:	11000017 	ldw	r4,0(r2)
    4af8:	01400034 	movhi	r5,0
    4afc:	2951d504 	addi	r5,r5,18260
    4b00:	0004f381 	jmpi	4f38 <_fwalk>

00004b04 <_malloc_trim_r>:
    4b04:	defffb04 	addi	sp,sp,-20
    4b08:	dcc00315 	stw	r19,12(sp)
    4b0c:	04c000b4 	movhi	r19,2
    4b10:	dc800215 	stw	r18,8(sp)
    4b14:	dc400115 	stw	r17,4(sp)
    4b18:	dc000015 	stw	r16,0(sp)
    4b1c:	dfc00415 	stw	ra,16(sp)
    4b20:	2821883a 	mov	r16,r5
    4b24:	9ce11e04 	addi	r19,r19,-31624
    4b28:	2025883a 	mov	r18,r4
    4b2c:	000e0900 	call	e090 <__malloc_lock>
    4b30:	98800217 	ldw	r2,8(r19)
    4b34:	14400117 	ldw	r17,4(r2)
    4b38:	00bfff04 	movi	r2,-4
    4b3c:	88a2703a 	and	r17,r17,r2
    4b40:	8c21c83a 	sub	r16,r17,r16
    4b44:	8403fbc4 	addi	r16,r16,4079
    4b48:	8020d33a 	srli	r16,r16,12
    4b4c:	0083ffc4 	movi	r2,4095
    4b50:	843fffc4 	addi	r16,r16,-1
    4b54:	8020933a 	slli	r16,r16,12
    4b58:	1400060e 	bge	r2,r16,4b74 <_malloc_trim_r+0x70>
    4b5c:	000b883a 	mov	r5,zero
    4b60:	9009883a 	mov	r4,r18
    4b64:	0006fe40 	call	6fe4 <_sbrk_r>
    4b68:	98c00217 	ldw	r3,8(r19)
    4b6c:	1c47883a 	add	r3,r3,r17
    4b70:	10c00a26 	beq	r2,r3,4b9c <_malloc_trim_r+0x98>
    4b74:	9009883a 	mov	r4,r18
    4b78:	000e1b00 	call	e1b0 <__malloc_unlock>
    4b7c:	0005883a 	mov	r2,zero
    4b80:	dfc00417 	ldw	ra,16(sp)
    4b84:	dcc00317 	ldw	r19,12(sp)
    4b88:	dc800217 	ldw	r18,8(sp)
    4b8c:	dc400117 	ldw	r17,4(sp)
    4b90:	dc000017 	ldw	r16,0(sp)
    4b94:	dec00504 	addi	sp,sp,20
    4b98:	f800283a 	ret
    4b9c:	040bc83a 	sub	r5,zero,r16
    4ba0:	9009883a 	mov	r4,r18
    4ba4:	0006fe40 	call	6fe4 <_sbrk_r>
    4ba8:	00ffffc4 	movi	r3,-1
    4bac:	10c00d26 	beq	r2,r3,4be4 <_malloc_trim_r+0xe0>
    4bb0:	00c000b4 	movhi	r3,2
    4bb4:	18eddb04 	addi	r3,r3,-18580
    4bb8:	18800017 	ldw	r2,0(r3)
    4bbc:	99000217 	ldw	r4,8(r19)
    4bc0:	8c23c83a 	sub	r17,r17,r16
    4bc4:	8c400054 	ori	r17,r17,1
    4bc8:	1421c83a 	sub	r16,r2,r16
    4bcc:	24400115 	stw	r17,4(r4)
    4bd0:	9009883a 	mov	r4,r18
    4bd4:	1c000015 	stw	r16,0(r3)
    4bd8:	000e1b00 	call	e1b0 <__malloc_unlock>
    4bdc:	00800044 	movi	r2,1
    4be0:	003fe706 	br	4b80 <__alt_data_end+0xfffd4b80>
    4be4:	000b883a 	mov	r5,zero
    4be8:	9009883a 	mov	r4,r18
    4bec:	0006fe40 	call	6fe4 <_sbrk_r>
    4bf0:	99000217 	ldw	r4,8(r19)
    4bf4:	014003c4 	movi	r5,15
    4bf8:	1107c83a 	sub	r3,r2,r4
    4bfc:	28ffdd0e 	bge	r5,r3,4b74 <__alt_data_end+0xfffd4b74>
    4c00:	014000b4 	movhi	r5,2
    4c04:	2966a804 	addi	r5,r5,-25952
    4c08:	29400017 	ldw	r5,0(r5)
    4c0c:	18c00054 	ori	r3,r3,1
    4c10:	20c00115 	stw	r3,4(r4)
    4c14:	00c000b4 	movhi	r3,2
    4c18:	1145c83a 	sub	r2,r2,r5
    4c1c:	18eddb04 	addi	r3,r3,-18580
    4c20:	18800015 	stw	r2,0(r3)
    4c24:	003fd306 	br	4b74 <__alt_data_end+0xfffd4b74>

00004c28 <_free_r>:
    4c28:	28004126 	beq	r5,zero,4d30 <_free_r+0x108>
    4c2c:	defffd04 	addi	sp,sp,-12
    4c30:	dc400115 	stw	r17,4(sp)
    4c34:	dc000015 	stw	r16,0(sp)
    4c38:	2023883a 	mov	r17,r4
    4c3c:	2821883a 	mov	r16,r5
    4c40:	dfc00215 	stw	ra,8(sp)
    4c44:	000e0900 	call	e090 <__malloc_lock>
    4c48:	81ffff17 	ldw	r7,-4(r16)
    4c4c:	00bfff84 	movi	r2,-2
    4c50:	010000b4 	movhi	r4,2
    4c54:	81bffe04 	addi	r6,r16,-8
    4c58:	3884703a 	and	r2,r7,r2
    4c5c:	21211e04 	addi	r4,r4,-31624
    4c60:	308b883a 	add	r5,r6,r2
    4c64:	2a400117 	ldw	r9,4(r5)
    4c68:	22000217 	ldw	r8,8(r4)
    4c6c:	00ffff04 	movi	r3,-4
    4c70:	48c6703a 	and	r3,r9,r3
    4c74:	2a005726 	beq	r5,r8,4dd4 <_free_r+0x1ac>
    4c78:	28c00115 	stw	r3,4(r5)
    4c7c:	39c0004c 	andi	r7,r7,1
    4c80:	3800091e 	bne	r7,zero,4ca8 <_free_r+0x80>
    4c84:	823ffe17 	ldw	r8,-8(r16)
    4c88:	22400204 	addi	r9,r4,8
    4c8c:	320dc83a 	sub	r6,r6,r8
    4c90:	31c00217 	ldw	r7,8(r6)
    4c94:	1205883a 	add	r2,r2,r8
    4c98:	3a406526 	beq	r7,r9,4e30 <_free_r+0x208>
    4c9c:	32000317 	ldw	r8,12(r6)
    4ca0:	3a000315 	stw	r8,12(r7)
    4ca4:	41c00215 	stw	r7,8(r8)
    4ca8:	28cf883a 	add	r7,r5,r3
    4cac:	39c00117 	ldw	r7,4(r7)
    4cb0:	39c0004c 	andi	r7,r7,1
    4cb4:	38003a26 	beq	r7,zero,4da0 <_free_r+0x178>
    4cb8:	10c00054 	ori	r3,r2,1
    4cbc:	30c00115 	stw	r3,4(r6)
    4cc0:	3087883a 	add	r3,r6,r2
    4cc4:	18800015 	stw	r2,0(r3)
    4cc8:	00c07fc4 	movi	r3,511
    4ccc:	18801936 	bltu	r3,r2,4d34 <_free_r+0x10c>
    4cd0:	1004d0fa 	srli	r2,r2,3
    4cd4:	01c00044 	movi	r7,1
    4cd8:	21400117 	ldw	r5,4(r4)
    4cdc:	10c00044 	addi	r3,r2,1
    4ce0:	18c7883a 	add	r3,r3,r3
    4ce4:	1005d0ba 	srai	r2,r2,2
    4ce8:	18c7883a 	add	r3,r3,r3
    4cec:	18c7883a 	add	r3,r3,r3
    4cf0:	1907883a 	add	r3,r3,r4
    4cf4:	3884983a 	sll	r2,r7,r2
    4cf8:	19c00017 	ldw	r7,0(r3)
    4cfc:	1a3ffe04 	addi	r8,r3,-8
    4d00:	1144b03a 	or	r2,r2,r5
    4d04:	32000315 	stw	r8,12(r6)
    4d08:	31c00215 	stw	r7,8(r6)
    4d0c:	20800115 	stw	r2,4(r4)
    4d10:	19800015 	stw	r6,0(r3)
    4d14:	39800315 	stw	r6,12(r7)
    4d18:	8809883a 	mov	r4,r17
    4d1c:	dfc00217 	ldw	ra,8(sp)
    4d20:	dc400117 	ldw	r17,4(sp)
    4d24:	dc000017 	ldw	r16,0(sp)
    4d28:	dec00304 	addi	sp,sp,12
    4d2c:	000e1b01 	jmpi	e1b0 <__malloc_unlock>
    4d30:	f800283a 	ret
    4d34:	100ad27a 	srli	r5,r2,9
    4d38:	00c00104 	movi	r3,4
    4d3c:	19404a36 	bltu	r3,r5,4e68 <_free_r+0x240>
    4d40:	100ad1ba 	srli	r5,r2,6
    4d44:	28c00e44 	addi	r3,r5,57
    4d48:	18c7883a 	add	r3,r3,r3
    4d4c:	29400e04 	addi	r5,r5,56
    4d50:	18c7883a 	add	r3,r3,r3
    4d54:	18c7883a 	add	r3,r3,r3
    4d58:	1909883a 	add	r4,r3,r4
    4d5c:	20c00017 	ldw	r3,0(r4)
    4d60:	01c000b4 	movhi	r7,2
    4d64:	213ffe04 	addi	r4,r4,-8
    4d68:	39e11e04 	addi	r7,r7,-31624
    4d6c:	20c04426 	beq	r4,r3,4e80 <_free_r+0x258>
    4d70:	01ffff04 	movi	r7,-4
    4d74:	19400117 	ldw	r5,4(r3)
    4d78:	29ca703a 	and	r5,r5,r7
    4d7c:	1140022e 	bgeu	r2,r5,4d88 <_free_r+0x160>
    4d80:	18c00217 	ldw	r3,8(r3)
    4d84:	20fffb1e 	bne	r4,r3,4d74 <__alt_data_end+0xfffd4d74>
    4d88:	19000317 	ldw	r4,12(r3)
    4d8c:	31000315 	stw	r4,12(r6)
    4d90:	30c00215 	stw	r3,8(r6)
    4d94:	21800215 	stw	r6,8(r4)
    4d98:	19800315 	stw	r6,12(r3)
    4d9c:	003fde06 	br	4d18 <__alt_data_end+0xfffd4d18>
    4da0:	29c00217 	ldw	r7,8(r5)
    4da4:	10c5883a 	add	r2,r2,r3
    4da8:	00c000b4 	movhi	r3,2
    4dac:	18e12004 	addi	r3,r3,-31616
    4db0:	38c03b26 	beq	r7,r3,4ea0 <_free_r+0x278>
    4db4:	2a000317 	ldw	r8,12(r5)
    4db8:	11400054 	ori	r5,r2,1
    4dbc:	3087883a 	add	r3,r6,r2
    4dc0:	3a000315 	stw	r8,12(r7)
    4dc4:	41c00215 	stw	r7,8(r8)
    4dc8:	31400115 	stw	r5,4(r6)
    4dcc:	18800015 	stw	r2,0(r3)
    4dd0:	003fbd06 	br	4cc8 <__alt_data_end+0xfffd4cc8>
    4dd4:	39c0004c 	andi	r7,r7,1
    4dd8:	10c5883a 	add	r2,r2,r3
    4ddc:	3800071e 	bne	r7,zero,4dfc <_free_r+0x1d4>
    4de0:	81fffe17 	ldw	r7,-8(r16)
    4de4:	31cdc83a 	sub	r6,r6,r7
    4de8:	30c00317 	ldw	r3,12(r6)
    4dec:	31400217 	ldw	r5,8(r6)
    4df0:	11c5883a 	add	r2,r2,r7
    4df4:	28c00315 	stw	r3,12(r5)
    4df8:	19400215 	stw	r5,8(r3)
    4dfc:	10c00054 	ori	r3,r2,1
    4e00:	30c00115 	stw	r3,4(r6)
    4e04:	00c000b4 	movhi	r3,2
    4e08:	18e6a904 	addi	r3,r3,-25948
    4e0c:	18c00017 	ldw	r3,0(r3)
    4e10:	21800215 	stw	r6,8(r4)
    4e14:	10ffc036 	bltu	r2,r3,4d18 <__alt_data_end+0xfffd4d18>
    4e18:	008000b4 	movhi	r2,2
    4e1c:	10adba04 	addi	r2,r2,-18712
    4e20:	11400017 	ldw	r5,0(r2)
    4e24:	8809883a 	mov	r4,r17
    4e28:	0004b040 	call	4b04 <_malloc_trim_r>
    4e2c:	003fba06 	br	4d18 <__alt_data_end+0xfffd4d18>
    4e30:	28c9883a 	add	r4,r5,r3
    4e34:	21000117 	ldw	r4,4(r4)
    4e38:	2100004c 	andi	r4,r4,1
    4e3c:	2000391e 	bne	r4,zero,4f24 <_free_r+0x2fc>
    4e40:	29c00217 	ldw	r7,8(r5)
    4e44:	29000317 	ldw	r4,12(r5)
    4e48:	1885883a 	add	r2,r3,r2
    4e4c:	10c00054 	ori	r3,r2,1
    4e50:	39000315 	stw	r4,12(r7)
    4e54:	21c00215 	stw	r7,8(r4)
    4e58:	30c00115 	stw	r3,4(r6)
    4e5c:	308d883a 	add	r6,r6,r2
    4e60:	30800015 	stw	r2,0(r6)
    4e64:	003fac06 	br	4d18 <__alt_data_end+0xfffd4d18>
    4e68:	00c00504 	movi	r3,20
    4e6c:	19401536 	bltu	r3,r5,4ec4 <_free_r+0x29c>
    4e70:	28c01704 	addi	r3,r5,92
    4e74:	18c7883a 	add	r3,r3,r3
    4e78:	294016c4 	addi	r5,r5,91
    4e7c:	003fb406 	br	4d50 <__alt_data_end+0xfffd4d50>
    4e80:	280bd0ba 	srai	r5,r5,2
    4e84:	00c00044 	movi	r3,1
    4e88:	38800117 	ldw	r2,4(r7)
    4e8c:	194a983a 	sll	r5,r3,r5
    4e90:	2007883a 	mov	r3,r4
    4e94:	2884b03a 	or	r2,r5,r2
    4e98:	38800115 	stw	r2,4(r7)
    4e9c:	003fbb06 	br	4d8c <__alt_data_end+0xfffd4d8c>
    4ea0:	21800515 	stw	r6,20(r4)
    4ea4:	21800415 	stw	r6,16(r4)
    4ea8:	10c00054 	ori	r3,r2,1
    4eac:	31c00315 	stw	r7,12(r6)
    4eb0:	31c00215 	stw	r7,8(r6)
    4eb4:	30c00115 	stw	r3,4(r6)
    4eb8:	308d883a 	add	r6,r6,r2
    4ebc:	30800015 	stw	r2,0(r6)
    4ec0:	003f9506 	br	4d18 <__alt_data_end+0xfffd4d18>
    4ec4:	00c01504 	movi	r3,84
    4ec8:	19400536 	bltu	r3,r5,4ee0 <_free_r+0x2b8>
    4ecc:	100ad33a 	srli	r5,r2,12
    4ed0:	28c01bc4 	addi	r3,r5,111
    4ed4:	18c7883a 	add	r3,r3,r3
    4ed8:	29401b84 	addi	r5,r5,110
    4edc:	003f9c06 	br	4d50 <__alt_data_end+0xfffd4d50>
    4ee0:	00c05504 	movi	r3,340
    4ee4:	19400536 	bltu	r3,r5,4efc <_free_r+0x2d4>
    4ee8:	100ad3fa 	srli	r5,r2,15
    4eec:	28c01e04 	addi	r3,r5,120
    4ef0:	18c7883a 	add	r3,r3,r3
    4ef4:	29401dc4 	addi	r5,r5,119
    4ef8:	003f9506 	br	4d50 <__alt_data_end+0xfffd4d50>
    4efc:	00c15504 	movi	r3,1364
    4f00:	19400536 	bltu	r3,r5,4f18 <_free_r+0x2f0>
    4f04:	100ad4ba 	srli	r5,r2,18
    4f08:	28c01f44 	addi	r3,r5,125
    4f0c:	18c7883a 	add	r3,r3,r3
    4f10:	29401f04 	addi	r5,r5,124
    4f14:	003f8e06 	br	4d50 <__alt_data_end+0xfffd4d50>
    4f18:	00c03f84 	movi	r3,254
    4f1c:	01401f84 	movi	r5,126
    4f20:	003f8b06 	br	4d50 <__alt_data_end+0xfffd4d50>
    4f24:	10c00054 	ori	r3,r2,1
    4f28:	30c00115 	stw	r3,4(r6)
    4f2c:	308d883a 	add	r6,r6,r2
    4f30:	30800015 	stw	r2,0(r6)
    4f34:	003f7806 	br	4d18 <__alt_data_end+0xfffd4d18>

00004f38 <_fwalk>:
    4f38:	defff704 	addi	sp,sp,-36
    4f3c:	dd000415 	stw	r20,16(sp)
    4f40:	dfc00815 	stw	ra,32(sp)
    4f44:	ddc00715 	stw	r23,28(sp)
    4f48:	dd800615 	stw	r22,24(sp)
    4f4c:	dd400515 	stw	r21,20(sp)
    4f50:	dcc00315 	stw	r19,12(sp)
    4f54:	dc800215 	stw	r18,8(sp)
    4f58:	dc400115 	stw	r17,4(sp)
    4f5c:	dc000015 	stw	r16,0(sp)
    4f60:	2500b804 	addi	r20,r4,736
    4f64:	a0002326 	beq	r20,zero,4ff4 <_fwalk+0xbc>
    4f68:	282b883a 	mov	r21,r5
    4f6c:	002f883a 	mov	r23,zero
    4f70:	05800044 	movi	r22,1
    4f74:	04ffffc4 	movi	r19,-1
    4f78:	a4400117 	ldw	r17,4(r20)
    4f7c:	a4800217 	ldw	r18,8(r20)
    4f80:	8c7fffc4 	addi	r17,r17,-1
    4f84:	88000d16 	blt	r17,zero,4fbc <_fwalk+0x84>
    4f88:	94000304 	addi	r16,r18,12
    4f8c:	94800384 	addi	r18,r18,14
    4f90:	8080000b 	ldhu	r2,0(r16)
    4f94:	8c7fffc4 	addi	r17,r17,-1
    4f98:	813ffd04 	addi	r4,r16,-12
    4f9c:	b080042e 	bgeu	r22,r2,4fb0 <_fwalk+0x78>
    4fa0:	9080000f 	ldh	r2,0(r18)
    4fa4:	14c00226 	beq	r2,r19,4fb0 <_fwalk+0x78>
    4fa8:	a83ee83a 	callr	r21
    4fac:	b8aeb03a 	or	r23,r23,r2
    4fb0:	84001a04 	addi	r16,r16,104
    4fb4:	94801a04 	addi	r18,r18,104
    4fb8:	8cfff51e 	bne	r17,r19,4f90 <__alt_data_end+0xfffd4f90>
    4fbc:	a5000017 	ldw	r20,0(r20)
    4fc0:	a03fed1e 	bne	r20,zero,4f78 <__alt_data_end+0xfffd4f78>
    4fc4:	b805883a 	mov	r2,r23
    4fc8:	dfc00817 	ldw	ra,32(sp)
    4fcc:	ddc00717 	ldw	r23,28(sp)
    4fd0:	dd800617 	ldw	r22,24(sp)
    4fd4:	dd400517 	ldw	r21,20(sp)
    4fd8:	dd000417 	ldw	r20,16(sp)
    4fdc:	dcc00317 	ldw	r19,12(sp)
    4fe0:	dc800217 	ldw	r18,8(sp)
    4fe4:	dc400117 	ldw	r17,4(sp)
    4fe8:	dc000017 	ldw	r16,0(sp)
    4fec:	dec00904 	addi	sp,sp,36
    4ff0:	f800283a 	ret
    4ff4:	002f883a 	mov	r23,zero
    4ff8:	003ff206 	br	4fc4 <__alt_data_end+0xfffd4fc4>

00004ffc <_fwalk_reent>:
    4ffc:	defff704 	addi	sp,sp,-36
    5000:	dd000415 	stw	r20,16(sp)
    5004:	dfc00815 	stw	ra,32(sp)
    5008:	ddc00715 	stw	r23,28(sp)
    500c:	dd800615 	stw	r22,24(sp)
    5010:	dd400515 	stw	r21,20(sp)
    5014:	dcc00315 	stw	r19,12(sp)
    5018:	dc800215 	stw	r18,8(sp)
    501c:	dc400115 	stw	r17,4(sp)
    5020:	dc000015 	stw	r16,0(sp)
    5024:	2500b804 	addi	r20,r4,736
    5028:	a0002326 	beq	r20,zero,50b8 <_fwalk_reent+0xbc>
    502c:	282b883a 	mov	r21,r5
    5030:	2027883a 	mov	r19,r4
    5034:	002f883a 	mov	r23,zero
    5038:	05800044 	movi	r22,1
    503c:	04bfffc4 	movi	r18,-1
    5040:	a4400117 	ldw	r17,4(r20)
    5044:	a4000217 	ldw	r16,8(r20)
    5048:	8c7fffc4 	addi	r17,r17,-1
    504c:	88000c16 	blt	r17,zero,5080 <_fwalk_reent+0x84>
    5050:	84000304 	addi	r16,r16,12
    5054:	8080000b 	ldhu	r2,0(r16)
    5058:	8c7fffc4 	addi	r17,r17,-1
    505c:	817ffd04 	addi	r5,r16,-12
    5060:	b080052e 	bgeu	r22,r2,5078 <_fwalk_reent+0x7c>
    5064:	8080008f 	ldh	r2,2(r16)
    5068:	9809883a 	mov	r4,r19
    506c:	14800226 	beq	r2,r18,5078 <_fwalk_reent+0x7c>
    5070:	a83ee83a 	callr	r21
    5074:	b8aeb03a 	or	r23,r23,r2
    5078:	84001a04 	addi	r16,r16,104
    507c:	8cbff51e 	bne	r17,r18,5054 <__alt_data_end+0xfffd5054>
    5080:	a5000017 	ldw	r20,0(r20)
    5084:	a03fee1e 	bne	r20,zero,5040 <__alt_data_end+0xfffd5040>
    5088:	b805883a 	mov	r2,r23
    508c:	dfc00817 	ldw	ra,32(sp)
    5090:	ddc00717 	ldw	r23,28(sp)
    5094:	dd800617 	ldw	r22,24(sp)
    5098:	dd400517 	ldw	r21,20(sp)
    509c:	dd000417 	ldw	r20,16(sp)
    50a0:	dcc00317 	ldw	r19,12(sp)
    50a4:	dc800217 	ldw	r18,8(sp)
    50a8:	dc400117 	ldw	r17,4(sp)
    50ac:	dc000017 	ldw	r16,0(sp)
    50b0:	dec00904 	addi	sp,sp,36
    50b4:	f800283a 	ret
    50b8:	002f883a 	mov	r23,zero
    50bc:	003ff206 	br	5088 <__alt_data_end+0xfffd5088>

000050c0 <_setlocale_r>:
    50c0:	30001b26 	beq	r6,zero,5130 <_setlocale_r+0x70>
    50c4:	01400074 	movhi	r5,1
    50c8:	defffe04 	addi	sp,sp,-8
    50cc:	295f1104 	addi	r5,r5,31812
    50d0:	3009883a 	mov	r4,r6
    50d4:	dc000015 	stw	r16,0(sp)
    50d8:	dfc00115 	stw	ra,4(sp)
    50dc:	3021883a 	mov	r16,r6
    50e0:	00071740 	call	7174 <strcmp>
    50e4:	1000061e 	bne	r2,zero,5100 <_setlocale_r+0x40>
    50e8:	00800074 	movhi	r2,1
    50ec:	109f1004 	addi	r2,r2,31808
    50f0:	dfc00117 	ldw	ra,4(sp)
    50f4:	dc000017 	ldw	r16,0(sp)
    50f8:	dec00204 	addi	sp,sp,8
    50fc:	f800283a 	ret
    5100:	01400074 	movhi	r5,1
    5104:	295f1004 	addi	r5,r5,31808
    5108:	8009883a 	mov	r4,r16
    510c:	00071740 	call	7174 <strcmp>
    5110:	103ff526 	beq	r2,zero,50e8 <__alt_data_end+0xfffd50e8>
    5114:	01400074 	movhi	r5,1
    5118:	295efb04 	addi	r5,r5,31724
    511c:	8009883a 	mov	r4,r16
    5120:	00071740 	call	7174 <strcmp>
    5124:	103ff026 	beq	r2,zero,50e8 <__alt_data_end+0xfffd50e8>
    5128:	0005883a 	mov	r2,zero
    512c:	003ff006 	br	50f0 <__alt_data_end+0xfffd50f0>
    5130:	00800074 	movhi	r2,1
    5134:	109f1004 	addi	r2,r2,31808
    5138:	f800283a 	ret

0000513c <__locale_charset>:
    513c:	008000b4 	movhi	r2,2
    5140:	10a10804 	addi	r2,r2,-31712
    5144:	f800283a 	ret

00005148 <__locale_mb_cur_max>:
    5148:	008000b4 	movhi	r2,2
    514c:	10a6a704 	addi	r2,r2,-25956
    5150:	10800017 	ldw	r2,0(r2)
    5154:	f800283a 	ret

00005158 <__locale_msgcharset>:
    5158:	008000b4 	movhi	r2,2
    515c:	10a10004 	addi	r2,r2,-31744
    5160:	f800283a 	ret

00005164 <__locale_cjk_lang>:
    5164:	0005883a 	mov	r2,zero
    5168:	f800283a 	ret

0000516c <_localeconv_r>:
    516c:	008000b4 	movhi	r2,2
    5170:	10a11004 	addi	r2,r2,-31680
    5174:	f800283a 	ret

00005178 <setlocale>:
    5178:	008000b4 	movhi	r2,2
    517c:	10a6a604 	addi	r2,r2,-25960
    5180:	280d883a 	mov	r6,r5
    5184:	200b883a 	mov	r5,r4
    5188:	11000017 	ldw	r4,0(r2)
    518c:	00050c01 	jmpi	50c0 <_setlocale_r>

00005190 <localeconv>:
    5190:	008000b4 	movhi	r2,2
    5194:	10a11004 	addi	r2,r2,-31680
    5198:	f800283a 	ret

0000519c <__smakebuf_r>:
    519c:	2880030b 	ldhu	r2,12(r5)
    51a0:	10c0008c 	andi	r3,r2,2
    51a4:	1800411e 	bne	r3,zero,52ac <__smakebuf_r+0x110>
    51a8:	deffec04 	addi	sp,sp,-80
    51ac:	dc000f15 	stw	r16,60(sp)
    51b0:	2821883a 	mov	r16,r5
    51b4:	2940038f 	ldh	r5,14(r5)
    51b8:	dc401015 	stw	r17,64(sp)
    51bc:	dfc01315 	stw	ra,76(sp)
    51c0:	dcc01215 	stw	r19,72(sp)
    51c4:	dc801115 	stw	r18,68(sp)
    51c8:	2023883a 	mov	r17,r4
    51cc:	28001c16 	blt	r5,zero,5240 <__smakebuf_r+0xa4>
    51d0:	d80d883a 	mov	r6,sp
    51d4:	0008e7c0 	call	8e7c <_fstat_r>
    51d8:	10001816 	blt	r2,zero,523c <__smakebuf_r+0xa0>
    51dc:	d8800117 	ldw	r2,4(sp)
    51e0:	00e00014 	movui	r3,32768
    51e4:	10bc000c 	andi	r2,r2,61440
    51e8:	14c80020 	cmpeqi	r19,r2,8192
    51ec:	10c03726 	beq	r2,r3,52cc <__smakebuf_r+0x130>
    51f0:	80c0030b 	ldhu	r3,12(r16)
    51f4:	18c20014 	ori	r3,r3,2048
    51f8:	80c0030d 	sth	r3,12(r16)
    51fc:	00c80004 	movi	r3,8192
    5200:	10c0521e 	bne	r2,r3,534c <__smakebuf_r+0x1b0>
    5204:	8140038f 	ldh	r5,14(r16)
    5208:	8809883a 	mov	r4,r17
    520c:	00093a00 	call	93a0 <_isatty_r>
    5210:	10004c26 	beq	r2,zero,5344 <__smakebuf_r+0x1a8>
    5214:	8080030b 	ldhu	r2,12(r16)
    5218:	80c010c4 	addi	r3,r16,67
    521c:	80c00015 	stw	r3,0(r16)
    5220:	10800054 	ori	r2,r2,1
    5224:	8080030d 	sth	r2,12(r16)
    5228:	00800044 	movi	r2,1
    522c:	80c00415 	stw	r3,16(r16)
    5230:	80800515 	stw	r2,20(r16)
    5234:	04810004 	movi	r18,1024
    5238:	00000706 	br	5258 <__smakebuf_r+0xbc>
    523c:	8080030b 	ldhu	r2,12(r16)
    5240:	10c0200c 	andi	r3,r2,128
    5244:	18001f1e 	bne	r3,zero,52c4 <__smakebuf_r+0x128>
    5248:	04810004 	movi	r18,1024
    524c:	10820014 	ori	r2,r2,2048
    5250:	8080030d 	sth	r2,12(r16)
    5254:	0027883a 	mov	r19,zero
    5258:	900b883a 	mov	r5,r18
    525c:	8809883a 	mov	r4,r17
    5260:	00053580 	call	5358 <_malloc_r>
    5264:	10002c26 	beq	r2,zero,5318 <__smakebuf_r+0x17c>
    5268:	80c0030b 	ldhu	r3,12(r16)
    526c:	01000034 	movhi	r4,0
    5270:	2111d704 	addi	r4,r4,18268
    5274:	89000f15 	stw	r4,60(r17)
    5278:	18c02014 	ori	r3,r3,128
    527c:	80c0030d 	sth	r3,12(r16)
    5280:	80800015 	stw	r2,0(r16)
    5284:	80800415 	stw	r2,16(r16)
    5288:	84800515 	stw	r18,20(r16)
    528c:	98001a1e 	bne	r19,zero,52f8 <__smakebuf_r+0x15c>
    5290:	dfc01317 	ldw	ra,76(sp)
    5294:	dcc01217 	ldw	r19,72(sp)
    5298:	dc801117 	ldw	r18,68(sp)
    529c:	dc401017 	ldw	r17,64(sp)
    52a0:	dc000f17 	ldw	r16,60(sp)
    52a4:	dec01404 	addi	sp,sp,80
    52a8:	f800283a 	ret
    52ac:	288010c4 	addi	r2,r5,67
    52b0:	28800015 	stw	r2,0(r5)
    52b4:	28800415 	stw	r2,16(r5)
    52b8:	00800044 	movi	r2,1
    52bc:	28800515 	stw	r2,20(r5)
    52c0:	f800283a 	ret
    52c4:	04801004 	movi	r18,64
    52c8:	003fe006 	br	524c <__alt_data_end+0xfffd524c>
    52cc:	81000a17 	ldw	r4,40(r16)
    52d0:	00c00034 	movhi	r3,0
    52d4:	18dc4404 	addi	r3,r3,28944
    52d8:	20ffc51e 	bne	r4,r3,51f0 <__alt_data_end+0xfffd51f0>
    52dc:	8080030b 	ldhu	r2,12(r16)
    52e0:	04810004 	movi	r18,1024
    52e4:	84801315 	stw	r18,76(r16)
    52e8:	1484b03a 	or	r2,r2,r18
    52ec:	8080030d 	sth	r2,12(r16)
    52f0:	0027883a 	mov	r19,zero
    52f4:	003fd806 	br	5258 <__alt_data_end+0xfffd5258>
    52f8:	8140038f 	ldh	r5,14(r16)
    52fc:	8809883a 	mov	r4,r17
    5300:	00093a00 	call	93a0 <_isatty_r>
    5304:	103fe226 	beq	r2,zero,5290 <__alt_data_end+0xfffd5290>
    5308:	8080030b 	ldhu	r2,12(r16)
    530c:	10800054 	ori	r2,r2,1
    5310:	8080030d 	sth	r2,12(r16)
    5314:	003fde06 	br	5290 <__alt_data_end+0xfffd5290>
    5318:	8080030b 	ldhu	r2,12(r16)
    531c:	10c0800c 	andi	r3,r2,512
    5320:	183fdb1e 	bne	r3,zero,5290 <__alt_data_end+0xfffd5290>
    5324:	10800094 	ori	r2,r2,2
    5328:	80c010c4 	addi	r3,r16,67
    532c:	8080030d 	sth	r2,12(r16)
    5330:	00800044 	movi	r2,1
    5334:	80c00015 	stw	r3,0(r16)
    5338:	80c00415 	stw	r3,16(r16)
    533c:	80800515 	stw	r2,20(r16)
    5340:	003fd306 	br	5290 <__alt_data_end+0xfffd5290>
    5344:	04810004 	movi	r18,1024
    5348:	003fc306 	br	5258 <__alt_data_end+0xfffd5258>
    534c:	0027883a 	mov	r19,zero
    5350:	04810004 	movi	r18,1024
    5354:	003fc006 	br	5258 <__alt_data_end+0xfffd5258>

00005358 <_malloc_r>:
    5358:	defff504 	addi	sp,sp,-44
    535c:	dc800315 	stw	r18,12(sp)
    5360:	dfc00a15 	stw	ra,40(sp)
    5364:	df000915 	stw	fp,36(sp)
    5368:	ddc00815 	stw	r23,32(sp)
    536c:	dd800715 	stw	r22,28(sp)
    5370:	dd400615 	stw	r21,24(sp)
    5374:	dd000515 	stw	r20,20(sp)
    5378:	dcc00415 	stw	r19,16(sp)
    537c:	dc400215 	stw	r17,8(sp)
    5380:	dc000115 	stw	r16,4(sp)
    5384:	288002c4 	addi	r2,r5,11
    5388:	00c00584 	movi	r3,22
    538c:	2025883a 	mov	r18,r4
    5390:	18807f2e 	bgeu	r3,r2,5590 <_malloc_r+0x238>
    5394:	047ffe04 	movi	r17,-8
    5398:	1462703a 	and	r17,r2,r17
    539c:	8800a316 	blt	r17,zero,562c <_malloc_r+0x2d4>
    53a0:	8940a236 	bltu	r17,r5,562c <_malloc_r+0x2d4>
    53a4:	000e0900 	call	e090 <__malloc_lock>
    53a8:	00807dc4 	movi	r2,503
    53ac:	1441e92e 	bgeu	r2,r17,5b54 <_malloc_r+0x7fc>
    53b0:	8804d27a 	srli	r2,r17,9
    53b4:	1000a126 	beq	r2,zero,563c <_malloc_r+0x2e4>
    53b8:	00c00104 	movi	r3,4
    53bc:	18811e36 	bltu	r3,r2,5838 <_malloc_r+0x4e0>
    53c0:	8804d1ba 	srli	r2,r17,6
    53c4:	12000e44 	addi	r8,r2,57
    53c8:	11c00e04 	addi	r7,r2,56
    53cc:	4209883a 	add	r4,r8,r8
    53d0:	04c000b4 	movhi	r19,2
    53d4:	2109883a 	add	r4,r4,r4
    53d8:	9ce11e04 	addi	r19,r19,-31624
    53dc:	2109883a 	add	r4,r4,r4
    53e0:	9909883a 	add	r4,r19,r4
    53e4:	24000117 	ldw	r16,4(r4)
    53e8:	213ffe04 	addi	r4,r4,-8
    53ec:	24009726 	beq	r4,r16,564c <_malloc_r+0x2f4>
    53f0:	80800117 	ldw	r2,4(r16)
    53f4:	01bfff04 	movi	r6,-4
    53f8:	014003c4 	movi	r5,15
    53fc:	1184703a 	and	r2,r2,r6
    5400:	1447c83a 	sub	r3,r2,r17
    5404:	28c00716 	blt	r5,r3,5424 <_malloc_r+0xcc>
    5408:	1800920e 	bge	r3,zero,5654 <_malloc_r+0x2fc>
    540c:	84000317 	ldw	r16,12(r16)
    5410:	24008e26 	beq	r4,r16,564c <_malloc_r+0x2f4>
    5414:	80800117 	ldw	r2,4(r16)
    5418:	1184703a 	and	r2,r2,r6
    541c:	1447c83a 	sub	r3,r2,r17
    5420:	28fff90e 	bge	r5,r3,5408 <__alt_data_end+0xfffd5408>
    5424:	3809883a 	mov	r4,r7
    5428:	018000b4 	movhi	r6,2
    542c:	9c000417 	ldw	r16,16(r19)
    5430:	31a11e04 	addi	r6,r6,-31624
    5434:	32000204 	addi	r8,r6,8
    5438:	82013426 	beq	r16,r8,590c <_malloc_r+0x5b4>
    543c:	80c00117 	ldw	r3,4(r16)
    5440:	00bfff04 	movi	r2,-4
    5444:	188e703a 	and	r7,r3,r2
    5448:	3c45c83a 	sub	r2,r7,r17
    544c:	00c003c4 	movi	r3,15
    5450:	18811f16 	blt	r3,r2,58d0 <_malloc_r+0x578>
    5454:	32000515 	stw	r8,20(r6)
    5458:	32000415 	stw	r8,16(r6)
    545c:	10007f0e 	bge	r2,zero,565c <_malloc_r+0x304>
    5460:	00807fc4 	movi	r2,511
    5464:	11c0fd36 	bltu	r2,r7,585c <_malloc_r+0x504>
    5468:	3806d0fa 	srli	r3,r7,3
    546c:	01c00044 	movi	r7,1
    5470:	30800117 	ldw	r2,4(r6)
    5474:	19400044 	addi	r5,r3,1
    5478:	294b883a 	add	r5,r5,r5
    547c:	1807d0ba 	srai	r3,r3,2
    5480:	294b883a 	add	r5,r5,r5
    5484:	294b883a 	add	r5,r5,r5
    5488:	298b883a 	add	r5,r5,r6
    548c:	38c6983a 	sll	r3,r7,r3
    5490:	29c00017 	ldw	r7,0(r5)
    5494:	2a7ffe04 	addi	r9,r5,-8
    5498:	1886b03a 	or	r3,r3,r2
    549c:	82400315 	stw	r9,12(r16)
    54a0:	81c00215 	stw	r7,8(r16)
    54a4:	30c00115 	stw	r3,4(r6)
    54a8:	2c000015 	stw	r16,0(r5)
    54ac:	3c000315 	stw	r16,12(r7)
    54b0:	2005d0ba 	srai	r2,r4,2
    54b4:	01400044 	movi	r5,1
    54b8:	288a983a 	sll	r5,r5,r2
    54bc:	19406f36 	bltu	r3,r5,567c <_malloc_r+0x324>
    54c0:	28c4703a 	and	r2,r5,r3
    54c4:	10000a1e 	bne	r2,zero,54f0 <_malloc_r+0x198>
    54c8:	00bfff04 	movi	r2,-4
    54cc:	294b883a 	add	r5,r5,r5
    54d0:	2088703a 	and	r4,r4,r2
    54d4:	28c4703a 	and	r2,r5,r3
    54d8:	21000104 	addi	r4,r4,4
    54dc:	1000041e 	bne	r2,zero,54f0 <_malloc_r+0x198>
    54e0:	294b883a 	add	r5,r5,r5
    54e4:	28c4703a 	and	r2,r5,r3
    54e8:	21000104 	addi	r4,r4,4
    54ec:	103ffc26 	beq	r2,zero,54e0 <__alt_data_end+0xfffd54e0>
    54f0:	02bfff04 	movi	r10,-4
    54f4:	024003c4 	movi	r9,15
    54f8:	21800044 	addi	r6,r4,1
    54fc:	318d883a 	add	r6,r6,r6
    5500:	318d883a 	add	r6,r6,r6
    5504:	318d883a 	add	r6,r6,r6
    5508:	998d883a 	add	r6,r19,r6
    550c:	333ffe04 	addi	r12,r6,-8
    5510:	2017883a 	mov	r11,r4
    5514:	31800104 	addi	r6,r6,4
    5518:	34000017 	ldw	r16,0(r6)
    551c:	31fffd04 	addi	r7,r6,-12
    5520:	81c0041e 	bne	r16,r7,5534 <_malloc_r+0x1dc>
    5524:	0000fb06 	br	5914 <_malloc_r+0x5bc>
    5528:	1801030e 	bge	r3,zero,5938 <_malloc_r+0x5e0>
    552c:	84000317 	ldw	r16,12(r16)
    5530:	81c0f826 	beq	r16,r7,5914 <_malloc_r+0x5bc>
    5534:	80800117 	ldw	r2,4(r16)
    5538:	1284703a 	and	r2,r2,r10
    553c:	1447c83a 	sub	r3,r2,r17
    5540:	48fff90e 	bge	r9,r3,5528 <__alt_data_end+0xfffd5528>
    5544:	80800317 	ldw	r2,12(r16)
    5548:	81000217 	ldw	r4,8(r16)
    554c:	89400054 	ori	r5,r17,1
    5550:	81400115 	stw	r5,4(r16)
    5554:	20800315 	stw	r2,12(r4)
    5558:	11000215 	stw	r4,8(r2)
    555c:	8463883a 	add	r17,r16,r17
    5560:	9c400515 	stw	r17,20(r19)
    5564:	9c400415 	stw	r17,16(r19)
    5568:	18800054 	ori	r2,r3,1
    556c:	88800115 	stw	r2,4(r17)
    5570:	8a000315 	stw	r8,12(r17)
    5574:	8a000215 	stw	r8,8(r17)
    5578:	88e3883a 	add	r17,r17,r3
    557c:	88c00015 	stw	r3,0(r17)
    5580:	9009883a 	mov	r4,r18
    5584:	000e1b00 	call	e1b0 <__malloc_unlock>
    5588:	80800204 	addi	r2,r16,8
    558c:	00001b06 	br	55fc <_malloc_r+0x2a4>
    5590:	04400404 	movi	r17,16
    5594:	89402536 	bltu	r17,r5,562c <_malloc_r+0x2d4>
    5598:	000e0900 	call	e090 <__malloc_lock>
    559c:	00800184 	movi	r2,6
    55a0:	01000084 	movi	r4,2
    55a4:	04c000b4 	movhi	r19,2
    55a8:	1085883a 	add	r2,r2,r2
    55ac:	9ce11e04 	addi	r19,r19,-31624
    55b0:	1085883a 	add	r2,r2,r2
    55b4:	9885883a 	add	r2,r19,r2
    55b8:	14000117 	ldw	r16,4(r2)
    55bc:	10fffe04 	addi	r3,r2,-8
    55c0:	80c0d926 	beq	r16,r3,5928 <_malloc_r+0x5d0>
    55c4:	80c00117 	ldw	r3,4(r16)
    55c8:	81000317 	ldw	r4,12(r16)
    55cc:	00bfff04 	movi	r2,-4
    55d0:	1884703a 	and	r2,r3,r2
    55d4:	81400217 	ldw	r5,8(r16)
    55d8:	8085883a 	add	r2,r16,r2
    55dc:	10c00117 	ldw	r3,4(r2)
    55e0:	29000315 	stw	r4,12(r5)
    55e4:	21400215 	stw	r5,8(r4)
    55e8:	18c00054 	ori	r3,r3,1
    55ec:	10c00115 	stw	r3,4(r2)
    55f0:	9009883a 	mov	r4,r18
    55f4:	000e1b00 	call	e1b0 <__malloc_unlock>
    55f8:	80800204 	addi	r2,r16,8
    55fc:	dfc00a17 	ldw	ra,40(sp)
    5600:	df000917 	ldw	fp,36(sp)
    5604:	ddc00817 	ldw	r23,32(sp)
    5608:	dd800717 	ldw	r22,28(sp)
    560c:	dd400617 	ldw	r21,24(sp)
    5610:	dd000517 	ldw	r20,20(sp)
    5614:	dcc00417 	ldw	r19,16(sp)
    5618:	dc800317 	ldw	r18,12(sp)
    561c:	dc400217 	ldw	r17,8(sp)
    5620:	dc000117 	ldw	r16,4(sp)
    5624:	dec00b04 	addi	sp,sp,44
    5628:	f800283a 	ret
    562c:	00800304 	movi	r2,12
    5630:	90800015 	stw	r2,0(r18)
    5634:	0005883a 	mov	r2,zero
    5638:	003ff006 	br	55fc <__alt_data_end+0xfffd55fc>
    563c:	01002004 	movi	r4,128
    5640:	02001004 	movi	r8,64
    5644:	01c00fc4 	movi	r7,63
    5648:	003f6106 	br	53d0 <__alt_data_end+0xfffd53d0>
    564c:	4009883a 	mov	r4,r8
    5650:	003f7506 	br	5428 <__alt_data_end+0xfffd5428>
    5654:	81000317 	ldw	r4,12(r16)
    5658:	003fde06 	br	55d4 <__alt_data_end+0xfffd55d4>
    565c:	81c5883a 	add	r2,r16,r7
    5660:	11400117 	ldw	r5,4(r2)
    5664:	9009883a 	mov	r4,r18
    5668:	29400054 	ori	r5,r5,1
    566c:	11400115 	stw	r5,4(r2)
    5670:	000e1b00 	call	e1b0 <__malloc_unlock>
    5674:	80800204 	addi	r2,r16,8
    5678:	003fe006 	br	55fc <__alt_data_end+0xfffd55fc>
    567c:	9c000217 	ldw	r16,8(r19)
    5680:	00bfff04 	movi	r2,-4
    5684:	85800117 	ldw	r22,4(r16)
    5688:	b0ac703a 	and	r22,r22,r2
    568c:	b4400336 	bltu	r22,r17,569c <_malloc_r+0x344>
    5690:	b445c83a 	sub	r2,r22,r17
    5694:	00c003c4 	movi	r3,15
    5698:	18805d16 	blt	r3,r2,5810 <_malloc_r+0x4b8>
    569c:	05c000b4 	movhi	r23,2
    56a0:	008000b4 	movhi	r2,2
    56a4:	10adba04 	addi	r2,r2,-18712
    56a8:	bde6a804 	addi	r23,r23,-25952
    56ac:	15400017 	ldw	r21,0(r2)
    56b0:	b8c00017 	ldw	r3,0(r23)
    56b4:	00bfffc4 	movi	r2,-1
    56b8:	858d883a 	add	r6,r16,r22
    56bc:	8d6b883a 	add	r21,r17,r21
    56c0:	1880ea26 	beq	r3,r2,5a6c <_malloc_r+0x714>
    56c4:	ad4403c4 	addi	r21,r21,4111
    56c8:	00bc0004 	movi	r2,-4096
    56cc:	a8aa703a 	and	r21,r21,r2
    56d0:	a80b883a 	mov	r5,r21
    56d4:	9009883a 	mov	r4,r18
    56d8:	d9800015 	stw	r6,0(sp)
    56dc:	0006fe40 	call	6fe4 <_sbrk_r>
    56e0:	1029883a 	mov	r20,r2
    56e4:	00bfffc4 	movi	r2,-1
    56e8:	d9800017 	ldw	r6,0(sp)
    56ec:	a080e826 	beq	r20,r2,5a90 <_malloc_r+0x738>
    56f0:	a180a636 	bltu	r20,r6,598c <_malloc_r+0x634>
    56f4:	070000b4 	movhi	fp,2
    56f8:	e72ddb04 	addi	fp,fp,-18580
    56fc:	e0800017 	ldw	r2,0(fp)
    5700:	a887883a 	add	r3,r21,r2
    5704:	e0c00015 	stw	r3,0(fp)
    5708:	3500e626 	beq	r6,r20,5aa4 <_malloc_r+0x74c>
    570c:	b9000017 	ldw	r4,0(r23)
    5710:	00bfffc4 	movi	r2,-1
    5714:	2080ee26 	beq	r4,r2,5ad0 <_malloc_r+0x778>
    5718:	a185c83a 	sub	r2,r20,r6
    571c:	10c5883a 	add	r2,r2,r3
    5720:	e0800015 	stw	r2,0(fp)
    5724:	a0c001cc 	andi	r3,r20,7
    5728:	1800bc26 	beq	r3,zero,5a1c <_malloc_r+0x6c4>
    572c:	a0e9c83a 	sub	r20,r20,r3
    5730:	00840204 	movi	r2,4104
    5734:	a5000204 	addi	r20,r20,8
    5738:	10c7c83a 	sub	r3,r2,r3
    573c:	a545883a 	add	r2,r20,r21
    5740:	1083ffcc 	andi	r2,r2,4095
    5744:	18abc83a 	sub	r21,r3,r2
    5748:	a80b883a 	mov	r5,r21
    574c:	9009883a 	mov	r4,r18
    5750:	0006fe40 	call	6fe4 <_sbrk_r>
    5754:	00ffffc4 	movi	r3,-1
    5758:	10c0e126 	beq	r2,r3,5ae0 <_malloc_r+0x788>
    575c:	1505c83a 	sub	r2,r2,r20
    5760:	1545883a 	add	r2,r2,r21
    5764:	10800054 	ori	r2,r2,1
    5768:	e0c00017 	ldw	r3,0(fp)
    576c:	9d000215 	stw	r20,8(r19)
    5770:	a0800115 	stw	r2,4(r20)
    5774:	a8c7883a 	add	r3,r21,r3
    5778:	e0c00015 	stw	r3,0(fp)
    577c:	84c00e26 	beq	r16,r19,57b8 <_malloc_r+0x460>
    5780:	018003c4 	movi	r6,15
    5784:	3580a72e 	bgeu	r6,r22,5a24 <_malloc_r+0x6cc>
    5788:	81400117 	ldw	r5,4(r16)
    578c:	013ffe04 	movi	r4,-8
    5790:	b0bffd04 	addi	r2,r22,-12
    5794:	1104703a 	and	r2,r2,r4
    5798:	2900004c 	andi	r4,r5,1
    579c:	2088b03a 	or	r4,r4,r2
    57a0:	81000115 	stw	r4,4(r16)
    57a4:	01400144 	movi	r5,5
    57a8:	8089883a 	add	r4,r16,r2
    57ac:	21400115 	stw	r5,4(r4)
    57b0:	21400215 	stw	r5,8(r4)
    57b4:	3080cd36 	bltu	r6,r2,5aec <_malloc_r+0x794>
    57b8:	008000b4 	movhi	r2,2
    57bc:	10adb904 	addi	r2,r2,-18716
    57c0:	11000017 	ldw	r4,0(r2)
    57c4:	20c0012e 	bgeu	r4,r3,57cc <_malloc_r+0x474>
    57c8:	10c00015 	stw	r3,0(r2)
    57cc:	008000b4 	movhi	r2,2
    57d0:	10adb804 	addi	r2,r2,-18720
    57d4:	11000017 	ldw	r4,0(r2)
    57d8:	9c000217 	ldw	r16,8(r19)
    57dc:	20c0012e 	bgeu	r4,r3,57e4 <_malloc_r+0x48c>
    57e0:	10c00015 	stw	r3,0(r2)
    57e4:	80c00117 	ldw	r3,4(r16)
    57e8:	00bfff04 	movi	r2,-4
    57ec:	1886703a 	and	r3,r3,r2
    57f0:	1c45c83a 	sub	r2,r3,r17
    57f4:	1c400236 	bltu	r3,r17,5800 <_malloc_r+0x4a8>
    57f8:	00c003c4 	movi	r3,15
    57fc:	18800416 	blt	r3,r2,5810 <_malloc_r+0x4b8>
    5800:	9009883a 	mov	r4,r18
    5804:	000e1b00 	call	e1b0 <__malloc_unlock>
    5808:	0005883a 	mov	r2,zero
    580c:	003f7b06 	br	55fc <__alt_data_end+0xfffd55fc>
    5810:	88c00054 	ori	r3,r17,1
    5814:	80c00115 	stw	r3,4(r16)
    5818:	8463883a 	add	r17,r16,r17
    581c:	10800054 	ori	r2,r2,1
    5820:	9c400215 	stw	r17,8(r19)
    5824:	88800115 	stw	r2,4(r17)
    5828:	9009883a 	mov	r4,r18
    582c:	000e1b00 	call	e1b0 <__malloc_unlock>
    5830:	80800204 	addi	r2,r16,8
    5834:	003f7106 	br	55fc <__alt_data_end+0xfffd55fc>
    5838:	00c00504 	movi	r3,20
    583c:	18804a2e 	bgeu	r3,r2,5968 <_malloc_r+0x610>
    5840:	00c01504 	movi	r3,84
    5844:	18806e36 	bltu	r3,r2,5a00 <_malloc_r+0x6a8>
    5848:	8804d33a 	srli	r2,r17,12
    584c:	12001bc4 	addi	r8,r2,111
    5850:	11c01b84 	addi	r7,r2,110
    5854:	4209883a 	add	r4,r8,r8
    5858:	003edd06 	br	53d0 <__alt_data_end+0xfffd53d0>
    585c:	3804d27a 	srli	r2,r7,9
    5860:	00c00104 	movi	r3,4
    5864:	1880442e 	bgeu	r3,r2,5978 <_malloc_r+0x620>
    5868:	00c00504 	movi	r3,20
    586c:	18808136 	bltu	r3,r2,5a74 <_malloc_r+0x71c>
    5870:	11401704 	addi	r5,r2,92
    5874:	10c016c4 	addi	r3,r2,91
    5878:	294b883a 	add	r5,r5,r5
    587c:	294b883a 	add	r5,r5,r5
    5880:	294b883a 	add	r5,r5,r5
    5884:	994b883a 	add	r5,r19,r5
    5888:	28800017 	ldw	r2,0(r5)
    588c:	018000b4 	movhi	r6,2
    5890:	297ffe04 	addi	r5,r5,-8
    5894:	31a11e04 	addi	r6,r6,-31624
    5898:	28806526 	beq	r5,r2,5a30 <_malloc_r+0x6d8>
    589c:	01bfff04 	movi	r6,-4
    58a0:	10c00117 	ldw	r3,4(r2)
    58a4:	1986703a 	and	r3,r3,r6
    58a8:	38c0022e 	bgeu	r7,r3,58b4 <_malloc_r+0x55c>
    58ac:	10800217 	ldw	r2,8(r2)
    58b0:	28bffb1e 	bne	r5,r2,58a0 <__alt_data_end+0xfffd58a0>
    58b4:	11400317 	ldw	r5,12(r2)
    58b8:	98c00117 	ldw	r3,4(r19)
    58bc:	81400315 	stw	r5,12(r16)
    58c0:	80800215 	stw	r2,8(r16)
    58c4:	2c000215 	stw	r16,8(r5)
    58c8:	14000315 	stw	r16,12(r2)
    58cc:	003ef806 	br	54b0 <__alt_data_end+0xfffd54b0>
    58d0:	88c00054 	ori	r3,r17,1
    58d4:	80c00115 	stw	r3,4(r16)
    58d8:	8463883a 	add	r17,r16,r17
    58dc:	34400515 	stw	r17,20(r6)
    58e0:	34400415 	stw	r17,16(r6)
    58e4:	10c00054 	ori	r3,r2,1
    58e8:	8a000315 	stw	r8,12(r17)
    58ec:	8a000215 	stw	r8,8(r17)
    58f0:	88c00115 	stw	r3,4(r17)
    58f4:	88a3883a 	add	r17,r17,r2
    58f8:	88800015 	stw	r2,0(r17)
    58fc:	9009883a 	mov	r4,r18
    5900:	000e1b00 	call	e1b0 <__malloc_unlock>
    5904:	80800204 	addi	r2,r16,8
    5908:	003f3c06 	br	55fc <__alt_data_end+0xfffd55fc>
    590c:	30c00117 	ldw	r3,4(r6)
    5910:	003ee706 	br	54b0 <__alt_data_end+0xfffd54b0>
    5914:	5ac00044 	addi	r11,r11,1
    5918:	588000cc 	andi	r2,r11,3
    591c:	31800204 	addi	r6,r6,8
    5920:	103efd1e 	bne	r2,zero,5518 <__alt_data_end+0xfffd5518>
    5924:	00002406 	br	59b8 <_malloc_r+0x660>
    5928:	14000317 	ldw	r16,12(r2)
    592c:	143f251e 	bne	r2,r16,55c4 <__alt_data_end+0xfffd55c4>
    5930:	21000084 	addi	r4,r4,2
    5934:	003ebc06 	br	5428 <__alt_data_end+0xfffd5428>
    5938:	8085883a 	add	r2,r16,r2
    593c:	10c00117 	ldw	r3,4(r2)
    5940:	81000317 	ldw	r4,12(r16)
    5944:	81400217 	ldw	r5,8(r16)
    5948:	18c00054 	ori	r3,r3,1
    594c:	10c00115 	stw	r3,4(r2)
    5950:	29000315 	stw	r4,12(r5)
    5954:	21400215 	stw	r5,8(r4)
    5958:	9009883a 	mov	r4,r18
    595c:	000e1b00 	call	e1b0 <__malloc_unlock>
    5960:	80800204 	addi	r2,r16,8
    5964:	003f2506 	br	55fc <__alt_data_end+0xfffd55fc>
    5968:	12001704 	addi	r8,r2,92
    596c:	11c016c4 	addi	r7,r2,91
    5970:	4209883a 	add	r4,r8,r8
    5974:	003e9606 	br	53d0 <__alt_data_end+0xfffd53d0>
    5978:	3804d1ba 	srli	r2,r7,6
    597c:	11400e44 	addi	r5,r2,57
    5980:	10c00e04 	addi	r3,r2,56
    5984:	294b883a 	add	r5,r5,r5
    5988:	003fbc06 	br	587c <__alt_data_end+0xfffd587c>
    598c:	84ff5926 	beq	r16,r19,56f4 <__alt_data_end+0xfffd56f4>
    5990:	008000b4 	movhi	r2,2
    5994:	10a11e04 	addi	r2,r2,-31624
    5998:	14000217 	ldw	r16,8(r2)
    599c:	00bfff04 	movi	r2,-4
    59a0:	80c00117 	ldw	r3,4(r16)
    59a4:	1886703a 	and	r3,r3,r2
    59a8:	003f9106 	br	57f0 <__alt_data_end+0xfffd57f0>
    59ac:	60800217 	ldw	r2,8(r12)
    59b0:	213fffc4 	addi	r4,r4,-1
    59b4:	1300651e 	bne	r2,r12,5b4c <_malloc_r+0x7f4>
    59b8:	208000cc 	andi	r2,r4,3
    59bc:	633ffe04 	addi	r12,r12,-8
    59c0:	103ffa1e 	bne	r2,zero,59ac <__alt_data_end+0xfffd59ac>
    59c4:	98800117 	ldw	r2,4(r19)
    59c8:	0146303a 	nor	r3,zero,r5
    59cc:	1884703a 	and	r2,r3,r2
    59d0:	98800115 	stw	r2,4(r19)
    59d4:	294b883a 	add	r5,r5,r5
    59d8:	117f2836 	bltu	r2,r5,567c <__alt_data_end+0xfffd567c>
    59dc:	283f2726 	beq	r5,zero,567c <__alt_data_end+0xfffd567c>
    59e0:	2886703a 	and	r3,r5,r2
    59e4:	5809883a 	mov	r4,r11
    59e8:	183ec31e 	bne	r3,zero,54f8 <__alt_data_end+0xfffd54f8>
    59ec:	294b883a 	add	r5,r5,r5
    59f0:	2886703a 	and	r3,r5,r2
    59f4:	21000104 	addi	r4,r4,4
    59f8:	183ffc26 	beq	r3,zero,59ec <__alt_data_end+0xfffd59ec>
    59fc:	003ebe06 	br	54f8 <__alt_data_end+0xfffd54f8>
    5a00:	00c05504 	movi	r3,340
    5a04:	18801236 	bltu	r3,r2,5a50 <_malloc_r+0x6f8>
    5a08:	8804d3fa 	srli	r2,r17,15
    5a0c:	12001e04 	addi	r8,r2,120
    5a10:	11c01dc4 	addi	r7,r2,119
    5a14:	4209883a 	add	r4,r8,r8
    5a18:	003e6d06 	br	53d0 <__alt_data_end+0xfffd53d0>
    5a1c:	00c40004 	movi	r3,4096
    5a20:	003f4606 	br	573c <__alt_data_end+0xfffd573c>
    5a24:	00800044 	movi	r2,1
    5a28:	a0800115 	stw	r2,4(r20)
    5a2c:	003f7406 	br	5800 <__alt_data_end+0xfffd5800>
    5a30:	1805d0ba 	srai	r2,r3,2
    5a34:	01c00044 	movi	r7,1
    5a38:	30c00117 	ldw	r3,4(r6)
    5a3c:	388e983a 	sll	r7,r7,r2
    5a40:	2805883a 	mov	r2,r5
    5a44:	38c6b03a 	or	r3,r7,r3
    5a48:	30c00115 	stw	r3,4(r6)
    5a4c:	003f9b06 	br	58bc <__alt_data_end+0xfffd58bc>
    5a50:	00c15504 	movi	r3,1364
    5a54:	18801a36 	bltu	r3,r2,5ac0 <_malloc_r+0x768>
    5a58:	8804d4ba 	srli	r2,r17,18
    5a5c:	12001f44 	addi	r8,r2,125
    5a60:	11c01f04 	addi	r7,r2,124
    5a64:	4209883a 	add	r4,r8,r8
    5a68:	003e5906 	br	53d0 <__alt_data_end+0xfffd53d0>
    5a6c:	ad400404 	addi	r21,r21,16
    5a70:	003f1706 	br	56d0 <__alt_data_end+0xfffd56d0>
    5a74:	00c01504 	movi	r3,84
    5a78:	18802336 	bltu	r3,r2,5b08 <_malloc_r+0x7b0>
    5a7c:	3804d33a 	srli	r2,r7,12
    5a80:	11401bc4 	addi	r5,r2,111
    5a84:	10c01b84 	addi	r3,r2,110
    5a88:	294b883a 	add	r5,r5,r5
    5a8c:	003f7b06 	br	587c <__alt_data_end+0xfffd587c>
    5a90:	9c000217 	ldw	r16,8(r19)
    5a94:	00bfff04 	movi	r2,-4
    5a98:	80c00117 	ldw	r3,4(r16)
    5a9c:	1886703a 	and	r3,r3,r2
    5aa0:	003f5306 	br	57f0 <__alt_data_end+0xfffd57f0>
    5aa4:	3083ffcc 	andi	r2,r6,4095
    5aa8:	103f181e 	bne	r2,zero,570c <__alt_data_end+0xfffd570c>
    5aac:	99000217 	ldw	r4,8(r19)
    5ab0:	b545883a 	add	r2,r22,r21
    5ab4:	10800054 	ori	r2,r2,1
    5ab8:	20800115 	stw	r2,4(r4)
    5abc:	003f3e06 	br	57b8 <__alt_data_end+0xfffd57b8>
    5ac0:	01003f84 	movi	r4,254
    5ac4:	02001fc4 	movi	r8,127
    5ac8:	01c01f84 	movi	r7,126
    5acc:	003e4006 	br	53d0 <__alt_data_end+0xfffd53d0>
    5ad0:	008000b4 	movhi	r2,2
    5ad4:	10a6a804 	addi	r2,r2,-25952
    5ad8:	15000015 	stw	r20,0(r2)
    5adc:	003f1106 	br	5724 <__alt_data_end+0xfffd5724>
    5ae0:	00800044 	movi	r2,1
    5ae4:	002b883a 	mov	r21,zero
    5ae8:	003f1f06 	br	5768 <__alt_data_end+0xfffd5768>
    5aec:	81400204 	addi	r5,r16,8
    5af0:	9009883a 	mov	r4,r18
    5af4:	0004c280 	call	4c28 <_free_r>
    5af8:	008000b4 	movhi	r2,2
    5afc:	10addb04 	addi	r2,r2,-18580
    5b00:	10c00017 	ldw	r3,0(r2)
    5b04:	003f2c06 	br	57b8 <__alt_data_end+0xfffd57b8>
    5b08:	00c05504 	movi	r3,340
    5b0c:	18800536 	bltu	r3,r2,5b24 <_malloc_r+0x7cc>
    5b10:	3804d3fa 	srli	r2,r7,15
    5b14:	11401e04 	addi	r5,r2,120
    5b18:	10c01dc4 	addi	r3,r2,119
    5b1c:	294b883a 	add	r5,r5,r5
    5b20:	003f5606 	br	587c <__alt_data_end+0xfffd587c>
    5b24:	00c15504 	movi	r3,1364
    5b28:	18800536 	bltu	r3,r2,5b40 <_malloc_r+0x7e8>
    5b2c:	3804d4ba 	srli	r2,r7,18
    5b30:	11401f44 	addi	r5,r2,125
    5b34:	10c01f04 	addi	r3,r2,124
    5b38:	294b883a 	add	r5,r5,r5
    5b3c:	003f4f06 	br	587c <__alt_data_end+0xfffd587c>
    5b40:	01403f84 	movi	r5,254
    5b44:	00c01f84 	movi	r3,126
    5b48:	003f4c06 	br	587c <__alt_data_end+0xfffd587c>
    5b4c:	98800117 	ldw	r2,4(r19)
    5b50:	003fa006 	br	59d4 <__alt_data_end+0xfffd59d4>
    5b54:	8808d0fa 	srli	r4,r17,3
    5b58:	20800044 	addi	r2,r4,1
    5b5c:	1085883a 	add	r2,r2,r2
    5b60:	003e9006 	br	55a4 <__alt_data_end+0xfffd55a4>

00005b64 <memchr>:
    5b64:	208000cc 	andi	r2,r4,3
    5b68:	280f883a 	mov	r7,r5
    5b6c:	10003426 	beq	r2,zero,5c40 <memchr+0xdc>
    5b70:	30bfffc4 	addi	r2,r6,-1
    5b74:	30001a26 	beq	r6,zero,5be0 <memchr+0x7c>
    5b78:	20c00003 	ldbu	r3,0(r4)
    5b7c:	29803fcc 	andi	r6,r5,255
    5b80:	30c0051e 	bne	r6,r3,5b98 <memchr+0x34>
    5b84:	00001806 	br	5be8 <memchr+0x84>
    5b88:	10001526 	beq	r2,zero,5be0 <memchr+0x7c>
    5b8c:	20c00003 	ldbu	r3,0(r4)
    5b90:	10bfffc4 	addi	r2,r2,-1
    5b94:	30c01426 	beq	r6,r3,5be8 <memchr+0x84>
    5b98:	21000044 	addi	r4,r4,1
    5b9c:	20c000cc 	andi	r3,r4,3
    5ba0:	183ff91e 	bne	r3,zero,5b88 <__alt_data_end+0xfffd5b88>
    5ba4:	020000c4 	movi	r8,3
    5ba8:	40801136 	bltu	r8,r2,5bf0 <memchr+0x8c>
    5bac:	10000c26 	beq	r2,zero,5be0 <memchr+0x7c>
    5bb0:	20c00003 	ldbu	r3,0(r4)
    5bb4:	29403fcc 	andi	r5,r5,255
    5bb8:	28c00b26 	beq	r5,r3,5be8 <memchr+0x84>
    5bbc:	20c00044 	addi	r3,r4,1
    5bc0:	39803fcc 	andi	r6,r7,255
    5bc4:	2089883a 	add	r4,r4,r2
    5bc8:	00000306 	br	5bd8 <memchr+0x74>
    5bcc:	18c00044 	addi	r3,r3,1
    5bd0:	197fffc3 	ldbu	r5,-1(r3)
    5bd4:	31400526 	beq	r6,r5,5bec <memchr+0x88>
    5bd8:	1805883a 	mov	r2,r3
    5bdc:	20fffb1e 	bne	r4,r3,5bcc <__alt_data_end+0xfffd5bcc>
    5be0:	0005883a 	mov	r2,zero
    5be4:	f800283a 	ret
    5be8:	2005883a 	mov	r2,r4
    5bec:	f800283a 	ret
    5bf0:	28c03fcc 	andi	r3,r5,255
    5bf4:	1812923a 	slli	r9,r3,8
    5bf8:	02ffbff4 	movhi	r11,65279
    5bfc:	02a02074 	movhi	r10,32897
    5c00:	48d2b03a 	or	r9,r9,r3
    5c04:	4806943a 	slli	r3,r9,16
    5c08:	5affbfc4 	addi	r11,r11,-257
    5c0c:	52a02004 	addi	r10,r10,-32640
    5c10:	48d2b03a 	or	r9,r9,r3
    5c14:	20c00017 	ldw	r3,0(r4)
    5c18:	48c6f03a 	xor	r3,r9,r3
    5c1c:	1acd883a 	add	r6,r3,r11
    5c20:	00c6303a 	nor	r3,zero,r3
    5c24:	30c6703a 	and	r3,r6,r3
    5c28:	1a86703a 	and	r3,r3,r10
    5c2c:	183fe01e 	bne	r3,zero,5bb0 <__alt_data_end+0xfffd5bb0>
    5c30:	10bfff04 	addi	r2,r2,-4
    5c34:	21000104 	addi	r4,r4,4
    5c38:	40bff636 	bltu	r8,r2,5c14 <__alt_data_end+0xfffd5c14>
    5c3c:	003fdb06 	br	5bac <__alt_data_end+0xfffd5bac>
    5c40:	3005883a 	mov	r2,r6
    5c44:	003fd706 	br	5ba4 <__alt_data_end+0xfffd5ba4>

00005c48 <memcpy>:
    5c48:	defffd04 	addi	sp,sp,-12
    5c4c:	dfc00215 	stw	ra,8(sp)
    5c50:	dc400115 	stw	r17,4(sp)
    5c54:	dc000015 	stw	r16,0(sp)
    5c58:	00c003c4 	movi	r3,15
    5c5c:	2005883a 	mov	r2,r4
    5c60:	1980452e 	bgeu	r3,r6,5d78 <memcpy+0x130>
    5c64:	2906b03a 	or	r3,r5,r4
    5c68:	18c000cc 	andi	r3,r3,3
    5c6c:	1800441e 	bne	r3,zero,5d80 <memcpy+0x138>
    5c70:	347ffc04 	addi	r17,r6,-16
    5c74:	8822d13a 	srli	r17,r17,4
    5c78:	28c00104 	addi	r3,r5,4
    5c7c:	23400104 	addi	r13,r4,4
    5c80:	8820913a 	slli	r16,r17,4
    5c84:	2b000204 	addi	r12,r5,8
    5c88:	22c00204 	addi	r11,r4,8
    5c8c:	84000504 	addi	r16,r16,20
    5c90:	2a800304 	addi	r10,r5,12
    5c94:	22400304 	addi	r9,r4,12
    5c98:	2c21883a 	add	r16,r5,r16
    5c9c:	2811883a 	mov	r8,r5
    5ca0:	200f883a 	mov	r7,r4
    5ca4:	41000017 	ldw	r4,0(r8)
    5ca8:	1fc00017 	ldw	ra,0(r3)
    5cac:	63c00017 	ldw	r15,0(r12)
    5cb0:	39000015 	stw	r4,0(r7)
    5cb4:	53800017 	ldw	r14,0(r10)
    5cb8:	6fc00015 	stw	ra,0(r13)
    5cbc:	5bc00015 	stw	r15,0(r11)
    5cc0:	4b800015 	stw	r14,0(r9)
    5cc4:	18c00404 	addi	r3,r3,16
    5cc8:	39c00404 	addi	r7,r7,16
    5ccc:	42000404 	addi	r8,r8,16
    5cd0:	6b400404 	addi	r13,r13,16
    5cd4:	63000404 	addi	r12,r12,16
    5cd8:	5ac00404 	addi	r11,r11,16
    5cdc:	52800404 	addi	r10,r10,16
    5ce0:	4a400404 	addi	r9,r9,16
    5ce4:	1c3fef1e 	bne	r3,r16,5ca4 <__alt_data_end+0xfffd5ca4>
    5ce8:	89c00044 	addi	r7,r17,1
    5cec:	380e913a 	slli	r7,r7,4
    5cf0:	310003cc 	andi	r4,r6,15
    5cf4:	02c000c4 	movi	r11,3
    5cf8:	11c7883a 	add	r3,r2,r7
    5cfc:	29cb883a 	add	r5,r5,r7
    5d00:	5900212e 	bgeu	r11,r4,5d88 <memcpy+0x140>
    5d04:	1813883a 	mov	r9,r3
    5d08:	2811883a 	mov	r8,r5
    5d0c:	200f883a 	mov	r7,r4
    5d10:	42800017 	ldw	r10,0(r8)
    5d14:	4a400104 	addi	r9,r9,4
    5d18:	39ffff04 	addi	r7,r7,-4
    5d1c:	4abfff15 	stw	r10,-4(r9)
    5d20:	42000104 	addi	r8,r8,4
    5d24:	59fffa36 	bltu	r11,r7,5d10 <__alt_data_end+0xfffd5d10>
    5d28:	213fff04 	addi	r4,r4,-4
    5d2c:	2008d0ba 	srli	r4,r4,2
    5d30:	318000cc 	andi	r6,r6,3
    5d34:	21000044 	addi	r4,r4,1
    5d38:	2109883a 	add	r4,r4,r4
    5d3c:	2109883a 	add	r4,r4,r4
    5d40:	1907883a 	add	r3,r3,r4
    5d44:	290b883a 	add	r5,r5,r4
    5d48:	30000626 	beq	r6,zero,5d64 <memcpy+0x11c>
    5d4c:	198d883a 	add	r6,r3,r6
    5d50:	29c00003 	ldbu	r7,0(r5)
    5d54:	18c00044 	addi	r3,r3,1
    5d58:	29400044 	addi	r5,r5,1
    5d5c:	19ffffc5 	stb	r7,-1(r3)
    5d60:	19bffb1e 	bne	r3,r6,5d50 <__alt_data_end+0xfffd5d50>
    5d64:	dfc00217 	ldw	ra,8(sp)
    5d68:	dc400117 	ldw	r17,4(sp)
    5d6c:	dc000017 	ldw	r16,0(sp)
    5d70:	dec00304 	addi	sp,sp,12
    5d74:	f800283a 	ret
    5d78:	2007883a 	mov	r3,r4
    5d7c:	003ff206 	br	5d48 <__alt_data_end+0xfffd5d48>
    5d80:	2007883a 	mov	r3,r4
    5d84:	003ff106 	br	5d4c <__alt_data_end+0xfffd5d4c>
    5d88:	200d883a 	mov	r6,r4
    5d8c:	003fee06 	br	5d48 <__alt_data_end+0xfffd5d48>

00005d90 <memset>:
    5d90:	20c000cc 	andi	r3,r4,3
    5d94:	2005883a 	mov	r2,r4
    5d98:	18004426 	beq	r3,zero,5eac <memset+0x11c>
    5d9c:	31ffffc4 	addi	r7,r6,-1
    5da0:	30004026 	beq	r6,zero,5ea4 <memset+0x114>
    5da4:	2813883a 	mov	r9,r5
    5da8:	200d883a 	mov	r6,r4
    5dac:	2007883a 	mov	r3,r4
    5db0:	00000406 	br	5dc4 <memset+0x34>
    5db4:	3a3fffc4 	addi	r8,r7,-1
    5db8:	31800044 	addi	r6,r6,1
    5dbc:	38003926 	beq	r7,zero,5ea4 <memset+0x114>
    5dc0:	400f883a 	mov	r7,r8
    5dc4:	18c00044 	addi	r3,r3,1
    5dc8:	32400005 	stb	r9,0(r6)
    5dcc:	1a0000cc 	andi	r8,r3,3
    5dd0:	403ff81e 	bne	r8,zero,5db4 <__alt_data_end+0xfffd5db4>
    5dd4:	010000c4 	movi	r4,3
    5dd8:	21c02d2e 	bgeu	r4,r7,5e90 <memset+0x100>
    5ddc:	29003fcc 	andi	r4,r5,255
    5de0:	200c923a 	slli	r6,r4,8
    5de4:	3108b03a 	or	r4,r6,r4
    5de8:	200c943a 	slli	r6,r4,16
    5dec:	218cb03a 	or	r6,r4,r6
    5df0:	010003c4 	movi	r4,15
    5df4:	21c0182e 	bgeu	r4,r7,5e58 <memset+0xc8>
    5df8:	3b3ffc04 	addi	r12,r7,-16
    5dfc:	6018d13a 	srli	r12,r12,4
    5e00:	1a000104 	addi	r8,r3,4
    5e04:	1ac00204 	addi	r11,r3,8
    5e08:	6008913a 	slli	r4,r12,4
    5e0c:	1a800304 	addi	r10,r3,12
    5e10:	1813883a 	mov	r9,r3
    5e14:	21000504 	addi	r4,r4,20
    5e18:	1909883a 	add	r4,r3,r4
    5e1c:	49800015 	stw	r6,0(r9)
    5e20:	41800015 	stw	r6,0(r8)
    5e24:	59800015 	stw	r6,0(r11)
    5e28:	51800015 	stw	r6,0(r10)
    5e2c:	42000404 	addi	r8,r8,16
    5e30:	4a400404 	addi	r9,r9,16
    5e34:	5ac00404 	addi	r11,r11,16
    5e38:	52800404 	addi	r10,r10,16
    5e3c:	413ff71e 	bne	r8,r4,5e1c <__alt_data_end+0xfffd5e1c>
    5e40:	63000044 	addi	r12,r12,1
    5e44:	6018913a 	slli	r12,r12,4
    5e48:	39c003cc 	andi	r7,r7,15
    5e4c:	010000c4 	movi	r4,3
    5e50:	1b07883a 	add	r3,r3,r12
    5e54:	21c00e2e 	bgeu	r4,r7,5e90 <memset+0x100>
    5e58:	1813883a 	mov	r9,r3
    5e5c:	3811883a 	mov	r8,r7
    5e60:	010000c4 	movi	r4,3
    5e64:	49800015 	stw	r6,0(r9)
    5e68:	423fff04 	addi	r8,r8,-4
    5e6c:	4a400104 	addi	r9,r9,4
    5e70:	223ffc36 	bltu	r4,r8,5e64 <__alt_data_end+0xfffd5e64>
    5e74:	393fff04 	addi	r4,r7,-4
    5e78:	2008d0ba 	srli	r4,r4,2
    5e7c:	39c000cc 	andi	r7,r7,3
    5e80:	21000044 	addi	r4,r4,1
    5e84:	2109883a 	add	r4,r4,r4
    5e88:	2109883a 	add	r4,r4,r4
    5e8c:	1907883a 	add	r3,r3,r4
    5e90:	38000526 	beq	r7,zero,5ea8 <memset+0x118>
    5e94:	19cf883a 	add	r7,r3,r7
    5e98:	19400005 	stb	r5,0(r3)
    5e9c:	18c00044 	addi	r3,r3,1
    5ea0:	38fffd1e 	bne	r7,r3,5e98 <__alt_data_end+0xfffd5e98>
    5ea4:	f800283a 	ret
    5ea8:	f800283a 	ret
    5eac:	2007883a 	mov	r3,r4
    5eb0:	300f883a 	mov	r7,r6
    5eb4:	003fc706 	br	5dd4 <__alt_data_end+0xfffd5dd4>

00005eb8 <_Balloc>:
    5eb8:	20801317 	ldw	r2,76(r4)
    5ebc:	defffc04 	addi	sp,sp,-16
    5ec0:	dc400115 	stw	r17,4(sp)
    5ec4:	dc000015 	stw	r16,0(sp)
    5ec8:	dfc00315 	stw	ra,12(sp)
    5ecc:	dc800215 	stw	r18,8(sp)
    5ed0:	2023883a 	mov	r17,r4
    5ed4:	2821883a 	mov	r16,r5
    5ed8:	10000f26 	beq	r2,zero,5f18 <_Balloc+0x60>
    5edc:	8407883a 	add	r3,r16,r16
    5ee0:	18c7883a 	add	r3,r3,r3
    5ee4:	10c7883a 	add	r3,r2,r3
    5ee8:	18800017 	ldw	r2,0(r3)
    5eec:	10001126 	beq	r2,zero,5f34 <_Balloc+0x7c>
    5ef0:	11000017 	ldw	r4,0(r2)
    5ef4:	19000015 	stw	r4,0(r3)
    5ef8:	10000415 	stw	zero,16(r2)
    5efc:	10000315 	stw	zero,12(r2)
    5f00:	dfc00317 	ldw	ra,12(sp)
    5f04:	dc800217 	ldw	r18,8(sp)
    5f08:	dc400117 	ldw	r17,4(sp)
    5f0c:	dc000017 	ldw	r16,0(sp)
    5f10:	dec00404 	addi	sp,sp,16
    5f14:	f800283a 	ret
    5f18:	01800844 	movi	r6,33
    5f1c:	01400104 	movi	r5,4
    5f20:	0008a940 	call	8a94 <_calloc_r>
    5f24:	88801315 	stw	r2,76(r17)
    5f28:	103fec1e 	bne	r2,zero,5edc <__alt_data_end+0xfffd5edc>
    5f2c:	0005883a 	mov	r2,zero
    5f30:	003ff306 	br	5f00 <__alt_data_end+0xfffd5f00>
    5f34:	01400044 	movi	r5,1
    5f38:	2c24983a 	sll	r18,r5,r16
    5f3c:	8809883a 	mov	r4,r17
    5f40:	91800144 	addi	r6,r18,5
    5f44:	318d883a 	add	r6,r6,r6
    5f48:	318d883a 	add	r6,r6,r6
    5f4c:	0008a940 	call	8a94 <_calloc_r>
    5f50:	103ff626 	beq	r2,zero,5f2c <__alt_data_end+0xfffd5f2c>
    5f54:	14000115 	stw	r16,4(r2)
    5f58:	14800215 	stw	r18,8(r2)
    5f5c:	003fe606 	br	5ef8 <__alt_data_end+0xfffd5ef8>

00005f60 <_Bfree>:
    5f60:	28000826 	beq	r5,zero,5f84 <_Bfree+0x24>
    5f64:	28c00117 	ldw	r3,4(r5)
    5f68:	20801317 	ldw	r2,76(r4)
    5f6c:	18c7883a 	add	r3,r3,r3
    5f70:	18c7883a 	add	r3,r3,r3
    5f74:	10c5883a 	add	r2,r2,r3
    5f78:	10c00017 	ldw	r3,0(r2)
    5f7c:	28c00015 	stw	r3,0(r5)
    5f80:	11400015 	stw	r5,0(r2)
    5f84:	f800283a 	ret

00005f88 <__multadd>:
    5f88:	defff704 	addi	sp,sp,-36
    5f8c:	dc800215 	stw	r18,8(sp)
    5f90:	2c800417 	ldw	r18,16(r5)
    5f94:	dd800615 	stw	r22,24(sp)
    5f98:	dd400515 	stw	r21,20(sp)
    5f9c:	dd000415 	stw	r20,16(sp)
    5fa0:	dcc00315 	stw	r19,12(sp)
    5fa4:	dc400115 	stw	r17,4(sp)
    5fa8:	dc000015 	stw	r16,0(sp)
    5fac:	dfc00815 	stw	ra,32(sp)
    5fb0:	ddc00715 	stw	r23,28(sp)
    5fb4:	2827883a 	mov	r19,r5
    5fb8:	2029883a 	mov	r20,r4
    5fbc:	3023883a 	mov	r17,r6
    5fc0:	3821883a 	mov	r16,r7
    5fc4:	2d400504 	addi	r21,r5,20
    5fc8:	002d883a 	mov	r22,zero
    5fcc:	adc00017 	ldw	r23,0(r21)
    5fd0:	880b883a 	mov	r5,r17
    5fd4:	ad400104 	addi	r21,r21,4
    5fd8:	b93fffcc 	andi	r4,r23,65535
    5fdc:	000aa740 	call	aa74 <__mulsi3>
    5fe0:	b808d43a 	srli	r4,r23,16
    5fe4:	880b883a 	mov	r5,r17
    5fe8:	1421883a 	add	r16,r2,r16
    5fec:	000aa740 	call	aa74 <__mulsi3>
    5ff0:	800ed43a 	srli	r7,r16,16
    5ff4:	80ffffcc 	andi	r3,r16,65535
    5ff8:	b5800044 	addi	r22,r22,1
    5ffc:	11c5883a 	add	r2,r2,r7
    6000:	100e943a 	slli	r7,r2,16
    6004:	1020d43a 	srli	r16,r2,16
    6008:	38c7883a 	add	r3,r7,r3
    600c:	a8ffff15 	stw	r3,-4(r21)
    6010:	b4bfee16 	blt	r22,r18,5fcc <__alt_data_end+0xfffd5fcc>
    6014:	80000926 	beq	r16,zero,603c <__multadd+0xb4>
    6018:	98800217 	ldw	r2,8(r19)
    601c:	9080130e 	bge	r18,r2,606c <__multadd+0xe4>
    6020:	90800144 	addi	r2,r18,5
    6024:	1085883a 	add	r2,r2,r2
    6028:	1085883a 	add	r2,r2,r2
    602c:	9885883a 	add	r2,r19,r2
    6030:	14000015 	stw	r16,0(r2)
    6034:	94800044 	addi	r18,r18,1
    6038:	9c800415 	stw	r18,16(r19)
    603c:	9805883a 	mov	r2,r19
    6040:	dfc00817 	ldw	ra,32(sp)
    6044:	ddc00717 	ldw	r23,28(sp)
    6048:	dd800617 	ldw	r22,24(sp)
    604c:	dd400517 	ldw	r21,20(sp)
    6050:	dd000417 	ldw	r20,16(sp)
    6054:	dcc00317 	ldw	r19,12(sp)
    6058:	dc800217 	ldw	r18,8(sp)
    605c:	dc400117 	ldw	r17,4(sp)
    6060:	dc000017 	ldw	r16,0(sp)
    6064:	dec00904 	addi	sp,sp,36
    6068:	f800283a 	ret
    606c:	99400117 	ldw	r5,4(r19)
    6070:	a009883a 	mov	r4,r20
    6074:	29400044 	addi	r5,r5,1
    6078:	0005eb80 	call	5eb8 <_Balloc>
    607c:	99800417 	ldw	r6,16(r19)
    6080:	99400304 	addi	r5,r19,12
    6084:	11000304 	addi	r4,r2,12
    6088:	31800084 	addi	r6,r6,2
    608c:	318d883a 	add	r6,r6,r6
    6090:	318d883a 	add	r6,r6,r6
    6094:	1023883a 	mov	r17,r2
    6098:	0005c480 	call	5c48 <memcpy>
    609c:	98000a26 	beq	r19,zero,60c8 <__multadd+0x140>
    60a0:	98c00117 	ldw	r3,4(r19)
    60a4:	a0801317 	ldw	r2,76(r20)
    60a8:	18c7883a 	add	r3,r3,r3
    60ac:	18c7883a 	add	r3,r3,r3
    60b0:	10c5883a 	add	r2,r2,r3
    60b4:	10c00017 	ldw	r3,0(r2)
    60b8:	98c00015 	stw	r3,0(r19)
    60bc:	14c00015 	stw	r19,0(r2)
    60c0:	8827883a 	mov	r19,r17
    60c4:	003fd606 	br	6020 <__alt_data_end+0xfffd6020>
    60c8:	8827883a 	mov	r19,r17
    60cc:	003fd406 	br	6020 <__alt_data_end+0xfffd6020>

000060d0 <__s2b>:
    60d0:	defff904 	addi	sp,sp,-28
    60d4:	dc400115 	stw	r17,4(sp)
    60d8:	dc000015 	stw	r16,0(sp)
    60dc:	2023883a 	mov	r17,r4
    60e0:	2821883a 	mov	r16,r5
    60e4:	39000204 	addi	r4,r7,8
    60e8:	01400244 	movi	r5,9
    60ec:	dcc00315 	stw	r19,12(sp)
    60f0:	dc800215 	stw	r18,8(sp)
    60f4:	dfc00615 	stw	ra,24(sp)
    60f8:	dd400515 	stw	r21,20(sp)
    60fc:	dd000415 	stw	r20,16(sp)
    6100:	3825883a 	mov	r18,r7
    6104:	3027883a 	mov	r19,r6
    6108:	00004d40 	call	4d4 <__divsi3>
    610c:	00c00044 	movi	r3,1
    6110:	000b883a 	mov	r5,zero
    6114:	1880030e 	bge	r3,r2,6124 <__s2b+0x54>
    6118:	18c7883a 	add	r3,r3,r3
    611c:	29400044 	addi	r5,r5,1
    6120:	18bffd16 	blt	r3,r2,6118 <__alt_data_end+0xfffd6118>
    6124:	8809883a 	mov	r4,r17
    6128:	0005eb80 	call	5eb8 <_Balloc>
    612c:	d8c00717 	ldw	r3,28(sp)
    6130:	10c00515 	stw	r3,20(r2)
    6134:	00c00044 	movi	r3,1
    6138:	10c00415 	stw	r3,16(r2)
    613c:	00c00244 	movi	r3,9
    6140:	1cc0210e 	bge	r3,r19,61c8 <__s2b+0xf8>
    6144:	80eb883a 	add	r21,r16,r3
    6148:	a829883a 	mov	r20,r21
    614c:	84e1883a 	add	r16,r16,r19
    6150:	a1c00007 	ldb	r7,0(r20)
    6154:	01800284 	movi	r6,10
    6158:	a5000044 	addi	r20,r20,1
    615c:	100b883a 	mov	r5,r2
    6160:	39fff404 	addi	r7,r7,-48
    6164:	8809883a 	mov	r4,r17
    6168:	0005f880 	call	5f88 <__multadd>
    616c:	a43ff81e 	bne	r20,r16,6150 <__alt_data_end+0xfffd6150>
    6170:	ace1883a 	add	r16,r21,r19
    6174:	843ffe04 	addi	r16,r16,-8
    6178:	9c800a0e 	bge	r19,r18,61a4 <__s2b+0xd4>
    617c:	94e5c83a 	sub	r18,r18,r19
    6180:	84a5883a 	add	r18,r16,r18
    6184:	81c00007 	ldb	r7,0(r16)
    6188:	01800284 	movi	r6,10
    618c:	84000044 	addi	r16,r16,1
    6190:	100b883a 	mov	r5,r2
    6194:	39fff404 	addi	r7,r7,-48
    6198:	8809883a 	mov	r4,r17
    619c:	0005f880 	call	5f88 <__multadd>
    61a0:	84bff81e 	bne	r16,r18,6184 <__alt_data_end+0xfffd6184>
    61a4:	dfc00617 	ldw	ra,24(sp)
    61a8:	dd400517 	ldw	r21,20(sp)
    61ac:	dd000417 	ldw	r20,16(sp)
    61b0:	dcc00317 	ldw	r19,12(sp)
    61b4:	dc800217 	ldw	r18,8(sp)
    61b8:	dc400117 	ldw	r17,4(sp)
    61bc:	dc000017 	ldw	r16,0(sp)
    61c0:	dec00704 	addi	sp,sp,28
    61c4:	f800283a 	ret
    61c8:	84000284 	addi	r16,r16,10
    61cc:	1827883a 	mov	r19,r3
    61d0:	003fe906 	br	6178 <__alt_data_end+0xfffd6178>

000061d4 <__hi0bits>:
    61d4:	20bfffec 	andhi	r2,r4,65535
    61d8:	1000141e 	bne	r2,zero,622c <__hi0bits+0x58>
    61dc:	2008943a 	slli	r4,r4,16
    61e0:	00800404 	movi	r2,16
    61e4:	20ffc02c 	andhi	r3,r4,65280
    61e8:	1800021e 	bne	r3,zero,61f4 <__hi0bits+0x20>
    61ec:	2008923a 	slli	r4,r4,8
    61f0:	10800204 	addi	r2,r2,8
    61f4:	20fc002c 	andhi	r3,r4,61440
    61f8:	1800021e 	bne	r3,zero,6204 <__hi0bits+0x30>
    61fc:	2008913a 	slli	r4,r4,4
    6200:	10800104 	addi	r2,r2,4
    6204:	20f0002c 	andhi	r3,r4,49152
    6208:	1800031e 	bne	r3,zero,6218 <__hi0bits+0x44>
    620c:	2109883a 	add	r4,r4,r4
    6210:	10800084 	addi	r2,r2,2
    6214:	2109883a 	add	r4,r4,r4
    6218:	20000316 	blt	r4,zero,6228 <__hi0bits+0x54>
    621c:	2110002c 	andhi	r4,r4,16384
    6220:	2000041e 	bne	r4,zero,6234 <__hi0bits+0x60>
    6224:	00800804 	movi	r2,32
    6228:	f800283a 	ret
    622c:	0005883a 	mov	r2,zero
    6230:	003fec06 	br	61e4 <__alt_data_end+0xfffd61e4>
    6234:	10800044 	addi	r2,r2,1
    6238:	f800283a 	ret

0000623c <__lo0bits>:
    623c:	20c00017 	ldw	r3,0(r4)
    6240:	188001cc 	andi	r2,r3,7
    6244:	10000826 	beq	r2,zero,6268 <__lo0bits+0x2c>
    6248:	1880004c 	andi	r2,r3,1
    624c:	1000211e 	bne	r2,zero,62d4 <__lo0bits+0x98>
    6250:	1880008c 	andi	r2,r3,2
    6254:	1000211e 	bne	r2,zero,62dc <__lo0bits+0xa0>
    6258:	1806d0ba 	srli	r3,r3,2
    625c:	00800084 	movi	r2,2
    6260:	20c00015 	stw	r3,0(r4)
    6264:	f800283a 	ret
    6268:	18bfffcc 	andi	r2,r3,65535
    626c:	10001326 	beq	r2,zero,62bc <__lo0bits+0x80>
    6270:	0005883a 	mov	r2,zero
    6274:	19403fcc 	andi	r5,r3,255
    6278:	2800021e 	bne	r5,zero,6284 <__lo0bits+0x48>
    627c:	1806d23a 	srli	r3,r3,8
    6280:	10800204 	addi	r2,r2,8
    6284:	194003cc 	andi	r5,r3,15
    6288:	2800021e 	bne	r5,zero,6294 <__lo0bits+0x58>
    628c:	1806d13a 	srli	r3,r3,4
    6290:	10800104 	addi	r2,r2,4
    6294:	194000cc 	andi	r5,r3,3
    6298:	2800021e 	bne	r5,zero,62a4 <__lo0bits+0x68>
    629c:	1806d0ba 	srli	r3,r3,2
    62a0:	10800084 	addi	r2,r2,2
    62a4:	1940004c 	andi	r5,r3,1
    62a8:	2800081e 	bne	r5,zero,62cc <__lo0bits+0x90>
    62ac:	1806d07a 	srli	r3,r3,1
    62b0:	1800051e 	bne	r3,zero,62c8 <__lo0bits+0x8c>
    62b4:	00800804 	movi	r2,32
    62b8:	f800283a 	ret
    62bc:	1806d43a 	srli	r3,r3,16
    62c0:	00800404 	movi	r2,16
    62c4:	003feb06 	br	6274 <__alt_data_end+0xfffd6274>
    62c8:	10800044 	addi	r2,r2,1
    62cc:	20c00015 	stw	r3,0(r4)
    62d0:	f800283a 	ret
    62d4:	0005883a 	mov	r2,zero
    62d8:	f800283a 	ret
    62dc:	1806d07a 	srli	r3,r3,1
    62e0:	00800044 	movi	r2,1
    62e4:	20c00015 	stw	r3,0(r4)
    62e8:	f800283a 	ret

000062ec <__i2b>:
    62ec:	defffd04 	addi	sp,sp,-12
    62f0:	dc000015 	stw	r16,0(sp)
    62f4:	04000044 	movi	r16,1
    62f8:	dc400115 	stw	r17,4(sp)
    62fc:	2823883a 	mov	r17,r5
    6300:	800b883a 	mov	r5,r16
    6304:	dfc00215 	stw	ra,8(sp)
    6308:	0005eb80 	call	5eb8 <_Balloc>
    630c:	14400515 	stw	r17,20(r2)
    6310:	14000415 	stw	r16,16(r2)
    6314:	dfc00217 	ldw	ra,8(sp)
    6318:	dc400117 	ldw	r17,4(sp)
    631c:	dc000017 	ldw	r16,0(sp)
    6320:	dec00304 	addi	sp,sp,12
    6324:	f800283a 	ret

00006328 <__multiply>:
    6328:	deffef04 	addi	sp,sp,-68
    632c:	dc400815 	stw	r17,32(sp)
    6330:	dc000715 	stw	r16,28(sp)
    6334:	34400417 	ldw	r17,16(r6)
    6338:	2c000417 	ldw	r16,16(r5)
    633c:	dd800d15 	stw	r22,52(sp)
    6340:	dc800915 	stw	r18,36(sp)
    6344:	dfc01015 	stw	ra,64(sp)
    6348:	df000f15 	stw	fp,60(sp)
    634c:	ddc00e15 	stw	r23,56(sp)
    6350:	dd400c15 	stw	r21,48(sp)
    6354:	dd000b15 	stw	r20,44(sp)
    6358:	dcc00a15 	stw	r19,40(sp)
    635c:	2825883a 	mov	r18,r5
    6360:	302d883a 	mov	r22,r6
    6364:	8440050e 	bge	r16,r17,637c <__multiply+0x54>
    6368:	8007883a 	mov	r3,r16
    636c:	3025883a 	mov	r18,r6
    6370:	8821883a 	mov	r16,r17
    6374:	282d883a 	mov	r22,r5
    6378:	1823883a 	mov	r17,r3
    637c:	90800217 	ldw	r2,8(r18)
    6380:	8447883a 	add	r3,r16,r17
    6384:	d8c00215 	stw	r3,8(sp)
    6388:	91400117 	ldw	r5,4(r18)
    638c:	10c0010e 	bge	r2,r3,6394 <__multiply+0x6c>
    6390:	29400044 	addi	r5,r5,1
    6394:	0005eb80 	call	5eb8 <_Balloc>
    6398:	d8c00217 	ldw	r3,8(sp)
    639c:	d8800615 	stw	r2,24(sp)
    63a0:	18eb883a 	add	r21,r3,r3
    63a4:	ad6b883a 	add	r21,r21,r21
    63a8:	10c00504 	addi	r3,r2,20
    63ac:	1d6b883a 	add	r21,r3,r21
    63b0:	d8c00115 	stw	r3,4(sp)
    63b4:	dd400315 	stw	r21,12(sp)
    63b8:	1805883a 	mov	r2,r3
    63bc:	1d40042e 	bgeu	r3,r21,63d0 <__multiply+0xa8>
    63c0:	d8c00317 	ldw	r3,12(sp)
    63c4:	10000015 	stw	zero,0(r2)
    63c8:	10800104 	addi	r2,r2,4
    63cc:	10fffc36 	bltu	r2,r3,63c0 <__alt_data_end+0xfffd63c0>
    63d0:	8c63883a 	add	r17,r17,r17
    63d4:	b5800504 	addi	r22,r22,20
    63d8:	8c63883a 	add	r17,r17,r17
    63dc:	94800504 	addi	r18,r18,20
    63e0:	8421883a 	add	r16,r16,r16
    63e4:	b463883a 	add	r17,r22,r17
    63e8:	8421883a 	add	r16,r16,r16
    63ec:	dd800015 	stw	r22,0(sp)
    63f0:	dc800415 	stw	r18,16(sp)
    63f4:	dc400515 	stw	r17,20(sp)
    63f8:	9429883a 	add	r20,r18,r16
    63fc:	b4404f2e 	bgeu	r22,r17,653c <__multiply+0x214>
    6400:	d8c00017 	ldw	r3,0(sp)
    6404:	1c800017 	ldw	r18,0(r3)
    6408:	947fffcc 	andi	r17,r18,65535
    640c:	88001e26 	beq	r17,zero,6488 <__multiply+0x160>
    6410:	dd800117 	ldw	r22,4(sp)
    6414:	dd400417 	ldw	r21,16(sp)
    6418:	0027883a 	mov	r19,zero
    641c:	ac800017 	ldw	r18,0(r21)
    6420:	b4000017 	ldw	r16,0(r22)
    6424:	880b883a 	mov	r5,r17
    6428:	913fffcc 	andi	r4,r18,65535
    642c:	000aa740 	call	aa74 <__mulsi3>
    6430:	9008d43a 	srli	r4,r18,16
    6434:	84bfffcc 	andi	r18,r16,65535
    6438:	1485883a 	add	r2,r2,r18
    643c:	14e5883a 	add	r18,r2,r19
    6440:	8020d43a 	srli	r16,r16,16
    6444:	9026d43a 	srli	r19,r18,16
    6448:	880b883a 	mov	r5,r17
    644c:	000aa740 	call	aa74 <__mulsi3>
    6450:	1405883a 	add	r2,r2,r16
    6454:	14e1883a 	add	r16,r2,r19
    6458:	90ffffcc 	andi	r3,r18,65535
    645c:	8024943a 	slli	r18,r16,16
    6460:	ad400104 	addi	r21,r21,4
    6464:	b005883a 	mov	r2,r22
    6468:	90c6b03a 	or	r3,r18,r3
    646c:	b0c00015 	stw	r3,0(r22)
    6470:	8026d43a 	srli	r19,r16,16
    6474:	b5800104 	addi	r22,r22,4
    6478:	ad3fe836 	bltu	r21,r20,641c <__alt_data_end+0xfffd641c>
    647c:	d8c00017 	ldw	r3,0(sp)
    6480:	14c00115 	stw	r19,4(r2)
    6484:	1c800017 	ldw	r18,0(r3)
    6488:	9024d43a 	srli	r18,r18,16
    648c:	90002226 	beq	r18,zero,6518 <__multiply+0x1f0>
    6490:	d8c00117 	ldw	r3,4(sp)
    6494:	dd800417 	ldw	r22,16(sp)
    6498:	002f883a 	mov	r23,zero
    649c:	1f000017 	ldw	fp,0(r3)
    64a0:	1823883a 	mov	r17,r3
    64a4:	182b883a 	mov	r21,r3
    64a8:	e021883a 	mov	r16,fp
    64ac:	00000106 	br	64b4 <__multiply+0x18c>
    64b0:	982b883a 	mov	r21,r19
    64b4:	b100000b 	ldhu	r4,0(r22)
    64b8:	8020d43a 	srli	r16,r16,16
    64bc:	900b883a 	mov	r5,r18
    64c0:	000aa740 	call	aa74 <__mulsi3>
    64c4:	1405883a 	add	r2,r2,r16
    64c8:	15ef883a 	add	r23,r2,r23
    64cc:	b804943a 	slli	r2,r23,16
    64d0:	e0ffffcc 	andi	r3,fp,65535
    64d4:	8c400104 	addi	r17,r17,4
    64d8:	10c6b03a 	or	r3,r2,r3
    64dc:	88ffff15 	stw	r3,-4(r17)
    64e0:	b5800104 	addi	r22,r22,4
    64e4:	b13fff17 	ldw	r4,-4(r22)
    64e8:	acc00104 	addi	r19,r21,4
    64ec:	900b883a 	mov	r5,r18
    64f0:	2008d43a 	srli	r4,r4,16
    64f4:	9c000017 	ldw	r16,0(r19)
    64f8:	000aa740 	call	aa74 <__mulsi3>
    64fc:	b806d43a 	srli	r3,r23,16
    6500:	813fffcc 	andi	r4,r16,65535
    6504:	1105883a 	add	r2,r2,r4
    6508:	10f9883a 	add	fp,r2,r3
    650c:	e02ed43a 	srli	r23,fp,16
    6510:	b53fe736 	bltu	r22,r20,64b0 <__alt_data_end+0xfffd64b0>
    6514:	af000115 	stw	fp,4(r21)
    6518:	d8c00017 	ldw	r3,0(sp)
    651c:	d9000517 	ldw	r4,20(sp)
    6520:	18c00104 	addi	r3,r3,4
    6524:	d8c00015 	stw	r3,0(sp)
    6528:	d8c00117 	ldw	r3,4(sp)
    652c:	18c00104 	addi	r3,r3,4
    6530:	d8c00115 	stw	r3,4(sp)
    6534:	d8c00017 	ldw	r3,0(sp)
    6538:	193fb136 	bltu	r3,r4,6400 <__alt_data_end+0xfffd6400>
    653c:	d8c00217 	ldw	r3,8(sp)
    6540:	00c00c0e 	bge	zero,r3,6574 <__multiply+0x24c>
    6544:	d8c00317 	ldw	r3,12(sp)
    6548:	18bfff17 	ldw	r2,-4(r3)
    654c:	1d7fff04 	addi	r21,r3,-4
    6550:	10000326 	beq	r2,zero,6560 <__multiply+0x238>
    6554:	00000706 	br	6574 <__multiply+0x24c>
    6558:	a8800017 	ldw	r2,0(r21)
    655c:	1000051e 	bne	r2,zero,6574 <__multiply+0x24c>
    6560:	d8c00217 	ldw	r3,8(sp)
    6564:	ad7fff04 	addi	r21,r21,-4
    6568:	18ffffc4 	addi	r3,r3,-1
    656c:	d8c00215 	stw	r3,8(sp)
    6570:	183ff91e 	bne	r3,zero,6558 <__alt_data_end+0xfffd6558>
    6574:	d8c00617 	ldw	r3,24(sp)
    6578:	d9000217 	ldw	r4,8(sp)
    657c:	1805883a 	mov	r2,r3
    6580:	19000415 	stw	r4,16(r3)
    6584:	dfc01017 	ldw	ra,64(sp)
    6588:	df000f17 	ldw	fp,60(sp)
    658c:	ddc00e17 	ldw	r23,56(sp)
    6590:	dd800d17 	ldw	r22,52(sp)
    6594:	dd400c17 	ldw	r21,48(sp)
    6598:	dd000b17 	ldw	r20,44(sp)
    659c:	dcc00a17 	ldw	r19,40(sp)
    65a0:	dc800917 	ldw	r18,36(sp)
    65a4:	dc400817 	ldw	r17,32(sp)
    65a8:	dc000717 	ldw	r16,28(sp)
    65ac:	dec01104 	addi	sp,sp,68
    65b0:	f800283a 	ret

000065b4 <__pow5mult>:
    65b4:	defffa04 	addi	sp,sp,-24
    65b8:	dcc00315 	stw	r19,12(sp)
    65bc:	dc000015 	stw	r16,0(sp)
    65c0:	dfc00515 	stw	ra,20(sp)
    65c4:	dd000415 	stw	r20,16(sp)
    65c8:	dc800215 	stw	r18,8(sp)
    65cc:	dc400115 	stw	r17,4(sp)
    65d0:	308000cc 	andi	r2,r6,3
    65d4:	3021883a 	mov	r16,r6
    65d8:	2027883a 	mov	r19,r4
    65dc:	10002f1e 	bne	r2,zero,669c <__pow5mult+0xe8>
    65e0:	2825883a 	mov	r18,r5
    65e4:	8021d0ba 	srai	r16,r16,2
    65e8:	80001a26 	beq	r16,zero,6654 <__pow5mult+0xa0>
    65ec:	9c401217 	ldw	r17,72(r19)
    65f0:	8800061e 	bne	r17,zero,660c <__pow5mult+0x58>
    65f4:	00003406 	br	66c8 <__pow5mult+0x114>
    65f8:	8021d07a 	srai	r16,r16,1
    65fc:	80001526 	beq	r16,zero,6654 <__pow5mult+0xa0>
    6600:	88800017 	ldw	r2,0(r17)
    6604:	10001c26 	beq	r2,zero,6678 <__pow5mult+0xc4>
    6608:	1023883a 	mov	r17,r2
    660c:	8080004c 	andi	r2,r16,1
    6610:	103ff926 	beq	r2,zero,65f8 <__alt_data_end+0xfffd65f8>
    6614:	880d883a 	mov	r6,r17
    6618:	900b883a 	mov	r5,r18
    661c:	9809883a 	mov	r4,r19
    6620:	00063280 	call	6328 <__multiply>
    6624:	90001b26 	beq	r18,zero,6694 <__pow5mult+0xe0>
    6628:	91000117 	ldw	r4,4(r18)
    662c:	98c01317 	ldw	r3,76(r19)
    6630:	8021d07a 	srai	r16,r16,1
    6634:	2109883a 	add	r4,r4,r4
    6638:	2109883a 	add	r4,r4,r4
    663c:	1907883a 	add	r3,r3,r4
    6640:	19000017 	ldw	r4,0(r3)
    6644:	91000015 	stw	r4,0(r18)
    6648:	1c800015 	stw	r18,0(r3)
    664c:	1025883a 	mov	r18,r2
    6650:	803feb1e 	bne	r16,zero,6600 <__alt_data_end+0xfffd6600>
    6654:	9005883a 	mov	r2,r18
    6658:	dfc00517 	ldw	ra,20(sp)
    665c:	dd000417 	ldw	r20,16(sp)
    6660:	dcc00317 	ldw	r19,12(sp)
    6664:	dc800217 	ldw	r18,8(sp)
    6668:	dc400117 	ldw	r17,4(sp)
    666c:	dc000017 	ldw	r16,0(sp)
    6670:	dec00604 	addi	sp,sp,24
    6674:	f800283a 	ret
    6678:	880d883a 	mov	r6,r17
    667c:	880b883a 	mov	r5,r17
    6680:	9809883a 	mov	r4,r19
    6684:	00063280 	call	6328 <__multiply>
    6688:	88800015 	stw	r2,0(r17)
    668c:	10000015 	stw	zero,0(r2)
    6690:	003fdd06 	br	6608 <__alt_data_end+0xfffd6608>
    6694:	1025883a 	mov	r18,r2
    6698:	003fd706 	br	65f8 <__alt_data_end+0xfffd65f8>
    669c:	10bfffc4 	addi	r2,r2,-1
    66a0:	1085883a 	add	r2,r2,r2
    66a4:	00c00074 	movhi	r3,1
    66a8:	18df1404 	addi	r3,r3,31824
    66ac:	1085883a 	add	r2,r2,r2
    66b0:	1885883a 	add	r2,r3,r2
    66b4:	11800017 	ldw	r6,0(r2)
    66b8:	000f883a 	mov	r7,zero
    66bc:	0005f880 	call	5f88 <__multadd>
    66c0:	1025883a 	mov	r18,r2
    66c4:	003fc706 	br	65e4 <__alt_data_end+0xfffd65e4>
    66c8:	05000044 	movi	r20,1
    66cc:	a00b883a 	mov	r5,r20
    66d0:	9809883a 	mov	r4,r19
    66d4:	0005eb80 	call	5eb8 <_Balloc>
    66d8:	1023883a 	mov	r17,r2
    66dc:	00809c44 	movi	r2,625
    66e0:	88800515 	stw	r2,20(r17)
    66e4:	8d000415 	stw	r20,16(r17)
    66e8:	9c401215 	stw	r17,72(r19)
    66ec:	88000015 	stw	zero,0(r17)
    66f0:	003fc606 	br	660c <__alt_data_end+0xfffd660c>

000066f4 <__lshift>:
    66f4:	defff904 	addi	sp,sp,-28
    66f8:	dd400515 	stw	r21,20(sp)
    66fc:	dcc00315 	stw	r19,12(sp)
    6700:	302bd17a 	srai	r21,r6,5
    6704:	2cc00417 	ldw	r19,16(r5)
    6708:	28800217 	ldw	r2,8(r5)
    670c:	dd000415 	stw	r20,16(sp)
    6710:	ace7883a 	add	r19,r21,r19
    6714:	dc800215 	stw	r18,8(sp)
    6718:	dc400115 	stw	r17,4(sp)
    671c:	dc000015 	stw	r16,0(sp)
    6720:	dfc00615 	stw	ra,24(sp)
    6724:	9c000044 	addi	r16,r19,1
    6728:	2823883a 	mov	r17,r5
    672c:	3029883a 	mov	r20,r6
    6730:	2025883a 	mov	r18,r4
    6734:	29400117 	ldw	r5,4(r5)
    6738:	1400030e 	bge	r2,r16,6748 <__lshift+0x54>
    673c:	1085883a 	add	r2,r2,r2
    6740:	29400044 	addi	r5,r5,1
    6744:	143ffd16 	blt	r2,r16,673c <__alt_data_end+0xfffd673c>
    6748:	9009883a 	mov	r4,r18
    674c:	0005eb80 	call	5eb8 <_Balloc>
    6750:	10c00504 	addi	r3,r2,20
    6754:	0540070e 	bge	zero,r21,6774 <__lshift+0x80>
    6758:	ad6b883a 	add	r21,r21,r21
    675c:	ad6b883a 	add	r21,r21,r21
    6760:	1809883a 	mov	r4,r3
    6764:	1d47883a 	add	r3,r3,r21
    6768:	20000015 	stw	zero,0(r4)
    676c:	21000104 	addi	r4,r4,4
    6770:	193ffd1e 	bne	r3,r4,6768 <__alt_data_end+0xfffd6768>
    6774:	8a000417 	ldw	r8,16(r17)
    6778:	89000504 	addi	r4,r17,20
    677c:	a18007cc 	andi	r6,r20,31
    6780:	4211883a 	add	r8,r8,r8
    6784:	4211883a 	add	r8,r8,r8
    6788:	2211883a 	add	r8,r4,r8
    678c:	30002326 	beq	r6,zero,681c <__lshift+0x128>
    6790:	02400804 	movi	r9,32
    6794:	4993c83a 	sub	r9,r9,r6
    6798:	000b883a 	mov	r5,zero
    679c:	21c00017 	ldw	r7,0(r4)
    67a0:	1815883a 	mov	r10,r3
    67a4:	18c00104 	addi	r3,r3,4
    67a8:	398e983a 	sll	r7,r7,r6
    67ac:	21000104 	addi	r4,r4,4
    67b0:	394ab03a 	or	r5,r7,r5
    67b4:	197fff15 	stw	r5,-4(r3)
    67b8:	217fff17 	ldw	r5,-4(r4)
    67bc:	2a4ad83a 	srl	r5,r5,r9
    67c0:	223ff636 	bltu	r4,r8,679c <__alt_data_end+0xfffd679c>
    67c4:	51400115 	stw	r5,4(r10)
    67c8:	28001a1e 	bne	r5,zero,6834 <__lshift+0x140>
    67cc:	843fffc4 	addi	r16,r16,-1
    67d0:	14000415 	stw	r16,16(r2)
    67d4:	88000826 	beq	r17,zero,67f8 <__lshift+0x104>
    67d8:	89000117 	ldw	r4,4(r17)
    67dc:	90c01317 	ldw	r3,76(r18)
    67e0:	2109883a 	add	r4,r4,r4
    67e4:	2109883a 	add	r4,r4,r4
    67e8:	1907883a 	add	r3,r3,r4
    67ec:	19000017 	ldw	r4,0(r3)
    67f0:	89000015 	stw	r4,0(r17)
    67f4:	1c400015 	stw	r17,0(r3)
    67f8:	dfc00617 	ldw	ra,24(sp)
    67fc:	dd400517 	ldw	r21,20(sp)
    6800:	dd000417 	ldw	r20,16(sp)
    6804:	dcc00317 	ldw	r19,12(sp)
    6808:	dc800217 	ldw	r18,8(sp)
    680c:	dc400117 	ldw	r17,4(sp)
    6810:	dc000017 	ldw	r16,0(sp)
    6814:	dec00704 	addi	sp,sp,28
    6818:	f800283a 	ret
    681c:	21400017 	ldw	r5,0(r4)
    6820:	18c00104 	addi	r3,r3,4
    6824:	21000104 	addi	r4,r4,4
    6828:	197fff15 	stw	r5,-4(r3)
    682c:	223ffb36 	bltu	r4,r8,681c <__alt_data_end+0xfffd681c>
    6830:	003fe606 	br	67cc <__alt_data_end+0xfffd67cc>
    6834:	9c000084 	addi	r16,r19,2
    6838:	003fe406 	br	67cc <__alt_data_end+0xfffd67cc>

0000683c <__mcmp>:
    683c:	20800417 	ldw	r2,16(r4)
    6840:	28c00417 	ldw	r3,16(r5)
    6844:	10c5c83a 	sub	r2,r2,r3
    6848:	1000111e 	bne	r2,zero,6890 <__mcmp+0x54>
    684c:	18c7883a 	add	r3,r3,r3
    6850:	18c7883a 	add	r3,r3,r3
    6854:	21000504 	addi	r4,r4,20
    6858:	29400504 	addi	r5,r5,20
    685c:	20c5883a 	add	r2,r4,r3
    6860:	28cb883a 	add	r5,r5,r3
    6864:	00000106 	br	686c <__mcmp+0x30>
    6868:	20800a2e 	bgeu	r4,r2,6894 <__mcmp+0x58>
    686c:	10bfff04 	addi	r2,r2,-4
    6870:	297fff04 	addi	r5,r5,-4
    6874:	11800017 	ldw	r6,0(r2)
    6878:	28c00017 	ldw	r3,0(r5)
    687c:	30fffa26 	beq	r6,r3,6868 <__alt_data_end+0xfffd6868>
    6880:	30c00236 	bltu	r6,r3,688c <__mcmp+0x50>
    6884:	00800044 	movi	r2,1
    6888:	f800283a 	ret
    688c:	00bfffc4 	movi	r2,-1
    6890:	f800283a 	ret
    6894:	0005883a 	mov	r2,zero
    6898:	f800283a 	ret

0000689c <__mdiff>:
    689c:	28c00417 	ldw	r3,16(r5)
    68a0:	30800417 	ldw	r2,16(r6)
    68a4:	defffa04 	addi	sp,sp,-24
    68a8:	dcc00315 	stw	r19,12(sp)
    68ac:	dc800215 	stw	r18,8(sp)
    68b0:	dfc00515 	stw	ra,20(sp)
    68b4:	dd000415 	stw	r20,16(sp)
    68b8:	dc400115 	stw	r17,4(sp)
    68bc:	dc000015 	stw	r16,0(sp)
    68c0:	1887c83a 	sub	r3,r3,r2
    68c4:	2825883a 	mov	r18,r5
    68c8:	3027883a 	mov	r19,r6
    68cc:	1800141e 	bne	r3,zero,6920 <__mdiff+0x84>
    68d0:	1085883a 	add	r2,r2,r2
    68d4:	1085883a 	add	r2,r2,r2
    68d8:	2a000504 	addi	r8,r5,20
    68dc:	34000504 	addi	r16,r6,20
    68e0:	4087883a 	add	r3,r8,r2
    68e4:	8085883a 	add	r2,r16,r2
    68e8:	00000106 	br	68f0 <__mdiff+0x54>
    68ec:	40c0592e 	bgeu	r8,r3,6a54 <__mdiff+0x1b8>
    68f0:	18ffff04 	addi	r3,r3,-4
    68f4:	10bfff04 	addi	r2,r2,-4
    68f8:	19c00017 	ldw	r7,0(r3)
    68fc:	11400017 	ldw	r5,0(r2)
    6900:	397ffa26 	beq	r7,r5,68ec <__alt_data_end+0xfffd68ec>
    6904:	3940592e 	bgeu	r7,r5,6a6c <__mdiff+0x1d0>
    6908:	9005883a 	mov	r2,r18
    690c:	4023883a 	mov	r17,r8
    6910:	9825883a 	mov	r18,r19
    6914:	05000044 	movi	r20,1
    6918:	1027883a 	mov	r19,r2
    691c:	00000406 	br	6930 <__mdiff+0x94>
    6920:	18005616 	blt	r3,zero,6a7c <__mdiff+0x1e0>
    6924:	34400504 	addi	r17,r6,20
    6928:	2c000504 	addi	r16,r5,20
    692c:	0029883a 	mov	r20,zero
    6930:	91400117 	ldw	r5,4(r18)
    6934:	0005eb80 	call	5eb8 <_Balloc>
    6938:	92400417 	ldw	r9,16(r18)
    693c:	9b000417 	ldw	r12,16(r19)
    6940:	12c00504 	addi	r11,r2,20
    6944:	4a51883a 	add	r8,r9,r9
    6948:	6319883a 	add	r12,r12,r12
    694c:	4211883a 	add	r8,r8,r8
    6950:	6319883a 	add	r12,r12,r12
    6954:	15000315 	stw	r20,12(r2)
    6958:	8211883a 	add	r8,r16,r8
    695c:	8b19883a 	add	r12,r17,r12
    6960:	0007883a 	mov	r3,zero
    6964:	81400017 	ldw	r5,0(r16)
    6968:	89c00017 	ldw	r7,0(r17)
    696c:	59800104 	addi	r6,r11,4
    6970:	293fffcc 	andi	r4,r5,65535
    6974:	20c7883a 	add	r3,r4,r3
    6978:	393fffcc 	andi	r4,r7,65535
    697c:	1909c83a 	sub	r4,r3,r4
    6980:	280ad43a 	srli	r5,r5,16
    6984:	380ed43a 	srli	r7,r7,16
    6988:	2007d43a 	srai	r3,r4,16
    698c:	213fffcc 	andi	r4,r4,65535
    6990:	29cbc83a 	sub	r5,r5,r7
    6994:	28c7883a 	add	r3,r5,r3
    6998:	180a943a 	slli	r5,r3,16
    699c:	8c400104 	addi	r17,r17,4
    69a0:	84000104 	addi	r16,r16,4
    69a4:	2908b03a 	or	r4,r5,r4
    69a8:	59000015 	stw	r4,0(r11)
    69ac:	1807d43a 	srai	r3,r3,16
    69b0:	3015883a 	mov	r10,r6
    69b4:	3017883a 	mov	r11,r6
    69b8:	8b3fea36 	bltu	r17,r12,6964 <__alt_data_end+0xfffd6964>
    69bc:	8200162e 	bgeu	r16,r8,6a18 <__mdiff+0x17c>
    69c0:	8017883a 	mov	r11,r16
    69c4:	59400017 	ldw	r5,0(r11)
    69c8:	31800104 	addi	r6,r6,4
    69cc:	5ac00104 	addi	r11,r11,4
    69d0:	293fffcc 	andi	r4,r5,65535
    69d4:	20c7883a 	add	r3,r4,r3
    69d8:	280ed43a 	srli	r7,r5,16
    69dc:	180bd43a 	srai	r5,r3,16
    69e0:	193fffcc 	andi	r4,r3,65535
    69e4:	3947883a 	add	r3,r7,r5
    69e8:	180a943a 	slli	r5,r3,16
    69ec:	1807d43a 	srai	r3,r3,16
    69f0:	2908b03a 	or	r4,r5,r4
    69f4:	313fff15 	stw	r4,-4(r6)
    69f8:	5a3ff236 	bltu	r11,r8,69c4 <__alt_data_end+0xfffd69c4>
    69fc:	0406303a 	nor	r3,zero,r16
    6a00:	1a07883a 	add	r3,r3,r8
    6a04:	1806d0ba 	srli	r3,r3,2
    6a08:	18c00044 	addi	r3,r3,1
    6a0c:	18c7883a 	add	r3,r3,r3
    6a10:	18c7883a 	add	r3,r3,r3
    6a14:	50d5883a 	add	r10,r10,r3
    6a18:	50ffff04 	addi	r3,r10,-4
    6a1c:	2000041e 	bne	r4,zero,6a30 <__mdiff+0x194>
    6a20:	18ffff04 	addi	r3,r3,-4
    6a24:	19000017 	ldw	r4,0(r3)
    6a28:	4a7fffc4 	addi	r9,r9,-1
    6a2c:	203ffc26 	beq	r4,zero,6a20 <__alt_data_end+0xfffd6a20>
    6a30:	12400415 	stw	r9,16(r2)
    6a34:	dfc00517 	ldw	ra,20(sp)
    6a38:	dd000417 	ldw	r20,16(sp)
    6a3c:	dcc00317 	ldw	r19,12(sp)
    6a40:	dc800217 	ldw	r18,8(sp)
    6a44:	dc400117 	ldw	r17,4(sp)
    6a48:	dc000017 	ldw	r16,0(sp)
    6a4c:	dec00604 	addi	sp,sp,24
    6a50:	f800283a 	ret
    6a54:	000b883a 	mov	r5,zero
    6a58:	0005eb80 	call	5eb8 <_Balloc>
    6a5c:	00c00044 	movi	r3,1
    6a60:	10c00415 	stw	r3,16(r2)
    6a64:	10000515 	stw	zero,20(r2)
    6a68:	003ff206 	br	6a34 <__alt_data_end+0xfffd6a34>
    6a6c:	8023883a 	mov	r17,r16
    6a70:	0029883a 	mov	r20,zero
    6a74:	4021883a 	mov	r16,r8
    6a78:	003fad06 	br	6930 <__alt_data_end+0xfffd6930>
    6a7c:	9005883a 	mov	r2,r18
    6a80:	94400504 	addi	r17,r18,20
    6a84:	9c000504 	addi	r16,r19,20
    6a88:	9825883a 	mov	r18,r19
    6a8c:	05000044 	movi	r20,1
    6a90:	1027883a 	mov	r19,r2
    6a94:	003fa606 	br	6930 <__alt_data_end+0xfffd6930>

00006a98 <__ulp>:
    6a98:	295ffc2c 	andhi	r5,r5,32752
    6a9c:	00bf3034 	movhi	r2,64704
    6aa0:	2887883a 	add	r3,r5,r2
    6aa4:	00c0020e 	bge	zero,r3,6ab0 <__ulp+0x18>
    6aa8:	0005883a 	mov	r2,zero
    6aac:	f800283a 	ret
    6ab0:	00c7c83a 	sub	r3,zero,r3
    6ab4:	1807d53a 	srai	r3,r3,20
    6ab8:	008004c4 	movi	r2,19
    6abc:	10c00b0e 	bge	r2,r3,6aec <__ulp+0x54>
    6ac0:	18bffb04 	addi	r2,r3,-20
    6ac4:	01000784 	movi	r4,30
    6ac8:	0007883a 	mov	r3,zero
    6acc:	20800516 	blt	r4,r2,6ae4 <__ulp+0x4c>
    6ad0:	010007c4 	movi	r4,31
    6ad4:	2089c83a 	sub	r4,r4,r2
    6ad8:	00800044 	movi	r2,1
    6adc:	1104983a 	sll	r2,r2,r4
    6ae0:	f800283a 	ret
    6ae4:	00800044 	movi	r2,1
    6ae8:	f800283a 	ret
    6aec:	01400234 	movhi	r5,8
    6af0:	28c7d83a 	sra	r3,r5,r3
    6af4:	0005883a 	mov	r2,zero
    6af8:	f800283a 	ret

00006afc <__b2d>:
    6afc:	defffa04 	addi	sp,sp,-24
    6b00:	dc000015 	stw	r16,0(sp)
    6b04:	24000417 	ldw	r16,16(r4)
    6b08:	dc400115 	stw	r17,4(sp)
    6b0c:	24400504 	addi	r17,r4,20
    6b10:	8421883a 	add	r16,r16,r16
    6b14:	8421883a 	add	r16,r16,r16
    6b18:	8c21883a 	add	r16,r17,r16
    6b1c:	dc800215 	stw	r18,8(sp)
    6b20:	84bfff17 	ldw	r18,-4(r16)
    6b24:	dd000415 	stw	r20,16(sp)
    6b28:	dcc00315 	stw	r19,12(sp)
    6b2c:	9009883a 	mov	r4,r18
    6b30:	2829883a 	mov	r20,r5
    6b34:	dfc00515 	stw	ra,20(sp)
    6b38:	00061d40 	call	61d4 <__hi0bits>
    6b3c:	00c00804 	movi	r3,32
    6b40:	1889c83a 	sub	r4,r3,r2
    6b44:	a1000015 	stw	r4,0(r20)
    6b48:	01000284 	movi	r4,10
    6b4c:	84ffff04 	addi	r19,r16,-4
    6b50:	20801216 	blt	r4,r2,6b9c <__b2d+0xa0>
    6b54:	018002c4 	movi	r6,11
    6b58:	308dc83a 	sub	r6,r6,r2
    6b5c:	9186d83a 	srl	r3,r18,r6
    6b60:	18cffc34 	orhi	r3,r3,16368
    6b64:	8cc0212e 	bgeu	r17,r19,6bec <__b2d+0xf0>
    6b68:	813ffe17 	ldw	r4,-8(r16)
    6b6c:	218cd83a 	srl	r6,r4,r6
    6b70:	10800544 	addi	r2,r2,21
    6b74:	9084983a 	sll	r2,r18,r2
    6b78:	1184b03a 	or	r2,r2,r6
    6b7c:	dfc00517 	ldw	ra,20(sp)
    6b80:	dd000417 	ldw	r20,16(sp)
    6b84:	dcc00317 	ldw	r19,12(sp)
    6b88:	dc800217 	ldw	r18,8(sp)
    6b8c:	dc400117 	ldw	r17,4(sp)
    6b90:	dc000017 	ldw	r16,0(sp)
    6b94:	dec00604 	addi	sp,sp,24
    6b98:	f800283a 	ret
    6b9c:	8cc00f2e 	bgeu	r17,r19,6bdc <__b2d+0xe0>
    6ba0:	117ffd44 	addi	r5,r2,-11
    6ba4:	80bffe17 	ldw	r2,-8(r16)
    6ba8:	28000e26 	beq	r5,zero,6be4 <__b2d+0xe8>
    6bac:	1949c83a 	sub	r4,r3,r5
    6bb0:	9164983a 	sll	r18,r18,r5
    6bb4:	1106d83a 	srl	r3,r2,r4
    6bb8:	81bffe04 	addi	r6,r16,-8
    6bbc:	948ffc34 	orhi	r18,r18,16368
    6bc0:	90c6b03a 	or	r3,r18,r3
    6bc4:	89800e2e 	bgeu	r17,r6,6c00 <__b2d+0x104>
    6bc8:	81bffd17 	ldw	r6,-12(r16)
    6bcc:	1144983a 	sll	r2,r2,r5
    6bd0:	310ad83a 	srl	r5,r6,r4
    6bd4:	2884b03a 	or	r2,r5,r2
    6bd8:	003fe806 	br	6b7c <__alt_data_end+0xfffd6b7c>
    6bdc:	10bffd44 	addi	r2,r2,-11
    6be0:	1000041e 	bne	r2,zero,6bf4 <__b2d+0xf8>
    6be4:	90cffc34 	orhi	r3,r18,16368
    6be8:	003fe406 	br	6b7c <__alt_data_end+0xfffd6b7c>
    6bec:	000d883a 	mov	r6,zero
    6bf0:	003fdf06 	br	6b70 <__alt_data_end+0xfffd6b70>
    6bf4:	90a4983a 	sll	r18,r18,r2
    6bf8:	0005883a 	mov	r2,zero
    6bfc:	003ff906 	br	6be4 <__alt_data_end+0xfffd6be4>
    6c00:	1144983a 	sll	r2,r2,r5
    6c04:	003fdd06 	br	6b7c <__alt_data_end+0xfffd6b7c>

00006c08 <__d2b>:
    6c08:	defff804 	addi	sp,sp,-32
    6c0c:	dc000215 	stw	r16,8(sp)
    6c10:	3021883a 	mov	r16,r6
    6c14:	dc400315 	stw	r17,12(sp)
    6c18:	8022907a 	slli	r17,r16,1
    6c1c:	dd000615 	stw	r20,24(sp)
    6c20:	2829883a 	mov	r20,r5
    6c24:	01400044 	movi	r5,1
    6c28:	dcc00515 	stw	r19,20(sp)
    6c2c:	dc800415 	stw	r18,16(sp)
    6c30:	dfc00715 	stw	ra,28(sp)
    6c34:	3825883a 	mov	r18,r7
    6c38:	8822d57a 	srli	r17,r17,21
    6c3c:	0005eb80 	call	5eb8 <_Balloc>
    6c40:	1027883a 	mov	r19,r2
    6c44:	00800434 	movhi	r2,16
    6c48:	10bfffc4 	addi	r2,r2,-1
    6c4c:	808c703a 	and	r6,r16,r2
    6c50:	88000126 	beq	r17,zero,6c58 <__d2b+0x50>
    6c54:	31800434 	orhi	r6,r6,16
    6c58:	d9800015 	stw	r6,0(sp)
    6c5c:	a0002426 	beq	r20,zero,6cf0 <__d2b+0xe8>
    6c60:	d9000104 	addi	r4,sp,4
    6c64:	dd000115 	stw	r20,4(sp)
    6c68:	000623c0 	call	623c <__lo0bits>
    6c6c:	d8c00017 	ldw	r3,0(sp)
    6c70:	10002f1e 	bne	r2,zero,6d30 <__d2b+0x128>
    6c74:	d9000117 	ldw	r4,4(sp)
    6c78:	99000515 	stw	r4,20(r19)
    6c7c:	1821003a 	cmpeq	r16,r3,zero
    6c80:	01000084 	movi	r4,2
    6c84:	2421c83a 	sub	r16,r4,r16
    6c88:	98c00615 	stw	r3,24(r19)
    6c8c:	9c000415 	stw	r16,16(r19)
    6c90:	88001f1e 	bne	r17,zero,6d10 <__d2b+0x108>
    6c94:	10bef384 	addi	r2,r2,-1074
    6c98:	90800015 	stw	r2,0(r18)
    6c9c:	00900034 	movhi	r2,16384
    6ca0:	10bfffc4 	addi	r2,r2,-1
    6ca4:	8085883a 	add	r2,r16,r2
    6ca8:	1085883a 	add	r2,r2,r2
    6cac:	1085883a 	add	r2,r2,r2
    6cb0:	9885883a 	add	r2,r19,r2
    6cb4:	11000517 	ldw	r4,20(r2)
    6cb8:	8020917a 	slli	r16,r16,5
    6cbc:	00061d40 	call	61d4 <__hi0bits>
    6cc0:	d8c00817 	ldw	r3,32(sp)
    6cc4:	8085c83a 	sub	r2,r16,r2
    6cc8:	18800015 	stw	r2,0(r3)
    6ccc:	9805883a 	mov	r2,r19
    6cd0:	dfc00717 	ldw	ra,28(sp)
    6cd4:	dd000617 	ldw	r20,24(sp)
    6cd8:	dcc00517 	ldw	r19,20(sp)
    6cdc:	dc800417 	ldw	r18,16(sp)
    6ce0:	dc400317 	ldw	r17,12(sp)
    6ce4:	dc000217 	ldw	r16,8(sp)
    6ce8:	dec00804 	addi	sp,sp,32
    6cec:	f800283a 	ret
    6cf0:	d809883a 	mov	r4,sp
    6cf4:	000623c0 	call	623c <__lo0bits>
    6cf8:	d8c00017 	ldw	r3,0(sp)
    6cfc:	04000044 	movi	r16,1
    6d00:	9c000415 	stw	r16,16(r19)
    6d04:	98c00515 	stw	r3,20(r19)
    6d08:	10800804 	addi	r2,r2,32
    6d0c:	883fe126 	beq	r17,zero,6c94 <__alt_data_end+0xfffd6c94>
    6d10:	00c00d44 	movi	r3,53
    6d14:	8c7ef344 	addi	r17,r17,-1075
    6d18:	88a3883a 	add	r17,r17,r2
    6d1c:	1885c83a 	sub	r2,r3,r2
    6d20:	d8c00817 	ldw	r3,32(sp)
    6d24:	94400015 	stw	r17,0(r18)
    6d28:	18800015 	stw	r2,0(r3)
    6d2c:	003fe706 	br	6ccc <__alt_data_end+0xfffd6ccc>
    6d30:	01000804 	movi	r4,32
    6d34:	2089c83a 	sub	r4,r4,r2
    6d38:	1908983a 	sll	r4,r3,r4
    6d3c:	d9400117 	ldw	r5,4(sp)
    6d40:	1886d83a 	srl	r3,r3,r2
    6d44:	2148b03a 	or	r4,r4,r5
    6d48:	99000515 	stw	r4,20(r19)
    6d4c:	d8c00015 	stw	r3,0(sp)
    6d50:	003fca06 	br	6c7c <__alt_data_end+0xfffd6c7c>

00006d54 <__ratio>:
    6d54:	defff904 	addi	sp,sp,-28
    6d58:	dc400315 	stw	r17,12(sp)
    6d5c:	2823883a 	mov	r17,r5
    6d60:	d9400104 	addi	r5,sp,4
    6d64:	dfc00615 	stw	ra,24(sp)
    6d68:	dcc00515 	stw	r19,20(sp)
    6d6c:	dc800415 	stw	r18,16(sp)
    6d70:	2027883a 	mov	r19,r4
    6d74:	dc000215 	stw	r16,8(sp)
    6d78:	0006afc0 	call	6afc <__b2d>
    6d7c:	d80b883a 	mov	r5,sp
    6d80:	8809883a 	mov	r4,r17
    6d84:	1025883a 	mov	r18,r2
    6d88:	1821883a 	mov	r16,r3
    6d8c:	0006afc0 	call	6afc <__b2d>
    6d90:	8a000417 	ldw	r8,16(r17)
    6d94:	99000417 	ldw	r4,16(r19)
    6d98:	d9400117 	ldw	r5,4(sp)
    6d9c:	2209c83a 	sub	r4,r4,r8
    6da0:	2010917a 	slli	r8,r4,5
    6da4:	d9000017 	ldw	r4,0(sp)
    6da8:	2909c83a 	sub	r4,r5,r4
    6dac:	4109883a 	add	r4,r8,r4
    6db0:	01000e0e 	bge	zero,r4,6dec <__ratio+0x98>
    6db4:	2008953a 	slli	r4,r4,20
    6db8:	2421883a 	add	r16,r4,r16
    6dbc:	100d883a 	mov	r6,r2
    6dc0:	180f883a 	mov	r7,r3
    6dc4:	9009883a 	mov	r4,r18
    6dc8:	800b883a 	mov	r5,r16
    6dcc:	000b3480 	call	b348 <__divdf3>
    6dd0:	dfc00617 	ldw	ra,24(sp)
    6dd4:	dcc00517 	ldw	r19,20(sp)
    6dd8:	dc800417 	ldw	r18,16(sp)
    6ddc:	dc400317 	ldw	r17,12(sp)
    6de0:	dc000217 	ldw	r16,8(sp)
    6de4:	dec00704 	addi	sp,sp,28
    6de8:	f800283a 	ret
    6dec:	2008953a 	slli	r4,r4,20
    6df0:	1907c83a 	sub	r3,r3,r4
    6df4:	003ff106 	br	6dbc <__alt_data_end+0xfffd6dbc>

00006df8 <_mprec_log10>:
    6df8:	defffe04 	addi	sp,sp,-8
    6dfc:	dc000015 	stw	r16,0(sp)
    6e00:	dfc00115 	stw	ra,4(sp)
    6e04:	008005c4 	movi	r2,23
    6e08:	2021883a 	mov	r16,r4
    6e0c:	11000d0e 	bge	r2,r4,6e44 <_mprec_log10+0x4c>
    6e10:	0005883a 	mov	r2,zero
    6e14:	00cffc34 	movhi	r3,16368
    6e18:	843fffc4 	addi	r16,r16,-1
    6e1c:	000d883a 	mov	r6,zero
    6e20:	01d00934 	movhi	r7,16420
    6e24:	1009883a 	mov	r4,r2
    6e28:	180b883a 	mov	r5,r3
    6e2c:	000bf700 	call	bf70 <__muldf3>
    6e30:	803ff91e 	bne	r16,zero,6e18 <__alt_data_end+0xfffd6e18>
    6e34:	dfc00117 	ldw	ra,4(sp)
    6e38:	dc000017 	ldw	r16,0(sp)
    6e3c:	dec00204 	addi	sp,sp,8
    6e40:	f800283a 	ret
    6e44:	202090fa 	slli	r16,r4,3
    6e48:	00800074 	movhi	r2,1
    6e4c:	109f2b04 	addi	r2,r2,31916
    6e50:	1421883a 	add	r16,r2,r16
    6e54:	80800017 	ldw	r2,0(r16)
    6e58:	80c00117 	ldw	r3,4(r16)
    6e5c:	dfc00117 	ldw	ra,4(sp)
    6e60:	dc000017 	ldw	r16,0(sp)
    6e64:	dec00204 	addi	sp,sp,8
    6e68:	f800283a 	ret

00006e6c <__copybits>:
    6e6c:	297fffc4 	addi	r5,r5,-1
    6e70:	280fd17a 	srai	r7,r5,5
    6e74:	30c00417 	ldw	r3,16(r6)
    6e78:	30800504 	addi	r2,r6,20
    6e7c:	39c00044 	addi	r7,r7,1
    6e80:	18c7883a 	add	r3,r3,r3
    6e84:	39cf883a 	add	r7,r7,r7
    6e88:	18c7883a 	add	r3,r3,r3
    6e8c:	39cf883a 	add	r7,r7,r7
    6e90:	10c7883a 	add	r3,r2,r3
    6e94:	21cf883a 	add	r7,r4,r7
    6e98:	10c00d2e 	bgeu	r2,r3,6ed0 <__copybits+0x64>
    6e9c:	200b883a 	mov	r5,r4
    6ea0:	12000017 	ldw	r8,0(r2)
    6ea4:	29400104 	addi	r5,r5,4
    6ea8:	10800104 	addi	r2,r2,4
    6eac:	2a3fff15 	stw	r8,-4(r5)
    6eb0:	10fffb36 	bltu	r2,r3,6ea0 <__alt_data_end+0xfffd6ea0>
    6eb4:	1985c83a 	sub	r2,r3,r6
    6eb8:	10bffac4 	addi	r2,r2,-21
    6ebc:	1004d0ba 	srli	r2,r2,2
    6ec0:	10800044 	addi	r2,r2,1
    6ec4:	1085883a 	add	r2,r2,r2
    6ec8:	1085883a 	add	r2,r2,r2
    6ecc:	2089883a 	add	r4,r4,r2
    6ed0:	21c0032e 	bgeu	r4,r7,6ee0 <__copybits+0x74>
    6ed4:	20000015 	stw	zero,0(r4)
    6ed8:	21000104 	addi	r4,r4,4
    6edc:	21fffd36 	bltu	r4,r7,6ed4 <__alt_data_end+0xfffd6ed4>
    6ee0:	f800283a 	ret

00006ee4 <__any_on>:
    6ee4:	20c00417 	ldw	r3,16(r4)
    6ee8:	2805d17a 	srai	r2,r5,5
    6eec:	21000504 	addi	r4,r4,20
    6ef0:	18800d0e 	bge	r3,r2,6f28 <__any_on+0x44>
    6ef4:	18c7883a 	add	r3,r3,r3
    6ef8:	18c7883a 	add	r3,r3,r3
    6efc:	20c7883a 	add	r3,r4,r3
    6f00:	20c0192e 	bgeu	r4,r3,6f68 <__any_on+0x84>
    6f04:	18bfff17 	ldw	r2,-4(r3)
    6f08:	18ffff04 	addi	r3,r3,-4
    6f0c:	1000041e 	bne	r2,zero,6f20 <__any_on+0x3c>
    6f10:	20c0142e 	bgeu	r4,r3,6f64 <__any_on+0x80>
    6f14:	18ffff04 	addi	r3,r3,-4
    6f18:	19400017 	ldw	r5,0(r3)
    6f1c:	283ffc26 	beq	r5,zero,6f10 <__alt_data_end+0xfffd6f10>
    6f20:	00800044 	movi	r2,1
    6f24:	f800283a 	ret
    6f28:	10c00a0e 	bge	r2,r3,6f54 <__any_on+0x70>
    6f2c:	1085883a 	add	r2,r2,r2
    6f30:	1085883a 	add	r2,r2,r2
    6f34:	294007cc 	andi	r5,r5,31
    6f38:	2087883a 	add	r3,r4,r2
    6f3c:	283ff026 	beq	r5,zero,6f00 <__alt_data_end+0xfffd6f00>
    6f40:	19800017 	ldw	r6,0(r3)
    6f44:	3144d83a 	srl	r2,r6,r5
    6f48:	114a983a 	sll	r5,r2,r5
    6f4c:	317ff41e 	bne	r6,r5,6f20 <__alt_data_end+0xfffd6f20>
    6f50:	003feb06 	br	6f00 <__alt_data_end+0xfffd6f00>
    6f54:	1085883a 	add	r2,r2,r2
    6f58:	1085883a 	add	r2,r2,r2
    6f5c:	2087883a 	add	r3,r4,r2
    6f60:	003fe706 	br	6f00 <__alt_data_end+0xfffd6f00>
    6f64:	f800283a 	ret
    6f68:	0005883a 	mov	r2,zero
    6f6c:	f800283a 	ret

00006f70 <__fpclassifyd>:
    6f70:	00a00034 	movhi	r2,32768
    6f74:	10bfffc4 	addi	r2,r2,-1
    6f78:	2884703a 	and	r2,r5,r2
    6f7c:	10000726 	beq	r2,zero,6f9c <__fpclassifyd+0x2c>
    6f80:	00fffc34 	movhi	r3,65520
    6f84:	019ff834 	movhi	r6,32736
    6f88:	28c7883a 	add	r3,r5,r3
    6f8c:	31bfffc4 	addi	r6,r6,-1
    6f90:	30c00536 	bltu	r6,r3,6fa8 <__fpclassifyd+0x38>
    6f94:	00800104 	movi	r2,4
    6f98:	f800283a 	ret
    6f9c:	2000021e 	bne	r4,zero,6fa8 <__fpclassifyd+0x38>
    6fa0:	00800084 	movi	r2,2
    6fa4:	f800283a 	ret
    6fa8:	00dffc34 	movhi	r3,32752
    6fac:	019ff834 	movhi	r6,32736
    6fb0:	28cb883a 	add	r5,r5,r3
    6fb4:	31bfffc4 	addi	r6,r6,-1
    6fb8:	317ff62e 	bgeu	r6,r5,6f94 <__alt_data_end+0xfffd6f94>
    6fbc:	01400434 	movhi	r5,16
    6fc0:	297fffc4 	addi	r5,r5,-1
    6fc4:	28800236 	bltu	r5,r2,6fd0 <__fpclassifyd+0x60>
    6fc8:	008000c4 	movi	r2,3
    6fcc:	f800283a 	ret
    6fd0:	10c00226 	beq	r2,r3,6fdc <__fpclassifyd+0x6c>
    6fd4:	0005883a 	mov	r2,zero
    6fd8:	f800283a 	ret
    6fdc:	2005003a 	cmpeq	r2,r4,zero
    6fe0:	f800283a 	ret

00006fe4 <_sbrk_r>:
    6fe4:	defffd04 	addi	sp,sp,-12
    6fe8:	dc000015 	stw	r16,0(sp)
    6fec:	040000b4 	movhi	r16,2
    6ff0:	dc400115 	stw	r17,4(sp)
    6ff4:	842dbb04 	addi	r16,r16,-18708
    6ff8:	2023883a 	mov	r17,r4
    6ffc:	2809883a 	mov	r4,r5
    7000:	dfc00215 	stw	ra,8(sp)
    7004:	80000015 	stw	zero,0(r16)
    7008:	000dd800 	call	dd80 <sbrk>
    700c:	00ffffc4 	movi	r3,-1
    7010:	10c00526 	beq	r2,r3,7028 <_sbrk_r+0x44>
    7014:	dfc00217 	ldw	ra,8(sp)
    7018:	dc400117 	ldw	r17,4(sp)
    701c:	dc000017 	ldw	r16,0(sp)
    7020:	dec00304 	addi	sp,sp,12
    7024:	f800283a 	ret
    7028:	80c00017 	ldw	r3,0(r16)
    702c:	183ff926 	beq	r3,zero,7014 <__alt_data_end+0xfffd7014>
    7030:	88c00015 	stw	r3,0(r17)
    7034:	003ff706 	br	7014 <__alt_data_end+0xfffd7014>

00007038 <__sread>:
    7038:	defffe04 	addi	sp,sp,-8
    703c:	dc000015 	stw	r16,0(sp)
    7040:	2821883a 	mov	r16,r5
    7044:	2940038f 	ldh	r5,14(r5)
    7048:	dfc00115 	stw	ra,4(sp)
    704c:	00095b00 	call	95b0 <_read_r>
    7050:	10000716 	blt	r2,zero,7070 <__sread+0x38>
    7054:	80c01417 	ldw	r3,80(r16)
    7058:	1887883a 	add	r3,r3,r2
    705c:	80c01415 	stw	r3,80(r16)
    7060:	dfc00117 	ldw	ra,4(sp)
    7064:	dc000017 	ldw	r16,0(sp)
    7068:	dec00204 	addi	sp,sp,8
    706c:	f800283a 	ret
    7070:	80c0030b 	ldhu	r3,12(r16)
    7074:	18fbffcc 	andi	r3,r3,61439
    7078:	80c0030d 	sth	r3,12(r16)
    707c:	dfc00117 	ldw	ra,4(sp)
    7080:	dc000017 	ldw	r16,0(sp)
    7084:	dec00204 	addi	sp,sp,8
    7088:	f800283a 	ret

0000708c <__seofread>:
    708c:	0005883a 	mov	r2,zero
    7090:	f800283a 	ret

00007094 <__swrite>:
    7094:	2880030b 	ldhu	r2,12(r5)
    7098:	defffb04 	addi	sp,sp,-20
    709c:	dcc00315 	stw	r19,12(sp)
    70a0:	dc800215 	stw	r18,8(sp)
    70a4:	dc400115 	stw	r17,4(sp)
    70a8:	dc000015 	stw	r16,0(sp)
    70ac:	dfc00415 	stw	ra,16(sp)
    70b0:	10c0400c 	andi	r3,r2,256
    70b4:	2821883a 	mov	r16,r5
    70b8:	2023883a 	mov	r17,r4
    70bc:	3025883a 	mov	r18,r6
    70c0:	3827883a 	mov	r19,r7
    70c4:	18000526 	beq	r3,zero,70dc <__swrite+0x48>
    70c8:	2940038f 	ldh	r5,14(r5)
    70cc:	01c00084 	movi	r7,2
    70d0:	000d883a 	mov	r6,zero
    70d4:	00093f40 	call	93f4 <_lseek_r>
    70d8:	8080030b 	ldhu	r2,12(r16)
    70dc:	8140038f 	ldh	r5,14(r16)
    70e0:	10bbffcc 	andi	r2,r2,61439
    70e4:	980f883a 	mov	r7,r19
    70e8:	900d883a 	mov	r6,r18
    70ec:	8809883a 	mov	r4,r17
    70f0:	8080030d 	sth	r2,12(r16)
    70f4:	dfc00417 	ldw	ra,16(sp)
    70f8:	dcc00317 	ldw	r19,12(sp)
    70fc:	dc800217 	ldw	r18,8(sp)
    7100:	dc400117 	ldw	r17,4(sp)
    7104:	dc000017 	ldw	r16,0(sp)
    7108:	dec00504 	addi	sp,sp,20
    710c:	00089e01 	jmpi	89e0 <_write_r>

00007110 <__sseek>:
    7110:	defffe04 	addi	sp,sp,-8
    7114:	dc000015 	stw	r16,0(sp)
    7118:	2821883a 	mov	r16,r5
    711c:	2940038f 	ldh	r5,14(r5)
    7120:	dfc00115 	stw	ra,4(sp)
    7124:	00093f40 	call	93f4 <_lseek_r>
    7128:	00ffffc4 	movi	r3,-1
    712c:	10c00826 	beq	r2,r3,7150 <__sseek+0x40>
    7130:	80c0030b 	ldhu	r3,12(r16)
    7134:	80801415 	stw	r2,80(r16)
    7138:	18c40014 	ori	r3,r3,4096
    713c:	80c0030d 	sth	r3,12(r16)
    7140:	dfc00117 	ldw	ra,4(sp)
    7144:	dc000017 	ldw	r16,0(sp)
    7148:	dec00204 	addi	sp,sp,8
    714c:	f800283a 	ret
    7150:	80c0030b 	ldhu	r3,12(r16)
    7154:	18fbffcc 	andi	r3,r3,61439
    7158:	80c0030d 	sth	r3,12(r16)
    715c:	dfc00117 	ldw	ra,4(sp)
    7160:	dc000017 	ldw	r16,0(sp)
    7164:	dec00204 	addi	sp,sp,8
    7168:	f800283a 	ret

0000716c <__sclose>:
    716c:	2940038f 	ldh	r5,14(r5)
    7170:	0008a401 	jmpi	8a40 <_close_r>

00007174 <strcmp>:
    7174:	2144b03a 	or	r2,r4,r5
    7178:	108000cc 	andi	r2,r2,3
    717c:	1000171e 	bne	r2,zero,71dc <strcmp+0x68>
    7180:	20800017 	ldw	r2,0(r4)
    7184:	28c00017 	ldw	r3,0(r5)
    7188:	10c0141e 	bne	r2,r3,71dc <strcmp+0x68>
    718c:	027fbff4 	movhi	r9,65279
    7190:	4a7fbfc4 	addi	r9,r9,-257
    7194:	0086303a 	nor	r3,zero,r2
    7198:	02202074 	movhi	r8,32897
    719c:	1245883a 	add	r2,r2,r9
    71a0:	42202004 	addi	r8,r8,-32640
    71a4:	10c4703a 	and	r2,r2,r3
    71a8:	1204703a 	and	r2,r2,r8
    71ac:	10000226 	beq	r2,zero,71b8 <strcmp+0x44>
    71b0:	00002306 	br	7240 <strcmp+0xcc>
    71b4:	1000221e 	bne	r2,zero,7240 <strcmp+0xcc>
    71b8:	21000104 	addi	r4,r4,4
    71bc:	20c00017 	ldw	r3,0(r4)
    71c0:	29400104 	addi	r5,r5,4
    71c4:	29800017 	ldw	r6,0(r5)
    71c8:	1a4f883a 	add	r7,r3,r9
    71cc:	00c4303a 	nor	r2,zero,r3
    71d0:	3884703a 	and	r2,r7,r2
    71d4:	1204703a 	and	r2,r2,r8
    71d8:	19bff626 	beq	r3,r6,71b4 <__alt_data_end+0xfffd71b4>
    71dc:	20800003 	ldbu	r2,0(r4)
    71e0:	10c03fcc 	andi	r3,r2,255
    71e4:	18c0201c 	xori	r3,r3,128
    71e8:	18ffe004 	addi	r3,r3,-128
    71ec:	18000c26 	beq	r3,zero,7220 <strcmp+0xac>
    71f0:	29800007 	ldb	r6,0(r5)
    71f4:	19800326 	beq	r3,r6,7204 <strcmp+0x90>
    71f8:	00001306 	br	7248 <strcmp+0xd4>
    71fc:	29800007 	ldb	r6,0(r5)
    7200:	11800b1e 	bne	r2,r6,7230 <strcmp+0xbc>
    7204:	21000044 	addi	r4,r4,1
    7208:	20c00003 	ldbu	r3,0(r4)
    720c:	29400044 	addi	r5,r5,1
    7210:	18803fcc 	andi	r2,r3,255
    7214:	1080201c 	xori	r2,r2,128
    7218:	10bfe004 	addi	r2,r2,-128
    721c:	103ff71e 	bne	r2,zero,71fc <__alt_data_end+0xfffd71fc>
    7220:	0007883a 	mov	r3,zero
    7224:	28800003 	ldbu	r2,0(r5)
    7228:	1885c83a 	sub	r2,r3,r2
    722c:	f800283a 	ret
    7230:	28800003 	ldbu	r2,0(r5)
    7234:	18c03fcc 	andi	r3,r3,255
    7238:	1885c83a 	sub	r2,r3,r2
    723c:	f800283a 	ret
    7240:	0005883a 	mov	r2,zero
    7244:	f800283a 	ret
    7248:	10c03fcc 	andi	r3,r2,255
    724c:	003ff506 	br	7224 <__alt_data_end+0xfffd7224>

00007250 <strlen>:
    7250:	208000cc 	andi	r2,r4,3
    7254:	10002026 	beq	r2,zero,72d8 <strlen+0x88>
    7258:	20800007 	ldb	r2,0(r4)
    725c:	10002026 	beq	r2,zero,72e0 <strlen+0x90>
    7260:	2005883a 	mov	r2,r4
    7264:	00000206 	br	7270 <strlen+0x20>
    7268:	10c00007 	ldb	r3,0(r2)
    726c:	18001826 	beq	r3,zero,72d0 <strlen+0x80>
    7270:	10800044 	addi	r2,r2,1
    7274:	10c000cc 	andi	r3,r2,3
    7278:	183ffb1e 	bne	r3,zero,7268 <__alt_data_end+0xfffd7268>
    727c:	10c00017 	ldw	r3,0(r2)
    7280:	01ffbff4 	movhi	r7,65279
    7284:	39ffbfc4 	addi	r7,r7,-257
    7288:	00ca303a 	nor	r5,zero,r3
    728c:	01a02074 	movhi	r6,32897
    7290:	19c7883a 	add	r3,r3,r7
    7294:	31a02004 	addi	r6,r6,-32640
    7298:	1946703a 	and	r3,r3,r5
    729c:	1986703a 	and	r3,r3,r6
    72a0:	1800091e 	bne	r3,zero,72c8 <strlen+0x78>
    72a4:	10800104 	addi	r2,r2,4
    72a8:	10c00017 	ldw	r3,0(r2)
    72ac:	19cb883a 	add	r5,r3,r7
    72b0:	00c6303a 	nor	r3,zero,r3
    72b4:	28c6703a 	and	r3,r5,r3
    72b8:	1986703a 	and	r3,r3,r6
    72bc:	183ff926 	beq	r3,zero,72a4 <__alt_data_end+0xfffd72a4>
    72c0:	00000106 	br	72c8 <strlen+0x78>
    72c4:	10800044 	addi	r2,r2,1
    72c8:	10c00007 	ldb	r3,0(r2)
    72cc:	183ffd1e 	bne	r3,zero,72c4 <__alt_data_end+0xfffd72c4>
    72d0:	1105c83a 	sub	r2,r2,r4
    72d4:	f800283a 	ret
    72d8:	2005883a 	mov	r2,r4
    72dc:	003fe706 	br	727c <__alt_data_end+0xfffd727c>
    72e0:	0005883a 	mov	r2,zero
    72e4:	f800283a 	ret

000072e8 <__sprint_r.part.0>:
    72e8:	28801917 	ldw	r2,100(r5)
    72ec:	defff604 	addi	sp,sp,-40
    72f0:	dd400515 	stw	r21,20(sp)
    72f4:	dfc00915 	stw	ra,36(sp)
    72f8:	df000815 	stw	fp,32(sp)
    72fc:	ddc00715 	stw	r23,28(sp)
    7300:	dd800615 	stw	r22,24(sp)
    7304:	dd000415 	stw	r20,16(sp)
    7308:	dcc00315 	stw	r19,12(sp)
    730c:	dc800215 	stw	r18,8(sp)
    7310:	dc400115 	stw	r17,4(sp)
    7314:	dc000015 	stw	r16,0(sp)
    7318:	1088000c 	andi	r2,r2,8192
    731c:	302b883a 	mov	r21,r6
    7320:	10002e26 	beq	r2,zero,73dc <__sprint_r.part.0+0xf4>
    7324:	30800217 	ldw	r2,8(r6)
    7328:	35800017 	ldw	r22,0(r6)
    732c:	10002926 	beq	r2,zero,73d4 <__sprint_r.part.0+0xec>
    7330:	2827883a 	mov	r19,r5
    7334:	2029883a 	mov	r20,r4
    7338:	b5c00104 	addi	r23,r22,4
    733c:	04bfffc4 	movi	r18,-1
    7340:	bc400017 	ldw	r17,0(r23)
    7344:	b4000017 	ldw	r16,0(r22)
    7348:	0039883a 	mov	fp,zero
    734c:	8822d0ba 	srli	r17,r17,2
    7350:	8800031e 	bne	r17,zero,7360 <__sprint_r.part.0+0x78>
    7354:	00001806 	br	73b8 <__sprint_r.part.0+0xd0>
    7358:	84000104 	addi	r16,r16,4
    735c:	8f001526 	beq	r17,fp,73b4 <__sprint_r.part.0+0xcc>
    7360:	81400017 	ldw	r5,0(r16)
    7364:	980d883a 	mov	r6,r19
    7368:	a009883a 	mov	r4,r20
    736c:	0008dd80 	call	8dd8 <_fputwc_r>
    7370:	e7000044 	addi	fp,fp,1
    7374:	14bff81e 	bne	r2,r18,7358 <__alt_data_end+0xfffd7358>
    7378:	9005883a 	mov	r2,r18
    737c:	a8000215 	stw	zero,8(r21)
    7380:	a8000115 	stw	zero,4(r21)
    7384:	dfc00917 	ldw	ra,36(sp)
    7388:	df000817 	ldw	fp,32(sp)
    738c:	ddc00717 	ldw	r23,28(sp)
    7390:	dd800617 	ldw	r22,24(sp)
    7394:	dd400517 	ldw	r21,20(sp)
    7398:	dd000417 	ldw	r20,16(sp)
    739c:	dcc00317 	ldw	r19,12(sp)
    73a0:	dc800217 	ldw	r18,8(sp)
    73a4:	dc400117 	ldw	r17,4(sp)
    73a8:	dc000017 	ldw	r16,0(sp)
    73ac:	dec00a04 	addi	sp,sp,40
    73b0:	f800283a 	ret
    73b4:	a8800217 	ldw	r2,8(r21)
    73b8:	8c63883a 	add	r17,r17,r17
    73bc:	8c63883a 	add	r17,r17,r17
    73c0:	1445c83a 	sub	r2,r2,r17
    73c4:	a8800215 	stw	r2,8(r21)
    73c8:	b5800204 	addi	r22,r22,8
    73cc:	bdc00204 	addi	r23,r23,8
    73d0:	103fdb1e 	bne	r2,zero,7340 <__alt_data_end+0xfffd7340>
    73d4:	0005883a 	mov	r2,zero
    73d8:	003fe806 	br	737c <__alt_data_end+0xfffd737c>
    73dc:	0008ed80 	call	8ed8 <__sfvwrite_r>
    73e0:	003fe606 	br	737c <__alt_data_end+0xfffd737c>

000073e4 <__sprint_r>:
    73e4:	30c00217 	ldw	r3,8(r6)
    73e8:	18000126 	beq	r3,zero,73f0 <__sprint_r+0xc>
    73ec:	00072e81 	jmpi	72e8 <__sprint_r.part.0>
    73f0:	30000115 	stw	zero,4(r6)
    73f4:	0005883a 	mov	r2,zero
    73f8:	f800283a 	ret

000073fc <___vfiprintf_internal_r>:
    73fc:	deffca04 	addi	sp,sp,-216
    7400:	dd403115 	stw	r21,196(sp)
    7404:	dfc03515 	stw	ra,212(sp)
    7408:	df003415 	stw	fp,208(sp)
    740c:	ddc03315 	stw	r23,204(sp)
    7410:	dd803215 	stw	r22,200(sp)
    7414:	dd003015 	stw	r20,192(sp)
    7418:	dcc02f15 	stw	r19,188(sp)
    741c:	dc802e15 	stw	r18,184(sp)
    7420:	dc402d15 	stw	r17,180(sp)
    7424:	dc002c15 	stw	r16,176(sp)
    7428:	d9002115 	stw	r4,132(sp)
    742c:	d9402015 	stw	r5,128(sp)
    7430:	d9c02215 	stw	r7,136(sp)
    7434:	302b883a 	mov	r21,r6
    7438:	20000226 	beq	r4,zero,7444 <___vfiprintf_internal_r+0x48>
    743c:	20800e17 	ldw	r2,56(r4)
    7440:	1000cf26 	beq	r2,zero,7780 <___vfiprintf_internal_r+0x384>
    7444:	d8c02017 	ldw	r3,128(sp)
    7448:	1880030b 	ldhu	r2,12(r3)
    744c:	10c8000c 	andi	r3,r2,8192
    7450:	1800071e 	bne	r3,zero,7470 <___vfiprintf_internal_r+0x74>
    7454:	d9402017 	ldw	r5,128(sp)
    7458:	00f7ffc4 	movi	r3,-8193
    745c:	10880014 	ori	r2,r2,8192
    7460:	29001917 	ldw	r4,100(r5)
    7464:	2880030d 	sth	r2,12(r5)
    7468:	20c6703a 	and	r3,r4,r3
    746c:	28c01915 	stw	r3,100(r5)
    7470:	10c0020c 	andi	r3,r2,8
    7474:	1800a526 	beq	r3,zero,770c <___vfiprintf_internal_r+0x310>
    7478:	d9002017 	ldw	r4,128(sp)
    747c:	20c00417 	ldw	r3,16(r4)
    7480:	1800a226 	beq	r3,zero,770c <___vfiprintf_internal_r+0x310>
    7484:	1080068c 	andi	r2,r2,26
    7488:	00c00284 	movi	r3,10
    748c:	10c0a826 	beq	r2,r3,7730 <___vfiprintf_internal_r+0x334>
    7490:	d9001a04 	addi	r4,sp,104
    7494:	d94019c4 	addi	r5,sp,103
    7498:	04800074 	movhi	r18,1
    749c:	2145c83a 	sub	r2,r4,r5
    74a0:	949f5d04 	addi	r18,r18,32116
    74a4:	d9001e15 	stw	r4,120(sp)
    74a8:	d9401f15 	stw	r5,124(sp)
    74ac:	dec01a15 	stw	sp,104(sp)
    74b0:	d8001c15 	stw	zero,112(sp)
    74b4:	d8001b15 	stw	zero,108(sp)
    74b8:	d811883a 	mov	r8,sp
    74bc:	d8002615 	stw	zero,152(sp)
    74c0:	d8002415 	stw	zero,144(sp)
    74c4:	d8802815 	stw	r2,160(sp)
    74c8:	a82d883a 	mov	r22,r21
    74cc:	b0800007 	ldb	r2,0(r22)
    74d0:	10040d26 	beq	r2,zero,8508 <___vfiprintf_internal_r+0x110c>
    74d4:	00c00944 	movi	r3,37
    74d8:	b029883a 	mov	r20,r22
    74dc:	10c0021e 	bne	r2,r3,74e8 <___vfiprintf_internal_r+0xec>
    74e0:	00001606 	br	753c <___vfiprintf_internal_r+0x140>
    74e4:	10c00326 	beq	r2,r3,74f4 <___vfiprintf_internal_r+0xf8>
    74e8:	a5000044 	addi	r20,r20,1
    74ec:	a0800007 	ldb	r2,0(r20)
    74f0:	103ffc1e 	bne	r2,zero,74e4 <__alt_data_end+0xfffd74e4>
    74f4:	a5a1c83a 	sub	r16,r20,r22
    74f8:	80001026 	beq	r16,zero,753c <___vfiprintf_internal_r+0x140>
    74fc:	d8c01c17 	ldw	r3,112(sp)
    7500:	d8801b17 	ldw	r2,108(sp)
    7504:	45800015 	stw	r22,0(r8)
    7508:	80c7883a 	add	r3,r16,r3
    750c:	10800044 	addi	r2,r2,1
    7510:	44000115 	stw	r16,4(r8)
    7514:	d8c01c15 	stw	r3,112(sp)
    7518:	d8801b15 	stw	r2,108(sp)
    751c:	010001c4 	movi	r4,7
    7520:	2080750e 	bge	r4,r2,76f8 <___vfiprintf_internal_r+0x2fc>
    7524:	1803951e 	bne	r3,zero,837c <___vfiprintf_internal_r+0xf80>
    7528:	d8c02417 	ldw	r3,144(sp)
    752c:	d8001b15 	stw	zero,108(sp)
    7530:	d811883a 	mov	r8,sp
    7534:	1c07883a 	add	r3,r3,r16
    7538:	d8c02415 	stw	r3,144(sp)
    753c:	a0800007 	ldb	r2,0(r20)
    7540:	1002e026 	beq	r2,zero,80c4 <___vfiprintf_internal_r+0xcc8>
    7544:	a5800044 	addi	r22,r20,1
    7548:	a0c00047 	ldb	r3,1(r20)
    754c:	d8001d85 	stb	zero,118(sp)
    7550:	0027883a 	mov	r19,zero
    7554:	d8002305 	stb	zero,140(sp)
    7558:	043fffc4 	movi	r16,-1
    755c:	d8002515 	stw	zero,148(sp)
    7560:	0023883a 	mov	r17,zero
    7564:	05001604 	movi	r20,88
    7568:	05400244 	movi	r21,9
    756c:	402f883a 	mov	r23,r8
    7570:	b5800044 	addi	r22,r22,1
    7574:	18bff804 	addi	r2,r3,-32
    7578:	a0827736 	bltu	r20,r2,7f58 <___vfiprintf_internal_r+0xb5c>
    757c:	100490ba 	slli	r2,r2,2
    7580:	01000034 	movhi	r4,0
    7584:	211d6504 	addi	r4,r4,30100
    7588:	1105883a 	add	r2,r2,r4
    758c:	10800017 	ldw	r2,0(r2)
    7590:	1000683a 	jmp	r2
    7594:	00007c58 	cmpnei	zero,zero,497
    7598:	00007f58 	cmpnei	zero,zero,509
    759c:	00007f58 	cmpnei	zero,zero,509
    75a0:	00007c74 	movhi	zero,497
    75a4:	00007f58 	cmpnei	zero,zero,509
    75a8:	00007f58 	cmpnei	zero,zero,509
    75ac:	00007f58 	cmpnei	zero,zero,509
    75b0:	00007f58 	cmpnei	zero,zero,509
    75b4:	00007f58 	cmpnei	zero,zero,509
    75b8:	00007f58 	cmpnei	zero,zero,509
    75bc:	00007e7c 	xorhi	zero,zero,505
    75c0:	00007ea0 	cmpeqi	zero,zero,506
    75c4:	00007f58 	cmpnei	zero,zero,509
    75c8:	00007798 	cmpnei	zero,zero,478
    75cc:	00007eb4 	movhi	zero,506
    75d0:	00007f58 	cmpnei	zero,zero,509
    75d4:	00007c80 	call	7c8 <___vfprintf_internal_r+0xd4>
    75d8:	00007c8c 	andi	zero,zero,498
    75dc:	00007c8c 	andi	zero,zero,498
    75e0:	00007c8c 	andi	zero,zero,498
    75e4:	00007c8c 	andi	zero,zero,498
    75e8:	00007c8c 	andi	zero,zero,498
    75ec:	00007c8c 	andi	zero,zero,498
    75f0:	00007c8c 	andi	zero,zero,498
    75f4:	00007c8c 	andi	zero,zero,498
    75f8:	00007c8c 	andi	zero,zero,498
    75fc:	00007f58 	cmpnei	zero,zero,509
    7600:	00007f58 	cmpnei	zero,zero,509
    7604:	00007f58 	cmpnei	zero,zero,509
    7608:	00007f58 	cmpnei	zero,zero,509
    760c:	00007f58 	cmpnei	zero,zero,509
    7610:	00007f58 	cmpnei	zero,zero,509
    7614:	00007f58 	cmpnei	zero,zero,509
    7618:	00007f58 	cmpnei	zero,zero,509
    761c:	00007f58 	cmpnei	zero,zero,509
    7620:	00007f58 	cmpnei	zero,zero,509
    7624:	00007ccc 	andi	zero,zero,499
    7628:	00007f58 	cmpnei	zero,zero,509
    762c:	00007f58 	cmpnei	zero,zero,509
    7630:	00007f58 	cmpnei	zero,zero,509
    7634:	00007f58 	cmpnei	zero,zero,509
    7638:	00007f58 	cmpnei	zero,zero,509
    763c:	00007f58 	cmpnei	zero,zero,509
    7640:	00007f58 	cmpnei	zero,zero,509
    7644:	00007f58 	cmpnei	zero,zero,509
    7648:	00007f58 	cmpnei	zero,zero,509
    764c:	00007f58 	cmpnei	zero,zero,509
    7650:	00007d08 	cmpgei	zero,zero,500
    7654:	00007f58 	cmpnei	zero,zero,509
    7658:	00007f58 	cmpnei	zero,zero,509
    765c:	00007f58 	cmpnei	zero,zero,509
    7660:	00007f58 	cmpnei	zero,zero,509
    7664:	00007f58 	cmpnei	zero,zero,509
    7668:	00007d64 	muli	zero,zero,501
    766c:	00007f58 	cmpnei	zero,zero,509
    7670:	00007f58 	cmpnei	zero,zero,509
    7674:	00007dd8 	cmpnei	zero,zero,503
    7678:	00007f58 	cmpnei	zero,zero,509
    767c:	00007f58 	cmpnei	zero,zero,509
    7680:	00007f58 	cmpnei	zero,zero,509
    7684:	00007f58 	cmpnei	zero,zero,509
    7688:	00007f58 	cmpnei	zero,zero,509
    768c:	00007f58 	cmpnei	zero,zero,509
    7690:	00007f58 	cmpnei	zero,zero,509
    7694:	00007f58 	cmpnei	zero,zero,509
    7698:	00007f58 	cmpnei	zero,zero,509
    769c:	00007f58 	cmpnei	zero,zero,509
    76a0:	00007b80 	call	7b8 <___vfprintf_internal_r+0xc4>
    76a4:	00007bb0 	cmpltui	zero,zero,494
    76a8:	00007f58 	cmpnei	zero,zero,509
    76ac:	00007f58 	cmpnei	zero,zero,509
    76b0:	00007f58 	cmpnei	zero,zero,509
    76b4:	00007f00 	call	7f0 <___vfprintf_internal_r+0xfc>
    76b8:	00007bb0 	cmpltui	zero,zero,494
    76bc:	00007f58 	cmpnei	zero,zero,509
    76c0:	00007f58 	cmpnei	zero,zero,509
    76c4:	00007a58 	cmpnei	zero,zero,489
    76c8:	00007f58 	cmpnei	zero,zero,509
    76cc:	00007a6c 	andhi	zero,zero,489
    76d0:	00007aa4 	muli	zero,zero,490
    76d4:	000077a4 	muli	zero,zero,478
    76d8:	00007a4c 	andi	zero,zero,489
    76dc:	00007f58 	cmpnei	zero,zero,509
    76e0:	00007e18 	cmpnei	zero,zero,504
    76e4:	00007f58 	cmpnei	zero,zero,509
    76e8:	00007e64 	muli	zero,zero,505
    76ec:	00007f58 	cmpnei	zero,zero,509
    76f0:	00007f58 	cmpnei	zero,zero,509
    76f4:	00007b28 	cmpgeui	zero,zero,492
    76f8:	42000204 	addi	r8,r8,8
    76fc:	d8c02417 	ldw	r3,144(sp)
    7700:	1c07883a 	add	r3,r3,r16
    7704:	d8c02415 	stw	r3,144(sp)
    7708:	003f8c06 	br	753c <__alt_data_end+0xfffd753c>
    770c:	d9402017 	ldw	r5,128(sp)
    7710:	d9002117 	ldw	r4,132(sp)
    7714:	0002aa80 	call	2aa8 <__swsetup_r>
    7718:	1003c11e 	bne	r2,zero,8620 <___vfiprintf_internal_r+0x1224>
    771c:	d9402017 	ldw	r5,128(sp)
    7720:	00c00284 	movi	r3,10
    7724:	2880030b 	ldhu	r2,12(r5)
    7728:	1080068c 	andi	r2,r2,26
    772c:	10ff581e 	bne	r2,r3,7490 <__alt_data_end+0xfffd7490>
    7730:	d8c02017 	ldw	r3,128(sp)
    7734:	1880038f 	ldh	r2,14(r3)
    7738:	103f5516 	blt	r2,zero,7490 <__alt_data_end+0xfffd7490>
    773c:	d9c02217 	ldw	r7,136(sp)
    7740:	d9002117 	ldw	r4,132(sp)
    7744:	a80d883a 	mov	r6,r21
    7748:	180b883a 	mov	r5,r3
    774c:	00089240 	call	8924 <__sbprintf>
    7750:	dfc03517 	ldw	ra,212(sp)
    7754:	df003417 	ldw	fp,208(sp)
    7758:	ddc03317 	ldw	r23,204(sp)
    775c:	dd803217 	ldw	r22,200(sp)
    7760:	dd403117 	ldw	r21,196(sp)
    7764:	dd003017 	ldw	r20,192(sp)
    7768:	dcc02f17 	ldw	r19,188(sp)
    776c:	dc802e17 	ldw	r18,184(sp)
    7770:	dc402d17 	ldw	r17,180(sp)
    7774:	dc002c17 	ldw	r16,176(sp)
    7778:	dec03604 	addi	sp,sp,216
    777c:	f800283a 	ret
    7780:	0004ab40 	call	4ab4 <__sinit>
    7784:	003f2f06 	br	7444 <__alt_data_end+0xfffd7444>
    7788:	d8c02517 	ldw	r3,148(sp)
    778c:	d8802215 	stw	r2,136(sp)
    7790:	00c7c83a 	sub	r3,zero,r3
    7794:	d8c02515 	stw	r3,148(sp)
    7798:	8c400114 	ori	r17,r17,4
    779c:	b0c00007 	ldb	r3,0(r22)
    77a0:	003f7306 	br	7570 <__alt_data_end+0xfffd7570>
    77a4:	00800c04 	movi	r2,48
    77a8:	d9402217 	ldw	r5,136(sp)
    77ac:	d8801d05 	stb	r2,116(sp)
    77b0:	00801e04 	movi	r2,120
    77b4:	d8801d45 	stb	r2,117(sp)
    77b8:	d8001d85 	stb	zero,118(sp)
    77bc:	b811883a 	mov	r8,r23
    77c0:	28c00104 	addi	r3,r5,4
    77c4:	2cc00017 	ldw	r19,0(r5)
    77c8:	0029883a 	mov	r20,zero
    77cc:	88800094 	ori	r2,r17,2
    77d0:	80032516 	blt	r16,zero,8468 <___vfiprintf_internal_r+0x106c>
    77d4:	00bfdfc4 	movi	r2,-129
    77d8:	88a2703a 	and	r17,r17,r2
    77dc:	d8c02215 	stw	r3,136(sp)
    77e0:	8c400094 	ori	r17,r17,2
    77e4:	98032a1e 	bne	r19,zero,8490 <___vfiprintf_internal_r+0x1094>
    77e8:	00800074 	movhi	r2,1
    77ec:	109efc04 	addi	r2,r2,31728
    77f0:	d8802615 	stw	r2,152(sp)
    77f4:	002b883a 	mov	r21,zero
    77f8:	8001741e 	bne	r16,zero,7dcc <___vfiprintf_internal_r+0x9d0>
    77fc:	0021883a 	mov	r16,zero
    7800:	0029883a 	mov	r20,zero
    7804:	ddc01a04 	addi	r23,sp,104
    7808:	8027883a 	mov	r19,r16
    780c:	8500010e 	bge	r16,r20,7814 <___vfiprintf_internal_r+0x418>
    7810:	a027883a 	mov	r19,r20
    7814:	ad403fcc 	andi	r21,r21,255
    7818:	ad40201c 	xori	r21,r21,128
    781c:	ad7fe004 	addi	r21,r21,-128
    7820:	a8000126 	beq	r21,zero,7828 <___vfiprintf_internal_r+0x42c>
    7824:	9cc00044 	addi	r19,r19,1
    7828:	89c0008c 	andi	r7,r17,2
    782c:	38000126 	beq	r7,zero,7834 <___vfiprintf_internal_r+0x438>
    7830:	9cc00084 	addi	r19,r19,2
    7834:	88c0210c 	andi	r3,r17,132
    7838:	1801dd1e 	bne	r3,zero,7fb0 <___vfiprintf_internal_r+0xbb4>
    783c:	d9402517 	ldw	r5,148(sp)
    7840:	2cebc83a 	sub	r21,r5,r19
    7844:	0541da0e 	bge	zero,r21,7fb0 <___vfiprintf_internal_r+0xbb4>
    7848:	07000404 	movi	fp,16
    784c:	d8801c17 	ldw	r2,112(sp)
    7850:	e543be0e 	bge	fp,r21,874c <___vfiprintf_internal_r+0x1350>
    7854:	01400074 	movhi	r5,1
    7858:	295f6104 	addi	r5,r5,32132
    785c:	dc002715 	stw	r16,156(sp)
    7860:	d9801b17 	ldw	r6,108(sp)
    7864:	a821883a 	mov	r16,r21
    7868:	d9402315 	stw	r5,140(sp)
    786c:	028001c4 	movi	r10,7
    7870:	d9c02915 	stw	r7,164(sp)
    7874:	182b883a 	mov	r21,r3
    7878:	00000506 	br	7890 <___vfiprintf_internal_r+0x494>
    787c:	31000084 	addi	r4,r6,2
    7880:	42000204 	addi	r8,r8,8
    7884:	180d883a 	mov	r6,r3
    7888:	843ffc04 	addi	r16,r16,-16
    788c:	e4000f0e 	bge	fp,r16,78cc <___vfiprintf_internal_r+0x4d0>
    7890:	01000074 	movhi	r4,1
    7894:	10800404 	addi	r2,r2,16
    7898:	30c00044 	addi	r3,r6,1
    789c:	211f6104 	addi	r4,r4,32132
    78a0:	41000015 	stw	r4,0(r8)
    78a4:	47000115 	stw	fp,4(r8)
    78a8:	d8801c15 	stw	r2,112(sp)
    78ac:	d8c01b15 	stw	r3,108(sp)
    78b0:	50fff20e 	bge	r10,r3,787c <__alt_data_end+0xfffd787c>
    78b4:	1001b21e 	bne	r2,zero,7f80 <___vfiprintf_internal_r+0xb84>
    78b8:	843ffc04 	addi	r16,r16,-16
    78bc:	000d883a 	mov	r6,zero
    78c0:	01000044 	movi	r4,1
    78c4:	d811883a 	mov	r8,sp
    78c8:	e43ff116 	blt	fp,r16,7890 <__alt_data_end+0xfffd7890>
    78cc:	a807883a 	mov	r3,r21
    78d0:	d9c02917 	ldw	r7,164(sp)
    78d4:	802b883a 	mov	r21,r16
    78d8:	dc002717 	ldw	r16,156(sp)
    78dc:	d9402317 	ldw	r5,140(sp)
    78e0:	a885883a 	add	r2,r21,r2
    78e4:	45400115 	stw	r21,4(r8)
    78e8:	41400015 	stw	r5,0(r8)
    78ec:	d8801c15 	stw	r2,112(sp)
    78f0:	d9001b15 	stw	r4,108(sp)
    78f4:	014001c4 	movi	r5,7
    78f8:	29026216 	blt	r5,r4,8284 <___vfiprintf_internal_r+0xe88>
    78fc:	d9801d87 	ldb	r6,118(sp)
    7900:	42000204 	addi	r8,r8,8
    7904:	21400044 	addi	r5,r4,1
    7908:	3001ae1e 	bne	r6,zero,7fc4 <___vfiprintf_internal_r+0xbc8>
    790c:	3801bb26 	beq	r7,zero,7ffc <___vfiprintf_internal_r+0xc00>
    7910:	d9001d04 	addi	r4,sp,116
    7914:	10800084 	addi	r2,r2,2
    7918:	41000015 	stw	r4,0(r8)
    791c:	01000084 	movi	r4,2
    7920:	41000115 	stw	r4,4(r8)
    7924:	d8801c15 	stw	r2,112(sp)
    7928:	d9401b15 	stw	r5,108(sp)
    792c:	010001c4 	movi	r4,7
    7930:	2142680e 	bge	r4,r5,82d4 <___vfiprintf_internal_r+0xed8>
    7934:	1002b11e 	bne	r2,zero,83fc <___vfiprintf_internal_r+0x1000>
    7938:	01802004 	movi	r6,128
    793c:	01400044 	movi	r5,1
    7940:	0009883a 	mov	r4,zero
    7944:	d811883a 	mov	r8,sp
    7948:	1981ae1e 	bne	r3,r6,8004 <___vfiprintf_internal_r+0xc08>
    794c:	d8c02517 	ldw	r3,148(sp)
    7950:	1cf9c83a 	sub	fp,r3,r19
    7954:	0701ab0e 	bge	zero,fp,8004 <___vfiprintf_internal_r+0xc08>
    7958:	05400404 	movi	r21,16
    795c:	af03a90e 	bge	r21,fp,8804 <___vfiprintf_internal_r+0x1408>
    7960:	01400074 	movhi	r5,1
    7964:	295f5d04 	addi	r5,r5,32116
    7968:	d9402315 	stw	r5,140(sp)
    796c:	01c001c4 	movi	r7,7
    7970:	00000506 	br	7988 <___vfiprintf_internal_r+0x58c>
    7974:	21800084 	addi	r6,r4,2
    7978:	42000204 	addi	r8,r8,8
    797c:	1809883a 	mov	r4,r3
    7980:	e73ffc04 	addi	fp,fp,-16
    7984:	af000d0e 	bge	r21,fp,79bc <___vfiprintf_internal_r+0x5c0>
    7988:	10800404 	addi	r2,r2,16
    798c:	20c00044 	addi	r3,r4,1
    7990:	44800015 	stw	r18,0(r8)
    7994:	45400115 	stw	r21,4(r8)
    7998:	d8801c15 	stw	r2,112(sp)
    799c:	d8c01b15 	stw	r3,108(sp)
    79a0:	38fff40e 	bge	r7,r3,7974 <__alt_data_end+0xfffd7974>
    79a4:	10022b1e 	bne	r2,zero,8254 <___vfiprintf_internal_r+0xe58>
    79a8:	e73ffc04 	addi	fp,fp,-16
    79ac:	01800044 	movi	r6,1
    79b0:	0009883a 	mov	r4,zero
    79b4:	d811883a 	mov	r8,sp
    79b8:	af3ff316 	blt	r21,fp,7988 <__alt_data_end+0xfffd7988>
    79bc:	d8c02317 	ldw	r3,140(sp)
    79c0:	1705883a 	add	r2,r2,fp
    79c4:	47000115 	stw	fp,4(r8)
    79c8:	40c00015 	stw	r3,0(r8)
    79cc:	d8801c15 	stw	r2,112(sp)
    79d0:	d9801b15 	stw	r6,108(sp)
    79d4:	00c001c4 	movi	r3,7
    79d8:	19829416 	blt	r3,r6,842c <___vfiprintf_internal_r+0x1030>
    79dc:	8521c83a 	sub	r16,r16,r20
    79e0:	42000204 	addi	r8,r8,8
    79e4:	31400044 	addi	r5,r6,1
    79e8:	3009883a 	mov	r4,r6
    79ec:	04018716 	blt	zero,r16,800c <___vfiprintf_internal_r+0xc10>
    79f0:	a085883a 	add	r2,r20,r2
    79f4:	45c00015 	stw	r23,0(r8)
    79f8:	45000115 	stw	r20,4(r8)
    79fc:	d8801c15 	stw	r2,112(sp)
    7a00:	d9401b15 	stw	r5,108(sp)
    7a04:	00c001c4 	movi	r3,7
    7a08:	1941c20e 	bge	r3,r5,8114 <___vfiprintf_internal_r+0xd18>
    7a0c:	1002531e 	bne	r2,zero,835c <___vfiprintf_internal_r+0xf60>
    7a10:	d8001b15 	stw	zero,108(sp)
    7a14:	8c40010c 	andi	r17,r17,4
    7a18:	88023226 	beq	r17,zero,82e4 <___vfiprintf_internal_r+0xee8>
    7a1c:	d9002517 	ldw	r4,148(sp)
    7a20:	24e3c83a 	sub	r17,r4,r19
    7a24:	04432916 	blt	zero,r17,86cc <___vfiprintf_internal_r+0x12d0>
    7a28:	d8802517 	ldw	r2,148(sp)
    7a2c:	14c0010e 	bge	r2,r19,7a34 <___vfiprintf_internal_r+0x638>
    7a30:	9805883a 	mov	r2,r19
    7a34:	d8c02417 	ldw	r3,144(sp)
    7a38:	1887883a 	add	r3,r3,r2
    7a3c:	d8c02415 	stw	r3,144(sp)
    7a40:	d8001b15 	stw	zero,108(sp)
    7a44:	d811883a 	mov	r8,sp
    7a48:	003ea006 	br	74cc <__alt_data_end+0xfffd74cc>
    7a4c:	8c400814 	ori	r17,r17,32
    7a50:	b0c00007 	ldb	r3,0(r22)
    7a54:	003ec606 	br	7570 <__alt_data_end+0xfffd7570>
    7a58:	b0c00007 	ldb	r3,0(r22)
    7a5c:	00801b04 	movi	r2,108
    7a60:	18832026 	beq	r3,r2,86e4 <___vfiprintf_internal_r+0x12e8>
    7a64:	8c400414 	ori	r17,r17,16
    7a68:	003ec106 	br	7570 <__alt_data_end+0xfffd7570>
    7a6c:	9cc03fcc 	andi	r19,r19,255
    7a70:	b811883a 	mov	r8,r23
    7a74:	9803981e 	bne	r19,zero,88d8 <___vfiprintf_internal_r+0x14dc>
    7a78:	8880080c 	andi	r2,r17,32
    7a7c:	1002be26 	beq	r2,zero,8578 <___vfiprintf_internal_r+0x117c>
    7a80:	d9002217 	ldw	r4,136(sp)
    7a84:	d9402417 	ldw	r5,144(sp)
    7a88:	20800017 	ldw	r2,0(r4)
    7a8c:	2807d7fa 	srai	r3,r5,31
    7a90:	21000104 	addi	r4,r4,4
    7a94:	d9002215 	stw	r4,136(sp)
    7a98:	11400015 	stw	r5,0(r2)
    7a9c:	10c00115 	stw	r3,4(r2)
    7aa0:	003e8a06 	br	74cc <__alt_data_end+0xfffd74cc>
    7aa4:	9cc03fcc 	andi	r19,r19,255
    7aa8:	b811883a 	mov	r8,r23
    7aac:	9803871e 	bne	r19,zero,88cc <___vfiprintf_internal_r+0x14d0>
    7ab0:	8880080c 	andi	r2,r17,32
    7ab4:	10009a26 	beq	r2,zero,7d20 <___vfiprintf_internal_r+0x924>
    7ab8:	d9002217 	ldw	r4,136(sp)
    7abc:	d8001d85 	stb	zero,118(sp)
    7ac0:	20800204 	addi	r2,r4,8
    7ac4:	24c00017 	ldw	r19,0(r4)
    7ac8:	25000117 	ldw	r20,4(r4)
    7acc:	8002a416 	blt	r16,zero,8560 <___vfiprintf_internal_r+0x1164>
    7ad0:	013fdfc4 	movi	r4,-129
    7ad4:	9d06b03a 	or	r3,r19,r20
    7ad8:	d8802215 	stw	r2,136(sp)
    7adc:	8922703a 	and	r17,r17,r4
    7ae0:	18009b26 	beq	r3,zero,7d50 <___vfiprintf_internal_r+0x954>
    7ae4:	002b883a 	mov	r21,zero
    7ae8:	ddc01a04 	addi	r23,sp,104
    7aec:	9806d0fa 	srli	r3,r19,3
    7af0:	a008977a 	slli	r4,r20,29
    7af4:	a028d0fa 	srli	r20,r20,3
    7af8:	9cc001cc 	andi	r19,r19,7
    7afc:	98800c04 	addi	r2,r19,48
    7b00:	bdffffc4 	addi	r23,r23,-1
    7b04:	20e6b03a 	or	r19,r4,r3
    7b08:	b8800005 	stb	r2,0(r23)
    7b0c:	9d06b03a 	or	r3,r19,r20
    7b10:	183ff61e 	bne	r3,zero,7aec <__alt_data_end+0xfffd7aec>
    7b14:	88c0004c 	andi	r3,r17,1
    7b18:	18021f1e 	bne	r3,zero,8398 <___vfiprintf_internal_r+0xf9c>
    7b1c:	d9401e17 	ldw	r5,120(sp)
    7b20:	2de9c83a 	sub	r20,r5,r23
    7b24:	003f3806 	br	7808 <__alt_data_end+0xfffd7808>
    7b28:	9cc03fcc 	andi	r19,r19,255
    7b2c:	b811883a 	mov	r8,r23
    7b30:	98034f1e 	bne	r19,zero,8870 <___vfiprintf_internal_r+0x1474>
    7b34:	00800074 	movhi	r2,1
    7b38:	109efc04 	addi	r2,r2,31728
    7b3c:	d8802615 	stw	r2,152(sp)
    7b40:	8880080c 	andi	r2,r17,32
    7b44:	1000ac26 	beq	r2,zero,7df8 <___vfiprintf_internal_r+0x9fc>
    7b48:	d9002217 	ldw	r4,136(sp)
    7b4c:	24c00017 	ldw	r19,0(r4)
    7b50:	25000117 	ldw	r20,4(r4)
    7b54:	21000204 	addi	r4,r4,8
    7b58:	d9002215 	stw	r4,136(sp)
    7b5c:	8880004c 	andi	r2,r17,1
    7b60:	1001e726 	beq	r2,zero,8300 <___vfiprintf_internal_r+0xf04>
    7b64:	9d04b03a 	or	r2,r19,r20
    7b68:	10025c1e 	bne	r2,zero,84dc <___vfiprintf_internal_r+0x10e0>
    7b6c:	d8001d85 	stb	zero,118(sp)
    7b70:	80024416 	blt	r16,zero,8484 <___vfiprintf_internal_r+0x1088>
    7b74:	00bfdfc4 	movi	r2,-129
    7b78:	88a2703a 	and	r17,r17,r2
    7b7c:	003f1d06 	br	77f4 <__alt_data_end+0xfffd77f4>
    7b80:	d8c02217 	ldw	r3,136(sp)
    7b84:	04c00044 	movi	r19,1
    7b88:	b811883a 	mov	r8,r23
    7b8c:	18800017 	ldw	r2,0(r3)
    7b90:	18c00104 	addi	r3,r3,4
    7b94:	d8001d85 	stb	zero,118(sp)
    7b98:	d8801005 	stb	r2,64(sp)
    7b9c:	d8c02215 	stw	r3,136(sp)
    7ba0:	9829883a 	mov	r20,r19
    7ba4:	ddc01004 	addi	r23,sp,64
    7ba8:	0021883a 	mov	r16,zero
    7bac:	003f1e06 	br	7828 <__alt_data_end+0xfffd7828>
    7bb0:	9cc03fcc 	andi	r19,r19,255
    7bb4:	b811883a 	mov	r8,r23
    7bb8:	9803331e 	bne	r19,zero,8888 <___vfiprintf_internal_r+0x148c>
    7bbc:	8880080c 	andi	r2,r17,32
    7bc0:	10004826 	beq	r2,zero,7ce4 <___vfiprintf_internal_r+0x8e8>
    7bc4:	d9002217 	ldw	r4,136(sp)
    7bc8:	20800117 	ldw	r2,4(r4)
    7bcc:	24c00017 	ldw	r19,0(r4)
    7bd0:	21000204 	addi	r4,r4,8
    7bd4:	d9002215 	stw	r4,136(sp)
    7bd8:	1029883a 	mov	r20,r2
    7bdc:	10024c16 	blt	r2,zero,8510 <___vfiprintf_internal_r+0x1114>
    7be0:	dd401d83 	ldbu	r21,118(sp)
    7be4:	80007116 	blt	r16,zero,7dac <___vfiprintf_internal_r+0x9b0>
    7be8:	00ffdfc4 	movi	r3,-129
    7bec:	9d04b03a 	or	r2,r19,r20
    7bf0:	88e2703a 	and	r17,r17,r3
    7bf4:	1000d126 	beq	r2,zero,7f3c <___vfiprintf_internal_r+0xb40>
    7bf8:	a0023526 	beq	r20,zero,84d0 <___vfiprintf_internal_r+0x10d4>
    7bfc:	ddc01a04 	addi	r23,sp,104
    7c00:	4039883a 	mov	fp,r8
    7c04:	9809883a 	mov	r4,r19
    7c08:	a00b883a 	mov	r5,r20
    7c0c:	01800284 	movi	r6,10
    7c10:	000f883a 	mov	r7,zero
    7c14:	000a4b00 	call	a4b0 <__umoddi3>
    7c18:	10800c04 	addi	r2,r2,48
    7c1c:	bdffffc4 	addi	r23,r23,-1
    7c20:	9809883a 	mov	r4,r19
    7c24:	a00b883a 	mov	r5,r20
    7c28:	b8800005 	stb	r2,0(r23)
    7c2c:	01800284 	movi	r6,10
    7c30:	000f883a 	mov	r7,zero
    7c34:	0009eb40 	call	9eb4 <__udivdi3>
    7c38:	1027883a 	mov	r19,r2
    7c3c:	10c4b03a 	or	r2,r2,r3
    7c40:	1829883a 	mov	r20,r3
    7c44:	103fef1e 	bne	r2,zero,7c04 <__alt_data_end+0xfffd7c04>
    7c48:	d9001e17 	ldw	r4,120(sp)
    7c4c:	e011883a 	mov	r8,fp
    7c50:	25e9c83a 	sub	r20,r4,r23
    7c54:	003eec06 	br	7808 <__alt_data_end+0xfffd7808>
    7c58:	d8802307 	ldb	r2,140(sp)
    7c5c:	1002361e 	bne	r2,zero,8538 <___vfiprintf_internal_r+0x113c>
    7c60:	00c00804 	movi	r3,32
    7c64:	d8c02305 	stb	r3,140(sp)
    7c68:	04c00044 	movi	r19,1
    7c6c:	b0c00007 	ldb	r3,0(r22)
    7c70:	003e3f06 	br	7570 <__alt_data_end+0xfffd7570>
    7c74:	8c400054 	ori	r17,r17,1
    7c78:	b0c00007 	ldb	r3,0(r22)
    7c7c:	003e3c06 	br	7570 <__alt_data_end+0xfffd7570>
    7c80:	8c402014 	ori	r17,r17,128
    7c84:	b0c00007 	ldb	r3,0(r22)
    7c88:	003e3906 	br	7570 <__alt_data_end+0xfffd7570>
    7c8c:	dc002715 	stw	r16,156(sp)
    7c90:	d8002515 	stw	zero,148(sp)
    7c94:	1f3ff404 	addi	fp,r3,-48
    7c98:	0009883a 	mov	r4,zero
    7c9c:	b021883a 	mov	r16,r22
    7ca0:	01400284 	movi	r5,10
    7ca4:	000aa740 	call	aa74 <__mulsi3>
    7ca8:	80c00007 	ldb	r3,0(r16)
    7cac:	e089883a 	add	r4,fp,r2
    7cb0:	b5800044 	addi	r22,r22,1
    7cb4:	1f3ff404 	addi	fp,r3,-48
    7cb8:	b021883a 	mov	r16,r22
    7cbc:	af3ff82e 	bgeu	r21,fp,7ca0 <__alt_data_end+0xfffd7ca0>
    7cc0:	d9002515 	stw	r4,148(sp)
    7cc4:	dc002717 	ldw	r16,156(sp)
    7cc8:	003e2a06 	br	7574 <__alt_data_end+0xfffd7574>
    7ccc:	9cc03fcc 	andi	r19,r19,255
    7cd0:	b811883a 	mov	r8,r23
    7cd4:	9802e91e 	bne	r19,zero,887c <___vfiprintf_internal_r+0x1480>
    7cd8:	8c400414 	ori	r17,r17,16
    7cdc:	8880080c 	andi	r2,r17,32
    7ce0:	103fb81e 	bne	r2,zero,7bc4 <__alt_data_end+0xfffd7bc4>
    7ce4:	8880040c 	andi	r2,r17,16
    7ce8:	10022e26 	beq	r2,zero,85a4 <___vfiprintf_internal_r+0x11a8>
    7cec:	d9402217 	ldw	r5,136(sp)
    7cf0:	2cc00017 	ldw	r19,0(r5)
    7cf4:	29400104 	addi	r5,r5,4
    7cf8:	d9402215 	stw	r5,136(sp)
    7cfc:	9829d7fa 	srai	r20,r19,31
    7d00:	a005883a 	mov	r2,r20
    7d04:	003fb506 	br	7bdc <__alt_data_end+0xfffd7bdc>
    7d08:	9cc03fcc 	andi	r19,r19,255
    7d0c:	b811883a 	mov	r8,r23
    7d10:	9802fa1e 	bne	r19,zero,88fc <___vfiprintf_internal_r+0x1500>
    7d14:	8c400414 	ori	r17,r17,16
    7d18:	8880080c 	andi	r2,r17,32
    7d1c:	103f661e 	bne	r2,zero,7ab8 <__alt_data_end+0xfffd7ab8>
    7d20:	8880040c 	andi	r2,r17,16
    7d24:	10020626 	beq	r2,zero,8540 <___vfiprintf_internal_r+0x1144>
    7d28:	d9402217 	ldw	r5,136(sp)
    7d2c:	d8001d85 	stb	zero,118(sp)
    7d30:	0029883a 	mov	r20,zero
    7d34:	28800104 	addi	r2,r5,4
    7d38:	2cc00017 	ldw	r19,0(r5)
    7d3c:	80020816 	blt	r16,zero,8560 <___vfiprintf_internal_r+0x1164>
    7d40:	00ffdfc4 	movi	r3,-129
    7d44:	d8802215 	stw	r2,136(sp)
    7d48:	88e2703a 	and	r17,r17,r3
    7d4c:	983f651e 	bne	r19,zero,7ae4 <__alt_data_end+0xfffd7ae4>
    7d50:	002b883a 	mov	r21,zero
    7d54:	8002cf26 	beq	r16,zero,8894 <___vfiprintf_internal_r+0x1498>
    7d58:	0027883a 	mov	r19,zero
    7d5c:	0029883a 	mov	r20,zero
    7d60:	003f6106 	br	7ae8 <__alt_data_end+0xfffd7ae8>
    7d64:	9cc03fcc 	andi	r19,r19,255
    7d68:	b811883a 	mov	r8,r23
    7d6c:	9802e01e 	bne	r19,zero,88f0 <___vfiprintf_internal_r+0x14f4>
    7d70:	8c400414 	ori	r17,r17,16
    7d74:	8880080c 	andi	r2,r17,32
    7d78:	1000641e 	bne	r2,zero,7f0c <___vfiprintf_internal_r+0xb10>
    7d7c:	8880040c 	andi	r2,r17,16
    7d80:	1001c81e 	bne	r2,zero,84a4 <___vfiprintf_internal_r+0x10a8>
    7d84:	8880100c 	andi	r2,r17,64
    7d88:	d8001d85 	stb	zero,118(sp)
    7d8c:	1002281e 	bne	r2,zero,8630 <___vfiprintf_internal_r+0x1234>
    7d90:	d9002217 	ldw	r4,136(sp)
    7d94:	0029883a 	mov	r20,zero
    7d98:	20800104 	addi	r2,r4,4
    7d9c:	24c00017 	ldw	r19,0(r4)
    7da0:	8001c60e 	bge	r16,zero,84bc <___vfiprintf_internal_r+0x10c0>
    7da4:	d8802215 	stw	r2,136(sp)
    7da8:	002b883a 	mov	r21,zero
    7dac:	9d04b03a 	or	r2,r19,r20
    7db0:	103f911e 	bne	r2,zero,7bf8 <__alt_data_end+0xfffd7bf8>
    7db4:	00800044 	movi	r2,1
    7db8:	10803fcc 	andi	r2,r2,255
    7dbc:	00c00044 	movi	r3,1
    7dc0:	10c05f26 	beq	r2,r3,7f40 <___vfiprintf_internal_r+0xb44>
    7dc4:	00c00084 	movi	r3,2
    7dc8:	10ffe31e 	bne	r2,r3,7d58 <__alt_data_end+0xfffd7d58>
    7dcc:	0027883a 	mov	r19,zero
    7dd0:	0029883a 	mov	r20,zero
    7dd4:	00015106 	br	831c <___vfiprintf_internal_r+0xf20>
    7dd8:	9cc03fcc 	andi	r19,r19,255
    7ddc:	b811883a 	mov	r8,r23
    7de0:	9802c01e 	bne	r19,zero,88e4 <___vfiprintf_internal_r+0x14e8>
    7de4:	01400074 	movhi	r5,1
    7de8:	295ef704 	addi	r5,r5,31708
    7dec:	d9402615 	stw	r5,152(sp)
    7df0:	8880080c 	andi	r2,r17,32
    7df4:	103f541e 	bne	r2,zero,7b48 <__alt_data_end+0xfffd7b48>
    7df8:	8880040c 	andi	r2,r17,16
    7dfc:	1001f226 	beq	r2,zero,85c8 <___vfiprintf_internal_r+0x11cc>
    7e00:	d9402217 	ldw	r5,136(sp)
    7e04:	0029883a 	mov	r20,zero
    7e08:	2cc00017 	ldw	r19,0(r5)
    7e0c:	29400104 	addi	r5,r5,4
    7e10:	d9402215 	stw	r5,136(sp)
    7e14:	003f5106 	br	7b5c <__alt_data_end+0xfffd7b5c>
    7e18:	d8c02217 	ldw	r3,136(sp)
    7e1c:	b811883a 	mov	r8,r23
    7e20:	d8001d85 	stb	zero,118(sp)
    7e24:	1dc00017 	ldw	r23,0(r3)
    7e28:	1f000104 	addi	fp,r3,4
    7e2c:	b8025926 	beq	r23,zero,8794 <___vfiprintf_internal_r+0x1398>
    7e30:	80023316 	blt	r16,zero,8700 <___vfiprintf_internal_r+0x1304>
    7e34:	800d883a 	mov	r6,r16
    7e38:	000b883a 	mov	r5,zero
    7e3c:	b809883a 	mov	r4,r23
    7e40:	da002a15 	stw	r8,168(sp)
    7e44:	0005b640 	call	5b64 <memchr>
    7e48:	da002a17 	ldw	r8,168(sp)
    7e4c:	10026826 	beq	r2,zero,87f0 <___vfiprintf_internal_r+0x13f4>
    7e50:	15e9c83a 	sub	r20,r2,r23
    7e54:	dd401d83 	ldbu	r21,118(sp)
    7e58:	df002215 	stw	fp,136(sp)
    7e5c:	0021883a 	mov	r16,zero
    7e60:	003e6906 	br	7808 <__alt_data_end+0xfffd7808>
    7e64:	9cc03fcc 	andi	r19,r19,255
    7e68:	b811883a 	mov	r8,r23
    7e6c:	983fc126 	beq	r19,zero,7d74 <__alt_data_end+0xfffd7d74>
    7e70:	d8c02303 	ldbu	r3,140(sp)
    7e74:	d8c01d85 	stb	r3,118(sp)
    7e78:	003fbe06 	br	7d74 <__alt_data_end+0xfffd7d74>
    7e7c:	d9002217 	ldw	r4,136(sp)
    7e80:	d9402217 	ldw	r5,136(sp)
    7e84:	21000017 	ldw	r4,0(r4)
    7e88:	28800104 	addi	r2,r5,4
    7e8c:	d9002515 	stw	r4,148(sp)
    7e90:	203e3d16 	blt	r4,zero,7788 <__alt_data_end+0xfffd7788>
    7e94:	d8802215 	stw	r2,136(sp)
    7e98:	b0c00007 	ldb	r3,0(r22)
    7e9c:	003db406 	br	7570 <__alt_data_end+0xfffd7570>
    7ea0:	00c00ac4 	movi	r3,43
    7ea4:	d8c02305 	stb	r3,140(sp)
    7ea8:	04c00044 	movi	r19,1
    7eac:	b0c00007 	ldb	r3,0(r22)
    7eb0:	003daf06 	br	7570 <__alt_data_end+0xfffd7570>
    7eb4:	b0c00007 	ldb	r3,0(r22)
    7eb8:	01000a84 	movi	r4,42
    7ebc:	b4000044 	addi	r16,r22,1
    7ec0:	19025e26 	beq	r3,r4,883c <___vfiprintf_internal_r+0x1440>
    7ec4:	1f3ff404 	addi	fp,r3,-48
    7ec8:	0009883a 	mov	r4,zero
    7ecc:	af025236 	bltu	r21,fp,8818 <___vfiprintf_internal_r+0x141c>
    7ed0:	01400284 	movi	r5,10
    7ed4:	000aa740 	call	aa74 <__mulsi3>
    7ed8:	80c00007 	ldb	r3,0(r16)
    7edc:	1709883a 	add	r4,r2,fp
    7ee0:	85800044 	addi	r22,r16,1
    7ee4:	1f3ff404 	addi	fp,r3,-48
    7ee8:	b021883a 	mov	r16,r22
    7eec:	af3ff82e 	bgeu	r21,fp,7ed0 <__alt_data_end+0xfffd7ed0>
    7ef0:	2021883a 	mov	r16,r4
    7ef4:	203d9f0e 	bge	r4,zero,7574 <__alt_data_end+0xfffd7574>
    7ef8:	043fffc4 	movi	r16,-1
    7efc:	003d9d06 	br	7574 <__alt_data_end+0xfffd7574>
    7f00:	8c401014 	ori	r17,r17,64
    7f04:	b0c00007 	ldb	r3,0(r22)
    7f08:	003d9906 	br	7570 <__alt_data_end+0xfffd7570>
    7f0c:	d9002217 	ldw	r4,136(sp)
    7f10:	d8001d85 	stb	zero,118(sp)
    7f14:	20c00204 	addi	r3,r4,8
    7f18:	24c00017 	ldw	r19,0(r4)
    7f1c:	25000117 	ldw	r20,4(r4)
    7f20:	8001e716 	blt	r16,zero,86c0 <___vfiprintf_internal_r+0x12c4>
    7f24:	013fdfc4 	movi	r4,-129
    7f28:	9d04b03a 	or	r2,r19,r20
    7f2c:	d8c02215 	stw	r3,136(sp)
    7f30:	8922703a 	and	r17,r17,r4
    7f34:	002b883a 	mov	r21,zero
    7f38:	103f2f1e 	bne	r2,zero,7bf8 <__alt_data_end+0xfffd7bf8>
    7f3c:	803e2f26 	beq	r16,zero,77fc <__alt_data_end+0xfffd77fc>
    7f40:	0027883a 	mov	r19,zero
    7f44:	9cc00c04 	addi	r19,r19,48
    7f48:	dcc019c5 	stb	r19,103(sp)
    7f4c:	dd002817 	ldw	r20,160(sp)
    7f50:	ddc019c4 	addi	r23,sp,103
    7f54:	003e2c06 	br	7808 <__alt_data_end+0xfffd7808>
    7f58:	9cc03fcc 	andi	r19,r19,255
    7f5c:	b811883a 	mov	r8,r23
    7f60:	9802571e 	bne	r19,zero,88c0 <___vfiprintf_internal_r+0x14c4>
    7f64:	18005726 	beq	r3,zero,80c4 <___vfiprintf_internal_r+0xcc8>
    7f68:	04c00044 	movi	r19,1
    7f6c:	d8c01005 	stb	r3,64(sp)
    7f70:	d8001d85 	stb	zero,118(sp)
    7f74:	9829883a 	mov	r20,r19
    7f78:	ddc01004 	addi	r23,sp,64
    7f7c:	003f0a06 	br	7ba8 <__alt_data_end+0xfffd7ba8>
    7f80:	d9402017 	ldw	r5,128(sp)
    7f84:	d9002117 	ldw	r4,132(sp)
    7f88:	d9801a04 	addi	r6,sp,104
    7f8c:	da802a15 	stw	r10,168(sp)
    7f90:	00072e80 	call	72e8 <__sprint_r.part.0>
    7f94:	da802a17 	ldw	r10,168(sp)
    7f98:	1000501e 	bne	r2,zero,80dc <___vfiprintf_internal_r+0xce0>
    7f9c:	d9801b17 	ldw	r6,108(sp)
    7fa0:	d8801c17 	ldw	r2,112(sp)
    7fa4:	d811883a 	mov	r8,sp
    7fa8:	31000044 	addi	r4,r6,1
    7fac:	003e3606 	br	7888 <__alt_data_end+0xfffd7888>
    7fb0:	d9001b17 	ldw	r4,108(sp)
    7fb4:	d8801c17 	ldw	r2,112(sp)
    7fb8:	21400044 	addi	r5,r4,1
    7fbc:	d9801d87 	ldb	r6,118(sp)
    7fc0:	303e5226 	beq	r6,zero,790c <__alt_data_end+0xfffd790c>
    7fc4:	01800044 	movi	r6,1
    7fc8:	d9001d84 	addi	r4,sp,118
    7fcc:	1185883a 	add	r2,r2,r6
    7fd0:	41000015 	stw	r4,0(r8)
    7fd4:	41800115 	stw	r6,4(r8)
    7fd8:	d8801c15 	stw	r2,112(sp)
    7fdc:	d9401b15 	stw	r5,108(sp)
    7fe0:	010001c4 	movi	r4,7
    7fe4:	2140b00e 	bge	r4,r5,82a8 <___vfiprintf_internal_r+0xeac>
    7fe8:	1000f61e 	bne	r2,zero,83c4 <___vfiprintf_internal_r+0xfc8>
    7fec:	3800b31e 	bne	r7,zero,82bc <___vfiprintf_internal_r+0xec0>
    7ff0:	0009883a 	mov	r4,zero
    7ff4:	300b883a 	mov	r5,r6
    7ff8:	d811883a 	mov	r8,sp
    7ffc:	01802004 	movi	r6,128
    8000:	19be5226 	beq	r3,r6,794c <__alt_data_end+0xfffd794c>
    8004:	8521c83a 	sub	r16,r16,r20
    8008:	043e790e 	bge	zero,r16,79f0 <__alt_data_end+0xfffd79f0>
    800c:	05400404 	movi	r21,16
    8010:	ac01b00e 	bge	r21,r16,86d4 <___vfiprintf_internal_r+0x12d8>
    8014:	01400074 	movhi	r5,1
    8018:	295f5d04 	addi	r5,r5,32116
    801c:	d9402315 	stw	r5,140(sp)
    8020:	070001c4 	movi	fp,7
    8024:	00000506 	br	803c <___vfiprintf_internal_r+0xc40>
    8028:	21400084 	addi	r5,r4,2
    802c:	42000204 	addi	r8,r8,8
    8030:	1809883a 	mov	r4,r3
    8034:	843ffc04 	addi	r16,r16,-16
    8038:	ac000d0e 	bge	r21,r16,8070 <___vfiprintf_internal_r+0xc74>
    803c:	10800404 	addi	r2,r2,16
    8040:	20c00044 	addi	r3,r4,1
    8044:	44800015 	stw	r18,0(r8)
    8048:	45400115 	stw	r21,4(r8)
    804c:	d8801c15 	stw	r2,112(sp)
    8050:	d8c01b15 	stw	r3,108(sp)
    8054:	e0fff40e 	bge	fp,r3,8028 <__alt_data_end+0xfffd8028>
    8058:	1000101e 	bne	r2,zero,809c <___vfiprintf_internal_r+0xca0>
    805c:	843ffc04 	addi	r16,r16,-16
    8060:	01400044 	movi	r5,1
    8064:	0009883a 	mov	r4,zero
    8068:	d811883a 	mov	r8,sp
    806c:	ac3ff316 	blt	r21,r16,803c <__alt_data_end+0xfffd803c>
    8070:	d8c02317 	ldw	r3,140(sp)
    8074:	1405883a 	add	r2,r2,r16
    8078:	44000115 	stw	r16,4(r8)
    807c:	40c00015 	stw	r3,0(r8)
    8080:	d8801c15 	stw	r2,112(sp)
    8084:	d9401b15 	stw	r5,108(sp)
    8088:	00c001c4 	movi	r3,7
    808c:	19401916 	blt	r3,r5,80f4 <___vfiprintf_internal_r+0xcf8>
    8090:	42000204 	addi	r8,r8,8
    8094:	29400044 	addi	r5,r5,1
    8098:	003e5506 	br	79f0 <__alt_data_end+0xfffd79f0>
    809c:	d9402017 	ldw	r5,128(sp)
    80a0:	d9002117 	ldw	r4,132(sp)
    80a4:	d9801a04 	addi	r6,sp,104
    80a8:	00072e80 	call	72e8 <__sprint_r.part.0>
    80ac:	10000b1e 	bne	r2,zero,80dc <___vfiprintf_internal_r+0xce0>
    80b0:	d9001b17 	ldw	r4,108(sp)
    80b4:	d8801c17 	ldw	r2,112(sp)
    80b8:	d811883a 	mov	r8,sp
    80bc:	21400044 	addi	r5,r4,1
    80c0:	003fdc06 	br	8034 <__alt_data_end+0xfffd8034>
    80c4:	d8801c17 	ldw	r2,112(sp)
    80c8:	10000426 	beq	r2,zero,80dc <___vfiprintf_internal_r+0xce0>
    80cc:	d9402017 	ldw	r5,128(sp)
    80d0:	d9002117 	ldw	r4,132(sp)
    80d4:	d9801a04 	addi	r6,sp,104
    80d8:	00072e80 	call	72e8 <__sprint_r.part.0>
    80dc:	d9402017 	ldw	r5,128(sp)
    80e0:	2880030b 	ldhu	r2,12(r5)
    80e4:	1080100c 	andi	r2,r2,64
    80e8:	10014d1e 	bne	r2,zero,8620 <___vfiprintf_internal_r+0x1224>
    80ec:	d8802417 	ldw	r2,144(sp)
    80f0:	003d9706 	br	7750 <__alt_data_end+0xfffd7750>
    80f4:	1000d21e 	bne	r2,zero,8440 <___vfiprintf_internal_r+0x1044>
    80f8:	00c00044 	movi	r3,1
    80fc:	a005883a 	mov	r2,r20
    8100:	ddc00015 	stw	r23,0(sp)
    8104:	dd000115 	stw	r20,4(sp)
    8108:	dd001c15 	stw	r20,112(sp)
    810c:	d8c01b15 	stw	r3,108(sp)
    8110:	d811883a 	mov	r8,sp
    8114:	42000204 	addi	r8,r8,8
    8118:	8c40010c 	andi	r17,r17,4
    811c:	88004026 	beq	r17,zero,8220 <___vfiprintf_internal_r+0xe24>
    8120:	d9002517 	ldw	r4,148(sp)
    8124:	24e3c83a 	sub	r17,r4,r19
    8128:	04403d0e 	bge	zero,r17,8220 <___vfiprintf_internal_r+0xe24>
    812c:	04000404 	movi	r16,16
    8130:	8441a90e 	bge	r16,r17,87d8 <___vfiprintf_internal_r+0x13dc>
    8134:	00c00074 	movhi	r3,1
    8138:	18df6104 	addi	r3,r3,32132
    813c:	d9001b17 	ldw	r4,108(sp)
    8140:	d8c02315 	stw	r3,140(sp)
    8144:	050001c4 	movi	r20,7
    8148:	dd402117 	ldw	r21,132(sp)
    814c:	ddc02017 	ldw	r23,128(sp)
    8150:	00000506 	br	8168 <___vfiprintf_internal_r+0xd6c>
    8154:	21400084 	addi	r5,r4,2
    8158:	42000204 	addi	r8,r8,8
    815c:	1809883a 	mov	r4,r3
    8160:	8c7ffc04 	addi	r17,r17,-16
    8164:	84400f0e 	bge	r16,r17,81a4 <___vfiprintf_internal_r+0xda8>
    8168:	01400074 	movhi	r5,1
    816c:	10800404 	addi	r2,r2,16
    8170:	20c00044 	addi	r3,r4,1
    8174:	295f6104 	addi	r5,r5,32132
    8178:	41400015 	stw	r5,0(r8)
    817c:	44000115 	stw	r16,4(r8)
    8180:	d8801c15 	stw	r2,112(sp)
    8184:	d8c01b15 	stw	r3,108(sp)
    8188:	a0fff20e 	bge	r20,r3,8154 <__alt_data_end+0xfffd8154>
    818c:	1000141e 	bne	r2,zero,81e0 <___vfiprintf_internal_r+0xde4>
    8190:	8c7ffc04 	addi	r17,r17,-16
    8194:	01400044 	movi	r5,1
    8198:	0009883a 	mov	r4,zero
    819c:	d811883a 	mov	r8,sp
    81a0:	847ff116 	blt	r16,r17,8168 <__alt_data_end+0xfffd8168>
    81a4:	d8c02317 	ldw	r3,140(sp)
    81a8:	1445883a 	add	r2,r2,r17
    81ac:	44400115 	stw	r17,4(r8)
    81b0:	40c00015 	stw	r3,0(r8)
    81b4:	d8801c15 	stw	r2,112(sp)
    81b8:	d9401b15 	stw	r5,108(sp)
    81bc:	00c001c4 	movi	r3,7
    81c0:	1940170e 	bge	r3,r5,8220 <___vfiprintf_internal_r+0xe24>
    81c4:	1000101e 	bne	r2,zero,8208 <___vfiprintf_internal_r+0xe0c>
    81c8:	d8802517 	ldw	r2,148(sp)
    81cc:	14c11616 	blt	r2,r19,8628 <___vfiprintf_internal_r+0x122c>
    81d0:	d9002417 	ldw	r4,144(sp)
    81d4:	2089883a 	add	r4,r4,r2
    81d8:	d9002415 	stw	r4,144(sp)
    81dc:	003e1806 	br	7a40 <__alt_data_end+0xfffd7a40>
    81e0:	d9801a04 	addi	r6,sp,104
    81e4:	b80b883a 	mov	r5,r23
    81e8:	a809883a 	mov	r4,r21
    81ec:	00072e80 	call	72e8 <__sprint_r.part.0>
    81f0:	103fba1e 	bne	r2,zero,80dc <__alt_data_end+0xfffd80dc>
    81f4:	d9001b17 	ldw	r4,108(sp)
    81f8:	d8801c17 	ldw	r2,112(sp)
    81fc:	d811883a 	mov	r8,sp
    8200:	21400044 	addi	r5,r4,1
    8204:	003fd606 	br	8160 <__alt_data_end+0xfffd8160>
    8208:	d9402017 	ldw	r5,128(sp)
    820c:	d9002117 	ldw	r4,132(sp)
    8210:	d9801a04 	addi	r6,sp,104
    8214:	00072e80 	call	72e8 <__sprint_r.part.0>
    8218:	103fb01e 	bne	r2,zero,80dc <__alt_data_end+0xfffd80dc>
    821c:	d8801c17 	ldw	r2,112(sp)
    8220:	d8c02517 	ldw	r3,148(sp)
    8224:	1cc0010e 	bge	r3,r19,822c <___vfiprintf_internal_r+0xe30>
    8228:	9807883a 	mov	r3,r19
    822c:	d9002417 	ldw	r4,144(sp)
    8230:	20c9883a 	add	r4,r4,r3
    8234:	d9002415 	stw	r4,144(sp)
    8238:	103e0126 	beq	r2,zero,7a40 <__alt_data_end+0xfffd7a40>
    823c:	d9402017 	ldw	r5,128(sp)
    8240:	d9002117 	ldw	r4,132(sp)
    8244:	d9801a04 	addi	r6,sp,104
    8248:	00072e80 	call	72e8 <__sprint_r.part.0>
    824c:	103dfc26 	beq	r2,zero,7a40 <__alt_data_end+0xfffd7a40>
    8250:	003fa206 	br	80dc <__alt_data_end+0xfffd80dc>
    8254:	d9402017 	ldw	r5,128(sp)
    8258:	d9002117 	ldw	r4,132(sp)
    825c:	d9801a04 	addi	r6,sp,104
    8260:	d9c02b15 	stw	r7,172(sp)
    8264:	00072e80 	call	72e8 <__sprint_r.part.0>
    8268:	d9c02b17 	ldw	r7,172(sp)
    826c:	103f9b1e 	bne	r2,zero,80dc <__alt_data_end+0xfffd80dc>
    8270:	d9001b17 	ldw	r4,108(sp)
    8274:	d8801c17 	ldw	r2,112(sp)
    8278:	d811883a 	mov	r8,sp
    827c:	21800044 	addi	r6,r4,1
    8280:	003dbf06 	br	7980 <__alt_data_end+0xfffd7980>
    8284:	1000d81e 	bne	r2,zero,85e8 <___vfiprintf_internal_r+0x11ec>
    8288:	d9001d87 	ldb	r4,118(sp)
    828c:	20000a26 	beq	r4,zero,82b8 <___vfiprintf_internal_r+0xebc>
    8290:	00800044 	movi	r2,1
    8294:	d9001d84 	addi	r4,sp,118
    8298:	100b883a 	mov	r5,r2
    829c:	d9000015 	stw	r4,0(sp)
    82a0:	d8800115 	stw	r2,4(sp)
    82a4:	d811883a 	mov	r8,sp
    82a8:	2809883a 	mov	r4,r5
    82ac:	42000204 	addi	r8,r8,8
    82b0:	29400044 	addi	r5,r5,1
    82b4:	003d9506 	br	790c <__alt_data_end+0xfffd790c>
    82b8:	3800fd26 	beq	r7,zero,86b0 <___vfiprintf_internal_r+0x12b4>
    82bc:	00800084 	movi	r2,2
    82c0:	d9001d04 	addi	r4,sp,116
    82c4:	d9000015 	stw	r4,0(sp)
    82c8:	d8800115 	stw	r2,4(sp)
    82cc:	01400044 	movi	r5,1
    82d0:	d811883a 	mov	r8,sp
    82d4:	2809883a 	mov	r4,r5
    82d8:	42000204 	addi	r8,r8,8
    82dc:	29400044 	addi	r5,r5,1
    82e0:	003f4606 	br	7ffc <__alt_data_end+0xfffd7ffc>
    82e4:	d8802517 	ldw	r2,148(sp)
    82e8:	14c0010e 	bge	r2,r19,82f0 <___vfiprintf_internal_r+0xef4>
    82ec:	9805883a 	mov	r2,r19
    82f0:	d9402417 	ldw	r5,144(sp)
    82f4:	288b883a 	add	r5,r5,r2
    82f8:	d9402415 	stw	r5,144(sp)
    82fc:	003dd006 	br	7a40 <__alt_data_end+0xfffd7a40>
    8300:	d8001d85 	stb	zero,118(sp)
    8304:	80005d16 	blt	r16,zero,847c <___vfiprintf_internal_r+0x1080>
    8308:	00ffdfc4 	movi	r3,-129
    830c:	9d04b03a 	or	r2,r19,r20
    8310:	88e2703a 	and	r17,r17,r3
    8314:	103d3726 	beq	r2,zero,77f4 <__alt_data_end+0xfffd77f4>
    8318:	002b883a 	mov	r21,zero
    831c:	d9002617 	ldw	r4,152(sp)
    8320:	ddc01a04 	addi	r23,sp,104
    8324:	988003cc 	andi	r2,r19,15
    8328:	a006973a 	slli	r3,r20,28
    832c:	2085883a 	add	r2,r4,r2
    8330:	9826d13a 	srli	r19,r19,4
    8334:	10800003 	ldbu	r2,0(r2)
    8338:	a028d13a 	srli	r20,r20,4
    833c:	bdffffc4 	addi	r23,r23,-1
    8340:	1ce6b03a 	or	r19,r3,r19
    8344:	b8800005 	stb	r2,0(r23)
    8348:	9d04b03a 	or	r2,r19,r20
    834c:	103ff51e 	bne	r2,zero,8324 <__alt_data_end+0xfffd8324>
    8350:	d8801e17 	ldw	r2,120(sp)
    8354:	15e9c83a 	sub	r20,r2,r23
    8358:	003d2b06 	br	7808 <__alt_data_end+0xfffd7808>
    835c:	d9402017 	ldw	r5,128(sp)
    8360:	d9002117 	ldw	r4,132(sp)
    8364:	d9801a04 	addi	r6,sp,104
    8368:	00072e80 	call	72e8 <__sprint_r.part.0>
    836c:	103f5b1e 	bne	r2,zero,80dc <__alt_data_end+0xfffd80dc>
    8370:	d8801c17 	ldw	r2,112(sp)
    8374:	d811883a 	mov	r8,sp
    8378:	003f6706 	br	8118 <__alt_data_end+0xfffd8118>
    837c:	d9402017 	ldw	r5,128(sp)
    8380:	d9002117 	ldw	r4,132(sp)
    8384:	d9801a04 	addi	r6,sp,104
    8388:	00072e80 	call	72e8 <__sprint_r.part.0>
    838c:	103f531e 	bne	r2,zero,80dc <__alt_data_end+0xfffd80dc>
    8390:	d811883a 	mov	r8,sp
    8394:	003cd906 	br	76fc <__alt_data_end+0xfffd76fc>
    8398:	10803fcc 	andi	r2,r2,255
    839c:	1080201c 	xori	r2,r2,128
    83a0:	10bfe004 	addi	r2,r2,-128
    83a4:	00c00c04 	movi	r3,48
    83a8:	10ffe926 	beq	r2,r3,8350 <__alt_data_end+0xfffd8350>
    83ac:	b8ffffc5 	stb	r3,-1(r23)
    83b0:	d8c01e17 	ldw	r3,120(sp)
    83b4:	b8bfffc4 	addi	r2,r23,-1
    83b8:	102f883a 	mov	r23,r2
    83bc:	18a9c83a 	sub	r20,r3,r2
    83c0:	003d1106 	br	7808 <__alt_data_end+0xfffd7808>
    83c4:	d9402017 	ldw	r5,128(sp)
    83c8:	d9002117 	ldw	r4,132(sp)
    83cc:	d9801a04 	addi	r6,sp,104
    83d0:	d8c02a15 	stw	r3,168(sp)
    83d4:	d9c02b15 	stw	r7,172(sp)
    83d8:	00072e80 	call	72e8 <__sprint_r.part.0>
    83dc:	d8c02a17 	ldw	r3,168(sp)
    83e0:	d9c02b17 	ldw	r7,172(sp)
    83e4:	103f3d1e 	bne	r2,zero,80dc <__alt_data_end+0xfffd80dc>
    83e8:	d9001b17 	ldw	r4,108(sp)
    83ec:	d8801c17 	ldw	r2,112(sp)
    83f0:	d811883a 	mov	r8,sp
    83f4:	21400044 	addi	r5,r4,1
    83f8:	003d4406 	br	790c <__alt_data_end+0xfffd790c>
    83fc:	d9402017 	ldw	r5,128(sp)
    8400:	d9002117 	ldw	r4,132(sp)
    8404:	d9801a04 	addi	r6,sp,104
    8408:	d8c02a15 	stw	r3,168(sp)
    840c:	00072e80 	call	72e8 <__sprint_r.part.0>
    8410:	d8c02a17 	ldw	r3,168(sp)
    8414:	103f311e 	bne	r2,zero,80dc <__alt_data_end+0xfffd80dc>
    8418:	d9001b17 	ldw	r4,108(sp)
    841c:	d8801c17 	ldw	r2,112(sp)
    8420:	d811883a 	mov	r8,sp
    8424:	21400044 	addi	r5,r4,1
    8428:	003ef406 	br	7ffc <__alt_data_end+0xfffd7ffc>
    842c:	1000bd1e 	bne	r2,zero,8724 <___vfiprintf_internal_r+0x1328>
    8430:	01400044 	movi	r5,1
    8434:	0009883a 	mov	r4,zero
    8438:	d811883a 	mov	r8,sp
    843c:	003ef106 	br	8004 <__alt_data_end+0xfffd8004>
    8440:	d9402017 	ldw	r5,128(sp)
    8444:	d9002117 	ldw	r4,132(sp)
    8448:	d9801a04 	addi	r6,sp,104
    844c:	00072e80 	call	72e8 <__sprint_r.part.0>
    8450:	103f221e 	bne	r2,zero,80dc <__alt_data_end+0xfffd80dc>
    8454:	d9401b17 	ldw	r5,108(sp)
    8458:	d8801c17 	ldw	r2,112(sp)
    845c:	d811883a 	mov	r8,sp
    8460:	29400044 	addi	r5,r5,1
    8464:	003d6206 	br	79f0 <__alt_data_end+0xfffd79f0>
    8468:	01400074 	movhi	r5,1
    846c:	295efc04 	addi	r5,r5,31728
    8470:	d9402615 	stw	r5,152(sp)
    8474:	d8c02215 	stw	r3,136(sp)
    8478:	1023883a 	mov	r17,r2
    847c:	9d04b03a 	or	r2,r19,r20
    8480:	103fa51e 	bne	r2,zero,8318 <__alt_data_end+0xfffd8318>
    8484:	002b883a 	mov	r21,zero
    8488:	00800084 	movi	r2,2
    848c:	003e4a06 	br	7db8 <__alt_data_end+0xfffd7db8>
    8490:	01400074 	movhi	r5,1
    8494:	295efc04 	addi	r5,r5,31728
    8498:	002b883a 	mov	r21,zero
    849c:	d9402615 	stw	r5,152(sp)
    84a0:	003f9e06 	br	831c <__alt_data_end+0xfffd831c>
    84a4:	d9402217 	ldw	r5,136(sp)
    84a8:	d8001d85 	stb	zero,118(sp)
    84ac:	0029883a 	mov	r20,zero
    84b0:	28800104 	addi	r2,r5,4
    84b4:	2cc00017 	ldw	r19,0(r5)
    84b8:	803e3a16 	blt	r16,zero,7da4 <__alt_data_end+0xfffd7da4>
    84bc:	00ffdfc4 	movi	r3,-129
    84c0:	d8802215 	stw	r2,136(sp)
    84c4:	88e2703a 	and	r17,r17,r3
    84c8:	002b883a 	mov	r21,zero
    84cc:	983e9b26 	beq	r19,zero,7f3c <__alt_data_end+0xfffd7f3c>
    84d0:	00800244 	movi	r2,9
    84d4:	14fdc936 	bltu	r2,r19,7bfc <__alt_data_end+0xfffd7bfc>
    84d8:	003e9a06 	br	7f44 <__alt_data_end+0xfffd7f44>
    84dc:	00800c04 	movi	r2,48
    84e0:	d8c01d45 	stb	r3,117(sp)
    84e4:	d8801d05 	stb	r2,116(sp)
    84e8:	d8001d85 	stb	zero,118(sp)
    84ec:	88c00094 	ori	r3,r17,2
    84f0:	80009c16 	blt	r16,zero,8764 <___vfiprintf_internal_r+0x1368>
    84f4:	00bfdfc4 	movi	r2,-129
    84f8:	88a2703a 	and	r17,r17,r2
    84fc:	8c400094 	ori	r17,r17,2
    8500:	002b883a 	mov	r21,zero
    8504:	003f8506 	br	831c <__alt_data_end+0xfffd831c>
    8508:	b029883a 	mov	r20,r22
    850c:	003c0b06 	br	753c <__alt_data_end+0xfffd753c>
    8510:	04e7c83a 	sub	r19,zero,r19
    8514:	05400b44 	movi	r21,45
    8518:	9804c03a 	cmpne	r2,r19,zero
    851c:	0529c83a 	sub	r20,zero,r20
    8520:	dd401d85 	stb	r21,118(sp)
    8524:	a0a9c83a 	sub	r20,r20,r2
    8528:	80009716 	blt	r16,zero,8788 <___vfiprintf_internal_r+0x138c>
    852c:	00bfdfc4 	movi	r2,-129
    8530:	88a2703a 	and	r17,r17,r2
    8534:	003db006 	br	7bf8 <__alt_data_end+0xfffd7bf8>
    8538:	b0c00007 	ldb	r3,0(r22)
    853c:	003c0c06 	br	7570 <__alt_data_end+0xfffd7570>
    8540:	8880100c 	andi	r2,r17,64
    8544:	d8001d85 	stb	zero,118(sp)
    8548:	1000461e 	bne	r2,zero,8664 <___vfiprintf_internal_r+0x1268>
    854c:	d9002217 	ldw	r4,136(sp)
    8550:	0029883a 	mov	r20,zero
    8554:	20800104 	addi	r2,r4,4
    8558:	24c00017 	ldw	r19,0(r4)
    855c:	803df80e 	bge	r16,zero,7d40 <__alt_data_end+0xfffd7d40>
    8560:	9d06b03a 	or	r3,r19,r20
    8564:	d8802215 	stw	r2,136(sp)
    8568:	183d5e1e 	bne	r3,zero,7ae4 <__alt_data_end+0xfffd7ae4>
    856c:	002b883a 	mov	r21,zero
    8570:	0005883a 	mov	r2,zero
    8574:	003e1006 	br	7db8 <__alt_data_end+0xfffd7db8>
    8578:	8880040c 	andi	r2,r17,16
    857c:	1000321e 	bne	r2,zero,8648 <___vfiprintf_internal_r+0x124c>
    8580:	8c40100c 	andi	r17,r17,64
    8584:	88008d26 	beq	r17,zero,87bc <___vfiprintf_internal_r+0x13c0>
    8588:	d9402217 	ldw	r5,136(sp)
    858c:	d8c02417 	ldw	r3,144(sp)
    8590:	28800017 	ldw	r2,0(r5)
    8594:	29400104 	addi	r5,r5,4
    8598:	d9402215 	stw	r5,136(sp)
    859c:	10c0000d 	sth	r3,0(r2)
    85a0:	003bca06 	br	74cc <__alt_data_end+0xfffd74cc>
    85a4:	8880100c 	andi	r2,r17,64
    85a8:	10003a26 	beq	r2,zero,8694 <___vfiprintf_internal_r+0x1298>
    85ac:	d8802217 	ldw	r2,136(sp)
    85b0:	14c0000f 	ldh	r19,0(r2)
    85b4:	10800104 	addi	r2,r2,4
    85b8:	d8802215 	stw	r2,136(sp)
    85bc:	9829d7fa 	srai	r20,r19,31
    85c0:	a005883a 	mov	r2,r20
    85c4:	003d8506 	br	7bdc <__alt_data_end+0xfffd7bdc>
    85c8:	8880100c 	andi	r2,r17,64
    85cc:	10002b26 	beq	r2,zero,867c <___vfiprintf_internal_r+0x1280>
    85d0:	d8802217 	ldw	r2,136(sp)
    85d4:	0029883a 	mov	r20,zero
    85d8:	14c0000b 	ldhu	r19,0(r2)
    85dc:	10800104 	addi	r2,r2,4
    85e0:	d8802215 	stw	r2,136(sp)
    85e4:	003d5d06 	br	7b5c <__alt_data_end+0xfffd7b5c>
    85e8:	d9402017 	ldw	r5,128(sp)
    85ec:	d9002117 	ldw	r4,132(sp)
    85f0:	d9801a04 	addi	r6,sp,104
    85f4:	d8c02a15 	stw	r3,168(sp)
    85f8:	d9c02b15 	stw	r7,172(sp)
    85fc:	00072e80 	call	72e8 <__sprint_r.part.0>
    8600:	d8c02a17 	ldw	r3,168(sp)
    8604:	d9c02b17 	ldw	r7,172(sp)
    8608:	103eb41e 	bne	r2,zero,80dc <__alt_data_end+0xfffd80dc>
    860c:	d9001b17 	ldw	r4,108(sp)
    8610:	d8801c17 	ldw	r2,112(sp)
    8614:	d811883a 	mov	r8,sp
    8618:	21400044 	addi	r5,r4,1
    861c:	003e6706 	br	7fbc <__alt_data_end+0xfffd7fbc>
    8620:	00bfffc4 	movi	r2,-1
    8624:	003c4a06 	br	7750 <__alt_data_end+0xfffd7750>
    8628:	9805883a 	mov	r2,r19
    862c:	003ee806 	br	81d0 <__alt_data_end+0xfffd81d0>
    8630:	d8c02217 	ldw	r3,136(sp)
    8634:	0029883a 	mov	r20,zero
    8638:	18800104 	addi	r2,r3,4
    863c:	1cc0000b 	ldhu	r19,0(r3)
    8640:	803f9e0e 	bge	r16,zero,84bc <__alt_data_end+0xfffd84bc>
    8644:	003dd706 	br	7da4 <__alt_data_end+0xfffd7da4>
    8648:	d8c02217 	ldw	r3,136(sp)
    864c:	d9002417 	ldw	r4,144(sp)
    8650:	18800017 	ldw	r2,0(r3)
    8654:	18c00104 	addi	r3,r3,4
    8658:	d8c02215 	stw	r3,136(sp)
    865c:	11000015 	stw	r4,0(r2)
    8660:	003b9a06 	br	74cc <__alt_data_end+0xfffd74cc>
    8664:	d8c02217 	ldw	r3,136(sp)
    8668:	0029883a 	mov	r20,zero
    866c:	18800104 	addi	r2,r3,4
    8670:	1cc0000b 	ldhu	r19,0(r3)
    8674:	803db20e 	bge	r16,zero,7d40 <__alt_data_end+0xfffd7d40>
    8678:	003fb906 	br	8560 <__alt_data_end+0xfffd8560>
    867c:	d9002217 	ldw	r4,136(sp)
    8680:	0029883a 	mov	r20,zero
    8684:	24c00017 	ldw	r19,0(r4)
    8688:	21000104 	addi	r4,r4,4
    868c:	d9002215 	stw	r4,136(sp)
    8690:	003d3206 	br	7b5c <__alt_data_end+0xfffd7b5c>
    8694:	d8c02217 	ldw	r3,136(sp)
    8698:	1cc00017 	ldw	r19,0(r3)
    869c:	18c00104 	addi	r3,r3,4
    86a0:	d8c02215 	stw	r3,136(sp)
    86a4:	9829d7fa 	srai	r20,r19,31
    86a8:	a005883a 	mov	r2,r20
    86ac:	003d4b06 	br	7bdc <__alt_data_end+0xfffd7bdc>
    86b0:	0009883a 	mov	r4,zero
    86b4:	01400044 	movi	r5,1
    86b8:	d811883a 	mov	r8,sp
    86bc:	003e4f06 	br	7ffc <__alt_data_end+0xfffd7ffc>
    86c0:	d8c02215 	stw	r3,136(sp)
    86c4:	002b883a 	mov	r21,zero
    86c8:	003db806 	br	7dac <__alt_data_end+0xfffd7dac>
    86cc:	d811883a 	mov	r8,sp
    86d0:	003e9606 	br	812c <__alt_data_end+0xfffd812c>
    86d4:	01000074 	movhi	r4,1
    86d8:	211f5d04 	addi	r4,r4,32116
    86dc:	d9002315 	stw	r4,140(sp)
    86e0:	003e6306 	br	8070 <__alt_data_end+0xfffd8070>
    86e4:	b0c00043 	ldbu	r3,1(r22)
    86e8:	8c400814 	ori	r17,r17,32
    86ec:	b5800044 	addi	r22,r22,1
    86f0:	18c03fcc 	andi	r3,r3,255
    86f4:	18c0201c 	xori	r3,r3,128
    86f8:	18ffe004 	addi	r3,r3,-128
    86fc:	003b9c06 	br	7570 <__alt_data_end+0xfffd7570>
    8700:	b809883a 	mov	r4,r23
    8704:	da002a15 	stw	r8,168(sp)
    8708:	00072500 	call	7250 <strlen>
    870c:	1029883a 	mov	r20,r2
    8710:	dd401d83 	ldbu	r21,118(sp)
    8714:	df002215 	stw	fp,136(sp)
    8718:	0021883a 	mov	r16,zero
    871c:	da002a17 	ldw	r8,168(sp)
    8720:	003c3906 	br	7808 <__alt_data_end+0xfffd7808>
    8724:	d9402017 	ldw	r5,128(sp)
    8728:	d9002117 	ldw	r4,132(sp)
    872c:	d9801a04 	addi	r6,sp,104
    8730:	00072e80 	call	72e8 <__sprint_r.part.0>
    8734:	103e691e 	bne	r2,zero,80dc <__alt_data_end+0xfffd80dc>
    8738:	d9001b17 	ldw	r4,108(sp)
    873c:	d8801c17 	ldw	r2,112(sp)
    8740:	d811883a 	mov	r8,sp
    8744:	21400044 	addi	r5,r4,1
    8748:	003e2e06 	br	8004 <__alt_data_end+0xfffd8004>
    874c:	01000074 	movhi	r4,1
    8750:	211f6104 	addi	r4,r4,32132
    8754:	d9002315 	stw	r4,140(sp)
    8758:	d9001b17 	ldw	r4,108(sp)
    875c:	21000044 	addi	r4,r4,1
    8760:	003c5e06 	br	78dc <__alt_data_end+0xfffd78dc>
    8764:	002b883a 	mov	r21,zero
    8768:	00800084 	movi	r2,2
    876c:	10803fcc 	andi	r2,r2,255
    8770:	01000044 	movi	r4,1
    8774:	11002b26 	beq	r2,r4,8824 <___vfiprintf_internal_r+0x1428>
    8778:	01000084 	movi	r4,2
    877c:	11002b1e 	bne	r2,r4,882c <___vfiprintf_internal_r+0x1430>
    8780:	1823883a 	mov	r17,r3
    8784:	003ee506 	br	831c <__alt_data_end+0xfffd831c>
    8788:	8807883a 	mov	r3,r17
    878c:	00800044 	movi	r2,1
    8790:	003ff606 	br	876c <__alt_data_end+0xfffd876c>
    8794:	00800184 	movi	r2,6
    8798:	1400012e 	bgeu	r2,r16,87a0 <___vfiprintf_internal_r+0x13a4>
    879c:	1021883a 	mov	r16,r2
    87a0:	8029883a 	mov	r20,r16
    87a4:	8027883a 	mov	r19,r16
    87a8:	80002216 	blt	r16,zero,8834 <___vfiprintf_internal_r+0x1438>
    87ac:	05c00074 	movhi	r23,1
    87b0:	df002215 	stw	fp,136(sp)
    87b4:	bddf0104 	addi	r23,r23,31748
    87b8:	003cfb06 	br	7ba8 <__alt_data_end+0xfffd7ba8>
    87bc:	d9002217 	ldw	r4,136(sp)
    87c0:	d9402417 	ldw	r5,144(sp)
    87c4:	20800017 	ldw	r2,0(r4)
    87c8:	21000104 	addi	r4,r4,4
    87cc:	d9002215 	stw	r4,136(sp)
    87d0:	11400015 	stw	r5,0(r2)
    87d4:	003b3d06 	br	74cc <__alt_data_end+0xfffd74cc>
    87d8:	01400074 	movhi	r5,1
    87dc:	295f6104 	addi	r5,r5,32132
    87e0:	d9402315 	stw	r5,140(sp)
    87e4:	d9401b17 	ldw	r5,108(sp)
    87e8:	29400044 	addi	r5,r5,1
    87ec:	003e6d06 	br	81a4 <__alt_data_end+0xfffd81a4>
    87f0:	8029883a 	mov	r20,r16
    87f4:	dd401d83 	ldbu	r21,118(sp)
    87f8:	df002215 	stw	fp,136(sp)
    87fc:	0021883a 	mov	r16,zero
    8800:	003c0106 	br	7808 <__alt_data_end+0xfffd7808>
    8804:	00c00074 	movhi	r3,1
    8808:	18df5d04 	addi	r3,r3,32116
    880c:	d8c02315 	stw	r3,140(sp)
    8810:	280d883a 	mov	r6,r5
    8814:	003c6906 	br	79bc <__alt_data_end+0xfffd79bc>
    8818:	802d883a 	mov	r22,r16
    881c:	0021883a 	mov	r16,zero
    8820:	003b5406 	br	7574 <__alt_data_end+0xfffd7574>
    8824:	1823883a 	mov	r17,r3
    8828:	003cf306 	br	7bf8 <__alt_data_end+0xfffd7bf8>
    882c:	1823883a 	mov	r17,r3
    8830:	003cad06 	br	7ae8 <__alt_data_end+0xfffd7ae8>
    8834:	0027883a 	mov	r19,zero
    8838:	003fdc06 	br	87ac <__alt_data_end+0xfffd87ac>
    883c:	d9402217 	ldw	r5,136(sp)
    8840:	8005883a 	mov	r2,r16
    8844:	b0c00043 	ldbu	r3,1(r22)
    8848:	2c000017 	ldw	r16,0(r5)
    884c:	29000104 	addi	r4,r5,4
    8850:	d9002215 	stw	r4,136(sp)
    8854:	102d883a 	mov	r22,r2
    8858:	803fa50e 	bge	r16,zero,86f0 <__alt_data_end+0xfffd86f0>
    885c:	18c03fcc 	andi	r3,r3,255
    8860:	18c0201c 	xori	r3,r3,128
    8864:	043fffc4 	movi	r16,-1
    8868:	18ffe004 	addi	r3,r3,-128
    886c:	003b4006 	br	7570 <__alt_data_end+0xfffd7570>
    8870:	d9402303 	ldbu	r5,140(sp)
    8874:	d9401d85 	stb	r5,118(sp)
    8878:	003cae06 	br	7b34 <__alt_data_end+0xfffd7b34>
    887c:	d8c02303 	ldbu	r3,140(sp)
    8880:	d8c01d85 	stb	r3,118(sp)
    8884:	003d1406 	br	7cd8 <__alt_data_end+0xfffd7cd8>
    8888:	d8c02303 	ldbu	r3,140(sp)
    888c:	d8c01d85 	stb	r3,118(sp)
    8890:	003cca06 	br	7bbc <__alt_data_end+0xfffd7bbc>
    8894:	8880004c 	andi	r2,r17,1
    8898:	002b883a 	mov	r21,zero
    889c:	10000526 	beq	r2,zero,88b4 <___vfiprintf_internal_r+0x14b8>
    88a0:	00800c04 	movi	r2,48
    88a4:	d88019c5 	stb	r2,103(sp)
    88a8:	dd002817 	ldw	r20,160(sp)
    88ac:	ddc019c4 	addi	r23,sp,103
    88b0:	003bd506 	br	7808 <__alt_data_end+0xfffd7808>
    88b4:	0029883a 	mov	r20,zero
    88b8:	ddc01a04 	addi	r23,sp,104
    88bc:	003bd206 	br	7808 <__alt_data_end+0xfffd7808>
    88c0:	d9002303 	ldbu	r4,140(sp)
    88c4:	d9001d85 	stb	r4,118(sp)
    88c8:	003da606 	br	7f64 <__alt_data_end+0xfffd7f64>
    88cc:	d8c02303 	ldbu	r3,140(sp)
    88d0:	d8c01d85 	stb	r3,118(sp)
    88d4:	003c7606 	br	7ab0 <__alt_data_end+0xfffd7ab0>
    88d8:	d8c02303 	ldbu	r3,140(sp)
    88dc:	d8c01d85 	stb	r3,118(sp)
    88e0:	003c6506 	br	7a78 <__alt_data_end+0xfffd7a78>
    88e4:	d9002303 	ldbu	r4,140(sp)
    88e8:	d9001d85 	stb	r4,118(sp)
    88ec:	003d3d06 	br	7de4 <__alt_data_end+0xfffd7de4>
    88f0:	d8c02303 	ldbu	r3,140(sp)
    88f4:	d8c01d85 	stb	r3,118(sp)
    88f8:	003d1d06 	br	7d70 <__alt_data_end+0xfffd7d70>
    88fc:	d8c02303 	ldbu	r3,140(sp)
    8900:	d8c01d85 	stb	r3,118(sp)
    8904:	003d0306 	br	7d14 <__alt_data_end+0xfffd7d14>

00008908 <__vfiprintf_internal>:
    8908:	008000b4 	movhi	r2,2
    890c:	10a6a604 	addi	r2,r2,-25960
    8910:	300f883a 	mov	r7,r6
    8914:	280d883a 	mov	r6,r5
    8918:	200b883a 	mov	r5,r4
    891c:	11000017 	ldw	r4,0(r2)
    8920:	00073fc1 	jmpi	73fc <___vfiprintf_internal_r>

00008924 <__sbprintf>:
    8924:	2880030b 	ldhu	r2,12(r5)
    8928:	2ac01917 	ldw	r11,100(r5)
    892c:	2a80038b 	ldhu	r10,14(r5)
    8930:	2a400717 	ldw	r9,28(r5)
    8934:	2a000917 	ldw	r8,36(r5)
    8938:	defee204 	addi	sp,sp,-1144
    893c:	00c10004 	movi	r3,1024
    8940:	dc011a15 	stw	r16,1128(sp)
    8944:	10bfff4c 	andi	r2,r2,65533
    8948:	2821883a 	mov	r16,r5
    894c:	d8cb883a 	add	r5,sp,r3
    8950:	dc811c15 	stw	r18,1136(sp)
    8954:	dc411b15 	stw	r17,1132(sp)
    8958:	dfc11d15 	stw	ra,1140(sp)
    895c:	2025883a 	mov	r18,r4
    8960:	d881030d 	sth	r2,1036(sp)
    8964:	dac11915 	stw	r11,1124(sp)
    8968:	da81038d 	sth	r10,1038(sp)
    896c:	da410715 	stw	r9,1052(sp)
    8970:	da010915 	stw	r8,1060(sp)
    8974:	dec10015 	stw	sp,1024(sp)
    8978:	dec10415 	stw	sp,1040(sp)
    897c:	d8c10215 	stw	r3,1032(sp)
    8980:	d8c10515 	stw	r3,1044(sp)
    8984:	d8010615 	stw	zero,1048(sp)
    8988:	00073fc0 	call	73fc <___vfiprintf_internal_r>
    898c:	1023883a 	mov	r17,r2
    8990:	10000416 	blt	r2,zero,89a4 <__sbprintf+0x80>
    8994:	d9410004 	addi	r5,sp,1024
    8998:	9009883a 	mov	r4,r18
    899c:	00046c80 	call	46c8 <_fflush_r>
    89a0:	10000d1e 	bne	r2,zero,89d8 <__sbprintf+0xb4>
    89a4:	d881030b 	ldhu	r2,1036(sp)
    89a8:	1080100c 	andi	r2,r2,64
    89ac:	10000326 	beq	r2,zero,89bc <__sbprintf+0x98>
    89b0:	8080030b 	ldhu	r2,12(r16)
    89b4:	10801014 	ori	r2,r2,64
    89b8:	8080030d 	sth	r2,12(r16)
    89bc:	8805883a 	mov	r2,r17
    89c0:	dfc11d17 	ldw	ra,1140(sp)
    89c4:	dc811c17 	ldw	r18,1136(sp)
    89c8:	dc411b17 	ldw	r17,1132(sp)
    89cc:	dc011a17 	ldw	r16,1128(sp)
    89d0:	dec11e04 	addi	sp,sp,1144
    89d4:	f800283a 	ret
    89d8:	047fffc4 	movi	r17,-1
    89dc:	003ff106 	br	89a4 <__alt_data_end+0xfffd89a4>

000089e0 <_write_r>:
    89e0:	defffd04 	addi	sp,sp,-12
    89e4:	2805883a 	mov	r2,r5
    89e8:	dc000015 	stw	r16,0(sp)
    89ec:	040000b4 	movhi	r16,2
    89f0:	dc400115 	stw	r17,4(sp)
    89f4:	300b883a 	mov	r5,r6
    89f8:	842dbb04 	addi	r16,r16,-18708
    89fc:	2023883a 	mov	r17,r4
    8a00:	380d883a 	mov	r6,r7
    8a04:	1009883a 	mov	r4,r2
    8a08:	dfc00215 	stw	ra,8(sp)
    8a0c:	80000015 	stw	zero,0(r16)
    8a10:	000de6c0 	call	de6c <write>
    8a14:	00ffffc4 	movi	r3,-1
    8a18:	10c00526 	beq	r2,r3,8a30 <_write_r+0x50>
    8a1c:	dfc00217 	ldw	ra,8(sp)
    8a20:	dc400117 	ldw	r17,4(sp)
    8a24:	dc000017 	ldw	r16,0(sp)
    8a28:	dec00304 	addi	sp,sp,12
    8a2c:	f800283a 	ret
    8a30:	80c00017 	ldw	r3,0(r16)
    8a34:	183ff926 	beq	r3,zero,8a1c <__alt_data_end+0xfffd8a1c>
    8a38:	88c00015 	stw	r3,0(r17)
    8a3c:	003ff706 	br	8a1c <__alt_data_end+0xfffd8a1c>

00008a40 <_close_r>:
    8a40:	defffd04 	addi	sp,sp,-12
    8a44:	dc000015 	stw	r16,0(sp)
    8a48:	040000b4 	movhi	r16,2
    8a4c:	dc400115 	stw	r17,4(sp)
    8a50:	842dbb04 	addi	r16,r16,-18708
    8a54:	2023883a 	mov	r17,r4
    8a58:	2809883a 	mov	r4,r5
    8a5c:	dfc00215 	stw	ra,8(sp)
    8a60:	80000015 	stw	zero,0(r16)
    8a64:	000d37c0 	call	d37c <close>
    8a68:	00ffffc4 	movi	r3,-1
    8a6c:	10c00526 	beq	r2,r3,8a84 <_close_r+0x44>
    8a70:	dfc00217 	ldw	ra,8(sp)
    8a74:	dc400117 	ldw	r17,4(sp)
    8a78:	dc000017 	ldw	r16,0(sp)
    8a7c:	dec00304 	addi	sp,sp,12
    8a80:	f800283a 	ret
    8a84:	80c00017 	ldw	r3,0(r16)
    8a88:	183ff926 	beq	r3,zero,8a70 <__alt_data_end+0xfffd8a70>
    8a8c:	88c00015 	stw	r3,0(r17)
    8a90:	003ff706 	br	8a70 <__alt_data_end+0xfffd8a70>

00008a94 <_calloc_r>:
    8a94:	defffe04 	addi	sp,sp,-8
    8a98:	2805883a 	mov	r2,r5
    8a9c:	dc000015 	stw	r16,0(sp)
    8aa0:	300b883a 	mov	r5,r6
    8aa4:	2021883a 	mov	r16,r4
    8aa8:	1009883a 	mov	r4,r2
    8aac:	dfc00115 	stw	ra,4(sp)
    8ab0:	000aa740 	call	aa74 <__mulsi3>
    8ab4:	100b883a 	mov	r5,r2
    8ab8:	8009883a 	mov	r4,r16
    8abc:	00053580 	call	5358 <_malloc_r>
    8ac0:	10002926 	beq	r2,zero,8b68 <_calloc_r+0xd4>
    8ac4:	11bfff17 	ldw	r6,-4(r2)
    8ac8:	1021883a 	mov	r16,r2
    8acc:	00bfff04 	movi	r2,-4
    8ad0:	308c703a 	and	r6,r6,r2
    8ad4:	00c00904 	movi	r3,36
    8ad8:	308d883a 	add	r6,r6,r2
    8adc:	19801636 	bltu	r3,r6,8b38 <_calloc_r+0xa4>
    8ae0:	008004c4 	movi	r2,19
    8ae4:	11800b2e 	bgeu	r2,r6,8b14 <_calloc_r+0x80>
    8ae8:	80000015 	stw	zero,0(r16)
    8aec:	80000115 	stw	zero,4(r16)
    8af0:	008006c4 	movi	r2,27
    8af4:	11801a2e 	bgeu	r2,r6,8b60 <_calloc_r+0xcc>
    8af8:	80000215 	stw	zero,8(r16)
    8afc:	80000315 	stw	zero,12(r16)
    8b00:	30c0151e 	bne	r6,r3,8b58 <_calloc_r+0xc4>
    8b04:	80000415 	stw	zero,16(r16)
    8b08:	80800604 	addi	r2,r16,24
    8b0c:	80000515 	stw	zero,20(r16)
    8b10:	00000106 	br	8b18 <_calloc_r+0x84>
    8b14:	8005883a 	mov	r2,r16
    8b18:	10000015 	stw	zero,0(r2)
    8b1c:	10000115 	stw	zero,4(r2)
    8b20:	10000215 	stw	zero,8(r2)
    8b24:	8005883a 	mov	r2,r16
    8b28:	dfc00117 	ldw	ra,4(sp)
    8b2c:	dc000017 	ldw	r16,0(sp)
    8b30:	dec00204 	addi	sp,sp,8
    8b34:	f800283a 	ret
    8b38:	000b883a 	mov	r5,zero
    8b3c:	8009883a 	mov	r4,r16
    8b40:	0005d900 	call	5d90 <memset>
    8b44:	8005883a 	mov	r2,r16
    8b48:	dfc00117 	ldw	ra,4(sp)
    8b4c:	dc000017 	ldw	r16,0(sp)
    8b50:	dec00204 	addi	sp,sp,8
    8b54:	f800283a 	ret
    8b58:	80800404 	addi	r2,r16,16
    8b5c:	003fee06 	br	8b18 <__alt_data_end+0xfffd8b18>
    8b60:	80800204 	addi	r2,r16,8
    8b64:	003fec06 	br	8b18 <__alt_data_end+0xfffd8b18>
    8b68:	0005883a 	mov	r2,zero
    8b6c:	003fee06 	br	8b28 <__alt_data_end+0xfffd8b28>

00008b70 <_fclose_r>:
    8b70:	28003926 	beq	r5,zero,8c58 <_fclose_r+0xe8>
    8b74:	defffc04 	addi	sp,sp,-16
    8b78:	dc400115 	stw	r17,4(sp)
    8b7c:	dc000015 	stw	r16,0(sp)
    8b80:	dfc00315 	stw	ra,12(sp)
    8b84:	dc800215 	stw	r18,8(sp)
    8b88:	2023883a 	mov	r17,r4
    8b8c:	2821883a 	mov	r16,r5
    8b90:	20000226 	beq	r4,zero,8b9c <_fclose_r+0x2c>
    8b94:	20800e17 	ldw	r2,56(r4)
    8b98:	10002726 	beq	r2,zero,8c38 <_fclose_r+0xc8>
    8b9c:	8080030f 	ldh	r2,12(r16)
    8ba0:	1000071e 	bne	r2,zero,8bc0 <_fclose_r+0x50>
    8ba4:	0005883a 	mov	r2,zero
    8ba8:	dfc00317 	ldw	ra,12(sp)
    8bac:	dc800217 	ldw	r18,8(sp)
    8bb0:	dc400117 	ldw	r17,4(sp)
    8bb4:	dc000017 	ldw	r16,0(sp)
    8bb8:	dec00404 	addi	sp,sp,16
    8bbc:	f800283a 	ret
    8bc0:	800b883a 	mov	r5,r16
    8bc4:	8809883a 	mov	r4,r17
    8bc8:	00044ac0 	call	44ac <__sflush_r>
    8bcc:	1025883a 	mov	r18,r2
    8bd0:	80800b17 	ldw	r2,44(r16)
    8bd4:	10000426 	beq	r2,zero,8be8 <_fclose_r+0x78>
    8bd8:	81400717 	ldw	r5,28(r16)
    8bdc:	8809883a 	mov	r4,r17
    8be0:	103ee83a 	callr	r2
    8be4:	10001616 	blt	r2,zero,8c40 <_fclose_r+0xd0>
    8be8:	8080030b 	ldhu	r2,12(r16)
    8bec:	1080200c 	andi	r2,r2,128
    8bf0:	1000151e 	bne	r2,zero,8c48 <_fclose_r+0xd8>
    8bf4:	81400c17 	ldw	r5,48(r16)
    8bf8:	28000526 	beq	r5,zero,8c10 <_fclose_r+0xa0>
    8bfc:	80801004 	addi	r2,r16,64
    8c00:	28800226 	beq	r5,r2,8c0c <_fclose_r+0x9c>
    8c04:	8809883a 	mov	r4,r17
    8c08:	0004c280 	call	4c28 <_free_r>
    8c0c:	80000c15 	stw	zero,48(r16)
    8c10:	81401117 	ldw	r5,68(r16)
    8c14:	28000326 	beq	r5,zero,8c24 <_fclose_r+0xb4>
    8c18:	8809883a 	mov	r4,r17
    8c1c:	0004c280 	call	4c28 <_free_r>
    8c20:	80001115 	stw	zero,68(r16)
    8c24:	0004ac40 	call	4ac4 <__sfp_lock_acquire>
    8c28:	8000030d 	sth	zero,12(r16)
    8c2c:	0004ac80 	call	4ac8 <__sfp_lock_release>
    8c30:	9005883a 	mov	r2,r18
    8c34:	003fdc06 	br	8ba8 <__alt_data_end+0xfffd8ba8>
    8c38:	0004ab40 	call	4ab4 <__sinit>
    8c3c:	003fd706 	br	8b9c <__alt_data_end+0xfffd8b9c>
    8c40:	04bfffc4 	movi	r18,-1
    8c44:	003fe806 	br	8be8 <__alt_data_end+0xfffd8be8>
    8c48:	81400417 	ldw	r5,16(r16)
    8c4c:	8809883a 	mov	r4,r17
    8c50:	0004c280 	call	4c28 <_free_r>
    8c54:	003fe706 	br	8bf4 <__alt_data_end+0xfffd8bf4>
    8c58:	0005883a 	mov	r2,zero
    8c5c:	f800283a 	ret

00008c60 <fclose>:
    8c60:	008000b4 	movhi	r2,2
    8c64:	10a6a604 	addi	r2,r2,-25960
    8c68:	200b883a 	mov	r5,r4
    8c6c:	11000017 	ldw	r4,0(r2)
    8c70:	0008b701 	jmpi	8b70 <_fclose_r>

00008c74 <__fputwc>:
    8c74:	defff804 	addi	sp,sp,-32
    8c78:	dcc00415 	stw	r19,16(sp)
    8c7c:	dc800315 	stw	r18,12(sp)
    8c80:	dc000115 	stw	r16,4(sp)
    8c84:	dfc00715 	stw	ra,28(sp)
    8c88:	dd400615 	stw	r21,24(sp)
    8c8c:	dd000515 	stw	r20,20(sp)
    8c90:	dc400215 	stw	r17,8(sp)
    8c94:	2027883a 	mov	r19,r4
    8c98:	2825883a 	mov	r18,r5
    8c9c:	3021883a 	mov	r16,r6
    8ca0:	00051480 	call	5148 <__locale_mb_cur_max>
    8ca4:	00c00044 	movi	r3,1
    8ca8:	10c03e26 	beq	r2,r3,8da4 <__fputwc+0x130>
    8cac:	81c01704 	addi	r7,r16,92
    8cb0:	900d883a 	mov	r6,r18
    8cb4:	d80b883a 	mov	r5,sp
    8cb8:	9809883a 	mov	r4,r19
    8cbc:	0009ccc0 	call	9ccc <_wcrtomb_r>
    8cc0:	1029883a 	mov	r20,r2
    8cc4:	00bfffc4 	movi	r2,-1
    8cc8:	a0802026 	beq	r20,r2,8d4c <__fputwc+0xd8>
    8ccc:	d9400003 	ldbu	r5,0(sp)
    8cd0:	a0001c26 	beq	r20,zero,8d44 <__fputwc+0xd0>
    8cd4:	0023883a 	mov	r17,zero
    8cd8:	05400284 	movi	r21,10
    8cdc:	00000906 	br	8d04 <__fputwc+0x90>
    8ce0:	80800017 	ldw	r2,0(r16)
    8ce4:	11400005 	stb	r5,0(r2)
    8ce8:	80c00017 	ldw	r3,0(r16)
    8cec:	18c00044 	addi	r3,r3,1
    8cf0:	80c00015 	stw	r3,0(r16)
    8cf4:	8c400044 	addi	r17,r17,1
    8cf8:	dc45883a 	add	r2,sp,r17
    8cfc:	8d00112e 	bgeu	r17,r20,8d44 <__fputwc+0xd0>
    8d00:	11400003 	ldbu	r5,0(r2)
    8d04:	80c00217 	ldw	r3,8(r16)
    8d08:	18ffffc4 	addi	r3,r3,-1
    8d0c:	80c00215 	stw	r3,8(r16)
    8d10:	183ff30e 	bge	r3,zero,8ce0 <__alt_data_end+0xfffd8ce0>
    8d14:	80800617 	ldw	r2,24(r16)
    8d18:	18801916 	blt	r3,r2,8d80 <__fputwc+0x10c>
    8d1c:	80800017 	ldw	r2,0(r16)
    8d20:	11400005 	stb	r5,0(r2)
    8d24:	80800017 	ldw	r2,0(r16)
    8d28:	10c00003 	ldbu	r3,0(r2)
    8d2c:	10800044 	addi	r2,r2,1
    8d30:	1d402326 	beq	r3,r21,8dc0 <__fputwc+0x14c>
    8d34:	80800015 	stw	r2,0(r16)
    8d38:	8c400044 	addi	r17,r17,1
    8d3c:	dc45883a 	add	r2,sp,r17
    8d40:	8d3fef36 	bltu	r17,r20,8d00 <__alt_data_end+0xfffd8d00>
    8d44:	9005883a 	mov	r2,r18
    8d48:	00000406 	br	8d5c <__fputwc+0xe8>
    8d4c:	80c0030b 	ldhu	r3,12(r16)
    8d50:	a005883a 	mov	r2,r20
    8d54:	18c01014 	ori	r3,r3,64
    8d58:	80c0030d 	sth	r3,12(r16)
    8d5c:	dfc00717 	ldw	ra,28(sp)
    8d60:	dd400617 	ldw	r21,24(sp)
    8d64:	dd000517 	ldw	r20,20(sp)
    8d68:	dcc00417 	ldw	r19,16(sp)
    8d6c:	dc800317 	ldw	r18,12(sp)
    8d70:	dc400217 	ldw	r17,8(sp)
    8d74:	dc000117 	ldw	r16,4(sp)
    8d78:	dec00804 	addi	sp,sp,32
    8d7c:	f800283a 	ret
    8d80:	800d883a 	mov	r6,r16
    8d84:	29403fcc 	andi	r5,r5,255
    8d88:	9809883a 	mov	r4,r19
    8d8c:	0009b740 	call	9b74 <__swbuf_r>
    8d90:	10bfffe0 	cmpeqi	r2,r2,-1
    8d94:	10803fcc 	andi	r2,r2,255
    8d98:	103fd626 	beq	r2,zero,8cf4 <__alt_data_end+0xfffd8cf4>
    8d9c:	00bfffc4 	movi	r2,-1
    8da0:	003fee06 	br	8d5c <__alt_data_end+0xfffd8d5c>
    8da4:	90ffffc4 	addi	r3,r18,-1
    8da8:	01003f84 	movi	r4,254
    8dac:	20ffbf36 	bltu	r4,r3,8cac <__alt_data_end+0xfffd8cac>
    8db0:	900b883a 	mov	r5,r18
    8db4:	dc800005 	stb	r18,0(sp)
    8db8:	1029883a 	mov	r20,r2
    8dbc:	003fc506 	br	8cd4 <__alt_data_end+0xfffd8cd4>
    8dc0:	800d883a 	mov	r6,r16
    8dc4:	a80b883a 	mov	r5,r21
    8dc8:	9809883a 	mov	r4,r19
    8dcc:	0009b740 	call	9b74 <__swbuf_r>
    8dd0:	10bfffe0 	cmpeqi	r2,r2,-1
    8dd4:	003fef06 	br	8d94 <__alt_data_end+0xfffd8d94>

00008dd8 <_fputwc_r>:
    8dd8:	3080030b 	ldhu	r2,12(r6)
    8ddc:	10c8000c 	andi	r3,r2,8192
    8de0:	1800051e 	bne	r3,zero,8df8 <_fputwc_r+0x20>
    8de4:	30c01917 	ldw	r3,100(r6)
    8de8:	10880014 	ori	r2,r2,8192
    8dec:	3080030d 	sth	r2,12(r6)
    8df0:	18880014 	ori	r2,r3,8192
    8df4:	30801915 	stw	r2,100(r6)
    8df8:	0008c741 	jmpi	8c74 <__fputwc>

00008dfc <fputwc>:
    8dfc:	008000b4 	movhi	r2,2
    8e00:	defffc04 	addi	sp,sp,-16
    8e04:	10a6a604 	addi	r2,r2,-25960
    8e08:	dc000115 	stw	r16,4(sp)
    8e0c:	14000017 	ldw	r16,0(r2)
    8e10:	dc400215 	stw	r17,8(sp)
    8e14:	dfc00315 	stw	ra,12(sp)
    8e18:	2023883a 	mov	r17,r4
    8e1c:	80000226 	beq	r16,zero,8e28 <fputwc+0x2c>
    8e20:	80800e17 	ldw	r2,56(r16)
    8e24:	10001026 	beq	r2,zero,8e68 <fputwc+0x6c>
    8e28:	2880030b 	ldhu	r2,12(r5)
    8e2c:	10c8000c 	andi	r3,r2,8192
    8e30:	1800051e 	bne	r3,zero,8e48 <fputwc+0x4c>
    8e34:	28c01917 	ldw	r3,100(r5)
    8e38:	10880014 	ori	r2,r2,8192
    8e3c:	2880030d 	sth	r2,12(r5)
    8e40:	18880014 	ori	r2,r3,8192
    8e44:	28801915 	stw	r2,100(r5)
    8e48:	280d883a 	mov	r6,r5
    8e4c:	8009883a 	mov	r4,r16
    8e50:	880b883a 	mov	r5,r17
    8e54:	dfc00317 	ldw	ra,12(sp)
    8e58:	dc400217 	ldw	r17,8(sp)
    8e5c:	dc000117 	ldw	r16,4(sp)
    8e60:	dec00404 	addi	sp,sp,16
    8e64:	0008c741 	jmpi	8c74 <__fputwc>
    8e68:	8009883a 	mov	r4,r16
    8e6c:	d9400015 	stw	r5,0(sp)
    8e70:	0004ab40 	call	4ab4 <__sinit>
    8e74:	d9400017 	ldw	r5,0(sp)
    8e78:	003feb06 	br	8e28 <__alt_data_end+0xfffd8e28>

00008e7c <_fstat_r>:
    8e7c:	defffd04 	addi	sp,sp,-12
    8e80:	2805883a 	mov	r2,r5
    8e84:	dc000015 	stw	r16,0(sp)
    8e88:	040000b4 	movhi	r16,2
    8e8c:	dc400115 	stw	r17,4(sp)
    8e90:	842dbb04 	addi	r16,r16,-18708
    8e94:	2023883a 	mov	r17,r4
    8e98:	300b883a 	mov	r5,r6
    8e9c:	1009883a 	mov	r4,r2
    8ea0:	dfc00215 	stw	ra,8(sp)
    8ea4:	80000015 	stw	zero,0(r16)
    8ea8:	000d4bc0 	call	d4bc <fstat>
    8eac:	00ffffc4 	movi	r3,-1
    8eb0:	10c00526 	beq	r2,r3,8ec8 <_fstat_r+0x4c>
    8eb4:	dfc00217 	ldw	ra,8(sp)
    8eb8:	dc400117 	ldw	r17,4(sp)
    8ebc:	dc000017 	ldw	r16,0(sp)
    8ec0:	dec00304 	addi	sp,sp,12
    8ec4:	f800283a 	ret
    8ec8:	80c00017 	ldw	r3,0(r16)
    8ecc:	183ff926 	beq	r3,zero,8eb4 <__alt_data_end+0xfffd8eb4>
    8ed0:	88c00015 	stw	r3,0(r17)
    8ed4:	003ff706 	br	8eb4 <__alt_data_end+0xfffd8eb4>

00008ed8 <__sfvwrite_r>:
    8ed8:	30800217 	ldw	r2,8(r6)
    8edc:	10006726 	beq	r2,zero,907c <__sfvwrite_r+0x1a4>
    8ee0:	28c0030b 	ldhu	r3,12(r5)
    8ee4:	defff404 	addi	sp,sp,-48
    8ee8:	dd400715 	stw	r21,28(sp)
    8eec:	dd000615 	stw	r20,24(sp)
    8ef0:	dc000215 	stw	r16,8(sp)
    8ef4:	dfc00b15 	stw	ra,44(sp)
    8ef8:	df000a15 	stw	fp,40(sp)
    8efc:	ddc00915 	stw	r23,36(sp)
    8f00:	dd800815 	stw	r22,32(sp)
    8f04:	dcc00515 	stw	r19,20(sp)
    8f08:	dc800415 	stw	r18,16(sp)
    8f0c:	dc400315 	stw	r17,12(sp)
    8f10:	1880020c 	andi	r2,r3,8
    8f14:	2821883a 	mov	r16,r5
    8f18:	202b883a 	mov	r21,r4
    8f1c:	3029883a 	mov	r20,r6
    8f20:	10002726 	beq	r2,zero,8fc0 <__sfvwrite_r+0xe8>
    8f24:	28800417 	ldw	r2,16(r5)
    8f28:	10002526 	beq	r2,zero,8fc0 <__sfvwrite_r+0xe8>
    8f2c:	1880008c 	andi	r2,r3,2
    8f30:	a4400017 	ldw	r17,0(r20)
    8f34:	10002a26 	beq	r2,zero,8fe0 <__sfvwrite_r+0x108>
    8f38:	05a00034 	movhi	r22,32768
    8f3c:	0027883a 	mov	r19,zero
    8f40:	0025883a 	mov	r18,zero
    8f44:	b5bf0004 	addi	r22,r22,-1024
    8f48:	980d883a 	mov	r6,r19
    8f4c:	a809883a 	mov	r4,r21
    8f50:	90004626 	beq	r18,zero,906c <__sfvwrite_r+0x194>
    8f54:	900f883a 	mov	r7,r18
    8f58:	b480022e 	bgeu	r22,r18,8f64 <__sfvwrite_r+0x8c>
    8f5c:	01e00034 	movhi	r7,32768
    8f60:	39ff0004 	addi	r7,r7,-1024
    8f64:	80800917 	ldw	r2,36(r16)
    8f68:	81400717 	ldw	r5,28(r16)
    8f6c:	103ee83a 	callr	r2
    8f70:	00805a0e 	bge	zero,r2,90dc <__sfvwrite_r+0x204>
    8f74:	a0c00217 	ldw	r3,8(r20)
    8f78:	98a7883a 	add	r19,r19,r2
    8f7c:	90a5c83a 	sub	r18,r18,r2
    8f80:	1885c83a 	sub	r2,r3,r2
    8f84:	a0800215 	stw	r2,8(r20)
    8f88:	103fef1e 	bne	r2,zero,8f48 <__alt_data_end+0xfffd8f48>
    8f8c:	0005883a 	mov	r2,zero
    8f90:	dfc00b17 	ldw	ra,44(sp)
    8f94:	df000a17 	ldw	fp,40(sp)
    8f98:	ddc00917 	ldw	r23,36(sp)
    8f9c:	dd800817 	ldw	r22,32(sp)
    8fa0:	dd400717 	ldw	r21,28(sp)
    8fa4:	dd000617 	ldw	r20,24(sp)
    8fa8:	dcc00517 	ldw	r19,20(sp)
    8fac:	dc800417 	ldw	r18,16(sp)
    8fb0:	dc400317 	ldw	r17,12(sp)
    8fb4:	dc000217 	ldw	r16,8(sp)
    8fb8:	dec00c04 	addi	sp,sp,48
    8fbc:	f800283a 	ret
    8fc0:	800b883a 	mov	r5,r16
    8fc4:	a809883a 	mov	r4,r21
    8fc8:	0002aa80 	call	2aa8 <__swsetup_r>
    8fcc:	1000ee1e 	bne	r2,zero,9388 <__sfvwrite_r+0x4b0>
    8fd0:	80c0030b 	ldhu	r3,12(r16)
    8fd4:	a4400017 	ldw	r17,0(r20)
    8fd8:	1880008c 	andi	r2,r3,2
    8fdc:	103fd61e 	bne	r2,zero,8f38 <__alt_data_end+0xfffd8f38>
    8fe0:	1880004c 	andi	r2,r3,1
    8fe4:	1000421e 	bne	r2,zero,90f0 <__sfvwrite_r+0x218>
    8fe8:	0039883a 	mov	fp,zero
    8fec:	0025883a 	mov	r18,zero
    8ff0:	90001a26 	beq	r18,zero,905c <__sfvwrite_r+0x184>
    8ff4:	1880800c 	andi	r2,r3,512
    8ff8:	84c00217 	ldw	r19,8(r16)
    8ffc:	10002126 	beq	r2,zero,9084 <__sfvwrite_r+0x1ac>
    9000:	982f883a 	mov	r23,r19
    9004:	94c09636 	bltu	r18,r19,9260 <__sfvwrite_r+0x388>
    9008:	1881200c 	andi	r2,r3,1152
    900c:	1000a11e 	bne	r2,zero,9294 <__sfvwrite_r+0x3bc>
    9010:	81000017 	ldw	r4,0(r16)
    9014:	b80d883a 	mov	r6,r23
    9018:	e00b883a 	mov	r5,fp
    901c:	00094540 	call	9454 <memmove>
    9020:	80c00217 	ldw	r3,8(r16)
    9024:	81000017 	ldw	r4,0(r16)
    9028:	9005883a 	mov	r2,r18
    902c:	1ce7c83a 	sub	r19,r3,r19
    9030:	25cf883a 	add	r7,r4,r23
    9034:	84c00215 	stw	r19,8(r16)
    9038:	81c00015 	stw	r7,0(r16)
    903c:	a0c00217 	ldw	r3,8(r20)
    9040:	e0b9883a 	add	fp,fp,r2
    9044:	90a5c83a 	sub	r18,r18,r2
    9048:	18a7c83a 	sub	r19,r3,r2
    904c:	a4c00215 	stw	r19,8(r20)
    9050:	983fce26 	beq	r19,zero,8f8c <__alt_data_end+0xfffd8f8c>
    9054:	80c0030b 	ldhu	r3,12(r16)
    9058:	903fe61e 	bne	r18,zero,8ff4 <__alt_data_end+0xfffd8ff4>
    905c:	8f000017 	ldw	fp,0(r17)
    9060:	8c800117 	ldw	r18,4(r17)
    9064:	8c400204 	addi	r17,r17,8
    9068:	003fe106 	br	8ff0 <__alt_data_end+0xfffd8ff0>
    906c:	8cc00017 	ldw	r19,0(r17)
    9070:	8c800117 	ldw	r18,4(r17)
    9074:	8c400204 	addi	r17,r17,8
    9078:	003fb306 	br	8f48 <__alt_data_end+0xfffd8f48>
    907c:	0005883a 	mov	r2,zero
    9080:	f800283a 	ret
    9084:	81000017 	ldw	r4,0(r16)
    9088:	80800417 	ldw	r2,16(r16)
    908c:	11005a36 	bltu	r2,r4,91f8 <__sfvwrite_r+0x320>
    9090:	85c00517 	ldw	r23,20(r16)
    9094:	95c05836 	bltu	r18,r23,91f8 <__sfvwrite_r+0x320>
    9098:	00a00034 	movhi	r2,32768
    909c:	10bfffc4 	addi	r2,r2,-1
    90a0:	9009883a 	mov	r4,r18
    90a4:	1480012e 	bgeu	r2,r18,90ac <__sfvwrite_r+0x1d4>
    90a8:	1009883a 	mov	r4,r2
    90ac:	b80b883a 	mov	r5,r23
    90b0:	00004d40 	call	4d4 <__divsi3>
    90b4:	b80b883a 	mov	r5,r23
    90b8:	1009883a 	mov	r4,r2
    90bc:	000aa740 	call	aa74 <__mulsi3>
    90c0:	81400717 	ldw	r5,28(r16)
    90c4:	80c00917 	ldw	r3,36(r16)
    90c8:	100f883a 	mov	r7,r2
    90cc:	e00d883a 	mov	r6,fp
    90d0:	a809883a 	mov	r4,r21
    90d4:	183ee83a 	callr	r3
    90d8:	00bfd816 	blt	zero,r2,903c <__alt_data_end+0xfffd903c>
    90dc:	8080030b 	ldhu	r2,12(r16)
    90e0:	10801014 	ori	r2,r2,64
    90e4:	8080030d 	sth	r2,12(r16)
    90e8:	00bfffc4 	movi	r2,-1
    90ec:	003fa806 	br	8f90 <__alt_data_end+0xfffd8f90>
    90f0:	0027883a 	mov	r19,zero
    90f4:	0011883a 	mov	r8,zero
    90f8:	0039883a 	mov	fp,zero
    90fc:	0025883a 	mov	r18,zero
    9100:	90001f26 	beq	r18,zero,9180 <__sfvwrite_r+0x2a8>
    9104:	40005a26 	beq	r8,zero,9270 <__sfvwrite_r+0x398>
    9108:	982d883a 	mov	r22,r19
    910c:	94c0012e 	bgeu	r18,r19,9114 <__sfvwrite_r+0x23c>
    9110:	902d883a 	mov	r22,r18
    9114:	81000017 	ldw	r4,0(r16)
    9118:	80800417 	ldw	r2,16(r16)
    911c:	b02f883a 	mov	r23,r22
    9120:	81c00517 	ldw	r7,20(r16)
    9124:	1100032e 	bgeu	r2,r4,9134 <__sfvwrite_r+0x25c>
    9128:	80c00217 	ldw	r3,8(r16)
    912c:	38c7883a 	add	r3,r7,r3
    9130:	1d801816 	blt	r3,r22,9194 <__sfvwrite_r+0x2bc>
    9134:	b1c03e16 	blt	r22,r7,9230 <__sfvwrite_r+0x358>
    9138:	80800917 	ldw	r2,36(r16)
    913c:	81400717 	ldw	r5,28(r16)
    9140:	e00d883a 	mov	r6,fp
    9144:	da000115 	stw	r8,4(sp)
    9148:	a809883a 	mov	r4,r21
    914c:	103ee83a 	callr	r2
    9150:	102f883a 	mov	r23,r2
    9154:	da000117 	ldw	r8,4(sp)
    9158:	00bfe00e 	bge	zero,r2,90dc <__alt_data_end+0xfffd90dc>
    915c:	9de7c83a 	sub	r19,r19,r23
    9160:	98001f26 	beq	r19,zero,91e0 <__sfvwrite_r+0x308>
    9164:	a0800217 	ldw	r2,8(r20)
    9168:	e5f9883a 	add	fp,fp,r23
    916c:	95e5c83a 	sub	r18,r18,r23
    9170:	15efc83a 	sub	r23,r2,r23
    9174:	a5c00215 	stw	r23,8(r20)
    9178:	b83f8426 	beq	r23,zero,8f8c <__alt_data_end+0xfffd8f8c>
    917c:	903fe11e 	bne	r18,zero,9104 <__alt_data_end+0xfffd9104>
    9180:	8f000017 	ldw	fp,0(r17)
    9184:	8c800117 	ldw	r18,4(r17)
    9188:	0011883a 	mov	r8,zero
    918c:	8c400204 	addi	r17,r17,8
    9190:	003fdb06 	br	9100 <__alt_data_end+0xfffd9100>
    9194:	180d883a 	mov	r6,r3
    9198:	e00b883a 	mov	r5,fp
    919c:	da000115 	stw	r8,4(sp)
    91a0:	d8c00015 	stw	r3,0(sp)
    91a4:	00094540 	call	9454 <memmove>
    91a8:	d8c00017 	ldw	r3,0(sp)
    91ac:	80800017 	ldw	r2,0(r16)
    91b0:	800b883a 	mov	r5,r16
    91b4:	a809883a 	mov	r4,r21
    91b8:	10c5883a 	add	r2,r2,r3
    91bc:	80800015 	stw	r2,0(r16)
    91c0:	d8c00015 	stw	r3,0(sp)
    91c4:	00046c80 	call	46c8 <_fflush_r>
    91c8:	d8c00017 	ldw	r3,0(sp)
    91cc:	da000117 	ldw	r8,4(sp)
    91d0:	103fc21e 	bne	r2,zero,90dc <__alt_data_end+0xfffd90dc>
    91d4:	182f883a 	mov	r23,r3
    91d8:	9de7c83a 	sub	r19,r19,r23
    91dc:	983fe11e 	bne	r19,zero,9164 <__alt_data_end+0xfffd9164>
    91e0:	800b883a 	mov	r5,r16
    91e4:	a809883a 	mov	r4,r21
    91e8:	00046c80 	call	46c8 <_fflush_r>
    91ec:	103fbb1e 	bne	r2,zero,90dc <__alt_data_end+0xfffd90dc>
    91f0:	0011883a 	mov	r8,zero
    91f4:	003fdb06 	br	9164 <__alt_data_end+0xfffd9164>
    91f8:	94c0012e 	bgeu	r18,r19,9200 <__sfvwrite_r+0x328>
    91fc:	9027883a 	mov	r19,r18
    9200:	980d883a 	mov	r6,r19
    9204:	e00b883a 	mov	r5,fp
    9208:	00094540 	call	9454 <memmove>
    920c:	80800217 	ldw	r2,8(r16)
    9210:	80c00017 	ldw	r3,0(r16)
    9214:	14c5c83a 	sub	r2,r2,r19
    9218:	1cc7883a 	add	r3,r3,r19
    921c:	80800215 	stw	r2,8(r16)
    9220:	80c00015 	stw	r3,0(r16)
    9224:	10004326 	beq	r2,zero,9334 <__sfvwrite_r+0x45c>
    9228:	9805883a 	mov	r2,r19
    922c:	003f8306 	br	903c <__alt_data_end+0xfffd903c>
    9230:	b00d883a 	mov	r6,r22
    9234:	e00b883a 	mov	r5,fp
    9238:	da000115 	stw	r8,4(sp)
    923c:	00094540 	call	9454 <memmove>
    9240:	80800217 	ldw	r2,8(r16)
    9244:	80c00017 	ldw	r3,0(r16)
    9248:	da000117 	ldw	r8,4(sp)
    924c:	1585c83a 	sub	r2,r2,r22
    9250:	1dad883a 	add	r22,r3,r22
    9254:	80800215 	stw	r2,8(r16)
    9258:	85800015 	stw	r22,0(r16)
    925c:	003fbf06 	br	915c <__alt_data_end+0xfffd915c>
    9260:	81000017 	ldw	r4,0(r16)
    9264:	9027883a 	mov	r19,r18
    9268:	902f883a 	mov	r23,r18
    926c:	003f6906 	br	9014 <__alt_data_end+0xfffd9014>
    9270:	900d883a 	mov	r6,r18
    9274:	01400284 	movi	r5,10
    9278:	e009883a 	mov	r4,fp
    927c:	0005b640 	call	5b64 <memchr>
    9280:	10003e26 	beq	r2,zero,937c <__sfvwrite_r+0x4a4>
    9284:	10800044 	addi	r2,r2,1
    9288:	1727c83a 	sub	r19,r2,fp
    928c:	02000044 	movi	r8,1
    9290:	003f9d06 	br	9108 <__alt_data_end+0xfffd9108>
    9294:	80800517 	ldw	r2,20(r16)
    9298:	81400417 	ldw	r5,16(r16)
    929c:	81c00017 	ldw	r7,0(r16)
    92a0:	10a7883a 	add	r19,r2,r2
    92a4:	9885883a 	add	r2,r19,r2
    92a8:	1026d7fa 	srli	r19,r2,31
    92ac:	396dc83a 	sub	r22,r7,r5
    92b0:	b1000044 	addi	r4,r22,1
    92b4:	9885883a 	add	r2,r19,r2
    92b8:	1027d07a 	srai	r19,r2,1
    92bc:	2485883a 	add	r2,r4,r18
    92c0:	980d883a 	mov	r6,r19
    92c4:	9880022e 	bgeu	r19,r2,92d0 <__sfvwrite_r+0x3f8>
    92c8:	1027883a 	mov	r19,r2
    92cc:	100d883a 	mov	r6,r2
    92d0:	18c1000c 	andi	r3,r3,1024
    92d4:	18001c26 	beq	r3,zero,9348 <__sfvwrite_r+0x470>
    92d8:	300b883a 	mov	r5,r6
    92dc:	a809883a 	mov	r4,r21
    92e0:	00053580 	call	5358 <_malloc_r>
    92e4:	102f883a 	mov	r23,r2
    92e8:	10002926 	beq	r2,zero,9390 <__sfvwrite_r+0x4b8>
    92ec:	81400417 	ldw	r5,16(r16)
    92f0:	b00d883a 	mov	r6,r22
    92f4:	1009883a 	mov	r4,r2
    92f8:	0005c480 	call	5c48 <memcpy>
    92fc:	8080030b 	ldhu	r2,12(r16)
    9300:	00fedfc4 	movi	r3,-1153
    9304:	10c4703a 	and	r2,r2,r3
    9308:	10802014 	ori	r2,r2,128
    930c:	8080030d 	sth	r2,12(r16)
    9310:	bd89883a 	add	r4,r23,r22
    9314:	9d8fc83a 	sub	r7,r19,r22
    9318:	85c00415 	stw	r23,16(r16)
    931c:	84c00515 	stw	r19,20(r16)
    9320:	81000015 	stw	r4,0(r16)
    9324:	9027883a 	mov	r19,r18
    9328:	81c00215 	stw	r7,8(r16)
    932c:	902f883a 	mov	r23,r18
    9330:	003f3806 	br	9014 <__alt_data_end+0xfffd9014>
    9334:	800b883a 	mov	r5,r16
    9338:	a809883a 	mov	r4,r21
    933c:	00046c80 	call	46c8 <_fflush_r>
    9340:	103fb926 	beq	r2,zero,9228 <__alt_data_end+0xfffd9228>
    9344:	003f6506 	br	90dc <__alt_data_end+0xfffd90dc>
    9348:	a809883a 	mov	r4,r21
    934c:	00096100 	call	9610 <_realloc_r>
    9350:	102f883a 	mov	r23,r2
    9354:	103fee1e 	bne	r2,zero,9310 <__alt_data_end+0xfffd9310>
    9358:	81400417 	ldw	r5,16(r16)
    935c:	a809883a 	mov	r4,r21
    9360:	0004c280 	call	4c28 <_free_r>
    9364:	8080030b 	ldhu	r2,12(r16)
    9368:	00ffdfc4 	movi	r3,-129
    936c:	1884703a 	and	r2,r3,r2
    9370:	00c00304 	movi	r3,12
    9374:	a8c00015 	stw	r3,0(r21)
    9378:	003f5906 	br	90e0 <__alt_data_end+0xfffd90e0>
    937c:	94c00044 	addi	r19,r18,1
    9380:	02000044 	movi	r8,1
    9384:	003f6006 	br	9108 <__alt_data_end+0xfffd9108>
    9388:	00bfffc4 	movi	r2,-1
    938c:	003f0006 	br	8f90 <__alt_data_end+0xfffd8f90>
    9390:	00800304 	movi	r2,12
    9394:	a8800015 	stw	r2,0(r21)
    9398:	8080030b 	ldhu	r2,12(r16)
    939c:	003f5006 	br	90e0 <__alt_data_end+0xfffd90e0>

000093a0 <_isatty_r>:
    93a0:	defffd04 	addi	sp,sp,-12
    93a4:	dc000015 	stw	r16,0(sp)
    93a8:	040000b4 	movhi	r16,2
    93ac:	dc400115 	stw	r17,4(sp)
    93b0:	842dbb04 	addi	r16,r16,-18708
    93b4:	2023883a 	mov	r17,r4
    93b8:	2809883a 	mov	r4,r5
    93bc:	dfc00215 	stw	ra,8(sp)
    93c0:	80000015 	stw	zero,0(r16)
    93c4:	000d8500 	call	d850 <isatty>
    93c8:	00ffffc4 	movi	r3,-1
    93cc:	10c00526 	beq	r2,r3,93e4 <_isatty_r+0x44>
    93d0:	dfc00217 	ldw	ra,8(sp)
    93d4:	dc400117 	ldw	r17,4(sp)
    93d8:	dc000017 	ldw	r16,0(sp)
    93dc:	dec00304 	addi	sp,sp,12
    93e0:	f800283a 	ret
    93e4:	80c00017 	ldw	r3,0(r16)
    93e8:	183ff926 	beq	r3,zero,93d0 <__alt_data_end+0xfffd93d0>
    93ec:	88c00015 	stw	r3,0(r17)
    93f0:	003ff706 	br	93d0 <__alt_data_end+0xfffd93d0>

000093f4 <_lseek_r>:
    93f4:	defffd04 	addi	sp,sp,-12
    93f8:	2805883a 	mov	r2,r5
    93fc:	dc000015 	stw	r16,0(sp)
    9400:	040000b4 	movhi	r16,2
    9404:	dc400115 	stw	r17,4(sp)
    9408:	300b883a 	mov	r5,r6
    940c:	842dbb04 	addi	r16,r16,-18708
    9410:	2023883a 	mov	r17,r4
    9414:	380d883a 	mov	r6,r7
    9418:	1009883a 	mov	r4,r2
    941c:	dfc00215 	stw	ra,8(sp)
    9420:	80000015 	stw	zero,0(r16)
    9424:	000da240 	call	da24 <lseek>
    9428:	00ffffc4 	movi	r3,-1
    942c:	10c00526 	beq	r2,r3,9444 <_lseek_r+0x50>
    9430:	dfc00217 	ldw	ra,8(sp)
    9434:	dc400117 	ldw	r17,4(sp)
    9438:	dc000017 	ldw	r16,0(sp)
    943c:	dec00304 	addi	sp,sp,12
    9440:	f800283a 	ret
    9444:	80c00017 	ldw	r3,0(r16)
    9448:	183ff926 	beq	r3,zero,9430 <__alt_data_end+0xfffd9430>
    944c:	88c00015 	stw	r3,0(r17)
    9450:	003ff706 	br	9430 <__alt_data_end+0xfffd9430>

00009454 <memmove>:
    9454:	2005883a 	mov	r2,r4
    9458:	29000b2e 	bgeu	r5,r4,9488 <memmove+0x34>
    945c:	298f883a 	add	r7,r5,r6
    9460:	21c0092e 	bgeu	r4,r7,9488 <memmove+0x34>
    9464:	2187883a 	add	r3,r4,r6
    9468:	198bc83a 	sub	r5,r3,r6
    946c:	30004826 	beq	r6,zero,9590 <memmove+0x13c>
    9470:	39ffffc4 	addi	r7,r7,-1
    9474:	39000003 	ldbu	r4,0(r7)
    9478:	18ffffc4 	addi	r3,r3,-1
    947c:	19000005 	stb	r4,0(r3)
    9480:	28fffb1e 	bne	r5,r3,9470 <__alt_data_end+0xfffd9470>
    9484:	f800283a 	ret
    9488:	00c003c4 	movi	r3,15
    948c:	1980412e 	bgeu	r3,r6,9594 <memmove+0x140>
    9490:	2886b03a 	or	r3,r5,r2
    9494:	18c000cc 	andi	r3,r3,3
    9498:	1800401e 	bne	r3,zero,959c <memmove+0x148>
    949c:	33fffc04 	addi	r15,r6,-16
    94a0:	781ed13a 	srli	r15,r15,4
    94a4:	28c00104 	addi	r3,r5,4
    94a8:	13400104 	addi	r13,r2,4
    94ac:	781c913a 	slli	r14,r15,4
    94b0:	2b000204 	addi	r12,r5,8
    94b4:	12c00204 	addi	r11,r2,8
    94b8:	73800504 	addi	r14,r14,20
    94bc:	2a800304 	addi	r10,r5,12
    94c0:	12400304 	addi	r9,r2,12
    94c4:	2b9d883a 	add	r14,r5,r14
    94c8:	2811883a 	mov	r8,r5
    94cc:	100f883a 	mov	r7,r2
    94d0:	41000017 	ldw	r4,0(r8)
    94d4:	39c00404 	addi	r7,r7,16
    94d8:	18c00404 	addi	r3,r3,16
    94dc:	393ffc15 	stw	r4,-16(r7)
    94e0:	193ffc17 	ldw	r4,-16(r3)
    94e4:	6b400404 	addi	r13,r13,16
    94e8:	5ac00404 	addi	r11,r11,16
    94ec:	693ffc15 	stw	r4,-16(r13)
    94f0:	61000017 	ldw	r4,0(r12)
    94f4:	4a400404 	addi	r9,r9,16
    94f8:	42000404 	addi	r8,r8,16
    94fc:	593ffc15 	stw	r4,-16(r11)
    9500:	51000017 	ldw	r4,0(r10)
    9504:	63000404 	addi	r12,r12,16
    9508:	52800404 	addi	r10,r10,16
    950c:	493ffc15 	stw	r4,-16(r9)
    9510:	1bbfef1e 	bne	r3,r14,94d0 <__alt_data_end+0xfffd94d0>
    9514:	79000044 	addi	r4,r15,1
    9518:	2008913a 	slli	r4,r4,4
    951c:	328003cc 	andi	r10,r6,15
    9520:	02c000c4 	movi	r11,3
    9524:	1107883a 	add	r3,r2,r4
    9528:	290b883a 	add	r5,r5,r4
    952c:	5a801e2e 	bgeu	r11,r10,95a8 <memmove+0x154>
    9530:	1813883a 	mov	r9,r3
    9534:	2811883a 	mov	r8,r5
    9538:	500f883a 	mov	r7,r10
    953c:	41000017 	ldw	r4,0(r8)
    9540:	4a400104 	addi	r9,r9,4
    9544:	39ffff04 	addi	r7,r7,-4
    9548:	493fff15 	stw	r4,-4(r9)
    954c:	42000104 	addi	r8,r8,4
    9550:	59fffa36 	bltu	r11,r7,953c <__alt_data_end+0xfffd953c>
    9554:	513fff04 	addi	r4,r10,-4
    9558:	2008d0ba 	srli	r4,r4,2
    955c:	318000cc 	andi	r6,r6,3
    9560:	21000044 	addi	r4,r4,1
    9564:	2109883a 	add	r4,r4,r4
    9568:	2109883a 	add	r4,r4,r4
    956c:	1907883a 	add	r3,r3,r4
    9570:	290b883a 	add	r5,r5,r4
    9574:	30000b26 	beq	r6,zero,95a4 <memmove+0x150>
    9578:	198d883a 	add	r6,r3,r6
    957c:	29c00003 	ldbu	r7,0(r5)
    9580:	18c00044 	addi	r3,r3,1
    9584:	29400044 	addi	r5,r5,1
    9588:	19ffffc5 	stb	r7,-1(r3)
    958c:	19bffb1e 	bne	r3,r6,957c <__alt_data_end+0xfffd957c>
    9590:	f800283a 	ret
    9594:	1007883a 	mov	r3,r2
    9598:	003ff606 	br	9574 <__alt_data_end+0xfffd9574>
    959c:	1007883a 	mov	r3,r2
    95a0:	003ff506 	br	9578 <__alt_data_end+0xfffd9578>
    95a4:	f800283a 	ret
    95a8:	500d883a 	mov	r6,r10
    95ac:	003ff106 	br	9574 <__alt_data_end+0xfffd9574>

000095b0 <_read_r>:
    95b0:	defffd04 	addi	sp,sp,-12
    95b4:	2805883a 	mov	r2,r5
    95b8:	dc000015 	stw	r16,0(sp)
    95bc:	040000b4 	movhi	r16,2
    95c0:	dc400115 	stw	r17,4(sp)
    95c4:	300b883a 	mov	r5,r6
    95c8:	842dbb04 	addi	r16,r16,-18708
    95cc:	2023883a 	mov	r17,r4
    95d0:	380d883a 	mov	r6,r7
    95d4:	1009883a 	mov	r4,r2
    95d8:	dfc00215 	stw	ra,8(sp)
    95dc:	80000015 	stw	zero,0(r16)
    95e0:	000dbf80 	call	dbf8 <read>
    95e4:	00ffffc4 	movi	r3,-1
    95e8:	10c00526 	beq	r2,r3,9600 <_read_r+0x50>
    95ec:	dfc00217 	ldw	ra,8(sp)
    95f0:	dc400117 	ldw	r17,4(sp)
    95f4:	dc000017 	ldw	r16,0(sp)
    95f8:	dec00304 	addi	sp,sp,12
    95fc:	f800283a 	ret
    9600:	80c00017 	ldw	r3,0(r16)
    9604:	183ff926 	beq	r3,zero,95ec <__alt_data_end+0xfffd95ec>
    9608:	88c00015 	stw	r3,0(r17)
    960c:	003ff706 	br	95ec <__alt_data_end+0xfffd95ec>

00009610 <_realloc_r>:
    9610:	defff604 	addi	sp,sp,-40
    9614:	dc800215 	stw	r18,8(sp)
    9618:	dfc00915 	stw	ra,36(sp)
    961c:	df000815 	stw	fp,32(sp)
    9620:	ddc00715 	stw	r23,28(sp)
    9624:	dd800615 	stw	r22,24(sp)
    9628:	dd400515 	stw	r21,20(sp)
    962c:	dd000415 	stw	r20,16(sp)
    9630:	dcc00315 	stw	r19,12(sp)
    9634:	dc400115 	stw	r17,4(sp)
    9638:	dc000015 	stw	r16,0(sp)
    963c:	3025883a 	mov	r18,r6
    9640:	2800b726 	beq	r5,zero,9920 <_realloc_r+0x310>
    9644:	282b883a 	mov	r21,r5
    9648:	2029883a 	mov	r20,r4
    964c:	000e0900 	call	e090 <__malloc_lock>
    9650:	a8bfff17 	ldw	r2,-4(r21)
    9654:	043fff04 	movi	r16,-4
    9658:	90c002c4 	addi	r3,r18,11
    965c:	01000584 	movi	r4,22
    9660:	acfffe04 	addi	r19,r21,-8
    9664:	1420703a 	and	r16,r2,r16
    9668:	20c0332e 	bgeu	r4,r3,9738 <_realloc_r+0x128>
    966c:	047ffe04 	movi	r17,-8
    9670:	1c62703a 	and	r17,r3,r17
    9674:	8807883a 	mov	r3,r17
    9678:	88005816 	blt	r17,zero,97dc <_realloc_r+0x1cc>
    967c:	8c805736 	bltu	r17,r18,97dc <_realloc_r+0x1cc>
    9680:	80c0300e 	bge	r16,r3,9744 <_realloc_r+0x134>
    9684:	070000b4 	movhi	fp,2
    9688:	e7211e04 	addi	fp,fp,-31624
    968c:	e1c00217 	ldw	r7,8(fp)
    9690:	9c09883a 	add	r4,r19,r16
    9694:	22000117 	ldw	r8,4(r4)
    9698:	21c06326 	beq	r4,r7,9828 <_realloc_r+0x218>
    969c:	017fff84 	movi	r5,-2
    96a0:	414a703a 	and	r5,r8,r5
    96a4:	214b883a 	add	r5,r4,r5
    96a8:	29800117 	ldw	r6,4(r5)
    96ac:	3180004c 	andi	r6,r6,1
    96b0:	30003f26 	beq	r6,zero,97b0 <_realloc_r+0x1a0>
    96b4:	1080004c 	andi	r2,r2,1
    96b8:	10008326 	beq	r2,zero,98c8 <_realloc_r+0x2b8>
    96bc:	900b883a 	mov	r5,r18
    96c0:	a009883a 	mov	r4,r20
    96c4:	00053580 	call	5358 <_malloc_r>
    96c8:	1025883a 	mov	r18,r2
    96cc:	10011e26 	beq	r2,zero,9b48 <_realloc_r+0x538>
    96d0:	a93fff17 	ldw	r4,-4(r21)
    96d4:	10fffe04 	addi	r3,r2,-8
    96d8:	00bfff84 	movi	r2,-2
    96dc:	2084703a 	and	r2,r4,r2
    96e0:	9885883a 	add	r2,r19,r2
    96e4:	1880ee26 	beq	r3,r2,9aa0 <_realloc_r+0x490>
    96e8:	81bfff04 	addi	r6,r16,-4
    96ec:	00800904 	movi	r2,36
    96f0:	1180b836 	bltu	r2,r6,99d4 <_realloc_r+0x3c4>
    96f4:	00c004c4 	movi	r3,19
    96f8:	19809636 	bltu	r3,r6,9954 <_realloc_r+0x344>
    96fc:	9005883a 	mov	r2,r18
    9700:	a807883a 	mov	r3,r21
    9704:	19000017 	ldw	r4,0(r3)
    9708:	11000015 	stw	r4,0(r2)
    970c:	19000117 	ldw	r4,4(r3)
    9710:	11000115 	stw	r4,4(r2)
    9714:	18c00217 	ldw	r3,8(r3)
    9718:	10c00215 	stw	r3,8(r2)
    971c:	a80b883a 	mov	r5,r21
    9720:	a009883a 	mov	r4,r20
    9724:	0004c280 	call	4c28 <_free_r>
    9728:	a009883a 	mov	r4,r20
    972c:	000e1b00 	call	e1b0 <__malloc_unlock>
    9730:	9005883a 	mov	r2,r18
    9734:	00001206 	br	9780 <_realloc_r+0x170>
    9738:	00c00404 	movi	r3,16
    973c:	1823883a 	mov	r17,r3
    9740:	003fce06 	br	967c <__alt_data_end+0xfffd967c>
    9744:	a825883a 	mov	r18,r21
    9748:	8445c83a 	sub	r2,r16,r17
    974c:	00c003c4 	movi	r3,15
    9750:	18802636 	bltu	r3,r2,97ec <_realloc_r+0x1dc>
    9754:	99800117 	ldw	r6,4(r19)
    9758:	9c07883a 	add	r3,r19,r16
    975c:	3180004c 	andi	r6,r6,1
    9760:	3420b03a 	or	r16,r6,r16
    9764:	9c000115 	stw	r16,4(r19)
    9768:	18800117 	ldw	r2,4(r3)
    976c:	10800054 	ori	r2,r2,1
    9770:	18800115 	stw	r2,4(r3)
    9774:	a009883a 	mov	r4,r20
    9778:	000e1b00 	call	e1b0 <__malloc_unlock>
    977c:	9005883a 	mov	r2,r18
    9780:	dfc00917 	ldw	ra,36(sp)
    9784:	df000817 	ldw	fp,32(sp)
    9788:	ddc00717 	ldw	r23,28(sp)
    978c:	dd800617 	ldw	r22,24(sp)
    9790:	dd400517 	ldw	r21,20(sp)
    9794:	dd000417 	ldw	r20,16(sp)
    9798:	dcc00317 	ldw	r19,12(sp)
    979c:	dc800217 	ldw	r18,8(sp)
    97a0:	dc400117 	ldw	r17,4(sp)
    97a4:	dc000017 	ldw	r16,0(sp)
    97a8:	dec00a04 	addi	sp,sp,40
    97ac:	f800283a 	ret
    97b0:	017fff04 	movi	r5,-4
    97b4:	414a703a 	and	r5,r8,r5
    97b8:	814d883a 	add	r6,r16,r5
    97bc:	30c01f16 	blt	r6,r3,983c <_realloc_r+0x22c>
    97c0:	20800317 	ldw	r2,12(r4)
    97c4:	20c00217 	ldw	r3,8(r4)
    97c8:	a825883a 	mov	r18,r21
    97cc:	3021883a 	mov	r16,r6
    97d0:	18800315 	stw	r2,12(r3)
    97d4:	10c00215 	stw	r3,8(r2)
    97d8:	003fdb06 	br	9748 <__alt_data_end+0xfffd9748>
    97dc:	00800304 	movi	r2,12
    97e0:	a0800015 	stw	r2,0(r20)
    97e4:	0005883a 	mov	r2,zero
    97e8:	003fe506 	br	9780 <__alt_data_end+0xfffd9780>
    97ec:	98c00117 	ldw	r3,4(r19)
    97f0:	9c4b883a 	add	r5,r19,r17
    97f4:	11000054 	ori	r4,r2,1
    97f8:	18c0004c 	andi	r3,r3,1
    97fc:	1c62b03a 	or	r17,r3,r17
    9800:	9c400115 	stw	r17,4(r19)
    9804:	29000115 	stw	r4,4(r5)
    9808:	2885883a 	add	r2,r5,r2
    980c:	10c00117 	ldw	r3,4(r2)
    9810:	29400204 	addi	r5,r5,8
    9814:	a009883a 	mov	r4,r20
    9818:	18c00054 	ori	r3,r3,1
    981c:	10c00115 	stw	r3,4(r2)
    9820:	0004c280 	call	4c28 <_free_r>
    9824:	003fd306 	br	9774 <__alt_data_end+0xfffd9774>
    9828:	017fff04 	movi	r5,-4
    982c:	414a703a 	and	r5,r8,r5
    9830:	89800404 	addi	r6,r17,16
    9834:	8151883a 	add	r8,r16,r5
    9838:	4180590e 	bge	r8,r6,99a0 <_realloc_r+0x390>
    983c:	1080004c 	andi	r2,r2,1
    9840:	103f9e1e 	bne	r2,zero,96bc <__alt_data_end+0xfffd96bc>
    9844:	adbffe17 	ldw	r22,-8(r21)
    9848:	00bfff04 	movi	r2,-4
    984c:	9dadc83a 	sub	r22,r19,r22
    9850:	b1800117 	ldw	r6,4(r22)
    9854:	3084703a 	and	r2,r6,r2
    9858:	20002026 	beq	r4,zero,98dc <_realloc_r+0x2cc>
    985c:	80af883a 	add	r23,r16,r2
    9860:	b96f883a 	add	r23,r23,r5
    9864:	21c05f26 	beq	r4,r7,99e4 <_realloc_r+0x3d4>
    9868:	b8c01c16 	blt	r23,r3,98dc <_realloc_r+0x2cc>
    986c:	20800317 	ldw	r2,12(r4)
    9870:	20c00217 	ldw	r3,8(r4)
    9874:	81bfff04 	addi	r6,r16,-4
    9878:	01000904 	movi	r4,36
    987c:	18800315 	stw	r2,12(r3)
    9880:	10c00215 	stw	r3,8(r2)
    9884:	b0c00217 	ldw	r3,8(r22)
    9888:	b0800317 	ldw	r2,12(r22)
    988c:	b4800204 	addi	r18,r22,8
    9890:	18800315 	stw	r2,12(r3)
    9894:	10c00215 	stw	r3,8(r2)
    9898:	21801b36 	bltu	r4,r6,9908 <_realloc_r+0x2f8>
    989c:	008004c4 	movi	r2,19
    98a0:	1180352e 	bgeu	r2,r6,9978 <_realloc_r+0x368>
    98a4:	a8800017 	ldw	r2,0(r21)
    98a8:	b0800215 	stw	r2,8(r22)
    98ac:	a8800117 	ldw	r2,4(r21)
    98b0:	b0800315 	stw	r2,12(r22)
    98b4:	008006c4 	movi	r2,27
    98b8:	11807f36 	bltu	r2,r6,9ab8 <_realloc_r+0x4a8>
    98bc:	b0800404 	addi	r2,r22,16
    98c0:	ad400204 	addi	r21,r21,8
    98c4:	00002d06 	br	997c <_realloc_r+0x36c>
    98c8:	adbffe17 	ldw	r22,-8(r21)
    98cc:	00bfff04 	movi	r2,-4
    98d0:	9dadc83a 	sub	r22,r19,r22
    98d4:	b1000117 	ldw	r4,4(r22)
    98d8:	2084703a 	and	r2,r4,r2
    98dc:	b03f7726 	beq	r22,zero,96bc <__alt_data_end+0xfffd96bc>
    98e0:	80af883a 	add	r23,r16,r2
    98e4:	b8ff7516 	blt	r23,r3,96bc <__alt_data_end+0xfffd96bc>
    98e8:	b0800317 	ldw	r2,12(r22)
    98ec:	b0c00217 	ldw	r3,8(r22)
    98f0:	81bfff04 	addi	r6,r16,-4
    98f4:	01000904 	movi	r4,36
    98f8:	18800315 	stw	r2,12(r3)
    98fc:	10c00215 	stw	r3,8(r2)
    9900:	b4800204 	addi	r18,r22,8
    9904:	21bfe52e 	bgeu	r4,r6,989c <__alt_data_end+0xfffd989c>
    9908:	a80b883a 	mov	r5,r21
    990c:	9009883a 	mov	r4,r18
    9910:	00094540 	call	9454 <memmove>
    9914:	b821883a 	mov	r16,r23
    9918:	b027883a 	mov	r19,r22
    991c:	003f8a06 	br	9748 <__alt_data_end+0xfffd9748>
    9920:	300b883a 	mov	r5,r6
    9924:	dfc00917 	ldw	ra,36(sp)
    9928:	df000817 	ldw	fp,32(sp)
    992c:	ddc00717 	ldw	r23,28(sp)
    9930:	dd800617 	ldw	r22,24(sp)
    9934:	dd400517 	ldw	r21,20(sp)
    9938:	dd000417 	ldw	r20,16(sp)
    993c:	dcc00317 	ldw	r19,12(sp)
    9940:	dc800217 	ldw	r18,8(sp)
    9944:	dc400117 	ldw	r17,4(sp)
    9948:	dc000017 	ldw	r16,0(sp)
    994c:	dec00a04 	addi	sp,sp,40
    9950:	00053581 	jmpi	5358 <_malloc_r>
    9954:	a8c00017 	ldw	r3,0(r21)
    9958:	90c00015 	stw	r3,0(r18)
    995c:	a8c00117 	ldw	r3,4(r21)
    9960:	90c00115 	stw	r3,4(r18)
    9964:	00c006c4 	movi	r3,27
    9968:	19804536 	bltu	r3,r6,9a80 <_realloc_r+0x470>
    996c:	90800204 	addi	r2,r18,8
    9970:	a8c00204 	addi	r3,r21,8
    9974:	003f6306 	br	9704 <__alt_data_end+0xfffd9704>
    9978:	9005883a 	mov	r2,r18
    997c:	a8c00017 	ldw	r3,0(r21)
    9980:	b821883a 	mov	r16,r23
    9984:	b027883a 	mov	r19,r22
    9988:	10c00015 	stw	r3,0(r2)
    998c:	a8c00117 	ldw	r3,4(r21)
    9990:	10c00115 	stw	r3,4(r2)
    9994:	a8c00217 	ldw	r3,8(r21)
    9998:	10c00215 	stw	r3,8(r2)
    999c:	003f6a06 	br	9748 <__alt_data_end+0xfffd9748>
    99a0:	9c67883a 	add	r19,r19,r17
    99a4:	4445c83a 	sub	r2,r8,r17
    99a8:	e4c00215 	stw	r19,8(fp)
    99ac:	10800054 	ori	r2,r2,1
    99b0:	98800115 	stw	r2,4(r19)
    99b4:	a8bfff17 	ldw	r2,-4(r21)
    99b8:	a009883a 	mov	r4,r20
    99bc:	1080004c 	andi	r2,r2,1
    99c0:	1462b03a 	or	r17,r2,r17
    99c4:	ac7fff15 	stw	r17,-4(r21)
    99c8:	000e1b00 	call	e1b0 <__malloc_unlock>
    99cc:	a805883a 	mov	r2,r21
    99d0:	003f6b06 	br	9780 <__alt_data_end+0xfffd9780>
    99d4:	a80b883a 	mov	r5,r21
    99d8:	9009883a 	mov	r4,r18
    99dc:	00094540 	call	9454 <memmove>
    99e0:	003f4e06 	br	971c <__alt_data_end+0xfffd971c>
    99e4:	89000404 	addi	r4,r17,16
    99e8:	b93fbc16 	blt	r23,r4,98dc <__alt_data_end+0xfffd98dc>
    99ec:	b0800317 	ldw	r2,12(r22)
    99f0:	b0c00217 	ldw	r3,8(r22)
    99f4:	81bfff04 	addi	r6,r16,-4
    99f8:	01000904 	movi	r4,36
    99fc:	18800315 	stw	r2,12(r3)
    9a00:	10c00215 	stw	r3,8(r2)
    9a04:	b4800204 	addi	r18,r22,8
    9a08:	21804336 	bltu	r4,r6,9b18 <_realloc_r+0x508>
    9a0c:	008004c4 	movi	r2,19
    9a10:	11803f2e 	bgeu	r2,r6,9b10 <_realloc_r+0x500>
    9a14:	a8800017 	ldw	r2,0(r21)
    9a18:	b0800215 	stw	r2,8(r22)
    9a1c:	a8800117 	ldw	r2,4(r21)
    9a20:	b0800315 	stw	r2,12(r22)
    9a24:	008006c4 	movi	r2,27
    9a28:	11803f36 	bltu	r2,r6,9b28 <_realloc_r+0x518>
    9a2c:	b0800404 	addi	r2,r22,16
    9a30:	ad400204 	addi	r21,r21,8
    9a34:	a8c00017 	ldw	r3,0(r21)
    9a38:	10c00015 	stw	r3,0(r2)
    9a3c:	a8c00117 	ldw	r3,4(r21)
    9a40:	10c00115 	stw	r3,4(r2)
    9a44:	a8c00217 	ldw	r3,8(r21)
    9a48:	10c00215 	stw	r3,8(r2)
    9a4c:	b447883a 	add	r3,r22,r17
    9a50:	bc45c83a 	sub	r2,r23,r17
    9a54:	e0c00215 	stw	r3,8(fp)
    9a58:	10800054 	ori	r2,r2,1
    9a5c:	18800115 	stw	r2,4(r3)
    9a60:	b0800117 	ldw	r2,4(r22)
    9a64:	a009883a 	mov	r4,r20
    9a68:	1080004c 	andi	r2,r2,1
    9a6c:	1462b03a 	or	r17,r2,r17
    9a70:	b4400115 	stw	r17,4(r22)
    9a74:	000e1b00 	call	e1b0 <__malloc_unlock>
    9a78:	9005883a 	mov	r2,r18
    9a7c:	003f4006 	br	9780 <__alt_data_end+0xfffd9780>
    9a80:	a8c00217 	ldw	r3,8(r21)
    9a84:	90c00215 	stw	r3,8(r18)
    9a88:	a8c00317 	ldw	r3,12(r21)
    9a8c:	90c00315 	stw	r3,12(r18)
    9a90:	30801126 	beq	r6,r2,9ad8 <_realloc_r+0x4c8>
    9a94:	90800404 	addi	r2,r18,16
    9a98:	a8c00404 	addi	r3,r21,16
    9a9c:	003f1906 	br	9704 <__alt_data_end+0xfffd9704>
    9aa0:	90ffff17 	ldw	r3,-4(r18)
    9aa4:	00bfff04 	movi	r2,-4
    9aa8:	a825883a 	mov	r18,r21
    9aac:	1884703a 	and	r2,r3,r2
    9ab0:	80a1883a 	add	r16,r16,r2
    9ab4:	003f2406 	br	9748 <__alt_data_end+0xfffd9748>
    9ab8:	a8800217 	ldw	r2,8(r21)
    9abc:	b0800415 	stw	r2,16(r22)
    9ac0:	a8800317 	ldw	r2,12(r21)
    9ac4:	b0800515 	stw	r2,20(r22)
    9ac8:	31000a26 	beq	r6,r4,9af4 <_realloc_r+0x4e4>
    9acc:	b0800604 	addi	r2,r22,24
    9ad0:	ad400404 	addi	r21,r21,16
    9ad4:	003fa906 	br	997c <__alt_data_end+0xfffd997c>
    9ad8:	a9000417 	ldw	r4,16(r21)
    9adc:	90800604 	addi	r2,r18,24
    9ae0:	a8c00604 	addi	r3,r21,24
    9ae4:	91000415 	stw	r4,16(r18)
    9ae8:	a9000517 	ldw	r4,20(r21)
    9aec:	91000515 	stw	r4,20(r18)
    9af0:	003f0406 	br	9704 <__alt_data_end+0xfffd9704>
    9af4:	a8c00417 	ldw	r3,16(r21)
    9af8:	ad400604 	addi	r21,r21,24
    9afc:	b0800804 	addi	r2,r22,32
    9b00:	b0c00615 	stw	r3,24(r22)
    9b04:	a8ffff17 	ldw	r3,-4(r21)
    9b08:	b0c00715 	stw	r3,28(r22)
    9b0c:	003f9b06 	br	997c <__alt_data_end+0xfffd997c>
    9b10:	9005883a 	mov	r2,r18
    9b14:	003fc706 	br	9a34 <__alt_data_end+0xfffd9a34>
    9b18:	a80b883a 	mov	r5,r21
    9b1c:	9009883a 	mov	r4,r18
    9b20:	00094540 	call	9454 <memmove>
    9b24:	003fc906 	br	9a4c <__alt_data_end+0xfffd9a4c>
    9b28:	a8800217 	ldw	r2,8(r21)
    9b2c:	b0800415 	stw	r2,16(r22)
    9b30:	a8800317 	ldw	r2,12(r21)
    9b34:	b0800515 	stw	r2,20(r22)
    9b38:	31000726 	beq	r6,r4,9b58 <_realloc_r+0x548>
    9b3c:	b0800604 	addi	r2,r22,24
    9b40:	ad400404 	addi	r21,r21,16
    9b44:	003fbb06 	br	9a34 <__alt_data_end+0xfffd9a34>
    9b48:	a009883a 	mov	r4,r20
    9b4c:	000e1b00 	call	e1b0 <__malloc_unlock>
    9b50:	0005883a 	mov	r2,zero
    9b54:	003f0a06 	br	9780 <__alt_data_end+0xfffd9780>
    9b58:	a8c00417 	ldw	r3,16(r21)
    9b5c:	ad400604 	addi	r21,r21,24
    9b60:	b0800804 	addi	r2,r22,32
    9b64:	b0c00615 	stw	r3,24(r22)
    9b68:	a8ffff17 	ldw	r3,-4(r21)
    9b6c:	b0c00715 	stw	r3,28(r22)
    9b70:	003fb006 	br	9a34 <__alt_data_end+0xfffd9a34>

00009b74 <__swbuf_r>:
    9b74:	defffb04 	addi	sp,sp,-20
    9b78:	dcc00315 	stw	r19,12(sp)
    9b7c:	dc800215 	stw	r18,8(sp)
    9b80:	dc000015 	stw	r16,0(sp)
    9b84:	dfc00415 	stw	ra,16(sp)
    9b88:	dc400115 	stw	r17,4(sp)
    9b8c:	2025883a 	mov	r18,r4
    9b90:	2827883a 	mov	r19,r5
    9b94:	3021883a 	mov	r16,r6
    9b98:	20000226 	beq	r4,zero,9ba4 <__swbuf_r+0x30>
    9b9c:	20800e17 	ldw	r2,56(r4)
    9ba0:	10004226 	beq	r2,zero,9cac <__swbuf_r+0x138>
    9ba4:	80800617 	ldw	r2,24(r16)
    9ba8:	8100030b 	ldhu	r4,12(r16)
    9bac:	80800215 	stw	r2,8(r16)
    9bb0:	2080020c 	andi	r2,r4,8
    9bb4:	10003626 	beq	r2,zero,9c90 <__swbuf_r+0x11c>
    9bb8:	80c00417 	ldw	r3,16(r16)
    9bbc:	18003426 	beq	r3,zero,9c90 <__swbuf_r+0x11c>
    9bc0:	2088000c 	andi	r2,r4,8192
    9bc4:	9c403fcc 	andi	r17,r19,255
    9bc8:	10001a26 	beq	r2,zero,9c34 <__swbuf_r+0xc0>
    9bcc:	80800017 	ldw	r2,0(r16)
    9bd0:	81000517 	ldw	r4,20(r16)
    9bd4:	10c7c83a 	sub	r3,r2,r3
    9bd8:	1900200e 	bge	r3,r4,9c5c <__swbuf_r+0xe8>
    9bdc:	18c00044 	addi	r3,r3,1
    9be0:	81000217 	ldw	r4,8(r16)
    9be4:	11400044 	addi	r5,r2,1
    9be8:	81400015 	stw	r5,0(r16)
    9bec:	213fffc4 	addi	r4,r4,-1
    9bf0:	81000215 	stw	r4,8(r16)
    9bf4:	14c00005 	stb	r19,0(r2)
    9bf8:	80800517 	ldw	r2,20(r16)
    9bfc:	10c01e26 	beq	r2,r3,9c78 <__swbuf_r+0x104>
    9c00:	8080030b 	ldhu	r2,12(r16)
    9c04:	1080004c 	andi	r2,r2,1
    9c08:	10000226 	beq	r2,zero,9c14 <__swbuf_r+0xa0>
    9c0c:	00800284 	movi	r2,10
    9c10:	88801926 	beq	r17,r2,9c78 <__swbuf_r+0x104>
    9c14:	8805883a 	mov	r2,r17
    9c18:	dfc00417 	ldw	ra,16(sp)
    9c1c:	dcc00317 	ldw	r19,12(sp)
    9c20:	dc800217 	ldw	r18,8(sp)
    9c24:	dc400117 	ldw	r17,4(sp)
    9c28:	dc000017 	ldw	r16,0(sp)
    9c2c:	dec00504 	addi	sp,sp,20
    9c30:	f800283a 	ret
    9c34:	81401917 	ldw	r5,100(r16)
    9c38:	00b7ffc4 	movi	r2,-8193
    9c3c:	21080014 	ori	r4,r4,8192
    9c40:	2884703a 	and	r2,r5,r2
    9c44:	80801915 	stw	r2,100(r16)
    9c48:	80800017 	ldw	r2,0(r16)
    9c4c:	8100030d 	sth	r4,12(r16)
    9c50:	81000517 	ldw	r4,20(r16)
    9c54:	10c7c83a 	sub	r3,r2,r3
    9c58:	193fe016 	blt	r3,r4,9bdc <__alt_data_end+0xfffd9bdc>
    9c5c:	800b883a 	mov	r5,r16
    9c60:	9009883a 	mov	r4,r18
    9c64:	00046c80 	call	46c8 <_fflush_r>
    9c68:	1000071e 	bne	r2,zero,9c88 <__swbuf_r+0x114>
    9c6c:	80800017 	ldw	r2,0(r16)
    9c70:	00c00044 	movi	r3,1
    9c74:	003fda06 	br	9be0 <__alt_data_end+0xfffd9be0>
    9c78:	800b883a 	mov	r5,r16
    9c7c:	9009883a 	mov	r4,r18
    9c80:	00046c80 	call	46c8 <_fflush_r>
    9c84:	103fe326 	beq	r2,zero,9c14 <__alt_data_end+0xfffd9c14>
    9c88:	00bfffc4 	movi	r2,-1
    9c8c:	003fe206 	br	9c18 <__alt_data_end+0xfffd9c18>
    9c90:	800b883a 	mov	r5,r16
    9c94:	9009883a 	mov	r4,r18
    9c98:	0002aa80 	call	2aa8 <__swsetup_r>
    9c9c:	103ffa1e 	bne	r2,zero,9c88 <__alt_data_end+0xfffd9c88>
    9ca0:	8100030b 	ldhu	r4,12(r16)
    9ca4:	80c00417 	ldw	r3,16(r16)
    9ca8:	003fc506 	br	9bc0 <__alt_data_end+0xfffd9bc0>
    9cac:	0004ab40 	call	4ab4 <__sinit>
    9cb0:	003fbc06 	br	9ba4 <__alt_data_end+0xfffd9ba4>

00009cb4 <__swbuf>:
    9cb4:	008000b4 	movhi	r2,2
    9cb8:	10a6a604 	addi	r2,r2,-25960
    9cbc:	280d883a 	mov	r6,r5
    9cc0:	200b883a 	mov	r5,r4
    9cc4:	11000017 	ldw	r4,0(r2)
    9cc8:	0009b741 	jmpi	9b74 <__swbuf_r>

00009ccc <_wcrtomb_r>:
    9ccc:	defff604 	addi	sp,sp,-40
    9cd0:	008000b4 	movhi	r2,2
    9cd4:	dc800815 	stw	r18,32(sp)
    9cd8:	dc400715 	stw	r17,28(sp)
    9cdc:	dc000615 	stw	r16,24(sp)
    9ce0:	10a6aa04 	addi	r2,r2,-25944
    9ce4:	dfc00915 	stw	ra,36(sp)
    9ce8:	2021883a 	mov	r16,r4
    9cec:	3823883a 	mov	r17,r7
    9cf0:	14800017 	ldw	r18,0(r2)
    9cf4:	28001426 	beq	r5,zero,9d48 <_wcrtomb_r+0x7c>
    9cf8:	d9400415 	stw	r5,16(sp)
    9cfc:	d9800515 	stw	r6,20(sp)
    9d00:	000513c0 	call	513c <__locale_charset>
    9d04:	d9800517 	ldw	r6,20(sp)
    9d08:	d9400417 	ldw	r5,16(sp)
    9d0c:	100f883a 	mov	r7,r2
    9d10:	dc400015 	stw	r17,0(sp)
    9d14:	8009883a 	mov	r4,r16
    9d18:	903ee83a 	callr	r18
    9d1c:	00ffffc4 	movi	r3,-1
    9d20:	10c0031e 	bne	r2,r3,9d30 <_wcrtomb_r+0x64>
    9d24:	88000015 	stw	zero,0(r17)
    9d28:	00c02284 	movi	r3,138
    9d2c:	80c00015 	stw	r3,0(r16)
    9d30:	dfc00917 	ldw	ra,36(sp)
    9d34:	dc800817 	ldw	r18,32(sp)
    9d38:	dc400717 	ldw	r17,28(sp)
    9d3c:	dc000617 	ldw	r16,24(sp)
    9d40:	dec00a04 	addi	sp,sp,40
    9d44:	f800283a 	ret
    9d48:	000513c0 	call	513c <__locale_charset>
    9d4c:	100f883a 	mov	r7,r2
    9d50:	dc400015 	stw	r17,0(sp)
    9d54:	000d883a 	mov	r6,zero
    9d58:	d9400104 	addi	r5,sp,4
    9d5c:	8009883a 	mov	r4,r16
    9d60:	903ee83a 	callr	r18
    9d64:	003fed06 	br	9d1c <__alt_data_end+0xfffd9d1c>

00009d68 <wcrtomb>:
    9d68:	defff604 	addi	sp,sp,-40
    9d6c:	008000b4 	movhi	r2,2
    9d70:	dc800615 	stw	r18,24(sp)
    9d74:	dc400515 	stw	r17,20(sp)
    9d78:	10a6a604 	addi	r2,r2,-25960
    9d7c:	dfc00915 	stw	ra,36(sp)
    9d80:	dd000815 	stw	r20,32(sp)
    9d84:	dcc00715 	stw	r19,28(sp)
    9d88:	dc000415 	stw	r16,16(sp)
    9d8c:	3025883a 	mov	r18,r6
    9d90:	14400017 	ldw	r17,0(r2)
    9d94:	20001926 	beq	r4,zero,9dfc <wcrtomb+0x94>
    9d98:	008000b4 	movhi	r2,2
    9d9c:	10a6aa04 	addi	r2,r2,-25944
    9da0:	15000017 	ldw	r20,0(r2)
    9da4:	2021883a 	mov	r16,r4
    9da8:	2827883a 	mov	r19,r5
    9dac:	000513c0 	call	513c <__locale_charset>
    9db0:	100f883a 	mov	r7,r2
    9db4:	dc800015 	stw	r18,0(sp)
    9db8:	980d883a 	mov	r6,r19
    9dbc:	800b883a 	mov	r5,r16
    9dc0:	8809883a 	mov	r4,r17
    9dc4:	a03ee83a 	callr	r20
    9dc8:	00ffffc4 	movi	r3,-1
    9dcc:	10c0031e 	bne	r2,r3,9ddc <wcrtomb+0x74>
    9dd0:	90000015 	stw	zero,0(r18)
    9dd4:	00c02284 	movi	r3,138
    9dd8:	88c00015 	stw	r3,0(r17)
    9ddc:	dfc00917 	ldw	ra,36(sp)
    9de0:	dd000817 	ldw	r20,32(sp)
    9de4:	dcc00717 	ldw	r19,28(sp)
    9de8:	dc800617 	ldw	r18,24(sp)
    9dec:	dc400517 	ldw	r17,20(sp)
    9df0:	dc000417 	ldw	r16,16(sp)
    9df4:	dec00a04 	addi	sp,sp,40
    9df8:	f800283a 	ret
    9dfc:	008000b4 	movhi	r2,2
    9e00:	10a6aa04 	addi	r2,r2,-25944
    9e04:	14000017 	ldw	r16,0(r2)
    9e08:	000513c0 	call	513c <__locale_charset>
    9e0c:	100f883a 	mov	r7,r2
    9e10:	dc800015 	stw	r18,0(sp)
    9e14:	000d883a 	mov	r6,zero
    9e18:	d9400104 	addi	r5,sp,4
    9e1c:	8809883a 	mov	r4,r17
    9e20:	803ee83a 	callr	r16
    9e24:	003fe806 	br	9dc8 <__alt_data_end+0xfffd9dc8>

00009e28 <__ascii_wctomb>:
    9e28:	28000526 	beq	r5,zero,9e40 <__ascii_wctomb+0x18>
    9e2c:	00803fc4 	movi	r2,255
    9e30:	11800536 	bltu	r2,r6,9e48 <__ascii_wctomb+0x20>
    9e34:	29800005 	stb	r6,0(r5)
    9e38:	00800044 	movi	r2,1
    9e3c:	f800283a 	ret
    9e40:	0005883a 	mov	r2,zero
    9e44:	f800283a 	ret
    9e48:	00802284 	movi	r2,138
    9e4c:	20800015 	stw	r2,0(r4)
    9e50:	00bfffc4 	movi	r2,-1
    9e54:	f800283a 	ret

00009e58 <_wctomb_r>:
    9e58:	008000b4 	movhi	r2,2
    9e5c:	defff904 	addi	sp,sp,-28
    9e60:	10a6aa04 	addi	r2,r2,-25944
    9e64:	dfc00615 	stw	ra,24(sp)
    9e68:	dc400515 	stw	r17,20(sp)
    9e6c:	dc000415 	stw	r16,16(sp)
    9e70:	3823883a 	mov	r17,r7
    9e74:	14000017 	ldw	r16,0(r2)
    9e78:	d9000115 	stw	r4,4(sp)
    9e7c:	d9400215 	stw	r5,8(sp)
    9e80:	d9800315 	stw	r6,12(sp)
    9e84:	000513c0 	call	513c <__locale_charset>
    9e88:	d9800317 	ldw	r6,12(sp)
    9e8c:	d9400217 	ldw	r5,8(sp)
    9e90:	d9000117 	ldw	r4,4(sp)
    9e94:	100f883a 	mov	r7,r2
    9e98:	dc400015 	stw	r17,0(sp)
    9e9c:	803ee83a 	callr	r16
    9ea0:	dfc00617 	ldw	ra,24(sp)
    9ea4:	dc400517 	ldw	r17,20(sp)
    9ea8:	dc000417 	ldw	r16,16(sp)
    9eac:	dec00704 	addi	sp,sp,28
    9eb0:	f800283a 	ret

00009eb4 <__udivdi3>:
    9eb4:	defff404 	addi	sp,sp,-48
    9eb8:	dcc00515 	stw	r19,20(sp)
    9ebc:	dc000215 	stw	r16,8(sp)
    9ec0:	dfc00b15 	stw	ra,44(sp)
    9ec4:	df000a15 	stw	fp,40(sp)
    9ec8:	ddc00915 	stw	r23,36(sp)
    9ecc:	dd800815 	stw	r22,32(sp)
    9ed0:	dd400715 	stw	r21,28(sp)
    9ed4:	dd000615 	stw	r20,24(sp)
    9ed8:	dc800415 	stw	r18,16(sp)
    9edc:	dc400315 	stw	r17,12(sp)
    9ee0:	2027883a 	mov	r19,r4
    9ee4:	2821883a 	mov	r16,r5
    9ee8:	3800461e 	bne	r7,zero,a004 <__udivdi3+0x150>
    9eec:	3023883a 	mov	r17,r6
    9ef0:	2025883a 	mov	r18,r4
    9ef4:	2980572e 	bgeu	r5,r6,a054 <__udivdi3+0x1a0>
    9ef8:	00bfffd4 	movui	r2,65535
    9efc:	282d883a 	mov	r22,r5
    9f00:	1180b236 	bltu	r2,r6,a1cc <__udivdi3+0x318>
    9f04:	00803fc4 	movi	r2,255
    9f08:	1185803a 	cmpltu	r2,r2,r6
    9f0c:	100490fa 	slli	r2,r2,3
    9f10:	3086d83a 	srl	r3,r6,r2
    9f14:	01000074 	movhi	r4,1
    9f18:	211f6504 	addi	r4,r4,32148
    9f1c:	20c7883a 	add	r3,r4,r3
    9f20:	18c00003 	ldbu	r3,0(r3)
    9f24:	1885883a 	add	r2,r3,r2
    9f28:	00c00804 	movi	r3,32
    9f2c:	1887c83a 	sub	r3,r3,r2
    9f30:	18000526 	beq	r3,zero,9f48 <__udivdi3+0x94>
    9f34:	80e0983a 	sll	r16,r16,r3
    9f38:	9884d83a 	srl	r2,r19,r2
    9f3c:	30e2983a 	sll	r17,r6,r3
    9f40:	98e4983a 	sll	r18,r19,r3
    9f44:	142cb03a 	or	r22,r2,r16
    9f48:	882ad43a 	srli	r21,r17,16
    9f4c:	b009883a 	mov	r4,r22
    9f50:	8d3fffcc 	andi	r20,r17,65535
    9f54:	a80b883a 	mov	r5,r21
    9f58:	00006300 	call	630 <__umodsi3>
    9f5c:	b009883a 	mov	r4,r22
    9f60:	a80b883a 	mov	r5,r21
    9f64:	1027883a 	mov	r19,r2
    9f68:	00005cc0 	call	5cc <__udivsi3>
    9f6c:	100b883a 	mov	r5,r2
    9f70:	a009883a 	mov	r4,r20
    9f74:	102d883a 	mov	r22,r2
    9f78:	000aa740 	call	aa74 <__mulsi3>
    9f7c:	9826943a 	slli	r19,r19,16
    9f80:	9006d43a 	srli	r3,r18,16
    9f84:	1cc6b03a 	or	r3,r3,r19
    9f88:	1880052e 	bgeu	r3,r2,9fa0 <__udivdi3+0xec>
    9f8c:	1c47883a 	add	r3,r3,r17
    9f90:	b13fffc4 	addi	r4,r22,-1
    9f94:	1c400136 	bltu	r3,r17,9f9c <__udivdi3+0xe8>
    9f98:	18814236 	bltu	r3,r2,a4a4 <__udivdi3+0x5f0>
    9f9c:	202d883a 	mov	r22,r4
    9fa0:	18a1c83a 	sub	r16,r3,r2
    9fa4:	8009883a 	mov	r4,r16
    9fa8:	a80b883a 	mov	r5,r21
    9fac:	00006300 	call	630 <__umodsi3>
    9fb0:	1027883a 	mov	r19,r2
    9fb4:	8009883a 	mov	r4,r16
    9fb8:	a80b883a 	mov	r5,r21
    9fbc:	9826943a 	slli	r19,r19,16
    9fc0:	00005cc0 	call	5cc <__udivsi3>
    9fc4:	100b883a 	mov	r5,r2
    9fc8:	a009883a 	mov	r4,r20
    9fcc:	94bfffcc 	andi	r18,r18,65535
    9fd0:	1021883a 	mov	r16,r2
    9fd4:	94e4b03a 	or	r18,r18,r19
    9fd8:	000aa740 	call	aa74 <__mulsi3>
    9fdc:	9080052e 	bgeu	r18,r2,9ff4 <__udivdi3+0x140>
    9fe0:	8ca5883a 	add	r18,r17,r18
    9fe4:	80ffffc4 	addi	r3,r16,-1
    9fe8:	94410c36 	bltu	r18,r17,a41c <__udivdi3+0x568>
    9fec:	90810b2e 	bgeu	r18,r2,a41c <__udivdi3+0x568>
    9ff0:	843fff84 	addi	r16,r16,-2
    9ff4:	b004943a 	slli	r2,r22,16
    9ff8:	0007883a 	mov	r3,zero
    9ffc:	1404b03a 	or	r2,r2,r16
    a000:	00005e06 	br	a17c <__udivdi3+0x2c8>
    a004:	29c05b36 	bltu	r5,r7,a174 <__udivdi3+0x2c0>
    a008:	00bfffd4 	movui	r2,65535
    a00c:	11c0672e 	bgeu	r2,r7,a1ac <__udivdi3+0x2f8>
    a010:	00804034 	movhi	r2,256
    a014:	10bfffc4 	addi	r2,r2,-1
    a018:	11c10a36 	bltu	r2,r7,a444 <__udivdi3+0x590>
    a01c:	00800404 	movi	r2,16
    a020:	3886d83a 	srl	r3,r7,r2
    a024:	01000074 	movhi	r4,1
    a028:	211f6504 	addi	r4,r4,32148
    a02c:	20c7883a 	add	r3,r4,r3
    a030:	18c00003 	ldbu	r3,0(r3)
    a034:	05c00804 	movi	r23,32
    a038:	1885883a 	add	r2,r3,r2
    a03c:	b8afc83a 	sub	r23,r23,r2
    a040:	b800671e 	bne	r23,zero,a1e0 <__udivdi3+0x32c>
    a044:	3c010536 	bltu	r7,r16,a45c <__udivdi3+0x5a8>
    a048:	9985403a 	cmpgeu	r2,r19,r6
    a04c:	0007883a 	mov	r3,zero
    a050:	00004a06 	br	a17c <__udivdi3+0x2c8>
    a054:	3000041e 	bne	r6,zero,a068 <__udivdi3+0x1b4>
    a058:	000b883a 	mov	r5,zero
    a05c:	01000044 	movi	r4,1
    a060:	00005cc0 	call	5cc <__udivsi3>
    a064:	1023883a 	mov	r17,r2
    a068:	00bfffd4 	movui	r2,65535
    a06c:	1440532e 	bgeu	r2,r17,a1bc <__udivdi3+0x308>
    a070:	00804034 	movhi	r2,256
    a074:	10bfffc4 	addi	r2,r2,-1
    a078:	1440f436 	bltu	r2,r17,a44c <__udivdi3+0x598>
    a07c:	00800404 	movi	r2,16
    a080:	8886d83a 	srl	r3,r17,r2
    a084:	01000074 	movhi	r4,1
    a088:	211f6504 	addi	r4,r4,32148
    a08c:	20c7883a 	add	r3,r4,r3
    a090:	18c00003 	ldbu	r3,0(r3)
    a094:	1885883a 	add	r2,r3,r2
    a098:	00c00804 	movi	r3,32
    a09c:	1887c83a 	sub	r3,r3,r2
    a0a0:	1800a51e 	bne	r3,zero,a338 <__udivdi3+0x484>
    a0a4:	882ad43a 	srli	r21,r17,16
    a0a8:	8461c83a 	sub	r16,r16,r17
    a0ac:	8d3fffcc 	andi	r20,r17,65535
    a0b0:	00c00044 	movi	r3,1
    a0b4:	a80b883a 	mov	r5,r21
    a0b8:	8009883a 	mov	r4,r16
    a0bc:	d8c00115 	stw	r3,4(sp)
    a0c0:	00006300 	call	630 <__umodsi3>
    a0c4:	a80b883a 	mov	r5,r21
    a0c8:	8009883a 	mov	r4,r16
    a0cc:	1027883a 	mov	r19,r2
    a0d0:	00005cc0 	call	5cc <__udivsi3>
    a0d4:	a00b883a 	mov	r5,r20
    a0d8:	1009883a 	mov	r4,r2
    a0dc:	102d883a 	mov	r22,r2
    a0e0:	000aa740 	call	aa74 <__mulsi3>
    a0e4:	9826943a 	slli	r19,r19,16
    a0e8:	900ed43a 	srli	r7,r18,16
    a0ec:	d8c00117 	ldw	r3,4(sp)
    a0f0:	3cceb03a 	or	r7,r7,r19
    a0f4:	3880052e 	bgeu	r7,r2,a10c <__udivdi3+0x258>
    a0f8:	3c4f883a 	add	r7,r7,r17
    a0fc:	b13fffc4 	addi	r4,r22,-1
    a100:	3c400136 	bltu	r7,r17,a108 <__udivdi3+0x254>
    a104:	3880e436 	bltu	r7,r2,a498 <__udivdi3+0x5e4>
    a108:	202d883a 	mov	r22,r4
    a10c:	38a1c83a 	sub	r16,r7,r2
    a110:	8009883a 	mov	r4,r16
    a114:	a80b883a 	mov	r5,r21
    a118:	d8c00115 	stw	r3,4(sp)
    a11c:	00006300 	call	630 <__umodsi3>
    a120:	1027883a 	mov	r19,r2
    a124:	8009883a 	mov	r4,r16
    a128:	a80b883a 	mov	r5,r21
    a12c:	9826943a 	slli	r19,r19,16
    a130:	00005cc0 	call	5cc <__udivsi3>
    a134:	a00b883a 	mov	r5,r20
    a138:	1009883a 	mov	r4,r2
    a13c:	94bfffcc 	andi	r18,r18,65535
    a140:	1021883a 	mov	r16,r2
    a144:	94e4b03a 	or	r18,r18,r19
    a148:	000aa740 	call	aa74 <__mulsi3>
    a14c:	d8c00117 	ldw	r3,4(sp)
    a150:	9080052e 	bgeu	r18,r2,a168 <__udivdi3+0x2b4>
    a154:	8ca5883a 	add	r18,r17,r18
    a158:	813fffc4 	addi	r4,r16,-1
    a15c:	9440ad36 	bltu	r18,r17,a414 <__udivdi3+0x560>
    a160:	9080ac2e 	bgeu	r18,r2,a414 <__udivdi3+0x560>
    a164:	843fff84 	addi	r16,r16,-2
    a168:	b004943a 	slli	r2,r22,16
    a16c:	1404b03a 	or	r2,r2,r16
    a170:	00000206 	br	a17c <__udivdi3+0x2c8>
    a174:	0007883a 	mov	r3,zero
    a178:	0005883a 	mov	r2,zero
    a17c:	dfc00b17 	ldw	ra,44(sp)
    a180:	df000a17 	ldw	fp,40(sp)
    a184:	ddc00917 	ldw	r23,36(sp)
    a188:	dd800817 	ldw	r22,32(sp)
    a18c:	dd400717 	ldw	r21,28(sp)
    a190:	dd000617 	ldw	r20,24(sp)
    a194:	dcc00517 	ldw	r19,20(sp)
    a198:	dc800417 	ldw	r18,16(sp)
    a19c:	dc400317 	ldw	r17,12(sp)
    a1a0:	dc000217 	ldw	r16,8(sp)
    a1a4:	dec00c04 	addi	sp,sp,48
    a1a8:	f800283a 	ret
    a1ac:	00803fc4 	movi	r2,255
    a1b0:	11c5803a 	cmpltu	r2,r2,r7
    a1b4:	100490fa 	slli	r2,r2,3
    a1b8:	003f9906 	br	a020 <__alt_data_end+0xfffda020>
    a1bc:	00803fc4 	movi	r2,255
    a1c0:	1445803a 	cmpltu	r2,r2,r17
    a1c4:	100490fa 	slli	r2,r2,3
    a1c8:	003fad06 	br	a080 <__alt_data_end+0xfffda080>
    a1cc:	00804034 	movhi	r2,256
    a1d0:	10bfffc4 	addi	r2,r2,-1
    a1d4:	11809f36 	bltu	r2,r6,a454 <__udivdi3+0x5a0>
    a1d8:	00800404 	movi	r2,16
    a1dc:	003f4c06 	br	9f10 <__alt_data_end+0xfffd9f10>
    a1e0:	3dce983a 	sll	r7,r7,r23
    a1e4:	30b8d83a 	srl	fp,r6,r2
    a1e8:	80a2d83a 	srl	r17,r16,r2
    a1ec:	35cc983a 	sll	r6,r6,r23
    a1f0:	3f38b03a 	or	fp,r7,fp
    a1f4:	e024d43a 	srli	r18,fp,16
    a1f8:	9884d83a 	srl	r2,r19,r2
    a1fc:	85e0983a 	sll	r16,r16,r23
    a200:	8809883a 	mov	r4,r17
    a204:	900b883a 	mov	r5,r18
    a208:	d9800015 	stw	r6,0(sp)
    a20c:	1420b03a 	or	r16,r2,r16
    a210:	00006300 	call	630 <__umodsi3>
    a214:	900b883a 	mov	r5,r18
    a218:	8809883a 	mov	r4,r17
    a21c:	1029883a 	mov	r20,r2
    a220:	e5bfffcc 	andi	r22,fp,65535
    a224:	00005cc0 	call	5cc <__udivsi3>
    a228:	100b883a 	mov	r5,r2
    a22c:	b009883a 	mov	r4,r22
    a230:	102b883a 	mov	r21,r2
    a234:	000aa740 	call	aa74 <__mulsi3>
    a238:	a028943a 	slli	r20,r20,16
    a23c:	8006d43a 	srli	r3,r16,16
    a240:	1d06b03a 	or	r3,r3,r20
    a244:	1880042e 	bgeu	r3,r2,a258 <__udivdi3+0x3a4>
    a248:	1f07883a 	add	r3,r3,fp
    a24c:	a93fffc4 	addi	r4,r21,-1
    a250:	1f00892e 	bgeu	r3,fp,a478 <__udivdi3+0x5c4>
    a254:	202b883a 	mov	r21,r4
    a258:	18a3c83a 	sub	r17,r3,r2
    a25c:	8809883a 	mov	r4,r17
    a260:	900b883a 	mov	r5,r18
    a264:	00006300 	call	630 <__umodsi3>
    a268:	1029883a 	mov	r20,r2
    a26c:	8809883a 	mov	r4,r17
    a270:	900b883a 	mov	r5,r18
    a274:	a028943a 	slli	r20,r20,16
    a278:	00005cc0 	call	5cc <__udivsi3>
    a27c:	100b883a 	mov	r5,r2
    a280:	b009883a 	mov	r4,r22
    a284:	843fffcc 	andi	r16,r16,65535
    a288:	1023883a 	mov	r17,r2
    a28c:	8520b03a 	or	r16,r16,r20
    a290:	000aa740 	call	aa74 <__mulsi3>
    a294:	8080042e 	bgeu	r16,r2,a2a8 <__udivdi3+0x3f4>
    a298:	8721883a 	add	r16,r16,fp
    a29c:	88ffffc4 	addi	r3,r17,-1
    a2a0:	8700712e 	bgeu	r16,fp,a468 <__udivdi3+0x5b4>
    a2a4:	1823883a 	mov	r17,r3
    a2a8:	a80e943a 	slli	r7,r21,16
    a2ac:	d8c00017 	ldw	r3,0(sp)
    a2b0:	80a1c83a 	sub	r16,r16,r2
    a2b4:	3c64b03a 	or	r18,r7,r17
    a2b8:	1d3fffcc 	andi	r20,r3,65535
    a2bc:	9022d43a 	srli	r17,r18,16
    a2c0:	95bfffcc 	andi	r22,r18,65535
    a2c4:	a00b883a 	mov	r5,r20
    a2c8:	b009883a 	mov	r4,r22
    a2cc:	182ad43a 	srli	r21,r3,16
    a2d0:	000aa740 	call	aa74 <__mulsi3>
    a2d4:	a00b883a 	mov	r5,r20
    a2d8:	8809883a 	mov	r4,r17
    a2dc:	1039883a 	mov	fp,r2
    a2e0:	000aa740 	call	aa74 <__mulsi3>
    a2e4:	8809883a 	mov	r4,r17
    a2e8:	a80b883a 	mov	r5,r21
    a2ec:	1029883a 	mov	r20,r2
    a2f0:	000aa740 	call	aa74 <__mulsi3>
    a2f4:	a80b883a 	mov	r5,r21
    a2f8:	b009883a 	mov	r4,r22
    a2fc:	1023883a 	mov	r17,r2
    a300:	000aa740 	call	aa74 <__mulsi3>
    a304:	e006d43a 	srli	r3,fp,16
    a308:	1505883a 	add	r2,r2,r20
    a30c:	1887883a 	add	r3,r3,r2
    a310:	1d00022e 	bgeu	r3,r20,a31c <__udivdi3+0x468>
    a314:	00800074 	movhi	r2,1
    a318:	88a3883a 	add	r17,r17,r2
    a31c:	1804d43a 	srli	r2,r3,16
    a320:	1463883a 	add	r17,r2,r17
    a324:	84404436 	bltu	r16,r17,a438 <__udivdi3+0x584>
    a328:	84403e26 	beq	r16,r17,a424 <__udivdi3+0x570>
    a32c:	9005883a 	mov	r2,r18
    a330:	0007883a 	mov	r3,zero
    a334:	003f9106 	br	a17c <__alt_data_end+0xfffda17c>
    a338:	88e2983a 	sll	r17,r17,r3
    a33c:	80aed83a 	srl	r23,r16,r2
    a340:	80e0983a 	sll	r16,r16,r3
    a344:	882ad43a 	srli	r21,r17,16
    a348:	9884d83a 	srl	r2,r19,r2
    a34c:	b809883a 	mov	r4,r23
    a350:	a80b883a 	mov	r5,r21
    a354:	98e4983a 	sll	r18,r19,r3
    a358:	142cb03a 	or	r22,r2,r16
    a35c:	00006300 	call	630 <__umodsi3>
    a360:	b809883a 	mov	r4,r23
    a364:	a80b883a 	mov	r5,r21
    a368:	1027883a 	mov	r19,r2
    a36c:	8d3fffcc 	andi	r20,r17,65535
    a370:	00005cc0 	call	5cc <__udivsi3>
    a374:	a009883a 	mov	r4,r20
    a378:	100b883a 	mov	r5,r2
    a37c:	102f883a 	mov	r23,r2
    a380:	000aa740 	call	aa74 <__mulsi3>
    a384:	9826943a 	slli	r19,r19,16
    a388:	b008d43a 	srli	r4,r22,16
    a38c:	24c8b03a 	or	r4,r4,r19
    a390:	2080062e 	bgeu	r4,r2,a3ac <__udivdi3+0x4f8>
    a394:	2449883a 	add	r4,r4,r17
    a398:	b8ffffc4 	addi	r3,r23,-1
    a39c:	24403c36 	bltu	r4,r17,a490 <__udivdi3+0x5dc>
    a3a0:	20803b2e 	bgeu	r4,r2,a490 <__udivdi3+0x5dc>
    a3a4:	bdffff84 	addi	r23,r23,-2
    a3a8:	2449883a 	add	r4,r4,r17
    a3ac:	20a1c83a 	sub	r16,r4,r2
    a3b0:	a80b883a 	mov	r5,r21
    a3b4:	8009883a 	mov	r4,r16
    a3b8:	00006300 	call	630 <__umodsi3>
    a3bc:	a80b883a 	mov	r5,r21
    a3c0:	8009883a 	mov	r4,r16
    a3c4:	1027883a 	mov	r19,r2
    a3c8:	00005cc0 	call	5cc <__udivsi3>
    a3cc:	a009883a 	mov	r4,r20
    a3d0:	100b883a 	mov	r5,r2
    a3d4:	9826943a 	slli	r19,r19,16
    a3d8:	1039883a 	mov	fp,r2
    a3dc:	000aa740 	call	aa74 <__mulsi3>
    a3e0:	b13fffcc 	andi	r4,r22,65535
    a3e4:	24c8b03a 	or	r4,r4,r19
    a3e8:	2080062e 	bgeu	r4,r2,a404 <__udivdi3+0x550>
    a3ec:	2449883a 	add	r4,r4,r17
    a3f0:	e0ffffc4 	addi	r3,fp,-1
    a3f4:	24402436 	bltu	r4,r17,a488 <__udivdi3+0x5d4>
    a3f8:	2080232e 	bgeu	r4,r2,a488 <__udivdi3+0x5d4>
    a3fc:	e73fff84 	addi	fp,fp,-2
    a400:	2449883a 	add	r4,r4,r17
    a404:	b82e943a 	slli	r23,r23,16
    a408:	20a1c83a 	sub	r16,r4,r2
    a40c:	bf06b03a 	or	r3,r23,fp
    a410:	003f2806 	br	a0b4 <__alt_data_end+0xfffda0b4>
    a414:	2021883a 	mov	r16,r4
    a418:	003f5306 	br	a168 <__alt_data_end+0xfffda168>
    a41c:	1821883a 	mov	r16,r3
    a420:	003ef406 	br	9ff4 <__alt_data_end+0xfffd9ff4>
    a424:	1806943a 	slli	r3,r3,16
    a428:	9de6983a 	sll	r19,r19,r23
    a42c:	e73fffcc 	andi	fp,fp,65535
    a430:	1f07883a 	add	r3,r3,fp
    a434:	98ffbd2e 	bgeu	r19,r3,a32c <__alt_data_end+0xfffda32c>
    a438:	90bfffc4 	addi	r2,r18,-1
    a43c:	0007883a 	mov	r3,zero
    a440:	003f4e06 	br	a17c <__alt_data_end+0xfffda17c>
    a444:	00800604 	movi	r2,24
    a448:	003ef506 	br	a020 <__alt_data_end+0xfffda020>
    a44c:	00800604 	movi	r2,24
    a450:	003f0b06 	br	a080 <__alt_data_end+0xfffda080>
    a454:	00800604 	movi	r2,24
    a458:	003ead06 	br	9f10 <__alt_data_end+0xfffd9f10>
    a45c:	0007883a 	mov	r3,zero
    a460:	00800044 	movi	r2,1
    a464:	003f4506 	br	a17c <__alt_data_end+0xfffda17c>
    a468:	80bf8e2e 	bgeu	r16,r2,a2a4 <__alt_data_end+0xfffda2a4>
    a46c:	8c7fff84 	addi	r17,r17,-2
    a470:	8721883a 	add	r16,r16,fp
    a474:	003f8c06 	br	a2a8 <__alt_data_end+0xfffda2a8>
    a478:	18bf762e 	bgeu	r3,r2,a254 <__alt_data_end+0xfffda254>
    a47c:	ad7fff84 	addi	r21,r21,-2
    a480:	1f07883a 	add	r3,r3,fp
    a484:	003f7406 	br	a258 <__alt_data_end+0xfffda258>
    a488:	1839883a 	mov	fp,r3
    a48c:	003fdd06 	br	a404 <__alt_data_end+0xfffda404>
    a490:	182f883a 	mov	r23,r3
    a494:	003fc506 	br	a3ac <__alt_data_end+0xfffda3ac>
    a498:	b5bfff84 	addi	r22,r22,-2
    a49c:	3c4f883a 	add	r7,r7,r17
    a4a0:	003f1a06 	br	a10c <__alt_data_end+0xfffda10c>
    a4a4:	b5bfff84 	addi	r22,r22,-2
    a4a8:	1c47883a 	add	r3,r3,r17
    a4ac:	003ebc06 	br	9fa0 <__alt_data_end+0xfffd9fa0>

0000a4b0 <__umoddi3>:
    a4b0:	defff304 	addi	sp,sp,-52
    a4b4:	df000b15 	stw	fp,44(sp)
    a4b8:	dc400415 	stw	r17,16(sp)
    a4bc:	dc000315 	stw	r16,12(sp)
    a4c0:	dfc00c15 	stw	ra,48(sp)
    a4c4:	ddc00a15 	stw	r23,40(sp)
    a4c8:	dd800915 	stw	r22,36(sp)
    a4cc:	dd400815 	stw	r21,32(sp)
    a4d0:	dd000715 	stw	r20,28(sp)
    a4d4:	dcc00615 	stw	r19,24(sp)
    a4d8:	dc800515 	stw	r18,20(sp)
    a4dc:	2021883a 	mov	r16,r4
    a4e0:	2823883a 	mov	r17,r5
    a4e4:	2839883a 	mov	fp,r5
    a4e8:	3800401e 	bne	r7,zero,a5ec <__umoddi3+0x13c>
    a4ec:	3027883a 	mov	r19,r6
    a4f0:	2029883a 	mov	r20,r4
    a4f4:	2980552e 	bgeu	r5,r6,a64c <__umoddi3+0x19c>
    a4f8:	00bfffd4 	movui	r2,65535
    a4fc:	1180a236 	bltu	r2,r6,a788 <__umoddi3+0x2d8>
    a500:	01003fc4 	movi	r4,255
    a504:	2189803a 	cmpltu	r4,r4,r6
    a508:	200890fa 	slli	r4,r4,3
    a50c:	3104d83a 	srl	r2,r6,r4
    a510:	00c00074 	movhi	r3,1
    a514:	18df6504 	addi	r3,r3,32148
    a518:	1885883a 	add	r2,r3,r2
    a51c:	10c00003 	ldbu	r3,0(r2)
    a520:	00800804 	movi	r2,32
    a524:	1909883a 	add	r4,r3,r4
    a528:	1125c83a 	sub	r18,r2,r4
    a52c:	90000526 	beq	r18,zero,a544 <__umoddi3+0x94>
    a530:	8ca2983a 	sll	r17,r17,r18
    a534:	8108d83a 	srl	r4,r16,r4
    a538:	34a6983a 	sll	r19,r6,r18
    a53c:	84a8983a 	sll	r20,r16,r18
    a540:	2478b03a 	or	fp,r4,r17
    a544:	982cd43a 	srli	r22,r19,16
    a548:	e009883a 	mov	r4,fp
    a54c:	9dffffcc 	andi	r23,r19,65535
    a550:	b00b883a 	mov	r5,r22
    a554:	00006300 	call	630 <__umodsi3>
    a558:	b00b883a 	mov	r5,r22
    a55c:	e009883a 	mov	r4,fp
    a560:	102b883a 	mov	r21,r2
    a564:	00005cc0 	call	5cc <__udivsi3>
    a568:	100b883a 	mov	r5,r2
    a56c:	b809883a 	mov	r4,r23
    a570:	000aa740 	call	aa74 <__mulsi3>
    a574:	a82a943a 	slli	r21,r21,16
    a578:	a006d43a 	srli	r3,r20,16
    a57c:	1d46b03a 	or	r3,r3,r21
    a580:	1880032e 	bgeu	r3,r2,a590 <__umoddi3+0xe0>
    a584:	1cc7883a 	add	r3,r3,r19
    a588:	1cc00136 	bltu	r3,r19,a590 <__umoddi3+0xe0>
    a58c:	18813136 	bltu	r3,r2,aa54 <__umoddi3+0x5a4>
    a590:	18a1c83a 	sub	r16,r3,r2
    a594:	b00b883a 	mov	r5,r22
    a598:	8009883a 	mov	r4,r16
    a59c:	00006300 	call	630 <__umodsi3>
    a5a0:	b00b883a 	mov	r5,r22
    a5a4:	8009883a 	mov	r4,r16
    a5a8:	1023883a 	mov	r17,r2
    a5ac:	00005cc0 	call	5cc <__udivsi3>
    a5b0:	100b883a 	mov	r5,r2
    a5b4:	b809883a 	mov	r4,r23
    a5b8:	8822943a 	slli	r17,r17,16
    a5bc:	000aa740 	call	aa74 <__mulsi3>
    a5c0:	a0ffffcc 	andi	r3,r20,65535
    a5c4:	1c46b03a 	or	r3,r3,r17
    a5c8:	1880042e 	bgeu	r3,r2,a5dc <__umoddi3+0x12c>
    a5cc:	1cc7883a 	add	r3,r3,r19
    a5d0:	1cc00236 	bltu	r3,r19,a5dc <__umoddi3+0x12c>
    a5d4:	1880012e 	bgeu	r3,r2,a5dc <__umoddi3+0x12c>
    a5d8:	1cc7883a 	add	r3,r3,r19
    a5dc:	1885c83a 	sub	r2,r3,r2
    a5e0:	1484d83a 	srl	r2,r2,r18
    a5e4:	0007883a 	mov	r3,zero
    a5e8:	00005306 	br	a738 <__umoddi3+0x288>
    a5ec:	29c05036 	bltu	r5,r7,a730 <__umoddi3+0x280>
    a5f0:	00bfffd4 	movui	r2,65535
    a5f4:	11c05c2e 	bgeu	r2,r7,a768 <__umoddi3+0x2b8>
    a5f8:	00804034 	movhi	r2,256
    a5fc:	10bfffc4 	addi	r2,r2,-1
    a600:	11c10636 	bltu	r2,r7,aa1c <__umoddi3+0x56c>
    a604:	01000404 	movi	r4,16
    a608:	3904d83a 	srl	r2,r7,r4
    a60c:	00c00074 	movhi	r3,1
    a610:	18df6504 	addi	r3,r3,32148
    a614:	1885883a 	add	r2,r3,r2
    a618:	14c00003 	ldbu	r19,0(r2)
    a61c:	00c00804 	movi	r3,32
    a620:	9927883a 	add	r19,r19,r4
    a624:	1ce9c83a 	sub	r20,r3,r19
    a628:	a0005c1e 	bne	r20,zero,a79c <__umoddi3+0x2ec>
    a62c:	3c400136 	bltu	r7,r17,a634 <__umoddi3+0x184>
    a630:	81810a36 	bltu	r16,r6,aa5c <__umoddi3+0x5ac>
    a634:	8185c83a 	sub	r2,r16,r6
    a638:	89e3c83a 	sub	r17,r17,r7
    a63c:	8089803a 	cmpltu	r4,r16,r2
    a640:	8939c83a 	sub	fp,r17,r4
    a644:	e007883a 	mov	r3,fp
    a648:	00003b06 	br	a738 <__umoddi3+0x288>
    a64c:	3000041e 	bne	r6,zero,a660 <__umoddi3+0x1b0>
    a650:	000b883a 	mov	r5,zero
    a654:	01000044 	movi	r4,1
    a658:	00005cc0 	call	5cc <__udivsi3>
    a65c:	1027883a 	mov	r19,r2
    a660:	00bfffd4 	movui	r2,65535
    a664:	14c0442e 	bgeu	r2,r19,a778 <__umoddi3+0x2c8>
    a668:	00804034 	movhi	r2,256
    a66c:	10bfffc4 	addi	r2,r2,-1
    a670:	14c0ec36 	bltu	r2,r19,aa24 <__umoddi3+0x574>
    a674:	00800404 	movi	r2,16
    a678:	9886d83a 	srl	r3,r19,r2
    a67c:	01000074 	movhi	r4,1
    a680:	211f6504 	addi	r4,r4,32148
    a684:	20c7883a 	add	r3,r4,r3
    a688:	18c00003 	ldbu	r3,0(r3)
    a68c:	1887883a 	add	r3,r3,r2
    a690:	00800804 	movi	r2,32
    a694:	10e5c83a 	sub	r18,r2,r3
    a698:	9000ab1e 	bne	r18,zero,a948 <__umoddi3+0x498>
    a69c:	982cd43a 	srli	r22,r19,16
    a6a0:	8ce3c83a 	sub	r17,r17,r19
    a6a4:	9dffffcc 	andi	r23,r19,65535
    a6a8:	b00b883a 	mov	r5,r22
    a6ac:	8809883a 	mov	r4,r17
    a6b0:	00006300 	call	630 <__umodsi3>
    a6b4:	b00b883a 	mov	r5,r22
    a6b8:	8809883a 	mov	r4,r17
    a6bc:	102b883a 	mov	r21,r2
    a6c0:	00005cc0 	call	5cc <__udivsi3>
    a6c4:	b80b883a 	mov	r5,r23
    a6c8:	1009883a 	mov	r4,r2
    a6cc:	000aa740 	call	aa74 <__mulsi3>
    a6d0:	a82a943a 	slli	r21,r21,16
    a6d4:	a006d43a 	srli	r3,r20,16
    a6d8:	1d46b03a 	or	r3,r3,r21
    a6dc:	1880042e 	bgeu	r3,r2,a6f0 <__umoddi3+0x240>
    a6e0:	1cc7883a 	add	r3,r3,r19
    a6e4:	1cc00236 	bltu	r3,r19,a6f0 <__umoddi3+0x240>
    a6e8:	1880012e 	bgeu	r3,r2,a6f0 <__umoddi3+0x240>
    a6ec:	1cc7883a 	add	r3,r3,r19
    a6f0:	18a1c83a 	sub	r16,r3,r2
    a6f4:	b00b883a 	mov	r5,r22
    a6f8:	8009883a 	mov	r4,r16
    a6fc:	00006300 	call	630 <__umodsi3>
    a700:	1023883a 	mov	r17,r2
    a704:	b00b883a 	mov	r5,r22
    a708:	8009883a 	mov	r4,r16
    a70c:	00005cc0 	call	5cc <__udivsi3>
    a710:	8822943a 	slli	r17,r17,16
    a714:	b80b883a 	mov	r5,r23
    a718:	1009883a 	mov	r4,r2
    a71c:	000aa740 	call	aa74 <__mulsi3>
    a720:	a53fffcc 	andi	r20,r20,65535
    a724:	a446b03a 	or	r3,r20,r17
    a728:	18bfac2e 	bgeu	r3,r2,a5dc <__alt_data_end+0xfffda5dc>
    a72c:	003fa706 	br	a5cc <__alt_data_end+0xfffda5cc>
    a730:	2005883a 	mov	r2,r4
    a734:	2807883a 	mov	r3,r5
    a738:	dfc00c17 	ldw	ra,48(sp)
    a73c:	df000b17 	ldw	fp,44(sp)
    a740:	ddc00a17 	ldw	r23,40(sp)
    a744:	dd800917 	ldw	r22,36(sp)
    a748:	dd400817 	ldw	r21,32(sp)
    a74c:	dd000717 	ldw	r20,28(sp)
    a750:	dcc00617 	ldw	r19,24(sp)
    a754:	dc800517 	ldw	r18,20(sp)
    a758:	dc400417 	ldw	r17,16(sp)
    a75c:	dc000317 	ldw	r16,12(sp)
    a760:	dec00d04 	addi	sp,sp,52
    a764:	f800283a 	ret
    a768:	04c03fc4 	movi	r19,255
    a76c:	99c9803a 	cmpltu	r4,r19,r7
    a770:	200890fa 	slli	r4,r4,3
    a774:	003fa406 	br	a608 <__alt_data_end+0xfffda608>
    a778:	00803fc4 	movi	r2,255
    a77c:	14c5803a 	cmpltu	r2,r2,r19
    a780:	100490fa 	slli	r2,r2,3
    a784:	003fbc06 	br	a678 <__alt_data_end+0xfffda678>
    a788:	00804034 	movhi	r2,256
    a78c:	10bfffc4 	addi	r2,r2,-1
    a790:	1180a636 	bltu	r2,r6,aa2c <__umoddi3+0x57c>
    a794:	01000404 	movi	r4,16
    a798:	003f5c06 	br	a50c <__alt_data_end+0xfffda50c>
    a79c:	3d0e983a 	sll	r7,r7,r20
    a7a0:	34ead83a 	srl	r21,r6,r19
    a7a4:	8cc6d83a 	srl	r3,r17,r19
    a7a8:	8d10983a 	sll	r8,r17,r20
    a7ac:	3d6ab03a 	or	r21,r7,r21
    a7b0:	a82cd43a 	srli	r22,r21,16
    a7b4:	84e2d83a 	srl	r17,r16,r19
    a7b8:	1809883a 	mov	r4,r3
    a7bc:	b00b883a 	mov	r5,r22
    a7c0:	8a22b03a 	or	r17,r17,r8
    a7c4:	3524983a 	sll	r18,r6,r20
    a7c8:	dc400015 	stw	r17,0(sp)
    a7cc:	d8c00115 	stw	r3,4(sp)
    a7d0:	00006300 	call	630 <__umodsi3>
    a7d4:	d8c00117 	ldw	r3,4(sp)
    a7d8:	b00b883a 	mov	r5,r22
    a7dc:	1039883a 	mov	fp,r2
    a7e0:	1809883a 	mov	r4,r3
    a7e4:	00005cc0 	call	5cc <__udivsi3>
    a7e8:	adffffcc 	andi	r23,r21,65535
    a7ec:	100b883a 	mov	r5,r2
    a7f0:	b809883a 	mov	r4,r23
    a7f4:	1023883a 	mov	r17,r2
    a7f8:	000aa740 	call	aa74 <__mulsi3>
    a7fc:	d9400017 	ldw	r5,0(sp)
    a800:	e008943a 	slli	r4,fp,16
    a804:	8520983a 	sll	r16,r16,r20
    a808:	2806d43a 	srli	r3,r5,16
    a80c:	1906b03a 	or	r3,r3,r4
    a810:	1880042e 	bgeu	r3,r2,a824 <__umoddi3+0x374>
    a814:	1d47883a 	add	r3,r3,r21
    a818:	893fffc4 	addi	r4,r17,-1
    a81c:	1d40892e 	bgeu	r3,r21,aa44 <__umoddi3+0x594>
    a820:	2023883a 	mov	r17,r4
    a824:	18b9c83a 	sub	fp,r3,r2
    a828:	b00b883a 	mov	r5,r22
    a82c:	e009883a 	mov	r4,fp
    a830:	00006300 	call	630 <__umodsi3>
    a834:	b00b883a 	mov	r5,r22
    a838:	e009883a 	mov	r4,fp
    a83c:	d8800215 	stw	r2,8(sp)
    a840:	00005cc0 	call	5cc <__udivsi3>
    a844:	100b883a 	mov	r5,r2
    a848:	b809883a 	mov	r4,r23
    a84c:	102d883a 	mov	r22,r2
    a850:	000aa740 	call	aa74 <__mulsi3>
    a854:	d9800217 	ldw	r6,8(sp)
    a858:	d8c00017 	ldw	r3,0(sp)
    a85c:	300c943a 	slli	r6,r6,16
    a860:	1a3fffcc 	andi	r8,r3,65535
    a864:	4190b03a 	or	r8,r8,r6
    a868:	4080042e 	bgeu	r8,r2,a87c <__umoddi3+0x3cc>
    a86c:	4551883a 	add	r8,r8,r21
    a870:	b0ffffc4 	addi	r3,r22,-1
    a874:	45406f2e 	bgeu	r8,r21,aa34 <__umoddi3+0x584>
    a878:	182d883a 	mov	r22,r3
    a87c:	880e943a 	slli	r7,r17,16
    a880:	9006d43a 	srli	r3,r18,16
    a884:	91bfffcc 	andi	r6,r18,65535
    a888:	3dacb03a 	or	r22,r7,r22
    a88c:	b02ed43a 	srli	r23,r22,16
    a890:	b5bfffcc 	andi	r22,r22,65535
    a894:	300b883a 	mov	r5,r6
    a898:	b009883a 	mov	r4,r22
    a89c:	40a3c83a 	sub	r17,r8,r2
    a8a0:	d8c00115 	stw	r3,4(sp)
    a8a4:	d9800215 	stw	r6,8(sp)
    a8a8:	000aa740 	call	aa74 <__mulsi3>
    a8ac:	d9800217 	ldw	r6,8(sp)
    a8b0:	b809883a 	mov	r4,r23
    a8b4:	1039883a 	mov	fp,r2
    a8b8:	300b883a 	mov	r5,r6
    a8bc:	000aa740 	call	aa74 <__mulsi3>
    a8c0:	d8c00117 	ldw	r3,4(sp)
    a8c4:	b809883a 	mov	r4,r23
    a8c8:	d8800215 	stw	r2,8(sp)
    a8cc:	180b883a 	mov	r5,r3
    a8d0:	000aa740 	call	aa74 <__mulsi3>
    a8d4:	d8c00117 	ldw	r3,4(sp)
    a8d8:	b009883a 	mov	r4,r22
    a8dc:	102f883a 	mov	r23,r2
    a8e0:	180b883a 	mov	r5,r3
    a8e4:	000aa740 	call	aa74 <__mulsi3>
    a8e8:	d9800217 	ldw	r6,8(sp)
    a8ec:	e006d43a 	srli	r3,fp,16
    a8f0:	1185883a 	add	r2,r2,r6
    a8f4:	1885883a 	add	r2,r3,r2
    a8f8:	1180022e 	bgeu	r2,r6,a904 <__umoddi3+0x454>
    a8fc:	00c00074 	movhi	r3,1
    a900:	b8ef883a 	add	r23,r23,r3
    a904:	1006d43a 	srli	r3,r2,16
    a908:	1004943a 	slli	r2,r2,16
    a90c:	e73fffcc 	andi	fp,fp,65535
    a910:	1dc7883a 	add	r3,r3,r23
    a914:	1739883a 	add	fp,r2,fp
    a918:	88c03a36 	bltu	r17,r3,aa04 <__umoddi3+0x554>
    a91c:	88c05126 	beq	r17,r3,aa64 <__umoddi3+0x5b4>
    a920:	88c9c83a 	sub	r4,r17,r3
    a924:	e00f883a 	mov	r7,fp
    a928:	81cfc83a 	sub	r7,r16,r7
    a92c:	81c7803a 	cmpltu	r3,r16,r7
    a930:	20c7c83a 	sub	r3,r4,r3
    a934:	1cc4983a 	sll	r2,r3,r19
    a938:	3d0ed83a 	srl	r7,r7,r20
    a93c:	1d06d83a 	srl	r3,r3,r20
    a940:	11c4b03a 	or	r2,r2,r7
    a944:	003f7c06 	br	a738 <__alt_data_end+0xfffda738>
    a948:	9ca6983a 	sll	r19,r19,r18
    a94c:	88f8d83a 	srl	fp,r17,r3
    a950:	80c4d83a 	srl	r2,r16,r3
    a954:	982cd43a 	srli	r22,r19,16
    a958:	8ca2983a 	sll	r17,r17,r18
    a95c:	e009883a 	mov	r4,fp
    a960:	b00b883a 	mov	r5,r22
    a964:	146ab03a 	or	r21,r2,r17
    a968:	00006300 	call	630 <__umodsi3>
    a96c:	b00b883a 	mov	r5,r22
    a970:	e009883a 	mov	r4,fp
    a974:	1029883a 	mov	r20,r2
    a978:	9dffffcc 	andi	r23,r19,65535
    a97c:	00005cc0 	call	5cc <__udivsi3>
    a980:	b809883a 	mov	r4,r23
    a984:	100b883a 	mov	r5,r2
    a988:	000aa740 	call	aa74 <__mulsi3>
    a98c:	a008943a 	slli	r4,r20,16
    a990:	a806d43a 	srli	r3,r21,16
    a994:	84a8983a 	sll	r20,r16,r18
    a998:	1906b03a 	or	r3,r3,r4
    a99c:	1880042e 	bgeu	r3,r2,a9b0 <__umoddi3+0x500>
    a9a0:	1cc7883a 	add	r3,r3,r19
    a9a4:	1cc00236 	bltu	r3,r19,a9b0 <__umoddi3+0x500>
    a9a8:	1880012e 	bgeu	r3,r2,a9b0 <__umoddi3+0x500>
    a9ac:	1cc7883a 	add	r3,r3,r19
    a9b0:	18a3c83a 	sub	r17,r3,r2
    a9b4:	b00b883a 	mov	r5,r22
    a9b8:	8809883a 	mov	r4,r17
    a9bc:	00006300 	call	630 <__umodsi3>
    a9c0:	b00b883a 	mov	r5,r22
    a9c4:	8809883a 	mov	r4,r17
    a9c8:	1021883a 	mov	r16,r2
    a9cc:	00005cc0 	call	5cc <__udivsi3>
    a9d0:	100b883a 	mov	r5,r2
    a9d4:	b809883a 	mov	r4,r23
    a9d8:	8020943a 	slli	r16,r16,16
    a9dc:	000aa740 	call	aa74 <__mulsi3>
    a9e0:	a8ffffcc 	andi	r3,r21,65535
    a9e4:	1c06b03a 	or	r3,r3,r16
    a9e8:	1880042e 	bgeu	r3,r2,a9fc <__umoddi3+0x54c>
    a9ec:	1cc7883a 	add	r3,r3,r19
    a9f0:	1cc00236 	bltu	r3,r19,a9fc <__umoddi3+0x54c>
    a9f4:	1880012e 	bgeu	r3,r2,a9fc <__umoddi3+0x54c>
    a9f8:	1cc7883a 	add	r3,r3,r19
    a9fc:	18a3c83a 	sub	r17,r3,r2
    aa00:	003f2906 	br	a6a8 <__alt_data_end+0xfffda6a8>
    aa04:	e48fc83a 	sub	r7,fp,r18
    aa08:	1d49c83a 	sub	r4,r3,r21
    aa0c:	e1f9803a 	cmpltu	fp,fp,r7
    aa10:	2739c83a 	sub	fp,r4,fp
    aa14:	8f09c83a 	sub	r4,r17,fp
    aa18:	003fc306 	br	a928 <__alt_data_end+0xfffda928>
    aa1c:	01000604 	movi	r4,24
    aa20:	003ef906 	br	a608 <__alt_data_end+0xfffda608>
    aa24:	00800604 	movi	r2,24
    aa28:	003f1306 	br	a678 <__alt_data_end+0xfffda678>
    aa2c:	01000604 	movi	r4,24
    aa30:	003eb606 	br	a50c <__alt_data_end+0xfffda50c>
    aa34:	40bf902e 	bgeu	r8,r2,a878 <__alt_data_end+0xfffda878>
    aa38:	b5bfff84 	addi	r22,r22,-2
    aa3c:	4551883a 	add	r8,r8,r21
    aa40:	003f8e06 	br	a87c <__alt_data_end+0xfffda87c>
    aa44:	18bf762e 	bgeu	r3,r2,a820 <__alt_data_end+0xfffda820>
    aa48:	8c7fff84 	addi	r17,r17,-2
    aa4c:	1d47883a 	add	r3,r3,r21
    aa50:	003f7406 	br	a824 <__alt_data_end+0xfffda824>
    aa54:	1cc7883a 	add	r3,r3,r19
    aa58:	003ecd06 	br	a590 <__alt_data_end+0xfffda590>
    aa5c:	8005883a 	mov	r2,r16
    aa60:	003ef806 	br	a644 <__alt_data_end+0xfffda644>
    aa64:	873fe736 	bltu	r16,fp,aa04 <__alt_data_end+0xfffdaa04>
    aa68:	e00f883a 	mov	r7,fp
    aa6c:	0009883a 	mov	r4,zero
    aa70:	003fad06 	br	a928 <__alt_data_end+0xfffda928>

0000aa74 <__mulsi3>:
    aa74:	0005883a 	mov	r2,zero
    aa78:	20000726 	beq	r4,zero,aa98 <__mulsi3+0x24>
    aa7c:	20c0004c 	andi	r3,r4,1
    aa80:	2008d07a 	srli	r4,r4,1
    aa84:	18000126 	beq	r3,zero,aa8c <__mulsi3+0x18>
    aa88:	1145883a 	add	r2,r2,r5
    aa8c:	294b883a 	add	r5,r5,r5
    aa90:	203ffa1e 	bne	r4,zero,aa7c <__alt_data_end+0xfffdaa7c>
    aa94:	f800283a 	ret
    aa98:	f800283a 	ret

0000aa9c <__adddf3>:
    aa9c:	02c00434 	movhi	r11,16
    aaa0:	5affffc4 	addi	r11,r11,-1
    aaa4:	2806d7fa 	srli	r3,r5,31
    aaa8:	2ad4703a 	and	r10,r5,r11
    aaac:	3ad2703a 	and	r9,r7,r11
    aab0:	3804d53a 	srli	r2,r7,20
    aab4:	3018d77a 	srli	r12,r6,29
    aab8:	280ad53a 	srli	r5,r5,20
    aabc:	501490fa 	slli	r10,r10,3
    aac0:	2010d77a 	srli	r8,r4,29
    aac4:	481290fa 	slli	r9,r9,3
    aac8:	380ed7fa 	srli	r7,r7,31
    aacc:	defffb04 	addi	sp,sp,-20
    aad0:	dc800215 	stw	r18,8(sp)
    aad4:	dc400115 	stw	r17,4(sp)
    aad8:	dc000015 	stw	r16,0(sp)
    aadc:	dfc00415 	stw	ra,16(sp)
    aae0:	dcc00315 	stw	r19,12(sp)
    aae4:	1c803fcc 	andi	r18,r3,255
    aae8:	2c01ffcc 	andi	r16,r5,2047
    aaec:	5210b03a 	or	r8,r10,r8
    aaf0:	202290fa 	slli	r17,r4,3
    aaf4:	1081ffcc 	andi	r2,r2,2047
    aaf8:	4b12b03a 	or	r9,r9,r12
    aafc:	300c90fa 	slli	r6,r6,3
    ab00:	91c07526 	beq	r18,r7,acd8 <__adddf3+0x23c>
    ab04:	8087c83a 	sub	r3,r16,r2
    ab08:	00c0ab0e 	bge	zero,r3,adb8 <__adddf3+0x31c>
    ab0c:	10002a1e 	bne	r2,zero,abb8 <__adddf3+0x11c>
    ab10:	4984b03a 	or	r2,r9,r6
    ab14:	1000961e 	bne	r2,zero,ad70 <__adddf3+0x2d4>
    ab18:	888001cc 	andi	r2,r17,7
    ab1c:	10000726 	beq	r2,zero,ab3c <__adddf3+0xa0>
    ab20:	888003cc 	andi	r2,r17,15
    ab24:	00c00104 	movi	r3,4
    ab28:	10c00426 	beq	r2,r3,ab3c <__adddf3+0xa0>
    ab2c:	88c7883a 	add	r3,r17,r3
    ab30:	1c63803a 	cmpltu	r17,r3,r17
    ab34:	4451883a 	add	r8,r8,r17
    ab38:	1823883a 	mov	r17,r3
    ab3c:	4080202c 	andhi	r2,r8,128
    ab40:	10005926 	beq	r2,zero,aca8 <__adddf3+0x20c>
    ab44:	84000044 	addi	r16,r16,1
    ab48:	0081ffc4 	movi	r2,2047
    ab4c:	8080ba26 	beq	r16,r2,ae38 <__adddf3+0x39c>
    ab50:	00bfe034 	movhi	r2,65408
    ab54:	10bfffc4 	addi	r2,r2,-1
    ab58:	4090703a 	and	r8,r8,r2
    ab5c:	4004977a 	slli	r2,r8,29
    ab60:	4010927a 	slli	r8,r8,9
    ab64:	8822d0fa 	srli	r17,r17,3
    ab68:	8401ffcc 	andi	r16,r16,2047
    ab6c:	4010d33a 	srli	r8,r8,12
    ab70:	9007883a 	mov	r3,r18
    ab74:	1444b03a 	or	r2,r2,r17
    ab78:	8401ffcc 	andi	r16,r16,2047
    ab7c:	8020953a 	slli	r16,r16,20
    ab80:	18c03fcc 	andi	r3,r3,255
    ab84:	01000434 	movhi	r4,16
    ab88:	213fffc4 	addi	r4,r4,-1
    ab8c:	180697fa 	slli	r3,r3,31
    ab90:	4110703a 	and	r8,r8,r4
    ab94:	4410b03a 	or	r8,r8,r16
    ab98:	40c6b03a 	or	r3,r8,r3
    ab9c:	dfc00417 	ldw	ra,16(sp)
    aba0:	dcc00317 	ldw	r19,12(sp)
    aba4:	dc800217 	ldw	r18,8(sp)
    aba8:	dc400117 	ldw	r17,4(sp)
    abac:	dc000017 	ldw	r16,0(sp)
    abb0:	dec00504 	addi	sp,sp,20
    abb4:	f800283a 	ret
    abb8:	0081ffc4 	movi	r2,2047
    abbc:	80bfd626 	beq	r16,r2,ab18 <__alt_data_end+0xfffdab18>
    abc0:	4a402034 	orhi	r9,r9,128
    abc4:	00800e04 	movi	r2,56
    abc8:	10c09f16 	blt	r2,r3,ae48 <__adddf3+0x3ac>
    abcc:	008007c4 	movi	r2,31
    abd0:	10c0c216 	blt	r2,r3,aedc <__adddf3+0x440>
    abd4:	00800804 	movi	r2,32
    abd8:	10c5c83a 	sub	r2,r2,r3
    abdc:	488a983a 	sll	r5,r9,r2
    abe0:	30c8d83a 	srl	r4,r6,r3
    abe4:	3084983a 	sll	r2,r6,r2
    abe8:	48c6d83a 	srl	r3,r9,r3
    abec:	290cb03a 	or	r6,r5,r4
    abf0:	1004c03a 	cmpne	r2,r2,zero
    abf4:	308cb03a 	or	r6,r6,r2
    abf8:	898dc83a 	sub	r6,r17,r6
    abfc:	89a3803a 	cmpltu	r17,r17,r6
    ac00:	40d1c83a 	sub	r8,r8,r3
    ac04:	4451c83a 	sub	r8,r8,r17
    ac08:	3023883a 	mov	r17,r6
    ac0c:	4080202c 	andhi	r2,r8,128
    ac10:	10002326 	beq	r2,zero,aca0 <__adddf3+0x204>
    ac14:	04c02034 	movhi	r19,128
    ac18:	9cffffc4 	addi	r19,r19,-1
    ac1c:	44e6703a 	and	r19,r8,r19
    ac20:	98007626 	beq	r19,zero,adfc <__adddf3+0x360>
    ac24:	9809883a 	mov	r4,r19
    ac28:	000d2dc0 	call	d2dc <__clzsi2>
    ac2c:	10fffe04 	addi	r3,r2,-8
    ac30:	010007c4 	movi	r4,31
    ac34:	20c07716 	blt	r4,r3,ae14 <__adddf3+0x378>
    ac38:	00800804 	movi	r2,32
    ac3c:	10c5c83a 	sub	r2,r2,r3
    ac40:	8884d83a 	srl	r2,r17,r2
    ac44:	98d0983a 	sll	r8,r19,r3
    ac48:	88e2983a 	sll	r17,r17,r3
    ac4c:	1204b03a 	or	r2,r2,r8
    ac50:	1c007416 	blt	r3,r16,ae24 <__adddf3+0x388>
    ac54:	1c21c83a 	sub	r16,r3,r16
    ac58:	82000044 	addi	r8,r16,1
    ac5c:	00c007c4 	movi	r3,31
    ac60:	1a009116 	blt	r3,r8,aea8 <__adddf3+0x40c>
    ac64:	00c00804 	movi	r3,32
    ac68:	1a07c83a 	sub	r3,r3,r8
    ac6c:	8a08d83a 	srl	r4,r17,r8
    ac70:	88e2983a 	sll	r17,r17,r3
    ac74:	10c6983a 	sll	r3,r2,r3
    ac78:	1210d83a 	srl	r8,r2,r8
    ac7c:	8804c03a 	cmpne	r2,r17,zero
    ac80:	1906b03a 	or	r3,r3,r4
    ac84:	18a2b03a 	or	r17,r3,r2
    ac88:	0021883a 	mov	r16,zero
    ac8c:	003fa206 	br	ab18 <__alt_data_end+0xfffdab18>
    ac90:	1890b03a 	or	r8,r3,r2
    ac94:	40017d26 	beq	r8,zero,b28c <__adddf3+0x7f0>
    ac98:	1011883a 	mov	r8,r2
    ac9c:	1823883a 	mov	r17,r3
    aca0:	888001cc 	andi	r2,r17,7
    aca4:	103f9e1e 	bne	r2,zero,ab20 <__alt_data_end+0xfffdab20>
    aca8:	4004977a 	slli	r2,r8,29
    acac:	8822d0fa 	srli	r17,r17,3
    acb0:	4010d0fa 	srli	r8,r8,3
    acb4:	9007883a 	mov	r3,r18
    acb8:	1444b03a 	or	r2,r2,r17
    acbc:	0101ffc4 	movi	r4,2047
    acc0:	81002426 	beq	r16,r4,ad54 <__adddf3+0x2b8>
    acc4:	8120703a 	and	r16,r16,r4
    acc8:	01000434 	movhi	r4,16
    accc:	213fffc4 	addi	r4,r4,-1
    acd0:	4110703a 	and	r8,r8,r4
    acd4:	003fa806 	br	ab78 <__alt_data_end+0xfffdab78>
    acd8:	8089c83a 	sub	r4,r16,r2
    acdc:	01005e0e 	bge	zero,r4,ae58 <__adddf3+0x3bc>
    ace0:	10002b26 	beq	r2,zero,ad90 <__adddf3+0x2f4>
    ace4:	0081ffc4 	movi	r2,2047
    ace8:	80bf8b26 	beq	r16,r2,ab18 <__alt_data_end+0xfffdab18>
    acec:	4a402034 	orhi	r9,r9,128
    acf0:	00800e04 	movi	r2,56
    acf4:	1100a40e 	bge	r2,r4,af88 <__adddf3+0x4ec>
    acf8:	498cb03a 	or	r6,r9,r6
    acfc:	300ac03a 	cmpne	r5,r6,zero
    ad00:	0013883a 	mov	r9,zero
    ad04:	2c4b883a 	add	r5,r5,r17
    ad08:	2c63803a 	cmpltu	r17,r5,r17
    ad0c:	4a11883a 	add	r8,r9,r8
    ad10:	8a11883a 	add	r8,r17,r8
    ad14:	2823883a 	mov	r17,r5
    ad18:	4080202c 	andhi	r2,r8,128
    ad1c:	103fe026 	beq	r2,zero,aca0 <__alt_data_end+0xfffdaca0>
    ad20:	84000044 	addi	r16,r16,1
    ad24:	0081ffc4 	movi	r2,2047
    ad28:	8080d226 	beq	r16,r2,b074 <__adddf3+0x5d8>
    ad2c:	00bfe034 	movhi	r2,65408
    ad30:	10bfffc4 	addi	r2,r2,-1
    ad34:	4090703a 	and	r8,r8,r2
    ad38:	880ad07a 	srli	r5,r17,1
    ad3c:	400897fa 	slli	r4,r8,31
    ad40:	88c0004c 	andi	r3,r17,1
    ad44:	28e2b03a 	or	r17,r5,r3
    ad48:	4010d07a 	srli	r8,r8,1
    ad4c:	2462b03a 	or	r17,r4,r17
    ad50:	003f7106 	br	ab18 <__alt_data_end+0xfffdab18>
    ad54:	4088b03a 	or	r4,r8,r2
    ad58:	20014526 	beq	r4,zero,b270 <__adddf3+0x7d4>
    ad5c:	01000434 	movhi	r4,16
    ad60:	42000234 	orhi	r8,r8,8
    ad64:	213fffc4 	addi	r4,r4,-1
    ad68:	4110703a 	and	r8,r8,r4
    ad6c:	003f8206 	br	ab78 <__alt_data_end+0xfffdab78>
    ad70:	18ffffc4 	addi	r3,r3,-1
    ad74:	1800491e 	bne	r3,zero,ae9c <__adddf3+0x400>
    ad78:	898bc83a 	sub	r5,r17,r6
    ad7c:	8963803a 	cmpltu	r17,r17,r5
    ad80:	4251c83a 	sub	r8,r8,r9
    ad84:	4451c83a 	sub	r8,r8,r17
    ad88:	2823883a 	mov	r17,r5
    ad8c:	003f9f06 	br	ac0c <__alt_data_end+0xfffdac0c>
    ad90:	4984b03a 	or	r2,r9,r6
    ad94:	103f6026 	beq	r2,zero,ab18 <__alt_data_end+0xfffdab18>
    ad98:	213fffc4 	addi	r4,r4,-1
    ad9c:	2000931e 	bne	r4,zero,afec <__adddf3+0x550>
    ada0:	898d883a 	add	r6,r17,r6
    ada4:	3463803a 	cmpltu	r17,r6,r17
    ada8:	4251883a 	add	r8,r8,r9
    adac:	8a11883a 	add	r8,r17,r8
    adb0:	3023883a 	mov	r17,r6
    adb4:	003fd806 	br	ad18 <__alt_data_end+0xfffdad18>
    adb8:	1800541e 	bne	r3,zero,af0c <__adddf3+0x470>
    adbc:	80800044 	addi	r2,r16,1
    adc0:	1081ffcc 	andi	r2,r2,2047
    adc4:	00c00044 	movi	r3,1
    adc8:	1880a00e 	bge	r3,r2,b04c <__adddf3+0x5b0>
    adcc:	8989c83a 	sub	r4,r17,r6
    add0:	8905803a 	cmpltu	r2,r17,r4
    add4:	4267c83a 	sub	r19,r8,r9
    add8:	98a7c83a 	sub	r19,r19,r2
    addc:	9880202c 	andhi	r2,r19,128
    ade0:	10006326 	beq	r2,zero,af70 <__adddf3+0x4d4>
    ade4:	3463c83a 	sub	r17,r6,r17
    ade8:	4a07c83a 	sub	r3,r9,r8
    adec:	344d803a 	cmpltu	r6,r6,r17
    adf0:	19a7c83a 	sub	r19,r3,r6
    adf4:	3825883a 	mov	r18,r7
    adf8:	983f8a1e 	bne	r19,zero,ac24 <__alt_data_end+0xfffdac24>
    adfc:	8809883a 	mov	r4,r17
    ae00:	000d2dc0 	call	d2dc <__clzsi2>
    ae04:	10800804 	addi	r2,r2,32
    ae08:	10fffe04 	addi	r3,r2,-8
    ae0c:	010007c4 	movi	r4,31
    ae10:	20ff890e 	bge	r4,r3,ac38 <__alt_data_end+0xfffdac38>
    ae14:	10bff604 	addi	r2,r2,-40
    ae18:	8884983a 	sll	r2,r17,r2
    ae1c:	0023883a 	mov	r17,zero
    ae20:	1c3f8c0e 	bge	r3,r16,ac54 <__alt_data_end+0xfffdac54>
    ae24:	023fe034 	movhi	r8,65408
    ae28:	423fffc4 	addi	r8,r8,-1
    ae2c:	80e1c83a 	sub	r16,r16,r3
    ae30:	1210703a 	and	r8,r2,r8
    ae34:	003f3806 	br	ab18 <__alt_data_end+0xfffdab18>
    ae38:	9007883a 	mov	r3,r18
    ae3c:	0011883a 	mov	r8,zero
    ae40:	0005883a 	mov	r2,zero
    ae44:	003f4c06 	br	ab78 <__alt_data_end+0xfffdab78>
    ae48:	498cb03a 	or	r6,r9,r6
    ae4c:	300cc03a 	cmpne	r6,r6,zero
    ae50:	0007883a 	mov	r3,zero
    ae54:	003f6806 	br	abf8 <__alt_data_end+0xfffdabf8>
    ae58:	20009c1e 	bne	r4,zero,b0cc <__adddf3+0x630>
    ae5c:	80800044 	addi	r2,r16,1
    ae60:	1141ffcc 	andi	r5,r2,2047
    ae64:	01000044 	movi	r4,1
    ae68:	2140670e 	bge	r4,r5,b008 <__adddf3+0x56c>
    ae6c:	0101ffc4 	movi	r4,2047
    ae70:	11007f26 	beq	r2,r4,b070 <__adddf3+0x5d4>
    ae74:	898d883a 	add	r6,r17,r6
    ae78:	4247883a 	add	r3,r8,r9
    ae7c:	3451803a 	cmpltu	r8,r6,r17
    ae80:	40d1883a 	add	r8,r8,r3
    ae84:	402297fa 	slli	r17,r8,31
    ae88:	300cd07a 	srli	r6,r6,1
    ae8c:	4010d07a 	srli	r8,r8,1
    ae90:	1021883a 	mov	r16,r2
    ae94:	89a2b03a 	or	r17,r17,r6
    ae98:	003f1f06 	br	ab18 <__alt_data_end+0xfffdab18>
    ae9c:	0081ffc4 	movi	r2,2047
    aea0:	80bf481e 	bne	r16,r2,abc4 <__alt_data_end+0xfffdabc4>
    aea4:	003f1c06 	br	ab18 <__alt_data_end+0xfffdab18>
    aea8:	843ff844 	addi	r16,r16,-31
    aeac:	01000804 	movi	r4,32
    aeb0:	1406d83a 	srl	r3,r2,r16
    aeb4:	41005026 	beq	r8,r4,aff8 <__adddf3+0x55c>
    aeb8:	01001004 	movi	r4,64
    aebc:	2211c83a 	sub	r8,r4,r8
    aec0:	1204983a 	sll	r2,r2,r8
    aec4:	88a2b03a 	or	r17,r17,r2
    aec8:	8822c03a 	cmpne	r17,r17,zero
    aecc:	1c62b03a 	or	r17,r3,r17
    aed0:	0011883a 	mov	r8,zero
    aed4:	0021883a 	mov	r16,zero
    aed8:	003f7106 	br	aca0 <__alt_data_end+0xfffdaca0>
    aedc:	193ff804 	addi	r4,r3,-32
    aee0:	00800804 	movi	r2,32
    aee4:	4908d83a 	srl	r4,r9,r4
    aee8:	18804526 	beq	r3,r2,b000 <__adddf3+0x564>
    aeec:	00801004 	movi	r2,64
    aef0:	10c5c83a 	sub	r2,r2,r3
    aef4:	4886983a 	sll	r3,r9,r2
    aef8:	198cb03a 	or	r6,r3,r6
    aefc:	300cc03a 	cmpne	r6,r6,zero
    af00:	218cb03a 	or	r6,r4,r6
    af04:	0007883a 	mov	r3,zero
    af08:	003f3b06 	br	abf8 <__alt_data_end+0xfffdabf8>
    af0c:	80002a26 	beq	r16,zero,afb8 <__adddf3+0x51c>
    af10:	0101ffc4 	movi	r4,2047
    af14:	11006826 	beq	r2,r4,b0b8 <__adddf3+0x61c>
    af18:	00c7c83a 	sub	r3,zero,r3
    af1c:	42002034 	orhi	r8,r8,128
    af20:	01000e04 	movi	r4,56
    af24:	20c07c16 	blt	r4,r3,b118 <__adddf3+0x67c>
    af28:	010007c4 	movi	r4,31
    af2c:	20c0da16 	blt	r4,r3,b298 <__adddf3+0x7fc>
    af30:	01000804 	movi	r4,32
    af34:	20c9c83a 	sub	r4,r4,r3
    af38:	4114983a 	sll	r10,r8,r4
    af3c:	88cad83a 	srl	r5,r17,r3
    af40:	8908983a 	sll	r4,r17,r4
    af44:	40c6d83a 	srl	r3,r8,r3
    af48:	5162b03a 	or	r17,r10,r5
    af4c:	2008c03a 	cmpne	r4,r4,zero
    af50:	8922b03a 	or	r17,r17,r4
    af54:	3463c83a 	sub	r17,r6,r17
    af58:	48c7c83a 	sub	r3,r9,r3
    af5c:	344d803a 	cmpltu	r6,r6,r17
    af60:	1991c83a 	sub	r8,r3,r6
    af64:	1021883a 	mov	r16,r2
    af68:	3825883a 	mov	r18,r7
    af6c:	003f2706 	br	ac0c <__alt_data_end+0xfffdac0c>
    af70:	24d0b03a 	or	r8,r4,r19
    af74:	40001b1e 	bne	r8,zero,afe4 <__adddf3+0x548>
    af78:	0005883a 	mov	r2,zero
    af7c:	0007883a 	mov	r3,zero
    af80:	0021883a 	mov	r16,zero
    af84:	003f4d06 	br	acbc <__alt_data_end+0xfffdacbc>
    af88:	008007c4 	movi	r2,31
    af8c:	11003c16 	blt	r2,r4,b080 <__adddf3+0x5e4>
    af90:	00800804 	movi	r2,32
    af94:	1105c83a 	sub	r2,r2,r4
    af98:	488e983a 	sll	r7,r9,r2
    af9c:	310ad83a 	srl	r5,r6,r4
    afa0:	3084983a 	sll	r2,r6,r2
    afa4:	4912d83a 	srl	r9,r9,r4
    afa8:	394ab03a 	or	r5,r7,r5
    afac:	1004c03a 	cmpne	r2,r2,zero
    afb0:	288ab03a 	or	r5,r5,r2
    afb4:	003f5306 	br	ad04 <__alt_data_end+0xfffdad04>
    afb8:	4448b03a 	or	r4,r8,r17
    afbc:	20003e26 	beq	r4,zero,b0b8 <__adddf3+0x61c>
    afc0:	00c6303a 	nor	r3,zero,r3
    afc4:	18003a1e 	bne	r3,zero,b0b0 <__adddf3+0x614>
    afc8:	3463c83a 	sub	r17,r6,r17
    afcc:	4a07c83a 	sub	r3,r9,r8
    afd0:	344d803a 	cmpltu	r6,r6,r17
    afd4:	1991c83a 	sub	r8,r3,r6
    afd8:	1021883a 	mov	r16,r2
    afdc:	3825883a 	mov	r18,r7
    afe0:	003f0a06 	br	ac0c <__alt_data_end+0xfffdac0c>
    afe4:	2023883a 	mov	r17,r4
    afe8:	003f0d06 	br	ac20 <__alt_data_end+0xfffdac20>
    afec:	0081ffc4 	movi	r2,2047
    aff0:	80bf3f1e 	bne	r16,r2,acf0 <__alt_data_end+0xfffdacf0>
    aff4:	003ec806 	br	ab18 <__alt_data_end+0xfffdab18>
    aff8:	0005883a 	mov	r2,zero
    affc:	003fb106 	br	aec4 <__alt_data_end+0xfffdaec4>
    b000:	0007883a 	mov	r3,zero
    b004:	003fbc06 	br	aef8 <__alt_data_end+0xfffdaef8>
    b008:	4444b03a 	or	r2,r8,r17
    b00c:	8000871e 	bne	r16,zero,b22c <__adddf3+0x790>
    b010:	1000ba26 	beq	r2,zero,b2fc <__adddf3+0x860>
    b014:	4984b03a 	or	r2,r9,r6
    b018:	103ebf26 	beq	r2,zero,ab18 <__alt_data_end+0xfffdab18>
    b01c:	8985883a 	add	r2,r17,r6
    b020:	4247883a 	add	r3,r8,r9
    b024:	1451803a 	cmpltu	r8,r2,r17
    b028:	40d1883a 	add	r8,r8,r3
    b02c:	40c0202c 	andhi	r3,r8,128
    b030:	1023883a 	mov	r17,r2
    b034:	183f1a26 	beq	r3,zero,aca0 <__alt_data_end+0xfffdaca0>
    b038:	00bfe034 	movhi	r2,65408
    b03c:	10bfffc4 	addi	r2,r2,-1
    b040:	2021883a 	mov	r16,r4
    b044:	4090703a 	and	r8,r8,r2
    b048:	003eb306 	br	ab18 <__alt_data_end+0xfffdab18>
    b04c:	4444b03a 	or	r2,r8,r17
    b050:	8000291e 	bne	r16,zero,b0f8 <__adddf3+0x65c>
    b054:	10004b1e 	bne	r2,zero,b184 <__adddf3+0x6e8>
    b058:	4990b03a 	or	r8,r9,r6
    b05c:	40008b26 	beq	r8,zero,b28c <__adddf3+0x7f0>
    b060:	4811883a 	mov	r8,r9
    b064:	3023883a 	mov	r17,r6
    b068:	3825883a 	mov	r18,r7
    b06c:	003eaa06 	br	ab18 <__alt_data_end+0xfffdab18>
    b070:	1021883a 	mov	r16,r2
    b074:	0011883a 	mov	r8,zero
    b078:	0005883a 	mov	r2,zero
    b07c:	003f0f06 	br	acbc <__alt_data_end+0xfffdacbc>
    b080:	217ff804 	addi	r5,r4,-32
    b084:	00800804 	movi	r2,32
    b088:	494ad83a 	srl	r5,r9,r5
    b08c:	20807d26 	beq	r4,r2,b284 <__adddf3+0x7e8>
    b090:	00801004 	movi	r2,64
    b094:	1109c83a 	sub	r4,r2,r4
    b098:	4912983a 	sll	r9,r9,r4
    b09c:	498cb03a 	or	r6,r9,r6
    b0a0:	300cc03a 	cmpne	r6,r6,zero
    b0a4:	298ab03a 	or	r5,r5,r6
    b0a8:	0013883a 	mov	r9,zero
    b0ac:	003f1506 	br	ad04 <__alt_data_end+0xfffdad04>
    b0b0:	0101ffc4 	movi	r4,2047
    b0b4:	113f9a1e 	bne	r2,r4,af20 <__alt_data_end+0xfffdaf20>
    b0b8:	4811883a 	mov	r8,r9
    b0bc:	3023883a 	mov	r17,r6
    b0c0:	1021883a 	mov	r16,r2
    b0c4:	3825883a 	mov	r18,r7
    b0c8:	003e9306 	br	ab18 <__alt_data_end+0xfffdab18>
    b0cc:	8000161e 	bne	r16,zero,b128 <__adddf3+0x68c>
    b0d0:	444ab03a 	or	r5,r8,r17
    b0d4:	28005126 	beq	r5,zero,b21c <__adddf3+0x780>
    b0d8:	0108303a 	nor	r4,zero,r4
    b0dc:	20004d1e 	bne	r4,zero,b214 <__adddf3+0x778>
    b0e0:	89a3883a 	add	r17,r17,r6
    b0e4:	4253883a 	add	r9,r8,r9
    b0e8:	898d803a 	cmpltu	r6,r17,r6
    b0ec:	3251883a 	add	r8,r6,r9
    b0f0:	1021883a 	mov	r16,r2
    b0f4:	003f0806 	br	ad18 <__alt_data_end+0xfffdad18>
    b0f8:	1000301e 	bne	r2,zero,b1bc <__adddf3+0x720>
    b0fc:	4984b03a 	or	r2,r9,r6
    b100:	10007126 	beq	r2,zero,b2c8 <__adddf3+0x82c>
    b104:	4811883a 	mov	r8,r9
    b108:	3023883a 	mov	r17,r6
    b10c:	3825883a 	mov	r18,r7
    b110:	0401ffc4 	movi	r16,2047
    b114:	003e8006 	br	ab18 <__alt_data_end+0xfffdab18>
    b118:	4462b03a 	or	r17,r8,r17
    b11c:	8822c03a 	cmpne	r17,r17,zero
    b120:	0007883a 	mov	r3,zero
    b124:	003f8b06 	br	af54 <__alt_data_end+0xfffdaf54>
    b128:	0141ffc4 	movi	r5,2047
    b12c:	11403b26 	beq	r2,r5,b21c <__adddf3+0x780>
    b130:	0109c83a 	sub	r4,zero,r4
    b134:	42002034 	orhi	r8,r8,128
    b138:	01400e04 	movi	r5,56
    b13c:	29006716 	blt	r5,r4,b2dc <__adddf3+0x840>
    b140:	014007c4 	movi	r5,31
    b144:	29007016 	blt	r5,r4,b308 <__adddf3+0x86c>
    b148:	01400804 	movi	r5,32
    b14c:	290bc83a 	sub	r5,r5,r4
    b150:	4154983a 	sll	r10,r8,r5
    b154:	890ed83a 	srl	r7,r17,r4
    b158:	894a983a 	sll	r5,r17,r5
    b15c:	4108d83a 	srl	r4,r8,r4
    b160:	51e2b03a 	or	r17,r10,r7
    b164:	280ac03a 	cmpne	r5,r5,zero
    b168:	8962b03a 	or	r17,r17,r5
    b16c:	89a3883a 	add	r17,r17,r6
    b170:	2253883a 	add	r9,r4,r9
    b174:	898d803a 	cmpltu	r6,r17,r6
    b178:	3251883a 	add	r8,r6,r9
    b17c:	1021883a 	mov	r16,r2
    b180:	003ee506 	br	ad18 <__alt_data_end+0xfffdad18>
    b184:	4984b03a 	or	r2,r9,r6
    b188:	103e6326 	beq	r2,zero,ab18 <__alt_data_end+0xfffdab18>
    b18c:	8987c83a 	sub	r3,r17,r6
    b190:	88c9803a 	cmpltu	r4,r17,r3
    b194:	4245c83a 	sub	r2,r8,r9
    b198:	1105c83a 	sub	r2,r2,r4
    b19c:	1100202c 	andhi	r4,r2,128
    b1a0:	203ebb26 	beq	r4,zero,ac90 <__alt_data_end+0xfffdac90>
    b1a4:	3463c83a 	sub	r17,r6,r17
    b1a8:	4a07c83a 	sub	r3,r9,r8
    b1ac:	344d803a 	cmpltu	r6,r6,r17
    b1b0:	1991c83a 	sub	r8,r3,r6
    b1b4:	3825883a 	mov	r18,r7
    b1b8:	003e5706 	br	ab18 <__alt_data_end+0xfffdab18>
    b1bc:	4984b03a 	or	r2,r9,r6
    b1c0:	10002e26 	beq	r2,zero,b27c <__adddf3+0x7e0>
    b1c4:	4004d0fa 	srli	r2,r8,3
    b1c8:	8822d0fa 	srli	r17,r17,3
    b1cc:	4010977a 	slli	r8,r8,29
    b1d0:	10c0022c 	andhi	r3,r2,8
    b1d4:	4462b03a 	or	r17,r8,r17
    b1d8:	18000826 	beq	r3,zero,b1fc <__adddf3+0x760>
    b1dc:	4808d0fa 	srli	r4,r9,3
    b1e0:	20c0022c 	andhi	r3,r4,8
    b1e4:	1800051e 	bne	r3,zero,b1fc <__adddf3+0x760>
    b1e8:	300cd0fa 	srli	r6,r6,3
    b1ec:	4806977a 	slli	r3,r9,29
    b1f0:	2005883a 	mov	r2,r4
    b1f4:	3825883a 	mov	r18,r7
    b1f8:	19a2b03a 	or	r17,r3,r6
    b1fc:	8810d77a 	srli	r8,r17,29
    b200:	100490fa 	slli	r2,r2,3
    b204:	882290fa 	slli	r17,r17,3
    b208:	0401ffc4 	movi	r16,2047
    b20c:	4090b03a 	or	r8,r8,r2
    b210:	003e4106 	br	ab18 <__alt_data_end+0xfffdab18>
    b214:	0141ffc4 	movi	r5,2047
    b218:	117fc71e 	bne	r2,r5,b138 <__alt_data_end+0xfffdb138>
    b21c:	4811883a 	mov	r8,r9
    b220:	3023883a 	mov	r17,r6
    b224:	1021883a 	mov	r16,r2
    b228:	003e3b06 	br	ab18 <__alt_data_end+0xfffdab18>
    b22c:	10002f26 	beq	r2,zero,b2ec <__adddf3+0x850>
    b230:	4984b03a 	or	r2,r9,r6
    b234:	10001126 	beq	r2,zero,b27c <__adddf3+0x7e0>
    b238:	4004d0fa 	srli	r2,r8,3
    b23c:	8822d0fa 	srli	r17,r17,3
    b240:	4010977a 	slli	r8,r8,29
    b244:	10c0022c 	andhi	r3,r2,8
    b248:	4462b03a 	or	r17,r8,r17
    b24c:	183feb26 	beq	r3,zero,b1fc <__alt_data_end+0xfffdb1fc>
    b250:	4808d0fa 	srli	r4,r9,3
    b254:	20c0022c 	andhi	r3,r4,8
    b258:	183fe81e 	bne	r3,zero,b1fc <__alt_data_end+0xfffdb1fc>
    b25c:	300cd0fa 	srli	r6,r6,3
    b260:	4806977a 	slli	r3,r9,29
    b264:	2005883a 	mov	r2,r4
    b268:	19a2b03a 	or	r17,r3,r6
    b26c:	003fe306 	br	b1fc <__alt_data_end+0xfffdb1fc>
    b270:	0011883a 	mov	r8,zero
    b274:	0005883a 	mov	r2,zero
    b278:	003e3f06 	br	ab78 <__alt_data_end+0xfffdab78>
    b27c:	0401ffc4 	movi	r16,2047
    b280:	003e2506 	br	ab18 <__alt_data_end+0xfffdab18>
    b284:	0013883a 	mov	r9,zero
    b288:	003f8406 	br	b09c <__alt_data_end+0xfffdb09c>
    b28c:	0005883a 	mov	r2,zero
    b290:	0007883a 	mov	r3,zero
    b294:	003e8906 	br	acbc <__alt_data_end+0xfffdacbc>
    b298:	197ff804 	addi	r5,r3,-32
    b29c:	01000804 	movi	r4,32
    b2a0:	414ad83a 	srl	r5,r8,r5
    b2a4:	19002426 	beq	r3,r4,b338 <__adddf3+0x89c>
    b2a8:	01001004 	movi	r4,64
    b2ac:	20c7c83a 	sub	r3,r4,r3
    b2b0:	40c6983a 	sll	r3,r8,r3
    b2b4:	1c46b03a 	or	r3,r3,r17
    b2b8:	1806c03a 	cmpne	r3,r3,zero
    b2bc:	28e2b03a 	or	r17,r5,r3
    b2c0:	0007883a 	mov	r3,zero
    b2c4:	003f2306 	br	af54 <__alt_data_end+0xfffdaf54>
    b2c8:	0007883a 	mov	r3,zero
    b2cc:	5811883a 	mov	r8,r11
    b2d0:	00bfffc4 	movi	r2,-1
    b2d4:	0401ffc4 	movi	r16,2047
    b2d8:	003e7806 	br	acbc <__alt_data_end+0xfffdacbc>
    b2dc:	4462b03a 	or	r17,r8,r17
    b2e0:	8822c03a 	cmpne	r17,r17,zero
    b2e4:	0009883a 	mov	r4,zero
    b2e8:	003fa006 	br	b16c <__alt_data_end+0xfffdb16c>
    b2ec:	4811883a 	mov	r8,r9
    b2f0:	3023883a 	mov	r17,r6
    b2f4:	0401ffc4 	movi	r16,2047
    b2f8:	003e0706 	br	ab18 <__alt_data_end+0xfffdab18>
    b2fc:	4811883a 	mov	r8,r9
    b300:	3023883a 	mov	r17,r6
    b304:	003e0406 	br	ab18 <__alt_data_end+0xfffdab18>
    b308:	21fff804 	addi	r7,r4,-32
    b30c:	01400804 	movi	r5,32
    b310:	41ced83a 	srl	r7,r8,r7
    b314:	21400a26 	beq	r4,r5,b340 <__adddf3+0x8a4>
    b318:	01401004 	movi	r5,64
    b31c:	2909c83a 	sub	r4,r5,r4
    b320:	4108983a 	sll	r4,r8,r4
    b324:	2448b03a 	or	r4,r4,r17
    b328:	2008c03a 	cmpne	r4,r4,zero
    b32c:	3922b03a 	or	r17,r7,r4
    b330:	0009883a 	mov	r4,zero
    b334:	003f8d06 	br	b16c <__alt_data_end+0xfffdb16c>
    b338:	0007883a 	mov	r3,zero
    b33c:	003fdd06 	br	b2b4 <__alt_data_end+0xfffdb2b4>
    b340:	0009883a 	mov	r4,zero
    b344:	003ff706 	br	b324 <__alt_data_end+0xfffdb324>

0000b348 <__divdf3>:
    b348:	defff004 	addi	sp,sp,-64
    b34c:	dc800815 	stw	r18,32(sp)
    b350:	2824d53a 	srli	r18,r5,20
    b354:	dd800c15 	stw	r22,48(sp)
    b358:	282cd7fa 	srli	r22,r5,31
    b35c:	dc000615 	stw	r16,24(sp)
    b360:	04000434 	movhi	r16,16
    b364:	843fffc4 	addi	r16,r16,-1
    b368:	dfc00f15 	stw	ra,60(sp)
    b36c:	df000e15 	stw	fp,56(sp)
    b370:	ddc00d15 	stw	r23,52(sp)
    b374:	dd400b15 	stw	r21,44(sp)
    b378:	dd000a15 	stw	r20,40(sp)
    b37c:	dcc00915 	stw	r19,36(sp)
    b380:	dc400715 	stw	r17,28(sp)
    b384:	9481ffcc 	andi	r18,r18,2047
    b388:	2c20703a 	and	r16,r5,r16
    b38c:	b2003fcc 	andi	r8,r22,255
    b390:	90006126 	beq	r18,zero,b518 <__divdf3+0x1d0>
    b394:	0081ffc4 	movi	r2,2047
    b398:	202b883a 	mov	r21,r4
    b39c:	90803726 	beq	r18,r2,b47c <__divdf3+0x134>
    b3a0:	80800434 	orhi	r2,r16,16
    b3a4:	100490fa 	slli	r2,r2,3
    b3a8:	2020d77a 	srli	r16,r4,29
    b3ac:	202a90fa 	slli	r21,r4,3
    b3b0:	94bf0044 	addi	r18,r18,-1023
    b3b4:	80a0b03a 	or	r16,r16,r2
    b3b8:	0013883a 	mov	r9,zero
    b3bc:	000b883a 	mov	r5,zero
    b3c0:	3806d53a 	srli	r3,r7,20
    b3c4:	382ed7fa 	srli	r23,r7,31
    b3c8:	04400434 	movhi	r17,16
    b3cc:	8c7fffc4 	addi	r17,r17,-1
    b3d0:	18c1ffcc 	andi	r3,r3,2047
    b3d4:	3029883a 	mov	r20,r6
    b3d8:	3c62703a 	and	r17,r7,r17
    b3dc:	bf003fcc 	andi	fp,r23,255
    b3e0:	18006e26 	beq	r3,zero,b59c <__divdf3+0x254>
    b3e4:	0081ffc4 	movi	r2,2047
    b3e8:	18806626 	beq	r3,r2,b584 <__divdf3+0x23c>
    b3ec:	88800434 	orhi	r2,r17,16
    b3f0:	100490fa 	slli	r2,r2,3
    b3f4:	3022d77a 	srli	r17,r6,29
    b3f8:	302890fa 	slli	r20,r6,3
    b3fc:	18ff0044 	addi	r3,r3,-1023
    b400:	88a2b03a 	or	r17,r17,r2
    b404:	000f883a 	mov	r7,zero
    b408:	b5e6f03a 	xor	r19,r22,r23
    b40c:	3a4cb03a 	or	r6,r7,r9
    b410:	008003c4 	movi	r2,15
    b414:	9809883a 	mov	r4,r19
    b418:	90c7c83a 	sub	r3,r18,r3
    b41c:	9cc03fcc 	andi	r19,r19,255
    b420:	11809636 	bltu	r2,r6,b67c <__divdf3+0x334>
    b424:	300c90ba 	slli	r6,r6,2
    b428:	00800074 	movhi	r2,1
    b42c:	10ad0f04 	addi	r2,r2,-19396
    b430:	308d883a 	add	r6,r6,r2
    b434:	30800017 	ldw	r2,0(r6)
    b438:	1000683a 	jmp	r2
    b43c:	0000b67c 	xorhi	zero,zero,729
    b440:	0000b4b4 	movhi	zero,722
    b444:	0000b66c 	andhi	zero,zero,729
    b448:	0000b4a8 	cmpgeui	zero,zero,722
    b44c:	0000b66c 	andhi	zero,zero,729
    b450:	0000b640 	call	b64 <___vfprintf_internal_r+0x470>
    b454:	0000b66c 	andhi	zero,zero,729
    b458:	0000b4a8 	cmpgeui	zero,zero,722
    b45c:	0000b4b4 	movhi	zero,722
    b460:	0000b4b4 	movhi	zero,722
    b464:	0000b640 	call	b64 <___vfprintf_internal_r+0x470>
    b468:	0000b4a8 	cmpgeui	zero,zero,722
    b46c:	0000b498 	cmpnei	zero,zero,722
    b470:	0000b498 	cmpnei	zero,zero,722
    b474:	0000b498 	cmpnei	zero,zero,722
    b478:	0000ba04 	movi	zero,744
    b47c:	2404b03a 	or	r2,r4,r16
    b480:	10006c1e 	bne	r2,zero,b634 <__divdf3+0x2ec>
    b484:	02400204 	movi	r9,8
    b488:	0021883a 	mov	r16,zero
    b48c:	002b883a 	mov	r21,zero
    b490:	01400084 	movi	r5,2
    b494:	003fca06 	br	b3c0 <__alt_data_end+0xfffdb3c0>
    b498:	8023883a 	mov	r17,r16
    b49c:	a829883a 	mov	r20,r21
    b4a0:	4039883a 	mov	fp,r8
    b4a4:	280f883a 	mov	r7,r5
    b4a8:	00800084 	movi	r2,2
    b4ac:	3881601e 	bne	r7,r2,ba30 <__divdf3+0x6e8>
    b4b0:	e027883a 	mov	r19,fp
    b4b4:	9900004c 	andi	r4,r19,1
    b4b8:	0081ffc4 	movi	r2,2047
    b4bc:	0021883a 	mov	r16,zero
    b4c0:	002b883a 	mov	r21,zero
    b4c4:	1004953a 	slli	r2,r2,20
    b4c8:	20c03fcc 	andi	r3,r4,255
    b4cc:	01400434 	movhi	r5,16
    b4d0:	297fffc4 	addi	r5,r5,-1
    b4d4:	180697fa 	slli	r3,r3,31
    b4d8:	8160703a 	and	r16,r16,r5
    b4dc:	80a0b03a 	or	r16,r16,r2
    b4e0:	80c6b03a 	or	r3,r16,r3
    b4e4:	a805883a 	mov	r2,r21
    b4e8:	dfc00f17 	ldw	ra,60(sp)
    b4ec:	df000e17 	ldw	fp,56(sp)
    b4f0:	ddc00d17 	ldw	r23,52(sp)
    b4f4:	dd800c17 	ldw	r22,48(sp)
    b4f8:	dd400b17 	ldw	r21,44(sp)
    b4fc:	dd000a17 	ldw	r20,40(sp)
    b500:	dcc00917 	ldw	r19,36(sp)
    b504:	dc800817 	ldw	r18,32(sp)
    b508:	dc400717 	ldw	r17,28(sp)
    b50c:	dc000617 	ldw	r16,24(sp)
    b510:	dec01004 	addi	sp,sp,64
    b514:	f800283a 	ret
    b518:	2404b03a 	or	r2,r4,r16
    b51c:	2023883a 	mov	r17,r4
    b520:	10003f26 	beq	r2,zero,b620 <__divdf3+0x2d8>
    b524:	80015e26 	beq	r16,zero,baa0 <__divdf3+0x758>
    b528:	8009883a 	mov	r4,r16
    b52c:	d9800215 	stw	r6,8(sp)
    b530:	d9c00515 	stw	r7,20(sp)
    b534:	da000415 	stw	r8,16(sp)
    b538:	000d2dc0 	call	d2dc <__clzsi2>
    b53c:	d9800217 	ldw	r6,8(sp)
    b540:	d9c00517 	ldw	r7,20(sp)
    b544:	da000417 	ldw	r8,16(sp)
    b548:	113ffd44 	addi	r4,r2,-11
    b54c:	00c00704 	movi	r3,28
    b550:	19014f16 	blt	r3,r4,ba90 <__divdf3+0x748>
    b554:	00c00744 	movi	r3,29
    b558:	157ffe04 	addi	r21,r2,-8
    b55c:	1907c83a 	sub	r3,r3,r4
    b560:	8560983a 	sll	r16,r16,r21
    b564:	88c6d83a 	srl	r3,r17,r3
    b568:	8d6a983a 	sll	r21,r17,r21
    b56c:	1c20b03a 	or	r16,r3,r16
    b570:	1080fcc4 	addi	r2,r2,1011
    b574:	00a5c83a 	sub	r18,zero,r2
    b578:	0013883a 	mov	r9,zero
    b57c:	000b883a 	mov	r5,zero
    b580:	003f8f06 	br	b3c0 <__alt_data_end+0xfffdb3c0>
    b584:	3444b03a 	or	r2,r6,r17
    b588:	1000231e 	bne	r2,zero,b618 <__divdf3+0x2d0>
    b58c:	0023883a 	mov	r17,zero
    b590:	0029883a 	mov	r20,zero
    b594:	01c00084 	movi	r7,2
    b598:	003f9b06 	br	b408 <__alt_data_end+0xfffdb408>
    b59c:	3444b03a 	or	r2,r6,r17
    b5a0:	10001926 	beq	r2,zero,b608 <__divdf3+0x2c0>
    b5a4:	88014b26 	beq	r17,zero,bad4 <__divdf3+0x78c>
    b5a8:	8809883a 	mov	r4,r17
    b5ac:	d9400115 	stw	r5,4(sp)
    b5b0:	d9800215 	stw	r6,8(sp)
    b5b4:	da000415 	stw	r8,16(sp)
    b5b8:	da400315 	stw	r9,12(sp)
    b5bc:	000d2dc0 	call	d2dc <__clzsi2>
    b5c0:	d9400117 	ldw	r5,4(sp)
    b5c4:	d9800217 	ldw	r6,8(sp)
    b5c8:	da000417 	ldw	r8,16(sp)
    b5cc:	da400317 	ldw	r9,12(sp)
    b5d0:	113ffd44 	addi	r4,r2,-11
    b5d4:	00c00704 	movi	r3,28
    b5d8:	19013a16 	blt	r3,r4,bac4 <__divdf3+0x77c>
    b5dc:	00c00744 	movi	r3,29
    b5e0:	153ffe04 	addi	r20,r2,-8
    b5e4:	1907c83a 	sub	r3,r3,r4
    b5e8:	8d22983a 	sll	r17,r17,r20
    b5ec:	30c6d83a 	srl	r3,r6,r3
    b5f0:	3528983a 	sll	r20,r6,r20
    b5f4:	1c62b03a 	or	r17,r3,r17
    b5f8:	1080fcc4 	addi	r2,r2,1011
    b5fc:	0087c83a 	sub	r3,zero,r2
    b600:	000f883a 	mov	r7,zero
    b604:	003f8006 	br	b408 <__alt_data_end+0xfffdb408>
    b608:	0023883a 	mov	r17,zero
    b60c:	0029883a 	mov	r20,zero
    b610:	01c00044 	movi	r7,1
    b614:	003f7c06 	br	b408 <__alt_data_end+0xfffdb408>
    b618:	01c000c4 	movi	r7,3
    b61c:	003f7a06 	br	b408 <__alt_data_end+0xfffdb408>
    b620:	02400104 	movi	r9,4
    b624:	0021883a 	mov	r16,zero
    b628:	002b883a 	mov	r21,zero
    b62c:	01400044 	movi	r5,1
    b630:	003f6306 	br	b3c0 <__alt_data_end+0xfffdb3c0>
    b634:	02400304 	movi	r9,12
    b638:	014000c4 	movi	r5,3
    b63c:	003f6006 	br	b3c0 <__alt_data_end+0xfffdb3c0>
    b640:	04000434 	movhi	r16,16
    b644:	0009883a 	mov	r4,zero
    b648:	843fffc4 	addi	r16,r16,-1
    b64c:	057fffc4 	movi	r21,-1
    b650:	0081ffc4 	movi	r2,2047
    b654:	003f9b06 	br	b4c4 <__alt_data_end+0xfffdb4c4>
    b658:	00c00044 	movi	r3,1
    b65c:	1887c83a 	sub	r3,r3,r2
    b660:	01000e04 	movi	r4,56
    b664:	20c1530e 	bge	r4,r3,bbb4 <__divdf3+0x86c>
    b668:	9900004c 	andi	r4,r19,1
    b66c:	0005883a 	mov	r2,zero
    b670:	0021883a 	mov	r16,zero
    b674:	002b883a 	mov	r21,zero
    b678:	003f9206 	br	b4c4 <__alt_data_end+0xfffdb4c4>
    b67c:	8c012e36 	bltu	r17,r16,bb38 <__divdf3+0x7f0>
    b680:	84412c26 	beq	r16,r17,bb34 <__divdf3+0x7ec>
    b684:	a82f883a 	mov	r23,r21
    b688:	18ffffc4 	addi	r3,r3,-1
    b68c:	002b883a 	mov	r21,zero
    b690:	a004d63a 	srli	r2,r20,24
    b694:	8822923a 	slli	r17,r17,8
    b698:	a028923a 	slli	r20,r20,8
    b69c:	8009883a 	mov	r4,r16
    b6a0:	88acb03a 	or	r22,r17,r2
    b6a4:	dd000015 	stw	r20,0(sp)
    b6a8:	b028d43a 	srli	r20,r22,16
    b6ac:	d8c00215 	stw	r3,8(sp)
    b6b0:	b4bfffcc 	andi	r18,r22,65535
    b6b4:	a00b883a 	mov	r5,r20
    b6b8:	00005cc0 	call	5cc <__udivsi3>
    b6bc:	100b883a 	mov	r5,r2
    b6c0:	9009883a 	mov	r4,r18
    b6c4:	1023883a 	mov	r17,r2
    b6c8:	000aa740 	call	aa74 <__mulsi3>
    b6cc:	8009883a 	mov	r4,r16
    b6d0:	a00b883a 	mov	r5,r20
    b6d4:	1039883a 	mov	fp,r2
    b6d8:	00006300 	call	630 <__umodsi3>
    b6dc:	1004943a 	slli	r2,r2,16
    b6e0:	b808d43a 	srli	r4,r23,16
    b6e4:	d8c00217 	ldw	r3,8(sp)
    b6e8:	2084b03a 	or	r2,r4,r2
    b6ec:	1700062e 	bgeu	r2,fp,b708 <__divdf3+0x3c0>
    b6f0:	1585883a 	add	r2,r2,r22
    b6f4:	893fffc4 	addi	r4,r17,-1
    b6f8:	15811d36 	bltu	r2,r22,bb70 <__divdf3+0x828>
    b6fc:	17011c2e 	bgeu	r2,fp,bb70 <__divdf3+0x828>
    b700:	8c7fff84 	addi	r17,r17,-2
    b704:	1585883a 	add	r2,r2,r22
    b708:	1739c83a 	sub	fp,r2,fp
    b70c:	a00b883a 	mov	r5,r20
    b710:	e009883a 	mov	r4,fp
    b714:	d8c00215 	stw	r3,8(sp)
    b718:	00005cc0 	call	5cc <__udivsi3>
    b71c:	100b883a 	mov	r5,r2
    b720:	9009883a 	mov	r4,r18
    b724:	1021883a 	mov	r16,r2
    b728:	000aa740 	call	aa74 <__mulsi3>
    b72c:	a00b883a 	mov	r5,r20
    b730:	e009883a 	mov	r4,fp
    b734:	d8800415 	stw	r2,16(sp)
    b738:	00006300 	call	630 <__umodsi3>
    b73c:	1004943a 	slli	r2,r2,16
    b740:	da000417 	ldw	r8,16(sp)
    b744:	bdffffcc 	andi	r23,r23,65535
    b748:	b884b03a 	or	r2,r23,r2
    b74c:	d8c00217 	ldw	r3,8(sp)
    b750:	1200062e 	bgeu	r2,r8,b76c <__divdf3+0x424>
    b754:	1585883a 	add	r2,r2,r22
    b758:	813fffc4 	addi	r4,r16,-1
    b75c:	15810236 	bltu	r2,r22,bb68 <__divdf3+0x820>
    b760:	1201012e 	bgeu	r2,r8,bb68 <__divdf3+0x820>
    b764:	843fff84 	addi	r16,r16,-2
    b768:	1585883a 	add	r2,r2,r22
    b76c:	8822943a 	slli	r17,r17,16
    b770:	d9800017 	ldw	r6,0(sp)
    b774:	1211c83a 	sub	r8,r2,r8
    b778:	8c22b03a 	or	r17,r17,r16
    b77c:	373fffcc 	andi	fp,r6,65535
    b780:	8abfffcc 	andi	r10,r17,65535
    b784:	8820d43a 	srli	r16,r17,16
    b788:	5009883a 	mov	r4,r10
    b78c:	e00b883a 	mov	r5,fp
    b790:	302ed43a 	srli	r23,r6,16
    b794:	d8c00215 	stw	r3,8(sp)
    b798:	da000415 	stw	r8,16(sp)
    b79c:	da800115 	stw	r10,4(sp)
    b7a0:	000aa740 	call	aa74 <__mulsi3>
    b7a4:	800b883a 	mov	r5,r16
    b7a8:	e009883a 	mov	r4,fp
    b7ac:	d8800515 	stw	r2,20(sp)
    b7b0:	000aa740 	call	aa74 <__mulsi3>
    b7b4:	8009883a 	mov	r4,r16
    b7b8:	b80b883a 	mov	r5,r23
    b7bc:	d8800315 	stw	r2,12(sp)
    b7c0:	000aa740 	call	aa74 <__mulsi3>
    b7c4:	da800117 	ldw	r10,4(sp)
    b7c8:	b80b883a 	mov	r5,r23
    b7cc:	1021883a 	mov	r16,r2
    b7d0:	5009883a 	mov	r4,r10
    b7d4:	000aa740 	call	aa74 <__mulsi3>
    b7d8:	d9c00517 	ldw	r7,20(sp)
    b7dc:	da400317 	ldw	r9,12(sp)
    b7e0:	d8c00217 	ldw	r3,8(sp)
    b7e4:	3808d43a 	srli	r4,r7,16
    b7e8:	1245883a 	add	r2,r2,r9
    b7ec:	da000417 	ldw	r8,16(sp)
    b7f0:	2085883a 	add	r2,r4,r2
    b7f4:	1240022e 	bgeu	r2,r9,b800 <__divdf3+0x4b8>
    b7f8:	01000074 	movhi	r4,1
    b7fc:	8121883a 	add	r16,r16,r4
    b800:	1008d43a 	srli	r4,r2,16
    b804:	1004943a 	slli	r2,r2,16
    b808:	39ffffcc 	andi	r7,r7,65535
    b80c:	2409883a 	add	r4,r4,r16
    b810:	11c5883a 	add	r2,r2,r7
    b814:	4100bb36 	bltu	r8,r4,bb04 <__divdf3+0x7bc>
    b818:	4100d726 	beq	r8,r4,bb78 <__divdf3+0x830>
    b81c:	4109c83a 	sub	r4,r8,r4
    b820:	a8a1c83a 	sub	r16,r21,r2
    b824:	ac2b803a 	cmpltu	r21,r21,r16
    b828:	256bc83a 	sub	r21,r4,r21
    b82c:	b540d926 	beq	r22,r21,bb94 <__divdf3+0x84c>
    b830:	a00b883a 	mov	r5,r20
    b834:	a809883a 	mov	r4,r21
    b838:	d8c00215 	stw	r3,8(sp)
    b83c:	00005cc0 	call	5cc <__udivsi3>
    b840:	100b883a 	mov	r5,r2
    b844:	9009883a 	mov	r4,r18
    b848:	d8800515 	stw	r2,20(sp)
    b84c:	000aa740 	call	aa74 <__mulsi3>
    b850:	a809883a 	mov	r4,r21
    b854:	a00b883a 	mov	r5,r20
    b858:	d8800415 	stw	r2,16(sp)
    b85c:	00006300 	call	630 <__umodsi3>
    b860:	1004943a 	slli	r2,r2,16
    b864:	8008d43a 	srli	r4,r16,16
    b868:	da000417 	ldw	r8,16(sp)
    b86c:	d8c00217 	ldw	r3,8(sp)
    b870:	2084b03a 	or	r2,r4,r2
    b874:	d9c00517 	ldw	r7,20(sp)
    b878:	1200062e 	bgeu	r2,r8,b894 <__divdf3+0x54c>
    b87c:	1585883a 	add	r2,r2,r22
    b880:	393fffc4 	addi	r4,r7,-1
    b884:	1580c536 	bltu	r2,r22,bb9c <__divdf3+0x854>
    b888:	1200c42e 	bgeu	r2,r8,bb9c <__divdf3+0x854>
    b88c:	39ffff84 	addi	r7,r7,-2
    b890:	1585883a 	add	r2,r2,r22
    b894:	122bc83a 	sub	r21,r2,r8
    b898:	a00b883a 	mov	r5,r20
    b89c:	a809883a 	mov	r4,r21
    b8a0:	d8c00215 	stw	r3,8(sp)
    b8a4:	d9c00515 	stw	r7,20(sp)
    b8a8:	00005cc0 	call	5cc <__udivsi3>
    b8ac:	9009883a 	mov	r4,r18
    b8b0:	100b883a 	mov	r5,r2
    b8b4:	d8800415 	stw	r2,16(sp)
    b8b8:	000aa740 	call	aa74 <__mulsi3>
    b8bc:	a809883a 	mov	r4,r21
    b8c0:	a00b883a 	mov	r5,r20
    b8c4:	1025883a 	mov	r18,r2
    b8c8:	00006300 	call	630 <__umodsi3>
    b8cc:	1004943a 	slli	r2,r2,16
    b8d0:	813fffcc 	andi	r4,r16,65535
    b8d4:	d8c00217 	ldw	r3,8(sp)
    b8d8:	20a0b03a 	or	r16,r4,r2
    b8dc:	d9c00517 	ldw	r7,20(sp)
    b8e0:	da000417 	ldw	r8,16(sp)
    b8e4:	8480062e 	bgeu	r16,r18,b900 <__divdf3+0x5b8>
    b8e8:	85a1883a 	add	r16,r16,r22
    b8ec:	40bfffc4 	addi	r2,r8,-1
    b8f0:	8580ac36 	bltu	r16,r22,bba4 <__divdf3+0x85c>
    b8f4:	8480ab2e 	bgeu	r16,r18,bba4 <__divdf3+0x85c>
    b8f8:	423fff84 	addi	r8,r8,-2
    b8fc:	85a1883a 	add	r16,r16,r22
    b900:	3804943a 	slli	r2,r7,16
    b904:	84a1c83a 	sub	r16,r16,r18
    b908:	e009883a 	mov	r4,fp
    b90c:	1228b03a 	or	r20,r2,r8
    b910:	a1ffffcc 	andi	r7,r20,65535
    b914:	a024d43a 	srli	r18,r20,16
    b918:	380b883a 	mov	r5,r7
    b91c:	d8c00215 	stw	r3,8(sp)
    b920:	d9c00515 	stw	r7,20(sp)
    b924:	000aa740 	call	aa74 <__mulsi3>
    b928:	900b883a 	mov	r5,r18
    b92c:	e009883a 	mov	r4,fp
    b930:	102b883a 	mov	r21,r2
    b934:	000aa740 	call	aa74 <__mulsi3>
    b938:	900b883a 	mov	r5,r18
    b93c:	b809883a 	mov	r4,r23
    b940:	1039883a 	mov	fp,r2
    b944:	000aa740 	call	aa74 <__mulsi3>
    b948:	d9c00517 	ldw	r7,20(sp)
    b94c:	b80b883a 	mov	r5,r23
    b950:	1025883a 	mov	r18,r2
    b954:	3809883a 	mov	r4,r7
    b958:	000aa740 	call	aa74 <__mulsi3>
    b95c:	a808d43a 	srli	r4,r21,16
    b960:	1705883a 	add	r2,r2,fp
    b964:	d8c00217 	ldw	r3,8(sp)
    b968:	2085883a 	add	r2,r4,r2
    b96c:	1700022e 	bgeu	r2,fp,b978 <__divdf3+0x630>
    b970:	01000074 	movhi	r4,1
    b974:	9125883a 	add	r18,r18,r4
    b978:	1008d43a 	srli	r4,r2,16
    b97c:	1004943a 	slli	r2,r2,16
    b980:	ad7fffcc 	andi	r21,r21,65535
    b984:	2489883a 	add	r4,r4,r18
    b988:	1545883a 	add	r2,r2,r21
    b98c:	81003836 	bltu	r16,r4,ba70 <__divdf3+0x728>
    b990:	81003626 	beq	r16,r4,ba6c <__divdf3+0x724>
    b994:	a5000054 	ori	r20,r20,1
    b998:	1880ffc4 	addi	r2,r3,1023
    b99c:	00bf2e0e 	bge	zero,r2,b658 <__alt_data_end+0xfffdb658>
    b9a0:	a10001cc 	andi	r4,r20,7
    b9a4:	20000726 	beq	r4,zero,b9c4 <__divdf3+0x67c>
    b9a8:	a10003cc 	andi	r4,r20,15
    b9ac:	01400104 	movi	r5,4
    b9b0:	21400426 	beq	r4,r5,b9c4 <__divdf3+0x67c>
    b9b4:	a149883a 	add	r4,r20,r5
    b9b8:	2529803a 	cmpltu	r20,r4,r20
    b9bc:	8d23883a 	add	r17,r17,r20
    b9c0:	2029883a 	mov	r20,r4
    b9c4:	8900402c 	andhi	r4,r17,256
    b9c8:	20000426 	beq	r4,zero,b9dc <__divdf3+0x694>
    b9cc:	18810004 	addi	r2,r3,1024
    b9d0:	00ffc034 	movhi	r3,65280
    b9d4:	18ffffc4 	addi	r3,r3,-1
    b9d8:	88e2703a 	and	r17,r17,r3
    b9dc:	00c1ff84 	movi	r3,2046
    b9e0:	18beb416 	blt	r3,r2,b4b4 <__alt_data_end+0xfffdb4b4>
    b9e4:	a028d0fa 	srli	r20,r20,3
    b9e8:	882a977a 	slli	r21,r17,29
    b9ec:	8820927a 	slli	r16,r17,9
    b9f0:	1081ffcc 	andi	r2,r2,2047
    b9f4:	ad2ab03a 	or	r21,r21,r20
    b9f8:	8020d33a 	srli	r16,r16,12
    b9fc:	9900004c 	andi	r4,r19,1
    ba00:	003eb006 	br	b4c4 <__alt_data_end+0xfffdb4c4>
    ba04:	8080022c 	andhi	r2,r16,8
    ba08:	10001226 	beq	r2,zero,ba54 <__divdf3+0x70c>
    ba0c:	8880022c 	andhi	r2,r17,8
    ba10:	1000101e 	bne	r2,zero,ba54 <__divdf3+0x70c>
    ba14:	00800434 	movhi	r2,16
    ba18:	8c000234 	orhi	r16,r17,8
    ba1c:	10bfffc4 	addi	r2,r2,-1
    ba20:	b809883a 	mov	r4,r23
    ba24:	80a0703a 	and	r16,r16,r2
    ba28:	a02b883a 	mov	r21,r20
    ba2c:	003f0806 	br	b650 <__alt_data_end+0xfffdb650>
    ba30:	008000c4 	movi	r2,3
    ba34:	3880b126 	beq	r7,r2,bcfc <__divdf3+0x9b4>
    ba38:	00800044 	movi	r2,1
    ba3c:	38805b1e 	bne	r7,r2,bbac <__divdf3+0x864>
    ba40:	e009883a 	mov	r4,fp
    ba44:	0005883a 	mov	r2,zero
    ba48:	0021883a 	mov	r16,zero
    ba4c:	002b883a 	mov	r21,zero
    ba50:	003e9c06 	br	b4c4 <__alt_data_end+0xfffdb4c4>
    ba54:	00800434 	movhi	r2,16
    ba58:	84000234 	orhi	r16,r16,8
    ba5c:	10bfffc4 	addi	r2,r2,-1
    ba60:	b009883a 	mov	r4,r22
    ba64:	80a0703a 	and	r16,r16,r2
    ba68:	003ef906 	br	b650 <__alt_data_end+0xfffdb650>
    ba6c:	103fca26 	beq	r2,zero,b998 <__alt_data_end+0xfffdb998>
    ba70:	b421883a 	add	r16,r22,r16
    ba74:	a17fffc4 	addi	r5,r20,-1
    ba78:	8580422e 	bgeu	r16,r22,bb84 <__divdf3+0x83c>
    ba7c:	2829883a 	mov	r20,r5
    ba80:	813fc41e 	bne	r16,r4,b994 <__alt_data_end+0xfffdb994>
    ba84:	d9800017 	ldw	r6,0(sp)
    ba88:	30bfc21e 	bne	r6,r2,b994 <__alt_data_end+0xfffdb994>
    ba8c:	003fc206 	br	b998 <__alt_data_end+0xfffdb998>
    ba90:	143ff604 	addi	r16,r2,-40
    ba94:	8c20983a 	sll	r16,r17,r16
    ba98:	002b883a 	mov	r21,zero
    ba9c:	003eb406 	br	b570 <__alt_data_end+0xfffdb570>
    baa0:	d9800215 	stw	r6,8(sp)
    baa4:	d9c00515 	stw	r7,20(sp)
    baa8:	da000415 	stw	r8,16(sp)
    baac:	000d2dc0 	call	d2dc <__clzsi2>
    bab0:	10800804 	addi	r2,r2,32
    bab4:	da000417 	ldw	r8,16(sp)
    bab8:	d9c00517 	ldw	r7,20(sp)
    babc:	d9800217 	ldw	r6,8(sp)
    bac0:	003ea106 	br	b548 <__alt_data_end+0xfffdb548>
    bac4:	147ff604 	addi	r17,r2,-40
    bac8:	3462983a 	sll	r17,r6,r17
    bacc:	0029883a 	mov	r20,zero
    bad0:	003ec906 	br	b5f8 <__alt_data_end+0xfffdb5f8>
    bad4:	3009883a 	mov	r4,r6
    bad8:	d9400115 	stw	r5,4(sp)
    badc:	d9800215 	stw	r6,8(sp)
    bae0:	da000415 	stw	r8,16(sp)
    bae4:	da400315 	stw	r9,12(sp)
    bae8:	000d2dc0 	call	d2dc <__clzsi2>
    baec:	10800804 	addi	r2,r2,32
    baf0:	da400317 	ldw	r9,12(sp)
    baf4:	da000417 	ldw	r8,16(sp)
    baf8:	d9800217 	ldw	r6,8(sp)
    bafc:	d9400117 	ldw	r5,4(sp)
    bb00:	003eb306 	br	b5d0 <__alt_data_end+0xfffdb5d0>
    bb04:	d9800017 	ldw	r6,0(sp)
    bb08:	a9ab883a 	add	r21,r21,r6
    bb0c:	a98b803a 	cmpltu	r5,r21,r6
    bb10:	2d8b883a 	add	r5,r5,r22
    bb14:	2a11883a 	add	r8,r5,r8
    bb18:	897fffc4 	addi	r5,r17,-1
    bb1c:	b2000c2e 	bgeu	r22,r8,bb50 <__divdf3+0x808>
    bb20:	41003f36 	bltu	r8,r4,bc20 <__divdf3+0x8d8>
    bb24:	22006c26 	beq	r4,r8,bcd8 <__divdf3+0x990>
    bb28:	4109c83a 	sub	r4,r8,r4
    bb2c:	2823883a 	mov	r17,r5
    bb30:	003f3b06 	br	b820 <__alt_data_end+0xfffdb820>
    bb34:	ad3ed336 	bltu	r21,r20,b684 <__alt_data_end+0xfffdb684>
    bb38:	a804d07a 	srli	r2,r21,1
    bb3c:	802e97fa 	slli	r23,r16,31
    bb40:	a82a97fa 	slli	r21,r21,31
    bb44:	8020d07a 	srli	r16,r16,1
    bb48:	b8aeb03a 	or	r23,r23,r2
    bb4c:	003ed006 	br	b690 <__alt_data_end+0xfffdb690>
    bb50:	b23ff51e 	bne	r22,r8,bb28 <__alt_data_end+0xfffdbb28>
    bb54:	d9800017 	ldw	r6,0(sp)
    bb58:	a9bff12e 	bgeu	r21,r6,bb20 <__alt_data_end+0xfffdbb20>
    bb5c:	b109c83a 	sub	r4,r22,r4
    bb60:	2823883a 	mov	r17,r5
    bb64:	003f2e06 	br	b820 <__alt_data_end+0xfffdb820>
    bb68:	2021883a 	mov	r16,r4
    bb6c:	003eff06 	br	b76c <__alt_data_end+0xfffdb76c>
    bb70:	2023883a 	mov	r17,r4
    bb74:	003ee406 	br	b708 <__alt_data_end+0xfffdb708>
    bb78:	a8bfe236 	bltu	r21,r2,bb04 <__alt_data_end+0xfffdbb04>
    bb7c:	0009883a 	mov	r4,zero
    bb80:	003f2706 	br	b820 <__alt_data_end+0xfffdb820>
    bb84:	81002d36 	bltu	r16,r4,bc3c <__divdf3+0x8f4>
    bb88:	24005626 	beq	r4,r16,bce4 <__divdf3+0x99c>
    bb8c:	2829883a 	mov	r20,r5
    bb90:	003f8006 	br	b994 <__alt_data_end+0xfffdb994>
    bb94:	053fffc4 	movi	r20,-1
    bb98:	003f7f06 	br	b998 <__alt_data_end+0xfffdb998>
    bb9c:	200f883a 	mov	r7,r4
    bba0:	003f3c06 	br	b894 <__alt_data_end+0xfffdb894>
    bba4:	1011883a 	mov	r8,r2
    bba8:	003f5506 	br	b900 <__alt_data_end+0xfffdb900>
    bbac:	e027883a 	mov	r19,fp
    bbb0:	003f7906 	br	b998 <__alt_data_end+0xfffdb998>
    bbb4:	010007c4 	movi	r4,31
    bbb8:	20c02816 	blt	r4,r3,bc5c <__divdf3+0x914>
    bbbc:	00800804 	movi	r2,32
    bbc0:	10c5c83a 	sub	r2,r2,r3
    bbc4:	888a983a 	sll	r5,r17,r2
    bbc8:	a0c8d83a 	srl	r4,r20,r3
    bbcc:	a084983a 	sll	r2,r20,r2
    bbd0:	88e2d83a 	srl	r17,r17,r3
    bbd4:	2906b03a 	or	r3,r5,r4
    bbd8:	1004c03a 	cmpne	r2,r2,zero
    bbdc:	1886b03a 	or	r3,r3,r2
    bbe0:	188001cc 	andi	r2,r3,7
    bbe4:	10000726 	beq	r2,zero,bc04 <__divdf3+0x8bc>
    bbe8:	188003cc 	andi	r2,r3,15
    bbec:	01000104 	movi	r4,4
    bbf0:	11000426 	beq	r2,r4,bc04 <__divdf3+0x8bc>
    bbf4:	1805883a 	mov	r2,r3
    bbf8:	10c00104 	addi	r3,r2,4
    bbfc:	1885803a 	cmpltu	r2,r3,r2
    bc00:	88a3883a 	add	r17,r17,r2
    bc04:	8880202c 	andhi	r2,r17,128
    bc08:	10002926 	beq	r2,zero,bcb0 <__divdf3+0x968>
    bc0c:	9900004c 	andi	r4,r19,1
    bc10:	00800044 	movi	r2,1
    bc14:	0021883a 	mov	r16,zero
    bc18:	002b883a 	mov	r21,zero
    bc1c:	003e2906 	br	b4c4 <__alt_data_end+0xfffdb4c4>
    bc20:	d9800017 	ldw	r6,0(sp)
    bc24:	8c7fff84 	addi	r17,r17,-2
    bc28:	a9ab883a 	add	r21,r21,r6
    bc2c:	a98b803a 	cmpltu	r5,r21,r6
    bc30:	2d8b883a 	add	r5,r5,r22
    bc34:	2a11883a 	add	r8,r5,r8
    bc38:	003ef806 	br	b81c <__alt_data_end+0xfffdb81c>
    bc3c:	d9800017 	ldw	r6,0(sp)
    bc40:	318f883a 	add	r7,r6,r6
    bc44:	398b803a 	cmpltu	r5,r7,r6
    bc48:	2d8d883a 	add	r6,r5,r22
    bc4c:	81a1883a 	add	r16,r16,r6
    bc50:	a17fff84 	addi	r5,r20,-2
    bc54:	d9c00015 	stw	r7,0(sp)
    bc58:	003f8806 	br	ba7c <__alt_data_end+0xfffdba7c>
    bc5c:	013ff844 	movi	r4,-31
    bc60:	2085c83a 	sub	r2,r4,r2
    bc64:	8888d83a 	srl	r4,r17,r2
    bc68:	00800804 	movi	r2,32
    bc6c:	18802126 	beq	r3,r2,bcf4 <__divdf3+0x9ac>
    bc70:	04001004 	movi	r16,64
    bc74:	80c7c83a 	sub	r3,r16,r3
    bc78:	88e0983a 	sll	r16,r17,r3
    bc7c:	8504b03a 	or	r2,r16,r20
    bc80:	1004c03a 	cmpne	r2,r2,zero
    bc84:	2084b03a 	or	r2,r4,r2
    bc88:	144001cc 	andi	r17,r2,7
    bc8c:	88000d1e 	bne	r17,zero,bcc4 <__divdf3+0x97c>
    bc90:	0021883a 	mov	r16,zero
    bc94:	102ad0fa 	srli	r21,r2,3
    bc98:	9900004c 	andi	r4,r19,1
    bc9c:	0005883a 	mov	r2,zero
    bca0:	ac6ab03a 	or	r21,r21,r17
    bca4:	003e0706 	br	b4c4 <__alt_data_end+0xfffdb4c4>
    bca8:	1007883a 	mov	r3,r2
    bcac:	0023883a 	mov	r17,zero
    bcb0:	8820927a 	slli	r16,r17,9
    bcb4:	1805883a 	mov	r2,r3
    bcb8:	8822977a 	slli	r17,r17,29
    bcbc:	8020d33a 	srli	r16,r16,12
    bcc0:	003ff406 	br	bc94 <__alt_data_end+0xfffdbc94>
    bcc4:	10c003cc 	andi	r3,r2,15
    bcc8:	01000104 	movi	r4,4
    bccc:	193ff626 	beq	r3,r4,bca8 <__alt_data_end+0xfffdbca8>
    bcd0:	0023883a 	mov	r17,zero
    bcd4:	003fc806 	br	bbf8 <__alt_data_end+0xfffdbbf8>
    bcd8:	a8bfd136 	bltu	r21,r2,bc20 <__alt_data_end+0xfffdbc20>
    bcdc:	2823883a 	mov	r17,r5
    bce0:	003fa606 	br	bb7c <__alt_data_end+0xfffdbb7c>
    bce4:	d9800017 	ldw	r6,0(sp)
    bce8:	30bfd436 	bltu	r6,r2,bc3c <__alt_data_end+0xfffdbc3c>
    bcec:	2829883a 	mov	r20,r5
    bcf0:	003f6406 	br	ba84 <__alt_data_end+0xfffdba84>
    bcf4:	0021883a 	mov	r16,zero
    bcf8:	003fe006 	br	bc7c <__alt_data_end+0xfffdbc7c>
    bcfc:	00800434 	movhi	r2,16
    bd00:	8c000234 	orhi	r16,r17,8
    bd04:	10bfffc4 	addi	r2,r2,-1
    bd08:	e009883a 	mov	r4,fp
    bd0c:	80a0703a 	and	r16,r16,r2
    bd10:	a02b883a 	mov	r21,r20
    bd14:	003e4e06 	br	b650 <__alt_data_end+0xfffdb650>

0000bd18 <__eqdf2>:
    bd18:	2804d53a 	srli	r2,r5,20
    bd1c:	3806d53a 	srli	r3,r7,20
    bd20:	02000434 	movhi	r8,16
    bd24:	423fffc4 	addi	r8,r8,-1
    bd28:	1081ffcc 	andi	r2,r2,2047
    bd2c:	0281ffc4 	movi	r10,2047
    bd30:	2a12703a 	and	r9,r5,r8
    bd34:	18c1ffcc 	andi	r3,r3,2047
    bd38:	3a10703a 	and	r8,r7,r8
    bd3c:	280ad7fa 	srli	r5,r5,31
    bd40:	380ed7fa 	srli	r7,r7,31
    bd44:	12801026 	beq	r2,r10,bd88 <__eqdf2+0x70>
    bd48:	0281ffc4 	movi	r10,2047
    bd4c:	1a800a26 	beq	r3,r10,bd78 <__eqdf2+0x60>
    bd50:	10c00226 	beq	r2,r3,bd5c <__eqdf2+0x44>
    bd54:	00800044 	movi	r2,1
    bd58:	f800283a 	ret
    bd5c:	4a3ffd1e 	bne	r9,r8,bd54 <__alt_data_end+0xfffdbd54>
    bd60:	21bffc1e 	bne	r4,r6,bd54 <__alt_data_end+0xfffdbd54>
    bd64:	29c00c26 	beq	r5,r7,bd98 <__eqdf2+0x80>
    bd68:	103ffa1e 	bne	r2,zero,bd54 <__alt_data_end+0xfffdbd54>
    bd6c:	2244b03a 	or	r2,r4,r9
    bd70:	1004c03a 	cmpne	r2,r2,zero
    bd74:	f800283a 	ret
    bd78:	3214b03a 	or	r10,r6,r8
    bd7c:	503ff426 	beq	r10,zero,bd50 <__alt_data_end+0xfffdbd50>
    bd80:	00800044 	movi	r2,1
    bd84:	f800283a 	ret
    bd88:	2254b03a 	or	r10,r4,r9
    bd8c:	503fee26 	beq	r10,zero,bd48 <__alt_data_end+0xfffdbd48>
    bd90:	00800044 	movi	r2,1
    bd94:	f800283a 	ret
    bd98:	0005883a 	mov	r2,zero
    bd9c:	f800283a 	ret

0000bda0 <__gedf2>:
    bda0:	2804d53a 	srli	r2,r5,20
    bda4:	3806d53a 	srli	r3,r7,20
    bda8:	02000434 	movhi	r8,16
    bdac:	423fffc4 	addi	r8,r8,-1
    bdb0:	1081ffcc 	andi	r2,r2,2047
    bdb4:	0241ffc4 	movi	r9,2047
    bdb8:	2a14703a 	and	r10,r5,r8
    bdbc:	18c1ffcc 	andi	r3,r3,2047
    bdc0:	3a10703a 	and	r8,r7,r8
    bdc4:	280ad7fa 	srli	r5,r5,31
    bdc8:	380ed7fa 	srli	r7,r7,31
    bdcc:	12401d26 	beq	r2,r9,be44 <__gedf2+0xa4>
    bdd0:	0241ffc4 	movi	r9,2047
    bdd4:	1a401226 	beq	r3,r9,be20 <__gedf2+0x80>
    bdd8:	1000081e 	bne	r2,zero,bdfc <__gedf2+0x5c>
    bddc:	2296b03a 	or	r11,r4,r10
    bde0:	5813003a 	cmpeq	r9,r11,zero
    bde4:	1800091e 	bne	r3,zero,be0c <__gedf2+0x6c>
    bde8:	3218b03a 	or	r12,r6,r8
    bdec:	6000071e 	bne	r12,zero,be0c <__gedf2+0x6c>
    bdf0:	0005883a 	mov	r2,zero
    bdf4:	5800101e 	bne	r11,zero,be38 <__gedf2+0x98>
    bdf8:	f800283a 	ret
    bdfc:	18000c1e 	bne	r3,zero,be30 <__gedf2+0x90>
    be00:	3212b03a 	or	r9,r6,r8
    be04:	48000c26 	beq	r9,zero,be38 <__gedf2+0x98>
    be08:	0013883a 	mov	r9,zero
    be0c:	39c03fcc 	andi	r7,r7,255
    be10:	48000826 	beq	r9,zero,be34 <__gedf2+0x94>
    be14:	38000926 	beq	r7,zero,be3c <__gedf2+0x9c>
    be18:	00800044 	movi	r2,1
    be1c:	f800283a 	ret
    be20:	3212b03a 	or	r9,r6,r8
    be24:	483fec26 	beq	r9,zero,bdd8 <__alt_data_end+0xfffdbdd8>
    be28:	00bfff84 	movi	r2,-2
    be2c:	f800283a 	ret
    be30:	39c03fcc 	andi	r7,r7,255
    be34:	29c00626 	beq	r5,r7,be50 <__gedf2+0xb0>
    be38:	283ff726 	beq	r5,zero,be18 <__alt_data_end+0xfffdbe18>
    be3c:	00bfffc4 	movi	r2,-1
    be40:	f800283a 	ret
    be44:	2292b03a 	or	r9,r4,r10
    be48:	483fe126 	beq	r9,zero,bdd0 <__alt_data_end+0xfffdbdd0>
    be4c:	003ff606 	br	be28 <__alt_data_end+0xfffdbe28>
    be50:	18bff916 	blt	r3,r2,be38 <__alt_data_end+0xfffdbe38>
    be54:	10c00316 	blt	r2,r3,be64 <__gedf2+0xc4>
    be58:	42bff736 	bltu	r8,r10,be38 <__alt_data_end+0xfffdbe38>
    be5c:	52000326 	beq	r10,r8,be6c <__gedf2+0xcc>
    be60:	5200042e 	bgeu	r10,r8,be74 <__gedf2+0xd4>
    be64:	283fec1e 	bne	r5,zero,be18 <__alt_data_end+0xfffdbe18>
    be68:	003ff406 	br	be3c <__alt_data_end+0xfffdbe3c>
    be6c:	313ff236 	bltu	r6,r4,be38 <__alt_data_end+0xfffdbe38>
    be70:	21bffc36 	bltu	r4,r6,be64 <__alt_data_end+0xfffdbe64>
    be74:	0005883a 	mov	r2,zero
    be78:	f800283a 	ret

0000be7c <__ledf2>:
    be7c:	2804d53a 	srli	r2,r5,20
    be80:	3810d53a 	srli	r8,r7,20
    be84:	00c00434 	movhi	r3,16
    be88:	18ffffc4 	addi	r3,r3,-1
    be8c:	1081ffcc 	andi	r2,r2,2047
    be90:	0241ffc4 	movi	r9,2047
    be94:	28d4703a 	and	r10,r5,r3
    be98:	4201ffcc 	andi	r8,r8,2047
    be9c:	38c6703a 	and	r3,r7,r3
    bea0:	280ad7fa 	srli	r5,r5,31
    bea4:	380ed7fa 	srli	r7,r7,31
    bea8:	12401f26 	beq	r2,r9,bf28 <__ledf2+0xac>
    beac:	0241ffc4 	movi	r9,2047
    beb0:	42401426 	beq	r8,r9,bf04 <__ledf2+0x88>
    beb4:	1000091e 	bne	r2,zero,bedc <__ledf2+0x60>
    beb8:	2296b03a 	or	r11,r4,r10
    bebc:	5813003a 	cmpeq	r9,r11,zero
    bec0:	29403fcc 	andi	r5,r5,255
    bec4:	40000a1e 	bne	r8,zero,bef0 <__ledf2+0x74>
    bec8:	30d8b03a 	or	r12,r6,r3
    becc:	6000081e 	bne	r12,zero,bef0 <__ledf2+0x74>
    bed0:	0005883a 	mov	r2,zero
    bed4:	5800111e 	bne	r11,zero,bf1c <__ledf2+0xa0>
    bed8:	f800283a 	ret
    bedc:	29403fcc 	andi	r5,r5,255
    bee0:	40000c1e 	bne	r8,zero,bf14 <__ledf2+0x98>
    bee4:	30d2b03a 	or	r9,r6,r3
    bee8:	48000c26 	beq	r9,zero,bf1c <__ledf2+0xa0>
    beec:	0013883a 	mov	r9,zero
    bef0:	39c03fcc 	andi	r7,r7,255
    bef4:	48000826 	beq	r9,zero,bf18 <__ledf2+0x9c>
    bef8:	38001126 	beq	r7,zero,bf40 <__ledf2+0xc4>
    befc:	00800044 	movi	r2,1
    bf00:	f800283a 	ret
    bf04:	30d2b03a 	or	r9,r6,r3
    bf08:	483fea26 	beq	r9,zero,beb4 <__alt_data_end+0xfffdbeb4>
    bf0c:	00800084 	movi	r2,2
    bf10:	f800283a 	ret
    bf14:	39c03fcc 	andi	r7,r7,255
    bf18:	39400726 	beq	r7,r5,bf38 <__ledf2+0xbc>
    bf1c:	2800081e 	bne	r5,zero,bf40 <__ledf2+0xc4>
    bf20:	00800044 	movi	r2,1
    bf24:	f800283a 	ret
    bf28:	2292b03a 	or	r9,r4,r10
    bf2c:	483fdf26 	beq	r9,zero,beac <__alt_data_end+0xfffdbeac>
    bf30:	00800084 	movi	r2,2
    bf34:	f800283a 	ret
    bf38:	4080030e 	bge	r8,r2,bf48 <__ledf2+0xcc>
    bf3c:	383fef26 	beq	r7,zero,befc <__alt_data_end+0xfffdbefc>
    bf40:	00bfffc4 	movi	r2,-1
    bf44:	f800283a 	ret
    bf48:	123feb16 	blt	r2,r8,bef8 <__alt_data_end+0xfffdbef8>
    bf4c:	1abff336 	bltu	r3,r10,bf1c <__alt_data_end+0xfffdbf1c>
    bf50:	50c00326 	beq	r10,r3,bf60 <__ledf2+0xe4>
    bf54:	50c0042e 	bgeu	r10,r3,bf68 <__ledf2+0xec>
    bf58:	283fe81e 	bne	r5,zero,befc <__alt_data_end+0xfffdbefc>
    bf5c:	003ff806 	br	bf40 <__alt_data_end+0xfffdbf40>
    bf60:	313fee36 	bltu	r6,r4,bf1c <__alt_data_end+0xfffdbf1c>
    bf64:	21bffc36 	bltu	r4,r6,bf58 <__alt_data_end+0xfffdbf58>
    bf68:	0005883a 	mov	r2,zero
    bf6c:	f800283a 	ret

0000bf70 <__muldf3>:
    bf70:	deffee04 	addi	sp,sp,-72
    bf74:	dd000c15 	stw	r20,48(sp)
    bf78:	2828d53a 	srli	r20,r5,20
    bf7c:	ddc00f15 	stw	r23,60(sp)
    bf80:	282ed7fa 	srli	r23,r5,31
    bf84:	dc000815 	stw	r16,32(sp)
    bf88:	04000434 	movhi	r16,16
    bf8c:	dcc00b15 	stw	r19,44(sp)
    bf90:	843fffc4 	addi	r16,r16,-1
    bf94:	dfc01115 	stw	ra,68(sp)
    bf98:	df001015 	stw	fp,64(sp)
    bf9c:	dd800e15 	stw	r22,56(sp)
    bfa0:	dd400d15 	stw	r21,52(sp)
    bfa4:	dc800a15 	stw	r18,40(sp)
    bfa8:	dc400915 	stw	r17,36(sp)
    bfac:	a501ffcc 	andi	r20,r20,2047
    bfb0:	2c20703a 	and	r16,r5,r16
    bfb4:	b827883a 	mov	r19,r23
    bfb8:	ba403fcc 	andi	r9,r23,255
    bfbc:	a0006026 	beq	r20,zero,c140 <__muldf3+0x1d0>
    bfc0:	0081ffc4 	movi	r2,2047
    bfc4:	202d883a 	mov	r22,r4
    bfc8:	a0803626 	beq	r20,r2,c0a4 <__muldf3+0x134>
    bfcc:	84000434 	orhi	r16,r16,16
    bfd0:	200ad77a 	srli	r5,r4,29
    bfd4:	800490fa 	slli	r2,r16,3
    bfd8:	202c90fa 	slli	r22,r4,3
    bfdc:	a53f0044 	addi	r20,r20,-1023
    bfe0:	28a0b03a 	or	r16,r5,r2
    bfe4:	002b883a 	mov	r21,zero
    bfe8:	000b883a 	mov	r5,zero
    bfec:	3804d53a 	srli	r2,r7,20
    bff0:	3838d7fa 	srli	fp,r7,31
    bff4:	04400434 	movhi	r17,16
    bff8:	8c7fffc4 	addi	r17,r17,-1
    bffc:	1081ffcc 	andi	r2,r2,2047
    c000:	3025883a 	mov	r18,r6
    c004:	3c62703a 	and	r17,r7,r17
    c008:	e2803fcc 	andi	r10,fp,255
    c00c:	10006d26 	beq	r2,zero,c1c4 <__muldf3+0x254>
    c010:	00c1ffc4 	movi	r3,2047
    c014:	10c06526 	beq	r2,r3,c1ac <__muldf3+0x23c>
    c018:	8c400434 	orhi	r17,r17,16
    c01c:	300ed77a 	srli	r7,r6,29
    c020:	880690fa 	slli	r3,r17,3
    c024:	302490fa 	slli	r18,r6,3
    c028:	10bf0044 	addi	r2,r2,-1023
    c02c:	38e2b03a 	or	r17,r7,r3
    c030:	000f883a 	mov	r7,zero
    c034:	a087883a 	add	r3,r20,r2
    c038:	010003c4 	movi	r4,15
    c03c:	3d44b03a 	or	r2,r7,r21
    c040:	e5ccf03a 	xor	r6,fp,r23
    c044:	1a000044 	addi	r8,r3,1
    c048:	20809b36 	bltu	r4,r2,c2b8 <__muldf3+0x348>
    c04c:	100490ba 	slli	r2,r2,2
    c050:	01000074 	movhi	r4,1
    c054:	21301904 	addi	r4,r4,-16284
    c058:	1105883a 	add	r2,r2,r4
    c05c:	10800017 	ldw	r2,0(r2)
    c060:	1000683a 	jmp	r2
    c064:	0000c2b8 	rdprs	zero,zero,778
    c068:	0000c0c4 	movi	zero,771
    c06c:	0000c0c4 	movi	zero,771
    c070:	0000c0c0 	call	c0c <___vfprintf_internal_r+0x518>
    c074:	0000c294 	movui	zero,778
    c078:	0000c294 	movui	zero,778
    c07c:	0000c27c 	xorhi	zero,zero,777
    c080:	0000c0c0 	call	c0c <___vfprintf_internal_r+0x518>
    c084:	0000c294 	movui	zero,778
    c088:	0000c27c 	xorhi	zero,zero,777
    c08c:	0000c294 	movui	zero,778
    c090:	0000c0c0 	call	c0c <___vfprintf_internal_r+0x518>
    c094:	0000c2a4 	muli	zero,zero,778
    c098:	0000c2a4 	muli	zero,zero,778
    c09c:	0000c2a4 	muli	zero,zero,778
    c0a0:	0000c604 	movi	zero,792
    c0a4:	2404b03a 	or	r2,r4,r16
    c0a8:	1000711e 	bne	r2,zero,c270 <__muldf3+0x300>
    c0ac:	05400204 	movi	r21,8
    c0b0:	0021883a 	mov	r16,zero
    c0b4:	002d883a 	mov	r22,zero
    c0b8:	01400084 	movi	r5,2
    c0bc:	003fcb06 	br	bfec <__alt_data_end+0xfffdbfec>
    c0c0:	500d883a 	mov	r6,r10
    c0c4:	00800084 	movi	r2,2
    c0c8:	38805926 	beq	r7,r2,c230 <__muldf3+0x2c0>
    c0cc:	008000c4 	movi	r2,3
    c0d0:	3881bb26 	beq	r7,r2,c7c0 <__muldf3+0x850>
    c0d4:	00800044 	movi	r2,1
    c0d8:	3881961e 	bne	r7,r2,c734 <__muldf3+0x7c4>
    c0dc:	3027883a 	mov	r19,r6
    c0e0:	0005883a 	mov	r2,zero
    c0e4:	0021883a 	mov	r16,zero
    c0e8:	002d883a 	mov	r22,zero
    c0ec:	1004953a 	slli	r2,r2,20
    c0f0:	98c03fcc 	andi	r3,r19,255
    c0f4:	04400434 	movhi	r17,16
    c0f8:	8c7fffc4 	addi	r17,r17,-1
    c0fc:	180697fa 	slli	r3,r3,31
    c100:	8460703a 	and	r16,r16,r17
    c104:	80a0b03a 	or	r16,r16,r2
    c108:	80c6b03a 	or	r3,r16,r3
    c10c:	b005883a 	mov	r2,r22
    c110:	dfc01117 	ldw	ra,68(sp)
    c114:	df001017 	ldw	fp,64(sp)
    c118:	ddc00f17 	ldw	r23,60(sp)
    c11c:	dd800e17 	ldw	r22,56(sp)
    c120:	dd400d17 	ldw	r21,52(sp)
    c124:	dd000c17 	ldw	r20,48(sp)
    c128:	dcc00b17 	ldw	r19,44(sp)
    c12c:	dc800a17 	ldw	r18,40(sp)
    c130:	dc400917 	ldw	r17,36(sp)
    c134:	dc000817 	ldw	r16,32(sp)
    c138:	dec01204 	addi	sp,sp,72
    c13c:	f800283a 	ret
    c140:	2404b03a 	or	r2,r4,r16
    c144:	202b883a 	mov	r21,r4
    c148:	10004426 	beq	r2,zero,c25c <__muldf3+0x2ec>
    c14c:	80015126 	beq	r16,zero,c694 <__muldf3+0x724>
    c150:	8009883a 	mov	r4,r16
    c154:	d9800715 	stw	r6,28(sp)
    c158:	d9c00215 	stw	r7,8(sp)
    c15c:	da400415 	stw	r9,16(sp)
    c160:	000d2dc0 	call	d2dc <__clzsi2>
    c164:	d9800717 	ldw	r6,28(sp)
    c168:	d9c00217 	ldw	r7,8(sp)
    c16c:	da400417 	ldw	r9,16(sp)
    c170:	113ffd44 	addi	r4,r2,-11
    c174:	00c00704 	movi	r3,28
    c178:	19014216 	blt	r3,r4,c684 <__muldf3+0x714>
    c17c:	00c00744 	movi	r3,29
    c180:	15bffe04 	addi	r22,r2,-8
    c184:	1907c83a 	sub	r3,r3,r4
    c188:	85a0983a 	sll	r16,r16,r22
    c18c:	a8c6d83a 	srl	r3,r21,r3
    c190:	adac983a 	sll	r22,r21,r22
    c194:	1c20b03a 	or	r16,r3,r16
    c198:	1080fcc4 	addi	r2,r2,1011
    c19c:	00a9c83a 	sub	r20,zero,r2
    c1a0:	002b883a 	mov	r21,zero
    c1a4:	000b883a 	mov	r5,zero
    c1a8:	003f9006 	br	bfec <__alt_data_end+0xfffdbfec>
    c1ac:	3446b03a 	or	r3,r6,r17
    c1b0:	1800281e 	bne	r3,zero,c254 <__muldf3+0x2e4>
    c1b4:	0023883a 	mov	r17,zero
    c1b8:	0025883a 	mov	r18,zero
    c1bc:	01c00084 	movi	r7,2
    c1c0:	003f9c06 	br	c034 <__alt_data_end+0xfffdc034>
    c1c4:	3446b03a 	or	r3,r6,r17
    c1c8:	18001e26 	beq	r3,zero,c244 <__muldf3+0x2d4>
    c1cc:	88012126 	beq	r17,zero,c654 <__muldf3+0x6e4>
    c1d0:	8809883a 	mov	r4,r17
    c1d4:	d9400215 	stw	r5,8(sp)
    c1d8:	d9800715 	stw	r6,28(sp)
    c1dc:	da400415 	stw	r9,16(sp)
    c1e0:	da800315 	stw	r10,12(sp)
    c1e4:	000d2dc0 	call	d2dc <__clzsi2>
    c1e8:	d9400217 	ldw	r5,8(sp)
    c1ec:	d9800717 	ldw	r6,28(sp)
    c1f0:	da400417 	ldw	r9,16(sp)
    c1f4:	da800317 	ldw	r10,12(sp)
    c1f8:	113ffd44 	addi	r4,r2,-11
    c1fc:	00c00704 	movi	r3,28
    c200:	19011016 	blt	r3,r4,c644 <__muldf3+0x6d4>
    c204:	00c00744 	movi	r3,29
    c208:	14bffe04 	addi	r18,r2,-8
    c20c:	1907c83a 	sub	r3,r3,r4
    c210:	8ca2983a 	sll	r17,r17,r18
    c214:	30c6d83a 	srl	r3,r6,r3
    c218:	34a4983a 	sll	r18,r6,r18
    c21c:	1c62b03a 	or	r17,r3,r17
    c220:	1080fcc4 	addi	r2,r2,1011
    c224:	0085c83a 	sub	r2,zero,r2
    c228:	000f883a 	mov	r7,zero
    c22c:	003f8106 	br	c034 <__alt_data_end+0xfffdc034>
    c230:	3027883a 	mov	r19,r6
    c234:	0081ffc4 	movi	r2,2047
    c238:	0021883a 	mov	r16,zero
    c23c:	002d883a 	mov	r22,zero
    c240:	003faa06 	br	c0ec <__alt_data_end+0xfffdc0ec>
    c244:	0023883a 	mov	r17,zero
    c248:	0025883a 	mov	r18,zero
    c24c:	01c00044 	movi	r7,1
    c250:	003f7806 	br	c034 <__alt_data_end+0xfffdc034>
    c254:	01c000c4 	movi	r7,3
    c258:	003f7606 	br	c034 <__alt_data_end+0xfffdc034>
    c25c:	05400104 	movi	r21,4
    c260:	0021883a 	mov	r16,zero
    c264:	002d883a 	mov	r22,zero
    c268:	01400044 	movi	r5,1
    c26c:	003f5f06 	br	bfec <__alt_data_end+0xfffdbfec>
    c270:	05400304 	movi	r21,12
    c274:	014000c4 	movi	r5,3
    c278:	003f5c06 	br	bfec <__alt_data_end+0xfffdbfec>
    c27c:	04000434 	movhi	r16,16
    c280:	0027883a 	mov	r19,zero
    c284:	843fffc4 	addi	r16,r16,-1
    c288:	05bfffc4 	movi	r22,-1
    c28c:	0081ffc4 	movi	r2,2047
    c290:	003f9606 	br	c0ec <__alt_data_end+0xfffdc0ec>
    c294:	8023883a 	mov	r17,r16
    c298:	b025883a 	mov	r18,r22
    c29c:	280f883a 	mov	r7,r5
    c2a0:	003f8806 	br	c0c4 <__alt_data_end+0xfffdc0c4>
    c2a4:	8023883a 	mov	r17,r16
    c2a8:	b025883a 	mov	r18,r22
    c2ac:	480d883a 	mov	r6,r9
    c2b0:	280f883a 	mov	r7,r5
    c2b4:	003f8306 	br	c0c4 <__alt_data_end+0xfffdc0c4>
    c2b8:	b026d43a 	srli	r19,r22,16
    c2bc:	902ed43a 	srli	r23,r18,16
    c2c0:	b5bfffcc 	andi	r22,r22,65535
    c2c4:	94bfffcc 	andi	r18,r18,65535
    c2c8:	b00b883a 	mov	r5,r22
    c2cc:	9009883a 	mov	r4,r18
    c2d0:	d8c00515 	stw	r3,20(sp)
    c2d4:	d9800715 	stw	r6,28(sp)
    c2d8:	da000615 	stw	r8,24(sp)
    c2dc:	000aa740 	call	aa74 <__mulsi3>
    c2e0:	980b883a 	mov	r5,r19
    c2e4:	9009883a 	mov	r4,r18
    c2e8:	1029883a 	mov	r20,r2
    c2ec:	000aa740 	call	aa74 <__mulsi3>
    c2f0:	b80b883a 	mov	r5,r23
    c2f4:	9809883a 	mov	r4,r19
    c2f8:	102b883a 	mov	r21,r2
    c2fc:	000aa740 	call	aa74 <__mulsi3>
    c300:	b809883a 	mov	r4,r23
    c304:	b00b883a 	mov	r5,r22
    c308:	1039883a 	mov	fp,r2
    c30c:	000aa740 	call	aa74 <__mulsi3>
    c310:	a008d43a 	srli	r4,r20,16
    c314:	1545883a 	add	r2,r2,r21
    c318:	d8c00517 	ldw	r3,20(sp)
    c31c:	2085883a 	add	r2,r4,r2
    c320:	d9800717 	ldw	r6,28(sp)
    c324:	da000617 	ldw	r8,24(sp)
    c328:	1540022e 	bgeu	r2,r21,c334 <__muldf3+0x3c4>
    c32c:	01000074 	movhi	r4,1
    c330:	e139883a 	add	fp,fp,r4
    c334:	100e943a 	slli	r7,r2,16
    c338:	1004d43a 	srli	r2,r2,16
    c33c:	882ad43a 	srli	r21,r17,16
    c340:	a53fffcc 	andi	r20,r20,65535
    c344:	8c7fffcc 	andi	r17,r17,65535
    c348:	3d29883a 	add	r20,r7,r20
    c34c:	b00b883a 	mov	r5,r22
    c350:	8809883a 	mov	r4,r17
    c354:	d8c00515 	stw	r3,20(sp)
    c358:	d9800715 	stw	r6,28(sp)
    c35c:	da000615 	stw	r8,24(sp)
    c360:	dd000115 	stw	r20,4(sp)
    c364:	d8800015 	stw	r2,0(sp)
    c368:	000aa740 	call	aa74 <__mulsi3>
    c36c:	980b883a 	mov	r5,r19
    c370:	8809883a 	mov	r4,r17
    c374:	d8800215 	stw	r2,8(sp)
    c378:	000aa740 	call	aa74 <__mulsi3>
    c37c:	9809883a 	mov	r4,r19
    c380:	a80b883a 	mov	r5,r21
    c384:	1029883a 	mov	r20,r2
    c388:	000aa740 	call	aa74 <__mulsi3>
    c38c:	b00b883a 	mov	r5,r22
    c390:	a809883a 	mov	r4,r21
    c394:	d8800415 	stw	r2,16(sp)
    c398:	000aa740 	call	aa74 <__mulsi3>
    c39c:	d9c00217 	ldw	r7,8(sp)
    c3a0:	1505883a 	add	r2,r2,r20
    c3a4:	d8c00517 	ldw	r3,20(sp)
    c3a8:	3826d43a 	srli	r19,r7,16
    c3ac:	d9800717 	ldw	r6,28(sp)
    c3b0:	da000617 	ldw	r8,24(sp)
    c3b4:	9885883a 	add	r2,r19,r2
    c3b8:	da400417 	ldw	r9,16(sp)
    c3bc:	1500022e 	bgeu	r2,r20,c3c8 <__muldf3+0x458>
    c3c0:	01000074 	movhi	r4,1
    c3c4:	4913883a 	add	r9,r9,r4
    c3c8:	1028d43a 	srli	r20,r2,16
    c3cc:	1004943a 	slli	r2,r2,16
    c3d0:	802cd43a 	srli	r22,r16,16
    c3d4:	843fffcc 	andi	r16,r16,65535
    c3d8:	3cffffcc 	andi	r19,r7,65535
    c3dc:	9009883a 	mov	r4,r18
    c3e0:	800b883a 	mov	r5,r16
    c3e4:	a269883a 	add	r20,r20,r9
    c3e8:	d8c00515 	stw	r3,20(sp)
    c3ec:	d9800715 	stw	r6,28(sp)
    c3f0:	da000615 	stw	r8,24(sp)
    c3f4:	14e7883a 	add	r19,r2,r19
    c3f8:	000aa740 	call	aa74 <__mulsi3>
    c3fc:	9009883a 	mov	r4,r18
    c400:	b00b883a 	mov	r5,r22
    c404:	d8800315 	stw	r2,12(sp)
    c408:	000aa740 	call	aa74 <__mulsi3>
    c40c:	b809883a 	mov	r4,r23
    c410:	b00b883a 	mov	r5,r22
    c414:	d8800215 	stw	r2,8(sp)
    c418:	000aa740 	call	aa74 <__mulsi3>
    c41c:	b80b883a 	mov	r5,r23
    c420:	8009883a 	mov	r4,r16
    c424:	d8800415 	stw	r2,16(sp)
    c428:	000aa740 	call	aa74 <__mulsi3>
    c42c:	da800317 	ldw	r10,12(sp)
    c430:	d9c00217 	ldw	r7,8(sp)
    c434:	d9000017 	ldw	r4,0(sp)
    c438:	502ed43a 	srli	r23,r10,16
    c43c:	11c5883a 	add	r2,r2,r7
    c440:	24e5883a 	add	r18,r4,r19
    c444:	b885883a 	add	r2,r23,r2
    c448:	d8c00517 	ldw	r3,20(sp)
    c44c:	d9800717 	ldw	r6,28(sp)
    c450:	da000617 	ldw	r8,24(sp)
    c454:	da400417 	ldw	r9,16(sp)
    c458:	11c0022e 	bgeu	r2,r7,c464 <__muldf3+0x4f4>
    c45c:	01000074 	movhi	r4,1
    c460:	4913883a 	add	r9,r9,r4
    c464:	100ed43a 	srli	r7,r2,16
    c468:	1004943a 	slli	r2,r2,16
    c46c:	55ffffcc 	andi	r23,r10,65535
    c470:	3a53883a 	add	r9,r7,r9
    c474:	8809883a 	mov	r4,r17
    c478:	800b883a 	mov	r5,r16
    c47c:	d8c00515 	stw	r3,20(sp)
    c480:	d9800715 	stw	r6,28(sp)
    c484:	da000615 	stw	r8,24(sp)
    c488:	da400415 	stw	r9,16(sp)
    c48c:	15ef883a 	add	r23,r2,r23
    c490:	000aa740 	call	aa74 <__mulsi3>
    c494:	8809883a 	mov	r4,r17
    c498:	b00b883a 	mov	r5,r22
    c49c:	d8800215 	stw	r2,8(sp)
    c4a0:	000aa740 	call	aa74 <__mulsi3>
    c4a4:	b00b883a 	mov	r5,r22
    c4a8:	a809883a 	mov	r4,r21
    c4ac:	d8800315 	stw	r2,12(sp)
    c4b0:	000aa740 	call	aa74 <__mulsi3>
    c4b4:	8009883a 	mov	r4,r16
    c4b8:	a80b883a 	mov	r5,r21
    c4bc:	1023883a 	mov	r17,r2
    c4c0:	000aa740 	call	aa74 <__mulsi3>
    c4c4:	d9c00217 	ldw	r7,8(sp)
    c4c8:	da800317 	ldw	r10,12(sp)
    c4cc:	d8c00517 	ldw	r3,20(sp)
    c4d0:	3808d43a 	srli	r4,r7,16
    c4d4:	1285883a 	add	r2,r2,r10
    c4d8:	d9800717 	ldw	r6,28(sp)
    c4dc:	2085883a 	add	r2,r4,r2
    c4e0:	da000617 	ldw	r8,24(sp)
    c4e4:	da400417 	ldw	r9,16(sp)
    c4e8:	1280022e 	bgeu	r2,r10,c4f4 <__muldf3+0x584>
    c4ec:	01000074 	movhi	r4,1
    c4f0:	8923883a 	add	r17,r17,r4
    c4f4:	1008943a 	slli	r4,r2,16
    c4f8:	39ffffcc 	andi	r7,r7,65535
    c4fc:	e4b9883a 	add	fp,fp,r18
    c500:	21cf883a 	add	r7,r4,r7
    c504:	e4e7803a 	cmpltu	r19,fp,r19
    c508:	3d0f883a 	add	r7,r7,r20
    c50c:	bf39883a 	add	fp,r23,fp
    c510:	99c9883a 	add	r4,r19,r7
    c514:	e5ef803a 	cmpltu	r23,fp,r23
    c518:	490b883a 	add	r5,r9,r4
    c51c:	1004d43a 	srli	r2,r2,16
    c520:	b965883a 	add	r18,r23,r5
    c524:	24c9803a 	cmpltu	r4,r4,r19
    c528:	3d29803a 	cmpltu	r20,r7,r20
    c52c:	a128b03a 	or	r20,r20,r4
    c530:	95ef803a 	cmpltu	r23,r18,r23
    c534:	2a53803a 	cmpltu	r9,r5,r9
    c538:	a0a9883a 	add	r20,r20,r2
    c53c:	4deeb03a 	or	r23,r9,r23
    c540:	a5ef883a 	add	r23,r20,r23
    c544:	bc63883a 	add	r17,r23,r17
    c548:	e004927a 	slli	r2,fp,9
    c54c:	d9000117 	ldw	r4,4(sp)
    c550:	882e927a 	slli	r23,r17,9
    c554:	9022d5fa 	srli	r17,r18,23
    c558:	e038d5fa 	srli	fp,fp,23
    c55c:	1104b03a 	or	r2,r2,r4
    c560:	9024927a 	slli	r18,r18,9
    c564:	1004c03a 	cmpne	r2,r2,zero
    c568:	bc62b03a 	or	r17,r23,r17
    c56c:	1738b03a 	or	fp,r2,fp
    c570:	8880402c 	andhi	r2,r17,256
    c574:	e4a4b03a 	or	r18,fp,r18
    c578:	10000726 	beq	r2,zero,c598 <__muldf3+0x628>
    c57c:	9006d07a 	srli	r3,r18,1
    c580:	880497fa 	slli	r2,r17,31
    c584:	9480004c 	andi	r18,r18,1
    c588:	8822d07a 	srli	r17,r17,1
    c58c:	1ca4b03a 	or	r18,r3,r18
    c590:	14a4b03a 	or	r18,r2,r18
    c594:	4007883a 	mov	r3,r8
    c598:	1880ffc4 	addi	r2,r3,1023
    c59c:	0080460e 	bge	zero,r2,c6b8 <__muldf3+0x748>
    c5a0:	910001cc 	andi	r4,r18,7
    c5a4:	20000726 	beq	r4,zero,c5c4 <__muldf3+0x654>
    c5a8:	910003cc 	andi	r4,r18,15
    c5ac:	01400104 	movi	r5,4
    c5b0:	21400426 	beq	r4,r5,c5c4 <__muldf3+0x654>
    c5b4:	9149883a 	add	r4,r18,r5
    c5b8:	24a5803a 	cmpltu	r18,r4,r18
    c5bc:	8ca3883a 	add	r17,r17,r18
    c5c0:	2025883a 	mov	r18,r4
    c5c4:	8900402c 	andhi	r4,r17,256
    c5c8:	20000426 	beq	r4,zero,c5dc <__muldf3+0x66c>
    c5cc:	18810004 	addi	r2,r3,1024
    c5d0:	00ffc034 	movhi	r3,65280
    c5d4:	18ffffc4 	addi	r3,r3,-1
    c5d8:	88e2703a 	and	r17,r17,r3
    c5dc:	00c1ff84 	movi	r3,2046
    c5e0:	18bf1316 	blt	r3,r2,c230 <__alt_data_end+0xfffdc230>
    c5e4:	882c977a 	slli	r22,r17,29
    c5e8:	9024d0fa 	srli	r18,r18,3
    c5ec:	8822927a 	slli	r17,r17,9
    c5f0:	1081ffcc 	andi	r2,r2,2047
    c5f4:	b4acb03a 	or	r22,r22,r18
    c5f8:	8820d33a 	srli	r16,r17,12
    c5fc:	3027883a 	mov	r19,r6
    c600:	003eba06 	br	c0ec <__alt_data_end+0xfffdc0ec>
    c604:	8080022c 	andhi	r2,r16,8
    c608:	10000926 	beq	r2,zero,c630 <__muldf3+0x6c0>
    c60c:	8880022c 	andhi	r2,r17,8
    c610:	1000071e 	bne	r2,zero,c630 <__muldf3+0x6c0>
    c614:	00800434 	movhi	r2,16
    c618:	8c000234 	orhi	r16,r17,8
    c61c:	10bfffc4 	addi	r2,r2,-1
    c620:	e027883a 	mov	r19,fp
    c624:	80a0703a 	and	r16,r16,r2
    c628:	902d883a 	mov	r22,r18
    c62c:	003f1706 	br	c28c <__alt_data_end+0xfffdc28c>
    c630:	00800434 	movhi	r2,16
    c634:	84000234 	orhi	r16,r16,8
    c638:	10bfffc4 	addi	r2,r2,-1
    c63c:	80a0703a 	and	r16,r16,r2
    c640:	003f1206 	br	c28c <__alt_data_end+0xfffdc28c>
    c644:	147ff604 	addi	r17,r2,-40
    c648:	3462983a 	sll	r17,r6,r17
    c64c:	0025883a 	mov	r18,zero
    c650:	003ef306 	br	c220 <__alt_data_end+0xfffdc220>
    c654:	3009883a 	mov	r4,r6
    c658:	d9400215 	stw	r5,8(sp)
    c65c:	d9800715 	stw	r6,28(sp)
    c660:	da400415 	stw	r9,16(sp)
    c664:	da800315 	stw	r10,12(sp)
    c668:	000d2dc0 	call	d2dc <__clzsi2>
    c66c:	10800804 	addi	r2,r2,32
    c670:	da800317 	ldw	r10,12(sp)
    c674:	da400417 	ldw	r9,16(sp)
    c678:	d9800717 	ldw	r6,28(sp)
    c67c:	d9400217 	ldw	r5,8(sp)
    c680:	003edd06 	br	c1f8 <__alt_data_end+0xfffdc1f8>
    c684:	143ff604 	addi	r16,r2,-40
    c688:	ac20983a 	sll	r16,r21,r16
    c68c:	002d883a 	mov	r22,zero
    c690:	003ec106 	br	c198 <__alt_data_end+0xfffdc198>
    c694:	d9800715 	stw	r6,28(sp)
    c698:	d9c00215 	stw	r7,8(sp)
    c69c:	da400415 	stw	r9,16(sp)
    c6a0:	000d2dc0 	call	d2dc <__clzsi2>
    c6a4:	10800804 	addi	r2,r2,32
    c6a8:	da400417 	ldw	r9,16(sp)
    c6ac:	d9c00217 	ldw	r7,8(sp)
    c6b0:	d9800717 	ldw	r6,28(sp)
    c6b4:	003eae06 	br	c170 <__alt_data_end+0xfffdc170>
    c6b8:	00c00044 	movi	r3,1
    c6bc:	1887c83a 	sub	r3,r3,r2
    c6c0:	01000e04 	movi	r4,56
    c6c4:	20fe8516 	blt	r4,r3,c0dc <__alt_data_end+0xfffdc0dc>
    c6c8:	010007c4 	movi	r4,31
    c6cc:	20c01b16 	blt	r4,r3,c73c <__muldf3+0x7cc>
    c6d0:	00800804 	movi	r2,32
    c6d4:	10c5c83a 	sub	r2,r2,r3
    c6d8:	888a983a 	sll	r5,r17,r2
    c6dc:	90c8d83a 	srl	r4,r18,r3
    c6e0:	9084983a 	sll	r2,r18,r2
    c6e4:	88e2d83a 	srl	r17,r17,r3
    c6e8:	2906b03a 	or	r3,r5,r4
    c6ec:	1004c03a 	cmpne	r2,r2,zero
    c6f0:	1886b03a 	or	r3,r3,r2
    c6f4:	188001cc 	andi	r2,r3,7
    c6f8:	10000726 	beq	r2,zero,c718 <__muldf3+0x7a8>
    c6fc:	188003cc 	andi	r2,r3,15
    c700:	01000104 	movi	r4,4
    c704:	11000426 	beq	r2,r4,c718 <__muldf3+0x7a8>
    c708:	1805883a 	mov	r2,r3
    c70c:	10c00104 	addi	r3,r2,4
    c710:	1885803a 	cmpltu	r2,r3,r2
    c714:	88a3883a 	add	r17,r17,r2
    c718:	8880202c 	andhi	r2,r17,128
    c71c:	10001c26 	beq	r2,zero,c790 <__muldf3+0x820>
    c720:	3027883a 	mov	r19,r6
    c724:	00800044 	movi	r2,1
    c728:	0021883a 	mov	r16,zero
    c72c:	002d883a 	mov	r22,zero
    c730:	003e6e06 	br	c0ec <__alt_data_end+0xfffdc0ec>
    c734:	4007883a 	mov	r3,r8
    c738:	003f9706 	br	c598 <__alt_data_end+0xfffdc598>
    c73c:	017ff844 	movi	r5,-31
    c740:	2885c83a 	sub	r2,r5,r2
    c744:	888ad83a 	srl	r5,r17,r2
    c748:	00800804 	movi	r2,32
    c74c:	18801a26 	beq	r3,r2,c7b8 <__muldf3+0x848>
    c750:	01001004 	movi	r4,64
    c754:	20c7c83a 	sub	r3,r4,r3
    c758:	88e2983a 	sll	r17,r17,r3
    c75c:	8ca4b03a 	or	r18,r17,r18
    c760:	9004c03a 	cmpne	r2,r18,zero
    c764:	2884b03a 	or	r2,r5,r2
    c768:	144001cc 	andi	r17,r2,7
    c76c:	88000d1e 	bne	r17,zero,c7a4 <__muldf3+0x834>
    c770:	0021883a 	mov	r16,zero
    c774:	102cd0fa 	srli	r22,r2,3
    c778:	3027883a 	mov	r19,r6
    c77c:	0005883a 	mov	r2,zero
    c780:	b46cb03a 	or	r22,r22,r17
    c784:	003e5906 	br	c0ec <__alt_data_end+0xfffdc0ec>
    c788:	1007883a 	mov	r3,r2
    c78c:	0023883a 	mov	r17,zero
    c790:	8820927a 	slli	r16,r17,9
    c794:	1805883a 	mov	r2,r3
    c798:	8822977a 	slli	r17,r17,29
    c79c:	8020d33a 	srli	r16,r16,12
    c7a0:	003ff406 	br	c774 <__alt_data_end+0xfffdc774>
    c7a4:	10c003cc 	andi	r3,r2,15
    c7a8:	01000104 	movi	r4,4
    c7ac:	193ff626 	beq	r3,r4,c788 <__alt_data_end+0xfffdc788>
    c7b0:	0023883a 	mov	r17,zero
    c7b4:	003fd506 	br	c70c <__alt_data_end+0xfffdc70c>
    c7b8:	0023883a 	mov	r17,zero
    c7bc:	003fe706 	br	c75c <__alt_data_end+0xfffdc75c>
    c7c0:	00800434 	movhi	r2,16
    c7c4:	8c000234 	orhi	r16,r17,8
    c7c8:	10bfffc4 	addi	r2,r2,-1
    c7cc:	3027883a 	mov	r19,r6
    c7d0:	80a0703a 	and	r16,r16,r2
    c7d4:	902d883a 	mov	r22,r18
    c7d8:	003eac06 	br	c28c <__alt_data_end+0xfffdc28c>

0000c7dc <__subdf3>:
    c7dc:	02000434 	movhi	r8,16
    c7e0:	423fffc4 	addi	r8,r8,-1
    c7e4:	defffb04 	addi	sp,sp,-20
    c7e8:	2a14703a 	and	r10,r5,r8
    c7ec:	3812d53a 	srli	r9,r7,20
    c7f0:	3a10703a 	and	r8,r7,r8
    c7f4:	2006d77a 	srli	r3,r4,29
    c7f8:	3004d77a 	srli	r2,r6,29
    c7fc:	dc000015 	stw	r16,0(sp)
    c800:	501490fa 	slli	r10,r10,3
    c804:	2820d53a 	srli	r16,r5,20
    c808:	401090fa 	slli	r8,r8,3
    c80c:	dc800215 	stw	r18,8(sp)
    c810:	dc400115 	stw	r17,4(sp)
    c814:	dfc00415 	stw	ra,16(sp)
    c818:	202290fa 	slli	r17,r4,3
    c81c:	dcc00315 	stw	r19,12(sp)
    c820:	4a41ffcc 	andi	r9,r9,2047
    c824:	0101ffc4 	movi	r4,2047
    c828:	2824d7fa 	srli	r18,r5,31
    c82c:	8401ffcc 	andi	r16,r16,2047
    c830:	50c6b03a 	or	r3,r10,r3
    c834:	380ed7fa 	srli	r7,r7,31
    c838:	408ab03a 	or	r5,r8,r2
    c83c:	300c90fa 	slli	r6,r6,3
    c840:	49009626 	beq	r9,r4,ca9c <__subdf3+0x2c0>
    c844:	39c0005c 	xori	r7,r7,1
    c848:	8245c83a 	sub	r2,r16,r9
    c84c:	3c807426 	beq	r7,r18,ca20 <__subdf3+0x244>
    c850:	0080af0e 	bge	zero,r2,cb10 <__subdf3+0x334>
    c854:	48002a1e 	bne	r9,zero,c900 <__subdf3+0x124>
    c858:	2988b03a 	or	r4,r5,r6
    c85c:	20009a1e 	bne	r4,zero,cac8 <__subdf3+0x2ec>
    c860:	888001cc 	andi	r2,r17,7
    c864:	10000726 	beq	r2,zero,c884 <__subdf3+0xa8>
    c868:	888003cc 	andi	r2,r17,15
    c86c:	01000104 	movi	r4,4
    c870:	11000426 	beq	r2,r4,c884 <__subdf3+0xa8>
    c874:	890b883a 	add	r5,r17,r4
    c878:	2c63803a 	cmpltu	r17,r5,r17
    c87c:	1c47883a 	add	r3,r3,r17
    c880:	2823883a 	mov	r17,r5
    c884:	1880202c 	andhi	r2,r3,128
    c888:	10005926 	beq	r2,zero,c9f0 <__subdf3+0x214>
    c88c:	84000044 	addi	r16,r16,1
    c890:	0081ffc4 	movi	r2,2047
    c894:	8080be26 	beq	r16,r2,cb90 <__subdf3+0x3b4>
    c898:	017fe034 	movhi	r5,65408
    c89c:	297fffc4 	addi	r5,r5,-1
    c8a0:	1946703a 	and	r3,r3,r5
    c8a4:	1804977a 	slli	r2,r3,29
    c8a8:	1806927a 	slli	r3,r3,9
    c8ac:	8822d0fa 	srli	r17,r17,3
    c8b0:	8401ffcc 	andi	r16,r16,2047
    c8b4:	180ad33a 	srli	r5,r3,12
    c8b8:	9100004c 	andi	r4,r18,1
    c8bc:	1444b03a 	or	r2,r2,r17
    c8c0:	80c1ffcc 	andi	r3,r16,2047
    c8c4:	1820953a 	slli	r16,r3,20
    c8c8:	20c03fcc 	andi	r3,r4,255
    c8cc:	180897fa 	slli	r4,r3,31
    c8d0:	00c00434 	movhi	r3,16
    c8d4:	18ffffc4 	addi	r3,r3,-1
    c8d8:	28c6703a 	and	r3,r5,r3
    c8dc:	1c06b03a 	or	r3,r3,r16
    c8e0:	1906b03a 	or	r3,r3,r4
    c8e4:	dfc00417 	ldw	ra,16(sp)
    c8e8:	dcc00317 	ldw	r19,12(sp)
    c8ec:	dc800217 	ldw	r18,8(sp)
    c8f0:	dc400117 	ldw	r17,4(sp)
    c8f4:	dc000017 	ldw	r16,0(sp)
    c8f8:	dec00504 	addi	sp,sp,20
    c8fc:	f800283a 	ret
    c900:	0101ffc4 	movi	r4,2047
    c904:	813fd626 	beq	r16,r4,c860 <__alt_data_end+0xfffdc860>
    c908:	29402034 	orhi	r5,r5,128
    c90c:	01000e04 	movi	r4,56
    c910:	2080a316 	blt	r4,r2,cba0 <__subdf3+0x3c4>
    c914:	010007c4 	movi	r4,31
    c918:	2080c616 	blt	r4,r2,cc34 <__subdf3+0x458>
    c91c:	01000804 	movi	r4,32
    c920:	2089c83a 	sub	r4,r4,r2
    c924:	2910983a 	sll	r8,r5,r4
    c928:	308ed83a 	srl	r7,r6,r2
    c92c:	3108983a 	sll	r4,r6,r4
    c930:	2884d83a 	srl	r2,r5,r2
    c934:	41ccb03a 	or	r6,r8,r7
    c938:	2008c03a 	cmpne	r4,r4,zero
    c93c:	310cb03a 	or	r6,r6,r4
    c940:	898dc83a 	sub	r6,r17,r6
    c944:	89a3803a 	cmpltu	r17,r17,r6
    c948:	1887c83a 	sub	r3,r3,r2
    c94c:	1c47c83a 	sub	r3,r3,r17
    c950:	3023883a 	mov	r17,r6
    c954:	1880202c 	andhi	r2,r3,128
    c958:	10002326 	beq	r2,zero,c9e8 <__subdf3+0x20c>
    c95c:	04c02034 	movhi	r19,128
    c960:	9cffffc4 	addi	r19,r19,-1
    c964:	1ce6703a 	and	r19,r3,r19
    c968:	98007a26 	beq	r19,zero,cb54 <__subdf3+0x378>
    c96c:	9809883a 	mov	r4,r19
    c970:	000d2dc0 	call	d2dc <__clzsi2>
    c974:	113ffe04 	addi	r4,r2,-8
    c978:	00c007c4 	movi	r3,31
    c97c:	19007b16 	blt	r3,r4,cb6c <__subdf3+0x390>
    c980:	00800804 	movi	r2,32
    c984:	1105c83a 	sub	r2,r2,r4
    c988:	8884d83a 	srl	r2,r17,r2
    c98c:	9906983a 	sll	r3,r19,r4
    c990:	8922983a 	sll	r17,r17,r4
    c994:	10c4b03a 	or	r2,r2,r3
    c998:	24007816 	blt	r4,r16,cb7c <__subdf3+0x3a0>
    c99c:	2421c83a 	sub	r16,r4,r16
    c9a0:	80c00044 	addi	r3,r16,1
    c9a4:	010007c4 	movi	r4,31
    c9a8:	20c09516 	blt	r4,r3,cc00 <__subdf3+0x424>
    c9ac:	01400804 	movi	r5,32
    c9b0:	28cbc83a 	sub	r5,r5,r3
    c9b4:	88c8d83a 	srl	r4,r17,r3
    c9b8:	8962983a 	sll	r17,r17,r5
    c9bc:	114a983a 	sll	r5,r2,r5
    c9c0:	10c6d83a 	srl	r3,r2,r3
    c9c4:	8804c03a 	cmpne	r2,r17,zero
    c9c8:	290ab03a 	or	r5,r5,r4
    c9cc:	28a2b03a 	or	r17,r5,r2
    c9d0:	0021883a 	mov	r16,zero
    c9d4:	003fa206 	br	c860 <__alt_data_end+0xfffdc860>
    c9d8:	2090b03a 	or	r8,r4,r2
    c9dc:	40018e26 	beq	r8,zero,d018 <__subdf3+0x83c>
    c9e0:	1007883a 	mov	r3,r2
    c9e4:	2023883a 	mov	r17,r4
    c9e8:	888001cc 	andi	r2,r17,7
    c9ec:	103f9e1e 	bne	r2,zero,c868 <__alt_data_end+0xfffdc868>
    c9f0:	1804977a 	slli	r2,r3,29
    c9f4:	8822d0fa 	srli	r17,r17,3
    c9f8:	1810d0fa 	srli	r8,r3,3
    c9fc:	9100004c 	andi	r4,r18,1
    ca00:	1444b03a 	or	r2,r2,r17
    ca04:	00c1ffc4 	movi	r3,2047
    ca08:	80c02826 	beq	r16,r3,caac <__subdf3+0x2d0>
    ca0c:	01400434 	movhi	r5,16
    ca10:	297fffc4 	addi	r5,r5,-1
    ca14:	80e0703a 	and	r16,r16,r3
    ca18:	414a703a 	and	r5,r8,r5
    ca1c:	003fa806 	br	c8c0 <__alt_data_end+0xfffdc8c0>
    ca20:	0080630e 	bge	zero,r2,cbb0 <__subdf3+0x3d4>
    ca24:	48003026 	beq	r9,zero,cae8 <__subdf3+0x30c>
    ca28:	0101ffc4 	movi	r4,2047
    ca2c:	813f8c26 	beq	r16,r4,c860 <__alt_data_end+0xfffdc860>
    ca30:	29402034 	orhi	r5,r5,128
    ca34:	01000e04 	movi	r4,56
    ca38:	2080a90e 	bge	r4,r2,cce0 <__subdf3+0x504>
    ca3c:	298cb03a 	or	r6,r5,r6
    ca40:	3012c03a 	cmpne	r9,r6,zero
    ca44:	0005883a 	mov	r2,zero
    ca48:	4c53883a 	add	r9,r9,r17
    ca4c:	4c63803a 	cmpltu	r17,r9,r17
    ca50:	10c7883a 	add	r3,r2,r3
    ca54:	88c7883a 	add	r3,r17,r3
    ca58:	4823883a 	mov	r17,r9
    ca5c:	1880202c 	andhi	r2,r3,128
    ca60:	1000d026 	beq	r2,zero,cda4 <__subdf3+0x5c8>
    ca64:	84000044 	addi	r16,r16,1
    ca68:	0081ffc4 	movi	r2,2047
    ca6c:	8080fe26 	beq	r16,r2,ce68 <__subdf3+0x68c>
    ca70:	00bfe034 	movhi	r2,65408
    ca74:	10bfffc4 	addi	r2,r2,-1
    ca78:	1886703a 	and	r3,r3,r2
    ca7c:	880ad07a 	srli	r5,r17,1
    ca80:	180497fa 	slli	r2,r3,31
    ca84:	8900004c 	andi	r4,r17,1
    ca88:	2922b03a 	or	r17,r5,r4
    ca8c:	1806d07a 	srli	r3,r3,1
    ca90:	1462b03a 	or	r17,r2,r17
    ca94:	3825883a 	mov	r18,r7
    ca98:	003f7106 	br	c860 <__alt_data_end+0xfffdc860>
    ca9c:	2984b03a 	or	r2,r5,r6
    caa0:	103f6826 	beq	r2,zero,c844 <__alt_data_end+0xfffdc844>
    caa4:	39c03fcc 	andi	r7,r7,255
    caa8:	003f6706 	br	c848 <__alt_data_end+0xfffdc848>
    caac:	4086b03a 	or	r3,r8,r2
    cab0:	18015226 	beq	r3,zero,cffc <__subdf3+0x820>
    cab4:	00c00434 	movhi	r3,16
    cab8:	41400234 	orhi	r5,r8,8
    cabc:	18ffffc4 	addi	r3,r3,-1
    cac0:	28ca703a 	and	r5,r5,r3
    cac4:	003f7e06 	br	c8c0 <__alt_data_end+0xfffdc8c0>
    cac8:	10bfffc4 	addi	r2,r2,-1
    cacc:	1000491e 	bne	r2,zero,cbf4 <__subdf3+0x418>
    cad0:	898fc83a 	sub	r7,r17,r6
    cad4:	89e3803a 	cmpltu	r17,r17,r7
    cad8:	1947c83a 	sub	r3,r3,r5
    cadc:	1c47c83a 	sub	r3,r3,r17
    cae0:	3823883a 	mov	r17,r7
    cae4:	003f9b06 	br	c954 <__alt_data_end+0xfffdc954>
    cae8:	2988b03a 	or	r4,r5,r6
    caec:	203f5c26 	beq	r4,zero,c860 <__alt_data_end+0xfffdc860>
    caf0:	10bfffc4 	addi	r2,r2,-1
    caf4:	1000931e 	bne	r2,zero,cd44 <__subdf3+0x568>
    caf8:	898d883a 	add	r6,r17,r6
    cafc:	3463803a 	cmpltu	r17,r6,r17
    cb00:	1947883a 	add	r3,r3,r5
    cb04:	88c7883a 	add	r3,r17,r3
    cb08:	3023883a 	mov	r17,r6
    cb0c:	003fd306 	br	ca5c <__alt_data_end+0xfffdca5c>
    cb10:	1000541e 	bne	r2,zero,cc64 <__subdf3+0x488>
    cb14:	80800044 	addi	r2,r16,1
    cb18:	1081ffcc 	andi	r2,r2,2047
    cb1c:	01000044 	movi	r4,1
    cb20:	2080a20e 	bge	r4,r2,cdac <__subdf3+0x5d0>
    cb24:	8989c83a 	sub	r4,r17,r6
    cb28:	8905803a 	cmpltu	r2,r17,r4
    cb2c:	1967c83a 	sub	r19,r3,r5
    cb30:	98a7c83a 	sub	r19,r19,r2
    cb34:	9880202c 	andhi	r2,r19,128
    cb38:	10006326 	beq	r2,zero,ccc8 <__subdf3+0x4ec>
    cb3c:	3463c83a 	sub	r17,r6,r17
    cb40:	28c7c83a 	sub	r3,r5,r3
    cb44:	344d803a 	cmpltu	r6,r6,r17
    cb48:	19a7c83a 	sub	r19,r3,r6
    cb4c:	3825883a 	mov	r18,r7
    cb50:	983f861e 	bne	r19,zero,c96c <__alt_data_end+0xfffdc96c>
    cb54:	8809883a 	mov	r4,r17
    cb58:	000d2dc0 	call	d2dc <__clzsi2>
    cb5c:	10800804 	addi	r2,r2,32
    cb60:	113ffe04 	addi	r4,r2,-8
    cb64:	00c007c4 	movi	r3,31
    cb68:	193f850e 	bge	r3,r4,c980 <__alt_data_end+0xfffdc980>
    cb6c:	10bff604 	addi	r2,r2,-40
    cb70:	8884983a 	sll	r2,r17,r2
    cb74:	0023883a 	mov	r17,zero
    cb78:	243f880e 	bge	r4,r16,c99c <__alt_data_end+0xfffdc99c>
    cb7c:	00ffe034 	movhi	r3,65408
    cb80:	18ffffc4 	addi	r3,r3,-1
    cb84:	8121c83a 	sub	r16,r16,r4
    cb88:	10c6703a 	and	r3,r2,r3
    cb8c:	003f3406 	br	c860 <__alt_data_end+0xfffdc860>
    cb90:	9100004c 	andi	r4,r18,1
    cb94:	000b883a 	mov	r5,zero
    cb98:	0005883a 	mov	r2,zero
    cb9c:	003f4806 	br	c8c0 <__alt_data_end+0xfffdc8c0>
    cba0:	298cb03a 	or	r6,r5,r6
    cba4:	300cc03a 	cmpne	r6,r6,zero
    cba8:	0005883a 	mov	r2,zero
    cbac:	003f6406 	br	c940 <__alt_data_end+0xfffdc940>
    cbb0:	10009a1e 	bne	r2,zero,ce1c <__subdf3+0x640>
    cbb4:	82400044 	addi	r9,r16,1
    cbb8:	4881ffcc 	andi	r2,r9,2047
    cbbc:	02800044 	movi	r10,1
    cbc0:	5080670e 	bge	r10,r2,cd60 <__subdf3+0x584>
    cbc4:	0081ffc4 	movi	r2,2047
    cbc8:	4880af26 	beq	r9,r2,ce88 <__subdf3+0x6ac>
    cbcc:	898d883a 	add	r6,r17,r6
    cbd0:	1945883a 	add	r2,r3,r5
    cbd4:	3447803a 	cmpltu	r3,r6,r17
    cbd8:	1887883a 	add	r3,r3,r2
    cbdc:	182297fa 	slli	r17,r3,31
    cbe0:	300cd07a 	srli	r6,r6,1
    cbe4:	1806d07a 	srli	r3,r3,1
    cbe8:	4821883a 	mov	r16,r9
    cbec:	89a2b03a 	or	r17,r17,r6
    cbf0:	003f1b06 	br	c860 <__alt_data_end+0xfffdc860>
    cbf4:	0101ffc4 	movi	r4,2047
    cbf8:	813f441e 	bne	r16,r4,c90c <__alt_data_end+0xfffdc90c>
    cbfc:	003f1806 	br	c860 <__alt_data_end+0xfffdc860>
    cc00:	843ff844 	addi	r16,r16,-31
    cc04:	01400804 	movi	r5,32
    cc08:	1408d83a 	srl	r4,r2,r16
    cc0c:	19405026 	beq	r3,r5,cd50 <__subdf3+0x574>
    cc10:	01401004 	movi	r5,64
    cc14:	28c7c83a 	sub	r3,r5,r3
    cc18:	10c4983a 	sll	r2,r2,r3
    cc1c:	88a2b03a 	or	r17,r17,r2
    cc20:	8822c03a 	cmpne	r17,r17,zero
    cc24:	2462b03a 	or	r17,r4,r17
    cc28:	0007883a 	mov	r3,zero
    cc2c:	0021883a 	mov	r16,zero
    cc30:	003f6d06 	br	c9e8 <__alt_data_end+0xfffdc9e8>
    cc34:	11fff804 	addi	r7,r2,-32
    cc38:	01000804 	movi	r4,32
    cc3c:	29ced83a 	srl	r7,r5,r7
    cc40:	11004526 	beq	r2,r4,cd58 <__subdf3+0x57c>
    cc44:	01001004 	movi	r4,64
    cc48:	2089c83a 	sub	r4,r4,r2
    cc4c:	2904983a 	sll	r2,r5,r4
    cc50:	118cb03a 	or	r6,r2,r6
    cc54:	300cc03a 	cmpne	r6,r6,zero
    cc58:	398cb03a 	or	r6,r7,r6
    cc5c:	0005883a 	mov	r2,zero
    cc60:	003f3706 	br	c940 <__alt_data_end+0xfffdc940>
    cc64:	80002a26 	beq	r16,zero,cd10 <__subdf3+0x534>
    cc68:	0101ffc4 	movi	r4,2047
    cc6c:	49006626 	beq	r9,r4,ce08 <__subdf3+0x62c>
    cc70:	0085c83a 	sub	r2,zero,r2
    cc74:	18c02034 	orhi	r3,r3,128
    cc78:	01000e04 	movi	r4,56
    cc7c:	20807e16 	blt	r4,r2,ce78 <__subdf3+0x69c>
    cc80:	010007c4 	movi	r4,31
    cc84:	2080e716 	blt	r4,r2,d024 <__subdf3+0x848>
    cc88:	01000804 	movi	r4,32
    cc8c:	2089c83a 	sub	r4,r4,r2
    cc90:	1914983a 	sll	r10,r3,r4
    cc94:	8890d83a 	srl	r8,r17,r2
    cc98:	8908983a 	sll	r4,r17,r4
    cc9c:	1884d83a 	srl	r2,r3,r2
    cca0:	5222b03a 	or	r17,r10,r8
    cca4:	2006c03a 	cmpne	r3,r4,zero
    cca8:	88e2b03a 	or	r17,r17,r3
    ccac:	3463c83a 	sub	r17,r6,r17
    ccb0:	2885c83a 	sub	r2,r5,r2
    ccb4:	344d803a 	cmpltu	r6,r6,r17
    ccb8:	1187c83a 	sub	r3,r2,r6
    ccbc:	4821883a 	mov	r16,r9
    ccc0:	3825883a 	mov	r18,r7
    ccc4:	003f2306 	br	c954 <__alt_data_end+0xfffdc954>
    ccc8:	24d0b03a 	or	r8,r4,r19
    cccc:	40001b1e 	bne	r8,zero,cd3c <__subdf3+0x560>
    ccd0:	0005883a 	mov	r2,zero
    ccd4:	0009883a 	mov	r4,zero
    ccd8:	0021883a 	mov	r16,zero
    ccdc:	003f4906 	br	ca04 <__alt_data_end+0xfffdca04>
    cce0:	010007c4 	movi	r4,31
    cce4:	20803a16 	blt	r4,r2,cdd0 <__subdf3+0x5f4>
    cce8:	01000804 	movi	r4,32
    ccec:	2089c83a 	sub	r4,r4,r2
    ccf0:	2912983a 	sll	r9,r5,r4
    ccf4:	3090d83a 	srl	r8,r6,r2
    ccf8:	3108983a 	sll	r4,r6,r4
    ccfc:	2884d83a 	srl	r2,r5,r2
    cd00:	4a12b03a 	or	r9,r9,r8
    cd04:	2008c03a 	cmpne	r4,r4,zero
    cd08:	4912b03a 	or	r9,r9,r4
    cd0c:	003f4e06 	br	ca48 <__alt_data_end+0xfffdca48>
    cd10:	1c48b03a 	or	r4,r3,r17
    cd14:	20003c26 	beq	r4,zero,ce08 <__subdf3+0x62c>
    cd18:	0084303a 	nor	r2,zero,r2
    cd1c:	1000381e 	bne	r2,zero,ce00 <__subdf3+0x624>
    cd20:	3463c83a 	sub	r17,r6,r17
    cd24:	28c5c83a 	sub	r2,r5,r3
    cd28:	344d803a 	cmpltu	r6,r6,r17
    cd2c:	1187c83a 	sub	r3,r2,r6
    cd30:	4821883a 	mov	r16,r9
    cd34:	3825883a 	mov	r18,r7
    cd38:	003f0606 	br	c954 <__alt_data_end+0xfffdc954>
    cd3c:	2023883a 	mov	r17,r4
    cd40:	003f0906 	br	c968 <__alt_data_end+0xfffdc968>
    cd44:	0101ffc4 	movi	r4,2047
    cd48:	813f3a1e 	bne	r16,r4,ca34 <__alt_data_end+0xfffdca34>
    cd4c:	003ec406 	br	c860 <__alt_data_end+0xfffdc860>
    cd50:	0005883a 	mov	r2,zero
    cd54:	003fb106 	br	cc1c <__alt_data_end+0xfffdcc1c>
    cd58:	0005883a 	mov	r2,zero
    cd5c:	003fbc06 	br	cc50 <__alt_data_end+0xfffdcc50>
    cd60:	1c44b03a 	or	r2,r3,r17
    cd64:	80008e1e 	bne	r16,zero,cfa0 <__subdf3+0x7c4>
    cd68:	1000c826 	beq	r2,zero,d08c <__subdf3+0x8b0>
    cd6c:	2984b03a 	or	r2,r5,r6
    cd70:	103ebb26 	beq	r2,zero,c860 <__alt_data_end+0xfffdc860>
    cd74:	8989883a 	add	r4,r17,r6
    cd78:	1945883a 	add	r2,r3,r5
    cd7c:	2447803a 	cmpltu	r3,r4,r17
    cd80:	1887883a 	add	r3,r3,r2
    cd84:	1880202c 	andhi	r2,r3,128
    cd88:	2023883a 	mov	r17,r4
    cd8c:	103f1626 	beq	r2,zero,c9e8 <__alt_data_end+0xfffdc9e8>
    cd90:	00bfe034 	movhi	r2,65408
    cd94:	10bfffc4 	addi	r2,r2,-1
    cd98:	5021883a 	mov	r16,r10
    cd9c:	1886703a 	and	r3,r3,r2
    cda0:	003eaf06 	br	c860 <__alt_data_end+0xfffdc860>
    cda4:	3825883a 	mov	r18,r7
    cda8:	003f0f06 	br	c9e8 <__alt_data_end+0xfffdc9e8>
    cdac:	1c44b03a 	or	r2,r3,r17
    cdb0:	8000251e 	bne	r16,zero,ce48 <__subdf3+0x66c>
    cdb4:	1000661e 	bne	r2,zero,cf50 <__subdf3+0x774>
    cdb8:	2990b03a 	or	r8,r5,r6
    cdbc:	40009626 	beq	r8,zero,d018 <__subdf3+0x83c>
    cdc0:	2807883a 	mov	r3,r5
    cdc4:	3023883a 	mov	r17,r6
    cdc8:	3825883a 	mov	r18,r7
    cdcc:	003ea406 	br	c860 <__alt_data_end+0xfffdc860>
    cdd0:	127ff804 	addi	r9,r2,-32
    cdd4:	01000804 	movi	r4,32
    cdd8:	2a52d83a 	srl	r9,r5,r9
    cddc:	11008c26 	beq	r2,r4,d010 <__subdf3+0x834>
    cde0:	01001004 	movi	r4,64
    cde4:	2085c83a 	sub	r2,r4,r2
    cde8:	2884983a 	sll	r2,r5,r2
    cdec:	118cb03a 	or	r6,r2,r6
    cdf0:	300cc03a 	cmpne	r6,r6,zero
    cdf4:	4992b03a 	or	r9,r9,r6
    cdf8:	0005883a 	mov	r2,zero
    cdfc:	003f1206 	br	ca48 <__alt_data_end+0xfffdca48>
    ce00:	0101ffc4 	movi	r4,2047
    ce04:	493f9c1e 	bne	r9,r4,cc78 <__alt_data_end+0xfffdcc78>
    ce08:	2807883a 	mov	r3,r5
    ce0c:	3023883a 	mov	r17,r6
    ce10:	4821883a 	mov	r16,r9
    ce14:	3825883a 	mov	r18,r7
    ce18:	003e9106 	br	c860 <__alt_data_end+0xfffdc860>
    ce1c:	80001f1e 	bne	r16,zero,ce9c <__subdf3+0x6c0>
    ce20:	1c48b03a 	or	r4,r3,r17
    ce24:	20005a26 	beq	r4,zero,cf90 <__subdf3+0x7b4>
    ce28:	0084303a 	nor	r2,zero,r2
    ce2c:	1000561e 	bne	r2,zero,cf88 <__subdf3+0x7ac>
    ce30:	89a3883a 	add	r17,r17,r6
    ce34:	1945883a 	add	r2,r3,r5
    ce38:	898d803a 	cmpltu	r6,r17,r6
    ce3c:	3087883a 	add	r3,r6,r2
    ce40:	4821883a 	mov	r16,r9
    ce44:	003f0506 	br	ca5c <__alt_data_end+0xfffdca5c>
    ce48:	10002b1e 	bne	r2,zero,cef8 <__subdf3+0x71c>
    ce4c:	2984b03a 	or	r2,r5,r6
    ce50:	10008026 	beq	r2,zero,d054 <__subdf3+0x878>
    ce54:	2807883a 	mov	r3,r5
    ce58:	3023883a 	mov	r17,r6
    ce5c:	3825883a 	mov	r18,r7
    ce60:	0401ffc4 	movi	r16,2047
    ce64:	003e7e06 	br	c860 <__alt_data_end+0xfffdc860>
    ce68:	3809883a 	mov	r4,r7
    ce6c:	0011883a 	mov	r8,zero
    ce70:	0005883a 	mov	r2,zero
    ce74:	003ee306 	br	ca04 <__alt_data_end+0xfffdca04>
    ce78:	1c62b03a 	or	r17,r3,r17
    ce7c:	8822c03a 	cmpne	r17,r17,zero
    ce80:	0005883a 	mov	r2,zero
    ce84:	003f8906 	br	ccac <__alt_data_end+0xfffdccac>
    ce88:	3809883a 	mov	r4,r7
    ce8c:	4821883a 	mov	r16,r9
    ce90:	0011883a 	mov	r8,zero
    ce94:	0005883a 	mov	r2,zero
    ce98:	003eda06 	br	ca04 <__alt_data_end+0xfffdca04>
    ce9c:	0101ffc4 	movi	r4,2047
    cea0:	49003b26 	beq	r9,r4,cf90 <__subdf3+0x7b4>
    cea4:	0085c83a 	sub	r2,zero,r2
    cea8:	18c02034 	orhi	r3,r3,128
    ceac:	01000e04 	movi	r4,56
    ceb0:	20806e16 	blt	r4,r2,d06c <__subdf3+0x890>
    ceb4:	010007c4 	movi	r4,31
    ceb8:	20807716 	blt	r4,r2,d098 <__subdf3+0x8bc>
    cebc:	01000804 	movi	r4,32
    cec0:	2089c83a 	sub	r4,r4,r2
    cec4:	1914983a 	sll	r10,r3,r4
    cec8:	8890d83a 	srl	r8,r17,r2
    cecc:	8908983a 	sll	r4,r17,r4
    ced0:	1884d83a 	srl	r2,r3,r2
    ced4:	5222b03a 	or	r17,r10,r8
    ced8:	2006c03a 	cmpne	r3,r4,zero
    cedc:	88e2b03a 	or	r17,r17,r3
    cee0:	89a3883a 	add	r17,r17,r6
    cee4:	1145883a 	add	r2,r2,r5
    cee8:	898d803a 	cmpltu	r6,r17,r6
    ceec:	3087883a 	add	r3,r6,r2
    cef0:	4821883a 	mov	r16,r9
    cef4:	003ed906 	br	ca5c <__alt_data_end+0xfffdca5c>
    cef8:	2984b03a 	or	r2,r5,r6
    cefc:	10004226 	beq	r2,zero,d008 <__subdf3+0x82c>
    cf00:	1808d0fa 	srli	r4,r3,3
    cf04:	8822d0fa 	srli	r17,r17,3
    cf08:	1806977a 	slli	r3,r3,29
    cf0c:	2080022c 	andhi	r2,r4,8
    cf10:	1c62b03a 	or	r17,r3,r17
    cf14:	10000826 	beq	r2,zero,cf38 <__subdf3+0x75c>
    cf18:	2812d0fa 	srli	r9,r5,3
    cf1c:	4880022c 	andhi	r2,r9,8
    cf20:	1000051e 	bne	r2,zero,cf38 <__subdf3+0x75c>
    cf24:	300cd0fa 	srli	r6,r6,3
    cf28:	2804977a 	slli	r2,r5,29
    cf2c:	4809883a 	mov	r4,r9
    cf30:	3825883a 	mov	r18,r7
    cf34:	11a2b03a 	or	r17,r2,r6
    cf38:	8806d77a 	srli	r3,r17,29
    cf3c:	200890fa 	slli	r4,r4,3
    cf40:	882290fa 	slli	r17,r17,3
    cf44:	0401ffc4 	movi	r16,2047
    cf48:	1906b03a 	or	r3,r3,r4
    cf4c:	003e4406 	br	c860 <__alt_data_end+0xfffdc860>
    cf50:	2984b03a 	or	r2,r5,r6
    cf54:	103e4226 	beq	r2,zero,c860 <__alt_data_end+0xfffdc860>
    cf58:	8989c83a 	sub	r4,r17,r6
    cf5c:	8911803a 	cmpltu	r8,r17,r4
    cf60:	1945c83a 	sub	r2,r3,r5
    cf64:	1205c83a 	sub	r2,r2,r8
    cf68:	1200202c 	andhi	r8,r2,128
    cf6c:	403e9a26 	beq	r8,zero,c9d8 <__alt_data_end+0xfffdc9d8>
    cf70:	3463c83a 	sub	r17,r6,r17
    cf74:	28c5c83a 	sub	r2,r5,r3
    cf78:	344d803a 	cmpltu	r6,r6,r17
    cf7c:	1187c83a 	sub	r3,r2,r6
    cf80:	3825883a 	mov	r18,r7
    cf84:	003e3606 	br	c860 <__alt_data_end+0xfffdc860>
    cf88:	0101ffc4 	movi	r4,2047
    cf8c:	493fc71e 	bne	r9,r4,ceac <__alt_data_end+0xfffdceac>
    cf90:	2807883a 	mov	r3,r5
    cf94:	3023883a 	mov	r17,r6
    cf98:	4821883a 	mov	r16,r9
    cf9c:	003e3006 	br	c860 <__alt_data_end+0xfffdc860>
    cfa0:	10003626 	beq	r2,zero,d07c <__subdf3+0x8a0>
    cfa4:	2984b03a 	or	r2,r5,r6
    cfa8:	10001726 	beq	r2,zero,d008 <__subdf3+0x82c>
    cfac:	1808d0fa 	srli	r4,r3,3
    cfb0:	8822d0fa 	srli	r17,r17,3
    cfb4:	1806977a 	slli	r3,r3,29
    cfb8:	2080022c 	andhi	r2,r4,8
    cfbc:	1c62b03a 	or	r17,r3,r17
    cfc0:	10000726 	beq	r2,zero,cfe0 <__subdf3+0x804>
    cfc4:	2812d0fa 	srli	r9,r5,3
    cfc8:	4880022c 	andhi	r2,r9,8
    cfcc:	1000041e 	bne	r2,zero,cfe0 <__subdf3+0x804>
    cfd0:	300cd0fa 	srli	r6,r6,3
    cfd4:	2804977a 	slli	r2,r5,29
    cfd8:	4809883a 	mov	r4,r9
    cfdc:	11a2b03a 	or	r17,r2,r6
    cfe0:	8806d77a 	srli	r3,r17,29
    cfe4:	200890fa 	slli	r4,r4,3
    cfe8:	882290fa 	slli	r17,r17,3
    cfec:	3825883a 	mov	r18,r7
    cff0:	1906b03a 	or	r3,r3,r4
    cff4:	0401ffc4 	movi	r16,2047
    cff8:	003e1906 	br	c860 <__alt_data_end+0xfffdc860>
    cffc:	000b883a 	mov	r5,zero
    d000:	0005883a 	mov	r2,zero
    d004:	003e2e06 	br	c8c0 <__alt_data_end+0xfffdc8c0>
    d008:	0401ffc4 	movi	r16,2047
    d00c:	003e1406 	br	c860 <__alt_data_end+0xfffdc860>
    d010:	0005883a 	mov	r2,zero
    d014:	003f7506 	br	cdec <__alt_data_end+0xfffdcdec>
    d018:	0005883a 	mov	r2,zero
    d01c:	0009883a 	mov	r4,zero
    d020:	003e7806 	br	ca04 <__alt_data_end+0xfffdca04>
    d024:	123ff804 	addi	r8,r2,-32
    d028:	01000804 	movi	r4,32
    d02c:	1a10d83a 	srl	r8,r3,r8
    d030:	11002526 	beq	r2,r4,d0c8 <__subdf3+0x8ec>
    d034:	01001004 	movi	r4,64
    d038:	2085c83a 	sub	r2,r4,r2
    d03c:	1884983a 	sll	r2,r3,r2
    d040:	1444b03a 	or	r2,r2,r17
    d044:	1004c03a 	cmpne	r2,r2,zero
    d048:	40a2b03a 	or	r17,r8,r2
    d04c:	0005883a 	mov	r2,zero
    d050:	003f1606 	br	ccac <__alt_data_end+0xfffdccac>
    d054:	02000434 	movhi	r8,16
    d058:	0009883a 	mov	r4,zero
    d05c:	423fffc4 	addi	r8,r8,-1
    d060:	00bfffc4 	movi	r2,-1
    d064:	0401ffc4 	movi	r16,2047
    d068:	003e6606 	br	ca04 <__alt_data_end+0xfffdca04>
    d06c:	1c62b03a 	or	r17,r3,r17
    d070:	8822c03a 	cmpne	r17,r17,zero
    d074:	0005883a 	mov	r2,zero
    d078:	003f9906 	br	cee0 <__alt_data_end+0xfffdcee0>
    d07c:	2807883a 	mov	r3,r5
    d080:	3023883a 	mov	r17,r6
    d084:	0401ffc4 	movi	r16,2047
    d088:	003df506 	br	c860 <__alt_data_end+0xfffdc860>
    d08c:	2807883a 	mov	r3,r5
    d090:	3023883a 	mov	r17,r6
    d094:	003df206 	br	c860 <__alt_data_end+0xfffdc860>
    d098:	123ff804 	addi	r8,r2,-32
    d09c:	01000804 	movi	r4,32
    d0a0:	1a10d83a 	srl	r8,r3,r8
    d0a4:	11000a26 	beq	r2,r4,d0d0 <__subdf3+0x8f4>
    d0a8:	01001004 	movi	r4,64
    d0ac:	2085c83a 	sub	r2,r4,r2
    d0b0:	1884983a 	sll	r2,r3,r2
    d0b4:	1444b03a 	or	r2,r2,r17
    d0b8:	1004c03a 	cmpne	r2,r2,zero
    d0bc:	40a2b03a 	or	r17,r8,r2
    d0c0:	0005883a 	mov	r2,zero
    d0c4:	003f8606 	br	cee0 <__alt_data_end+0xfffdcee0>
    d0c8:	0005883a 	mov	r2,zero
    d0cc:	003fdc06 	br	d040 <__alt_data_end+0xfffdd040>
    d0d0:	0005883a 	mov	r2,zero
    d0d4:	003ff706 	br	d0b4 <__alt_data_end+0xfffdd0b4>

0000d0d8 <__fixdfsi>:
    d0d8:	280cd53a 	srli	r6,r5,20
    d0dc:	00c00434 	movhi	r3,16
    d0e0:	18ffffc4 	addi	r3,r3,-1
    d0e4:	3181ffcc 	andi	r6,r6,2047
    d0e8:	01c0ff84 	movi	r7,1022
    d0ec:	28c6703a 	and	r3,r5,r3
    d0f0:	280ad7fa 	srli	r5,r5,31
    d0f4:	3980120e 	bge	r7,r6,d140 <__fixdfsi+0x68>
    d0f8:	00810744 	movi	r2,1053
    d0fc:	11800c16 	blt	r2,r6,d130 <__fixdfsi+0x58>
    d100:	00810cc4 	movi	r2,1075
    d104:	1185c83a 	sub	r2,r2,r6
    d108:	01c007c4 	movi	r7,31
    d10c:	18c00434 	orhi	r3,r3,16
    d110:	38800d16 	blt	r7,r2,d148 <__fixdfsi+0x70>
    d114:	31befb44 	addi	r6,r6,-1043
    d118:	2084d83a 	srl	r2,r4,r2
    d11c:	1986983a 	sll	r3,r3,r6
    d120:	1884b03a 	or	r2,r3,r2
    d124:	28000726 	beq	r5,zero,d144 <__fixdfsi+0x6c>
    d128:	0085c83a 	sub	r2,zero,r2
    d12c:	f800283a 	ret
    d130:	00a00034 	movhi	r2,32768
    d134:	10bfffc4 	addi	r2,r2,-1
    d138:	2885883a 	add	r2,r5,r2
    d13c:	f800283a 	ret
    d140:	0005883a 	mov	r2,zero
    d144:	f800283a 	ret
    d148:	008104c4 	movi	r2,1043
    d14c:	1185c83a 	sub	r2,r2,r6
    d150:	1884d83a 	srl	r2,r3,r2
    d154:	003ff306 	br	d124 <__alt_data_end+0xfffdd124>

0000d158 <__floatsidf>:
    d158:	defffd04 	addi	sp,sp,-12
    d15c:	dfc00215 	stw	ra,8(sp)
    d160:	dc400115 	stw	r17,4(sp)
    d164:	dc000015 	stw	r16,0(sp)
    d168:	20002b26 	beq	r4,zero,d218 <__floatsidf+0xc0>
    d16c:	2023883a 	mov	r17,r4
    d170:	2020d7fa 	srli	r16,r4,31
    d174:	20002d16 	blt	r4,zero,d22c <__floatsidf+0xd4>
    d178:	8809883a 	mov	r4,r17
    d17c:	000d2dc0 	call	d2dc <__clzsi2>
    d180:	01410784 	movi	r5,1054
    d184:	288bc83a 	sub	r5,r5,r2
    d188:	01010cc4 	movi	r4,1075
    d18c:	2149c83a 	sub	r4,r4,r5
    d190:	00c007c4 	movi	r3,31
    d194:	1900160e 	bge	r3,r4,d1f0 <__floatsidf+0x98>
    d198:	00c104c4 	movi	r3,1043
    d19c:	1947c83a 	sub	r3,r3,r5
    d1a0:	88c6983a 	sll	r3,r17,r3
    d1a4:	00800434 	movhi	r2,16
    d1a8:	10bfffc4 	addi	r2,r2,-1
    d1ac:	1886703a 	and	r3,r3,r2
    d1b0:	2941ffcc 	andi	r5,r5,2047
    d1b4:	800d883a 	mov	r6,r16
    d1b8:	0005883a 	mov	r2,zero
    d1bc:	280a953a 	slli	r5,r5,20
    d1c0:	31803fcc 	andi	r6,r6,255
    d1c4:	01000434 	movhi	r4,16
    d1c8:	300c97fa 	slli	r6,r6,31
    d1cc:	213fffc4 	addi	r4,r4,-1
    d1d0:	1906703a 	and	r3,r3,r4
    d1d4:	1946b03a 	or	r3,r3,r5
    d1d8:	1986b03a 	or	r3,r3,r6
    d1dc:	dfc00217 	ldw	ra,8(sp)
    d1e0:	dc400117 	ldw	r17,4(sp)
    d1e4:	dc000017 	ldw	r16,0(sp)
    d1e8:	dec00304 	addi	sp,sp,12
    d1ec:	f800283a 	ret
    d1f0:	00c002c4 	movi	r3,11
    d1f4:	1887c83a 	sub	r3,r3,r2
    d1f8:	88c6d83a 	srl	r3,r17,r3
    d1fc:	8904983a 	sll	r2,r17,r4
    d200:	01000434 	movhi	r4,16
    d204:	213fffc4 	addi	r4,r4,-1
    d208:	2941ffcc 	andi	r5,r5,2047
    d20c:	1906703a 	and	r3,r3,r4
    d210:	800d883a 	mov	r6,r16
    d214:	003fe906 	br	d1bc <__alt_data_end+0xfffdd1bc>
    d218:	000d883a 	mov	r6,zero
    d21c:	000b883a 	mov	r5,zero
    d220:	0007883a 	mov	r3,zero
    d224:	0005883a 	mov	r2,zero
    d228:	003fe406 	br	d1bc <__alt_data_end+0xfffdd1bc>
    d22c:	0123c83a 	sub	r17,zero,r4
    d230:	003fd106 	br	d178 <__alt_data_end+0xfffdd178>

0000d234 <__floatunsidf>:
    d234:	defffe04 	addi	sp,sp,-8
    d238:	dc000015 	stw	r16,0(sp)
    d23c:	dfc00115 	stw	ra,4(sp)
    d240:	2021883a 	mov	r16,r4
    d244:	20002226 	beq	r4,zero,d2d0 <__floatunsidf+0x9c>
    d248:	000d2dc0 	call	d2dc <__clzsi2>
    d24c:	01010784 	movi	r4,1054
    d250:	2089c83a 	sub	r4,r4,r2
    d254:	01810cc4 	movi	r6,1075
    d258:	310dc83a 	sub	r6,r6,r4
    d25c:	00c007c4 	movi	r3,31
    d260:	1980120e 	bge	r3,r6,d2ac <__floatunsidf+0x78>
    d264:	00c104c4 	movi	r3,1043
    d268:	1907c83a 	sub	r3,r3,r4
    d26c:	80ca983a 	sll	r5,r16,r3
    d270:	00800434 	movhi	r2,16
    d274:	10bfffc4 	addi	r2,r2,-1
    d278:	2101ffcc 	andi	r4,r4,2047
    d27c:	0021883a 	mov	r16,zero
    d280:	288a703a 	and	r5,r5,r2
    d284:	2008953a 	slli	r4,r4,20
    d288:	00c00434 	movhi	r3,16
    d28c:	18ffffc4 	addi	r3,r3,-1
    d290:	28c6703a 	and	r3,r5,r3
    d294:	8005883a 	mov	r2,r16
    d298:	1906b03a 	or	r3,r3,r4
    d29c:	dfc00117 	ldw	ra,4(sp)
    d2a0:	dc000017 	ldw	r16,0(sp)
    d2a4:	dec00204 	addi	sp,sp,8
    d2a8:	f800283a 	ret
    d2ac:	00c002c4 	movi	r3,11
    d2b0:	188bc83a 	sub	r5,r3,r2
    d2b4:	814ad83a 	srl	r5,r16,r5
    d2b8:	00c00434 	movhi	r3,16
    d2bc:	18ffffc4 	addi	r3,r3,-1
    d2c0:	81a0983a 	sll	r16,r16,r6
    d2c4:	2101ffcc 	andi	r4,r4,2047
    d2c8:	28ca703a 	and	r5,r5,r3
    d2cc:	003fed06 	br	d284 <__alt_data_end+0xfffdd284>
    d2d0:	0009883a 	mov	r4,zero
    d2d4:	000b883a 	mov	r5,zero
    d2d8:	003fea06 	br	d284 <__alt_data_end+0xfffdd284>

0000d2dc <__clzsi2>:
    d2dc:	00bfffd4 	movui	r2,65535
    d2e0:	11000536 	bltu	r2,r4,d2f8 <__clzsi2+0x1c>
    d2e4:	00803fc4 	movi	r2,255
    d2e8:	11000f36 	bltu	r2,r4,d328 <__clzsi2+0x4c>
    d2ec:	00800804 	movi	r2,32
    d2f0:	0007883a 	mov	r3,zero
    d2f4:	00000506 	br	d30c <__clzsi2+0x30>
    d2f8:	00804034 	movhi	r2,256
    d2fc:	10bfffc4 	addi	r2,r2,-1
    d300:	11000c2e 	bgeu	r2,r4,d334 <__clzsi2+0x58>
    d304:	00800204 	movi	r2,8
    d308:	00c00604 	movi	r3,24
    d30c:	20c8d83a 	srl	r4,r4,r3
    d310:	00c00074 	movhi	r3,1
    d314:	18df6504 	addi	r3,r3,32148
    d318:	1909883a 	add	r4,r3,r4
    d31c:	20c00003 	ldbu	r3,0(r4)
    d320:	10c5c83a 	sub	r2,r2,r3
    d324:	f800283a 	ret
    d328:	00800604 	movi	r2,24
    d32c:	00c00204 	movi	r3,8
    d330:	003ff606 	br	d30c <__alt_data_end+0xfffdd30c>
    d334:	00800404 	movi	r2,16
    d338:	1007883a 	mov	r3,r2
    d33c:	003ff306 	br	d30c <__alt_data_end+0xfffdd30c>

0000d340 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    d340:	defffe04 	addi	sp,sp,-8
    d344:	dfc00115 	stw	ra,4(sp)
    d348:	df000015 	stw	fp,0(sp)
    d34c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    d350:	d0a00b17 	ldw	r2,-32724(gp)
    d354:	10000326 	beq	r2,zero,d364 <alt_get_errno+0x24>
    d358:	d0a00b17 	ldw	r2,-32724(gp)
    d35c:	103ee83a 	callr	r2
    d360:	00000106 	br	d368 <alt_get_errno+0x28>
    d364:	d0a71604 	addi	r2,gp,-25512
}
    d368:	e037883a 	mov	sp,fp
    d36c:	dfc00117 	ldw	ra,4(sp)
    d370:	df000017 	ldw	fp,0(sp)
    d374:	dec00204 	addi	sp,sp,8
    d378:	f800283a 	ret

0000d37c <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
    d37c:	defffb04 	addi	sp,sp,-20
    d380:	dfc00415 	stw	ra,16(sp)
    d384:	df000315 	stw	fp,12(sp)
    d388:	df000304 	addi	fp,sp,12
    d38c:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
    d390:	e0bfff17 	ldw	r2,-4(fp)
    d394:	10000816 	blt	r2,zero,d3b8 <close+0x3c>
    d398:	01400304 	movi	r5,12
    d39c:	e13fff17 	ldw	r4,-4(fp)
    d3a0:	000aa740 	call	aa74 <__mulsi3>
    d3a4:	1007883a 	mov	r3,r2
    d3a8:	008000b4 	movhi	r2,2
    d3ac:	10a22a04 	addi	r2,r2,-30552
    d3b0:	1885883a 	add	r2,r3,r2
    d3b4:	00000106 	br	d3bc <close+0x40>
    d3b8:	0005883a 	mov	r2,zero
    d3bc:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
    d3c0:	e0bffd17 	ldw	r2,-12(fp)
    d3c4:	10001926 	beq	r2,zero,d42c <close+0xb0>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
    d3c8:	e0bffd17 	ldw	r2,-12(fp)
    d3cc:	10800017 	ldw	r2,0(r2)
    d3d0:	10800417 	ldw	r2,16(r2)
    d3d4:	10000626 	beq	r2,zero,d3f0 <close+0x74>
    d3d8:	e0bffd17 	ldw	r2,-12(fp)
    d3dc:	10800017 	ldw	r2,0(r2)
    d3e0:	10800417 	ldw	r2,16(r2)
    d3e4:	e13ffd17 	ldw	r4,-12(fp)
    d3e8:	103ee83a 	callr	r2
    d3ec:	00000106 	br	d3f4 <close+0x78>
    d3f0:	0005883a 	mov	r2,zero
    d3f4:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
    d3f8:	e13fff17 	ldw	r4,-4(fp)
    d3fc:	000dcfc0 	call	dcfc <alt_release_fd>
    if (rval < 0)
    d400:	e0bffe17 	ldw	r2,-8(fp)
    d404:	1000070e 	bge	r2,zero,d424 <close+0xa8>
    {
      ALT_ERRNO = -rval;
    d408:	000d3400 	call	d340 <alt_get_errno>
    d40c:	1007883a 	mov	r3,r2
    d410:	e0bffe17 	ldw	r2,-8(fp)
    d414:	0085c83a 	sub	r2,zero,r2
    d418:	18800015 	stw	r2,0(r3)
      return -1;
    d41c:	00bfffc4 	movi	r2,-1
    d420:	00000706 	br	d440 <close+0xc4>
    }
    return 0;
    d424:	0005883a 	mov	r2,zero
    d428:	00000506 	br	d440 <close+0xc4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
    d42c:	000d3400 	call	d340 <alt_get_errno>
    d430:	1007883a 	mov	r3,r2
    d434:	00801444 	movi	r2,81
    d438:	18800015 	stw	r2,0(r3)
    return -1;
    d43c:	00bfffc4 	movi	r2,-1
  }
}
    d440:	e037883a 	mov	sp,fp
    d444:	dfc00117 	ldw	ra,4(sp)
    d448:	df000017 	ldw	fp,0(sp)
    d44c:	dec00204 	addi	sp,sp,8
    d450:	f800283a 	ret

0000d454 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
    d454:	defffc04 	addi	sp,sp,-16
    d458:	df000315 	stw	fp,12(sp)
    d45c:	df000304 	addi	fp,sp,12
    d460:	e13ffd15 	stw	r4,-12(fp)
    d464:	e17ffe15 	stw	r5,-8(fp)
    d468:	e1bfff15 	stw	r6,-4(fp)
  return len;
    d46c:	e0bfff17 	ldw	r2,-4(fp)
}
    d470:	e037883a 	mov	sp,fp
    d474:	df000017 	ldw	fp,0(sp)
    d478:	dec00104 	addi	sp,sp,4
    d47c:	f800283a 	ret

0000d480 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    d480:	defffe04 	addi	sp,sp,-8
    d484:	dfc00115 	stw	ra,4(sp)
    d488:	df000015 	stw	fp,0(sp)
    d48c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    d490:	d0a00b17 	ldw	r2,-32724(gp)
    d494:	10000326 	beq	r2,zero,d4a4 <alt_get_errno+0x24>
    d498:	d0a00b17 	ldw	r2,-32724(gp)
    d49c:	103ee83a 	callr	r2
    d4a0:	00000106 	br	d4a8 <alt_get_errno+0x28>
    d4a4:	d0a71604 	addi	r2,gp,-25512
}
    d4a8:	e037883a 	mov	sp,fp
    d4ac:	dfc00117 	ldw	ra,4(sp)
    d4b0:	df000017 	ldw	fp,0(sp)
    d4b4:	dec00204 	addi	sp,sp,8
    d4b8:	f800283a 	ret

0000d4bc <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
    d4bc:	defffb04 	addi	sp,sp,-20
    d4c0:	dfc00415 	stw	ra,16(sp)
    d4c4:	df000315 	stw	fp,12(sp)
    d4c8:	df000304 	addi	fp,sp,12
    d4cc:	e13ffe15 	stw	r4,-8(fp)
    d4d0:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    d4d4:	e0bffe17 	ldw	r2,-8(fp)
    d4d8:	10000816 	blt	r2,zero,d4fc <fstat+0x40>
    d4dc:	01400304 	movi	r5,12
    d4e0:	e13ffe17 	ldw	r4,-8(fp)
    d4e4:	000aa740 	call	aa74 <__mulsi3>
    d4e8:	1007883a 	mov	r3,r2
    d4ec:	008000b4 	movhi	r2,2
    d4f0:	10a22a04 	addi	r2,r2,-30552
    d4f4:	1885883a 	add	r2,r3,r2
    d4f8:	00000106 	br	d500 <fstat+0x44>
    d4fc:	0005883a 	mov	r2,zero
    d500:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
    d504:	e0bffd17 	ldw	r2,-12(fp)
    d508:	10001026 	beq	r2,zero,d54c <fstat+0x90>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
    d50c:	e0bffd17 	ldw	r2,-12(fp)
    d510:	10800017 	ldw	r2,0(r2)
    d514:	10800817 	ldw	r2,32(r2)
    d518:	10000726 	beq	r2,zero,d538 <fstat+0x7c>
    {
      return fd->dev->fstat(fd, st);
    d51c:	e0bffd17 	ldw	r2,-12(fp)
    d520:	10800017 	ldw	r2,0(r2)
    d524:	10800817 	ldw	r2,32(r2)
    d528:	e17fff17 	ldw	r5,-4(fp)
    d52c:	e13ffd17 	ldw	r4,-12(fp)
    d530:	103ee83a 	callr	r2
    d534:	00000a06 	br	d560 <fstat+0xa4>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
    d538:	e0bfff17 	ldw	r2,-4(fp)
    d53c:	00c80004 	movi	r3,8192
    d540:	10c00115 	stw	r3,4(r2)
      return 0;
    d544:	0005883a 	mov	r2,zero
    d548:	00000506 	br	d560 <fstat+0xa4>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
    d54c:	000d4800 	call	d480 <alt_get_errno>
    d550:	1007883a 	mov	r3,r2
    d554:	00801444 	movi	r2,81
    d558:	18800015 	stw	r2,0(r3)
    return -1;
    d55c:	00bfffc4 	movi	r2,-1
  }
}
    d560:	e037883a 	mov	sp,fp
    d564:	dfc00117 	ldw	ra,4(sp)
    d568:	df000017 	ldw	fp,0(sp)
    d56c:	dec00204 	addi	sp,sp,8
    d570:	f800283a 	ret

0000d574 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
    d574:	defff904 	addi	sp,sp,-28
    d578:	dfc00615 	stw	ra,24(sp)
    d57c:	df000515 	stw	fp,20(sp)
    d580:	df000504 	addi	fp,sp,20
    d584:	e13ffc15 	stw	r4,-16(fp)
    d588:	e17ffd15 	stw	r5,-12(fp)
    d58c:	e1bffe15 	stw	r6,-8(fp)
    d590:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
    d594:	e0800217 	ldw	r2,8(fp)
    d598:	d8800015 	stw	r2,0(sp)
    d59c:	e1ffff17 	ldw	r7,-4(fp)
    d5a0:	e1bffe17 	ldw	r6,-8(fp)
    d5a4:	e17ffd17 	ldw	r5,-12(fp)
    d5a8:	e13ffc17 	ldw	r4,-16(fp)
    d5ac:	000d7240 	call	d724 <alt_iic_isr_register>
}  
    d5b0:	e037883a 	mov	sp,fp
    d5b4:	dfc00117 	ldw	ra,4(sp)
    d5b8:	df000017 	ldw	fp,0(sp)
    d5bc:	dec00204 	addi	sp,sp,8
    d5c0:	f800283a 	ret

0000d5c4 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
    d5c4:	defff904 	addi	sp,sp,-28
    d5c8:	df000615 	stw	fp,24(sp)
    d5cc:	df000604 	addi	fp,sp,24
    d5d0:	e13ffe15 	stw	r4,-8(fp)
    d5d4:	e17fff15 	stw	r5,-4(fp)
    d5d8:	e0bfff17 	ldw	r2,-4(fp)
    d5dc:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    d5e0:	0005303a 	rdctl	r2,status
    d5e4:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    d5e8:	e0fffb17 	ldw	r3,-20(fp)
    d5ec:	00bfff84 	movi	r2,-2
    d5f0:	1884703a 	and	r2,r3,r2
    d5f4:	1001703a 	wrctl	status,r2
  
  return context;
    d5f8:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
    d5fc:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
    d600:	00c00044 	movi	r3,1
    d604:	e0bffa17 	ldw	r2,-24(fp)
    d608:	1884983a 	sll	r2,r3,r2
    d60c:	1007883a 	mov	r3,r2
    d610:	d0a71817 	ldw	r2,-25504(gp)
    d614:	1884b03a 	or	r2,r3,r2
    d618:	d0a71815 	stw	r2,-25504(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
    d61c:	d0a71817 	ldw	r2,-25504(gp)
    d620:	100170fa 	wrctl	ienable,r2
    d624:	e0bffc17 	ldw	r2,-16(fp)
    d628:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    d62c:	e0bffd17 	ldw	r2,-12(fp)
    d630:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
    d634:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
    d638:	0001883a 	nop
}
    d63c:	e037883a 	mov	sp,fp
    d640:	df000017 	ldw	fp,0(sp)
    d644:	dec00104 	addi	sp,sp,4
    d648:	f800283a 	ret

0000d64c <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
    d64c:	defff904 	addi	sp,sp,-28
    d650:	df000615 	stw	fp,24(sp)
    d654:	df000604 	addi	fp,sp,24
    d658:	e13ffe15 	stw	r4,-8(fp)
    d65c:	e17fff15 	stw	r5,-4(fp)
    d660:	e0bfff17 	ldw	r2,-4(fp)
    d664:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    d668:	0005303a 	rdctl	r2,status
    d66c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    d670:	e0fffb17 	ldw	r3,-20(fp)
    d674:	00bfff84 	movi	r2,-2
    d678:	1884703a 	and	r2,r3,r2
    d67c:	1001703a 	wrctl	status,r2
  
  return context;
    d680:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
    d684:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
    d688:	00c00044 	movi	r3,1
    d68c:	e0bffa17 	ldw	r2,-24(fp)
    d690:	1884983a 	sll	r2,r3,r2
    d694:	0084303a 	nor	r2,zero,r2
    d698:	1007883a 	mov	r3,r2
    d69c:	d0a71817 	ldw	r2,-25504(gp)
    d6a0:	1884703a 	and	r2,r3,r2
    d6a4:	d0a71815 	stw	r2,-25504(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
    d6a8:	d0a71817 	ldw	r2,-25504(gp)
    d6ac:	100170fa 	wrctl	ienable,r2
    d6b0:	e0bffc17 	ldw	r2,-16(fp)
    d6b4:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    d6b8:	e0bffd17 	ldw	r2,-12(fp)
    d6bc:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
    d6c0:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
    d6c4:	0001883a 	nop
}
    d6c8:	e037883a 	mov	sp,fp
    d6cc:	df000017 	ldw	fp,0(sp)
    d6d0:	dec00104 	addi	sp,sp,4
    d6d4:	f800283a 	ret

0000d6d8 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
    d6d8:	defffc04 	addi	sp,sp,-16
    d6dc:	df000315 	stw	fp,12(sp)
    d6e0:	df000304 	addi	fp,sp,12
    d6e4:	e13ffe15 	stw	r4,-8(fp)
    d6e8:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
    d6ec:	000530fa 	rdctl	r2,ienable
    d6f0:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
    d6f4:	00c00044 	movi	r3,1
    d6f8:	e0bfff17 	ldw	r2,-4(fp)
    d6fc:	1884983a 	sll	r2,r3,r2
    d700:	1007883a 	mov	r3,r2
    d704:	e0bffd17 	ldw	r2,-12(fp)
    d708:	1884703a 	and	r2,r3,r2
    d70c:	1004c03a 	cmpne	r2,r2,zero
    d710:	10803fcc 	andi	r2,r2,255
}
    d714:	e037883a 	mov	sp,fp
    d718:	df000017 	ldw	fp,0(sp)
    d71c:	dec00104 	addi	sp,sp,4
    d720:	f800283a 	ret

0000d724 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
    d724:	defff504 	addi	sp,sp,-44
    d728:	dfc00a15 	stw	ra,40(sp)
    d72c:	df000915 	stw	fp,36(sp)
    d730:	df000904 	addi	fp,sp,36
    d734:	e13ffc15 	stw	r4,-16(fp)
    d738:	e17ffd15 	stw	r5,-12(fp)
    d73c:	e1bffe15 	stw	r6,-8(fp)
    d740:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
    d744:	00bffa84 	movi	r2,-22
    d748:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
    d74c:	e0bffd17 	ldw	r2,-12(fp)
    d750:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
    d754:	e0bff817 	ldw	r2,-32(fp)
    d758:	10800808 	cmpgei	r2,r2,32
    d75c:	1000271e 	bne	r2,zero,d7fc <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    d760:	0005303a 	rdctl	r2,status
    d764:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    d768:	e0fffb17 	ldw	r3,-20(fp)
    d76c:	00bfff84 	movi	r2,-2
    d770:	1884703a 	and	r2,r3,r2
    d774:	1001703a 	wrctl	status,r2
  
  return context;
    d778:	e0bffb17 	ldw	r2,-20(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
    d77c:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = isr;
    d780:	008000b4 	movhi	r2,2
    d784:	10b1e504 	addi	r2,r2,-14444
    d788:	e0fff817 	ldw	r3,-32(fp)
    d78c:	180690fa 	slli	r3,r3,3
    d790:	10c5883a 	add	r2,r2,r3
    d794:	e0fffe17 	ldw	r3,-8(fp)
    d798:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
    d79c:	008000b4 	movhi	r2,2
    d7a0:	10b1e504 	addi	r2,r2,-14444
    d7a4:	e0fff817 	ldw	r3,-32(fp)
    d7a8:	180690fa 	slli	r3,r3,3
    d7ac:	10c5883a 	add	r2,r2,r3
    d7b0:	10800104 	addi	r2,r2,4
    d7b4:	e0ffff17 	ldw	r3,-4(fp)
    d7b8:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
    d7bc:	e0bffe17 	ldw	r2,-8(fp)
    d7c0:	10000526 	beq	r2,zero,d7d8 <alt_iic_isr_register+0xb4>
    d7c4:	e0bff817 	ldw	r2,-32(fp)
    d7c8:	100b883a 	mov	r5,r2
    d7cc:	e13ffc17 	ldw	r4,-16(fp)
    d7d0:	000d5c40 	call	d5c4 <alt_ic_irq_enable>
    d7d4:	00000406 	br	d7e8 <alt_iic_isr_register+0xc4>
    d7d8:	e0bff817 	ldw	r2,-32(fp)
    d7dc:	100b883a 	mov	r5,r2
    d7e0:	e13ffc17 	ldw	r4,-16(fp)
    d7e4:	000d64c0 	call	d64c <alt_ic_irq_disable>
    d7e8:	e0bff715 	stw	r2,-36(fp)
    d7ec:	e0bffa17 	ldw	r2,-24(fp)
    d7f0:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    d7f4:	e0bff917 	ldw	r2,-28(fp)
    d7f8:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
    d7fc:	e0bff717 	ldw	r2,-36(fp)
}
    d800:	e037883a 	mov	sp,fp
    d804:	dfc00117 	ldw	ra,4(sp)
    d808:	df000017 	ldw	fp,0(sp)
    d80c:	dec00204 	addi	sp,sp,8
    d810:	f800283a 	ret

0000d814 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    d814:	defffe04 	addi	sp,sp,-8
    d818:	dfc00115 	stw	ra,4(sp)
    d81c:	df000015 	stw	fp,0(sp)
    d820:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    d824:	d0a00b17 	ldw	r2,-32724(gp)
    d828:	10000326 	beq	r2,zero,d838 <alt_get_errno+0x24>
    d82c:	d0a00b17 	ldw	r2,-32724(gp)
    d830:	103ee83a 	callr	r2
    d834:	00000106 	br	d83c <alt_get_errno+0x28>
    d838:	d0a71604 	addi	r2,gp,-25512
}
    d83c:	e037883a 	mov	sp,fp
    d840:	dfc00117 	ldw	ra,4(sp)
    d844:	df000017 	ldw	fp,0(sp)
    d848:	dec00204 	addi	sp,sp,8
    d84c:	f800283a 	ret

0000d850 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
    d850:	deffed04 	addi	sp,sp,-76
    d854:	dfc01215 	stw	ra,72(sp)
    d858:	df001115 	stw	fp,68(sp)
    d85c:	df001104 	addi	fp,sp,68
    d860:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    d864:	e0bfff17 	ldw	r2,-4(fp)
    d868:	10000816 	blt	r2,zero,d88c <isatty+0x3c>
    d86c:	01400304 	movi	r5,12
    d870:	e13fff17 	ldw	r4,-4(fp)
    d874:	000aa740 	call	aa74 <__mulsi3>
    d878:	1007883a 	mov	r3,r2
    d87c:	008000b4 	movhi	r2,2
    d880:	10a22a04 	addi	r2,r2,-30552
    d884:	1885883a 	add	r2,r3,r2
    d888:	00000106 	br	d890 <isatty+0x40>
    d88c:	0005883a 	mov	r2,zero
    d890:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
    d894:	e0bfef17 	ldw	r2,-68(fp)
    d898:	10000e26 	beq	r2,zero,d8d4 <isatty+0x84>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
    d89c:	e0bfef17 	ldw	r2,-68(fp)
    d8a0:	10800017 	ldw	r2,0(r2)
    d8a4:	10800817 	ldw	r2,32(r2)
    d8a8:	1000021e 	bne	r2,zero,d8b4 <isatty+0x64>
    {
      return 1;
    d8ac:	00800044 	movi	r2,1
    d8b0:	00000d06 	br	d8e8 <isatty+0x98>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
    d8b4:	e0bff004 	addi	r2,fp,-64
    d8b8:	100b883a 	mov	r5,r2
    d8bc:	e13fff17 	ldw	r4,-4(fp)
    d8c0:	000d4bc0 	call	d4bc <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
    d8c4:	e0bff117 	ldw	r2,-60(fp)
    d8c8:	10880020 	cmpeqi	r2,r2,8192
    d8cc:	10803fcc 	andi	r2,r2,255
    d8d0:	00000506 	br	d8e8 <isatty+0x98>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
    d8d4:	000d8140 	call	d814 <alt_get_errno>
    d8d8:	1007883a 	mov	r3,r2
    d8dc:	00801444 	movi	r2,81
    d8e0:	18800015 	stw	r2,0(r3)
    return 0;
    d8e4:	0005883a 	mov	r2,zero
  }
}
    d8e8:	e037883a 	mov	sp,fp
    d8ec:	dfc00117 	ldw	ra,4(sp)
    d8f0:	df000017 	ldw	fp,0(sp)
    d8f4:	dec00204 	addi	sp,sp,8
    d8f8:	f800283a 	ret

0000d8fc <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
    d8fc:	defffc04 	addi	sp,sp,-16
    d900:	df000315 	stw	fp,12(sp)
    d904:	df000304 	addi	fp,sp,12
    d908:	e13ffd15 	stw	r4,-12(fp)
    d90c:	e17ffe15 	stw	r5,-8(fp)
    d910:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
    d914:	e0fffe17 	ldw	r3,-8(fp)
    d918:	e0bffd17 	ldw	r2,-12(fp)
    d91c:	18800c26 	beq	r3,r2,d950 <alt_load_section+0x54>
  {
    while( to != end )
    d920:	00000806 	br	d944 <alt_load_section+0x48>
    {
      *to++ = *from++;
    d924:	e0bffe17 	ldw	r2,-8(fp)
    d928:	10c00104 	addi	r3,r2,4
    d92c:	e0fffe15 	stw	r3,-8(fp)
    d930:	e0fffd17 	ldw	r3,-12(fp)
    d934:	19000104 	addi	r4,r3,4
    d938:	e13ffd15 	stw	r4,-12(fp)
    d93c:	18c00017 	ldw	r3,0(r3)
    d940:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
    d944:	e0fffe17 	ldw	r3,-8(fp)
    d948:	e0bfff17 	ldw	r2,-4(fp)
    d94c:	18bff51e 	bne	r3,r2,d924 <__alt_data_end+0xfffdd924>
    {
      *to++ = *from++;
    }
  }
}
    d950:	0001883a 	nop
    d954:	e037883a 	mov	sp,fp
    d958:	df000017 	ldw	fp,0(sp)
    d95c:	dec00104 	addi	sp,sp,4
    d960:	f800283a 	ret

0000d964 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
    d964:	defffe04 	addi	sp,sp,-8
    d968:	dfc00115 	stw	ra,4(sp)
    d96c:	df000015 	stw	fp,0(sp)
    d970:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
    d974:	018000b4 	movhi	r6,2
    d978:	31a6d404 	addi	r6,r6,-25776
    d97c:	01400074 	movhi	r5,1
    d980:	295ff704 	addi	r5,r5,32732
    d984:	010000b4 	movhi	r4,2
    d988:	2126d404 	addi	r4,r4,-25776
    d98c:	000d8fc0 	call	d8fc <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
    d990:	01800034 	movhi	r6,0
    d994:	31807004 	addi	r6,r6,448
    d998:	01400034 	movhi	r5,0
    d99c:	29400804 	addi	r5,r5,32
    d9a0:	01000034 	movhi	r4,0
    d9a4:	21000804 	addi	r4,r4,32
    d9a8:	000d8fc0 	call	d8fc <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
    d9ac:	01800074 	movhi	r6,1
    d9b0:	319ff704 	addi	r6,r6,32732
    d9b4:	01400074 	movhi	r5,1
    d9b8:	295ee504 	addi	r5,r5,31636
    d9bc:	01000074 	movhi	r4,1
    d9c0:	211ee504 	addi	r4,r4,31636
    d9c4:	000d8fc0 	call	d8fc <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
    d9c8:	0016a900 	call	16a90 <alt_dcache_flush_all>
  alt_icache_flush_all();
    d9cc:	0016c500 	call	16c50 <alt_icache_flush_all>
}
    d9d0:	0001883a 	nop
    d9d4:	e037883a 	mov	sp,fp
    d9d8:	dfc00117 	ldw	ra,4(sp)
    d9dc:	df000017 	ldw	fp,0(sp)
    d9e0:	dec00204 	addi	sp,sp,8
    d9e4:	f800283a 	ret

0000d9e8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    d9e8:	defffe04 	addi	sp,sp,-8
    d9ec:	dfc00115 	stw	ra,4(sp)
    d9f0:	df000015 	stw	fp,0(sp)
    d9f4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    d9f8:	d0a00b17 	ldw	r2,-32724(gp)
    d9fc:	10000326 	beq	r2,zero,da0c <alt_get_errno+0x24>
    da00:	d0a00b17 	ldw	r2,-32724(gp)
    da04:	103ee83a 	callr	r2
    da08:	00000106 	br	da10 <alt_get_errno+0x28>
    da0c:	d0a71604 	addi	r2,gp,-25512
}
    da10:	e037883a 	mov	sp,fp
    da14:	dfc00117 	ldw	ra,4(sp)
    da18:	df000017 	ldw	fp,0(sp)
    da1c:	dec00204 	addi	sp,sp,8
    da20:	f800283a 	ret

0000da24 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
    da24:	defff904 	addi	sp,sp,-28
    da28:	dfc00615 	stw	ra,24(sp)
    da2c:	df000515 	stw	fp,20(sp)
    da30:	df000504 	addi	fp,sp,20
    da34:	e13ffd15 	stw	r4,-12(fp)
    da38:	e17ffe15 	stw	r5,-8(fp)
    da3c:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
    da40:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    da44:	e0bffd17 	ldw	r2,-12(fp)
    da48:	10000816 	blt	r2,zero,da6c <lseek+0x48>
    da4c:	01400304 	movi	r5,12
    da50:	e13ffd17 	ldw	r4,-12(fp)
    da54:	000aa740 	call	aa74 <__mulsi3>
    da58:	1007883a 	mov	r3,r2
    da5c:	008000b4 	movhi	r2,2
    da60:	10a22a04 	addi	r2,r2,-30552
    da64:	1885883a 	add	r2,r3,r2
    da68:	00000106 	br	da70 <lseek+0x4c>
    da6c:	0005883a 	mov	r2,zero
    da70:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
    da74:	e0bffc17 	ldw	r2,-16(fp)
    da78:	10001026 	beq	r2,zero,dabc <lseek+0x98>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
    da7c:	e0bffc17 	ldw	r2,-16(fp)
    da80:	10800017 	ldw	r2,0(r2)
    da84:	10800717 	ldw	r2,28(r2)
    da88:	10000926 	beq	r2,zero,dab0 <lseek+0x8c>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
    da8c:	e0bffc17 	ldw	r2,-16(fp)
    da90:	10800017 	ldw	r2,0(r2)
    da94:	10800717 	ldw	r2,28(r2)
    da98:	e1bfff17 	ldw	r6,-4(fp)
    da9c:	e17ffe17 	ldw	r5,-8(fp)
    daa0:	e13ffc17 	ldw	r4,-16(fp)
    daa4:	103ee83a 	callr	r2
    daa8:	e0bffb15 	stw	r2,-20(fp)
    daac:	00000506 	br	dac4 <lseek+0xa0>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
    dab0:	00bfde84 	movi	r2,-134
    dab4:	e0bffb15 	stw	r2,-20(fp)
    dab8:	00000206 	br	dac4 <lseek+0xa0>
    }
  }
  else  
  {
    rc = -EBADFD;
    dabc:	00bfebc4 	movi	r2,-81
    dac0:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
    dac4:	e0bffb17 	ldw	r2,-20(fp)
    dac8:	1000070e 	bge	r2,zero,dae8 <lseek+0xc4>
  {
    ALT_ERRNO = -rc;
    dacc:	000d9e80 	call	d9e8 <alt_get_errno>
    dad0:	1007883a 	mov	r3,r2
    dad4:	e0bffb17 	ldw	r2,-20(fp)
    dad8:	0085c83a 	sub	r2,zero,r2
    dadc:	18800015 	stw	r2,0(r3)
    rc = -1;
    dae0:	00bfffc4 	movi	r2,-1
    dae4:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
    dae8:	e0bffb17 	ldw	r2,-20(fp)
}
    daec:	e037883a 	mov	sp,fp
    daf0:	dfc00117 	ldw	ra,4(sp)
    daf4:	df000017 	ldw	fp,0(sp)
    daf8:	dec00204 	addi	sp,sp,8
    dafc:	f800283a 	ret

0000db00 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    db00:	defff904 	addi	sp,sp,-28
    db04:	dfc00615 	stw	ra,24(sp)
    db08:	df000515 	stw	fp,20(sp)
    db0c:	df000504 	addi	fp,sp,20
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    db10:	0009883a 	mov	r4,zero
    db14:	0015aa80 	call	15aa8 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
    db18:	000eaec0 	call	eaec <OSInit>
    db1c:	01000044 	movi	r4,1
    db20:	00134480 	call	13448 <OSSemCreate>
    db24:	d0a71d15 	stw	r2,-25484(gp)
    db28:	01000044 	movi	r4,1
    db2c:	00134480 	call	13448 <OSSemCreate>
    db30:	d0a71f15 	stw	r2,-25476(gp)
    db34:	d0a71704 	addi	r2,gp,-25508
    db38:	e0bffc15 	stw	r2,-16(fp)
    db3c:	00800044 	movi	r2,1
    db40:	e0bffd0d 	sth	r2,-12(fp)
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sem_create (OS_EVENT** sem, 
              INT16U value)
{
  *sem = OSSemCreate (value);
    db44:	e0bffd0b 	ldhu	r2,-12(fp)
    db48:	1009883a 	mov	r4,r2
    db4c:	00134480 	call	13448 <OSSemCreate>
    db50:	1007883a 	mov	r3,r2
    db54:	e0bffc17 	ldw	r2,-16(fp)
    db58:	10c00015 	stw	r3,0(r2)
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
    db5c:	0015ae00 	call	15ae0 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
    db60:	01800074 	movhi	r6,1
    db64:	319fa804 	addi	r6,r6,32416
    db68:	01400074 	movhi	r5,1
    db6c:	295fa804 	addi	r5,r5,32416
    db70:	01000074 	movhi	r4,1
    db74:	211fa804 	addi	r4,r4,32416
    db78:	0016d540 	call	16d54 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
    db7c:	0016b900 	call	16b90 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
    db80:	01000074 	movhi	r4,1
    db84:	211afc04 	addi	r4,r4,27632
    db88:	00178000 	call	17800 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
    db8c:	d0a71917 	ldw	r2,-25500(gp)
    db90:	d0e71a17 	ldw	r3,-25496(gp)
    db94:	d1271b17 	ldw	r4,-25492(gp)
    db98:	200d883a 	mov	r6,r4
    db9c:	180b883a 	mov	r5,r3
    dba0:	1009883a 	mov	r4,r2
    dba4:	00004280 	call	428 <main>
    dba8:	e0bffb15 	stw	r2,-20(fp)
  close(STDOUT_FILENO);
    dbac:	01000044 	movi	r4,1
    dbb0:	000d37c0 	call	d37c <close>
  exit (result);
    dbb4:	e13ffb17 	ldw	r4,-20(fp)
    dbb8:	00178140 	call	17814 <exit>

0000dbbc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    dbbc:	defffe04 	addi	sp,sp,-8
    dbc0:	dfc00115 	stw	ra,4(sp)
    dbc4:	df000015 	stw	fp,0(sp)
    dbc8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    dbcc:	d0a00b17 	ldw	r2,-32724(gp)
    dbd0:	10000326 	beq	r2,zero,dbe0 <alt_get_errno+0x24>
    dbd4:	d0a00b17 	ldw	r2,-32724(gp)
    dbd8:	103ee83a 	callr	r2
    dbdc:	00000106 	br	dbe4 <alt_get_errno+0x28>
    dbe0:	d0a71604 	addi	r2,gp,-25512
}
    dbe4:	e037883a 	mov	sp,fp
    dbe8:	dfc00117 	ldw	ra,4(sp)
    dbec:	df000017 	ldw	fp,0(sp)
    dbf0:	dec00204 	addi	sp,sp,8
    dbf4:	f800283a 	ret

0000dbf8 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
    dbf8:	defff904 	addi	sp,sp,-28
    dbfc:	dfc00615 	stw	ra,24(sp)
    dc00:	df000515 	stw	fp,20(sp)
    dc04:	df000504 	addi	fp,sp,20
    dc08:	e13ffd15 	stw	r4,-12(fp)
    dc0c:	e17ffe15 	stw	r5,-8(fp)
    dc10:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    dc14:	e0bffd17 	ldw	r2,-12(fp)
    dc18:	10000816 	blt	r2,zero,dc3c <read+0x44>
    dc1c:	01400304 	movi	r5,12
    dc20:	e13ffd17 	ldw	r4,-12(fp)
    dc24:	000aa740 	call	aa74 <__mulsi3>
    dc28:	1007883a 	mov	r3,r2
    dc2c:	008000b4 	movhi	r2,2
    dc30:	10a22a04 	addi	r2,r2,-30552
    dc34:	1885883a 	add	r2,r3,r2
    dc38:	00000106 	br	dc40 <read+0x48>
    dc3c:	0005883a 	mov	r2,zero
    dc40:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
    dc44:	e0bffb17 	ldw	r2,-20(fp)
    dc48:	10002226 	beq	r2,zero,dcd4 <read+0xdc>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
    dc4c:	e0bffb17 	ldw	r2,-20(fp)
    dc50:	10800217 	ldw	r2,8(r2)
    dc54:	108000cc 	andi	r2,r2,3
    dc58:	10800060 	cmpeqi	r2,r2,1
    dc5c:	1000181e 	bne	r2,zero,dcc0 <read+0xc8>
        (fd->dev->read))
    dc60:	e0bffb17 	ldw	r2,-20(fp)
    dc64:	10800017 	ldw	r2,0(r2)
    dc68:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
    dc6c:	10001426 	beq	r2,zero,dcc0 <read+0xc8>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
    dc70:	e0bffb17 	ldw	r2,-20(fp)
    dc74:	10800017 	ldw	r2,0(r2)
    dc78:	10800517 	ldw	r2,20(r2)
    dc7c:	e0ffff17 	ldw	r3,-4(fp)
    dc80:	180d883a 	mov	r6,r3
    dc84:	e17ffe17 	ldw	r5,-8(fp)
    dc88:	e13ffb17 	ldw	r4,-20(fp)
    dc8c:	103ee83a 	callr	r2
    dc90:	e0bffc15 	stw	r2,-16(fp)
    dc94:	e0bffc17 	ldw	r2,-16(fp)
    dc98:	1000070e 	bge	r2,zero,dcb8 <read+0xc0>
        {
          ALT_ERRNO = -rval;
    dc9c:	000dbbc0 	call	dbbc <alt_get_errno>
    dca0:	1007883a 	mov	r3,r2
    dca4:	e0bffc17 	ldw	r2,-16(fp)
    dca8:	0085c83a 	sub	r2,zero,r2
    dcac:	18800015 	stw	r2,0(r3)
          return -1;
    dcb0:	00bfffc4 	movi	r2,-1
    dcb4:	00000c06 	br	dce8 <read+0xf0>
        }
        return rval;
    dcb8:	e0bffc17 	ldw	r2,-16(fp)
    dcbc:	00000a06 	br	dce8 <read+0xf0>
      }
      else
      {
        ALT_ERRNO = EACCES;
    dcc0:	000dbbc0 	call	dbbc <alt_get_errno>
    dcc4:	1007883a 	mov	r3,r2
    dcc8:	00800344 	movi	r2,13
    dccc:	18800015 	stw	r2,0(r3)
    dcd0:	00000406 	br	dce4 <read+0xec>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
    dcd4:	000dbbc0 	call	dbbc <alt_get_errno>
    dcd8:	1007883a 	mov	r3,r2
    dcdc:	00801444 	movi	r2,81
    dce0:	18800015 	stw	r2,0(r3)
  }
  return -1;
    dce4:	00bfffc4 	movi	r2,-1
}
    dce8:	e037883a 	mov	sp,fp
    dcec:	dfc00117 	ldw	ra,4(sp)
    dcf0:	df000017 	ldw	fp,0(sp)
    dcf4:	dec00204 	addi	sp,sp,8
    dcf8:	f800283a 	ret

0000dcfc <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
    dcfc:	defffc04 	addi	sp,sp,-16
    dd00:	dfc00315 	stw	ra,12(sp)
    dd04:	df000215 	stw	fp,8(sp)
    dd08:	dc000115 	stw	r16,4(sp)
    dd0c:	df000204 	addi	fp,sp,8
    dd10:	e13ffe15 	stw	r4,-8(fp)
  if (fd > 2)
    dd14:	e0bffe17 	ldw	r2,-8(fp)
    dd18:	108000d0 	cmplti	r2,r2,3
    dd1c:	1000111e 	bne	r2,zero,dd64 <alt_release_fd+0x68>
  {
    alt_fd_list[fd].fd_flags = 0;
    dd20:	040000b4 	movhi	r16,2
    dd24:	84222a04 	addi	r16,r16,-30552
    dd28:	e0bffe17 	ldw	r2,-8(fp)
    dd2c:	01400304 	movi	r5,12
    dd30:	1009883a 	mov	r4,r2
    dd34:	000aa740 	call	aa74 <__mulsi3>
    dd38:	8085883a 	add	r2,r16,r2
    dd3c:	10800204 	addi	r2,r2,8
    dd40:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
    dd44:	040000b4 	movhi	r16,2
    dd48:	84222a04 	addi	r16,r16,-30552
    dd4c:	e0bffe17 	ldw	r2,-8(fp)
    dd50:	01400304 	movi	r5,12
    dd54:	1009883a 	mov	r4,r2
    dd58:	000aa740 	call	aa74 <__mulsi3>
    dd5c:	8085883a 	add	r2,r16,r2
    dd60:	10000015 	stw	zero,0(r2)
  }
}
    dd64:	0001883a 	nop
    dd68:	e6ffff04 	addi	sp,fp,-4
    dd6c:	dfc00217 	ldw	ra,8(sp)
    dd70:	df000117 	ldw	fp,4(sp)
    dd74:	dc000017 	ldw	r16,0(sp)
    dd78:	dec00304 	addi	sp,sp,12
    dd7c:	f800283a 	ret

0000dd80 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
    dd80:	defff904 	addi	sp,sp,-28
    dd84:	df000615 	stw	fp,24(sp)
    dd88:	df000604 	addi	fp,sp,24
    dd8c:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    dd90:	0005303a 	rdctl	r2,status
    dd94:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    dd98:	e0fffe17 	ldw	r3,-8(fp)
    dd9c:	00bfff84 	movi	r2,-2
    dda0:	1884703a 	and	r2,r3,r2
    dda4:	1001703a 	wrctl	status,r2
  
  return context;
    dda8:	e0bffe17 	ldw	r2,-8(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
    ddac:	e0bffb15 	stw	r2,-20(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
    ddb0:	d0a00d17 	ldw	r2,-32716(gp)
    ddb4:	10c000c4 	addi	r3,r2,3
    ddb8:	00bfff04 	movi	r2,-4
    ddbc:	1884703a 	and	r2,r3,r2
    ddc0:	d0a00d15 	stw	r2,-32716(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
    ddc4:	d0e00d17 	ldw	r3,-32716(gp)
    ddc8:	e0bfff17 	ldw	r2,-4(fp)
    ddcc:	1887883a 	add	r3,r3,r2
    ddd0:	008000f4 	movhi	r2,3
    ddd4:	10800004 	addi	r2,r2,0
    ddd8:	10c0062e 	bgeu	r2,r3,ddf4 <sbrk+0x74>
    dddc:	e0bffb17 	ldw	r2,-20(fp)
    dde0:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    dde4:	e0bffa17 	ldw	r2,-24(fp)
    dde8:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
    ddec:	00bfffc4 	movi	r2,-1
    ddf0:	00000b06 	br	de20 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
    ddf4:	d0a00d17 	ldw	r2,-32716(gp)
    ddf8:	e0bffd15 	stw	r2,-12(fp)
  heap_end += incr; 
    ddfc:	d0e00d17 	ldw	r3,-32716(gp)
    de00:	e0bfff17 	ldw	r2,-4(fp)
    de04:	1885883a 	add	r2,r3,r2
    de08:	d0a00d15 	stw	r2,-32716(gp)
    de0c:	e0bffb17 	ldw	r2,-20(fp)
    de10:	e0bffc15 	stw	r2,-16(fp)
    de14:	e0bffc17 	ldw	r2,-16(fp)
    de18:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
    de1c:	e0bffd17 	ldw	r2,-12(fp)
} 
    de20:	e037883a 	mov	sp,fp
    de24:	df000017 	ldw	fp,0(sp)
    de28:	dec00104 	addi	sp,sp,4
    de2c:	f800283a 	ret

0000de30 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    de30:	defffe04 	addi	sp,sp,-8
    de34:	dfc00115 	stw	ra,4(sp)
    de38:	df000015 	stw	fp,0(sp)
    de3c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    de40:	d0a00b17 	ldw	r2,-32724(gp)
    de44:	10000326 	beq	r2,zero,de54 <alt_get_errno+0x24>
    de48:	d0a00b17 	ldw	r2,-32724(gp)
    de4c:	103ee83a 	callr	r2
    de50:	00000106 	br	de58 <alt_get_errno+0x28>
    de54:	d0a71604 	addi	r2,gp,-25512
}
    de58:	e037883a 	mov	sp,fp
    de5c:	dfc00117 	ldw	ra,4(sp)
    de60:	df000017 	ldw	fp,0(sp)
    de64:	dec00204 	addi	sp,sp,8
    de68:	f800283a 	ret

0000de6c <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
    de6c:	defff904 	addi	sp,sp,-28
    de70:	dfc00615 	stw	ra,24(sp)
    de74:	df000515 	stw	fp,20(sp)
    de78:	df000504 	addi	fp,sp,20
    de7c:	e13ffd15 	stw	r4,-12(fp)
    de80:	e17ffe15 	stw	r5,-8(fp)
    de84:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    de88:	e0bffd17 	ldw	r2,-12(fp)
    de8c:	10000816 	blt	r2,zero,deb0 <write+0x44>
    de90:	01400304 	movi	r5,12
    de94:	e13ffd17 	ldw	r4,-12(fp)
    de98:	000aa740 	call	aa74 <__mulsi3>
    de9c:	1007883a 	mov	r3,r2
    dea0:	008000b4 	movhi	r2,2
    dea4:	10a22a04 	addi	r2,r2,-30552
    dea8:	1885883a 	add	r2,r3,r2
    deac:	00000106 	br	deb4 <write+0x48>
    deb0:	0005883a 	mov	r2,zero
    deb4:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
    deb8:	e0bffb17 	ldw	r2,-20(fp)
    debc:	10002126 	beq	r2,zero,df44 <write+0xd8>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
    dec0:	e0bffb17 	ldw	r2,-20(fp)
    dec4:	10800217 	ldw	r2,8(r2)
    dec8:	108000cc 	andi	r2,r2,3
    decc:	10001826 	beq	r2,zero,df30 <write+0xc4>
    ded0:	e0bffb17 	ldw	r2,-20(fp)
    ded4:	10800017 	ldw	r2,0(r2)
    ded8:	10800617 	ldw	r2,24(r2)
    dedc:	10001426 	beq	r2,zero,df30 <write+0xc4>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
    dee0:	e0bffb17 	ldw	r2,-20(fp)
    dee4:	10800017 	ldw	r2,0(r2)
    dee8:	10800617 	ldw	r2,24(r2)
    deec:	e0ffff17 	ldw	r3,-4(fp)
    def0:	180d883a 	mov	r6,r3
    def4:	e17ffe17 	ldw	r5,-8(fp)
    def8:	e13ffb17 	ldw	r4,-20(fp)
    defc:	103ee83a 	callr	r2
    df00:	e0bffc15 	stw	r2,-16(fp)
    df04:	e0bffc17 	ldw	r2,-16(fp)
    df08:	1000070e 	bge	r2,zero,df28 <write+0xbc>
      {
        ALT_ERRNO = -rval;
    df0c:	000de300 	call	de30 <alt_get_errno>
    df10:	1007883a 	mov	r3,r2
    df14:	e0bffc17 	ldw	r2,-16(fp)
    df18:	0085c83a 	sub	r2,zero,r2
    df1c:	18800015 	stw	r2,0(r3)
        return -1;
    df20:	00bfffc4 	movi	r2,-1
    df24:	00000c06 	br	df58 <write+0xec>
      }
      return rval;
    df28:	e0bffc17 	ldw	r2,-16(fp)
    df2c:	00000a06 	br	df58 <write+0xec>
    }
    else
    {
      ALT_ERRNO = EACCES;
    df30:	000de300 	call	de30 <alt_get_errno>
    df34:	1007883a 	mov	r3,r2
    df38:	00800344 	movi	r2,13
    df3c:	18800015 	stw	r2,0(r3)
    df40:	00000406 	br	df54 <write+0xe8>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
    df44:	000de300 	call	de30 <alt_get_errno>
    df48:	1007883a 	mov	r3,r2
    df4c:	00801444 	movi	r2,81
    df50:	18800015 	stw	r2,0(r3)
  }
  return -1;
    df54:	00bfffc4 	movi	r2,-1
}
    df58:	e037883a 	mov	sp,fp
    df5c:	dfc00117 	ldw	ra,4(sp)
    df60:	df000017 	ldw	fp,0(sp)
    df64:	dec00204 	addi	sp,sp,8
    df68:	f800283a 	ret

0000df6c <__env_lock>:
/*
 *
 */

void __env_lock ( struct _reent *_r )
{
    df6c:	deffdf04 	addi	sp,sp,-132
    df70:	dfc02015 	stw	ra,128(sp)
    df74:	df001f15 	stw	fp,124(sp)
    df78:	df001f04 	addi	fp,sp,124
    df7c:	e13fff15 	stw	r4,-4(fp)
  INT8U err;
  int id;

  /* use our priority as a task id */

  err = OSTaskQuery( OS_PRIO_SELF, &tcb );
    df80:	e0bfe204 	addi	r2,fp,-120
    df84:	100b883a 	mov	r5,r2
    df88:	01003fc4 	movi	r4,255
    df8c:	00153d00 	call	153d0 <OSTaskQuery>
    df90:	e0bffe85 	stb	r2,-6(fp)
  if (err != OS_NO_ERR)
    df94:	e0bffe83 	ldbu	r2,-6(fp)
    df98:	10803fcc 	andi	r2,r2,255
    df9c:	10001e1e 	bne	r2,zero,e018 <__env_lock+0xac>
    return;

  id = tcb.OSTCBPrio;
    dfa0:	e0bfee83 	ldbu	r2,-70(fp)
    dfa4:	10803fcc 	andi	r2,r2,255
    dfa8:	e0bfe115 	stw	r2,-124(fp)
   
  /* see if we own the environment already */

  OSSemQuery( alt_envsem, &semdata );
    dfac:	d0a71d17 	ldw	r2,-25484(gp)
    dfb0:	e0fffd04 	addi	r3,fp,-12
    dfb4:	180b883a 	mov	r5,r3
    dfb8:	1009883a 	mov	r4,r2
    dfbc:	0013be80 	call	13be8 <OSSemQuery>
  if( semdata.OSEventGrp && id == lockid ) 
    dfc0:	e0bffe43 	ldbu	r2,-7(fp)
    dfc4:	10803fcc 	andi	r2,r2,255
    dfc8:	10000726 	beq	r2,zero,dfe8 <__env_lock+0x7c>
    dfcc:	d0a00e17 	ldw	r2,-32712(gp)
    dfd0:	e0ffe117 	ldw	r3,-124(fp)
    dfd4:	1880041e 	bne	r3,r2,dfe8 <__env_lock+0x7c>
  {
    /* we do; just count the recursion */

    locks++;
    dfd8:	d0a71c17 	ldw	r2,-25488(gp)
    dfdc:	10800044 	addi	r2,r2,1
    dfe0:	d0a71c15 	stw	r2,-25488(gp)
    dfe4:	00000a06 	br	e010 <__env_lock+0xa4>
  }
  else 
  {
    /* wait on the other task to yield, then claim ownership */

    OSSemPend( alt_envsem, 0, &err );
    dfe8:	d0a71d17 	ldw	r2,-25484(gp)
    dfec:	e0fffe84 	addi	r3,fp,-6
    dff0:	180d883a 	mov	r6,r3
    dff4:	000b883a 	mov	r5,zero
    dff8:	1009883a 	mov	r4,r2
    dffc:	00137600 	call	13760 <OSSemPend>
    locks  = 1;
    e000:	00800044 	movi	r2,1
    e004:	d0a71c15 	stw	r2,-25488(gp)
    lockid = id;
    e008:	e0bfe117 	ldw	r2,-124(fp)
    e00c:	d0a00e15 	stw	r2,-32712(gp)
  }

#endif /* OS_THREAD_SAFE_NEWLIB */
  return;
    e010:	0001883a 	nop
    e014:	00000106 	br	e01c <__env_lock+0xb0>

  /* use our priority as a task id */

  err = OSTaskQuery( OS_PRIO_SELF, &tcb );
  if (err != OS_NO_ERR)
    return;
    e018:	0001883a 	nop
    lockid = id;
  }

#endif /* OS_THREAD_SAFE_NEWLIB */
  return;
}
    e01c:	e037883a 	mov	sp,fp
    e020:	dfc00117 	ldw	ra,4(sp)
    e024:	df000017 	ldw	fp,0(sp)
    e028:	dec00204 	addi	sp,sp,8
    e02c:	f800283a 	ret

0000e030 <__env_unlock>:
/*
 *
 */

void __env_unlock ( struct _reent *_r )
{
    e030:	defffd04 	addi	sp,sp,-12
    e034:	dfc00215 	stw	ra,8(sp)
    e038:	df000115 	stw	fp,4(sp)
    e03c:	df000104 	addi	fp,sp,4
    e040:	e13fff15 	stw	r4,-4(fp)
#if OS_THREAD_SAFE_NEWLIB
  if (locks == 0)
    e044:	d0a71c17 	ldw	r2,-25488(gp)
    e048:	10000b26 	beq	r2,zero,e078 <__env_unlock+0x48>
   /* 
    * release the environment once the number of locks == the number 
    * of unlocks 
    */

  if( (--locks) == 0 ) 
    e04c:	d0a71c17 	ldw	r2,-25488(gp)
    e050:	10bfffc4 	addi	r2,r2,-1
    e054:	d0a71c15 	stw	r2,-25488(gp)
    e058:	d0a71c17 	ldw	r2,-25488(gp)
    e05c:	1000071e 	bne	r2,zero,e07c <__env_unlock+0x4c>
  {
    lockid = -1;
    e060:	00bfffc4 	movi	r2,-1
    e064:	d0a00e15 	stw	r2,-32712(gp)
    OSSemPost( alt_envsem );
    e068:	d0a71d17 	ldw	r2,-25484(gp)
    e06c:	1009883a 	mov	r4,r2
    e070:	0013ad80 	call	13ad8 <OSSemPost>
    e074:	00000106 	br	e07c <__env_unlock+0x4c>

void __env_unlock ( struct _reent *_r )
{
#if OS_THREAD_SAFE_NEWLIB
  if (locks == 0)
    return;
    e078:	0001883a 	nop
  {
    lockid = -1;
    OSSemPost( alt_envsem );
  }
#endif /* OS_THREAD_SAFE_NEWLIB */
}
    e07c:	e037883a 	mov	sp,fp
    e080:	dfc00117 	ldw	ra,4(sp)
    e084:	df000017 	ldw	fp,0(sp)
    e088:	dec00204 	addi	sp,sp,8
    e08c:	f800283a 	ret

0000e090 <__malloc_lock>:
/*
 *
 */

void __malloc_lock ( struct _reent *_r )
{
    e090:	deffdb04 	addi	sp,sp,-148
    e094:	dfc02415 	stw	ra,144(sp)
    e098:	df002315 	stw	fp,140(sp)
    e09c:	df002304 	addi	fp,sp,140
    e0a0:	e13fff15 	stw	r4,-4(fp)
  OS_TCB tcb;
  OS_SEM_DATA semdata;
  INT8U err;
  int id;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    e0a4:	e03fdd15 	stw	zero,-140(fp)
#endif  
  
  if (OSRunning != OS_TRUE)
    e0a8:	d0a72043 	ldbu	r2,-25471(gp)
    e0ac:	10803fcc 	andi	r2,r2,255
    e0b0:	10800060 	cmpeqi	r2,r2,1
    e0b4:	10003626 	beq	r2,zero,e190 <__malloc_lock+0x100>
      return;

  /* use our priority as a task id */

  err = OSTaskQuery( OS_PRIO_SELF, &tcb );
    e0b8:	e0bfe204 	addi	r2,fp,-120
    e0bc:	100b883a 	mov	r5,r2
    e0c0:	01003fc4 	movi	r4,255
    e0c4:	00153d00 	call	153d0 <OSTaskQuery>
    e0c8:	e0bffe85 	stb	r2,-6(fp)
  if (err != OS_NO_ERR)
    e0cc:	e0bffe83 	ldbu	r2,-6(fp)
    e0d0:	10803fcc 	andi	r2,r2,255
    e0d4:	1000301e 	bne	r2,zero,e198 <__malloc_lock+0x108>
    return;

  id = tcb.OSTCBPrio;
    e0d8:	e0bfee83 	ldbu	r2,-70(fp)
    e0dc:	10803fcc 	andi	r2,r2,255
    e0e0:	e0bfde15 	stw	r2,-136(fp)
   
  /* see if we own the heap already */

  OSSemQuery( alt_heapsem, &semdata );
    e0e4:	d0a71f17 	ldw	r2,-25476(gp)
    e0e8:	e0fffd04 	addi	r3,fp,-12
    e0ec:	180b883a 	mov	r5,r3
    e0f0:	1009883a 	mov	r4,r2
    e0f4:	0013be80 	call	13be8 <OSSemQuery>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    e0f8:	0005303a 	rdctl	r2,status
    e0fc:	e0bfe115 	stw	r2,-124(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    e100:	e0ffe117 	ldw	r3,-124(fp)
    e104:	00bfff84 	movi	r2,-2
    e108:	1884703a 	and	r2,r3,r2
    e10c:	1001703a 	wrctl	status,r2
  
  return context;
    e110:	e0bfe117 	ldw	r2,-124(fp)
  
  OS_ENTER_CRITICAL();
    e114:	e0bfdd15 	stw	r2,-140(fp)

  if( !semdata.OSCnt && id == lockid ) 
    e118:	e0bffd0b 	ldhu	r2,-12(fp)
    e11c:	10bfffcc 	andi	r2,r2,65535
    e120:	10000b1e 	bne	r2,zero,e150 <__malloc_lock+0xc0>
    e124:	d0a00f17 	ldw	r2,-32708(gp)
    e128:	e0ffde17 	ldw	r3,-136(fp)
    e12c:	1880081e 	bne	r3,r2,e150 <__malloc_lock+0xc0>
  {
    /* we do; just count the recursion */
    locks++;
    e130:	d0a71e17 	ldw	r2,-25480(gp)
    e134:	10800044 	addi	r2,r2,1
    e138:	d0a71e15 	stw	r2,-25480(gp)
    e13c:	e0bfdd17 	ldw	r2,-140(fp)
    e140:	e0bfdf15 	stw	r2,-132(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    e144:	e0bfdf17 	ldw	r2,-132(fp)
    e148:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    e14c:	00000e06 	br	e188 <__malloc_lock+0xf8>
    e150:	e0bfdd17 	ldw	r2,-140(fp)
    e154:	e0bfe015 	stw	r2,-128(fp)
    e158:	e0bfe017 	ldw	r2,-128(fp)
    e15c:	1001703a 	wrctl	status,r2
  else 
  {
    /* wait on the other task to yield the heap, then claim ownership of it */
    OS_EXIT_CRITICAL();

    OSSemPend( alt_heapsem, 0, &err );
    e160:	d0a71f17 	ldw	r2,-25476(gp)
    e164:	e0fffe84 	addi	r3,fp,-6
    e168:	180d883a 	mov	r6,r3
    e16c:	000b883a 	mov	r5,zero
    e170:	1009883a 	mov	r4,r2
    e174:	00137600 	call	13760 <OSSemPend>
    locks  = 1;
    e178:	00800044 	movi	r2,1
    e17c:	d0a71e15 	stw	r2,-25480(gp)
    lockid = id;
    e180:	e0bfde17 	ldw	r2,-136(fp)
    e184:	d0a00f15 	stw	r2,-32708(gp)
  }

#endif /* OS_THREAD_SAFE_NEWLIB */
  return;
    e188:	0001883a 	nop
    e18c:	00000306 	br	e19c <__malloc_lock+0x10c>
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
#endif  
  
  if (OSRunning != OS_TRUE)
      return;
    e190:	0001883a 	nop
    e194:	00000106 	br	e19c <__malloc_lock+0x10c>

  /* use our priority as a task id */

  err = OSTaskQuery( OS_PRIO_SELF, &tcb );
  if (err != OS_NO_ERR)
    return;
    e198:	0001883a 	nop
    lockid = id;
  }

#endif /* OS_THREAD_SAFE_NEWLIB */
  return;
}
    e19c:	e037883a 	mov	sp,fp
    e1a0:	dfc00117 	ldw	ra,4(sp)
    e1a4:	df000017 	ldw	fp,0(sp)
    e1a8:	dec00204 	addi	sp,sp,8
    e1ac:	f800283a 	ret

0000e1b0 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
    e1b0:	defff804 	addi	sp,sp,-32
    e1b4:	dfc00715 	stw	ra,28(sp)
    e1b8:	df000615 	stw	fp,24(sp)
    e1bc:	df000604 	addi	fp,sp,24
    e1c0:	e13fff15 	stw	r4,-4(fp)
#if OS_THREAD_SAFE_NEWLIB

#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    e1c4:	e03ffa15 	stw	zero,-24(fp)
#endif 

  if (OSRunning != OS_TRUE)
    e1c8:	d0a72043 	ldbu	r2,-25471(gp)
    e1cc:	10803fcc 	andi	r2,r2,255
    e1d0:	10800060 	cmpeqi	r2,r2,1
    e1d4:	10002326 	beq	r2,zero,e264 <__malloc_unlock+0xb4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    e1d8:	0005303a 	rdctl	r2,status
    e1dc:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    e1e0:	e0fffe17 	ldw	r3,-8(fp)
    e1e4:	00bfff84 	movi	r2,-2
    e1e8:	1884703a 	and	r2,r3,r2
    e1ec:	1001703a 	wrctl	status,r2
  
  return context;
    e1f0:	e0bffe17 	ldw	r2,-8(fp)
      return;

  OS_ENTER_CRITICAL();
    e1f4:	e0bffa15 	stw	r2,-24(fp)
  if (locks == 0)
    e1f8:	d0a71e17 	ldw	r2,-25480(gp)
    e1fc:	1000051e 	bne	r2,zero,e214 <__malloc_unlock+0x64>
    e200:	e0bffa17 	ldw	r2,-24(fp)
    e204:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    e208:	e0bffb17 	ldw	r2,-20(fp)
    e20c:	1001703a 	wrctl	status,r2
  {
      OS_EXIT_CRITICAL();
      return;
    e210:	00001506 	br	e268 <__malloc_unlock+0xb8>
  }

  /* release the heap once the number of locks == the number of unlocks */
  if( (--locks) == 0 ) 
    e214:	d0a71e17 	ldw	r2,-25480(gp)
    e218:	10bfffc4 	addi	r2,r2,-1
    e21c:	d0a71e15 	stw	r2,-25480(gp)
    e220:	d0a71e17 	ldw	r2,-25480(gp)
    e224:	10000a1e 	bne	r2,zero,e250 <__malloc_unlock+0xa0>
  {
    lockid = -1;
    e228:	00bfffc4 	movi	r2,-1
    e22c:	d0a00f15 	stw	r2,-32708(gp)
    e230:	e0bffa17 	ldw	r2,-24(fp)
    e234:	e0bffc15 	stw	r2,-16(fp)
    e238:	e0bffc17 	ldw	r2,-16(fp)
    e23c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OSSemPost( alt_heapsem );
    e240:	d0a71f17 	ldw	r2,-25476(gp)
    e244:	1009883a 	mov	r4,r2
    e248:	0013ad80 	call	13ad8 <OSSemPost>
    e24c:	00000606 	br	e268 <__malloc_unlock+0xb8>
    e250:	e0bffa17 	ldw	r2,-24(fp)
    e254:	e0bffd15 	stw	r2,-12(fp)
    e258:	e0bffd17 	ldw	r2,-12(fp)
    e25c:	1001703a 	wrctl	status,r2
    e260:	00000106 	br	e268 <__malloc_unlock+0xb8>
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
#endif 

  if (OSRunning != OS_TRUE)
      return;
    e264:	0001883a 	nop
  {
      OS_EXIT_CRITICAL();
  }
  
#endif /* OS_THREAD_SAFE_NEWLIB */
}
    e268:	e037883a 	mov	sp,fp
    e26c:	dfc00117 	ldw	ra,4(sp)
    e270:	df000017 	ldw	fp,0(sp)
    e274:	dec00204 	addi	sp,sp,8
    e278:	f800283a 	ret

0000e27c <OSEventNameGet>:
*********************************************************************************************************
*/

#if (OS_EVENT_EN) && (OS_EVENT_NAME_SIZE > 1)
INT8U  OSEventNameGet (OS_EVENT *pevent, INT8U *pname, INT8U *perr)
{
    e27c:	defff704 	addi	sp,sp,-36
    e280:	dfc00815 	stw	ra,32(sp)
    e284:	df000715 	stw	fp,28(sp)
    e288:	df000704 	addi	fp,sp,28
    e28c:	e13ffd15 	stw	r4,-12(fp)
    e290:	e17ffe15 	stw	r5,-8(fp)
    e294:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    e298:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
    e29c:	e0bfff17 	ldw	r2,-4(fp)
    e2a0:	1000021e 	bne	r2,zero,e2ac <OSEventNameGet+0x30>
        return (0);
    e2a4:	0005883a 	mov	r2,zero
    e2a8:	00003706 	br	e388 <OSEventNameGet+0x10c>
    }
    if (pevent == (OS_EVENT *)0) {               /* Is 'pevent' a NULL pointer?                        */
    e2ac:	e0bffd17 	ldw	r2,-12(fp)
    e2b0:	1000051e 	bne	r2,zero,e2c8 <OSEventNameGet+0x4c>
        *perr = OS_ERR_PEVENT_NULL;
    e2b4:	e0bfff17 	ldw	r2,-4(fp)
    e2b8:	00c00104 	movi	r3,4
    e2bc:	10c00005 	stb	r3,0(r2)
        return (0);
    e2c0:	0005883a 	mov	r2,zero
    e2c4:	00003006 	br	e388 <OSEventNameGet+0x10c>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
    e2c8:	e0bffe17 	ldw	r2,-8(fp)
    e2cc:	1000051e 	bne	r2,zero,e2e4 <OSEventNameGet+0x68>
        *perr = OS_ERR_PNAME_NULL;
    e2d0:	e0bfff17 	ldw	r2,-4(fp)
    e2d4:	00c00304 	movi	r3,12
    e2d8:	10c00005 	stb	r3,0(r2)
        return (0);
    e2dc:	0005883a 	mov	r2,zero
    e2e0:	00002906 	br	e388 <OSEventNameGet+0x10c>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
    e2e4:	d0a72e03 	ldbu	r2,-25416(gp)
    e2e8:	10803fcc 	andi	r2,r2,255
    e2ec:	10000526 	beq	r2,zero,e304 <OSEventNameGet+0x88>
        *perr  = OS_ERR_NAME_GET_ISR;
    e2f0:	e0bfff17 	ldw	r2,-4(fp)
    e2f4:	00c00444 	movi	r3,17
    e2f8:	10c00005 	stb	r3,0(r2)
        return (0);
    e2fc:	0005883a 	mov	r2,zero
    e300:	00002106 	br	e388 <OSEventNameGet+0x10c>
    }
    switch (pevent->OSEventType) {
    e304:	e0bffd17 	ldw	r2,-12(fp)
    e308:	10800003 	ldbu	r2,0(r2)
    e30c:	10803fcc 	andi	r2,r2,255
    e310:	10bfffc4 	addi	r2,r2,-1
    e314:	10800128 	cmpgeui	r2,r2,4
    e318:	10000526 	beq	r2,zero,e330 <OSEventNameGet+0xb4>
        case OS_EVENT_TYPE_MBOX:
        case OS_EVENT_TYPE_Q:
             break;

        default:
             *perr = OS_ERR_EVENT_TYPE;
    e31c:	e0bfff17 	ldw	r2,-4(fp)
    e320:	00c00044 	movi	r3,1
    e324:	10c00005 	stb	r3,0(r2)
             return (0);
    e328:	0005883a 	mov	r2,zero
    e32c:	00001606 	br	e388 <OSEventNameGet+0x10c>
    switch (pevent->OSEventType) {
        case OS_EVENT_TYPE_SEM:
        case OS_EVENT_TYPE_MUTEX:
        case OS_EVENT_TYPE_MBOX:
        case OS_EVENT_TYPE_Q:
             break;
    e330:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    e334:	0005303a 	rdctl	r2,status
    e338:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    e33c:	e0fffb17 	ldw	r3,-20(fp)
    e340:	00bfff84 	movi	r2,-2
    e344:	1884703a 	and	r2,r3,r2
    e348:	1001703a 	wrctl	status,r2
  
  return context;
    e34c:	e0bffb17 	ldw	r2,-20(fp)

        default:
             *perr = OS_ERR_EVENT_TYPE;
             return (0);
    }
    OS_ENTER_CRITICAL();
    e350:	e0bff915 	stw	r2,-28(fp)
    len   = OS_StrCopy(pname, pevent->OSEventName);   /* Copy name from OS_EVENT                       */
    e354:	e0bffd17 	ldw	r2,-12(fp)
    e358:	10800384 	addi	r2,r2,14
    e35c:	100b883a 	mov	r5,r2
    e360:	e13ffe17 	ldw	r4,-8(fp)
    e364:	000fd000 	call	fd00 <OS_StrCopy>
    e368:	e0bffa05 	stb	r2,-24(fp)
    e36c:	e0bff917 	ldw	r2,-28(fp)
    e370:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    e374:	e0bffc17 	ldw	r2,-16(fp)
    e378:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
    e37c:	e0bfff17 	ldw	r2,-4(fp)
    e380:	10000005 	stb	zero,0(r2)
    return (len);
    e384:	e0bffa03 	ldbu	r2,-24(fp)
}
    e388:	e037883a 	mov	sp,fp
    e38c:	dfc00117 	ldw	ra,4(sp)
    e390:	df000017 	ldw	fp,0(sp)
    e394:	dec00204 	addi	sp,sp,8
    e398:	f800283a 	ret

0000e39c <OSEventNameSet>:
*********************************************************************************************************
*/

#if (OS_EVENT_EN) && (OS_EVENT_NAME_SIZE > 1)
void  OSEventNameSet (OS_EVENT *pevent, INT8U *pname, INT8U *perr)
{
    e39c:	defff604 	addi	sp,sp,-40
    e3a0:	dfc00915 	stw	ra,36(sp)
    e3a4:	df000815 	stw	fp,32(sp)
    e3a8:	df000804 	addi	fp,sp,32
    e3ac:	e13ffd15 	stw	r4,-12(fp)
    e3b0:	e17ffe15 	stw	r5,-8(fp)
    e3b4:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    e3b8:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
    e3bc:	e0bfff17 	ldw	r2,-4(fp)
    e3c0:	10004026 	beq	r2,zero,e4c4 <OSEventNameSet+0x128>
        return;
    }
    if (pevent == (OS_EVENT *)0) {               /* Is 'pevent' a NULL pointer?                        */
    e3c4:	e0bffd17 	ldw	r2,-12(fp)
    e3c8:	1000041e 	bne	r2,zero,e3dc <OSEventNameSet+0x40>
        *perr = OS_ERR_PEVENT_NULL;
    e3cc:	e0bfff17 	ldw	r2,-4(fp)
    e3d0:	00c00104 	movi	r3,4
    e3d4:	10c00005 	stb	r3,0(r2)
        return;
    e3d8:	00003b06 	br	e4c8 <OSEventNameSet+0x12c>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
    e3dc:	e0bffe17 	ldw	r2,-8(fp)
    e3e0:	1000041e 	bne	r2,zero,e3f4 <OSEventNameSet+0x58>
        *perr = OS_ERR_PNAME_NULL;
    e3e4:	e0bfff17 	ldw	r2,-4(fp)
    e3e8:	00c00304 	movi	r3,12
    e3ec:	10c00005 	stb	r3,0(r2)
        return;
    e3f0:	00003506 	br	e4c8 <OSEventNameSet+0x12c>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
    e3f4:	d0a72e03 	ldbu	r2,-25416(gp)
    e3f8:	10803fcc 	andi	r2,r2,255
    e3fc:	10000426 	beq	r2,zero,e410 <OSEventNameSet+0x74>
        *perr = OS_ERR_NAME_SET_ISR;
    e400:	e0bfff17 	ldw	r2,-4(fp)
    e404:	00c00484 	movi	r3,18
    e408:	10c00005 	stb	r3,0(r2)
        return;
    e40c:	00002e06 	br	e4c8 <OSEventNameSet+0x12c>
    }
    switch (pevent->OSEventType) {
    e410:	e0bffd17 	ldw	r2,-12(fp)
    e414:	10800003 	ldbu	r2,0(r2)
    e418:	10803fcc 	andi	r2,r2,255
    e41c:	10bfffc4 	addi	r2,r2,-1
    e420:	10800128 	cmpgeui	r2,r2,4
    e424:	10000426 	beq	r2,zero,e438 <OSEventNameSet+0x9c>
        case OS_EVENT_TYPE_MBOX:
        case OS_EVENT_TYPE_Q:
             break;

        default:
             *perr = OS_ERR_EVENT_TYPE;
    e428:	e0bfff17 	ldw	r2,-4(fp)
    e42c:	00c00044 	movi	r3,1
    e430:	10c00005 	stb	r3,0(r2)
             return;
    e434:	00002406 	br	e4c8 <OSEventNameSet+0x12c>
    switch (pevent->OSEventType) {
        case OS_EVENT_TYPE_SEM:
        case OS_EVENT_TYPE_MUTEX:
        case OS_EVENT_TYPE_MBOX:
        case OS_EVENT_TYPE_Q:
             break;
    e438:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    e43c:	0005303a 	rdctl	r2,status
    e440:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    e444:	e0fffc17 	ldw	r3,-16(fp)
    e448:	00bfff84 	movi	r2,-2
    e44c:	1884703a 	and	r2,r3,r2
    e450:	1001703a 	wrctl	status,r2
  
  return context;
    e454:	e0bffc17 	ldw	r2,-16(fp)

        default:
             *perr = OS_ERR_EVENT_TYPE;
             return;
    }
    OS_ENTER_CRITICAL();
    e458:	e0bff815 	stw	r2,-32(fp)
    len = OS_StrLen(pname);                           /* Can we fit the string in the storage area?    */
    e45c:	e13ffe17 	ldw	r4,-8(fp)
    e460:	000fd740 	call	fd74 <OS_StrLen>
    e464:	e0bffa05 	stb	r2,-24(fp)
    if (len > (OS_EVENT_NAME_SIZE - 1)) {             /* No                                            */
    e468:	e0bffa03 	ldbu	r2,-24(fp)
    e46c:	10800830 	cmpltui	r2,r2,32
    e470:	1000081e 	bne	r2,zero,e494 <OSEventNameSet+0xf8>
    e474:	e0bff817 	ldw	r2,-32(fp)
    e478:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    e47c:	e0bff917 	ldw	r2,-28(fp)
    e480:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_EVENT_NAME_TOO_LONG;
    e484:	e0bfff17 	ldw	r2,-4(fp)
    e488:	00c002c4 	movi	r3,11
    e48c:	10c00005 	stb	r3,0(r2)
        return;
    e490:	00000d06 	br	e4c8 <OSEventNameSet+0x12c>
    }
    (void)OS_StrCopy(pevent->OSEventName, pname);     /* Yes, copy name to the event control block     */
    e494:	e0bffd17 	ldw	r2,-12(fp)
    e498:	10800384 	addi	r2,r2,14
    e49c:	e17ffe17 	ldw	r5,-8(fp)
    e4a0:	1009883a 	mov	r4,r2
    e4a4:	000fd000 	call	fd00 <OS_StrCopy>
    e4a8:	e0bff817 	ldw	r2,-32(fp)
    e4ac:	e0bffb15 	stw	r2,-20(fp)
    e4b0:	e0bffb17 	ldw	r2,-20(fp)
    e4b4:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
    e4b8:	e0bfff17 	ldw	r2,-4(fp)
    e4bc:	10000005 	stb	zero,0(r2)
    e4c0:	00000106 	br	e4c8 <OSEventNameSet+0x12c>



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
        return;
    e4c4:	0001883a 	nop
        return;
    }
    (void)OS_StrCopy(pevent->OSEventName, pname);     /* Yes, copy name to the event control block     */
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
}
    e4c8:	e037883a 	mov	sp,fp
    e4cc:	dfc00117 	ldw	ra,4(sp)
    e4d0:	df000017 	ldw	fp,0(sp)
    e4d4:	dec00204 	addi	sp,sp,8
    e4d8:	f800283a 	ret

0000e4dc <OSEventPendMulti>:
*********************************************************************************************************
*/
/*$PAGE*/
#if ((OS_EVENT_EN) && (OS_EVENT_MULTI_EN > 0))
INT16U  OSEventPendMulti (OS_EVENT **pevents_pend, OS_EVENT **pevents_rdy, void **pmsgs_rdy, INT16U timeout, INT8U *perr)
{
    e4dc:	deffed04 	addi	sp,sp,-76
    e4e0:	dfc01215 	stw	ra,72(sp)
    e4e4:	df001115 	stw	fp,68(sp)
    e4e8:	df001104 	addi	fp,sp,68
    e4ec:	e13ffc15 	stw	r4,-16(fp)
    e4f0:	e17ffd15 	stw	r5,-12(fp)
    e4f4:	e1bffe15 	stw	r6,-8(fp)
    e4f8:	3805883a 	mov	r2,r7
    e4fc:	e0bfff0d 	sth	r2,-4(fp)
#endif
    BOOLEAN     events_rdy;
    INT16U      events_rdy_nbr;
    INT8U       events_stat;
#if (OS_CRITICAL_METHOD == 3)                           /* Allocate storage for CPU status register    */
    OS_CPU_SR   cpu_sr = 0;
    e500:	e03ff315 	stw	zero,-52(fp)
#endif



#if (OS_ARG_CHK_EN > 0)
    if (perr == (INT8U *)0) {                           /* Validate 'perr'                             */
    e504:	e0800217 	ldw	r2,8(fp)
    e508:	1000021e 	bne	r2,zero,e514 <OSEventPendMulti+0x38>
        return (0);
    e50c:	0005883a 	mov	r2,zero
    e510:	00017106 	br	ead8 <OSEventPendMulti+0x5fc>
    }
    if (pevents_pend == (OS_EVENT **)0) {               /* Validate 'pevents_pend'                     */
    e514:	e0bffc17 	ldw	r2,-16(fp)
    e518:	1000051e 	bne	r2,zero,e530 <OSEventPendMulti+0x54>
       *perr =  OS_ERR_PEVENT_NULL;
    e51c:	e0800217 	ldw	r2,8(fp)
    e520:	00c00104 	movi	r3,4
    e524:	10c00005 	stb	r3,0(r2)
        return (0);
    e528:	0005883a 	mov	r2,zero
    e52c:	00016a06 	br	ead8 <OSEventPendMulti+0x5fc>
    }
    if (pevents_rdy  == (OS_EVENT **)0) {               /* Validate 'pevents_rdy'                      */
    e530:	e0bffd17 	ldw	r2,-12(fp)
    e534:	1000051e 	bne	r2,zero,e54c <OSEventPendMulti+0x70>
       *perr =  OS_ERR_PEVENT_NULL;
    e538:	e0800217 	ldw	r2,8(fp)
    e53c:	00c00104 	movi	r3,4
    e540:	10c00005 	stb	r3,0(r2)
        return (0);
    e544:	0005883a 	mov	r2,zero
    e548:	00016306 	br	ead8 <OSEventPendMulti+0x5fc>
    }
    if (pmsgs_rdy == (void **)0) {                      /* Validate 'pmsgs_rdy'                        */
    e54c:	e0bffe17 	ldw	r2,-8(fp)
    e550:	1000051e 	bne	r2,zero,e568 <OSEventPendMulti+0x8c>
       *perr =  OS_ERR_PEVENT_NULL;
    e554:	e0800217 	ldw	r2,8(fp)
    e558:	00c00104 	movi	r3,4
    e55c:	10c00005 	stb	r3,0(r2)
        return (0);
    e560:	0005883a 	mov	r2,zero
    e564:	00015c06 	br	ead8 <OSEventPendMulti+0x5fc>
    }
#endif

   *pevents_rdy = (OS_EVENT *)0;                        /* Init array to NULL in case of errors        */
    e568:	e0bffd17 	ldw	r2,-12(fp)
    e56c:	10000015 	stw	zero,0(r2)

    pevents     =  pevents_pend;
    e570:	e0bffc17 	ldw	r2,-16(fp)
    e574:	e0bfef15 	stw	r2,-68(fp)
    pevent      = *pevents;
    e578:	e0bfef17 	ldw	r2,-68(fp)
    e57c:	10800017 	ldw	r2,0(r2)
    e580:	e0bff015 	stw	r2,-64(fp)
    while  (pevent != (OS_EVENT *)0) {
    e584:	00001906 	br	e5ec <OSEventPendMulti+0x110>
        switch (pevent->OSEventType) {                  /* Validate event block types                  */
    e588:	e0bff017 	ldw	r2,-64(fp)
    e58c:	10800003 	ldbu	r2,0(r2)
    e590:	10803fcc 	andi	r2,r2,255
    e594:	10c000a0 	cmpeqi	r3,r2,2
    e598:	1800091e 	bne	r3,zero,e5c0 <OSEventPendMulti+0xe4>
    e59c:	10c000e0 	cmpeqi	r3,r2,3
    e5a0:	1800091e 	bne	r3,zero,e5c8 <OSEventPendMulti+0xec>
    e5a4:	10800060 	cmpeqi	r2,r2,1
    e5a8:	1000091e 	bne	r2,zero,e5d0 <OSEventPendMulti+0xf4>
#endif

            case OS_EVENT_TYPE_MUTEX:                                            
            case OS_EVENT_TYPE_FLAG:
            default:           
                *perr = OS_ERR_EVENT_TYPE;
    e5ac:	e0800217 	ldw	r2,8(fp)
    e5b0:	00c00044 	movi	r3,1
    e5b4:	10c00005 	stb	r3,0(r2)
                 return (0);
    e5b8:	0005883a 	mov	r2,zero
    e5bc:	00014606 	br	ead8 <OSEventPendMulti+0x5fc>
            case OS_EVENT_TYPE_MBOX:
                 break;
#endif
#if ((OS_Q_EN   > 0) && (OS_MAX_QS > 0))
            case OS_EVENT_TYPE_Q:
                 break;
    e5c0:	0001883a 	nop
    e5c4:	00000306 	br	e5d4 <OSEventPendMulti+0xf8>
    pevent      = *pevents;
    while  (pevent != (OS_EVENT *)0) {
        switch (pevent->OSEventType) {                  /* Validate event block types                  */
#if (OS_SEM_EN  > 0)
            case OS_EVENT_TYPE_SEM:
                 break;
    e5c8:	0001883a 	nop
    e5cc:	00000106 	br	e5d4 <OSEventPendMulti+0xf8>
#endif
#if (OS_MBOX_EN > 0)
            case OS_EVENT_TYPE_MBOX:
                 break;
    e5d0:	0001883a 	nop
            case OS_EVENT_TYPE_FLAG:
            default:           
                *perr = OS_ERR_EVENT_TYPE;
                 return (0);
        }
        pevents++;
    e5d4:	e0bfef17 	ldw	r2,-68(fp)
    e5d8:	10800104 	addi	r2,r2,4
    e5dc:	e0bfef15 	stw	r2,-68(fp)
        pevent = *pevents;
    e5e0:	e0bfef17 	ldw	r2,-68(fp)
    e5e4:	10800017 	ldw	r2,0(r2)
    e5e8:	e0bff015 	stw	r2,-64(fp)

   *pevents_rdy = (OS_EVENT *)0;                        /* Init array to NULL in case of errors        */

    pevents     =  pevents_pend;
    pevent      = *pevents;
    while  (pevent != (OS_EVENT *)0) {
    e5ec:	e0bff017 	ldw	r2,-64(fp)
    e5f0:	103fe51e 	bne	r2,zero,e588 <__alt_data_end+0xfffde588>
        }
        pevents++;
        pevent = *pevents;
    }

    if (OSIntNesting  > 0) {                            /* See if called from ISR ...                  */
    e5f4:	d0a72e03 	ldbu	r2,-25416(gp)
    e5f8:	10803fcc 	andi	r2,r2,255
    e5fc:	10000526 	beq	r2,zero,e614 <OSEventPendMulti+0x138>
       *perr =  OS_ERR_PEND_ISR;                        /* ... can't PEND from an ISR                  */
    e600:	e0800217 	ldw	r2,8(fp)
    e604:	00c00084 	movi	r3,2
    e608:	10c00005 	stb	r3,0(r2)
        return (0);
    e60c:	0005883a 	mov	r2,zero
    e610:	00013106 	br	ead8 <OSEventPendMulti+0x5fc>
    }
    if (OSLockNesting > 0) {                            /* See if called with scheduler locked ...     */
    e614:	d0a72003 	ldbu	r2,-25472(gp)
    e618:	10803fcc 	andi	r2,r2,255
    e61c:	10000526 	beq	r2,zero,e634 <OSEventPendMulti+0x158>
       *perr =  OS_ERR_PEND_LOCKED;                     /* ... can't PEND when locked                  */
    e620:	e0800217 	ldw	r2,8(fp)
    e624:	00c00344 	movi	r3,13
    e628:	10c00005 	stb	r3,0(r2)
        return (0);
    e62c:	0005883a 	mov	r2,zero
    e630:	00012906 	br	ead8 <OSEventPendMulti+0x5fc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    e634:	0005303a 	rdctl	r2,status
    e638:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    e63c:	e0fffb17 	ldw	r3,-20(fp)
    e640:	00bfff84 	movi	r2,-2
    e644:	1884703a 	and	r2,r3,r2
    e648:	1001703a 	wrctl	status,r2
  
  return context;
    e64c:	e0bffb17 	ldw	r2,-20(fp)
    }

/*$PAGE*/
    OS_ENTER_CRITICAL();
    e650:	e0bff315 	stw	r2,-52(fp)
    events_rdy     =  OS_FALSE;
    e654:	e03ff105 	stb	zero,-60(fp)
    events_rdy_nbr =  0;
    e658:	e03ff18d 	sth	zero,-58(fp)
    events_stat    =  OS_STAT_RDY;
    e65c:	e03ff205 	stb	zero,-56(fp)
    pevents        =  pevents_pend;
    e660:	e0bffc17 	ldw	r2,-16(fp)
    e664:	e0bfef15 	stw	r2,-68(fp)
    pevent         = *pevents;
    e668:	e0bfef17 	ldw	r2,-68(fp)
    e66c:	10800017 	ldw	r2,0(r2)
    e670:	e0bff015 	stw	r2,-64(fp)
    while (pevent != (OS_EVENT *)0) {                   /* See if any events already available         */
    e674:	00008106 	br	e87c <OSEventPendMulti+0x3a0>
        switch (pevent->OSEventType) {
    e678:	e0bff017 	ldw	r2,-64(fp)
    e67c:	10800003 	ldbu	r2,0(r2)
    e680:	10803fcc 	andi	r2,r2,255
    e684:	10c000a0 	cmpeqi	r3,r2,2
    e688:	18003c1e 	bne	r3,zero,e77c <OSEventPendMulti+0x2a0>
    e68c:	10c000e0 	cmpeqi	r3,r2,3
    e690:	1800031e 	bne	r3,zero,e6a0 <OSEventPendMulti+0x1c4>
    e694:	10800060 	cmpeqi	r2,r2,1
    e698:	10001e1e 	bne	r2,zero,e714 <OSEventPendMulti+0x238>
    e69c:	00006606 	br	e838 <OSEventPendMulti+0x35c>
#if (OS_SEM_EN > 0)
            case OS_EVENT_TYPE_SEM:
                 if (pevent->OSEventCnt > 0) {          /* If semaphore count > 0, resource available; */
    e6a0:	e0bff017 	ldw	r2,-64(fp)
    e6a4:	1080020b 	ldhu	r2,8(r2)
    e6a8:	10bfffcc 	andi	r2,r2,65535
    e6ac:	10001526 	beq	r2,zero,e704 <OSEventPendMulti+0x228>
                     pevent->OSEventCnt--;              /* ... decrement semaphore,                ... */
    e6b0:	e0bff017 	ldw	r2,-64(fp)
    e6b4:	1080020b 	ldhu	r2,8(r2)
    e6b8:	10bfffc4 	addi	r2,r2,-1
    e6bc:	1007883a 	mov	r3,r2
    e6c0:	e0bff017 	ldw	r2,-64(fp)
    e6c4:	10c0020d 	sth	r3,8(r2)
                    *pevents_rdy++ =  pevent;           /* ... and return available semaphore event    */
    e6c8:	e0bffd17 	ldw	r2,-12(fp)
    e6cc:	10c00104 	addi	r3,r2,4
    e6d0:	e0fffd15 	stw	r3,-12(fp)
    e6d4:	e0fff017 	ldw	r3,-64(fp)
    e6d8:	10c00015 	stw	r3,0(r2)
                      events_rdy   =  OS_TRUE;
    e6dc:	00800044 	movi	r2,1
    e6e0:	e0bff105 	stb	r2,-60(fp)
                    *pmsgs_rdy++   = (void *)0;         /* NO message returned  for semaphores         */
    e6e4:	e0bffe17 	ldw	r2,-8(fp)
    e6e8:	10c00104 	addi	r3,r2,4
    e6ec:	e0fffe15 	stw	r3,-8(fp)
    e6f0:	10000015 	stw	zero,0(r2)
                      events_rdy_nbr++;
    e6f4:	e0bff18b 	ldhu	r2,-58(fp)
    e6f8:	10800044 	addi	r2,r2,1
    e6fc:	e0bff18d 	sth	r2,-58(fp)

                 } else {
                      events_stat |=  OS_STAT_SEM;      /* Configure multi-pend for semaphore events   */
                 }
                 break;
    e700:	00005806 	br	e864 <OSEventPendMulti+0x388>
                      events_rdy   =  OS_TRUE;
                    *pmsgs_rdy++   = (void *)0;         /* NO message returned  for semaphores         */
                      events_rdy_nbr++;

                 } else {
                      events_stat |=  OS_STAT_SEM;      /* Configure multi-pend for semaphore events   */
    e704:	e0bff203 	ldbu	r2,-56(fp)
    e708:	10800054 	ori	r2,r2,1
    e70c:	e0bff205 	stb	r2,-56(fp)
                 }
                 break;
    e710:	00005406 	br	e864 <OSEventPendMulti+0x388>
#endif

#if (OS_MBOX_EN > 0)
            case OS_EVENT_TYPE_MBOX:
                 if (pevent->OSEventPtr != (void *)0) { /* If mailbox NOT empty;                   ... */
    e714:	e0bff017 	ldw	r2,-64(fp)
    e718:	10800117 	ldw	r2,4(r2)
    e71c:	10001326 	beq	r2,zero,e76c <OSEventPendMulti+0x290>
                                                        /* ... return available message,           ... */
                    *pmsgs_rdy++         = (void *)pevent->OSEventPtr;
    e720:	e0bffe17 	ldw	r2,-8(fp)
    e724:	10c00104 	addi	r3,r2,4
    e728:	e0fffe15 	stw	r3,-8(fp)
    e72c:	e0fff017 	ldw	r3,-64(fp)
    e730:	18c00117 	ldw	r3,4(r3)
    e734:	10c00015 	stw	r3,0(r2)
                     pevent->OSEventPtr  = (void *)0;
    e738:	e0bff017 	ldw	r2,-64(fp)
    e73c:	10000115 	stw	zero,4(r2)
                    *pevents_rdy++       =  pevent;     /* ... and return available mailbox event      */
    e740:	e0bffd17 	ldw	r2,-12(fp)
    e744:	10c00104 	addi	r3,r2,4
    e748:	e0fffd15 	stw	r3,-12(fp)
    e74c:	e0fff017 	ldw	r3,-64(fp)
    e750:	10c00015 	stw	r3,0(r2)
                      events_rdy         =  OS_TRUE;
    e754:	00800044 	movi	r2,1
    e758:	e0bff105 	stb	r2,-60(fp)
                      events_rdy_nbr++;
    e75c:	e0bff18b 	ldhu	r2,-58(fp)
    e760:	10800044 	addi	r2,r2,1
    e764:	e0bff18d 	sth	r2,-58(fp)

                 } else {
                      events_stat |= OS_STAT_MBOX;      /* Configure multi-pend for mailbox events     */
                 }
                 break;
    e768:	00003e06 	br	e864 <OSEventPendMulti+0x388>
                    *pevents_rdy++       =  pevent;     /* ... and return available mailbox event      */
                      events_rdy         =  OS_TRUE;
                      events_rdy_nbr++;

                 } else {
                      events_stat |= OS_STAT_MBOX;      /* Configure multi-pend for mailbox events     */
    e76c:	e0bff203 	ldbu	r2,-56(fp)
    e770:	10800094 	ori	r2,r2,2
    e774:	e0bff205 	stb	r2,-56(fp)
                 }
                 break;
    e778:	00003a06 	br	e864 <OSEventPendMulti+0x388>
#endif

#if ((OS_Q_EN > 0) && (OS_MAX_QS > 0))
            case OS_EVENT_TYPE_Q:
                 pq = (OS_Q *)pevent->OSEventPtr;
    e77c:	e0bff017 	ldw	r2,-64(fp)
    e780:	10800117 	ldw	r2,4(r2)
    e784:	e0bff515 	stw	r2,-44(fp)
                 if (pq->OSQEntries > 0) {              /* If queue NOT empty;                     ... */
    e788:	e0bff517 	ldw	r2,-44(fp)
    e78c:	1080058b 	ldhu	r2,22(r2)
    e790:	10bfffcc 	andi	r2,r2,65535
    e794:	10002426 	beq	r2,zero,e828 <OSEventPendMulti+0x34c>
                                                        /* ... return available message,           ... */
                    *pmsgs_rdy++ = (void *)*pq->OSQOut++;
    e798:	e0bffe17 	ldw	r2,-8(fp)
    e79c:	10c00104 	addi	r3,r2,4
    e7a0:	e0fffe15 	stw	r3,-8(fp)
    e7a4:	e0fff517 	ldw	r3,-44(fp)
    e7a8:	18c00417 	ldw	r3,16(r3)
    e7ac:	19400104 	addi	r5,r3,4
    e7b0:	e13ff517 	ldw	r4,-44(fp)
    e7b4:	21400415 	stw	r5,16(r4)
    e7b8:	18c00017 	ldw	r3,0(r3)
    e7bc:	10c00015 	stw	r3,0(r2)
                     if (pq->OSQOut == pq->OSQEnd) {    /* If OUT ptr at queue end, ...                */
    e7c0:	e0bff517 	ldw	r2,-44(fp)
    e7c4:	10c00417 	ldw	r3,16(r2)
    e7c8:	e0bff517 	ldw	r2,-44(fp)
    e7cc:	10800217 	ldw	r2,8(r2)
    e7d0:	1880041e 	bne	r3,r2,e7e4 <OSEventPendMulti+0x308>
                         pq->OSQOut  = pq->OSQStart;    /* ... wrap   to queue start                   */
    e7d4:	e0bff517 	ldw	r2,-44(fp)
    e7d8:	10c00117 	ldw	r3,4(r2)
    e7dc:	e0bff517 	ldw	r2,-44(fp)
    e7e0:	10c00415 	stw	r3,16(r2)
                     }
                     pq->OSQEntries--;                  /* Update number of queue entries              */
    e7e4:	e0bff517 	ldw	r2,-44(fp)
    e7e8:	1080058b 	ldhu	r2,22(r2)
    e7ec:	10bfffc4 	addi	r2,r2,-1
    e7f0:	1007883a 	mov	r3,r2
    e7f4:	e0bff517 	ldw	r2,-44(fp)
    e7f8:	10c0058d 	sth	r3,22(r2)
                    *pevents_rdy++ = pevent;            /* ... and return available queue event        */
    e7fc:	e0bffd17 	ldw	r2,-12(fp)
    e800:	10c00104 	addi	r3,r2,4
    e804:	e0fffd15 	stw	r3,-12(fp)
    e808:	e0fff017 	ldw	r3,-64(fp)
    e80c:	10c00015 	stw	r3,0(r2)
                      events_rdy   = OS_TRUE;
    e810:	00800044 	movi	r2,1
    e814:	e0bff105 	stb	r2,-60(fp)
                      events_rdy_nbr++;
    e818:	e0bff18b 	ldhu	r2,-58(fp)
    e81c:	10800044 	addi	r2,r2,1
    e820:	e0bff18d 	sth	r2,-58(fp)

                 } else {
                      events_stat |= OS_STAT_Q;         /* Configure multi-pend for queue events       */
                 }
                 break;
    e824:	00000f06 	br	e864 <OSEventPendMulti+0x388>
                    *pevents_rdy++ = pevent;            /* ... and return available queue event        */
                      events_rdy   = OS_TRUE;
                      events_rdy_nbr++;

                 } else {
                      events_stat |= OS_STAT_Q;         /* Configure multi-pend for queue events       */
    e828:	e0bff203 	ldbu	r2,-56(fp)
    e82c:	10800114 	ori	r2,r2,4
    e830:	e0bff205 	stb	r2,-56(fp)
                 }
                 break;
    e834:	00000b06 	br	e864 <OSEventPendMulti+0x388>
    e838:	e0bff317 	ldw	r2,-52(fp)
    e83c:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    e840:	e0bff417 	ldw	r2,-48(fp)
    e844:	1001703a 	wrctl	status,r2

            case OS_EVENT_TYPE_MUTEX:                                            
            case OS_EVENT_TYPE_FLAG:
            default:           
                 OS_EXIT_CRITICAL();
                *pevents_rdy = (OS_EVENT *)0;           /* NULL terminate return event array           */
    e848:	e0bffd17 	ldw	r2,-12(fp)
    e84c:	10000015 	stw	zero,0(r2)
                *perr        =  OS_ERR_EVENT_TYPE;
    e850:	e0800217 	ldw	r2,8(fp)
    e854:	00c00044 	movi	r3,1
    e858:	10c00005 	stb	r3,0(r2)
                 return (events_rdy_nbr);
    e85c:	e0bff18b 	ldhu	r2,-58(fp)
    e860:	00009d06 	br	ead8 <OSEventPendMulti+0x5fc>
        }
        pevents++;
    e864:	e0bfef17 	ldw	r2,-68(fp)
    e868:	10800104 	addi	r2,r2,4
    e86c:	e0bfef15 	stw	r2,-68(fp)
        pevent = *pevents;
    e870:	e0bfef17 	ldw	r2,-68(fp)
    e874:	10800017 	ldw	r2,0(r2)
    e878:	e0bff015 	stw	r2,-64(fp)
    events_rdy     =  OS_FALSE;
    events_rdy_nbr =  0;
    events_stat    =  OS_STAT_RDY;
    pevents        =  pevents_pend;
    pevent         = *pevents;
    while (pevent != (OS_EVENT *)0) {                   /* See if any events already available         */
    e87c:	e0bff017 	ldw	r2,-64(fp)
    e880:	103f7d1e 	bne	r2,zero,e678 <__alt_data_end+0xfffde678>
        }
        pevents++;
        pevent = *pevents;
    }

    if ( events_rdy == OS_TRUE) {                       /* Return any events already available         */
    e884:	e0bff103 	ldbu	r2,-60(fp)
    e888:	10800058 	cmpnei	r2,r2,1
    e88c:	10000a1e 	bne	r2,zero,e8b8 <OSEventPendMulti+0x3dc>
       *pevents_rdy = (OS_EVENT *)0;                    /* NULL terminate return event array           */
    e890:	e0bffd17 	ldw	r2,-12(fp)
    e894:	10000015 	stw	zero,0(r2)
    e898:	e0bff317 	ldw	r2,-52(fp)
    e89c:	e0bff615 	stw	r2,-40(fp)
    e8a0:	e0bff617 	ldw	r2,-40(fp)
    e8a4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
       *perr        =  OS_ERR_NONE;
    e8a8:	e0800217 	ldw	r2,8(fp)
    e8ac:	10000005 	stb	zero,0(r2)
        return (events_rdy_nbr);
    e8b0:	e0bff18b 	ldhu	r2,-58(fp)
    e8b4:	00008806 	br	ead8 <OSEventPendMulti+0x5fc>
    }
/*$PAGE*/
                                                        /* Otherwise, must wait until any event occurs */
    OSTCBCur->OSTCBStat     |= events_stat  |           /* Resource not available, ...                 */
    e8b8:	d0a72f17 	ldw	r2,-25412(gp)
    e8bc:	d0e72f17 	ldw	r3,-25412(gp)
    e8c0:	19000c03 	ldbu	r4,48(r3)
    e8c4:	e0fff203 	ldbu	r3,-56(fp)
    e8c8:	20c6b03a 	or	r3,r4,r3
    e8cc:	1809883a 	mov	r4,r3
    e8d0:	00ffe004 	movi	r3,-128
    e8d4:	20c6b03a 	or	r3,r4,r3
    e8d8:	10c00c05 	stb	r3,48(r2)
                               OS_STAT_MULTI;           /* ... pend on multiple events                 */
    OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
    e8dc:	d0a72f17 	ldw	r2,-25412(gp)
    e8e0:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly       = timeout;                 /* Store pend timeout in TCB                   */
    e8e4:	d0a72f17 	ldw	r2,-25412(gp)
    e8e8:	e0ffff0b 	ldhu	r3,-4(fp)
    e8ec:	10c00b8d 	sth	r3,46(r2)
    OS_EventTaskWaitMulti(pevents_pend);                /* Suspend task until events or timeout occurs */
    e8f0:	e13ffc17 	ldw	r4,-16(fp)
    e8f4:	000f4180 	call	f418 <OS_EventTaskWaitMulti>
    e8f8:	e0bff317 	ldw	r2,-52(fp)
    e8fc:	e0bff915 	stw	r2,-28(fp)
    e900:	e0bff917 	ldw	r2,-28(fp)
    e904:	1001703a 	wrctl	status,r2

    OS_EXIT_CRITICAL();
    OS_Sched();                                         /* Find next highest priority task ready       */
    e908:	000fbbc0 	call	fbbc <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    e90c:	0005303a 	rdctl	r2,status
    e910:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    e914:	e0fff717 	ldw	r3,-36(fp)
    e918:	00bfff84 	movi	r2,-2
    e91c:	1884703a 	and	r2,r3,r2
    e920:	1001703a 	wrctl	status,r2
  
  return context;
    e924:	e0bff717 	ldw	r2,-36(fp)
    OS_ENTER_CRITICAL();
    e928:	e0bff315 	stw	r2,-52(fp)

    switch (OSTCBCur->OSTCBStatPend) {                  /* Handle event posted, aborted, or timed-out  */
    e92c:	d0a72f17 	ldw	r2,-25412(gp)
    e930:	10800c43 	ldbu	r2,49(r2)
    e934:	10803fcc 	andi	r2,r2,255
    e938:	10000226 	beq	r2,zero,e944 <OSEventPendMulti+0x468>
    e93c:	108000a0 	cmpeqi	r2,r2,2
    e940:	10001826 	beq	r2,zero,e9a4 <OSEventPendMulti+0x4c8>
        case OS_STAT_PEND_OK:
        case OS_STAT_PEND_ABORT:
             pevent = OSTCBCur->OSTCBEventPtr;
    e944:	d0a72f17 	ldw	r2,-25412(gp)
    e948:	10800717 	ldw	r2,28(r2)
    e94c:	e0bff015 	stw	r2,-64(fp)
             if (pevent != (OS_EVENT *)0) {             /* If task event ptr != NULL, ...              */
    e950:	e0bff017 	ldw	r2,-64(fp)
    e954:	10000b26 	beq	r2,zero,e984 <OSEventPendMulti+0x4a8>
                *pevents_rdy++ =  pevent;               /* ... return available event ...              */
    e958:	e0bffd17 	ldw	r2,-12(fp)
    e95c:	10c00104 	addi	r3,r2,4
    e960:	e0fffd15 	stw	r3,-12(fp)
    e964:	e0fff017 	ldw	r3,-64(fp)
    e968:	10c00015 	stw	r3,0(r2)
                *pevents_rdy   = (OS_EVENT *)0;         /* ... & NULL terminate return event array     */
    e96c:	e0bffd17 	ldw	r2,-12(fp)
    e970:	10000015 	stw	zero,0(r2)
                  events_rdy_nbr++;
    e974:	e0bff18b 	ldhu	r2,-58(fp)
    e978:	10800044 	addi	r2,r2,1
    e97c:	e0bff18d 	sth	r2,-58(fp)

             } else {                                   /* Else NO event available, handle as timeout  */
                 OSTCBCur->OSTCBStatPend = OS_STAT_PEND_TO;
                 OS_EventTaskRemoveMulti(OSTCBCur, pevents_pend);
             }
			 break;
    e980:	00000d06 	br	e9b8 <OSEventPendMulti+0x4dc>
                *pevents_rdy++ =  pevent;               /* ... return available event ...              */
                *pevents_rdy   = (OS_EVENT *)0;         /* ... & NULL terminate return event array     */
                  events_rdy_nbr++;

             } else {                                   /* Else NO event available, handle as timeout  */
                 OSTCBCur->OSTCBStatPend = OS_STAT_PEND_TO;
    e984:	d0a72f17 	ldw	r2,-25412(gp)
    e988:	00c00044 	movi	r3,1
    e98c:	10c00c45 	stb	r3,49(r2)
                 OS_EventTaskRemoveMulti(OSTCBCur, pevents_pend);
    e990:	d0a72f17 	ldw	r2,-25412(gp)
    e994:	e17ffc17 	ldw	r5,-16(fp)
    e998:	1009883a 	mov	r4,r2
    e99c:	000f6200 	call	f620 <OS_EventTaskRemoveMulti>
             }
			 break;
    e9a0:	00000506 	br	e9b8 <OSEventPendMulti+0x4dc>

        case OS_STAT_PEND_TO:
        default:                                        /* ... remove task from events' wait lists     */
             OS_EventTaskRemoveMulti(OSTCBCur, pevents_pend);
    e9a4:	d0a72f17 	ldw	r2,-25412(gp)
    e9a8:	e17ffc17 	ldw	r5,-16(fp)
    e9ac:	1009883a 	mov	r4,r2
    e9b0:	000f6200 	call	f620 <OS_EventTaskRemoveMulti>
             break;
    e9b4:	0001883a 	nop
    }

    switch (OSTCBCur->OSTCBStatPend) {
    e9b8:	d0a72f17 	ldw	r2,-25412(gp)
    e9bc:	10800c43 	ldbu	r2,49(r2)
    e9c0:	10803fcc 	andi	r2,r2,255
    e9c4:	10000326 	beq	r2,zero,e9d4 <OSEventPendMulti+0x4f8>
    e9c8:	108000a0 	cmpeqi	r2,r2,2
    e9cc:	1000231e 	bne	r2,zero,ea5c <OSEventPendMulti+0x580>
    e9d0:	00002a06 	br	ea7c <OSEventPendMulti+0x5a0>
        case OS_STAT_PEND_OK:
             switch (pevent->OSEventType) {             /* Return event's message                      */
    e9d4:	e0bff017 	ldw	r2,-64(fp)
    e9d8:	10800003 	ldbu	r2,0(r2)
    e9dc:	10803fcc 	andi	r2,r2,255
    e9e0:	0080100e 	bge	zero,r2,ea24 <OSEventPendMulti+0x548>
    e9e4:	10c000d0 	cmplti	r3,r2,3
    e9e8:	1800071e 	bne	r3,zero,ea08 <OSEventPendMulti+0x52c>
    e9ec:	108000e0 	cmpeqi	r2,r2,3
    e9f0:	10000c26 	beq	r2,zero,ea24 <OSEventPendMulti+0x548>
#if (OS_SEM_EN > 0)
                 case OS_EVENT_TYPE_SEM:
                     *pmsgs_rdy++ = (void *)0;          /* NO message returned for semaphores          */
    e9f4:	e0bffe17 	ldw	r2,-8(fp)
    e9f8:	10c00104 	addi	r3,r2,4
    e9fc:	e0fffe15 	stw	r3,-8(fp)
    ea00:	10000015 	stw	zero,0(r2)
                      break;
    ea04:	00001206 	br	ea50 <OSEventPendMulti+0x574>

#if ((OS_MBOX_EN > 0) ||                 \
    ((OS_Q_EN    > 0) && (OS_MAX_QS > 0)))
                 case OS_EVENT_TYPE_MBOX:
                 case OS_EVENT_TYPE_Q:
                     *pmsgs_rdy++ = (void *)OSTCBCur->OSTCBMsg;     /* Return received message         */
    ea08:	e0bffe17 	ldw	r2,-8(fp)
    ea0c:	10c00104 	addi	r3,r2,4
    ea10:	e0fffe15 	stw	r3,-8(fp)
    ea14:	d0e72f17 	ldw	r3,-25412(gp)
    ea18:	18c00917 	ldw	r3,36(r3)
    ea1c:	10c00015 	stw	r3,0(r2)
                      break;
    ea20:	00000b06 	br	ea50 <OSEventPendMulti+0x574>
    ea24:	e0bff317 	ldw	r2,-52(fp)
    ea28:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    ea2c:	e0bff817 	ldw	r2,-32(fp)
    ea30:	1001703a 	wrctl	status,r2

                 case OS_EVENT_TYPE_MUTEX:                                       
                 case OS_EVENT_TYPE_FLAG:
                 default:           
                      OS_EXIT_CRITICAL();
                     *pevents_rdy = (OS_EVENT *)0;      /* NULL terminate return event array           */
    ea34:	e0bffd17 	ldw	r2,-12(fp)
    ea38:	10000015 	stw	zero,0(r2)
                     *perr        =  OS_ERR_EVENT_TYPE;
    ea3c:	e0800217 	ldw	r2,8(fp)
    ea40:	00c00044 	movi	r3,1
    ea44:	10c00005 	stb	r3,0(r2)
                      return (events_rdy_nbr);
    ea48:	e0bff18b 	ldhu	r2,-58(fp)
    ea4c:	00002206 	br	ead8 <OSEventPendMulti+0x5fc>
             }
            *perr = OS_ERR_NONE;
    ea50:	e0800217 	ldw	r2,8(fp)
    ea54:	10000005 	stb	zero,0(r2)
             break;
    ea58:	00001006 	br	ea9c <OSEventPendMulti+0x5c0>

        case OS_STAT_PEND_ABORT:
            *pmsgs_rdy++ = (void *)0;                   /* NO message returned for abort               */
    ea5c:	e0bffe17 	ldw	r2,-8(fp)
    ea60:	10c00104 	addi	r3,r2,4
    ea64:	e0fffe15 	stw	r3,-8(fp)
    ea68:	10000015 	stw	zero,0(r2)
            *perr        =  OS_ERR_PEND_ABORT;          /* Indicate that event  aborted                */
    ea6c:	e0800217 	ldw	r2,8(fp)
    ea70:	00c00384 	movi	r3,14
    ea74:	10c00005 	stb	r3,0(r2)
             break;
    ea78:	00000806 	br	ea9c <OSEventPendMulti+0x5c0>
                                                        
        case OS_STAT_PEND_TO:                                                
        default:        
            *pmsgs_rdy++ = (void *)0;                   /* NO message returned for timeout             */
    ea7c:	e0bffe17 	ldw	r2,-8(fp)
    ea80:	10c00104 	addi	r3,r2,4
    ea84:	e0fffe15 	stw	r3,-8(fp)
    ea88:	10000015 	stw	zero,0(r2)
            *perr        =  OS_ERR_TIMEOUT;             /* Indicate that events timed out              */
    ea8c:	e0800217 	ldw	r2,8(fp)
    ea90:	00c00284 	movi	r3,10
    ea94:	10c00005 	stb	r3,0(r2)
             break;
    ea98:	0001883a 	nop
    }

    OSTCBCur->OSTCBStat          =  OS_STAT_RDY;        /* Set   task  status to ready                 */
    ea9c:	d0a72f17 	ldw	r2,-25412(gp)
    eaa0:	10000c05 	stb	zero,48(r2)
    OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;    /* Clear pend  status                          */
    eaa4:	d0a72f17 	ldw	r2,-25412(gp)
    eaa8:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;      /* Clear event pointers                        */
    eaac:	d0a72f17 	ldw	r2,-25412(gp)
    eab0:	10000715 	stw	zero,28(r2)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
    eab4:	d0a72f17 	ldw	r2,-25412(gp)
    eab8:	10000815 	stw	zero,32(r2)
    OSTCBCur->OSTCBMsg           = (void      *)0;      /* Clear task  message                         */
    eabc:	d0a72f17 	ldw	r2,-25412(gp)
    eac0:	10000915 	stw	zero,36(r2)
    eac4:	e0bff317 	ldw	r2,-52(fp)
    eac8:	e0bffa15 	stw	r2,-24(fp)
    eacc:	e0bffa17 	ldw	r2,-24(fp)
    ead0:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();

    return (events_rdy_nbr);
    ead4:	e0bff18b 	ldhu	r2,-58(fp)
}
    ead8:	e037883a 	mov	sp,fp
    eadc:	dfc00117 	ldw	ra,4(sp)
    eae0:	df000017 	ldw	fp,0(sp)
    eae4:	dec00204 	addi	sp,sp,8
    eae8:	f800283a 	ret

0000eaec <OSInit>:
* Returns    : none
*********************************************************************************************************
*/

void  OSInit (void)
{
    eaec:	defffe04 	addi	sp,sp,-8
    eaf0:	dfc00115 	stw	ra,4(sp)
    eaf4:	df000015 	stw	fp,0(sp)
    eaf8:	d839883a 	mov	fp,sp
    OSInitHookBegin();                                           /* Call port specific initialization code   */
    eafc:	00174f00 	call	174f0 <OSInitHookBegin>

    OS_InitMisc();                                               /* Initialize miscellaneous variables       */
    eb00:	000f8680 	call	f868 <OS_InitMisc>

    OS_InitRdyList();                                            /* Initialize the Ready List                */
    eb04:	000f8b00 	call	f8b0 <OS_InitRdyList>

    OS_InitTCBList();                                            /* Initialize the free list of OS_TCBs      */
    eb08:	000fa1c0 	call	fa1c <OS_InitTCBList>

    OS_InitEventList();                                          /* Initialize the free list of OS_EVENTs    */
    eb0c:	000f7880 	call	f788 <OS_InitEventList>

#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0)
    OS_FlagInit();                                               /* Initialize the event flag structures     */
    eb10:	00118bc0 	call	118bc <OS_FlagInit>
#endif

#if (OS_MEM_EN > 0) && (OS_MAX_MEM_PART > 0)
    OS_MemInit();                                                /* Initialize the memory manager            */
    eb14:	00121bc0 	call	121bc <OS_MemInit>
#endif

#if (OS_Q_EN > 0) && (OS_MAX_QS > 0)
    OS_QInit();                                                  /* Initialize the message queue structures  */
    eb18:	00132f00 	call	132f0 <OS_QInit>
#endif

    OS_InitTaskIdle();                                           /* Create the Idle Task                     */
    eb1c:	000f91c0 	call	f91c <OS_InitTaskIdle>
#if OS_TASK_STAT_EN > 0
    OS_InitTaskStat();                                           /* Create the Statistic Task                */
    eb20:	000f99c0 	call	f99c <OS_InitTaskStat>

#if OS_TMR_EN > 0
    OSTmr_Init();                                                /* Initialize the Timer Manager             */
#endif

    OSInitHookEnd();                                             /* Call port specific init. code            */
    eb24:	00175100 	call	17510 <OSInitHookEnd>

#if OS_DEBUG_EN > 0
    OSDebugInit();
    eb28:	00102900 	call	10290 <OSDebugInit>
#endif
}
    eb2c:	0001883a 	nop
    eb30:	e037883a 	mov	sp,fp
    eb34:	dfc00117 	ldw	ra,4(sp)
    eb38:	df000017 	ldw	fp,0(sp)
    eb3c:	dec00204 	addi	sp,sp,8
    eb40:	f800283a 	ret

0000eb44 <OSIntEnter>:
*              5) You are allowed to nest interrupts up to 255 levels deep.
*********************************************************************************************************
*/

void  OSIntEnter (void)
{
    eb44:	deffff04 	addi	sp,sp,-4
    eb48:	df000015 	stw	fp,0(sp)
    eb4c:	d839883a 	mov	fp,sp
    if (OSRunning == OS_TRUE) {
    eb50:	d0a72043 	ldbu	r2,-25471(gp)
    eb54:	10803fcc 	andi	r2,r2,255
    eb58:	10800058 	cmpnei	r2,r2,1
    eb5c:	1000071e 	bne	r2,zero,eb7c <OSIntEnter+0x38>
        if (OSIntNesting < 255u) {
    eb60:	d0a72e03 	ldbu	r2,-25416(gp)
    eb64:	10803fcc 	andi	r2,r2,255
    eb68:	10803fe0 	cmpeqi	r2,r2,255
    eb6c:	1000031e 	bne	r2,zero,eb7c <OSIntEnter+0x38>
            OSIntNesting++;                      /* Increment ISR nesting level                        */
    eb70:	d0a72e03 	ldbu	r2,-25416(gp)
    eb74:	10800044 	addi	r2,r2,1
    eb78:	d0a72e05 	stb	r2,-25416(gp)
        }
    }
}
    eb7c:	0001883a 	nop
    eb80:	e037883a 	mov	sp,fp
    eb84:	df000017 	ldw	fp,0(sp)
    eb88:	dec00104 	addi	sp,sp,4
    eb8c:	f800283a 	ret

0000eb90 <OSIntExit>:
*              2) Rescheduling is prevented when the scheduler is locked (see OS_SchedLock())
*********************************************************************************************************
*/

void  OSIntExit (void)
{
    eb90:	defffb04 	addi	sp,sp,-20
    eb94:	dfc00415 	stw	ra,16(sp)
    eb98:	df000315 	stw	fp,12(sp)
    eb9c:	df000304 	addi	fp,sp,12
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
    eba0:	e03ffd15 	stw	zero,-12(fp)
#endif



    if (OSRunning == OS_TRUE) {
    eba4:	d0a72043 	ldbu	r2,-25471(gp)
    eba8:	10803fcc 	andi	r2,r2,255
    ebac:	10800058 	cmpnei	r2,r2,1
    ebb0:	10002f1e 	bne	r2,zero,ec70 <OSIntExit+0xe0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    ebb4:	0005303a 	rdctl	r2,status
    ebb8:	e0bfff15 	stw	r2,-4(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    ebbc:	e0ffff17 	ldw	r3,-4(fp)
    ebc0:	00bfff84 	movi	r2,-2
    ebc4:	1884703a 	and	r2,r3,r2
    ebc8:	1001703a 	wrctl	status,r2
  
  return context;
    ebcc:	e0bfff17 	ldw	r2,-4(fp)
        OS_ENTER_CRITICAL();
    ebd0:	e0bffd15 	stw	r2,-12(fp)
        if (OSIntNesting > 0) {                            /* Prevent OSIntNesting from wrapping       */
    ebd4:	d0a72e03 	ldbu	r2,-25416(gp)
    ebd8:	10803fcc 	andi	r2,r2,255
    ebdc:	10000326 	beq	r2,zero,ebec <OSIntExit+0x5c>
            OSIntNesting--;
    ebe0:	d0a72e03 	ldbu	r2,-25416(gp)
    ebe4:	10bfffc4 	addi	r2,r2,-1
    ebe8:	d0a72e05 	stb	r2,-25416(gp)
        }
        if (OSIntNesting == 0) {                           /* Reschedule only if all ISRs complete ... */
    ebec:	d0a72e03 	ldbu	r2,-25416(gp)
    ebf0:	10803fcc 	andi	r2,r2,255
    ebf4:	10001a1e 	bne	r2,zero,ec60 <OSIntExit+0xd0>
            if (OSLockNesting == 0) {                      /* ... and not locked.                      */
    ebf8:	d0a72003 	ldbu	r2,-25472(gp)
    ebfc:	10803fcc 	andi	r2,r2,255
    ec00:	1000171e 	bne	r2,zero,ec60 <OSIntExit+0xd0>
                OS_SchedNew();
    ec04:	000fc8c0 	call	fc8c <OS_SchedNew>
                if (OSPrioHighRdy != OSPrioCur) {          /* No Ctx Sw if current task is highest rdy */
    ec08:	d0e72203 	ldbu	r3,-25464(gp)
    ec0c:	d0a72243 	ldbu	r2,-25463(gp)
    ec10:	18c03fcc 	andi	r3,r3,255
    ec14:	10803fcc 	andi	r2,r2,255
    ec18:	18801126 	beq	r3,r2,ec60 <OSIntExit+0xd0>
                    OSTCBHighRdy  = OSTCBPrioTbl[OSPrioHighRdy];
    ec1c:	d0a72203 	ldbu	r2,-25464(gp)
    ec20:	10c03fcc 	andi	r3,r2,255
    ec24:	008000b4 	movhi	r2,2
    ec28:	10be9904 	addi	r2,r2,-1436
    ec2c:	18c7883a 	add	r3,r3,r3
    ec30:	18c7883a 	add	r3,r3,r3
    ec34:	10c5883a 	add	r2,r2,r3
    ec38:	10800017 	ldw	r2,0(r2)
    ec3c:	d0a72a15 	stw	r2,-25432(gp)
#if OS_TASK_PROFILE_EN > 0
                    OSTCBHighRdy->OSTCBCtxSwCtr++;         /* Inc. # of context switches to this task  */
    ec40:	d0a72a17 	ldw	r2,-25432(gp)
    ec44:	10c00e17 	ldw	r3,56(r2)
    ec48:	18c00044 	addi	r3,r3,1
    ec4c:	10c00e15 	stw	r3,56(r2)
#endif
                    OSCtxSwCtr++;                          /* Keep track of the number of ctx switches */
    ec50:	d0a72517 	ldw	r2,-25452(gp)
    ec54:	10800044 	addi	r2,r2,1
    ec58:	d0a72515 	stw	r2,-25452(gp)
                    OSIntCtxSw();                          /* Perform interrupt level ctx switch       */
    ec5c:	001721c0 	call	1721c <OSCtxSw>
    ec60:	e0bffd17 	ldw	r2,-12(fp)
    ec64:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    ec68:	e0bffe17 	ldw	r2,-8(fp)
    ec6c:	1001703a 	wrctl	status,r2
                }
            }
        }
        OS_EXIT_CRITICAL();
    }
}
    ec70:	0001883a 	nop
    ec74:	e037883a 	mov	sp,fp
    ec78:	dfc00117 	ldw	ra,4(sp)
    ec7c:	df000017 	ldw	fp,0(sp)
    ec80:	dec00204 	addi	sp,sp,8
    ec84:	f800283a 	ret

0000ec88 <OSSchedLock>:
*********************************************************************************************************
*/

#if OS_SCHED_LOCK_EN > 0
void  OSSchedLock (void)
{
    ec88:	defffc04 	addi	sp,sp,-16
    ec8c:	df000315 	stw	fp,12(sp)
    ec90:	df000304 	addi	fp,sp,12
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    ec94:	e03ffd15 	stw	zero,-12(fp)
#endif



    if (OSRunning == OS_TRUE) {                  /* Make sure multitasking is running                  */
    ec98:	d0a72043 	ldbu	r2,-25471(gp)
    ec9c:	10803fcc 	andi	r2,r2,255
    eca0:	10800058 	cmpnei	r2,r2,1
    eca4:	1000161e 	bne	r2,zero,ed00 <OSSchedLock+0x78>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    eca8:	0005303a 	rdctl	r2,status
    ecac:	e0bfff15 	stw	r2,-4(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    ecb0:	e0ffff17 	ldw	r3,-4(fp)
    ecb4:	00bfff84 	movi	r2,-2
    ecb8:	1884703a 	and	r2,r3,r2
    ecbc:	1001703a 	wrctl	status,r2
  
  return context;
    ecc0:	e0bfff17 	ldw	r2,-4(fp)
        OS_ENTER_CRITICAL();
    ecc4:	e0bffd15 	stw	r2,-12(fp)
        if (OSIntNesting == 0) {                 /* Can't call from an ISR                             */
    ecc8:	d0a72e03 	ldbu	r2,-25416(gp)
    eccc:	10803fcc 	andi	r2,r2,255
    ecd0:	1000071e 	bne	r2,zero,ecf0 <OSSchedLock+0x68>
            if (OSLockNesting < 255u) {          /* Prevent OSLockNesting from wrapping back to 0      */
    ecd4:	d0a72003 	ldbu	r2,-25472(gp)
    ecd8:	10803fcc 	andi	r2,r2,255
    ecdc:	10803fe0 	cmpeqi	r2,r2,255
    ece0:	1000031e 	bne	r2,zero,ecf0 <OSSchedLock+0x68>
                OSLockNesting++;                 /* Increment lock nesting level                       */
    ece4:	d0a72003 	ldbu	r2,-25472(gp)
    ece8:	10800044 	addi	r2,r2,1
    ecec:	d0a72005 	stb	r2,-25472(gp)
    ecf0:	e0bffd17 	ldw	r2,-12(fp)
    ecf4:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    ecf8:	e0bffe17 	ldw	r2,-8(fp)
    ecfc:	1001703a 	wrctl	status,r2
            }
        }
        OS_EXIT_CRITICAL();
    }
}
    ed00:	0001883a 	nop
    ed04:	e037883a 	mov	sp,fp
    ed08:	df000017 	ldw	fp,0(sp)
    ed0c:	dec00104 	addi	sp,sp,4
    ed10:	f800283a 	ret

0000ed14 <OSSchedUnlock>:
*********************************************************************************************************
*/

#if OS_SCHED_LOCK_EN > 0
void  OSSchedUnlock (void)
{
    ed14:	defff804 	addi	sp,sp,-32
    ed18:	dfc00715 	stw	ra,28(sp)
    ed1c:	df000615 	stw	fp,24(sp)
    ed20:	df000604 	addi	fp,sp,24
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
    ed24:	e03ffa15 	stw	zero,-24(fp)
#endif



    if (OSRunning == OS_TRUE) {                            /* Make sure multitasking is running        */
    ed28:	d0a72043 	ldbu	r2,-25471(gp)
    ed2c:	10803fcc 	andi	r2,r2,255
    ed30:	10800058 	cmpnei	r2,r2,1
    ed34:	1000281e 	bne	r2,zero,edd8 <OSSchedUnlock+0xc4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    ed38:	0005303a 	rdctl	r2,status
    ed3c:	e0bfff15 	stw	r2,-4(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    ed40:	e0ffff17 	ldw	r3,-4(fp)
    ed44:	00bfff84 	movi	r2,-2
    ed48:	1884703a 	and	r2,r3,r2
    ed4c:	1001703a 	wrctl	status,r2
  
  return context;
    ed50:	e0bfff17 	ldw	r2,-4(fp)
        OS_ENTER_CRITICAL();
    ed54:	e0bffa15 	stw	r2,-24(fp)
        if (OSLockNesting > 0) {                           /* Do not decrement if already 0            */
    ed58:	d0a72003 	ldbu	r2,-25472(gp)
    ed5c:	10803fcc 	andi	r2,r2,255
    ed60:	10001926 	beq	r2,zero,edc8 <OSSchedUnlock+0xb4>
            OSLockNesting--;                               /* Decrement lock nesting level             */
    ed64:	d0a72003 	ldbu	r2,-25472(gp)
    ed68:	10bfffc4 	addi	r2,r2,-1
    ed6c:	d0a72005 	stb	r2,-25472(gp)
            if (OSLockNesting == 0) {                      /* See if scheduler is enabled and ...      */
    ed70:	d0a72003 	ldbu	r2,-25472(gp)
    ed74:	10803fcc 	andi	r2,r2,255
    ed78:	10000e1e 	bne	r2,zero,edb4 <OSSchedUnlock+0xa0>
                if (OSIntNesting == 0) {                   /* ... not in an ISR                        */
    ed7c:	d0a72e03 	ldbu	r2,-25416(gp)
    ed80:	10803fcc 	andi	r2,r2,255
    ed84:	1000061e 	bne	r2,zero,eda0 <OSSchedUnlock+0x8c>
    ed88:	e0bffa17 	ldw	r2,-24(fp)
    ed8c:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    ed90:	e0bffb17 	ldw	r2,-20(fp)
    ed94:	1001703a 	wrctl	status,r2
                    OS_EXIT_CRITICAL();
                    OS_Sched();                            /* See if a HPT is ready                    */
    ed98:	000fbbc0 	call	fbbc <OS_Sched>
            }
        } else {
            OS_EXIT_CRITICAL();
        }
    }
}
    ed9c:	00000e06 	br	edd8 <OSSchedUnlock+0xc4>
    eda0:	e0bffa17 	ldw	r2,-24(fp)
    eda4:	e0bffc15 	stw	r2,-16(fp)
    eda8:	e0bffc17 	ldw	r2,-16(fp)
    edac:	1001703a 	wrctl	status,r2
    edb0:	00000906 	br	edd8 <OSSchedUnlock+0xc4>
    edb4:	e0bffa17 	ldw	r2,-24(fp)
    edb8:	e0bffd15 	stw	r2,-12(fp)
    edbc:	e0bffd17 	ldw	r2,-12(fp)
    edc0:	1001703a 	wrctl	status,r2
    edc4:	00000406 	br	edd8 <OSSchedUnlock+0xc4>
    edc8:	e0bffa17 	ldw	r2,-24(fp)
    edcc:	e0bffe15 	stw	r2,-8(fp)
    edd0:	e0bffe17 	ldw	r2,-8(fp)
    edd4:	1001703a 	wrctl	status,r2
    edd8:	0001883a 	nop
    eddc:	e037883a 	mov	sp,fp
    ede0:	dfc00117 	ldw	ra,4(sp)
    ede4:	df000017 	ldw	fp,0(sp)
    ede8:	dec00204 	addi	sp,sp,8
    edec:	f800283a 	ret

0000edf0 <OSStart>:
*                 d_ Execute the task.
*********************************************************************************************************
*/

void  OSStart (void)
{
    edf0:	defffe04 	addi	sp,sp,-8
    edf4:	dfc00115 	stw	ra,4(sp)
    edf8:	df000015 	stw	fp,0(sp)
    edfc:	d839883a 	mov	fp,sp
    if (OSRunning == OS_FALSE) {
    ee00:	d0a72043 	ldbu	r2,-25471(gp)
    ee04:	10803fcc 	andi	r2,r2,255
    ee08:	10000f1e 	bne	r2,zero,ee48 <OSStart+0x58>
        OS_SchedNew();                               /* Find highest priority's task priority number   */
    ee0c:	000fc8c0 	call	fc8c <OS_SchedNew>
        OSPrioCur     = OSPrioHighRdy;
    ee10:	d0a72203 	ldbu	r2,-25464(gp)
    ee14:	d0a72245 	stb	r2,-25463(gp)
        OSTCBHighRdy  = OSTCBPrioTbl[OSPrioHighRdy]; /* Point to highest priority task ready to run    */
    ee18:	d0a72203 	ldbu	r2,-25464(gp)
    ee1c:	10c03fcc 	andi	r3,r2,255
    ee20:	008000b4 	movhi	r2,2
    ee24:	10be9904 	addi	r2,r2,-1436
    ee28:	18c7883a 	add	r3,r3,r3
    ee2c:	18c7883a 	add	r3,r3,r3
    ee30:	10c5883a 	add	r2,r2,r3
    ee34:	10800017 	ldw	r2,0(r2)
    ee38:	d0a72a15 	stw	r2,-25432(gp)
        OSTCBCur      = OSTCBHighRdy;
    ee3c:	d0a72a17 	ldw	r2,-25432(gp)
    ee40:	d0a72f15 	stw	r2,-25412(gp)
        OSStartHighRdy();                            /* Execute target specific code to start task     */
    ee44:	00172a80 	call	172a8 <OSStartHighRdy>
    }
}
    ee48:	0001883a 	nop
    ee4c:	e037883a 	mov	sp,fp
    ee50:	dfc00117 	ldw	ra,4(sp)
    ee54:	df000017 	ldw	fp,0(sp)
    ee58:	dec00204 	addi	sp,sp,8
    ee5c:	f800283a 	ret

0000ee60 <OSStatInit>:
*********************************************************************************************************
*/

#if OS_TASK_STAT_EN > 0
void  OSStatInit (void)
{
    ee60:	defff904 	addi	sp,sp,-28
    ee64:	dfc00615 	stw	ra,24(sp)
    ee68:	df000515 	stw	fp,20(sp)
    ee6c:	df000504 	addi	fp,sp,20
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    ee70:	e03ffb15 	stw	zero,-20(fp)
#endif



    OSTimeDly(2);                                /* Synchronize with clock tick                        */
    ee74:	01000084 	movi	r4,2
    ee78:	00155640 	call	15564 <OSTimeDly>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    ee7c:	0005303a 	rdctl	r2,status
    ee80:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    ee84:	e0fffc17 	ldw	r3,-16(fp)
    ee88:	00bfff84 	movi	r2,-2
    ee8c:	1884703a 	and	r2,r3,r2
    ee90:	1001703a 	wrctl	status,r2
  
  return context;
    ee94:	e0bffc17 	ldw	r2,-16(fp)
    OS_ENTER_CRITICAL();
    ee98:	e0bffb15 	stw	r2,-20(fp)
    OSIdleCtr    = 0L;                           /* Clear idle counter                                 */
    ee9c:	d0272115 	stw	zero,-25468(gp)
    eea0:	e0bffb17 	ldw	r2,-20(fp)
    eea4:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    eea8:	e0bffd17 	ldw	r2,-12(fp)
    eeac:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OSTimeDly(OS_TICKS_PER_SEC / 10);            /* Determine MAX. idle counter value for 1/10 second  */
    eeb0:	01001904 	movi	r4,100
    eeb4:	00155640 	call	15564 <OSTimeDly>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    eeb8:	0005303a 	rdctl	r2,status
    eebc:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    eec0:	e0fffe17 	ldw	r3,-8(fp)
    eec4:	00bfff84 	movi	r2,-2
    eec8:	1884703a 	and	r2,r3,r2
    eecc:	1001703a 	wrctl	status,r2
  
  return context;
    eed0:	e0bffe17 	ldw	r2,-8(fp)
    OS_ENTER_CRITICAL();
    eed4:	e0bffb15 	stw	r2,-20(fp)
    OSIdleCtrMax = OSIdleCtr;                    /* Store maximum idle counter count in 1/10 second    */
    eed8:	d0a72117 	ldw	r2,-25468(gp)
    eedc:	d0a72615 	stw	r2,-25448(gp)
    OSStatRdy    = OS_TRUE;
    eee0:	00800044 	movi	r2,1
    eee4:	d0a73205 	stb	r2,-25400(gp)
    eee8:	e0bffb17 	ldw	r2,-20(fp)
    eeec:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    eef0:	e0bfff17 	ldw	r2,-4(fp)
    eef4:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
}
    eef8:	0001883a 	nop
    eefc:	e037883a 	mov	sp,fp
    ef00:	dfc00117 	ldw	ra,4(sp)
    ef04:	df000017 	ldw	fp,0(sp)
    ef08:	dec00204 	addi	sp,sp,8
    ef0c:	f800283a 	ret

0000ef10 <OSTimeTick>:
* Returns    : none
*********************************************************************************************************
*/

void  OSTimeTick (void)
{
    ef10:	defff704 	addi	sp,sp,-36
    ef14:	dfc00815 	stw	ra,32(sp)
    ef18:	df000715 	stw	fp,28(sp)
    ef1c:	df000704 	addi	fp,sp,28
    OS_TCB    *ptcb;
#if OS_TICK_STEP_EN > 0
    BOOLEAN    step;
#endif
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
    ef20:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_TIME_TICK_HOOK_EN > 0
    OSTimeTickHook();                                      /* Call user definable hook                     */
    ef24:	00174d00 	call	174d0 <OSTimeTickHook>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    ef28:	0005303a 	rdctl	r2,status
    ef2c:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    ef30:	e0fffd17 	ldw	r3,-12(fp)
    ef34:	00bfff84 	movi	r2,-2
    ef38:	1884703a 	and	r2,r3,r2
    ef3c:	1001703a 	wrctl	status,r2
  
  return context;
    ef40:	e0bffd17 	ldw	r2,-12(fp)
#endif
#if OS_TIME_GET_SET_EN > 0
    OS_ENTER_CRITICAL();                                   /* Update the 32-bit tick counter               */
    ef44:	e0bffb15 	stw	r2,-20(fp)
    OSTime++;
    ef48:	d0a73017 	ldw	r2,-25408(gp)
    ef4c:	10800044 	addi	r2,r2,1
    ef50:	d0a73015 	stw	r2,-25408(gp)
    ef54:	e0bffb17 	ldw	r2,-20(fp)
    ef58:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    ef5c:	e0bfff17 	ldw	r2,-4(fp)
    ef60:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
#endif
    if (OSRunning == OS_TRUE) {
    ef64:	d0a72043 	ldbu	r2,-25471(gp)
    ef68:	10803fcc 	andi	r2,r2,255
    ef6c:	10800058 	cmpnei	r2,r2,1
    ef70:	10006a1e 	bne	r2,zero,f11c <OSTimeTick+0x20c>
#if OS_TICK_STEP_EN > 0
        switch (OSTickStepState) {                         /* Determine whether we need to process a tick  */
    ef74:	d0a72403 	ldbu	r2,-25456(gp)
    ef78:	10803fcc 	andi	r2,r2,255
    ef7c:	10c00060 	cmpeqi	r3,r2,1
    ef80:	1800061e 	bne	r3,zero,ef9c <OSTimeTick+0x8c>
    ef84:	10c000a0 	cmpeqi	r3,r2,2
    ef88:	1800061e 	bne	r3,zero,efa4 <OSTimeTick+0x94>
    ef8c:	10000a1e 	bne	r2,zero,efb8 <OSTimeTick+0xa8>
            case OS_TICK_STEP_DIS:                         /* Yes, stepping is disabled                    */
                 step = OS_TRUE;
    ef90:	00800044 	movi	r2,1
    ef94:	e0bffa05 	stb	r2,-24(fp)
                 break;
    ef98:	00000b06 	br	efc8 <OSTimeTick+0xb8>

            case OS_TICK_STEP_WAIT:                        /* No,  waiting for uC/OS-View to set ...       */
                 step = OS_FALSE;                          /*      .. OSTickStepState to OS_TICK_STEP_ONCE */
    ef9c:	e03ffa05 	stb	zero,-24(fp)
                 break;
    efa0:	00000906 	br	efc8 <OSTimeTick+0xb8>

            case OS_TICK_STEP_ONCE:                        /* Yes, process tick once and wait for next ... */
                 step            = OS_TRUE;                /*      ... step command from uC/OS-View        */
    efa4:	00800044 	movi	r2,1
    efa8:	e0bffa05 	stb	r2,-24(fp)
                 OSTickStepState = OS_TICK_STEP_WAIT;
    efac:	00800044 	movi	r2,1
    efb0:	d0a72405 	stb	r2,-25456(gp)
                 break;
    efb4:	00000406 	br	efc8 <OSTimeTick+0xb8>

            default:                                       /* Invalid case, correct situation              */
                 step            = OS_TRUE;
    efb8:	00800044 	movi	r2,1
    efbc:	e0bffa05 	stb	r2,-24(fp)
                 OSTickStepState = OS_TICK_STEP_DIS;
    efc0:	d0272405 	stb	zero,-25456(gp)
                 break;
    efc4:	0001883a 	nop
        }
        if (step == OS_FALSE) {                            /* Return if waiting for step command           */
    efc8:	e0bffa03 	ldbu	r2,-24(fp)
    efcc:	10005226 	beq	r2,zero,f118 <OSTimeTick+0x208>
            return;
        }
#endif
        ptcb = OSTCBList;                                  /* Point at first TCB in TCB list               */
    efd0:	d0a72317 	ldw	r2,-25460(gp)
    efd4:	e0bff915 	stw	r2,-28(fp)
        while (ptcb->OSTCBPrio != OS_TASK_IDLE_PRIO) {     /* Go through all TCBs in TCB list              */
    efd8:	00004906 	br	f100 <OSTimeTick+0x1f0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    efdc:	0005303a 	rdctl	r2,status
    efe0:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    efe4:	e0fffc17 	ldw	r3,-16(fp)
    efe8:	00bfff84 	movi	r2,-2
    efec:	1884703a 	and	r2,r3,r2
    eff0:	1001703a 	wrctl	status,r2
  
  return context;
    eff4:	e0bffc17 	ldw	r2,-16(fp)
            OS_ENTER_CRITICAL();
    eff8:	e0bffb15 	stw	r2,-20(fp)
            if (ptcb->OSTCBDly != 0) {                     /* No, Delayed or waiting for event with TO     */
    effc:	e0bff917 	ldw	r2,-28(fp)
    f000:	10800b8b 	ldhu	r2,46(r2)
    f004:	10bfffcc 	andi	r2,r2,65535
    f008:	10003626 	beq	r2,zero,f0e4 <OSTimeTick+0x1d4>
                if (--ptcb->OSTCBDly == 0) {               /* Decrement nbr of ticks to end of delay       */
    f00c:	e0bff917 	ldw	r2,-28(fp)
    f010:	10800b8b 	ldhu	r2,46(r2)
    f014:	10bfffc4 	addi	r2,r2,-1
    f018:	1007883a 	mov	r3,r2
    f01c:	e0bff917 	ldw	r2,-28(fp)
    f020:	10c00b8d 	sth	r3,46(r2)
    f024:	e0bff917 	ldw	r2,-28(fp)
    f028:	10800b8b 	ldhu	r2,46(r2)
    f02c:	10bfffcc 	andi	r2,r2,65535
    f030:	10002c1e 	bne	r2,zero,f0e4 <OSTimeTick+0x1d4>
                                                           /* Check for timeout                            */
                    if ((ptcb->OSTCBStat & OS_STAT_PEND_ANY) != OS_STAT_RDY) {
    f034:	e0bff917 	ldw	r2,-28(fp)
    f038:	10800c03 	ldbu	r2,48(r2)
    f03c:	10803fcc 	andi	r2,r2,255
    f040:	10800dcc 	andi	r2,r2,55
    f044:	10000b26 	beq	r2,zero,f074 <OSTimeTick+0x164>
                        ptcb->OSTCBStat  &= ~(INT8U)OS_STAT_PEND_ANY;          /* Yes, Clear status flag   */
    f048:	e0bff917 	ldw	r2,-28(fp)
    f04c:	10c00c03 	ldbu	r3,48(r2)
    f050:	00bff204 	movi	r2,-56
    f054:	1884703a 	and	r2,r3,r2
    f058:	1007883a 	mov	r3,r2
    f05c:	e0bff917 	ldw	r2,-28(fp)
    f060:	10c00c05 	stb	r3,48(r2)
                        ptcb->OSTCBStatPend = OS_STAT_PEND_TO;                 /* Indicate PEND timeout    */
    f064:	e0bff917 	ldw	r2,-28(fp)
    f068:	00c00044 	movi	r3,1
    f06c:	10c00c45 	stb	r3,49(r2)
    f070:	00000206 	br	f07c <OSTimeTick+0x16c>
                    } else {
                        ptcb->OSTCBStatPend = OS_STAT_PEND_OK;
    f074:	e0bff917 	ldw	r2,-28(fp)
    f078:	10000c45 	stb	zero,49(r2)
                    }

                    if ((ptcb->OSTCBStat & OS_STAT_SUSPEND) == OS_STAT_RDY) {  /* Is task suspended?       */
    f07c:	e0bff917 	ldw	r2,-28(fp)
    f080:	10800c03 	ldbu	r2,48(r2)
    f084:	10803fcc 	andi	r2,r2,255
    f088:	1080020c 	andi	r2,r2,8
    f08c:	1000151e 	bne	r2,zero,f0e4 <OSTimeTick+0x1d4>
                        OSRdyGrp               |= ptcb->OSTCBBitY;             /* No,  Make ready          */
    f090:	e0bff917 	ldw	r2,-28(fp)
    f094:	10c00d83 	ldbu	r3,54(r2)
    f098:	d0a72c03 	ldbu	r2,-25424(gp)
    f09c:	1884b03a 	or	r2,r3,r2
    f0a0:	d0a72c05 	stb	r2,-25424(gp)
                        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
    f0a4:	e0bff917 	ldw	r2,-28(fp)
    f0a8:	10800d03 	ldbu	r2,52(r2)
    f0ac:	10c03fcc 	andi	r3,r2,255
    f0b0:	e0bff917 	ldw	r2,-28(fp)
    f0b4:	10800d03 	ldbu	r2,52(r2)
    f0b8:	11003fcc 	andi	r4,r2,255
    f0bc:	d0a72c44 	addi	r2,gp,-25423
    f0c0:	2085883a 	add	r2,r4,r2
    f0c4:	11000003 	ldbu	r4,0(r2)
    f0c8:	e0bff917 	ldw	r2,-28(fp)
    f0cc:	10800d43 	ldbu	r2,53(r2)
    f0d0:	2084b03a 	or	r2,r4,r2
    f0d4:	1009883a 	mov	r4,r2
    f0d8:	d0a72c44 	addi	r2,gp,-25423
    f0dc:	1885883a 	add	r2,r3,r2
    f0e0:	11000005 	stb	r4,0(r2)
                    }
                }
            }
            ptcb = ptcb->OSTCBNext;                        /* Point at next TCB in TCB list                */
    f0e4:	e0bff917 	ldw	r2,-28(fp)
    f0e8:	10800517 	ldw	r2,20(r2)
    f0ec:	e0bff915 	stw	r2,-28(fp)
    f0f0:	e0bffb17 	ldw	r2,-20(fp)
    f0f4:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    f0f8:	e0bffe17 	ldw	r2,-8(fp)
    f0fc:	1001703a 	wrctl	status,r2
        if (step == OS_FALSE) {                            /* Return if waiting for step command           */
            return;
        }
#endif
        ptcb = OSTCBList;                                  /* Point at first TCB in TCB list               */
        while (ptcb->OSTCBPrio != OS_TASK_IDLE_PRIO) {     /* Go through all TCBs in TCB list              */
    f100:	e0bff917 	ldw	r2,-28(fp)
    f104:	10800c83 	ldbu	r2,50(r2)
    f108:	10803fcc 	andi	r2,r2,255
    f10c:	10800518 	cmpnei	r2,r2,20
    f110:	103fb21e 	bne	r2,zero,efdc <__alt_data_end+0xfffdefdc>
    f114:	00000106 	br	f11c <OSTimeTick+0x20c>
                 step            = OS_TRUE;
                 OSTickStepState = OS_TICK_STEP_DIS;
                 break;
        }
        if (step == OS_FALSE) {                            /* Return if waiting for step command           */
            return;
    f118:	0001883a 	nop
            }
            ptcb = ptcb->OSTCBNext;                        /* Point at next TCB in TCB list                */
            OS_EXIT_CRITICAL();
        }
    }
}
    f11c:	e037883a 	mov	sp,fp
    f120:	dfc00117 	ldw	ra,4(sp)
    f124:	df000017 	ldw	fp,0(sp)
    f128:	dec00204 	addi	sp,sp,8
    f12c:	f800283a 	ret

0000f130 <OSVersion>:
* Returns    : the version number of uC/OS-II multiplied by 100.
*********************************************************************************************************
*/

INT16U  OSVersion (void)
{
    f130:	deffff04 	addi	sp,sp,-4
    f134:	df000015 	stw	fp,0(sp)
    f138:	d839883a 	mov	fp,sp
    return (OS_VERSION);
    f13c:	00804784 	movi	r2,286
}
    f140:	e037883a 	mov	sp,fp
    f144:	df000017 	ldw	fp,0(sp)
    f148:	dec00104 	addi	sp,sp,4
    f14c:	f800283a 	ret

0000f150 <OS_Dummy>:
*********************************************************************************************************
*/

#if OS_TASK_DEL_EN > 0
void  OS_Dummy (void)
{
    f150:	deffff04 	addi	sp,sp,-4
    f154:	df000015 	stw	fp,0(sp)
    f158:	d839883a 	mov	fp,sp
}
    f15c:	0001883a 	nop
    f160:	e037883a 	mov	sp,fp
    f164:	df000017 	ldw	fp,0(sp)
    f168:	dec00104 	addi	sp,sp,4
    f16c:	f800283a 	ret

0000f170 <OS_EventTaskRdy>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
INT8U  OS_EventTaskRdy (OS_EVENT *pevent, void *pmsg, INT8U msk, INT8U pend_stat)
{
    f170:	defff804 	addi	sp,sp,-32
    f174:	dfc00715 	stw	ra,28(sp)
    f178:	df000615 	stw	fp,24(sp)
    f17c:	df000604 	addi	fp,sp,24
    f180:	e13ffc15 	stw	r4,-16(fp)
    f184:	e17ffd15 	stw	r5,-12(fp)
    f188:	3007883a 	mov	r3,r6
    f18c:	3805883a 	mov	r2,r7
    f190:	e0fffe05 	stb	r3,-8(fp)
    f194:	e0bfff05 	stb	r2,-4(fp)
    INT16U  *ptbl;
#endif


#if OS_LOWEST_PRIO <= 63
    y    = OSUnMapTbl[pevent->OSEventGrp];              /* Find HPT waiting for message                */
    f198:	e0bffc17 	ldw	r2,-16(fp)
    f19c:	10800283 	ldbu	r2,10(r2)
    f1a0:	10c03fcc 	andi	r3,r2,255
    f1a4:	00800074 	movhi	r2,1
    f1a8:	109fab04 	addi	r2,r2,32428
    f1ac:	10c5883a 	add	r2,r2,r3
    f1b0:	10800003 	ldbu	r2,0(r2)
    f1b4:	e0bffa05 	stb	r2,-24(fp)
    x    = OSUnMapTbl[pevent->OSEventTbl[y]];
    f1b8:	e0bffa03 	ldbu	r2,-24(fp)
    f1bc:	e0fffc17 	ldw	r3,-16(fp)
    f1c0:	1885883a 	add	r2,r3,r2
    f1c4:	108002c4 	addi	r2,r2,11
    f1c8:	10800003 	ldbu	r2,0(r2)
    f1cc:	10c03fcc 	andi	r3,r2,255
    f1d0:	00800074 	movhi	r2,1
    f1d4:	109fab04 	addi	r2,r2,32428
    f1d8:	10c5883a 	add	r2,r2,r3
    f1dc:	10800003 	ldbu	r2,0(r2)
    f1e0:	e0bffa45 	stb	r2,-23(fp)
    prio = (INT8U)((y << 3) + x);                       /* Find priority of task getting the msg       */
    f1e4:	e0bffa03 	ldbu	r2,-24(fp)
    f1e8:	100490fa 	slli	r2,r2,3
    f1ec:	1007883a 	mov	r3,r2
    f1f0:	e0bffa43 	ldbu	r2,-23(fp)
    f1f4:	1885883a 	add	r2,r3,r2
    f1f8:	e0bffa85 	stb	r2,-22(fp)
        x = OSUnMapTbl[(*ptbl >> 8) & 0xFF] + 8;
    }
    prio = (INT8U)((y << 4) + x);                       /* Find priority of task getting the msg       */
#endif

    ptcb                  =  OSTCBPrioTbl[prio];        /* Point to this task's OS_TCB                 */
    f1fc:	e0fffa83 	ldbu	r3,-22(fp)
    f200:	008000b4 	movhi	r2,2
    f204:	10be9904 	addi	r2,r2,-1436
    f208:	18c7883a 	add	r3,r3,r3
    f20c:	18c7883a 	add	r3,r3,r3
    f210:	10c5883a 	add	r2,r2,r3
    f214:	10800017 	ldw	r2,0(r2)
    f218:	e0bffb15 	stw	r2,-20(fp)
    ptcb->OSTCBDly        =  0;                         /* Prevent OSTimeTick() from readying task     */
    f21c:	e0bffb17 	ldw	r2,-20(fp)
    f220:	10000b8d 	sth	zero,46(r2)
#if ((OS_Q_EN > 0) && (OS_MAX_QS > 0)) || (OS_MBOX_EN > 0)
    ptcb->OSTCBMsg        =  pmsg;                      /* Send message directly to waiting task       */
    f224:	e0bffb17 	ldw	r2,-20(fp)
    f228:	e0fffd17 	ldw	r3,-12(fp)
    f22c:	10c00915 	stw	r3,36(r2)
#else
    pmsg                  =  pmsg;                      /* Prevent compiler warning if not used        */
#endif
    ptcb->OSTCBStat      &= ~msk;                       /* Clear bit associated with event type        */
    f230:	e0bffb17 	ldw	r2,-20(fp)
    f234:	10800c03 	ldbu	r2,48(r2)
    f238:	1007883a 	mov	r3,r2
    f23c:	e0bffe03 	ldbu	r2,-8(fp)
    f240:	0084303a 	nor	r2,zero,r2
    f244:	1884703a 	and	r2,r3,r2
    f248:	1007883a 	mov	r3,r2
    f24c:	e0bffb17 	ldw	r2,-20(fp)
    f250:	10c00c05 	stb	r3,48(r2)
    ptcb->OSTCBStatPend   =  pend_stat;                 /* Set pend status of post or abort            */
    f254:	e0bffb17 	ldw	r2,-20(fp)
    f258:	e0ffff03 	ldbu	r3,-4(fp)
    f25c:	10c00c45 	stb	r3,49(r2)
                                                        /* See if task is ready (could be susp'd)      */
    if ((ptcb->OSTCBStat &   OS_STAT_SUSPEND) == OS_STAT_RDY) {
    f260:	e0bffb17 	ldw	r2,-20(fp)
    f264:	10800c03 	ldbu	r2,48(r2)
    f268:	10803fcc 	andi	r2,r2,255
    f26c:	1080020c 	andi	r2,r2,8
    f270:	1000111e 	bne	r2,zero,f2b8 <OS_EventTaskRdy+0x148>
        OSRdyGrp         |=  ptcb->OSTCBBitY;           /* Put task in the ready to run list           */
    f274:	e0bffb17 	ldw	r2,-20(fp)
    f278:	10c00d83 	ldbu	r3,54(r2)
    f27c:	d0a72c03 	ldbu	r2,-25424(gp)
    f280:	1884b03a 	or	r2,r3,r2
    f284:	d0a72c05 	stb	r2,-25424(gp)
        OSRdyTbl[y]      |=  ptcb->OSTCBBitX;
    f288:	e0fffa03 	ldbu	r3,-24(fp)
    f28c:	e13ffa03 	ldbu	r4,-24(fp)
    f290:	d0a72c44 	addi	r2,gp,-25423
    f294:	2085883a 	add	r2,r4,r2
    f298:	11000003 	ldbu	r4,0(r2)
    f29c:	e0bffb17 	ldw	r2,-20(fp)
    f2a0:	10800d43 	ldbu	r2,53(r2)
    f2a4:	2084b03a 	or	r2,r4,r2
    f2a8:	1009883a 	mov	r4,r2
    f2ac:	d0a72c44 	addi	r2,gp,-25423
    f2b0:	1885883a 	add	r2,r3,r2
    f2b4:	11000005 	stb	r4,0(r2)
    }

    OS_EventTaskRemove(ptcb, pevent);                   /* Remove this task from event   wait list     */
    f2b8:	e17ffc17 	ldw	r5,-16(fp)
    f2bc:	e13ffb17 	ldw	r4,-20(fp)
    f2c0:	000f5680 	call	f568 <OS_EventTaskRemove>
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {   /* Remove this task from events' wait lists    */
    f2c4:	e0bffb17 	ldw	r2,-20(fp)
    f2c8:	10800817 	ldw	r2,32(r2)
    f2cc:	10000826 	beq	r2,zero,f2f0 <OS_EventTaskRdy+0x180>
        OS_EventTaskRemoveMulti(ptcb, ptcb->OSTCBEventMultiPtr);
    f2d0:	e0bffb17 	ldw	r2,-20(fp)
    f2d4:	10800817 	ldw	r2,32(r2)
    f2d8:	100b883a 	mov	r5,r2
    f2dc:	e13ffb17 	ldw	r4,-20(fp)
    f2e0:	000f6200 	call	f620 <OS_EventTaskRemoveMulti>
        ptcb->OSTCBEventPtr       = (OS_EVENT  *)pevent;/* Return event as first multi-pend event ready*/
    f2e4:	e0bffb17 	ldw	r2,-20(fp)
    f2e8:	e0fffc17 	ldw	r3,-16(fp)
    f2ec:	10c00715 	stw	r3,28(r2)
    }
#endif

    return (prio);
    f2f0:	e0bffa83 	ldbu	r2,-22(fp)
}
    f2f4:	e037883a 	mov	sp,fp
    f2f8:	dfc00117 	ldw	ra,4(sp)
    f2fc:	df000017 	ldw	fp,0(sp)
    f300:	dec00204 	addi	sp,sp,8
    f304:	f800283a 	ret

0000f308 <OS_EventTaskWait>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
void  OS_EventTaskWait (OS_EVENT *pevent)
{
    f308:	defffd04 	addi	sp,sp,-12
    f30c:	df000215 	stw	fp,8(sp)
    f310:	df000204 	addi	fp,sp,8
    f314:	e13fff15 	stw	r4,-4(fp)
    INT8U  y;


    OSTCBCur->OSTCBEventPtr               = pevent;                 /* Store ptr to ECB in TCB         */
    f318:	d0a72f17 	ldw	r2,-25412(gp)
    f31c:	e0ffff17 	ldw	r3,-4(fp)
    f320:	10c00715 	stw	r3,28(r2)

    pevent->OSEventTbl[OSTCBCur->OSTCBY] |= OSTCBCur->OSTCBBitX;    /* Put task in waiting list        */
    f324:	d0a72f17 	ldw	r2,-25412(gp)
    f328:	10800d03 	ldbu	r2,52(r2)
    f32c:	10803fcc 	andi	r2,r2,255
    f330:	d0e72f17 	ldw	r3,-25412(gp)
    f334:	18c00d03 	ldbu	r3,52(r3)
    f338:	18c03fcc 	andi	r3,r3,255
    f33c:	e13fff17 	ldw	r4,-4(fp)
    f340:	20c7883a 	add	r3,r4,r3
    f344:	18c002c4 	addi	r3,r3,11
    f348:	19000003 	ldbu	r4,0(r3)
    f34c:	d0e72f17 	ldw	r3,-25412(gp)
    f350:	18c00d43 	ldbu	r3,53(r3)
    f354:	20c6b03a 	or	r3,r4,r3
    f358:	1809883a 	mov	r4,r3
    f35c:	e0ffff17 	ldw	r3,-4(fp)
    f360:	1885883a 	add	r2,r3,r2
    f364:	108002c4 	addi	r2,r2,11
    f368:	11000005 	stb	r4,0(r2)
    pevent->OSEventGrp                   |= OSTCBCur->OSTCBBitY;
    f36c:	e0bfff17 	ldw	r2,-4(fp)
    f370:	10c00283 	ldbu	r3,10(r2)
    f374:	d0a72f17 	ldw	r2,-25412(gp)
    f378:	10800d83 	ldbu	r2,54(r2)
    f37c:	1884b03a 	or	r2,r3,r2
    f380:	1007883a 	mov	r3,r2
    f384:	e0bfff17 	ldw	r2,-4(fp)
    f388:	10c00285 	stb	r3,10(r2)

    y             =  OSTCBCur->OSTCBY;            /* Task no longer ready                              */
    f38c:	d0a72f17 	ldw	r2,-25412(gp)
    f390:	10800d03 	ldbu	r2,52(r2)
    f394:	e0bffe05 	stb	r2,-8(fp)
    OSRdyTbl[y]  &= ~OSTCBCur->OSTCBBitX;
    f398:	e0fffe03 	ldbu	r3,-8(fp)
    f39c:	e13ffe03 	ldbu	r4,-8(fp)
    f3a0:	d0a72c44 	addi	r2,gp,-25423
    f3a4:	2085883a 	add	r2,r4,r2
    f3a8:	10800003 	ldbu	r2,0(r2)
    f3ac:	1009883a 	mov	r4,r2
    f3b0:	d0a72f17 	ldw	r2,-25412(gp)
    f3b4:	10800d43 	ldbu	r2,53(r2)
    f3b8:	0084303a 	nor	r2,zero,r2
    f3bc:	2084703a 	and	r2,r4,r2
    f3c0:	1009883a 	mov	r4,r2
    f3c4:	d0a72c44 	addi	r2,gp,-25423
    f3c8:	1885883a 	add	r2,r3,r2
    f3cc:	11000005 	stb	r4,0(r2)
    if (OSRdyTbl[y] == 0) {
    f3d0:	e0fffe03 	ldbu	r3,-8(fp)
    f3d4:	d0a72c44 	addi	r2,gp,-25423
    f3d8:	1885883a 	add	r2,r3,r2
    f3dc:	10800003 	ldbu	r2,0(r2)
    f3e0:	10803fcc 	andi	r2,r2,255
    f3e4:	1000071e 	bne	r2,zero,f404 <OS_EventTaskWait+0xfc>
        OSRdyGrp &= ~OSTCBCur->OSTCBBitY;         /* Clear event grp bit if this was only task pending */
    f3e8:	d0a72f17 	ldw	r2,-25412(gp)
    f3ec:	10800d83 	ldbu	r2,54(r2)
    f3f0:	0084303a 	nor	r2,zero,r2
    f3f4:	1007883a 	mov	r3,r2
    f3f8:	d0a72c03 	ldbu	r2,-25424(gp)
    f3fc:	1884703a 	and	r2,r3,r2
    f400:	d0a72c05 	stb	r2,-25424(gp)
    }
}
    f404:	0001883a 	nop
    f408:	e037883a 	mov	sp,fp
    f40c:	df000017 	ldw	fp,0(sp)
    f410:	dec00104 	addi	sp,sp,4
    f414:	f800283a 	ret

0000f418 <OS_EventTaskWaitMulti>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if ((OS_EVENT_EN) && (OS_EVENT_MULTI_EN > 0))
void  OS_EventTaskWaitMulti (OS_EVENT **pevents_wait)
{
    f418:	defffb04 	addi	sp,sp,-20
    f41c:	df000415 	stw	fp,16(sp)
    f420:	df000404 	addi	fp,sp,16
    f424:	e13fff15 	stw	r4,-4(fp)
    OS_EVENT **pevents;
    OS_EVENT  *pevent;
    INT8U      y;


    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;
    f428:	d0a72f17 	ldw	r2,-25412(gp)
    f42c:	10000715 	stw	zero,28(r2)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)pevents_wait;       /* Store ptr to ECBs in TCB        */
    f430:	d0a72f17 	ldw	r2,-25412(gp)
    f434:	e0ffff17 	ldw	r3,-4(fp)
    f438:	10c00815 	stw	r3,32(r2)

    pevents =  pevents_wait;
    f43c:	e0bfff17 	ldw	r2,-4(fp)
    f440:	e0bffc15 	stw	r2,-16(fp)
    pevent  = *pevents;
    f444:	e0bffc17 	ldw	r2,-16(fp)
    f448:	10800017 	ldw	r2,0(r2)
    f44c:	e0bffd15 	stw	r2,-12(fp)
    while (pevent != (OS_EVENT *)0) {                               /* Put task in waiting lists       */
    f450:	00002006 	br	f4d4 <OS_EventTaskWaitMulti+0xbc>
        pevent->OSEventTbl[OSTCBCur->OSTCBY] |= OSTCBCur->OSTCBBitX;
    f454:	d0a72f17 	ldw	r2,-25412(gp)
    f458:	10800d03 	ldbu	r2,52(r2)
    f45c:	10803fcc 	andi	r2,r2,255
    f460:	d0e72f17 	ldw	r3,-25412(gp)
    f464:	18c00d03 	ldbu	r3,52(r3)
    f468:	18c03fcc 	andi	r3,r3,255
    f46c:	e13ffd17 	ldw	r4,-12(fp)
    f470:	20c7883a 	add	r3,r4,r3
    f474:	18c002c4 	addi	r3,r3,11
    f478:	19000003 	ldbu	r4,0(r3)
    f47c:	d0e72f17 	ldw	r3,-25412(gp)
    f480:	18c00d43 	ldbu	r3,53(r3)
    f484:	20c6b03a 	or	r3,r4,r3
    f488:	1809883a 	mov	r4,r3
    f48c:	e0fffd17 	ldw	r3,-12(fp)
    f490:	1885883a 	add	r2,r3,r2
    f494:	108002c4 	addi	r2,r2,11
    f498:	11000005 	stb	r4,0(r2)
        pevent->OSEventGrp                   |= OSTCBCur->OSTCBBitY;
    f49c:	e0bffd17 	ldw	r2,-12(fp)
    f4a0:	10c00283 	ldbu	r3,10(r2)
    f4a4:	d0a72f17 	ldw	r2,-25412(gp)
    f4a8:	10800d83 	ldbu	r2,54(r2)
    f4ac:	1884b03a 	or	r2,r3,r2
    f4b0:	1007883a 	mov	r3,r2
    f4b4:	e0bffd17 	ldw	r2,-12(fp)
    f4b8:	10c00285 	stb	r3,10(r2)
        pevents++;
    f4bc:	e0bffc17 	ldw	r2,-16(fp)
    f4c0:	10800104 	addi	r2,r2,4
    f4c4:	e0bffc15 	stw	r2,-16(fp)
        pevent = *pevents;
    f4c8:	e0bffc17 	ldw	r2,-16(fp)
    f4cc:	10800017 	ldw	r2,0(r2)
    f4d0:	e0bffd15 	stw	r2,-12(fp)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)pevents_wait;       /* Store ptr to ECBs in TCB        */

    pevents =  pevents_wait;
    pevent  = *pevents;
    while (pevent != (OS_EVENT *)0) {                               /* Put task in waiting lists       */
    f4d4:	e0bffd17 	ldw	r2,-12(fp)
    f4d8:	103fde1e 	bne	r2,zero,f454 <__alt_data_end+0xfffdf454>
        pevent->OSEventGrp                   |= OSTCBCur->OSTCBBitY;
        pevents++;
        pevent = *pevents;
    }

    y             =  OSTCBCur->OSTCBY;            /* Task no longer ready                              */
    f4dc:	d0a72f17 	ldw	r2,-25412(gp)
    f4e0:	10800d03 	ldbu	r2,52(r2)
    f4e4:	e0bffe05 	stb	r2,-8(fp)
    OSRdyTbl[y]  &= ~OSTCBCur->OSTCBBitX;
    f4e8:	e0fffe03 	ldbu	r3,-8(fp)
    f4ec:	e13ffe03 	ldbu	r4,-8(fp)
    f4f0:	d0a72c44 	addi	r2,gp,-25423
    f4f4:	2085883a 	add	r2,r4,r2
    f4f8:	10800003 	ldbu	r2,0(r2)
    f4fc:	1009883a 	mov	r4,r2
    f500:	d0a72f17 	ldw	r2,-25412(gp)
    f504:	10800d43 	ldbu	r2,53(r2)
    f508:	0084303a 	nor	r2,zero,r2
    f50c:	2084703a 	and	r2,r4,r2
    f510:	1009883a 	mov	r4,r2
    f514:	d0a72c44 	addi	r2,gp,-25423
    f518:	1885883a 	add	r2,r3,r2
    f51c:	11000005 	stb	r4,0(r2)
    if (OSRdyTbl[y] == 0) {
    f520:	e0fffe03 	ldbu	r3,-8(fp)
    f524:	d0a72c44 	addi	r2,gp,-25423
    f528:	1885883a 	add	r2,r3,r2
    f52c:	10800003 	ldbu	r2,0(r2)
    f530:	10803fcc 	andi	r2,r2,255
    f534:	1000071e 	bne	r2,zero,f554 <OS_EventTaskWaitMulti+0x13c>
        OSRdyGrp &= ~OSTCBCur->OSTCBBitY;         /* Clear event grp bit if this was only task pending */
    f538:	d0a72f17 	ldw	r2,-25412(gp)
    f53c:	10800d83 	ldbu	r2,54(r2)
    f540:	0084303a 	nor	r2,zero,r2
    f544:	1007883a 	mov	r3,r2
    f548:	d0a72c03 	ldbu	r2,-25424(gp)
    f54c:	1884703a 	and	r2,r3,r2
    f550:	d0a72c05 	stb	r2,-25424(gp)
    }
}
    f554:	0001883a 	nop
    f558:	e037883a 	mov	sp,fp
    f55c:	df000017 	ldw	fp,0(sp)
    f560:	dec00104 	addi	sp,sp,4
    f564:	f800283a 	ret

0000f568 <OS_EventTaskRemove>:
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
void  OS_EventTaskRemove (OS_TCB   *ptcb,
                          OS_EVENT *pevent)
{
    f568:	defffc04 	addi	sp,sp,-16
    f56c:	df000315 	stw	fp,12(sp)
    f570:	df000304 	addi	fp,sp,12
    f574:	e13ffe15 	stw	r4,-8(fp)
    f578:	e17fff15 	stw	r5,-4(fp)
    INT8U  y;


    y                       =  ptcb->OSTCBY;
    f57c:	e0bffe17 	ldw	r2,-8(fp)
    f580:	10800d03 	ldbu	r2,52(r2)
    f584:	e0bffd05 	stb	r2,-12(fp)
    pevent->OSEventTbl[y]  &= ~ptcb->OSTCBBitX;         /* Remove task from wait list                  */
    f588:	e0bffd03 	ldbu	r2,-12(fp)
    f58c:	e0fffd03 	ldbu	r3,-12(fp)
    f590:	e13fff17 	ldw	r4,-4(fp)
    f594:	20c7883a 	add	r3,r4,r3
    f598:	18c002c4 	addi	r3,r3,11
    f59c:	18c00003 	ldbu	r3,0(r3)
    f5a0:	1809883a 	mov	r4,r3
    f5a4:	e0fffe17 	ldw	r3,-8(fp)
    f5a8:	18c00d43 	ldbu	r3,53(r3)
    f5ac:	00c6303a 	nor	r3,zero,r3
    f5b0:	20c6703a 	and	r3,r4,r3
    f5b4:	1809883a 	mov	r4,r3
    f5b8:	e0ffff17 	ldw	r3,-4(fp)
    f5bc:	1885883a 	add	r2,r3,r2
    f5c0:	108002c4 	addi	r2,r2,11
    f5c4:	11000005 	stb	r4,0(r2)
    if (pevent->OSEventTbl[y] == 0) {
    f5c8:	e0bffd03 	ldbu	r2,-12(fp)
    f5cc:	e0ffff17 	ldw	r3,-4(fp)
    f5d0:	1885883a 	add	r2,r3,r2
    f5d4:	108002c4 	addi	r2,r2,11
    f5d8:	10800003 	ldbu	r2,0(r2)
    f5dc:	10803fcc 	andi	r2,r2,255
    f5e0:	10000a1e 	bne	r2,zero,f60c <OS_EventTaskRemove+0xa4>
        pevent->OSEventGrp &= ~ptcb->OSTCBBitY;
    f5e4:	e0bfff17 	ldw	r2,-4(fp)
    f5e8:	10800283 	ldbu	r2,10(r2)
    f5ec:	1007883a 	mov	r3,r2
    f5f0:	e0bffe17 	ldw	r2,-8(fp)
    f5f4:	10800d83 	ldbu	r2,54(r2)
    f5f8:	0084303a 	nor	r2,zero,r2
    f5fc:	1884703a 	and	r2,r3,r2
    f600:	1007883a 	mov	r3,r2
    f604:	e0bfff17 	ldw	r2,-4(fp)
    f608:	10c00285 	stb	r3,10(r2)
    }
}
    f60c:	0001883a 	nop
    f610:	e037883a 	mov	sp,fp
    f614:	df000017 	ldw	fp,0(sp)
    f618:	dec00104 	addi	sp,sp,4
    f61c:	f800283a 	ret

0000f620 <OS_EventTaskRemoveMulti>:
*********************************************************************************************************
*/
#if ((OS_EVENT_EN) && (OS_EVENT_MULTI_EN > 0))
void  OS_EventTaskRemoveMulti (OS_TCB    *ptcb,
                               OS_EVENT **pevents_multi)
{
    f620:	defffa04 	addi	sp,sp,-24
    f624:	df000515 	stw	fp,20(sp)
    f628:	df000504 	addi	fp,sp,20
    f62c:	e13ffe15 	stw	r4,-8(fp)
    f630:	e17fff15 	stw	r5,-4(fp)
    INT16U     bity;
    INT16U     bitx;
#endif


    y       =  ptcb->OSTCBY;
    f634:	e0bffe17 	ldw	r2,-8(fp)
    f638:	10800d03 	ldbu	r2,52(r2)
    f63c:	e0bffd05 	stb	r2,-12(fp)
    bity    =  ptcb->OSTCBBitY;
    f640:	e0bffe17 	ldw	r2,-8(fp)
    f644:	10800d83 	ldbu	r2,54(r2)
    f648:	e0bffd45 	stb	r2,-11(fp)
    bitx    =  ptcb->OSTCBBitX;
    f64c:	e0bffe17 	ldw	r2,-8(fp)
    f650:	10800d43 	ldbu	r2,53(r2)
    f654:	e0bffd85 	stb	r2,-10(fp)
    pevents =  pevents_multi;
    f658:	e0bfff17 	ldw	r2,-4(fp)
    f65c:	e0bffb15 	stw	r2,-20(fp)
    pevent  = *pevents;
    f660:	e0bffb17 	ldw	r2,-20(fp)
    f664:	10800017 	ldw	r2,0(r2)
    f668:	e0bffc15 	stw	r2,-16(fp)
    while (pevent != (OS_EVENT *)0) {                   /* Remove task from all events' wait lists     */
    f66c:	00002506 	br	f704 <OS_EventTaskRemoveMulti+0xe4>
        pevent->OSEventTbl[y]  &= ~bitx;
    f670:	e0bffd03 	ldbu	r2,-12(fp)
    f674:	e0fffd03 	ldbu	r3,-12(fp)
    f678:	e13ffc17 	ldw	r4,-16(fp)
    f67c:	20c7883a 	add	r3,r4,r3
    f680:	18c002c4 	addi	r3,r3,11
    f684:	18c00003 	ldbu	r3,0(r3)
    f688:	1809883a 	mov	r4,r3
    f68c:	e0fffd83 	ldbu	r3,-10(fp)
    f690:	00c6303a 	nor	r3,zero,r3
    f694:	20c6703a 	and	r3,r4,r3
    f698:	1809883a 	mov	r4,r3
    f69c:	e0fffc17 	ldw	r3,-16(fp)
    f6a0:	1885883a 	add	r2,r3,r2
    f6a4:	108002c4 	addi	r2,r2,11
    f6a8:	11000005 	stb	r4,0(r2)
        if (pevent->OSEventTbl[y] == 0) {
    f6ac:	e0bffd03 	ldbu	r2,-12(fp)
    f6b0:	e0fffc17 	ldw	r3,-16(fp)
    f6b4:	1885883a 	add	r2,r3,r2
    f6b8:	108002c4 	addi	r2,r2,11
    f6bc:	10800003 	ldbu	r2,0(r2)
    f6c0:	10803fcc 	andi	r2,r2,255
    f6c4:	1000091e 	bne	r2,zero,f6ec <OS_EventTaskRemoveMulti+0xcc>
            pevent->OSEventGrp &= ~bity;
    f6c8:	e0bffc17 	ldw	r2,-16(fp)
    f6cc:	10800283 	ldbu	r2,10(r2)
    f6d0:	1007883a 	mov	r3,r2
    f6d4:	e0bffd43 	ldbu	r2,-11(fp)
    f6d8:	0084303a 	nor	r2,zero,r2
    f6dc:	1884703a 	and	r2,r3,r2
    f6e0:	1007883a 	mov	r3,r2
    f6e4:	e0bffc17 	ldw	r2,-16(fp)
    f6e8:	10c00285 	stb	r3,10(r2)
        }
        pevents++;
    f6ec:	e0bffb17 	ldw	r2,-20(fp)
    f6f0:	10800104 	addi	r2,r2,4
    f6f4:	e0bffb15 	stw	r2,-20(fp)
        pevent = *pevents;
    f6f8:	e0bffb17 	ldw	r2,-20(fp)
    f6fc:	10800017 	ldw	r2,0(r2)
    f700:	e0bffc15 	stw	r2,-16(fp)
    y       =  ptcb->OSTCBY;
    bity    =  ptcb->OSTCBBitY;
    bitx    =  ptcb->OSTCBBitX;
    pevents =  pevents_multi;
    pevent  = *pevents;
    while (pevent != (OS_EVENT *)0) {                   /* Remove task from all events' wait lists     */
    f704:	e0bffc17 	ldw	r2,-16(fp)
    f708:	103fd91e 	bne	r2,zero,f670 <__alt_data_end+0xfffdf670>
            pevent->OSEventGrp &= ~bity;
        }
        pevents++;
        pevent = *pevents;
    }
}
    f70c:	0001883a 	nop
    f710:	e037883a 	mov	sp,fp
    f714:	df000017 	ldw	fp,0(sp)
    f718:	dec00104 	addi	sp,sp,4
    f71c:	f800283a 	ret

0000f720 <OS_EventWaitListInit>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
void  OS_EventWaitListInit (OS_EVENT *pevent)
{
    f720:	defffc04 	addi	sp,sp,-16
    f724:	df000315 	stw	fp,12(sp)
    f728:	df000304 	addi	fp,sp,12
    f72c:	e13fff15 	stw	r4,-4(fp)
    INT16U *ptbl;
#endif
    INT8U   i;


    pevent->OSEventGrp = 0;                      /* No task waiting on event                           */
    f730:	e0bfff17 	ldw	r2,-4(fp)
    f734:	10000285 	stb	zero,10(r2)
    ptbl               = &pevent->OSEventTbl[0];
    f738:	e0bfff17 	ldw	r2,-4(fp)
    f73c:	108002c4 	addi	r2,r2,11
    f740:	e0bffd15 	stw	r2,-12(fp)

    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
    f744:	e03ffe05 	stb	zero,-8(fp)
    f748:	00000706 	br	f768 <OS_EventWaitListInit+0x48>
        *ptbl++ = 0;
    f74c:	e0bffd17 	ldw	r2,-12(fp)
    f750:	10c00044 	addi	r3,r2,1
    f754:	e0fffd15 	stw	r3,-12(fp)
    f758:	10000005 	stb	zero,0(r2)


    pevent->OSEventGrp = 0;                      /* No task waiting on event                           */
    ptbl               = &pevent->OSEventTbl[0];

    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
    f75c:	e0bffe03 	ldbu	r2,-8(fp)
    f760:	10800044 	addi	r2,r2,1
    f764:	e0bffe05 	stb	r2,-8(fp)
    f768:	e0bffe03 	ldbu	r2,-8(fp)
    f76c:	108000f0 	cmpltui	r2,r2,3
    f770:	103ff61e 	bne	r2,zero,f74c <__alt_data_end+0xfffdf74c>
        *ptbl++ = 0;
    }
}
    f774:	0001883a 	nop
    f778:	e037883a 	mov	sp,fp
    f77c:	df000017 	ldw	fp,0(sp)
    f780:	dec00104 	addi	sp,sp,4
    f784:	f800283a 	ret

0000f788 <OS_InitEventList>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitEventList (void)
{
    f788:	defffb04 	addi	sp,sp,-20
    f78c:	dfc00415 	stw	ra,16(sp)
    f790:	df000315 	stw	fp,12(sp)
    f794:	df000304 	addi	fp,sp,12
    INT16U     i;
    OS_EVENT  *pevent1;
    OS_EVENT  *pevent2;


    OS_MemClr((INT8U *)&OSEventTbl[0], sizeof(OSEventTbl)); /* Clear the event table                   */
    f798:	0142d004 	movi	r5,2880
    f79c:	010000b4 	movhi	r4,2
    f7a0:	213a8504 	addi	r4,r4,-5612
    f7a4:	000fb000 	call	fb00 <OS_MemClr>
    pevent1 = &OSEventTbl[0];
    f7a8:	008000b4 	movhi	r2,2
    f7ac:	10ba8504 	addi	r2,r2,-5612
    f7b0:	e0bffe15 	stw	r2,-8(fp)
    pevent2 = &OSEventTbl[1];
    f7b4:	008000b4 	movhi	r2,2
    f7b8:	10ba9104 	addi	r2,r2,-5564
    f7bc:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < (OS_MAX_EVENTS - 1); i++) {             /* Init. list of free EVENT control blocks */
    f7c0:	e03ffd0d 	sth	zero,-12(fp)
    f7c4:	00001306 	br	f814 <OS_InitEventList+0x8c>
        pevent1->OSEventType    = OS_EVENT_TYPE_UNUSED;
    f7c8:	e0bffe17 	ldw	r2,-8(fp)
    f7cc:	10000005 	stb	zero,0(r2)
        pevent1->OSEventPtr     = pevent2;
    f7d0:	e0bffe17 	ldw	r2,-8(fp)
    f7d4:	e0ffff17 	ldw	r3,-4(fp)
    f7d8:	10c00115 	stw	r3,4(r2)
#if OS_EVENT_NAME_SIZE > 1
        pevent1->OSEventName[0] = '?';                      /* Unknown name                            */
    f7dc:	e0bffe17 	ldw	r2,-8(fp)
    f7e0:	00c00fc4 	movi	r3,63
    f7e4:	10c00385 	stb	r3,14(r2)
        pevent1->OSEventName[1] = OS_ASCII_NUL;
    f7e8:	e0bffe17 	ldw	r2,-8(fp)
    f7ec:	100003c5 	stb	zero,15(r2)
#endif
        pevent1++;
    f7f0:	e0bffe17 	ldw	r2,-8(fp)
    f7f4:	10800c04 	addi	r2,r2,48
    f7f8:	e0bffe15 	stw	r2,-8(fp)
        pevent2++;
    f7fc:	e0bfff17 	ldw	r2,-4(fp)
    f800:	10800c04 	addi	r2,r2,48
    f804:	e0bfff15 	stw	r2,-4(fp)


    OS_MemClr((INT8U *)&OSEventTbl[0], sizeof(OSEventTbl)); /* Clear the event table                   */
    pevent1 = &OSEventTbl[0];
    pevent2 = &OSEventTbl[1];
    for (i = 0; i < (OS_MAX_EVENTS - 1); i++) {             /* Init. list of free EVENT control blocks */
    f808:	e0bffd0b 	ldhu	r2,-12(fp)
    f80c:	10800044 	addi	r2,r2,1
    f810:	e0bffd0d 	sth	r2,-12(fp)
    f814:	e0bffd0b 	ldhu	r2,-12(fp)
    f818:	10800ef0 	cmpltui	r2,r2,59
    f81c:	103fea1e 	bne	r2,zero,f7c8 <__alt_data_end+0xfffdf7c8>
        pevent1->OSEventName[1] = OS_ASCII_NUL;
#endif
        pevent1++;
        pevent2++;
    }
    pevent1->OSEventType            = OS_EVENT_TYPE_UNUSED;
    f820:	e0bffe17 	ldw	r2,-8(fp)
    f824:	10000005 	stb	zero,0(r2)
    pevent1->OSEventPtr             = (OS_EVENT *)0;
    f828:	e0bffe17 	ldw	r2,-8(fp)
    f82c:	10000115 	stw	zero,4(r2)
#if OS_EVENT_NAME_SIZE > 1
    pevent1->OSEventName[0]         = '?';
    f830:	e0bffe17 	ldw	r2,-8(fp)
    f834:	00c00fc4 	movi	r3,63
    f838:	10c00385 	stb	r3,14(r2)
    pevent1->OSEventName[1]         = OS_ASCII_NUL;
    f83c:	e0bffe17 	ldw	r2,-8(fp)
    f840:	100003c5 	stb	zero,15(r2)
#endif
    OSEventFreeList                 = &OSEventTbl[0];
    f844:	008000b4 	movhi	r2,2
    f848:	10ba8504 	addi	r2,r2,-5612
    f84c:	d0a72d15 	stw	r2,-25420(gp)
    OSEventFreeList->OSEventName[0] = '?';                  /* Unknown name                            */
    OSEventFreeList->OSEventName[1] = OS_ASCII_NUL;
#endif
#endif
#endif
}
    f850:	0001883a 	nop
    f854:	e037883a 	mov	sp,fp
    f858:	dfc00117 	ldw	ra,4(sp)
    f85c:	df000017 	ldw	fp,0(sp)
    f860:	dec00204 	addi	sp,sp,8
    f864:	f800283a 	ret

0000f868 <OS_InitMisc>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitMisc (void)
{
    f868:	deffff04 	addi	sp,sp,-4
    f86c:	df000015 	stw	fp,0(sp)
    f870:	d839883a 	mov	fp,sp
#if OS_TIME_GET_SET_EN > 0
    OSTime        = 0L;                                    /* Clear the 32-bit system clock            */
    f874:	d0273015 	stw	zero,-25408(gp)
#endif

    OSIntNesting  = 0;                                     /* Clear the interrupt nesting counter      */
    f878:	d0272e05 	stb	zero,-25416(gp)
    OSLockNesting = 0;                                     /* Clear the scheduling lock counter        */
    f87c:	d0272005 	stb	zero,-25472(gp)

    OSTaskCtr     = 0;                                     /* Clear the number of tasks                */
    f880:	d0272845 	stb	zero,-25439(gp)

    OSRunning     = OS_FALSE;                              /* Indicate that multitasking not started   */
    f884:	d0272045 	stb	zero,-25471(gp)

    OSCtxSwCtr    = 0;                                     /* Clear the context switch counter         */
    f888:	d0272515 	stw	zero,-25452(gp)
    OSIdleCtr     = 0L;                                    /* Clear the 32-bit idle counter            */
    f88c:	d0272115 	stw	zero,-25468(gp)

#if OS_TASK_STAT_EN > 0
    OSIdleCtrRun  = 0L;
    f890:	d0273315 	stw	zero,-25396(gp)
    OSIdleCtrMax  = 0L;
    f894:	d0272615 	stw	zero,-25448(gp)
    OSStatRdy     = OS_FALSE;                              /* Statistic task is not ready              */
    f898:	d0273205 	stb	zero,-25400(gp)
#endif
}
    f89c:	0001883a 	nop
    f8a0:	e037883a 	mov	sp,fp
    f8a4:	df000017 	ldw	fp,0(sp)
    f8a8:	dec00104 	addi	sp,sp,4
    f8ac:	f800283a 	ret

0000f8b0 <OS_InitRdyList>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitRdyList (void)
{
    f8b0:	defffd04 	addi	sp,sp,-12
    f8b4:	df000215 	stw	fp,8(sp)
    f8b8:	df000204 	addi	fp,sp,8
#else
    INT16U  *prdytbl;
#endif


    OSRdyGrp      = 0;                                     /* Clear the ready list                     */
    f8bc:	d0272c05 	stb	zero,-25424(gp)
    prdytbl       = &OSRdyTbl[0];
    f8c0:	d0a72c44 	addi	r2,gp,-25423
    f8c4:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < OS_RDY_TBL_SIZE; i++) {
    f8c8:	e03ffe05 	stb	zero,-8(fp)
    f8cc:	00000706 	br	f8ec <OS_InitRdyList+0x3c>
        *prdytbl++ = 0;
    f8d0:	e0bfff17 	ldw	r2,-4(fp)
    f8d4:	10c00044 	addi	r3,r2,1
    f8d8:	e0ffff15 	stw	r3,-4(fp)
    f8dc:	10000005 	stb	zero,0(r2)
#endif


    OSRdyGrp      = 0;                                     /* Clear the ready list                     */
    prdytbl       = &OSRdyTbl[0];
    for (i = 0; i < OS_RDY_TBL_SIZE; i++) {
    f8e0:	e0bffe03 	ldbu	r2,-8(fp)
    f8e4:	10800044 	addi	r2,r2,1
    f8e8:	e0bffe05 	stb	r2,-8(fp)
    f8ec:	e0bffe03 	ldbu	r2,-8(fp)
    f8f0:	108000f0 	cmpltui	r2,r2,3
    f8f4:	103ff61e 	bne	r2,zero,f8d0 <__alt_data_end+0xfffdf8d0>
        *prdytbl++ = 0;
    }

    OSPrioCur     = 0;
    f8f8:	d0272245 	stb	zero,-25463(gp)
    OSPrioHighRdy = 0;
    f8fc:	d0272205 	stb	zero,-25464(gp)

    OSTCBHighRdy  = (OS_TCB *)0;
    f900:	d0272a15 	stw	zero,-25432(gp)
    OSTCBCur      = (OS_TCB *)0;
    f904:	d0272f15 	stw	zero,-25412(gp)
}
    f908:	0001883a 	nop
    f90c:	e037883a 	mov	sp,fp
    f910:	df000017 	ldw	fp,0(sp)
    f914:	dec00104 	addi	sp,sp,4
    f918:	f800283a 	ret

0000f91c <OS_InitTaskIdle>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitTaskIdle (void)
{
    f91c:	defff804 	addi	sp,sp,-32
    f920:	dfc00715 	stw	ra,28(sp)
    f924:	df000615 	stw	fp,24(sp)
    f928:	df000604 	addi	fp,sp,24
#endif


#if OS_TASK_CREATE_EXT_EN > 0
    #if OS_STK_GROWTH == 1
    (void)OSTaskCreateExt(OS_TaskIdle,
    f92c:	008000c4 	movi	r2,3
    f930:	d8800415 	stw	r2,16(sp)
    f934:	d8000315 	stw	zero,12(sp)
    f938:	00808004 	movi	r2,512
    f93c:	d8800215 	stw	r2,8(sp)
    f940:	008000b4 	movhi	r2,2
    f944:	10b88504 	addi	r2,r2,-7660
    f948:	d8800115 	stw	r2,4(sp)
    f94c:	00bfffd4 	movui	r2,65535
    f950:	d8800015 	stw	r2,0(sp)
    f954:	01c00504 	movi	r7,20
    f958:	018000b4 	movhi	r6,2
    f95c:	31ba8404 	addi	r6,r6,-5616
    f960:	000b883a 	mov	r5,zero
    f964:	01000074 	movhi	r4,1
    f968:	213f7204 	addi	r4,r4,-568
    f96c:	00144940 	call	14494 <OSTaskCreateExt>
                       OS_TASK_IDLE_PRIO);
    #endif
#endif

#if OS_TASK_NAME_SIZE > 14
    OSTaskNameSet(OS_TASK_IDLE_PRIO, (INT8U *)"uC/OS-II Idle", &err);
    f970:	e1bfff04 	addi	r6,fp,-4
    f974:	01400074 	movhi	r5,1
    f978:	295feb04 	addi	r5,r5,32684
    f97c:	01000504 	movi	r4,20
    f980:	0014ca40 	call	14ca4 <OSTaskNameSet>
#else
#if OS_TASK_NAME_SIZE > 7
    OSTaskNameSet(OS_TASK_IDLE_PRIO, (INT8U *)"OS-Idle", &err);
#endif
#endif
}
    f984:	0001883a 	nop
    f988:	e037883a 	mov	sp,fp
    f98c:	dfc00117 	ldw	ra,4(sp)
    f990:	df000017 	ldw	fp,0(sp)
    f994:	dec00204 	addi	sp,sp,8
    f998:	f800283a 	ret

0000f99c <OS_InitTaskStat>:
*********************************************************************************************************
*/

#if OS_TASK_STAT_EN > 0
static  void  OS_InitTaskStat (void)
{
    f99c:	defff804 	addi	sp,sp,-32
    f9a0:	dfc00715 	stw	ra,28(sp)
    f9a4:	df000615 	stw	fp,24(sp)
    f9a8:	df000604 	addi	fp,sp,24
#endif


#if OS_TASK_CREATE_EXT_EN > 0
    #if OS_STK_GROWTH == 1
    (void)OSTaskCreateExt(OS_TaskStat,
    f9ac:	008000c4 	movi	r2,3
    f9b0:	d8800415 	stw	r2,16(sp)
    f9b4:	d8000315 	stw	zero,12(sp)
    f9b8:	00808004 	movi	r2,512
    f9bc:	d8800215 	stw	r2,8(sp)
    f9c0:	008000b4 	movhi	r2,2
    f9c4:	10b60d04 	addi	r2,r2,-10188
    f9c8:	d8800115 	stw	r2,4(sp)
    f9cc:	00bfff94 	movui	r2,65534
    f9d0:	d8800015 	stw	r2,0(sp)
    f9d4:	01c004c4 	movi	r7,19
    f9d8:	018000b4 	movhi	r6,2
    f9dc:	31b80c04 	addi	r6,r6,-8144
    f9e0:	000b883a 	mov	r5,zero
    f9e4:	01000074 	movhi	r4,1
    f9e8:	213f8904 	addi	r4,r4,-476
    f9ec:	00144940 	call	14494 <OSTaskCreateExt>
                       OS_TASK_STAT_PRIO);                             /* One higher than the idle task  */
    #endif
#endif

#if OS_TASK_NAME_SIZE > 14
    OSTaskNameSet(OS_TASK_STAT_PRIO, (INT8U *)"uC/OS-II Stat", &err);
    f9f0:	e1bfff04 	addi	r6,fp,-4
    f9f4:	01400074 	movhi	r5,1
    f9f8:	295fef04 	addi	r5,r5,32700
    f9fc:	010004c4 	movi	r4,19
    fa00:	0014ca40 	call	14ca4 <OSTaskNameSet>
#else
#if OS_TASK_NAME_SIZE > 7
    OSTaskNameSet(OS_TASK_STAT_PRIO, (INT8U *)"OS-Stat", &err);
#endif
#endif
}
    fa04:	0001883a 	nop
    fa08:	e037883a 	mov	sp,fp
    fa0c:	dfc00117 	ldw	ra,4(sp)
    fa10:	df000017 	ldw	fp,0(sp)
    fa14:	dec00204 	addi	sp,sp,8
    fa18:	f800283a 	ret

0000fa1c <OS_InitTCBList>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitTCBList (void)
{
    fa1c:	defffb04 	addi	sp,sp,-20
    fa20:	dfc00415 	stw	ra,16(sp)
    fa24:	df000315 	stw	fp,12(sp)
    fa28:	df000304 	addi	fp,sp,12
    INT8U    i;
    OS_TCB  *ptcb1;
    OS_TCB  *ptcb2;


    OS_MemClr((INT8U *)&OSTCBTbl[0],     sizeof(OSTCBTbl));      /* Clear all the TCBs                 */
    fa2c:	01414404 	movi	r5,1296
    fa30:	010000b4 	movhi	r4,2
    fa34:	213d5504 	addi	r4,r4,-2732
    fa38:	000fb000 	call	fb00 <OS_MemClr>
    OS_MemClr((INT8U *)&OSTCBPrioTbl[0], sizeof(OSTCBPrioTbl));  /* Clear the priority table           */
    fa3c:	01401504 	movi	r5,84
    fa40:	010000b4 	movhi	r4,2
    fa44:	213e9904 	addi	r4,r4,-1436
    fa48:	000fb000 	call	fb00 <OS_MemClr>
    ptcb1 = &OSTCBTbl[0];
    fa4c:	008000b4 	movhi	r2,2
    fa50:	10bd5504 	addi	r2,r2,-2732
    fa54:	e0bffe15 	stw	r2,-8(fp)
    ptcb2 = &OSTCBTbl[1];
    fa58:	008000b4 	movhi	r2,2
    fa5c:	10bd7004 	addi	r2,r2,-2624
    fa60:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < (OS_MAX_TASKS + OS_N_SYS_TASKS - 1); i++) {  /* Init. list of free TCBs            */
    fa64:	e03ffd05 	stb	zero,-12(fp)
    fa68:	00001106 	br	fab0 <OS_InitTCBList+0x94>
        ptcb1->OSTCBNext = ptcb2;
    fa6c:	e0bffe17 	ldw	r2,-8(fp)
    fa70:	e0ffff17 	ldw	r3,-4(fp)
    fa74:	10c00515 	stw	r3,20(r2)
#if OS_TASK_NAME_SIZE > 1
        ptcb1->OSTCBTaskName[0] = '?';                           /* Unknown name                       */
    fa78:	e0bffe17 	ldw	r2,-8(fp)
    fa7c:	00c00fc4 	movi	r3,63
    fa80:	10c01305 	stb	r3,76(r2)
        ptcb1->OSTCBTaskName[1] = OS_ASCII_NUL;
    fa84:	e0bffe17 	ldw	r2,-8(fp)
    fa88:	10001345 	stb	zero,77(r2)
#endif
        ptcb1++;
    fa8c:	e0bffe17 	ldw	r2,-8(fp)
    fa90:	10801b04 	addi	r2,r2,108
    fa94:	e0bffe15 	stw	r2,-8(fp)
        ptcb2++;
    fa98:	e0bfff17 	ldw	r2,-4(fp)
    fa9c:	10801b04 	addi	r2,r2,108
    faa0:	e0bfff15 	stw	r2,-4(fp)

    OS_MemClr((INT8U *)&OSTCBTbl[0],     sizeof(OSTCBTbl));      /* Clear all the TCBs                 */
    OS_MemClr((INT8U *)&OSTCBPrioTbl[0], sizeof(OSTCBPrioTbl));  /* Clear the priority table           */
    ptcb1 = &OSTCBTbl[0];
    ptcb2 = &OSTCBTbl[1];
    for (i = 0; i < (OS_MAX_TASKS + OS_N_SYS_TASKS - 1); i++) {  /* Init. list of free TCBs            */
    faa4:	e0bffd03 	ldbu	r2,-12(fp)
    faa8:	10800044 	addi	r2,r2,1
    faac:	e0bffd05 	stb	r2,-12(fp)
    fab0:	e0bffd03 	ldbu	r2,-12(fp)
    fab4:	108002f0 	cmpltui	r2,r2,11
    fab8:	103fec1e 	bne	r2,zero,fa6c <__alt_data_end+0xfffdfa6c>
        ptcb1->OSTCBTaskName[1] = OS_ASCII_NUL;
#endif
        ptcb1++;
        ptcb2++;
    }
    ptcb1->OSTCBNext = (OS_TCB *)0;                              /* Last OS_TCB                        */
    fabc:	e0bffe17 	ldw	r2,-8(fp)
    fac0:	10000515 	stw	zero,20(r2)
#if OS_TASK_NAME_SIZE > 1
    ptcb1->OSTCBTaskName[0] = '?';                               /* Unknown name                       */
    fac4:	e0bffe17 	ldw	r2,-8(fp)
    fac8:	00c00fc4 	movi	r3,63
    facc:	10c01305 	stb	r3,76(r2)
    ptcb1->OSTCBTaskName[1] = OS_ASCII_NUL;
    fad0:	e0bffe17 	ldw	r2,-8(fp)
    fad4:	10001345 	stb	zero,77(r2)
#endif
    OSTCBList               = (OS_TCB *)0;                       /* TCB lists initializations          */
    fad8:	d0272315 	stw	zero,-25460(gp)
    OSTCBFreeList           = &OSTCBTbl[0];
    fadc:	008000b4 	movhi	r2,2
    fae0:	10bd5504 	addi	r2,r2,-2732
    fae4:	d0a72715 	stw	r2,-25444(gp)
}
    fae8:	0001883a 	nop
    faec:	e037883a 	mov	sp,fp
    faf0:	dfc00117 	ldw	ra,4(sp)
    faf4:	df000017 	ldw	fp,0(sp)
    faf8:	dec00204 	addi	sp,sp,8
    fafc:	f800283a 	ret

0000fb00 <OS_MemClr>:
*                 of the alignment of the destination.
*********************************************************************************************************
*/

void  OS_MemClr (INT8U *pdest, INT16U size)
{
    fb00:	defffd04 	addi	sp,sp,-12
    fb04:	df000215 	stw	fp,8(sp)
    fb08:	df000204 	addi	fp,sp,8
    fb0c:	e13ffe15 	stw	r4,-8(fp)
    fb10:	2805883a 	mov	r2,r5
    fb14:	e0bfff0d 	sth	r2,-4(fp)
    while (size > 0) {
    fb18:	00000706 	br	fb38 <OS_MemClr+0x38>
        *pdest++ = (INT8U)0;
    fb1c:	e0bffe17 	ldw	r2,-8(fp)
    fb20:	10c00044 	addi	r3,r2,1
    fb24:	e0fffe15 	stw	r3,-8(fp)
    fb28:	10000005 	stb	zero,0(r2)
        size--;
    fb2c:	e0bfff0b 	ldhu	r2,-4(fp)
    fb30:	10bfffc4 	addi	r2,r2,-1
    fb34:	e0bfff0d 	sth	r2,-4(fp)
*********************************************************************************************************
*/

void  OS_MemClr (INT8U *pdest, INT16U size)
{
    while (size > 0) {
    fb38:	e0bfff0b 	ldhu	r2,-4(fp)
    fb3c:	103ff71e 	bne	r2,zero,fb1c <__alt_data_end+0xfffdfb1c>
        *pdest++ = (INT8U)0;
        size--;
    }
}
    fb40:	0001883a 	nop
    fb44:	e037883a 	mov	sp,fp
    fb48:	df000017 	ldw	fp,0(sp)
    fb4c:	dec00104 	addi	sp,sp,4
    fb50:	f800283a 	ret

0000fb54 <OS_MemCopy>:
*                 of the alignment of the source and destination.
*********************************************************************************************************
*/

void  OS_MemCopy (INT8U *pdest, INT8U *psrc, INT16U size)
{
    fb54:	defffc04 	addi	sp,sp,-16
    fb58:	df000315 	stw	fp,12(sp)
    fb5c:	df000304 	addi	fp,sp,12
    fb60:	e13ffd15 	stw	r4,-12(fp)
    fb64:	e17ffe15 	stw	r5,-8(fp)
    fb68:	3005883a 	mov	r2,r6
    fb6c:	e0bfff0d 	sth	r2,-4(fp)
    while (size > 0) {
    fb70:	00000b06 	br	fba0 <OS_MemCopy+0x4c>
        *pdest++ = *psrc++;
    fb74:	e0bffd17 	ldw	r2,-12(fp)
    fb78:	10c00044 	addi	r3,r2,1
    fb7c:	e0fffd15 	stw	r3,-12(fp)
    fb80:	e0fffe17 	ldw	r3,-8(fp)
    fb84:	19000044 	addi	r4,r3,1
    fb88:	e13ffe15 	stw	r4,-8(fp)
    fb8c:	18c00003 	ldbu	r3,0(r3)
    fb90:	10c00005 	stb	r3,0(r2)
        size--;
    fb94:	e0bfff0b 	ldhu	r2,-4(fp)
    fb98:	10bfffc4 	addi	r2,r2,-1
    fb9c:	e0bfff0d 	sth	r2,-4(fp)
*********************************************************************************************************
*/

void  OS_MemCopy (INT8U *pdest, INT8U *psrc, INT16U size)
{
    while (size > 0) {
    fba0:	e0bfff0b 	ldhu	r2,-4(fp)
    fba4:	103ff31e 	bne	r2,zero,fb74 <__alt_data_end+0xfffdfb74>
        *pdest++ = *psrc++;
        size--;
    }
}
    fba8:	0001883a 	nop
    fbac:	e037883a 	mov	sp,fp
    fbb0:	df000017 	ldw	fp,0(sp)
    fbb4:	dec00104 	addi	sp,sp,4
    fbb8:	f800283a 	ret

0000fbbc <OS_Sched>:
*              2) Rescheduling is prevented when the scheduler is locked (see OS_SchedLock())
*********************************************************************************************************
*/

void  OS_Sched (void)
{
    fbbc:	defffb04 	addi	sp,sp,-20
    fbc0:	dfc00415 	stw	ra,16(sp)
    fbc4:	df000315 	stw	fp,12(sp)
    fbc8:	df000304 	addi	fp,sp,12
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
    fbcc:	e03ffd15 	stw	zero,-12(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    fbd0:	0005303a 	rdctl	r2,status
    fbd4:	e0bfff15 	stw	r2,-4(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    fbd8:	e0ffff17 	ldw	r3,-4(fp)
    fbdc:	00bfff84 	movi	r2,-2
    fbe0:	1884703a 	and	r2,r3,r2
    fbe4:	1001703a 	wrctl	status,r2
  
  return context;
    fbe8:	e0bfff17 	ldw	r2,-4(fp)
#endif



    OS_ENTER_CRITICAL();
    fbec:	e0bffd15 	stw	r2,-12(fp)
    if (OSIntNesting == 0) {                           /* Schedule only if all ISRs done and ...       */
    fbf0:	d0a72e03 	ldbu	r2,-25416(gp)
    fbf4:	10803fcc 	andi	r2,r2,255
    fbf8:	10001a1e 	bne	r2,zero,fc64 <OS_Sched+0xa8>
        if (OSLockNesting == 0) {                      /* ... scheduler is not locked                  */
    fbfc:	d0a72003 	ldbu	r2,-25472(gp)
    fc00:	10803fcc 	andi	r2,r2,255
    fc04:	1000171e 	bne	r2,zero,fc64 <OS_Sched+0xa8>
            OS_SchedNew();
    fc08:	000fc8c0 	call	fc8c <OS_SchedNew>
            if (OSPrioHighRdy != OSPrioCur) {          /* No Ctx Sw if current task is highest rdy     */
    fc0c:	d0e72203 	ldbu	r3,-25464(gp)
    fc10:	d0a72243 	ldbu	r2,-25463(gp)
    fc14:	18c03fcc 	andi	r3,r3,255
    fc18:	10803fcc 	andi	r2,r2,255
    fc1c:	18801126 	beq	r3,r2,fc64 <OS_Sched+0xa8>
                OSTCBHighRdy = OSTCBPrioTbl[OSPrioHighRdy];
    fc20:	d0a72203 	ldbu	r2,-25464(gp)
    fc24:	10c03fcc 	andi	r3,r2,255
    fc28:	008000b4 	movhi	r2,2
    fc2c:	10be9904 	addi	r2,r2,-1436
    fc30:	18c7883a 	add	r3,r3,r3
    fc34:	18c7883a 	add	r3,r3,r3
    fc38:	10c5883a 	add	r2,r2,r3
    fc3c:	10800017 	ldw	r2,0(r2)
    fc40:	d0a72a15 	stw	r2,-25432(gp)
#if OS_TASK_PROFILE_EN > 0
                OSTCBHighRdy->OSTCBCtxSwCtr++;         /* Inc. # of context switches to this task      */
    fc44:	d0a72a17 	ldw	r2,-25432(gp)
    fc48:	10c00e17 	ldw	r3,56(r2)
    fc4c:	18c00044 	addi	r3,r3,1
    fc50:	10c00e15 	stw	r3,56(r2)
#endif
                OSCtxSwCtr++;                          /* Increment context switch counter             */
    fc54:	d0a72517 	ldw	r2,-25452(gp)
    fc58:	10800044 	addi	r2,r2,1
    fc5c:	d0a72515 	stw	r2,-25452(gp)
                OS_TASK_SW();                          /* Perform a context switch                     */
    fc60:	001721c0 	call	1721c <OSCtxSw>
    fc64:	e0bffd17 	ldw	r2,-12(fp)
    fc68:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    fc6c:	e0bffe17 	ldw	r2,-8(fp)
    fc70:	1001703a 	wrctl	status,r2
            }
        }
    }
    OS_EXIT_CRITICAL();
}
    fc74:	0001883a 	nop
    fc78:	e037883a 	mov	sp,fp
    fc7c:	dfc00117 	ldw	ra,4(sp)
    fc80:	df000017 	ldw	fp,0(sp)
    fc84:	dec00204 	addi	sp,sp,8
    fc88:	f800283a 	ret

0000fc8c <OS_SchedNew>:
*              2) Interrupts are assumed to be disabled when this function is called.
*********************************************************************************************************
*/

static  void  OS_SchedNew (void)
{
    fc8c:	defffe04 	addi	sp,sp,-8
    fc90:	df000115 	stw	fp,4(sp)
    fc94:	df000104 	addi	fp,sp,4
#if OS_LOWEST_PRIO <= 63                         /* See if we support up to 64 tasks                   */
    INT8U   y;


    y             = OSUnMapTbl[OSRdyGrp];
    fc98:	d0a72c03 	ldbu	r2,-25424(gp)
    fc9c:	10c03fcc 	andi	r3,r2,255
    fca0:	00800074 	movhi	r2,1
    fca4:	109fab04 	addi	r2,r2,32428
    fca8:	10c5883a 	add	r2,r2,r3
    fcac:	10800003 	ldbu	r2,0(r2)
    fcb0:	e0bfff05 	stb	r2,-4(fp)
    OSPrioHighRdy = (INT8U)((y << 3) + OSUnMapTbl[OSRdyTbl[y]]);
    fcb4:	e0bfff03 	ldbu	r2,-4(fp)
    fcb8:	100490fa 	slli	r2,r2,3
    fcbc:	1009883a 	mov	r4,r2
    fcc0:	e0ffff03 	ldbu	r3,-4(fp)
    fcc4:	d0a72c44 	addi	r2,gp,-25423
    fcc8:	1885883a 	add	r2,r3,r2
    fccc:	10800003 	ldbu	r2,0(r2)
    fcd0:	10c03fcc 	andi	r3,r2,255
    fcd4:	00800074 	movhi	r2,1
    fcd8:	109fab04 	addi	r2,r2,32428
    fcdc:	10c5883a 	add	r2,r2,r3
    fce0:	10800003 	ldbu	r2,0(r2)
    fce4:	2085883a 	add	r2,r4,r2
    fce8:	d0a72205 	stb	r2,-25464(gp)
        OSPrioHighRdy = (INT8U)((y << 4) + OSUnMapTbl[(*ptbl & 0xFF)]);
    } else {
        OSPrioHighRdy = (INT8U)((y << 4) + OSUnMapTbl[(*ptbl >> 8) & 0xFF] + 8);
    }
#endif
}
    fcec:	0001883a 	nop
    fcf0:	e037883a 	mov	sp,fp
    fcf4:	df000017 	ldw	fp,0(sp)
    fcf8:	dec00104 	addi	sp,sp,4
    fcfc:	f800283a 	ret

0000fd00 <OS_StrCopy>:
*********************************************************************************************************
*/

#if (OS_EVENT_NAME_SIZE > 1) || (OS_FLAG_NAME_SIZE > 1) || (OS_MEM_NAME_SIZE > 1) || (OS_TASK_NAME_SIZE > 1) || (OS_TMR_CFG_NAME_SIZE > 1)
INT8U  OS_StrCopy (INT8U *pdest, INT8U *psrc)
{
    fd00:	defffc04 	addi	sp,sp,-16
    fd04:	df000315 	stw	fp,12(sp)
    fd08:	df000304 	addi	fp,sp,12
    fd0c:	e13ffe15 	stw	r4,-8(fp)
    fd10:	e17fff15 	stw	r5,-4(fp)
    INT8U  len;


    len = 0;
    fd14:	e03ffd05 	stb	zero,-12(fp)
    while (*psrc != OS_ASCII_NUL) {
    fd18:	00000b06 	br	fd48 <OS_StrCopy+0x48>
        *pdest++ = *psrc++;
    fd1c:	e0bffe17 	ldw	r2,-8(fp)
    fd20:	10c00044 	addi	r3,r2,1
    fd24:	e0fffe15 	stw	r3,-8(fp)
    fd28:	e0ffff17 	ldw	r3,-4(fp)
    fd2c:	19000044 	addi	r4,r3,1
    fd30:	e13fff15 	stw	r4,-4(fp)
    fd34:	18c00003 	ldbu	r3,0(r3)
    fd38:	10c00005 	stb	r3,0(r2)
        len++;
    fd3c:	e0bffd03 	ldbu	r2,-12(fp)
    fd40:	10800044 	addi	r2,r2,1
    fd44:	e0bffd05 	stb	r2,-12(fp)
{
    INT8U  len;


    len = 0;
    while (*psrc != OS_ASCII_NUL) {
    fd48:	e0bfff17 	ldw	r2,-4(fp)
    fd4c:	10800003 	ldbu	r2,0(r2)
    fd50:	10803fcc 	andi	r2,r2,255
    fd54:	103ff11e 	bne	r2,zero,fd1c <__alt_data_end+0xfffdfd1c>
        *pdest++ = *psrc++;
        len++;
    }
    *pdest = OS_ASCII_NUL;
    fd58:	e0bffe17 	ldw	r2,-8(fp)
    fd5c:	10000005 	stb	zero,0(r2)
    return (len);
    fd60:	e0bffd03 	ldbu	r2,-12(fp)
}
    fd64:	e037883a 	mov	sp,fp
    fd68:	df000017 	ldw	fp,0(sp)
    fd6c:	dec00104 	addi	sp,sp,4
    fd70:	f800283a 	ret

0000fd74 <OS_StrLen>:
*********************************************************************************************************
*/

#if (OS_EVENT_NAME_SIZE > 1) || (OS_FLAG_NAME_SIZE > 1) || (OS_MEM_NAME_SIZE > 1) || (OS_TASK_NAME_SIZE > 1) || (OS_TMR_CFG_NAME_SIZE > 1)
INT8U  OS_StrLen (INT8U *psrc)
{
    fd74:	defffd04 	addi	sp,sp,-12
    fd78:	df000215 	stw	fp,8(sp)
    fd7c:	df000204 	addi	fp,sp,8
    fd80:	e13fff15 	stw	r4,-4(fp)
    INT8U  len;


    len = 0;
    fd84:	e03ffe05 	stb	zero,-8(fp)
    while (*psrc != OS_ASCII_NUL) {
    fd88:	00000606 	br	fda4 <OS_StrLen+0x30>
        psrc++;
    fd8c:	e0bfff17 	ldw	r2,-4(fp)
    fd90:	10800044 	addi	r2,r2,1
    fd94:	e0bfff15 	stw	r2,-4(fp)
        len++;
    fd98:	e0bffe03 	ldbu	r2,-8(fp)
    fd9c:	10800044 	addi	r2,r2,1
    fda0:	e0bffe05 	stb	r2,-8(fp)
{
    INT8U  len;


    len = 0;
    while (*psrc != OS_ASCII_NUL) {
    fda4:	e0bfff17 	ldw	r2,-4(fp)
    fda8:	10800003 	ldbu	r2,0(r2)
    fdac:	10803fcc 	andi	r2,r2,255
    fdb0:	103ff61e 	bne	r2,zero,fd8c <__alt_data_end+0xfffdfd8c>
        psrc++;
        len++;
    }
    return (len);
    fdb4:	e0bffe03 	ldbu	r2,-8(fp)
}
    fdb8:	e037883a 	mov	sp,fp
    fdbc:	df000017 	ldw	fp,0(sp)
    fdc0:	dec00104 	addi	sp,sp,4
    fdc4:	f800283a 	ret

0000fdc8 <OS_TaskIdle>:
*                 power.
*********************************************************************************************************
*/

void  OS_TaskIdle (void *p_arg)
{
    fdc8:	defffa04 	addi	sp,sp,-24
    fdcc:	dfc00515 	stw	ra,20(sp)
    fdd0:	df000415 	stw	fp,16(sp)
    fdd4:	df000404 	addi	fp,sp,16
    fdd8:	e13fff15 	stw	r4,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    fddc:	e03ffc15 	stw	zero,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    fde0:	0005303a 	rdctl	r2,status
    fde4:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    fde8:	e0fffd17 	ldw	r3,-12(fp)
    fdec:	00bfff84 	movi	r2,-2
    fdf0:	1884703a 	and	r2,r3,r2
    fdf4:	1001703a 	wrctl	status,r2
  
  return context;
    fdf8:	e0bffd17 	ldw	r2,-12(fp)



    (void)p_arg;                                 /* Prevent compiler warning for not using 'p_arg'     */
    for (;;) {
        OS_ENTER_CRITICAL();
    fdfc:	e0bffc15 	stw	r2,-16(fp)
        OSIdleCtr++;
    fe00:	d0a72117 	ldw	r2,-25468(gp)
    fe04:	10800044 	addi	r2,r2,1
    fe08:	d0a72115 	stw	r2,-25468(gp)
    fe0c:	e0bffc17 	ldw	r2,-16(fp)
    fe10:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    fe14:	e0bffe17 	ldw	r2,-8(fp)
    fe18:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OSTaskIdleHook();                        /* Call user definable HOOK                           */
    fe1c:	00175300 	call	17530 <OSTaskIdleHook>
    }
    fe20:	003fef06 	br	fde0 <__alt_data_end+0xfffdfde0>

0000fe24 <OS_TaskStat>:
*********************************************************************************************************
*/

#if OS_TASK_STAT_EN > 0
void  OS_TaskStat (void *p_arg)
{
    fe24:	defffa04 	addi	sp,sp,-24
    fe28:	dfc00515 	stw	ra,20(sp)
    fe2c:	df000415 	stw	fp,16(sp)
    fe30:	df000404 	addi	fp,sp,16
    fe34:	e13fff15 	stw	r4,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    fe38:	e03ffc15 	stw	zero,-16(fp)
#endif



    (void)p_arg;                                 /* Prevent compiler warning for not using 'p_arg'     */
    while (OSStatRdy == OS_FALSE) {
    fe3c:	00000206 	br	fe48 <OS_TaskStat+0x24>
        OSTimeDly(2 * OS_TICKS_PER_SEC / 10);    /* Wait until statistic task is ready                 */
    fe40:	01003204 	movi	r4,200
    fe44:	00155640 	call	15564 <OSTimeDly>
#endif



    (void)p_arg;                                 /* Prevent compiler warning for not using 'p_arg'     */
    while (OSStatRdy == OS_FALSE) {
    fe48:	d0a73203 	ldbu	r2,-25400(gp)
    fe4c:	10803fcc 	andi	r2,r2,255
    fe50:	103ffb26 	beq	r2,zero,fe40 <__alt_data_end+0xfffdfe40>
        OSTimeDly(2 * OS_TICKS_PER_SEC / 10);    /* Wait until statistic task is ready                 */
    }
    OSIdleCtrMax /= 100L;
    fe54:	d0a72617 	ldw	r2,-25448(gp)
    fe58:	01401904 	movi	r5,100
    fe5c:	1009883a 	mov	r4,r2
    fe60:	00005cc0 	call	5cc <__udivsi3>
    fe64:	d0a72615 	stw	r2,-25448(gp)
    if (OSIdleCtrMax == 0L) {
    fe68:	d0a72617 	ldw	r2,-25448(gp)
    fe6c:	1000031e 	bne	r2,zero,fe7c <OS_TaskStat+0x58>
        OSCPUUsage = 0;
    fe70:	d0272805 	stb	zero,-25440(gp)
        (void)OSTaskSuspend(OS_PRIO_SELF);
    fe74:	01003fc4 	movi	r4,255
    fe78:	00151ec0 	call	151ec <OSTaskSuspend>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    fe7c:	0005303a 	rdctl	r2,status
    fe80:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    fe84:	e0fffd17 	ldw	r3,-12(fp)
    fe88:	00bfff84 	movi	r2,-2
    fe8c:	1884703a 	and	r2,r3,r2
    fe90:	1001703a 	wrctl	status,r2
  
  return context;
    fe94:	e0bffd17 	ldw	r2,-12(fp)
    }
    for (;;) {
        OS_ENTER_CRITICAL();
    fe98:	e0bffc15 	stw	r2,-16(fp)
        OSIdleCtrRun = OSIdleCtr;                /* Obtain the of the idle counter for the past second */
    fe9c:	d0a72117 	ldw	r2,-25468(gp)
    fea0:	d0a73315 	stw	r2,-25396(gp)
        OSIdleCtr    = 0L;                       /* Reset the idle counter for the next second         */
    fea4:	d0272115 	stw	zero,-25468(gp)
    fea8:	e0bffc17 	ldw	r2,-16(fp)
    feac:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    feb0:	e0bffe17 	ldw	r2,-8(fp)
    feb4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OSCPUUsage   = (INT8U)(100L - OSIdleCtrRun / OSIdleCtrMax);
    feb8:	d0a73317 	ldw	r2,-25396(gp)
    febc:	d0e72617 	ldw	r3,-25448(gp)
    fec0:	180b883a 	mov	r5,r3
    fec4:	1009883a 	mov	r4,r2
    fec8:	00005cc0 	call	5cc <__udivsi3>
    fecc:	1007883a 	mov	r3,r2
    fed0:	00801904 	movi	r2,100
    fed4:	10c5c83a 	sub	r2,r2,r3
    fed8:	d0a72805 	stb	r2,-25440(gp)
        OSTaskStatHook();                        /* Invoke user definable hook                         */
    fedc:	00174b00 	call	174b0 <OSTaskStatHook>
#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
        OS_TaskStatStkChk();                     /* Check the stacks for each task                     */
    fee0:	000fef00 	call	fef0 <OS_TaskStatStkChk>
#endif
        OSTimeDly(OS_TICKS_PER_SEC / 10);        /* Accumulate OSIdleCtr for the next 1/10 second      */
    fee4:	01001904 	movi	r4,100
    fee8:	00155640 	call	15564 <OSTimeDly>
    }
    feec:	003fe306 	br	fe7c <__alt_data_end+0xfffdfe7c>

0000fef0 <OS_TaskStatStkChk>:
*********************************************************************************************************
*/

#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
void  OS_TaskStatStkChk (void)
{
    fef0:	defffa04 	addi	sp,sp,-24
    fef4:	dfc00515 	stw	ra,20(sp)
    fef8:	df000415 	stw	fp,16(sp)
    fefc:	df000404 	addi	fp,sp,16
    OS_STK_DATA  stk_data;
    INT8U        err;
    INT8U        prio;


    for (prio = 0; prio <= OS_TASK_IDLE_PRIO; prio++) {
    ff00:	e03ffc05 	stb	zero,-16(fp)
    ff04:	00002406 	br	ff98 <OS_TaskStatStkChk+0xa8>
        err = OSTaskStkChk(prio, &stk_data);
    ff08:	e0bffc03 	ldbu	r2,-16(fp)
    ff0c:	e0fffe04 	addi	r3,fp,-8
    ff10:	180b883a 	mov	r5,r3
    ff14:	1009883a 	mov	r4,r2
    ff18:	001502c0 	call	1502c <OSTaskStkChk>
    ff1c:	e0bffc45 	stb	r2,-15(fp)
        if (err == OS_ERR_NONE) {
    ff20:	e0bffc43 	ldbu	r2,-15(fp)
    ff24:	1000191e 	bne	r2,zero,ff8c <OS_TaskStatStkChk+0x9c>
            ptcb = OSTCBPrioTbl[prio];
    ff28:	e0fffc03 	ldbu	r3,-16(fp)
    ff2c:	008000b4 	movhi	r2,2
    ff30:	10be9904 	addi	r2,r2,-1436
    ff34:	18c7883a 	add	r3,r3,r3
    ff38:	18c7883a 	add	r3,r3,r3
    ff3c:	10c5883a 	add	r2,r2,r3
    ff40:	10800017 	ldw	r2,0(r2)
    ff44:	e0bffd15 	stw	r2,-12(fp)
            if (ptcb != (OS_TCB *)0) {                               /* Make sure task 'ptcb' is ...   */
    ff48:	e0bffd17 	ldw	r2,-12(fp)
    ff4c:	10000f26 	beq	r2,zero,ff8c <OS_TaskStatStkChk+0x9c>
                if (ptcb != OS_TCB_RESERVED) {                       /* ... still valid.               */
    ff50:	e0bffd17 	ldw	r2,-12(fp)
    ff54:	10800060 	cmpeqi	r2,r2,1
    ff58:	10000c1e 	bne	r2,zero,ff8c <OS_TaskStatStkChk+0x9c>
#if OS_TASK_PROFILE_EN > 0
                    #if OS_STK_GROWTH == 1
                    ptcb->OSTCBStkBase = ptcb->OSTCBStkBottom + ptcb->OSTCBStkSize;
    ff5c:	e0bffd17 	ldw	r2,-12(fp)
    ff60:	10c00217 	ldw	r3,8(r2)
    ff64:	e0bffd17 	ldw	r2,-12(fp)
    ff68:	10800317 	ldw	r2,12(r2)
    ff6c:	1085883a 	add	r2,r2,r2
    ff70:	1085883a 	add	r2,r2,r2
    ff74:	1887883a 	add	r3,r3,r2
    ff78:	e0bffd17 	ldw	r2,-12(fp)
    ff7c:	10c01115 	stw	r3,68(r2)
                    #else
                    ptcb->OSTCBStkBase = ptcb->OSTCBStkBottom - ptcb->OSTCBStkSize;
                    #endif
                    ptcb->OSTCBStkUsed = stk_data.OSUsed;            /* Store the number of bytes used */
    ff80:	e0ffff17 	ldw	r3,-4(fp)
    ff84:	e0bffd17 	ldw	r2,-12(fp)
    ff88:	10c01215 	stw	r3,72(r2)
    OS_STK_DATA  stk_data;
    INT8U        err;
    INT8U        prio;


    for (prio = 0; prio <= OS_TASK_IDLE_PRIO; prio++) {
    ff8c:	e0bffc03 	ldbu	r2,-16(fp)
    ff90:	10800044 	addi	r2,r2,1
    ff94:	e0bffc05 	stb	r2,-16(fp)
    ff98:	e0bffc03 	ldbu	r2,-16(fp)
    ff9c:	10800570 	cmpltui	r2,r2,21
    ffa0:	103fd91e 	bne	r2,zero,ff08 <__alt_data_end+0xfffdff08>
#endif
                }
            }
        }
    }
}
    ffa4:	0001883a 	nop
    ffa8:	e037883a 	mov	sp,fp
    ffac:	dfc00117 	ldw	ra,4(sp)
    ffb0:	df000017 	ldw	fp,0(sp)
    ffb4:	dec00204 	addi	sp,sp,8
    ffb8:	f800283a 	ret

0000ffbc <OS_TCBInit>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

INT8U  OS_TCBInit (INT8U prio, OS_STK *ptos, OS_STK *pbos, INT16U id, INT32U stk_size, void *pext, INT16U opt)
{
    ffbc:	defff204 	addi	sp,sp,-56
    ffc0:	dfc00d15 	stw	ra,52(sp)
    ffc4:	df000c15 	stw	fp,48(sp)
    ffc8:	df000c04 	addi	fp,sp,48
    ffcc:	e17ffc15 	stw	r5,-16(fp)
    ffd0:	e1bffd15 	stw	r6,-12(fp)
    ffd4:	3807883a 	mov	r3,r7
    ffd8:	e0800417 	ldw	r2,16(fp)
    ffdc:	e13ffb05 	stb	r4,-20(fp)
    ffe0:	e0fffe0d 	sth	r3,-8(fp)
    ffe4:	e0bfff0d 	sth	r2,-4(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
    ffe8:	e03ff415 	stw	zero,-48(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    ffec:	0005303a 	rdctl	r2,status
    fff0:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    fff4:	e0fffa17 	ldw	r3,-24(fp)
    fff8:	00bfff84 	movi	r2,-2
    fffc:	1884703a 	and	r2,r3,r2
   10000:	1001703a 	wrctl	status,r2
  
  return context;
   10004:	e0bffa17 	ldw	r2,-24(fp)
#endif



    OS_ENTER_CRITICAL();
   10008:	e0bff415 	stw	r2,-48(fp)
    ptcb = OSTCBFreeList;                                  /* Get a free TCB from the free TCB list    */
   1000c:	d0a72717 	ldw	r2,-25444(gp)
   10010:	e0bff615 	stw	r2,-40(fp)
    if (ptcb != (OS_TCB *)0) {
   10014:	e0bff617 	ldw	r2,-40(fp)
   10018:	10009326 	beq	r2,zero,10268 <OS_TCBInit+0x2ac>
        OSTCBFreeList            = ptcb->OSTCBNext;        /* Update pointer to free TCB list          */
   1001c:	e0bff617 	ldw	r2,-40(fp)
   10020:	10800517 	ldw	r2,20(r2)
   10024:	d0a72715 	stw	r2,-25444(gp)
   10028:	e0bff417 	ldw	r2,-48(fp)
   1002c:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   10030:	e0bff817 	ldw	r2,-32(fp)
   10034:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        ptcb->OSTCBStkPtr        = ptos;                   /* Load Stack pointer in TCB                */
   10038:	e0bff617 	ldw	r2,-40(fp)
   1003c:	e0fffc17 	ldw	r3,-16(fp)
   10040:	10c00015 	stw	r3,0(r2)
        ptcb->OSTCBPrio          = prio;                   /* Load task priority into TCB              */
   10044:	e0bff617 	ldw	r2,-40(fp)
   10048:	e0fffb03 	ldbu	r3,-20(fp)
   1004c:	10c00c85 	stb	r3,50(r2)
        ptcb->OSTCBStat          = OS_STAT_RDY;            /* Task is ready to run                     */
   10050:	e0bff617 	ldw	r2,-40(fp)
   10054:	10000c05 	stb	zero,48(r2)
        ptcb->OSTCBStatPend      = OS_STAT_PEND_OK;        /* Clear pend status                        */
   10058:	e0bff617 	ldw	r2,-40(fp)
   1005c:	10000c45 	stb	zero,49(r2)
        ptcb->OSTCBDly           = 0;                      /* Task is not delayed                      */
   10060:	e0bff617 	ldw	r2,-40(fp)
   10064:	10000b8d 	sth	zero,46(r2)

#if OS_TASK_CREATE_EXT_EN > 0
        ptcb->OSTCBExtPtr        = pext;                   /* Store pointer to TCB extension           */
   10068:	e0bff617 	ldw	r2,-40(fp)
   1006c:	e0c00317 	ldw	r3,12(fp)
   10070:	10c00115 	stw	r3,4(r2)
        ptcb->OSTCBStkSize       = stk_size;               /* Store stack size                         */
   10074:	e0bff617 	ldw	r2,-40(fp)
   10078:	e0c00217 	ldw	r3,8(fp)
   1007c:	10c00315 	stw	r3,12(r2)
        ptcb->OSTCBStkBottom     = pbos;                   /* Store pointer to bottom of stack         */
   10080:	e0bff617 	ldw	r2,-40(fp)
   10084:	e0fffd17 	ldw	r3,-12(fp)
   10088:	10c00215 	stw	r3,8(r2)
        ptcb->OSTCBOpt           = opt;                    /* Store task options                       */
   1008c:	e0bff617 	ldw	r2,-40(fp)
   10090:	e0ffff0b 	ldhu	r3,-4(fp)
   10094:	10c0040d 	sth	r3,16(r2)
        ptcb->OSTCBId            = id;                     /* Store task ID                            */
   10098:	e0bff617 	ldw	r2,-40(fp)
   1009c:	e0fffe0b 	ldhu	r3,-8(fp)
   100a0:	10c0048d 	sth	r3,18(r2)
        opt                      = opt;
        id                       = id;
#endif

#if OS_TASK_DEL_EN > 0
        ptcb->OSTCBDelReq        = OS_ERR_NONE;
   100a4:	e0bff617 	ldw	r2,-40(fp)
   100a8:	10000dc5 	stb	zero,55(r2)
#endif

#if OS_LOWEST_PRIO <= 63
        ptcb->OSTCBY             = (INT8U)(prio >> 3);          /* Pre-compute X, Y, BitX and BitY     */
   100ac:	e0bffb03 	ldbu	r2,-20(fp)
   100b0:	1004d0fa 	srli	r2,r2,3
   100b4:	1007883a 	mov	r3,r2
   100b8:	e0bff617 	ldw	r2,-40(fp)
   100bc:	10c00d05 	stb	r3,52(r2)
        ptcb->OSTCBX             = (INT8U)(prio & 0x07);
   100c0:	e0bffb03 	ldbu	r2,-20(fp)
   100c4:	108001cc 	andi	r2,r2,7
   100c8:	1007883a 	mov	r3,r2
   100cc:	e0bff617 	ldw	r2,-40(fp)
   100d0:	10c00cc5 	stb	r3,51(r2)
        ptcb->OSTCBBitY          = (INT8U)(1 << ptcb->OSTCBY);
   100d4:	e0bff617 	ldw	r2,-40(fp)
   100d8:	10800d03 	ldbu	r2,52(r2)
   100dc:	10803fcc 	andi	r2,r2,255
   100e0:	00c00044 	movi	r3,1
   100e4:	1884983a 	sll	r2,r3,r2
   100e8:	1007883a 	mov	r3,r2
   100ec:	e0bff617 	ldw	r2,-40(fp)
   100f0:	10c00d85 	stb	r3,54(r2)
        ptcb->OSTCBBitX          = (INT8U)(1 << ptcb->OSTCBX);
   100f4:	e0bff617 	ldw	r2,-40(fp)
   100f8:	10800cc3 	ldbu	r2,51(r2)
   100fc:	10803fcc 	andi	r2,r2,255
   10100:	00c00044 	movi	r3,1
   10104:	1884983a 	sll	r2,r3,r2
   10108:	1007883a 	mov	r3,r2
   1010c:	e0bff617 	ldw	r2,-40(fp)
   10110:	10c00d45 	stb	r3,53(r2)
        ptcb->OSTCBBitY          = (INT16U)(1 << ptcb->OSTCBY);
        ptcb->OSTCBBitX          = (INT16U)(1 << ptcb->OSTCBX);
#endif

#if (OS_EVENT_EN)
        ptcb->OSTCBEventPtr      = (OS_EVENT  *)0;         /* Task is not pending on an  event         */
   10114:	e0bff617 	ldw	r2,-40(fp)
   10118:	10000715 	stw	zero,28(r2)
#if (OS_EVENT_MULTI_EN > 0)
        ptcb->OSTCBEventMultiPtr = (OS_EVENT **)0;         /* Task is not pending on any events        */
   1011c:	e0bff617 	ldw	r2,-40(fp)
   10120:	10000815 	stw	zero,32(r2)
#endif
#endif

#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0) && (OS_TASK_DEL_EN > 0)
        ptcb->OSTCBFlagNode  = (OS_FLAG_NODE *)0;          /* Task is not pending on an event flag     */
   10124:	e0bff617 	ldw	r2,-40(fp)
   10128:	10000a15 	stw	zero,40(r2)
#endif

#if (OS_MBOX_EN > 0) || ((OS_Q_EN > 0) && (OS_MAX_QS > 0))
        ptcb->OSTCBMsg       = (void *)0;                  /* No message received                      */
   1012c:	e0bff617 	ldw	r2,-40(fp)
   10130:	10000915 	stw	zero,36(r2)
#endif

#if OS_TASK_PROFILE_EN > 0
        ptcb->OSTCBCtxSwCtr    = 0L;                       /* Initialize profiling variables           */
   10134:	e0bff617 	ldw	r2,-40(fp)
   10138:	10000e15 	stw	zero,56(r2)
        ptcb->OSTCBCyclesStart = 0L;
   1013c:	e0bff617 	ldw	r2,-40(fp)
   10140:	10001015 	stw	zero,64(r2)
        ptcb->OSTCBCyclesTot   = 0L;
   10144:	e0bff617 	ldw	r2,-40(fp)
   10148:	10000f15 	stw	zero,60(r2)
        ptcb->OSTCBStkBase     = (OS_STK *)0;
   1014c:	e0bff617 	ldw	r2,-40(fp)
   10150:	10001115 	stw	zero,68(r2)
        ptcb->OSTCBStkUsed     = 0L;
   10154:	e0bff617 	ldw	r2,-40(fp)
   10158:	10001215 	stw	zero,72(r2)
#endif

#if OS_TASK_NAME_SIZE > 1
        ptcb->OSTCBTaskName[0] = '?';                      /* Unknown name at task creation            */
   1015c:	e0bff617 	ldw	r2,-40(fp)
   10160:	00c00fc4 	movi	r3,63
   10164:	10c01305 	stb	r3,76(r2)
        ptcb->OSTCBTaskName[1] = OS_ASCII_NUL;
   10168:	e0bff617 	ldw	r2,-40(fp)
   1016c:	10001345 	stb	zero,77(r2)
#endif

        OSTCBInitHook(ptcb);
   10170:	e13ff617 	ldw	r4,-40(fp)
   10174:	00175500 	call	17550 <OSTCBInitHook>

        OSTaskCreateHook(ptcb);                            /* Call user defined hook                   */
   10178:	e13ff617 	ldw	r4,-40(fp)
   1017c:	00174480 	call	17448 <OSTaskCreateHook>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   10180:	0005303a 	rdctl	r2,status
   10184:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   10188:	e0fff517 	ldw	r3,-44(fp)
   1018c:	00bfff84 	movi	r2,-2
   10190:	1884703a 	and	r2,r3,r2
   10194:	1001703a 	wrctl	status,r2
  
  return context;
   10198:	e0bff517 	ldw	r2,-44(fp)

        OS_ENTER_CRITICAL();
   1019c:	e0bff415 	stw	r2,-48(fp)
        OSTCBPrioTbl[prio] = ptcb;
   101a0:	e0fffb03 	ldbu	r3,-20(fp)
   101a4:	008000b4 	movhi	r2,2
   101a8:	10be9904 	addi	r2,r2,-1436
   101ac:	18c7883a 	add	r3,r3,r3
   101b0:	18c7883a 	add	r3,r3,r3
   101b4:	10c5883a 	add	r2,r2,r3
   101b8:	e0fff617 	ldw	r3,-40(fp)
   101bc:	10c00015 	stw	r3,0(r2)
        ptcb->OSTCBNext    = OSTCBList;                    /* Link into TCB chain                      */
   101c0:	d0e72317 	ldw	r3,-25460(gp)
   101c4:	e0bff617 	ldw	r2,-40(fp)
   101c8:	10c00515 	stw	r3,20(r2)
        ptcb->OSTCBPrev    = (OS_TCB *)0;
   101cc:	e0bff617 	ldw	r2,-40(fp)
   101d0:	10000615 	stw	zero,24(r2)
        if (OSTCBList != (OS_TCB *)0) {
   101d4:	d0a72317 	ldw	r2,-25460(gp)
   101d8:	10000326 	beq	r2,zero,101e8 <OS_TCBInit+0x22c>
            OSTCBList->OSTCBPrev = ptcb;
   101dc:	d0a72317 	ldw	r2,-25460(gp)
   101e0:	e0fff617 	ldw	r3,-40(fp)
   101e4:	10c00615 	stw	r3,24(r2)
        }
        OSTCBList               = ptcb;
   101e8:	e0bff617 	ldw	r2,-40(fp)
   101ec:	d0a72315 	stw	r2,-25460(gp)
        OSRdyGrp               |= ptcb->OSTCBBitY;         /* Make task ready to run                   */
   101f0:	e0bff617 	ldw	r2,-40(fp)
   101f4:	10c00d83 	ldbu	r3,54(r2)
   101f8:	d0a72c03 	ldbu	r2,-25424(gp)
   101fc:	1884b03a 	or	r2,r3,r2
   10200:	d0a72c05 	stb	r2,-25424(gp)
        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
   10204:	e0bff617 	ldw	r2,-40(fp)
   10208:	10800d03 	ldbu	r2,52(r2)
   1020c:	10c03fcc 	andi	r3,r2,255
   10210:	e0bff617 	ldw	r2,-40(fp)
   10214:	10800d03 	ldbu	r2,52(r2)
   10218:	11003fcc 	andi	r4,r2,255
   1021c:	d0a72c44 	addi	r2,gp,-25423
   10220:	2085883a 	add	r2,r4,r2
   10224:	11000003 	ldbu	r4,0(r2)
   10228:	e0bff617 	ldw	r2,-40(fp)
   1022c:	10800d43 	ldbu	r2,53(r2)
   10230:	2084b03a 	or	r2,r4,r2
   10234:	1009883a 	mov	r4,r2
   10238:	d0a72c44 	addi	r2,gp,-25423
   1023c:	1885883a 	add	r2,r3,r2
   10240:	11000005 	stb	r4,0(r2)
        OSTaskCtr++;                                       /* Increment the #tasks counter             */
   10244:	d0a72843 	ldbu	r2,-25439(gp)
   10248:	10800044 	addi	r2,r2,1
   1024c:	d0a72845 	stb	r2,-25439(gp)
   10250:	e0bff417 	ldw	r2,-48(fp)
   10254:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   10258:	e0bff717 	ldw	r2,-36(fp)
   1025c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_NONE);
   10260:	0005883a 	mov	r2,zero
   10264:	00000506 	br	1027c <OS_TCBInit+0x2c0>
   10268:	e0bff417 	ldw	r2,-48(fp)
   1026c:	e0bff915 	stw	r2,-28(fp)
   10270:	e0bff917 	ldw	r2,-28(fp)
   10274:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_TASK_NO_MORE_TCB);
   10278:	00801084 	movi	r2,66
}
   1027c:	e037883a 	mov	sp,fp
   10280:	dfc00117 	ldw	ra,4(sp)
   10284:	df000017 	ldw	fp,0(sp)
   10288:	dec00204 	addi	sp,sp,8
   1028c:	f800283a 	ret

00010290 <OSDebugInit>:
*********************************************************************************************************
*/

#if OS_DEBUG_EN > 0
void  OSDebugInit (void)
{
   10290:	defffe04 	addi	sp,sp,-8
   10294:	df000115 	stw	fp,4(sp)
   10298:	df000104 	addi	fp,sp,4
    void  *ptemp;

    
    ptemp = (void *)&OSDebugEn;
   1029c:	d0a01004 	addi	r2,gp,-32704
   102a0:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSEndiannessTest;
   102a4:	d0a01104 	addi	r2,gp,-32700
   102a8:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSEventMax;
   102ac:	d0a01284 	addi	r2,gp,-32694
   102b0:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventNameSize;
   102b4:	d0a01304 	addi	r2,gp,-32692
   102b8:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventEn;
   102bc:	d0a01204 	addi	r2,gp,-32696
   102c0:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventSize;
   102c4:	d0a01384 	addi	r2,gp,-32690
   102c8:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventTblSize;
   102cc:	d0a01404 	addi	r2,gp,-32688
   102d0:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventMultiEn;
   102d4:	d0a01484 	addi	r2,gp,-32686
   102d8:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSFlagEn;
   102dc:	d0a01504 	addi	r2,gp,-32684
   102e0:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagGrpSize;
   102e4:	d0a01584 	addi	r2,gp,-32682
   102e8:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagNodeSize;
   102ec:	d0a01604 	addi	r2,gp,-32680
   102f0:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagWidth;
   102f4:	d0a01684 	addi	r2,gp,-32678
   102f8:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagMax;
   102fc:	d0a01704 	addi	r2,gp,-32676
   10300:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagNameSize;
   10304:	d0a01784 	addi	r2,gp,-32674
   10308:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSLowestPrio;
   1030c:	d0a01804 	addi	r2,gp,-32672
   10310:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSMboxEn;
   10314:	d0a01884 	addi	r2,gp,-32670
   10318:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSMemEn;
   1031c:	d0a01904 	addi	r2,gp,-32668
   10320:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemMax;
   10324:	d0a01984 	addi	r2,gp,-32666
   10328:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemNameSize;
   1032c:	d0a01a04 	addi	r2,gp,-32664
   10330:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemSize;
   10334:	d0a01a84 	addi	r2,gp,-32662
   10338:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemTblSize;
   1033c:	d0a01b04 	addi	r2,gp,-32660
   10340:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSMutexEn;
   10344:	d0a01b84 	addi	r2,gp,-32658
   10348:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSPtrSize;
   1034c:	d0a01c04 	addi	r2,gp,-32656
   10350:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSQEn;
   10354:	d0a01c84 	addi	r2,gp,-32654
   10358:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSQMax;
   1035c:	d0a01d04 	addi	r2,gp,-32652
   10360:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSQSize;
   10364:	d0a01d84 	addi	r2,gp,-32650
   10368:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSRdyTblSize;
   1036c:	d0a01e04 	addi	r2,gp,-32648
   10370:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSSemEn;
   10374:	d0a01e84 	addi	r2,gp,-32646
   10378:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSStkWidth;
   1037c:	d0a01f04 	addi	r2,gp,-32644
   10380:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTaskCreateEn;
   10384:	d0a01f84 	addi	r2,gp,-32642
   10388:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskCreateExtEn;
   1038c:	d0a02004 	addi	r2,gp,-32640
   10390:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskDelEn;
   10394:	d0a02084 	addi	r2,gp,-32638
   10398:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskIdleStkSize;
   1039c:	d0a02104 	addi	r2,gp,-32636
   103a0:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskProfileEn;
   103a4:	d0a02184 	addi	r2,gp,-32634
   103a8:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskMax;
   103ac:	d0a02204 	addi	r2,gp,-32632
   103b0:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskNameSize;
   103b4:	d0a02284 	addi	r2,gp,-32630
   103b8:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskStatEn;
   103bc:	d0a02304 	addi	r2,gp,-32628
   103c0:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskStatStkSize;
   103c4:	d0a02384 	addi	r2,gp,-32626
   103c8:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskStatStkChkEn;
   103cc:	d0a02404 	addi	r2,gp,-32624
   103d0:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskSwHookEn;
   103d4:	d0a02484 	addi	r2,gp,-32622
   103d8:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTCBPrioTblMax;
   103dc:	d0a02504 	addi	r2,gp,-32620
   103e0:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTCBSize;
   103e4:	d0a02584 	addi	r2,gp,-32618
   103e8:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTicksPerSec;
   103ec:	d0a02604 	addi	r2,gp,-32616
   103f0:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTimeTickHookEn;
   103f4:	d0a02684 	addi	r2,gp,-32614
   103f8:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTmrWheelSize;
    ptemp = (void *)&OSTmrWheelTblSize;
#endif

    ptemp = (void *)&OSVersionNbr;
   103fc:	d0a02704 	addi	r2,gp,-32612
   10400:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSDataSize;
   10404:	d0a02c04 	addi	r2,gp,-32592
   10408:	e0bfff15 	stw	r2,-4(fp)

    ptemp = ptemp;                             /* Prevent compiler warning for 'ptemp' not being used! */
}
   1040c:	0001883a 	nop
   10410:	e037883a 	mov	sp,fp
   10414:	df000017 	ldw	fp,0(sp)
   10418:	dec00104 	addi	sp,sp,4
   1041c:	f800283a 	ret

00010420 <OSFlagAccept>:
*********************************************************************************************************
*/

#if OS_FLAG_ACCEPT_EN > 0
OS_FLAGS  OSFlagAccept (OS_FLAG_GRP *pgrp, OS_FLAGS flags, INT8U wait_type, INT8U *perr)
{
   10420:	defff204 	addi	sp,sp,-56
   10424:	df000d15 	stw	fp,52(sp)
   10428:	df000d04 	addi	fp,sp,52
   1042c:	e13ffc15 	stw	r4,-16(fp)
   10430:	2807883a 	mov	r3,r5
   10434:	3005883a 	mov	r2,r6
   10438:	e1ffff15 	stw	r7,-4(fp)
   1043c:	e0fffd0d 	sth	r3,-12(fp)
   10440:	e0bffe05 	stb	r2,-8(fp)
    OS_FLAGS      flags_rdy;
    INT8U         result;
    BOOLEAN       consume;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
   10444:	e03ff415 	stw	zero,-48(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
   10448:	e0bfff17 	ldw	r2,-4(fp)
   1044c:	1000021e 	bne	r2,zero,10458 <OSFlagAccept+0x38>
        return ((OS_FLAGS)0);
   10450:	0005883a 	mov	r2,zero
   10454:	0000b006 	br	10718 <OSFlagAccept+0x2f8>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                        /* Validate 'pgrp'                          */
   10458:	e0bffc17 	ldw	r2,-16(fp)
   1045c:	1000051e 	bne	r2,zero,10474 <OSFlagAccept+0x54>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
   10460:	e0bfff17 	ldw	r2,-4(fp)
   10464:	00c01b84 	movi	r3,110
   10468:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
   1046c:	0005883a 	mov	r2,zero
   10470:	0000a906 	br	10718 <OSFlagAccept+0x2f8>
    }
#endif
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {          /* Validate event block type                */
   10474:	e0bffc17 	ldw	r2,-16(fp)
   10478:	10800003 	ldbu	r2,0(r2)
   1047c:	10803fcc 	andi	r2,r2,255
   10480:	10800160 	cmpeqi	r2,r2,5
   10484:	1000051e 	bne	r2,zero,1049c <OSFlagAccept+0x7c>
        *perr = OS_ERR_EVENT_TYPE;
   10488:	e0bfff17 	ldw	r2,-4(fp)
   1048c:	00c00044 	movi	r3,1
   10490:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
   10494:	0005883a 	mov	r2,zero
   10498:	00009f06 	br	10718 <OSFlagAccept+0x2f8>
    }
    result = (INT8U)(wait_type & OS_FLAG_CONSUME);
   1049c:	e0fffe03 	ldbu	r3,-8(fp)
   104a0:	00bfe004 	movi	r2,-128
   104a4:	1884703a 	and	r2,r3,r2
   104a8:	e0bff505 	stb	r2,-44(fp)
    if (result != (INT8U)0) {                              /* See if we need to consume the flags      */
   104ac:	e0bff503 	ldbu	r2,-44(fp)
   104b0:	10000626 	beq	r2,zero,104cc <OSFlagAccept+0xac>
        wait_type &= ~OS_FLAG_CONSUME;
   104b4:	e0bffe03 	ldbu	r2,-8(fp)
   104b8:	10801fcc 	andi	r2,r2,127
   104bc:	e0bffe05 	stb	r2,-8(fp)
        consume    = OS_TRUE;
   104c0:	00800044 	movi	r2,1
   104c4:	e0bff385 	stb	r2,-50(fp)
   104c8:	00000106 	br	104d0 <OSFlagAccept+0xb0>
    } else {
        consume    = OS_FALSE;
   104cc:	e03ff385 	stb	zero,-50(fp)
    }
/*$PAGE*/
    *perr = OS_ERR_NONE;                                   /* Assume NO error until proven otherwise.  */
   104d0:	e0bfff17 	ldw	r2,-4(fp)
   104d4:	10000005 	stb	zero,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   104d8:	0005303a 	rdctl	r2,status
   104dc:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   104e0:	e0fffb17 	ldw	r3,-20(fp)
   104e4:	00bfff84 	movi	r2,-2
   104e8:	1884703a 	and	r2,r3,r2
   104ec:	1001703a 	wrctl	status,r2
  
  return context;
   104f0:	e0bffb17 	ldw	r2,-20(fp)
    OS_ENTER_CRITICAL();
   104f4:	e0bff415 	stw	r2,-48(fp)
    switch (wait_type) {
   104f8:	e0bffe03 	ldbu	r2,-8(fp)
   104fc:	10c00060 	cmpeqi	r3,r2,1
   10500:	18005f1e 	bne	r3,zero,10680 <OSFlagAccept+0x260>
   10504:	10c00088 	cmpgei	r3,r2,2
   10508:	1800021e 	bne	r3,zero,10514 <OSFlagAccept+0xf4>
   1050c:	10003f26 	beq	r2,zero,1060c <OSFlagAccept+0x1ec>
   10510:	00007706 	br	106f0 <OSFlagAccept+0x2d0>
   10514:	10c000a0 	cmpeqi	r3,r2,2
   10518:	1800031e 	bne	r3,zero,10528 <OSFlagAccept+0x108>
   1051c:	108000e0 	cmpeqi	r2,r2,3
   10520:	10001e1e 	bne	r2,zero,1059c <OSFlagAccept+0x17c>
   10524:	00007206 	br	106f0 <OSFlagAccept+0x2d0>
        case OS_FLAG_WAIT_SET_ALL:                         /* See if all required flags are set        */
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);     /* Extract only the bits we want   */
   10528:	e0bffc17 	ldw	r2,-16(fp)
   1052c:	10c0020b 	ldhu	r3,8(r2)
   10530:	e0bffd0b 	ldhu	r2,-12(fp)
   10534:	1884703a 	and	r2,r3,r2
   10538:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
   1053c:	e0fff30b 	ldhu	r3,-52(fp)
   10540:	e0bffd0b 	ldhu	r2,-12(fp)
   10544:	18800d1e 	bne	r3,r2,1057c <OSFlagAccept+0x15c>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
   10548:	e0bff383 	ldbu	r2,-50(fp)
   1054c:	10800058 	cmpnei	r2,r2,1
   10550:	10000d1e 	bne	r2,zero,10588 <OSFlagAccept+0x168>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we wanted      */
   10554:	e0bffc17 	ldw	r2,-16(fp)
   10558:	1080020b 	ldhu	r2,8(r2)
   1055c:	1007883a 	mov	r3,r2
   10560:	e0bff30b 	ldhu	r2,-52(fp)
   10564:	0084303a 	nor	r2,zero,r2
   10568:	1884703a 	and	r2,r3,r2
   1056c:	1007883a 	mov	r3,r2
   10570:	e0bffc17 	ldw	r2,-16(fp)
   10574:	10c0020d 	sth	r3,8(r2)
   10578:	00000306 	br	10588 <OSFlagAccept+0x168>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
   1057c:	e0bfff17 	ldw	r2,-4(fp)
   10580:	00c01c04 	movi	r3,112
   10584:	10c00005 	stb	r3,0(r2)
   10588:	e0bff417 	ldw	r2,-48(fp)
   1058c:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   10590:	e0bff617 	ldw	r2,-40(fp)
   10594:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
   10598:	00005e06 	br	10714 <OSFlagAccept+0x2f4>

        case OS_FLAG_WAIT_SET_ANY:
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);     /* Extract only the bits we want   */
   1059c:	e0bffc17 	ldw	r2,-16(fp)
   105a0:	10c0020b 	ldhu	r3,8(r2)
   105a4:	e0bffd0b 	ldhu	r2,-12(fp)
   105a8:	1884703a 	and	r2,r3,r2
   105ac:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag set                      */
   105b0:	e0bff30b 	ldhu	r2,-52(fp)
   105b4:	10000d26 	beq	r2,zero,105ec <OSFlagAccept+0x1cc>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
   105b8:	e0bff383 	ldbu	r2,-50(fp)
   105bc:	10800058 	cmpnei	r2,r2,1
   105c0:	10000d1e 	bne	r2,zero,105f8 <OSFlagAccept+0x1d8>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we got         */
   105c4:	e0bffc17 	ldw	r2,-16(fp)
   105c8:	1080020b 	ldhu	r2,8(r2)
   105cc:	1007883a 	mov	r3,r2
   105d0:	e0bff30b 	ldhu	r2,-52(fp)
   105d4:	0084303a 	nor	r2,zero,r2
   105d8:	1884703a 	and	r2,r3,r2
   105dc:	1007883a 	mov	r3,r2
   105e0:	e0bffc17 	ldw	r2,-16(fp)
   105e4:	10c0020d 	sth	r3,8(r2)
   105e8:	00000306 	br	105f8 <OSFlagAccept+0x1d8>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
   105ec:	e0bfff17 	ldw	r2,-4(fp)
   105f0:	00c01c04 	movi	r3,112
   105f4:	10c00005 	stb	r3,0(r2)
   105f8:	e0bff417 	ldw	r2,-48(fp)
   105fc:	e0bff715 	stw	r2,-36(fp)
   10600:	e0bff717 	ldw	r2,-36(fp)
   10604:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
   10608:	00004206 	br	10714 <OSFlagAccept+0x2f4>

#if OS_FLAG_WAIT_CLR_EN > 0
        case OS_FLAG_WAIT_CLR_ALL:                         /* See if all required flags are cleared    */
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags);  /* Extract only the bits we want     */
   1060c:	e0bffc17 	ldw	r2,-16(fp)
   10610:	1080020b 	ldhu	r2,8(r2)
   10614:	0084303a 	nor	r2,zero,r2
   10618:	1007883a 	mov	r3,r2
   1061c:	e0bffd0b 	ldhu	r2,-12(fp)
   10620:	1884703a 	and	r2,r3,r2
   10624:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
   10628:	e0fff30b 	ldhu	r3,-52(fp)
   1062c:	e0bffd0b 	ldhu	r2,-12(fp)
   10630:	18800b1e 	bne	r3,r2,10660 <OSFlagAccept+0x240>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
   10634:	e0bff383 	ldbu	r2,-50(fp)
   10638:	10800058 	cmpnei	r2,r2,1
   1063c:	10000b1e 	bne	r2,zero,1066c <OSFlagAccept+0x24c>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we wanted        */
   10640:	e0bffc17 	ldw	r2,-16(fp)
   10644:	10c0020b 	ldhu	r3,8(r2)
   10648:	e0bff30b 	ldhu	r2,-52(fp)
   1064c:	1884b03a 	or	r2,r3,r2
   10650:	1007883a 	mov	r3,r2
   10654:	e0bffc17 	ldw	r2,-16(fp)
   10658:	10c0020d 	sth	r3,8(r2)
   1065c:	00000306 	br	1066c <OSFlagAccept+0x24c>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
   10660:	e0bfff17 	ldw	r2,-4(fp)
   10664:	00c01c04 	movi	r3,112
   10668:	10c00005 	stb	r3,0(r2)
   1066c:	e0bff417 	ldw	r2,-48(fp)
   10670:	e0bff815 	stw	r2,-32(fp)
   10674:	e0bff817 	ldw	r2,-32(fp)
   10678:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
   1067c:	00002506 	br	10714 <OSFlagAccept+0x2f4>

        case OS_FLAG_WAIT_CLR_ANY:
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags); /* Extract only the bits we want      */
   10680:	e0bffc17 	ldw	r2,-16(fp)
   10684:	1080020b 	ldhu	r2,8(r2)
   10688:	0084303a 	nor	r2,zero,r2
   1068c:	1007883a 	mov	r3,r2
   10690:	e0bffd0b 	ldhu	r2,-12(fp)
   10694:	1884703a 	and	r2,r3,r2
   10698:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag cleared                  */
   1069c:	e0bff30b 	ldhu	r2,-52(fp)
   106a0:	10000b26 	beq	r2,zero,106d0 <OSFlagAccept+0x2b0>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
   106a4:	e0bff383 	ldbu	r2,-50(fp)
   106a8:	10800058 	cmpnei	r2,r2,1
   106ac:	10000b1e 	bne	r2,zero,106dc <OSFlagAccept+0x2bc>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we got           */
   106b0:	e0bffc17 	ldw	r2,-16(fp)
   106b4:	10c0020b 	ldhu	r3,8(r2)
   106b8:	e0bff30b 	ldhu	r2,-52(fp)
   106bc:	1884b03a 	or	r2,r3,r2
   106c0:	1007883a 	mov	r3,r2
   106c4:	e0bffc17 	ldw	r2,-16(fp)
   106c8:	10c0020d 	sth	r3,8(r2)
   106cc:	00000306 	br	106dc <OSFlagAccept+0x2bc>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
   106d0:	e0bfff17 	ldw	r2,-4(fp)
   106d4:	00c01c04 	movi	r3,112
   106d8:	10c00005 	stb	r3,0(r2)
   106dc:	e0bff417 	ldw	r2,-48(fp)
   106e0:	e0bff915 	stw	r2,-28(fp)
   106e4:	e0bff917 	ldw	r2,-28(fp)
   106e8:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
   106ec:	00000906 	br	10714 <OSFlagAccept+0x2f4>
   106f0:	e0bff417 	ldw	r2,-48(fp)
   106f4:	e0bffa15 	stw	r2,-24(fp)
   106f8:	e0bffa17 	ldw	r2,-24(fp)
   106fc:	1001703a 	wrctl	status,r2
#endif

        default:
             OS_EXIT_CRITICAL();
             flags_rdy = (OS_FLAGS)0;
   10700:	e03ff30d 	sth	zero,-52(fp)
             *perr     = OS_ERR_FLAG_WAIT_TYPE;
   10704:	e0bfff17 	ldw	r2,-4(fp)
   10708:	00c01bc4 	movi	r3,111
   1070c:	10c00005 	stb	r3,0(r2)
             break;
   10710:	0001883a 	nop
    }
    return (flags_rdy);
   10714:	e0bff30b 	ldhu	r2,-52(fp)
}
   10718:	e037883a 	mov	sp,fp
   1071c:	df000017 	ldw	fp,0(sp)
   10720:	dec00104 	addi	sp,sp,4
   10724:	f800283a 	ret

00010728 <OSFlagCreate>:
* Called from: Task ONLY
*********************************************************************************************************
*/

OS_FLAG_GRP  *OSFlagCreate (OS_FLAGS flags, INT8U *perr)
{
   10728:	defff804 	addi	sp,sp,-32
   1072c:	df000715 	stw	fp,28(sp)
   10730:	df000704 	addi	fp,sp,28
   10734:	2005883a 	mov	r2,r4
   10738:	e17fff15 	stw	r5,-4(fp)
   1073c:	e0bffe0d 	sth	r2,-8(fp)
    OS_FLAG_GRP *pgrp;
#if OS_CRITICAL_METHOD == 3                         /* Allocate storage for CPU status register        */
    OS_CPU_SR    cpu_sr = 0;
   10740:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                       /* Validate 'perr'                                 */
   10744:	e0bfff17 	ldw	r2,-4(fp)
   10748:	1000021e 	bne	r2,zero,10754 <OSFlagCreate+0x2c>
        return ((OS_FLAG_GRP *)0);
   1074c:	0005883a 	mov	r2,zero
   10750:	00003306 	br	10820 <OSFlagCreate+0xf8>
    }
#endif
    if (OSIntNesting > 0) {                         /* See if called from ISR ...                      */
   10754:	d0a72e03 	ldbu	r2,-25416(gp)
   10758:	10803fcc 	andi	r2,r2,255
   1075c:	10000526 	beq	r2,zero,10774 <OSFlagCreate+0x4c>
        *perr = OS_ERR_CREATE_ISR;                  /* ... can't CREATE from an ISR                    */
   10760:	e0bfff17 	ldw	r2,-4(fp)
   10764:	00c00404 	movi	r3,16
   10768:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAG_GRP *)0);
   1076c:	0005883a 	mov	r2,zero
   10770:	00002b06 	br	10820 <OSFlagCreate+0xf8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   10774:	0005303a 	rdctl	r2,status
   10778:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1077c:	e0fffd17 	ldw	r3,-12(fp)
   10780:	00bfff84 	movi	r2,-2
   10784:	1884703a 	and	r2,r3,r2
   10788:	1001703a 	wrctl	status,r2
  
  return context;
   1078c:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
   10790:	e0bff915 	stw	r2,-28(fp)
    pgrp = OSFlagFreeList;                          /* Get next free event flag                        */
   10794:	d0a73117 	ldw	r2,-25404(gp)
   10798:	e0bffb15 	stw	r2,-20(fp)
    if (pgrp != (OS_FLAG_GRP *)0) {                 /* See if we have event flag groups available      */
   1079c:	e0bffb17 	ldw	r2,-20(fp)
   107a0:	10001726 	beq	r2,zero,10800 <OSFlagCreate+0xd8>
                                                    /* Adjust free list                                */
        OSFlagFreeList       = (OS_FLAG_GRP *)OSFlagFreeList->OSFlagWaitList;
   107a4:	d0a73117 	ldw	r2,-25404(gp)
   107a8:	10800117 	ldw	r2,4(r2)
   107ac:	d0a73115 	stw	r2,-25404(gp)
        pgrp->OSFlagType     = OS_EVENT_TYPE_FLAG;  /* Set to event flag group type                    */
   107b0:	e0bffb17 	ldw	r2,-20(fp)
   107b4:	00c00144 	movi	r3,5
   107b8:	10c00005 	stb	r3,0(r2)
        pgrp->OSFlagFlags    = flags;               /* Set to desired initial value                    */
   107bc:	e0bffb17 	ldw	r2,-20(fp)
   107c0:	e0fffe0b 	ldhu	r3,-8(fp)
   107c4:	10c0020d 	sth	r3,8(r2)
        pgrp->OSFlagWaitList = (void *)0;           /* Clear list of tasks waiting on flags            */
   107c8:	e0bffb17 	ldw	r2,-20(fp)
   107cc:	10000115 	stw	zero,4(r2)
#if OS_FLAG_NAME_SIZE > 1
        pgrp->OSFlagName[0]  = '?';
   107d0:	e0bffb17 	ldw	r2,-20(fp)
   107d4:	00c00fc4 	movi	r3,63
   107d8:	10c00285 	stb	r3,10(r2)
        pgrp->OSFlagName[1]  = OS_ASCII_NUL;
   107dc:	e0bffb17 	ldw	r2,-20(fp)
   107e0:	100002c5 	stb	zero,11(r2)
   107e4:	e0bff917 	ldw	r2,-28(fp)
   107e8:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   107ec:	e0bffa17 	ldw	r2,-24(fp)
   107f0:	1001703a 	wrctl	status,r2
#endif
        OS_EXIT_CRITICAL();
        *perr                = OS_ERR_NONE;
   107f4:	e0bfff17 	ldw	r2,-4(fp)
   107f8:	10000005 	stb	zero,0(r2)
   107fc:	00000706 	br	1081c <OSFlagCreate+0xf4>
   10800:	e0bff917 	ldw	r2,-28(fp)
   10804:	e0bffc15 	stw	r2,-16(fp)
   10808:	e0bffc17 	ldw	r2,-16(fp)
   1080c:	1001703a 	wrctl	status,r2
    } else {
        OS_EXIT_CRITICAL();
        *perr                = OS_ERR_FLAG_GRP_DEPLETED;
   10810:	e0bfff17 	ldw	r2,-4(fp)
   10814:	00c01c84 	movi	r3,114
   10818:	10c00005 	stb	r3,0(r2)
    }
    return (pgrp);                                  /* Return pointer to event flag group              */
   1081c:	e0bffb17 	ldw	r2,-20(fp)
}
   10820:	e037883a 	mov	sp,fp
   10824:	df000017 	ldw	fp,0(sp)
   10828:	dec00104 	addi	sp,sp,4
   1082c:	f800283a 	ret

00010830 <OSFlagDel>:
*********************************************************************************************************
*/

#if OS_FLAG_DEL_EN > 0
OS_FLAG_GRP  *OSFlagDel (OS_FLAG_GRP *pgrp, INT8U opt, INT8U *perr)
{
   10830:	defff204 	addi	sp,sp,-56
   10834:	dfc00d15 	stw	ra,52(sp)
   10838:	df000c15 	stw	fp,48(sp)
   1083c:	df000c04 	addi	fp,sp,48
   10840:	e13ffd15 	stw	r4,-12(fp)
   10844:	2805883a 	mov	r2,r5
   10848:	e1bfff15 	stw	r6,-4(fp)
   1084c:	e0bffe05 	stb	r2,-8(fp)
    BOOLEAN       tasks_waiting;
    OS_FLAG_NODE *pnode;
    OS_FLAG_GRP  *pgrp_return;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
   10850:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
   10854:	e0bfff17 	ldw	r2,-4(fp)
   10858:	1000021e 	bne	r2,zero,10864 <OSFlagDel+0x34>
        return (pgrp);
   1085c:	e0bffd17 	ldw	r2,-12(fp)
   10860:	00008006 	br	10a64 <OSFlagDel+0x234>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                        /* Validate 'pgrp'                          */
   10864:	e0bffd17 	ldw	r2,-12(fp)
   10868:	1000051e 	bne	r2,zero,10880 <OSFlagDel+0x50>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
   1086c:	e0bfff17 	ldw	r2,-4(fp)
   10870:	00c01b84 	movi	r3,110
   10874:	10c00005 	stb	r3,0(r2)
        return (pgrp);
   10878:	e0bffd17 	ldw	r2,-12(fp)
   1087c:	00007906 	br	10a64 <OSFlagDel+0x234>
    }
#endif
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
   10880:	d0a72e03 	ldbu	r2,-25416(gp)
   10884:	10803fcc 	andi	r2,r2,255
   10888:	10000526 	beq	r2,zero,108a0 <OSFlagDel+0x70>
        *perr = OS_ERR_DEL_ISR;                            /* ... can't DELETE from an ISR             */
   1088c:	e0bfff17 	ldw	r2,-4(fp)
   10890:	00c003c4 	movi	r3,15
   10894:	10c00005 	stb	r3,0(r2)
        return (pgrp);
   10898:	e0bffd17 	ldw	r2,-12(fp)
   1089c:	00007106 	br	10a64 <OSFlagDel+0x234>
    }
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {          /* Validate event group type                */
   108a0:	e0bffd17 	ldw	r2,-12(fp)
   108a4:	10800003 	ldbu	r2,0(r2)
   108a8:	10803fcc 	andi	r2,r2,255
   108ac:	10800160 	cmpeqi	r2,r2,5
   108b0:	1000051e 	bne	r2,zero,108c8 <OSFlagDel+0x98>
        *perr = OS_ERR_EVENT_TYPE;
   108b4:	e0bfff17 	ldw	r2,-4(fp)
   108b8:	00c00044 	movi	r3,1
   108bc:	10c00005 	stb	r3,0(r2)
        return (pgrp);
   108c0:	e0bffd17 	ldw	r2,-12(fp)
   108c4:	00006706 	br	10a64 <OSFlagDel+0x234>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   108c8:	0005303a 	rdctl	r2,status
   108cc:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   108d0:	e0fffc17 	ldw	r3,-16(fp)
   108d4:	00bfff84 	movi	r2,-2
   108d8:	1884703a 	and	r2,r3,r2
   108dc:	1001703a 	wrctl	status,r2
  
  return context;
   108e0:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
   108e4:	e0bff715 	stw	r2,-36(fp)
    if (pgrp->OSFlagWaitList != (void *)0) {               /* See if any tasks waiting on event flags  */
   108e8:	e0bffd17 	ldw	r2,-12(fp)
   108ec:	10800117 	ldw	r2,4(r2)
   108f0:	10000326 	beq	r2,zero,10900 <OSFlagDel+0xd0>
        tasks_waiting = OS_TRUE;                           /* Yes                                      */
   108f4:	00800044 	movi	r2,1
   108f8:	e0bff405 	stb	r2,-48(fp)
   108fc:	00000106 	br	10904 <OSFlagDel+0xd4>
    } else {
        tasks_waiting = OS_FALSE;                          /* No                                       */
   10900:	e03ff405 	stb	zero,-48(fp)
    }
    switch (opt) {
   10904:	e0bffe03 	ldbu	r2,-8(fp)
   10908:	10000326 	beq	r2,zero,10918 <OSFlagDel+0xe8>
   1090c:	10800060 	cmpeqi	r2,r2,1
   10910:	1000231e 	bne	r2,zero,109a0 <OSFlagDel+0x170>
   10914:	00004806 	br	10a38 <OSFlagDel+0x208>
        case OS_DEL_NO_PEND:                               /* Delete group if no task waiting          */
             if (tasks_waiting == OS_FALSE) {
   10918:	e0bff403 	ldbu	r2,-48(fp)
   1091c:	1000161e 	bne	r2,zero,10978 <OSFlagDel+0x148>
#if OS_FLAG_NAME_SIZE > 1
                 pgrp->OSFlagName[0]  = '?';               /* Unknown name                             */
   10920:	e0bffd17 	ldw	r2,-12(fp)
   10924:	00c00fc4 	movi	r3,63
   10928:	10c00285 	stb	r3,10(r2)
                 pgrp->OSFlagName[1]  = OS_ASCII_NUL;
   1092c:	e0bffd17 	ldw	r2,-12(fp)
   10930:	100002c5 	stb	zero,11(r2)
#endif
                 pgrp->OSFlagType     = OS_EVENT_TYPE_UNUSED;
   10934:	e0bffd17 	ldw	r2,-12(fp)
   10938:	10000005 	stb	zero,0(r2)
                 pgrp->OSFlagWaitList = (void *)OSFlagFreeList; /* Return group to free list           */
   1093c:	d0e73117 	ldw	r3,-25404(gp)
   10940:	e0bffd17 	ldw	r2,-12(fp)
   10944:	10c00115 	stw	r3,4(r2)
                 pgrp->OSFlagFlags    = (OS_FLAGS)0;
   10948:	e0bffd17 	ldw	r2,-12(fp)
   1094c:	1000020d 	sth	zero,8(r2)
                 OSFlagFreeList       = pgrp;
   10950:	e0bffd17 	ldw	r2,-12(fp)
   10954:	d0a73115 	stw	r2,-25404(gp)
   10958:	e0bff717 	ldw	r2,-36(fp)
   1095c:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   10960:	e0bff817 	ldw	r2,-32(fp)
   10964:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                = OS_ERR_NONE;
   10968:	e0bfff17 	ldw	r2,-4(fp)
   1096c:	10000005 	stb	zero,0(r2)
                 pgrp_return          = (OS_FLAG_GRP *)0;  /* Event Flag Group has been deleted        */
   10970:	e03ff615 	stw	zero,-40(fp)
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                = OS_ERR_TASK_WAITING;
                 pgrp_return          = pgrp;
             }
             break;
   10974:	00003a06 	br	10a60 <OSFlagDel+0x230>
   10978:	e0bff717 	ldw	r2,-36(fp)
   1097c:	e0bff915 	stw	r2,-28(fp)
   10980:	e0bff917 	ldw	r2,-28(fp)
   10984:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                = OS_ERR_NONE;
                 pgrp_return          = (OS_FLAG_GRP *)0;  /* Event Flag Group has been deleted        */
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                = OS_ERR_TASK_WAITING;
   10988:	e0bfff17 	ldw	r2,-4(fp)
   1098c:	00c01244 	movi	r3,73
   10990:	10c00005 	stb	r3,0(r2)
                 pgrp_return          = pgrp;
   10994:	e0bffd17 	ldw	r2,-12(fp)
   10998:	e0bff615 	stw	r2,-40(fp)
             }
             break;
   1099c:	00003006 	br	10a60 <OSFlagDel+0x230>

        case OS_DEL_ALWAYS:                                /* Always delete the event flag group       */
             pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
   109a0:	e0bffd17 	ldw	r2,-12(fp)
   109a4:	10800117 	ldw	r2,4(r2)
   109a8:	e0bff515 	stw	r2,-44(fp)
             while (pnode != (OS_FLAG_NODE *)0) {          /* Ready ALL tasks waiting for flags        */
   109ac:	00000606 	br	109c8 <OSFlagDel+0x198>
                 (void)OS_FlagTaskRdy(pnode, (OS_FLAGS)0);
   109b0:	000b883a 	mov	r5,zero
   109b4:	e13ff517 	ldw	r4,-44(fp)
   109b8:	001199c0 	call	1199c <OS_FlagTaskRdy>
                 pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext;
   109bc:	e0bff517 	ldw	r2,-44(fp)
   109c0:	10800017 	ldw	r2,0(r2)
   109c4:	e0bff515 	stw	r2,-44(fp)
             }
             break;

        case OS_DEL_ALWAYS:                                /* Always delete the event flag group       */
             pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
             while (pnode != (OS_FLAG_NODE *)0) {          /* Ready ALL tasks waiting for flags        */
   109c8:	e0bff517 	ldw	r2,-44(fp)
   109cc:	103ff81e 	bne	r2,zero,109b0 <__alt_data_end+0xfffe09b0>
                 (void)OS_FlagTaskRdy(pnode, (OS_FLAGS)0);
                 pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext;
             }
#if OS_FLAG_NAME_SIZE > 1
             pgrp->OSFlagName[0]  = '?';                   /* Unknown name                             */
   109d0:	e0bffd17 	ldw	r2,-12(fp)
   109d4:	00c00fc4 	movi	r3,63
   109d8:	10c00285 	stb	r3,10(r2)
             pgrp->OSFlagName[1]  = OS_ASCII_NUL;
   109dc:	e0bffd17 	ldw	r2,-12(fp)
   109e0:	100002c5 	stb	zero,11(r2)
#endif
             pgrp->OSFlagType     = OS_EVENT_TYPE_UNUSED;
   109e4:	e0bffd17 	ldw	r2,-12(fp)
   109e8:	10000005 	stb	zero,0(r2)
             pgrp->OSFlagWaitList = (void *)OSFlagFreeList;/* Return group to free list                */
   109ec:	d0e73117 	ldw	r3,-25404(gp)
   109f0:	e0bffd17 	ldw	r2,-12(fp)
   109f4:	10c00115 	stw	r3,4(r2)
             pgrp->OSFlagFlags    = (OS_FLAGS)0;
   109f8:	e0bffd17 	ldw	r2,-12(fp)
   109fc:	1000020d 	sth	zero,8(r2)
             OSFlagFreeList       = pgrp;
   10a00:	e0bffd17 	ldw	r2,-12(fp)
   10a04:	d0a73115 	stw	r2,-25404(gp)
   10a08:	e0bff717 	ldw	r2,-36(fp)
   10a0c:	e0bffa15 	stw	r2,-24(fp)
   10a10:	e0bffa17 	ldw	r2,-24(fp)
   10a14:	1001703a 	wrctl	status,r2
             OS_EXIT_CRITICAL();
             if (tasks_waiting == OS_TRUE) {               /* Reschedule only if task(s) were waiting  */
   10a18:	e0bff403 	ldbu	r2,-48(fp)
   10a1c:	10800058 	cmpnei	r2,r2,1
   10a20:	1000011e 	bne	r2,zero,10a28 <OSFlagDel+0x1f8>
                 OS_Sched();                               /* Find highest priority task ready to run  */
   10a24:	000fbbc0 	call	fbbc <OS_Sched>
             }
             *perr = OS_ERR_NONE;
   10a28:	e0bfff17 	ldw	r2,-4(fp)
   10a2c:	10000005 	stb	zero,0(r2)
             pgrp_return          = (OS_FLAG_GRP *)0;      /* Event Flag Group has been deleted        */
   10a30:	e03ff615 	stw	zero,-40(fp)
             break;
   10a34:	00000a06 	br	10a60 <OSFlagDel+0x230>
   10a38:	e0bff717 	ldw	r2,-36(fp)
   10a3c:	e0bffb15 	stw	r2,-20(fp)
   10a40:	e0bffb17 	ldw	r2,-20(fp)
   10a44:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();
             *perr                = OS_ERR_INVALID_OPT;
   10a48:	e0bfff17 	ldw	r2,-4(fp)
   10a4c:	00c001c4 	movi	r3,7
   10a50:	10c00005 	stb	r3,0(r2)
             pgrp_return          = pgrp;
   10a54:	e0bffd17 	ldw	r2,-12(fp)
   10a58:	e0bff615 	stw	r2,-40(fp)
             break;
   10a5c:	0001883a 	nop
    }
    return (pgrp_return);
   10a60:	e0bff617 	ldw	r2,-40(fp)
}
   10a64:	e037883a 	mov	sp,fp
   10a68:	dfc00117 	ldw	ra,4(sp)
   10a6c:	df000017 	ldw	fp,0(sp)
   10a70:	dec00204 	addi	sp,sp,8
   10a74:	f800283a 	ret

00010a78 <OSFlagNameGet>:
*********************************************************************************************************
*/

#if OS_FLAG_NAME_SIZE > 1
INT8U  OSFlagNameGet (OS_FLAG_GRP *pgrp, INT8U *pname, INT8U *perr)
{
   10a78:	defff604 	addi	sp,sp,-40
   10a7c:	dfc00915 	stw	ra,36(sp)
   10a80:	df000815 	stw	fp,32(sp)
   10a84:	df000804 	addi	fp,sp,32
   10a88:	e13ffd15 	stw	r4,-12(fp)
   10a8c:	e17ffe15 	stw	r5,-8(fp)
   10a90:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   10a94:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
   10a98:	e0bfff17 	ldw	r2,-4(fp)
   10a9c:	1000021e 	bne	r2,zero,10aa8 <OSFlagNameGet+0x30>
        return (0);
   10aa0:	0005883a 	mov	r2,zero
   10aa4:	00003906 	br	10b8c <OSFlagNameGet+0x114>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {              /* Is 'pgrp' a NULL pointer?                          */
   10aa8:	e0bffd17 	ldw	r2,-12(fp)
   10aac:	1000051e 	bne	r2,zero,10ac4 <OSFlagNameGet+0x4c>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
   10ab0:	e0bfff17 	ldw	r2,-4(fp)
   10ab4:	00c01b84 	movi	r3,110
   10ab8:	10c00005 	stb	r3,0(r2)
        return (0);
   10abc:	0005883a 	mov	r2,zero
   10ac0:	00003206 	br	10b8c <OSFlagNameGet+0x114>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
   10ac4:	e0bffe17 	ldw	r2,-8(fp)
   10ac8:	1000051e 	bne	r2,zero,10ae0 <OSFlagNameGet+0x68>
        *perr = OS_ERR_PNAME_NULL;
   10acc:	e0bfff17 	ldw	r2,-4(fp)
   10ad0:	00c00304 	movi	r3,12
   10ad4:	10c00005 	stb	r3,0(r2)
        return (0);
   10ad8:	0005883a 	mov	r2,zero
   10adc:	00002b06 	br	10b8c <OSFlagNameGet+0x114>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
   10ae0:	d0a72e03 	ldbu	r2,-25416(gp)
   10ae4:	10803fcc 	andi	r2,r2,255
   10ae8:	10000526 	beq	r2,zero,10b00 <OSFlagNameGet+0x88>
        *perr = OS_ERR_NAME_GET_ISR;
   10aec:	e0bfff17 	ldw	r2,-4(fp)
   10af0:	00c00444 	movi	r3,17
   10af4:	10c00005 	stb	r3,0(r2)
        return (0);
   10af8:	0005883a 	mov	r2,zero
   10afc:	00002306 	br	10b8c <OSFlagNameGet+0x114>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   10b00:	0005303a 	rdctl	r2,status
   10b04:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   10b08:	e0fffc17 	ldw	r3,-16(fp)
   10b0c:	00bfff84 	movi	r2,-2
   10b10:	1884703a 	and	r2,r3,r2
   10b14:	1001703a 	wrctl	status,r2
  
  return context;
   10b18:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
   10b1c:	e0bff815 	stw	r2,-32(fp)
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {
   10b20:	e0bffd17 	ldw	r2,-12(fp)
   10b24:	10800003 	ldbu	r2,0(r2)
   10b28:	10803fcc 	andi	r2,r2,255
   10b2c:	10800160 	cmpeqi	r2,r2,5
   10b30:	1000091e 	bne	r2,zero,10b58 <OSFlagNameGet+0xe0>
   10b34:	e0bff817 	ldw	r2,-32(fp)
   10b38:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   10b3c:	e0bff917 	ldw	r2,-28(fp)
   10b40:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_EVENT_TYPE;
   10b44:	e0bfff17 	ldw	r2,-4(fp)
   10b48:	00c00044 	movi	r3,1
   10b4c:	10c00005 	stb	r3,0(r2)
        return (0);
   10b50:	0005883a 	mov	r2,zero
   10b54:	00000d06 	br	10b8c <OSFlagNameGet+0x114>
    }
    len   = OS_StrCopy(pname, pgrp->OSFlagName); /* Copy name from OS_FLAG_GRP                         */
   10b58:	e0bffd17 	ldw	r2,-12(fp)
   10b5c:	10800284 	addi	r2,r2,10
   10b60:	100b883a 	mov	r5,r2
   10b64:	e13ffe17 	ldw	r4,-8(fp)
   10b68:	000fd000 	call	fd00 <OS_StrCopy>
   10b6c:	e0bffb05 	stb	r2,-20(fp)
   10b70:	e0bff817 	ldw	r2,-32(fp)
   10b74:	e0bffa15 	stw	r2,-24(fp)
   10b78:	e0bffa17 	ldw	r2,-24(fp)
   10b7c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   10b80:	e0bfff17 	ldw	r2,-4(fp)
   10b84:	10000005 	stb	zero,0(r2)
    return (len);
   10b88:	e0bffb03 	ldbu	r2,-20(fp)
}
   10b8c:	e037883a 	mov	sp,fp
   10b90:	dfc00117 	ldw	ra,4(sp)
   10b94:	df000017 	ldw	fp,0(sp)
   10b98:	dec00204 	addi	sp,sp,8
   10b9c:	f800283a 	ret

00010ba0 <OSFlagNameSet>:
*********************************************************************************************************
*/

#if OS_FLAG_NAME_SIZE > 1
void  OSFlagNameSet (OS_FLAG_GRP *pgrp, INT8U *pname, INT8U *perr)
{
   10ba0:	defff504 	addi	sp,sp,-44
   10ba4:	dfc00a15 	stw	ra,40(sp)
   10ba8:	df000915 	stw	fp,36(sp)
   10bac:	df000904 	addi	fp,sp,36
   10bb0:	e13ffd15 	stw	r4,-12(fp)
   10bb4:	e17ffe15 	stw	r5,-8(fp)
   10bb8:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   10bbc:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
   10bc0:	e0bfff17 	ldw	r2,-4(fp)
   10bc4:	10004326 	beq	r2,zero,10cd4 <OSFlagNameSet+0x134>
        return;
    }
    if (pgrp == (OS_FLAG_GRP *)0) {              /* Is 'pgrp' a NULL pointer?                          */
   10bc8:	e0bffd17 	ldw	r2,-12(fp)
   10bcc:	1000041e 	bne	r2,zero,10be0 <OSFlagNameSet+0x40>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
   10bd0:	e0bfff17 	ldw	r2,-4(fp)
   10bd4:	00c01b84 	movi	r3,110
   10bd8:	10c00005 	stb	r3,0(r2)
        return;
   10bdc:	00003e06 	br	10cd8 <OSFlagNameSet+0x138>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
   10be0:	e0bffe17 	ldw	r2,-8(fp)
   10be4:	1000041e 	bne	r2,zero,10bf8 <OSFlagNameSet+0x58>
        *perr = OS_ERR_PNAME_NULL;
   10be8:	e0bfff17 	ldw	r2,-4(fp)
   10bec:	00c00304 	movi	r3,12
   10bf0:	10c00005 	stb	r3,0(r2)
        return;
   10bf4:	00003806 	br	10cd8 <OSFlagNameSet+0x138>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
   10bf8:	d0a72e03 	ldbu	r2,-25416(gp)
   10bfc:	10803fcc 	andi	r2,r2,255
   10c00:	10000426 	beq	r2,zero,10c14 <OSFlagNameSet+0x74>
        *perr = OS_ERR_NAME_SET_ISR;
   10c04:	e0bfff17 	ldw	r2,-4(fp)
   10c08:	00c00484 	movi	r3,18
   10c0c:	10c00005 	stb	r3,0(r2)
        return;
   10c10:	00003106 	br	10cd8 <OSFlagNameSet+0x138>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   10c14:	0005303a 	rdctl	r2,status
   10c18:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   10c1c:	e0fffc17 	ldw	r3,-16(fp)
   10c20:	00bfff84 	movi	r2,-2
   10c24:	1884703a 	and	r2,r3,r2
   10c28:	1001703a 	wrctl	status,r2
  
  return context;
   10c2c:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
   10c30:	e0bff715 	stw	r2,-36(fp)
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {
   10c34:	e0bffd17 	ldw	r2,-12(fp)
   10c38:	10800003 	ldbu	r2,0(r2)
   10c3c:	10803fcc 	andi	r2,r2,255
   10c40:	10800160 	cmpeqi	r2,r2,5
   10c44:	1000081e 	bne	r2,zero,10c68 <OSFlagNameSet+0xc8>
   10c48:	e0bff717 	ldw	r2,-36(fp)
   10c4c:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   10c50:	e0bff817 	ldw	r2,-32(fp)
   10c54:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_EVENT_TYPE;
   10c58:	e0bfff17 	ldw	r2,-4(fp)
   10c5c:	00c00044 	movi	r3,1
   10c60:	10c00005 	stb	r3,0(r2)
        return;
   10c64:	00001c06 	br	10cd8 <OSFlagNameSet+0x138>
    }
    len = OS_StrLen(pname);                      /* Can we fit the string in the storage area?         */
   10c68:	e13ffe17 	ldw	r4,-8(fp)
   10c6c:	000fd740 	call	fd74 <OS_StrLen>
   10c70:	e0bffa05 	stb	r2,-24(fp)
    if (len > (OS_FLAG_NAME_SIZE - 1)) {         /* No                                                 */
   10c74:	e0bffa03 	ldbu	r2,-24(fp)
   10c78:	10800830 	cmpltui	r2,r2,32
   10c7c:	1000081e 	bne	r2,zero,10ca0 <OSFlagNameSet+0x100>
   10c80:	e0bff717 	ldw	r2,-36(fp)
   10c84:	e0bff915 	stw	r2,-28(fp)
   10c88:	e0bff917 	ldw	r2,-28(fp)
   10c8c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_FLAG_NAME_TOO_LONG;
   10c90:	e0bfff17 	ldw	r2,-4(fp)
   10c94:	00c01cc4 	movi	r3,115
   10c98:	10c00005 	stb	r3,0(r2)
        return;
   10c9c:	00000e06 	br	10cd8 <OSFlagNameSet+0x138>
    }
    (void)OS_StrCopy(pgrp->OSFlagName, pname);   /* Yes, copy name from OS_FLAG_GRP                    */
   10ca0:	e0bffd17 	ldw	r2,-12(fp)
   10ca4:	10800284 	addi	r2,r2,10
   10ca8:	e17ffe17 	ldw	r5,-8(fp)
   10cac:	1009883a 	mov	r4,r2
   10cb0:	000fd000 	call	fd00 <OS_StrCopy>
   10cb4:	e0bff717 	ldw	r2,-36(fp)
   10cb8:	e0bffb15 	stw	r2,-20(fp)
   10cbc:	e0bffb17 	ldw	r2,-20(fp)
   10cc0:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   10cc4:	e0bfff17 	ldw	r2,-4(fp)
   10cc8:	10000005 	stb	zero,0(r2)
    return;
   10ccc:	0001883a 	nop
   10cd0:	00000106 	br	10cd8 <OSFlagNameSet+0x138>



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
        return;
   10cd4:	0001883a 	nop
    }
    (void)OS_StrCopy(pgrp->OSFlagName, pname);   /* Yes, copy name from OS_FLAG_GRP                    */
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
    return;
}
   10cd8:	e037883a 	mov	sp,fp
   10cdc:	dfc00117 	ldw	ra,4(sp)
   10ce0:	df000017 	ldw	fp,0(sp)
   10ce4:	dec00204 	addi	sp,sp,8
   10ce8:	f800283a 	ret

00010cec <OSFlagPend>:
*                 event flags.
*********************************************************************************************************
*/

OS_FLAGS  OSFlagPend (OS_FLAG_GRP *pgrp, OS_FLAGS flags, INT8U wait_type, INT16U timeout, INT8U *perr)
{
   10cec:	deffe104 	addi	sp,sp,-124
   10cf0:	dfc01e15 	stw	ra,120(sp)
   10cf4:	df001d15 	stw	fp,116(sp)
   10cf8:	df001d04 	addi	fp,sp,116
   10cfc:	e13ffc15 	stw	r4,-16(fp)
   10d00:	2809883a 	mov	r4,r5
   10d04:	3007883a 	mov	r3,r6
   10d08:	3805883a 	mov	r2,r7
   10d0c:	e13ffd0d 	sth	r4,-12(fp)
   10d10:	e0fffe05 	stb	r3,-8(fp)
   10d14:	e0bfff0d 	sth	r2,-4(fp)
    OS_FLAGS      flags_rdy;
    INT8U         result;
    INT8U         pend_stat;
    BOOLEAN       consume;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
   10d18:	e03fe515 	stw	zero,-108(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
   10d1c:	e0800217 	ldw	r2,8(fp)
   10d20:	1000021e 	bne	r2,zero,10d2c <OSFlagPend+0x40>
        return ((OS_FLAGS)0);
   10d24:	0005883a 	mov	r2,zero
   10d28:	00015906 	br	11290 <OSFlagPend+0x5a4>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                        /* Validate 'pgrp'                          */
   10d2c:	e0bffc17 	ldw	r2,-16(fp)
   10d30:	1000051e 	bne	r2,zero,10d48 <OSFlagPend+0x5c>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
   10d34:	e0800217 	ldw	r2,8(fp)
   10d38:	00c01b84 	movi	r3,110
   10d3c:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
   10d40:	0005883a 	mov	r2,zero
   10d44:	00015206 	br	11290 <OSFlagPend+0x5a4>
    }
#endif
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
   10d48:	d0a72e03 	ldbu	r2,-25416(gp)
   10d4c:	10803fcc 	andi	r2,r2,255
   10d50:	10000526 	beq	r2,zero,10d68 <OSFlagPend+0x7c>
        *perr = OS_ERR_PEND_ISR;                           /* ... can't PEND from an ISR               */
   10d54:	e0800217 	ldw	r2,8(fp)
   10d58:	00c00084 	movi	r3,2
   10d5c:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
   10d60:	0005883a 	mov	r2,zero
   10d64:	00014a06 	br	11290 <OSFlagPend+0x5a4>
    }
    if (OSLockNesting > 0) {                               /* See if called with scheduler locked ...  */
   10d68:	d0a72003 	ldbu	r2,-25472(gp)
   10d6c:	10803fcc 	andi	r2,r2,255
   10d70:	10000526 	beq	r2,zero,10d88 <OSFlagPend+0x9c>
        *perr = OS_ERR_PEND_LOCKED;                        /* ... can't PEND when locked               */
   10d74:	e0800217 	ldw	r2,8(fp)
   10d78:	00c00344 	movi	r3,13
   10d7c:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
   10d80:	0005883a 	mov	r2,zero
   10d84:	00014206 	br	11290 <OSFlagPend+0x5a4>
    }
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {          /* Validate event block type                */
   10d88:	e0bffc17 	ldw	r2,-16(fp)
   10d8c:	10800003 	ldbu	r2,0(r2)
   10d90:	10803fcc 	andi	r2,r2,255
   10d94:	10800160 	cmpeqi	r2,r2,5
   10d98:	1000051e 	bne	r2,zero,10db0 <OSFlagPend+0xc4>
        *perr = OS_ERR_EVENT_TYPE;
   10d9c:	e0800217 	ldw	r2,8(fp)
   10da0:	00c00044 	movi	r3,1
   10da4:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
   10da8:	0005883a 	mov	r2,zero
   10dac:	00013806 	br	11290 <OSFlagPend+0x5a4>
    }
    result = (INT8U)(wait_type & OS_FLAG_CONSUME);
   10db0:	e0fffe03 	ldbu	r3,-8(fp)
   10db4:	00bfe004 	movi	r2,-128
   10db8:	1884703a 	and	r2,r3,r2
   10dbc:	e0bfe605 	stb	r2,-104(fp)
    if (result != (INT8U)0) {                             /* See if we need to consume the flags      */
   10dc0:	e0bfe603 	ldbu	r2,-104(fp)
   10dc4:	10000626 	beq	r2,zero,10de0 <OSFlagPend+0xf4>
        wait_type &= ~(INT8U)OS_FLAG_CONSUME;
   10dc8:	e0bffe03 	ldbu	r2,-8(fp)
   10dcc:	10801fcc 	andi	r2,r2,127
   10dd0:	e0bffe05 	stb	r2,-8(fp)
        consume    = OS_TRUE;
   10dd4:	00800044 	movi	r2,1
   10dd8:	e0bfe405 	stb	r2,-112(fp)
   10ddc:	00000106 	br	10de4 <OSFlagPend+0xf8>
    } else {
        consume    = OS_FALSE;
   10de0:	e03fe405 	stb	zero,-112(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   10de4:	0005303a 	rdctl	r2,status
   10de8:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   10dec:	e0fff617 	ldw	r3,-40(fp)
   10df0:	00bfff84 	movi	r2,-2
   10df4:	1884703a 	and	r2,r3,r2
   10df8:	1001703a 	wrctl	status,r2
  
  return context;
   10dfc:	e0bff617 	ldw	r2,-40(fp)
    }
/*$PAGE*/
    OS_ENTER_CRITICAL();
   10e00:	e0bfe515 	stw	r2,-108(fp)
    switch (wait_type) {
   10e04:	e0bffe03 	ldbu	r2,-8(fp)
   10e08:	10c00060 	cmpeqi	r3,r2,1
   10e0c:	1800921e 	bne	r3,zero,11058 <OSFlagPend+0x36c>
   10e10:	10c00088 	cmpgei	r3,r2,2
   10e14:	1800021e 	bne	r3,zero,10e20 <OSFlagPend+0x134>
   10e18:	10006126 	beq	r2,zero,10fa0 <OSFlagPend+0x2b4>
   10e1c:	0000bb06 	br	1110c <OSFlagPend+0x420>
   10e20:	10c000a0 	cmpeqi	r3,r2,2
   10e24:	1800031e 	bne	r3,zero,10e34 <OSFlagPend+0x148>
   10e28:	108000e0 	cmpeqi	r2,r2,3
   10e2c:	10002f1e 	bne	r2,zero,10eec <OSFlagPend+0x200>
   10e30:	0000b606 	br	1110c <OSFlagPend+0x420>
        case OS_FLAG_WAIT_SET_ALL:                         /* See if all required flags are set        */
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);   /* Extract only the bits we want     */
   10e34:	e0bffc17 	ldw	r2,-16(fp)
   10e38:	10c0020b 	ldhu	r3,8(r2)
   10e3c:	e0bffd0b 	ldhu	r2,-12(fp)
   10e40:	1884703a 	and	r2,r3,r2
   10e44:	e0bfe80d 	sth	r2,-96(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
   10e48:	e0ffe80b 	ldhu	r3,-96(fp)
   10e4c:	e0bffd0b 	ldhu	r2,-12(fp)
   10e50:	1880171e 	bne	r3,r2,10eb0 <OSFlagPend+0x1c4>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
   10e54:	e0bfe403 	ldbu	r2,-112(fp)
   10e58:	10800058 	cmpnei	r2,r2,1
   10e5c:	1000091e 	bne	r2,zero,10e84 <OSFlagPend+0x198>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we wanted      */
   10e60:	e0bffc17 	ldw	r2,-16(fp)
   10e64:	1080020b 	ldhu	r2,8(r2)
   10e68:	1007883a 	mov	r3,r2
   10e6c:	e0bfe80b 	ldhu	r2,-96(fp)
   10e70:	0084303a 	nor	r2,zero,r2
   10e74:	1884703a 	and	r2,r3,r2
   10e78:	1007883a 	mov	r3,r2
   10e7c:	e0bffc17 	ldw	r2,-16(fp)
   10e80:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
   10e84:	d0a72f17 	ldw	r2,-25412(gp)
   10e88:	e0ffe80b 	ldhu	r3,-96(fp)
   10e8c:	10c00b0d 	sth	r3,44(r2)
   10e90:	e0bfe517 	ldw	r2,-108(fp)
   10e94:	e0bfe715 	stw	r2,-100(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   10e98:	e0bfe717 	ldw	r2,-100(fp)
   10e9c:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
   10ea0:	e0800217 	ldw	r2,8(fp)
   10ea4:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
   10ea8:	e0bfe80b 	ldhu	r2,-96(fp)
   10eac:	0000f806 	br	11290 <OSFlagPend+0x5a4>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
   10eb0:	e13ffd0b 	ldhu	r4,-12(fp)
   10eb4:	e17ffe03 	ldbu	r5,-8(fp)
   10eb8:	e0bfff0b 	ldhu	r2,-4(fp)
   10ebc:	e0fff704 	addi	r3,fp,-36
   10ec0:	d8800015 	stw	r2,0(sp)
   10ec4:	280f883a 	mov	r7,r5
   10ec8:	200d883a 	mov	r6,r4
   10ecc:	180b883a 	mov	r5,r3
   10ed0:	e13ffc17 	ldw	r4,-16(fp)
   10ed4:	001175c0 	call	1175c <OS_FlagBlock>
   10ed8:	e0bfe517 	ldw	r2,-108(fp)
   10edc:	e0bfe915 	stw	r2,-92(fp)
   10ee0:	e0bfe917 	ldw	r2,-92(fp)
   10ee4:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
   10ee8:	00009206 	br	11134 <OSFlagPend+0x448>

        case OS_FLAG_WAIT_SET_ANY:
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);    /* Extract only the bits we want    */
   10eec:	e0bffc17 	ldw	r2,-16(fp)
   10ef0:	10c0020b 	ldhu	r3,8(r2)
   10ef4:	e0bffd0b 	ldhu	r2,-12(fp)
   10ef8:	1884703a 	and	r2,r3,r2
   10efc:	e0bfe80d 	sth	r2,-96(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag set                      */
   10f00:	e0bfe80b 	ldhu	r2,-96(fp)
   10f04:	10001726 	beq	r2,zero,10f64 <OSFlagPend+0x278>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
   10f08:	e0bfe403 	ldbu	r2,-112(fp)
   10f0c:	10800058 	cmpnei	r2,r2,1
   10f10:	1000091e 	bne	r2,zero,10f38 <OSFlagPend+0x24c>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we got         */
   10f14:	e0bffc17 	ldw	r2,-16(fp)
   10f18:	1080020b 	ldhu	r2,8(r2)
   10f1c:	1007883a 	mov	r3,r2
   10f20:	e0bfe80b 	ldhu	r2,-96(fp)
   10f24:	0084303a 	nor	r2,zero,r2
   10f28:	1884703a 	and	r2,r3,r2
   10f2c:	1007883a 	mov	r3,r2
   10f30:	e0bffc17 	ldw	r2,-16(fp)
   10f34:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
   10f38:	d0a72f17 	ldw	r2,-25412(gp)
   10f3c:	e0ffe80b 	ldhu	r3,-96(fp)
   10f40:	10c00b0d 	sth	r3,44(r2)
   10f44:	e0bfe517 	ldw	r2,-108(fp)
   10f48:	e0bfea15 	stw	r2,-88(fp)
   10f4c:	e0bfea17 	ldw	r2,-88(fp)
   10f50:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
   10f54:	e0800217 	ldw	r2,8(fp)
   10f58:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
   10f5c:	e0bfe80b 	ldhu	r2,-96(fp)
   10f60:	0000cb06 	br	11290 <OSFlagPend+0x5a4>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
   10f64:	e13ffd0b 	ldhu	r4,-12(fp)
   10f68:	e17ffe03 	ldbu	r5,-8(fp)
   10f6c:	e0bfff0b 	ldhu	r2,-4(fp)
   10f70:	e0fff704 	addi	r3,fp,-36
   10f74:	d8800015 	stw	r2,0(sp)
   10f78:	280f883a 	mov	r7,r5
   10f7c:	200d883a 	mov	r6,r4
   10f80:	180b883a 	mov	r5,r3
   10f84:	e13ffc17 	ldw	r4,-16(fp)
   10f88:	001175c0 	call	1175c <OS_FlagBlock>
   10f8c:	e0bfe517 	ldw	r2,-108(fp)
   10f90:	e0bfeb15 	stw	r2,-84(fp)
   10f94:	e0bfeb17 	ldw	r2,-84(fp)
   10f98:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
   10f9c:	00006506 	br	11134 <OSFlagPend+0x448>

#if OS_FLAG_WAIT_CLR_EN > 0
        case OS_FLAG_WAIT_CLR_ALL:                         /* See if all required flags are cleared    */
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags);  /* Extract only the bits we want     */
   10fa0:	e0bffc17 	ldw	r2,-16(fp)
   10fa4:	1080020b 	ldhu	r2,8(r2)
   10fa8:	0084303a 	nor	r2,zero,r2
   10fac:	1007883a 	mov	r3,r2
   10fb0:	e0bffd0b 	ldhu	r2,-12(fp)
   10fb4:	1884703a 	and	r2,r3,r2
   10fb8:	e0bfe80d 	sth	r2,-96(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
   10fbc:	e0ffe80b 	ldhu	r3,-96(fp)
   10fc0:	e0bffd0b 	ldhu	r2,-12(fp)
   10fc4:	1880151e 	bne	r3,r2,1101c <OSFlagPend+0x330>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
   10fc8:	e0bfe403 	ldbu	r2,-112(fp)
   10fcc:	10800058 	cmpnei	r2,r2,1
   10fd0:	1000071e 	bne	r2,zero,10ff0 <OSFlagPend+0x304>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we wanted        */
   10fd4:	e0bffc17 	ldw	r2,-16(fp)
   10fd8:	10c0020b 	ldhu	r3,8(r2)
   10fdc:	e0bfe80b 	ldhu	r2,-96(fp)
   10fe0:	1884b03a 	or	r2,r3,r2
   10fe4:	1007883a 	mov	r3,r2
   10fe8:	e0bffc17 	ldw	r2,-16(fp)
   10fec:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
   10ff0:	d0a72f17 	ldw	r2,-25412(gp)
   10ff4:	e0ffe80b 	ldhu	r3,-96(fp)
   10ff8:	10c00b0d 	sth	r3,44(r2)
   10ffc:	e0bfe517 	ldw	r2,-108(fp)
   11000:	e0bfec15 	stw	r2,-80(fp)
   11004:	e0bfec17 	ldw	r2,-80(fp)
   11008:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
   1100c:	e0800217 	ldw	r2,8(fp)
   11010:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
   11014:	e0bfe80b 	ldhu	r2,-96(fp)
   11018:	00009d06 	br	11290 <OSFlagPend+0x5a4>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
   1101c:	e13ffd0b 	ldhu	r4,-12(fp)
   11020:	e17ffe03 	ldbu	r5,-8(fp)
   11024:	e0bfff0b 	ldhu	r2,-4(fp)
   11028:	e0fff704 	addi	r3,fp,-36
   1102c:	d8800015 	stw	r2,0(sp)
   11030:	280f883a 	mov	r7,r5
   11034:	200d883a 	mov	r6,r4
   11038:	180b883a 	mov	r5,r3
   1103c:	e13ffc17 	ldw	r4,-16(fp)
   11040:	001175c0 	call	1175c <OS_FlagBlock>
   11044:	e0bfe517 	ldw	r2,-108(fp)
   11048:	e0bfed15 	stw	r2,-76(fp)
   1104c:	e0bfed17 	ldw	r2,-76(fp)
   11050:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
   11054:	00003706 	br	11134 <OSFlagPend+0x448>

        case OS_FLAG_WAIT_CLR_ANY:
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags); /* Extract only the bits we want      */
   11058:	e0bffc17 	ldw	r2,-16(fp)
   1105c:	1080020b 	ldhu	r2,8(r2)
   11060:	0084303a 	nor	r2,zero,r2
   11064:	1007883a 	mov	r3,r2
   11068:	e0bffd0b 	ldhu	r2,-12(fp)
   1106c:	1884703a 	and	r2,r3,r2
   11070:	e0bfe80d 	sth	r2,-96(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag cleared                  */
   11074:	e0bfe80b 	ldhu	r2,-96(fp)
   11078:	10001526 	beq	r2,zero,110d0 <OSFlagPend+0x3e4>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
   1107c:	e0bfe403 	ldbu	r2,-112(fp)
   11080:	10800058 	cmpnei	r2,r2,1
   11084:	1000071e 	bne	r2,zero,110a4 <OSFlagPend+0x3b8>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we got           */
   11088:	e0bffc17 	ldw	r2,-16(fp)
   1108c:	10c0020b 	ldhu	r3,8(r2)
   11090:	e0bfe80b 	ldhu	r2,-96(fp)
   11094:	1884b03a 	or	r2,r3,r2
   11098:	1007883a 	mov	r3,r2
   1109c:	e0bffc17 	ldw	r2,-16(fp)
   110a0:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
   110a4:	d0a72f17 	ldw	r2,-25412(gp)
   110a8:	e0ffe80b 	ldhu	r3,-96(fp)
   110ac:	10c00b0d 	sth	r3,44(r2)
   110b0:	e0bfe517 	ldw	r2,-108(fp)
   110b4:	e0bfee15 	stw	r2,-72(fp)
   110b8:	e0bfee17 	ldw	r2,-72(fp)
   110bc:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
   110c0:	e0800217 	ldw	r2,8(fp)
   110c4:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
   110c8:	e0bfe80b 	ldhu	r2,-96(fp)
   110cc:	00007006 	br	11290 <OSFlagPend+0x5a4>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
   110d0:	e13ffd0b 	ldhu	r4,-12(fp)
   110d4:	e17ffe03 	ldbu	r5,-8(fp)
   110d8:	e0bfff0b 	ldhu	r2,-4(fp)
   110dc:	e0fff704 	addi	r3,fp,-36
   110e0:	d8800015 	stw	r2,0(sp)
   110e4:	280f883a 	mov	r7,r5
   110e8:	200d883a 	mov	r6,r4
   110ec:	180b883a 	mov	r5,r3
   110f0:	e13ffc17 	ldw	r4,-16(fp)
   110f4:	001175c0 	call	1175c <OS_FlagBlock>
   110f8:	e0bfe517 	ldw	r2,-108(fp)
   110fc:	e0bfef15 	stw	r2,-68(fp)
   11100:	e0bfef17 	ldw	r2,-68(fp)
   11104:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
   11108:	00000a06 	br	11134 <OSFlagPend+0x448>
   1110c:	e0bfe517 	ldw	r2,-108(fp)
   11110:	e0bff015 	stw	r2,-64(fp)
   11114:	e0bff017 	ldw	r2,-64(fp)
   11118:	1001703a 	wrctl	status,r2
#endif

        default:
             OS_EXIT_CRITICAL();
             flags_rdy = (OS_FLAGS)0;
   1111c:	e03fe80d 	sth	zero,-96(fp)
             *perr      = OS_ERR_FLAG_WAIT_TYPE;
   11120:	e0800217 	ldw	r2,8(fp)
   11124:	00c01bc4 	movi	r3,111
   11128:	10c00005 	stb	r3,0(r2)
             return (flags_rdy);
   1112c:	e0bfe80b 	ldhu	r2,-96(fp)
   11130:	00005706 	br	11290 <OSFlagPend+0x5a4>
    }
/*$PAGE*/
    OS_Sched();                                            /* Find next HPT ready to run               */
   11134:	000fbbc0 	call	fbbc <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   11138:	0005303a 	rdctl	r2,status
   1113c:	e0bff115 	stw	r2,-60(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   11140:	e0fff117 	ldw	r3,-60(fp)
   11144:	00bfff84 	movi	r2,-2
   11148:	1884703a 	and	r2,r3,r2
   1114c:	1001703a 	wrctl	status,r2
  
  return context;
   11150:	e0bff117 	ldw	r2,-60(fp)
    OS_ENTER_CRITICAL();
   11154:	e0bfe515 	stw	r2,-108(fp)
    if (OSTCBCur->OSTCBStatPend != OS_STAT_PEND_OK) {      /* Have we timed-out or aborted?            */
   11158:	d0a72f17 	ldw	r2,-25412(gp)
   1115c:	10800c43 	ldbu	r2,49(r2)
   11160:	10803fcc 	andi	r2,r2,255
   11164:	10001c26 	beq	r2,zero,111d8 <OSFlagPend+0x4ec>
        pend_stat                = OSTCBCur->OSTCBStatPend;
   11168:	d0a72f17 	ldw	r2,-25412(gp)
   1116c:	10800c43 	ldbu	r2,49(r2)
   11170:	e0bff305 	stb	r2,-52(fp)
        OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
   11174:	d0a72f17 	ldw	r2,-25412(gp)
   11178:	10000c45 	stb	zero,49(r2)
        OS_FlagUnlink(&node);
   1117c:	e0bff704 	addi	r2,fp,-36
   11180:	1009883a 	mov	r4,r2
   11184:	0011a900 	call	11a90 <OS_FlagUnlink>
        OSTCBCur->OSTCBStat      = OS_STAT_RDY;            /* Yes, make task ready-to-run              */
   11188:	d0a72f17 	ldw	r2,-25412(gp)
   1118c:	10000c05 	stb	zero,48(r2)
   11190:	e0bfe517 	ldw	r2,-108(fp)
   11194:	e0bff215 	stw	r2,-56(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   11198:	e0bff217 	ldw	r2,-56(fp)
   1119c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        flags_rdy                = (OS_FLAGS)0;
   111a0:	e03fe80d 	sth	zero,-96(fp)
        switch (pend_stat) {
   111a4:	e0bff303 	ldbu	r2,-52(fp)
   111a8:	108000a0 	cmpeqi	r2,r2,2
   111ac:	10000426 	beq	r2,zero,111c0 <OSFlagPend+0x4d4>
            case OS_STAT_PEND_ABORT:
                 *perr = OS_ERR_PEND_ABORT;                 /* Indicate that we aborted   waiting       */
   111b0:	e0800217 	ldw	r2,8(fp)
   111b4:	00c00384 	movi	r3,14
   111b8:	10c00005 	stb	r3,0(r2)
                 break;
   111bc:	00000406 	br	111d0 <OSFlagPend+0x4e4>

            case OS_STAT_PEND_TO:
            default:
                 *perr = OS_ERR_TIMEOUT;                    /* Indicate that we timed-out waiting       */
   111c0:	e0800217 	ldw	r2,8(fp)
   111c4:	00c00284 	movi	r3,10
   111c8:	10c00005 	stb	r3,0(r2)
                 break;
   111cc:	0001883a 	nop
        }
        return (flags_rdy);
   111d0:	e0bfe80b 	ldhu	r2,-96(fp)
   111d4:	00002e06 	br	11290 <OSFlagPend+0x5a4>
    }
    flags_rdy = OSTCBCur->OSTCBFlagsRdy;
   111d8:	d0a72f17 	ldw	r2,-25412(gp)
   111dc:	10800b0b 	ldhu	r2,44(r2)
   111e0:	e0bfe80d 	sth	r2,-96(fp)
    if (consume == OS_TRUE) {                              /* See if we need to consume the flags      */
   111e4:	e0bfe403 	ldbu	r2,-112(fp)
   111e8:	10800058 	cmpnei	r2,r2,1
   111ec:	1000211e 	bne	r2,zero,11274 <OSFlagPend+0x588>
        switch (wait_type) {
   111f0:	e0bffe03 	ldbu	r2,-8(fp)
   111f4:	10001616 	blt	r2,zero,11250 <OSFlagPend+0x564>
   111f8:	10c00090 	cmplti	r3,r2,2
   111fc:	18000c1e 	bne	r3,zero,11230 <OSFlagPend+0x544>
   11200:	10800108 	cmpgei	r2,r2,4
   11204:	1000121e 	bne	r2,zero,11250 <OSFlagPend+0x564>
            case OS_FLAG_WAIT_SET_ALL:
            case OS_FLAG_WAIT_SET_ANY:                     /* Clear ONLY the flags we got              */
                 pgrp->OSFlagFlags &= ~flags_rdy;
   11208:	e0bffc17 	ldw	r2,-16(fp)
   1120c:	1080020b 	ldhu	r2,8(r2)
   11210:	1007883a 	mov	r3,r2
   11214:	e0bfe80b 	ldhu	r2,-96(fp)
   11218:	0084303a 	nor	r2,zero,r2
   1121c:	1884703a 	and	r2,r3,r2
   11220:	1007883a 	mov	r3,r2
   11224:	e0bffc17 	ldw	r2,-16(fp)
   11228:	10c0020d 	sth	r3,8(r2)
                 break;
   1122c:	00001106 	br	11274 <OSFlagPend+0x588>

#if OS_FLAG_WAIT_CLR_EN > 0
            case OS_FLAG_WAIT_CLR_ALL:
            case OS_FLAG_WAIT_CLR_ANY:                     /* Set   ONLY the flags we got              */
                 pgrp->OSFlagFlags |=  flags_rdy;
   11230:	e0bffc17 	ldw	r2,-16(fp)
   11234:	10c0020b 	ldhu	r3,8(r2)
   11238:	e0bfe80b 	ldhu	r2,-96(fp)
   1123c:	1884b03a 	or	r2,r3,r2
   11240:	1007883a 	mov	r3,r2
   11244:	e0bffc17 	ldw	r2,-16(fp)
   11248:	10c0020d 	sth	r3,8(r2)
                 break;
   1124c:	00000906 	br	11274 <OSFlagPend+0x588>
   11250:	e0bfe517 	ldw	r2,-108(fp)
   11254:	e0bff415 	stw	r2,-48(fp)
   11258:	e0bff417 	ldw	r2,-48(fp)
   1125c:	1001703a 	wrctl	status,r2
#endif
            default:
                 OS_EXIT_CRITICAL();
                 *perr = OS_ERR_FLAG_WAIT_TYPE;
   11260:	e0800217 	ldw	r2,8(fp)
   11264:	00c01bc4 	movi	r3,111
   11268:	10c00005 	stb	r3,0(r2)
                 return ((OS_FLAGS)0);
   1126c:	0005883a 	mov	r2,zero
   11270:	00000706 	br	11290 <OSFlagPend+0x5a4>
   11274:	e0bfe517 	ldw	r2,-108(fp)
   11278:	e0bff515 	stw	r2,-44(fp)
   1127c:	e0bff517 	ldw	r2,-44(fp)
   11280:	1001703a 	wrctl	status,r2
        }
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;                                   /* Event(s) must have occurred              */
   11284:	e0800217 	ldw	r2,8(fp)
   11288:	10000005 	stb	zero,0(r2)
    return (flags_rdy);
   1128c:	e0bfe80b 	ldhu	r2,-96(fp)
}
   11290:	e037883a 	mov	sp,fp
   11294:	dfc00117 	ldw	ra,4(sp)
   11298:	df000017 	ldw	fp,0(sp)
   1129c:	dec00204 	addi	sp,sp,8
   112a0:	f800283a 	ret

000112a4 <OSFlagPendGetFlagsRdy>:
* Called from: Task ONLY
*********************************************************************************************************
*/

OS_FLAGS  OSFlagPendGetFlagsRdy (void)
{
   112a4:	defffb04 	addi	sp,sp,-20
   112a8:	df000415 	stw	fp,16(sp)
   112ac:	df000404 	addi	fp,sp,16
    OS_FLAGS      flags;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
   112b0:	e03ffc15 	stw	zero,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   112b4:	0005303a 	rdctl	r2,status
   112b8:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   112bc:	e0fffe17 	ldw	r3,-8(fp)
   112c0:	00bfff84 	movi	r2,-2
   112c4:	1884703a 	and	r2,r3,r2
   112c8:	1001703a 	wrctl	status,r2
  
  return context;
   112cc:	e0bffe17 	ldw	r2,-8(fp)
#endif



    OS_ENTER_CRITICAL();
   112d0:	e0bffc15 	stw	r2,-16(fp)
    flags = OSTCBCur->OSTCBFlagsRdy;
   112d4:	d0a72f17 	ldw	r2,-25412(gp)
   112d8:	10800b0b 	ldhu	r2,44(r2)
   112dc:	e0bffd0d 	sth	r2,-12(fp)
   112e0:	e0bffc17 	ldw	r2,-16(fp)
   112e4:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   112e8:	e0bfff17 	ldw	r2,-4(fp)
   112ec:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (flags);
   112f0:	e0bffd0b 	ldhu	r2,-12(fp)
}
   112f4:	e037883a 	mov	sp,fp
   112f8:	df000017 	ldw	fp,0(sp)
   112fc:	dec00104 	addi	sp,sp,4
   11300:	f800283a 	ret

00011304 <OSFlagPost>:
*              2) The amount of time interrupts are DISABLED depends on the number of tasks waiting on
*                 the event flag group.
*********************************************************************************************************
*/
OS_FLAGS  OSFlagPost (OS_FLAG_GRP *pgrp, OS_FLAGS flags, INT8U opt, INT8U *perr)
{
   11304:	deffef04 	addi	sp,sp,-68
   11308:	dfc01015 	stw	ra,64(sp)
   1130c:	df000f15 	stw	fp,60(sp)
   11310:	df000f04 	addi	fp,sp,60
   11314:	e13ffc15 	stw	r4,-16(fp)
   11318:	2807883a 	mov	r3,r5
   1131c:	3005883a 	mov	r2,r6
   11320:	e1ffff15 	stw	r7,-4(fp)
   11324:	e0fffd0d 	sth	r3,-12(fp)
   11328:	e0bffe05 	stb	r2,-8(fp)
    BOOLEAN       sched;
    OS_FLAGS      flags_cur;
    OS_FLAGS      flags_rdy;
    BOOLEAN       rdy;
#if OS_CRITICAL_METHOD == 3                          /* Allocate storage for CPU status register       */
    OS_CPU_SR     cpu_sr = 0;
   1132c:	e03ff315 	stw	zero,-52(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                        /* Validate 'perr'                                */
   11330:	e0bfff17 	ldw	r2,-4(fp)
   11334:	1000021e 	bne	r2,zero,11340 <OSFlagPost+0x3c>
        return ((OS_FLAGS)0);
   11338:	0005883a 	mov	r2,zero
   1133c:	0000d106 	br	11684 <OSFlagPost+0x380>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                  /* Validate 'pgrp'                                */
   11340:	e0bffc17 	ldw	r2,-16(fp)
   11344:	1000051e 	bne	r2,zero,1135c <OSFlagPost+0x58>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
   11348:	e0bfff17 	ldw	r2,-4(fp)
   1134c:	00c01b84 	movi	r3,110
   11350:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
   11354:	0005883a 	mov	r2,zero
   11358:	0000ca06 	br	11684 <OSFlagPost+0x380>
    }
#endif
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {    /* Make sure we are pointing to an event flag grp */
   1135c:	e0bffc17 	ldw	r2,-16(fp)
   11360:	10800003 	ldbu	r2,0(r2)
   11364:	10803fcc 	andi	r2,r2,255
   11368:	10800160 	cmpeqi	r2,r2,5
   1136c:	1000051e 	bne	r2,zero,11384 <OSFlagPost+0x80>
        *perr = OS_ERR_EVENT_TYPE;
   11370:	e0bfff17 	ldw	r2,-4(fp)
   11374:	00c00044 	movi	r3,1
   11378:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
   1137c:	0005883a 	mov	r2,zero
   11380:	0000c006 	br	11684 <OSFlagPost+0x380>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   11384:	0005303a 	rdctl	r2,status
   11388:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1138c:	e0fffb17 	ldw	r3,-20(fp)
   11390:	00bfff84 	movi	r2,-2
   11394:	1884703a 	and	r2,r3,r2
   11398:	1001703a 	wrctl	status,r2
  
  return context;
   1139c:	e0bffb17 	ldw	r2,-20(fp)
    }
/*$PAGE*/
    OS_ENTER_CRITICAL();
   113a0:	e0bff315 	stw	r2,-52(fp)
    switch (opt) {
   113a4:	e0bffe03 	ldbu	r2,-8(fp)
   113a8:	10000326 	beq	r2,zero,113b8 <OSFlagPost+0xb4>
   113ac:	10800060 	cmpeqi	r2,r2,1
   113b0:	10000b1e 	bne	r2,zero,113e0 <OSFlagPost+0xdc>
   113b4:	00001206 	br	11400 <OSFlagPost+0xfc>
        case OS_FLAG_CLR:
             pgrp->OSFlagFlags &= ~flags;            /* Clear the flags specified in the group         */
   113b8:	e0bffc17 	ldw	r2,-16(fp)
   113bc:	1080020b 	ldhu	r2,8(r2)
   113c0:	1007883a 	mov	r3,r2
   113c4:	e0bffd0b 	ldhu	r2,-12(fp)
   113c8:	0084303a 	nor	r2,zero,r2
   113cc:	1884703a 	and	r2,r3,r2
   113d0:	1007883a 	mov	r3,r2
   113d4:	e0bffc17 	ldw	r2,-16(fp)
   113d8:	10c0020d 	sth	r3,8(r2)
             break;
   113dc:	00001106 	br	11424 <OSFlagPost+0x120>

        case OS_FLAG_SET:
             pgrp->OSFlagFlags |=  flags;            /* Set   the flags specified in the group         */
   113e0:	e0bffc17 	ldw	r2,-16(fp)
   113e4:	10c0020b 	ldhu	r3,8(r2)
   113e8:	e0bffd0b 	ldhu	r2,-12(fp)
   113ec:	1884b03a 	or	r2,r3,r2
   113f0:	1007883a 	mov	r3,r2
   113f4:	e0bffc17 	ldw	r2,-16(fp)
   113f8:	10c0020d 	sth	r3,8(r2)
             break;
   113fc:	00000906 	br	11424 <OSFlagPost+0x120>
   11400:	e0bff317 	ldw	r2,-52(fp)
   11404:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   11408:	e0bff417 	ldw	r2,-48(fp)
   1140c:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();                     /* INVALID option                                 */
             *perr = OS_ERR_FLAG_INVALID_OPT;
   11410:	e0bfff17 	ldw	r2,-4(fp)
   11414:	00c01c44 	movi	r3,113
   11418:	10c00005 	stb	r3,0(r2)
             return ((OS_FLAGS)0);
   1141c:	0005883a 	mov	r2,zero
   11420:	00009806 	br	11684 <OSFlagPost+0x380>
    }
    sched = OS_FALSE;                                /* Indicate that we don't need rescheduling       */
   11424:	e03ff205 	stb	zero,-56(fp)
    pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
   11428:	e0bffc17 	ldw	r2,-16(fp)
   1142c:	10800117 	ldw	r2,4(r2)
   11430:	e0bff115 	stw	r2,-60(fp)
    while (pnode != (OS_FLAG_NODE *)0) {             /* Go through all tasks waiting on event flag(s)  */
   11434:	00007706 	br	11614 <OSFlagPost+0x310>
        switch (pnode->OSFlagNodeWaitType) {
   11438:	e0bff117 	ldw	r2,-60(fp)
   1143c:	10800483 	ldbu	r2,18(r2)
   11440:	10803fcc 	andi	r2,r2,255
   11444:	10c00060 	cmpeqi	r3,r2,1
   11448:	18004a1e 	bne	r3,zero,11574 <OSFlagPost+0x270>
   1144c:	10c00088 	cmpgei	r3,r2,2
   11450:	1800021e 	bne	r3,zero,1145c <OSFlagPost+0x158>
   11454:	10002f26 	beq	r2,zero,11514 <OSFlagPost+0x210>
   11458:	00005b06 	br	115c8 <OSFlagPost+0x2c4>
   1145c:	10c000a0 	cmpeqi	r3,r2,2
   11460:	1800031e 	bne	r3,zero,11470 <OSFlagPost+0x16c>
   11464:	108000e0 	cmpeqi	r2,r2,3
   11468:	1000171e 	bne	r2,zero,114c8 <OSFlagPost+0x1c4>
   1146c:	00005606 	br	115c8 <OSFlagPost+0x2c4>
            case OS_FLAG_WAIT_SET_ALL:               /* See if all req. flags are set for current node */
                 flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
   11470:	e0bffc17 	ldw	r2,-16(fp)
   11474:	10c0020b 	ldhu	r3,8(r2)
   11478:	e0bff117 	ldw	r2,-60(fp)
   1147c:	1080040b 	ldhu	r2,16(r2)
   11480:	1884703a 	and	r2,r3,r2
   11484:	e0bff60d 	sth	r2,-40(fp)
                 if (flags_rdy == pnode->OSFlagNodeFlags) {
   11488:	e0bff117 	ldw	r2,-60(fp)
   1148c:	1080040b 	ldhu	r2,16(r2)
   11490:	10ffffcc 	andi	r3,r2,65535
   11494:	e0bff60b 	ldhu	r2,-40(fp)
   11498:	1880541e 	bne	r3,r2,115ec <OSFlagPost+0x2e8>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
   1149c:	e0bff60b 	ldhu	r2,-40(fp)
   114a0:	100b883a 	mov	r5,r2
   114a4:	e13ff117 	ldw	r4,-60(fp)
   114a8:	001199c0 	call	1199c <OS_FlagTaskRdy>
   114ac:	e0bff685 	stb	r2,-38(fp)
                     if (rdy == OS_TRUE) {
   114b0:	e0bff683 	ldbu	r2,-38(fp)
   114b4:	10800058 	cmpnei	r2,r2,1
   114b8:	10004c1e 	bne	r2,zero,115ec <OSFlagPost+0x2e8>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
   114bc:	00800044 	movi	r2,1
   114c0:	e0bff205 	stb	r2,-56(fp)
                     }
                 }
                 break;
   114c4:	00004906 	br	115ec <OSFlagPost+0x2e8>

            case OS_FLAG_WAIT_SET_ANY:               /* See if any flag set                            */
                 flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
   114c8:	e0bffc17 	ldw	r2,-16(fp)
   114cc:	10c0020b 	ldhu	r3,8(r2)
   114d0:	e0bff117 	ldw	r2,-60(fp)
   114d4:	1080040b 	ldhu	r2,16(r2)
   114d8:	1884703a 	and	r2,r3,r2
   114dc:	e0bff60d 	sth	r2,-40(fp)
                 if (flags_rdy != (OS_FLAGS)0) {
   114e0:	e0bff60b 	ldhu	r2,-40(fp)
   114e4:	10004326 	beq	r2,zero,115f4 <OSFlagPost+0x2f0>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
   114e8:	e0bff60b 	ldhu	r2,-40(fp)
   114ec:	100b883a 	mov	r5,r2
   114f0:	e13ff117 	ldw	r4,-60(fp)
   114f4:	001199c0 	call	1199c <OS_FlagTaskRdy>
   114f8:	e0bff685 	stb	r2,-38(fp)
                     if (rdy == OS_TRUE) {
   114fc:	e0bff683 	ldbu	r2,-38(fp)
   11500:	10800058 	cmpnei	r2,r2,1
   11504:	10003b1e 	bne	r2,zero,115f4 <OSFlagPost+0x2f0>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
   11508:	00800044 	movi	r2,1
   1150c:	e0bff205 	stb	r2,-56(fp)
                     }
                 }
                 break;
   11510:	00003806 	br	115f4 <OSFlagPost+0x2f0>

#if OS_FLAG_WAIT_CLR_EN > 0
            case OS_FLAG_WAIT_CLR_ALL:               /* See if all req. flags are set for current node */
                 flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
   11514:	e0bffc17 	ldw	r2,-16(fp)
   11518:	1080020b 	ldhu	r2,8(r2)
   1151c:	0084303a 	nor	r2,zero,r2
   11520:	1007883a 	mov	r3,r2
   11524:	e0bff117 	ldw	r2,-60(fp)
   11528:	1080040b 	ldhu	r2,16(r2)
   1152c:	1884703a 	and	r2,r3,r2
   11530:	e0bff60d 	sth	r2,-40(fp)
                 if (flags_rdy == pnode->OSFlagNodeFlags) {
   11534:	e0bff117 	ldw	r2,-60(fp)
   11538:	1080040b 	ldhu	r2,16(r2)
   1153c:	10ffffcc 	andi	r3,r2,65535
   11540:	e0bff60b 	ldhu	r2,-40(fp)
   11544:	18802d1e 	bne	r3,r2,115fc <OSFlagPost+0x2f8>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
   11548:	e0bff60b 	ldhu	r2,-40(fp)
   1154c:	100b883a 	mov	r5,r2
   11550:	e13ff117 	ldw	r4,-60(fp)
   11554:	001199c0 	call	1199c <OS_FlagTaskRdy>
   11558:	e0bff685 	stb	r2,-38(fp)
                     if (rdy == OS_TRUE) {
   1155c:	e0bff683 	ldbu	r2,-38(fp)
   11560:	10800058 	cmpnei	r2,r2,1
   11564:	1000251e 	bne	r2,zero,115fc <OSFlagPost+0x2f8>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
   11568:	00800044 	movi	r2,1
   1156c:	e0bff205 	stb	r2,-56(fp)
                     }
                 }
                 break;
   11570:	00002206 	br	115fc <OSFlagPost+0x2f8>

            case OS_FLAG_WAIT_CLR_ANY:               /* See if any flag set                            */
                 flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
   11574:	e0bffc17 	ldw	r2,-16(fp)
   11578:	1080020b 	ldhu	r2,8(r2)
   1157c:	0084303a 	nor	r2,zero,r2
   11580:	1007883a 	mov	r3,r2
   11584:	e0bff117 	ldw	r2,-60(fp)
   11588:	1080040b 	ldhu	r2,16(r2)
   1158c:	1884703a 	and	r2,r3,r2
   11590:	e0bff60d 	sth	r2,-40(fp)
                 if (flags_rdy != (OS_FLAGS)0) {
   11594:	e0bff60b 	ldhu	r2,-40(fp)
   11598:	10001a26 	beq	r2,zero,11604 <OSFlagPost+0x300>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
   1159c:	e0bff60b 	ldhu	r2,-40(fp)
   115a0:	100b883a 	mov	r5,r2
   115a4:	e13ff117 	ldw	r4,-60(fp)
   115a8:	001199c0 	call	1199c <OS_FlagTaskRdy>
   115ac:	e0bff685 	stb	r2,-38(fp)
                     if (rdy == OS_TRUE) {
   115b0:	e0bff683 	ldbu	r2,-38(fp)
   115b4:	10800058 	cmpnei	r2,r2,1
   115b8:	1000121e 	bne	r2,zero,11604 <OSFlagPost+0x300>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
   115bc:	00800044 	movi	r2,1
   115c0:	e0bff205 	stb	r2,-56(fp)
                     }
                 }
                 break;
   115c4:	00000f06 	br	11604 <OSFlagPost+0x300>
   115c8:	e0bff317 	ldw	r2,-52(fp)
   115cc:	e0bff515 	stw	r2,-44(fp)
   115d0:	e0bff517 	ldw	r2,-44(fp)
   115d4:	1001703a 	wrctl	status,r2
#endif
            default:
                 OS_EXIT_CRITICAL();
                 *perr = OS_ERR_FLAG_WAIT_TYPE;
   115d8:	e0bfff17 	ldw	r2,-4(fp)
   115dc:	00c01bc4 	movi	r3,111
   115e0:	10c00005 	stb	r3,0(r2)
                 return ((OS_FLAGS)0);
   115e4:	0005883a 	mov	r2,zero
   115e8:	00002606 	br	11684 <OSFlagPost+0x380>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
                     if (rdy == OS_TRUE) {
                         sched = OS_TRUE;                     /* When done we will reschedule          */
                     }
                 }
                 break;
   115ec:	0001883a 	nop
   115f0:	00000506 	br	11608 <OSFlagPost+0x304>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
                     if (rdy == OS_TRUE) {
                         sched = OS_TRUE;                     /* When done we will reschedule          */
                     }
                 }
                 break;
   115f4:	0001883a 	nop
   115f8:	00000306 	br	11608 <OSFlagPost+0x304>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
                     if (rdy == OS_TRUE) {
                         sched = OS_TRUE;                     /* When done we will reschedule          */
                     }
                 }
                 break;
   115fc:	0001883a 	nop
   11600:	00000106 	br	11608 <OSFlagPost+0x304>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
                     if (rdy == OS_TRUE) {
                         sched = OS_TRUE;                     /* When done we will reschedule          */
                     }
                 }
                 break;
   11604:	0001883a 	nop
            default:
                 OS_EXIT_CRITICAL();
                 *perr = OS_ERR_FLAG_WAIT_TYPE;
                 return ((OS_FLAGS)0);
        }
        pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext; /* Point to next task waiting for event flag(s) */
   11608:	e0bff117 	ldw	r2,-60(fp)
   1160c:	10800017 	ldw	r2,0(r2)
   11610:	e0bff115 	stw	r2,-60(fp)
             *perr = OS_ERR_FLAG_INVALID_OPT;
             return ((OS_FLAGS)0);
    }
    sched = OS_FALSE;                                /* Indicate that we don't need rescheduling       */
    pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
    while (pnode != (OS_FLAG_NODE *)0) {             /* Go through all tasks waiting on event flag(s)  */
   11614:	e0bff117 	ldw	r2,-60(fp)
   11618:	103f871e 	bne	r2,zero,11438 <__alt_data_end+0xfffe1438>
   1161c:	e0bff317 	ldw	r2,-52(fp)
   11620:	e0bff715 	stw	r2,-36(fp)
   11624:	e0bff717 	ldw	r2,-36(fp)
   11628:	1001703a 	wrctl	status,r2
                 return ((OS_FLAGS)0);
        }
        pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext; /* Point to next task waiting for event flag(s) */
    }
    OS_EXIT_CRITICAL();
    if (sched == OS_TRUE) {
   1162c:	e0bff203 	ldbu	r2,-56(fp)
   11630:	10800058 	cmpnei	r2,r2,1
   11634:	1000011e 	bne	r2,zero,1163c <OSFlagPost+0x338>
        OS_Sched();
   11638:	000fbbc0 	call	fbbc <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1163c:	0005303a 	rdctl	r2,status
   11640:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   11644:	e0fffa17 	ldw	r3,-24(fp)
   11648:	00bfff84 	movi	r2,-2
   1164c:	1884703a 	and	r2,r3,r2
   11650:	1001703a 	wrctl	status,r2
  
  return context;
   11654:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
   11658:	e0bff315 	stw	r2,-52(fp)
    flags_cur = pgrp->OSFlagFlags;
   1165c:	e0bffc17 	ldw	r2,-16(fp)
   11660:	1080020b 	ldhu	r2,8(r2)
   11664:	e0bff90d 	sth	r2,-28(fp)
   11668:	e0bff317 	ldw	r2,-52(fp)
   1166c:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   11670:	e0bff817 	ldw	r2,-32(fp)
   11674:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr     = OS_ERR_NONE;
   11678:	e0bfff17 	ldw	r2,-4(fp)
   1167c:	10000005 	stb	zero,0(r2)
    return (flags_cur);
   11680:	e0bff90b 	ldhu	r2,-28(fp)
}
   11684:	e037883a 	mov	sp,fp
   11688:	dfc00117 	ldw	ra,4(sp)
   1168c:	df000017 	ldw	fp,0(sp)
   11690:	dec00204 	addi	sp,sp,8
   11694:	f800283a 	ret

00011698 <OSFlagQuery>:
*********************************************************************************************************
*/

#if OS_FLAG_QUERY_EN > 0
OS_FLAGS  OSFlagQuery (OS_FLAG_GRP *pgrp, INT8U *perr)
{
   11698:	defff904 	addi	sp,sp,-28
   1169c:	df000615 	stw	fp,24(sp)
   116a0:	df000604 	addi	fp,sp,24
   116a4:	e13ffe15 	stw	r4,-8(fp)
   116a8:	e17fff15 	stw	r5,-4(fp)
    OS_FLAGS   flags;
#if OS_CRITICAL_METHOD == 3                       /* Allocate storage for CPU status register          */
    OS_CPU_SR  cpu_sr = 0;
   116ac:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                     /* Validate 'perr'                                   */
   116b0:	e0bfff17 	ldw	r2,-4(fp)
   116b4:	1000021e 	bne	r2,zero,116c0 <OSFlagQuery+0x28>
        return ((OS_FLAGS)0);
   116b8:	0005883a 	mov	r2,zero
   116bc:	00002306 	br	1174c <OSFlagQuery+0xb4>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {               /* Validate 'pgrp'                                   */
   116c0:	e0bffe17 	ldw	r2,-8(fp)
   116c4:	1000051e 	bne	r2,zero,116dc <OSFlagQuery+0x44>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
   116c8:	e0bfff17 	ldw	r2,-4(fp)
   116cc:	00c01b84 	movi	r3,110
   116d0:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
   116d4:	0005883a 	mov	r2,zero
   116d8:	00001c06 	br	1174c <OSFlagQuery+0xb4>
    }
#endif
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) { /* Validate event block type                         */
   116dc:	e0bffe17 	ldw	r2,-8(fp)
   116e0:	10800003 	ldbu	r2,0(r2)
   116e4:	10803fcc 	andi	r2,r2,255
   116e8:	10800160 	cmpeqi	r2,r2,5
   116ec:	1000051e 	bne	r2,zero,11704 <OSFlagQuery+0x6c>
        *perr = OS_ERR_EVENT_TYPE;
   116f0:	e0bfff17 	ldw	r2,-4(fp)
   116f4:	00c00044 	movi	r3,1
   116f8:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
   116fc:	0005883a 	mov	r2,zero
   11700:	00001206 	br	1174c <OSFlagQuery+0xb4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   11704:	0005303a 	rdctl	r2,status
   11708:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1170c:	e0fffc17 	ldw	r3,-16(fp)
   11710:	00bfff84 	movi	r2,-2
   11714:	1884703a 	and	r2,r3,r2
   11718:	1001703a 	wrctl	status,r2
  
  return context;
   1171c:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
   11720:	e0bffa15 	stw	r2,-24(fp)
    flags = pgrp->OSFlagFlags;
   11724:	e0bffe17 	ldw	r2,-8(fp)
   11728:	1080020b 	ldhu	r2,8(r2)
   1172c:	e0bffb0d 	sth	r2,-20(fp)
   11730:	e0bffa17 	ldw	r2,-24(fp)
   11734:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   11738:	e0bffd17 	ldw	r2,-12(fp)
   1173c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   11740:	e0bfff17 	ldw	r2,-4(fp)
   11744:	10000005 	stb	zero,0(r2)
    return (flags);                               /* Return the current value of the event flags       */
   11748:	e0bffb0b 	ldhu	r2,-20(fp)
}
   1174c:	e037883a 	mov	sp,fp
   11750:	df000017 	ldw	fp,0(sp)
   11754:	dec00104 	addi	sp,sp,4
   11758:	f800283a 	ret

0001175c <OS_FlagBlock>:
* Note(s)    : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

static  void  OS_FlagBlock (OS_FLAG_GRP *pgrp, OS_FLAG_NODE *pnode, OS_FLAGS flags, INT8U wait_type, INT16U timeout)
{
   1175c:	defff804 	addi	sp,sp,-32
   11760:	df000715 	stw	fp,28(sp)
   11764:	df000704 	addi	fp,sp,28
   11768:	e13ffb15 	stw	r4,-20(fp)
   1176c:	e17ffc15 	stw	r5,-16(fp)
   11770:	3009883a 	mov	r4,r6
   11774:	3807883a 	mov	r3,r7
   11778:	e0800117 	ldw	r2,4(fp)
   1177c:	e13ffd0d 	sth	r4,-12(fp)
   11780:	e0fffe05 	stb	r3,-8(fp)
   11784:	e0bfff0d 	sth	r2,-4(fp)
    OS_FLAG_NODE  *pnode_next;
    INT8U          y;


    OSTCBCur->OSTCBStat      |= OS_STAT_FLAG;
   11788:	d0a72f17 	ldw	r2,-25412(gp)
   1178c:	d0e72f17 	ldw	r3,-25412(gp)
   11790:	18c00c03 	ldbu	r3,48(r3)
   11794:	18c00814 	ori	r3,r3,32
   11798:	10c00c05 	stb	r3,48(r2)
    OSTCBCur->OSTCBStatPend   = OS_STAT_PEND_OK;
   1179c:	d0a72f17 	ldw	r2,-25412(gp)
   117a0:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly        = timeout;              /* Store timeout in task's TCB                   */
   117a4:	d0a72f17 	ldw	r2,-25412(gp)
   117a8:	e0ffff0b 	ldhu	r3,-4(fp)
   117ac:	10c00b8d 	sth	r3,46(r2)
#if OS_TASK_DEL_EN > 0
    OSTCBCur->OSTCBFlagNode   = pnode;                /* TCB to link to node                           */
   117b0:	d0a72f17 	ldw	r2,-25412(gp)
   117b4:	e0fffc17 	ldw	r3,-16(fp)
   117b8:	10c00a15 	stw	r3,40(r2)
#endif
    pnode->OSFlagNodeFlags    = flags;                /* Save the flags that we need to wait for       */
   117bc:	e0bffc17 	ldw	r2,-16(fp)
   117c0:	e0fffd0b 	ldhu	r3,-12(fp)
   117c4:	10c0040d 	sth	r3,16(r2)
    pnode->OSFlagNodeWaitType = wait_type;            /* Save the type of wait we are doing            */
   117c8:	e0bffc17 	ldw	r2,-16(fp)
   117cc:	e0fffe03 	ldbu	r3,-8(fp)
   117d0:	10c00485 	stb	r3,18(r2)
    pnode->OSFlagNodeTCB      = (void *)OSTCBCur;     /* Link to task's TCB                            */
   117d4:	d0e72f17 	ldw	r3,-25412(gp)
   117d8:	e0bffc17 	ldw	r2,-16(fp)
   117dc:	10c00215 	stw	r3,8(r2)
    pnode->OSFlagNodeNext     = pgrp->OSFlagWaitList; /* Add node at beginning of event flag wait list */
   117e0:	e0bffb17 	ldw	r2,-20(fp)
   117e4:	10c00117 	ldw	r3,4(r2)
   117e8:	e0bffc17 	ldw	r2,-16(fp)
   117ec:	10c00015 	stw	r3,0(r2)
    pnode->OSFlagNodePrev     = (void *)0;
   117f0:	e0bffc17 	ldw	r2,-16(fp)
   117f4:	10000115 	stw	zero,4(r2)
    pnode->OSFlagNodeFlagGrp  = (void *)pgrp;         /* Link to Event Flag Group                      */
   117f8:	e0bffc17 	ldw	r2,-16(fp)
   117fc:	e0fffb17 	ldw	r3,-20(fp)
   11800:	10c00315 	stw	r3,12(r2)
    pnode_next                = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
   11804:	e0bffb17 	ldw	r2,-20(fp)
   11808:	10800117 	ldw	r2,4(r2)
   1180c:	e0bff915 	stw	r2,-28(fp)
    if (pnode_next != (void *)0) {                    /* Is this the first NODE to insert?             */
   11810:	e0bff917 	ldw	r2,-28(fp)
   11814:	10000326 	beq	r2,zero,11824 <OS_FlagBlock+0xc8>
        pnode_next->OSFlagNodePrev = pnode;           /* No, link in doubly linked list                */
   11818:	e0bff917 	ldw	r2,-28(fp)
   1181c:	e0fffc17 	ldw	r3,-16(fp)
   11820:	10c00115 	stw	r3,4(r2)
    }
    pgrp->OSFlagWaitList = (void *)pnode;
   11824:	e0bffb17 	ldw	r2,-20(fp)
   11828:	e0fffc17 	ldw	r3,-16(fp)
   1182c:	10c00115 	stw	r3,4(r2)

    y            =  OSTCBCur->OSTCBY;                 /* Suspend current task until flag(s) received   */
   11830:	d0a72f17 	ldw	r2,-25412(gp)
   11834:	10800d03 	ldbu	r2,52(r2)
   11838:	e0bffa05 	stb	r2,-24(fp)
    OSRdyTbl[y] &= ~OSTCBCur->OSTCBBitX;
   1183c:	e0fffa03 	ldbu	r3,-24(fp)
   11840:	e13ffa03 	ldbu	r4,-24(fp)
   11844:	d0a72c44 	addi	r2,gp,-25423
   11848:	2085883a 	add	r2,r4,r2
   1184c:	10800003 	ldbu	r2,0(r2)
   11850:	1009883a 	mov	r4,r2
   11854:	d0a72f17 	ldw	r2,-25412(gp)
   11858:	10800d43 	ldbu	r2,53(r2)
   1185c:	0084303a 	nor	r2,zero,r2
   11860:	2084703a 	and	r2,r4,r2
   11864:	1009883a 	mov	r4,r2
   11868:	d0a72c44 	addi	r2,gp,-25423
   1186c:	1885883a 	add	r2,r3,r2
   11870:	11000005 	stb	r4,0(r2)
    if (OSRdyTbl[y] == 0x00) {
   11874:	e0fffa03 	ldbu	r3,-24(fp)
   11878:	d0a72c44 	addi	r2,gp,-25423
   1187c:	1885883a 	add	r2,r3,r2
   11880:	10800003 	ldbu	r2,0(r2)
   11884:	10803fcc 	andi	r2,r2,255
   11888:	1000071e 	bne	r2,zero,118a8 <OS_FlagBlock+0x14c>
        OSRdyGrp &= ~OSTCBCur->OSTCBBitY;
   1188c:	d0a72f17 	ldw	r2,-25412(gp)
   11890:	10800d83 	ldbu	r2,54(r2)
   11894:	0084303a 	nor	r2,zero,r2
   11898:	1007883a 	mov	r3,r2
   1189c:	d0a72c03 	ldbu	r2,-25424(gp)
   118a0:	1884703a 	and	r2,r3,r2
   118a4:	d0a72c05 	stb	r2,-25424(gp)
    }
}
   118a8:	0001883a 	nop
   118ac:	e037883a 	mov	sp,fp
   118b0:	df000017 	ldw	fp,0(sp)
   118b4:	dec00104 	addi	sp,sp,4
   118b8:	f800283a 	ret

000118bc <OS_FlagInit>:
* WARNING    : You MUST NOT call this function from your code.  This is an INTERNAL function to uC/OS-II.
*********************************************************************************************************
*/

void  OS_FlagInit (void)
{
   118bc:	defffb04 	addi	sp,sp,-20
   118c0:	dfc00415 	stw	ra,16(sp)
   118c4:	df000315 	stw	fp,12(sp)
   118c8:	df000304 	addi	fp,sp,12
    INT16U       i;
    OS_FLAG_GRP *pgrp1;
    OS_FLAG_GRP *pgrp2;


    OS_MemClr((INT8U *)&OSFlagTbl[0], sizeof(OSFlagTbl));           /* Clear the flag group table      */
   118cc:	0140dc04 	movi	r5,880
   118d0:	010000b4 	movhi	r4,2
   118d4:	21322504 	addi	r4,r4,-14188
   118d8:	000fb000 	call	fb00 <OS_MemClr>
    pgrp1 = &OSFlagTbl[0];
   118dc:	008000b4 	movhi	r2,2
   118e0:	10b22504 	addi	r2,r2,-14188
   118e4:	e0bffe15 	stw	r2,-8(fp)
    pgrp2 = &OSFlagTbl[1];
   118e8:	008000b4 	movhi	r2,2
   118ec:	10b23004 	addi	r2,r2,-14144
   118f0:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < (OS_MAX_FLAGS - 1); i++) {                      /* Init. list of free EVENT FLAGS  */
   118f4:	e03ffd0d 	sth	zero,-12(fp)
   118f8:	00001306 	br	11948 <OS_FlagInit+0x8c>
        pgrp1->OSFlagType     = OS_EVENT_TYPE_UNUSED;
   118fc:	e0bffe17 	ldw	r2,-8(fp)
   11900:	10000005 	stb	zero,0(r2)
        pgrp1->OSFlagWaitList = (void *)pgrp2;
   11904:	e0bffe17 	ldw	r2,-8(fp)
   11908:	e0ffff17 	ldw	r3,-4(fp)
   1190c:	10c00115 	stw	r3,4(r2)
#if OS_FLAG_NAME_SIZE > 1
        pgrp1->OSFlagName[0]  = '?';                                /* Unknown name                    */
   11910:	e0bffe17 	ldw	r2,-8(fp)
   11914:	00c00fc4 	movi	r3,63
   11918:	10c00285 	stb	r3,10(r2)
        pgrp1->OSFlagName[1]  = OS_ASCII_NUL;
   1191c:	e0bffe17 	ldw	r2,-8(fp)
   11920:	100002c5 	stb	zero,11(r2)
#endif
        pgrp1++;
   11924:	e0bffe17 	ldw	r2,-8(fp)
   11928:	10800b04 	addi	r2,r2,44
   1192c:	e0bffe15 	stw	r2,-8(fp)
        pgrp2++;
   11930:	e0bfff17 	ldw	r2,-4(fp)
   11934:	10800b04 	addi	r2,r2,44
   11938:	e0bfff15 	stw	r2,-4(fp)


    OS_MemClr((INT8U *)&OSFlagTbl[0], sizeof(OSFlagTbl));           /* Clear the flag group table      */
    pgrp1 = &OSFlagTbl[0];
    pgrp2 = &OSFlagTbl[1];
    for (i = 0; i < (OS_MAX_FLAGS - 1); i++) {                      /* Init. list of free EVENT FLAGS  */
   1193c:	e0bffd0b 	ldhu	r2,-12(fp)
   11940:	10800044 	addi	r2,r2,1
   11944:	e0bffd0d 	sth	r2,-12(fp)
   11948:	e0bffd0b 	ldhu	r2,-12(fp)
   1194c:	108004f0 	cmpltui	r2,r2,19
   11950:	103fea1e 	bne	r2,zero,118fc <__alt_data_end+0xfffe18fc>
        pgrp1->OSFlagName[1]  = OS_ASCII_NUL;
#endif
        pgrp1++;
        pgrp2++;
    }
    pgrp1->OSFlagType     = OS_EVENT_TYPE_UNUSED;
   11954:	e0bffe17 	ldw	r2,-8(fp)
   11958:	10000005 	stb	zero,0(r2)
    pgrp1->OSFlagWaitList = (void *)0;
   1195c:	e0bffe17 	ldw	r2,-8(fp)
   11960:	10000115 	stw	zero,4(r2)
#if OS_FLAG_NAME_SIZE > 1
    pgrp1->OSFlagName[0]  = '?';                                    /* Unknown name                    */
   11964:	e0bffe17 	ldw	r2,-8(fp)
   11968:	00c00fc4 	movi	r3,63
   1196c:	10c00285 	stb	r3,10(r2)
    pgrp1->OSFlagName[1]  = OS_ASCII_NUL;
   11970:	e0bffe17 	ldw	r2,-8(fp)
   11974:	100002c5 	stb	zero,11(r2)
#endif
    OSFlagFreeList        = &OSFlagTbl[0];
   11978:	008000b4 	movhi	r2,2
   1197c:	10b22504 	addi	r2,r2,-14188
   11980:	d0a73115 	stw	r2,-25404(gp)
#endif
}
   11984:	0001883a 	nop
   11988:	e037883a 	mov	sp,fp
   1198c:	dfc00117 	ldw	ra,4(sp)
   11990:	df000017 	ldw	fp,0(sp)
   11994:	dec00204 	addi	sp,sp,8
   11998:	f800283a 	ret

0001199c <OS_FlagTaskRdy>:
*              2) This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

static  BOOLEAN  OS_FlagTaskRdy (OS_FLAG_NODE *pnode, OS_FLAGS flags_rdy)
{
   1199c:	defffa04 	addi	sp,sp,-24
   119a0:	dfc00515 	stw	ra,20(sp)
   119a4:	df000415 	stw	fp,16(sp)
   119a8:	df000404 	addi	fp,sp,16
   119ac:	e13ffe15 	stw	r4,-8(fp)
   119b0:	2805883a 	mov	r2,r5
   119b4:	e0bfff0d 	sth	r2,-4(fp)
    OS_TCB   *ptcb;
    BOOLEAN   sched;


    ptcb                 = (OS_TCB *)pnode->OSFlagNodeTCB; /* Point to TCB of waiting task             */
   119b8:	e0bffe17 	ldw	r2,-8(fp)
   119bc:	10800217 	ldw	r2,8(r2)
   119c0:	e0bffd15 	stw	r2,-12(fp)
    ptcb->OSTCBDly       = 0;
   119c4:	e0bffd17 	ldw	r2,-12(fp)
   119c8:	10000b8d 	sth	zero,46(r2)
    ptcb->OSTCBFlagsRdy  = flags_rdy;
   119cc:	e0bffd17 	ldw	r2,-12(fp)
   119d0:	e0ffff0b 	ldhu	r3,-4(fp)
   119d4:	10c00b0d 	sth	r3,44(r2)
    ptcb->OSTCBStat     &= ~(INT8U)OS_STAT_FLAG;
   119d8:	e0bffd17 	ldw	r2,-12(fp)
   119dc:	10c00c03 	ldbu	r3,48(r2)
   119e0:	00bff7c4 	movi	r2,-33
   119e4:	1884703a 	and	r2,r3,r2
   119e8:	1007883a 	mov	r3,r2
   119ec:	e0bffd17 	ldw	r2,-12(fp)
   119f0:	10c00c05 	stb	r3,48(r2)
    ptcb->OSTCBStatPend  = OS_STAT_PEND_OK;
   119f4:	e0bffd17 	ldw	r2,-12(fp)
   119f8:	10000c45 	stb	zero,49(r2)
    if (ptcb->OSTCBStat == OS_STAT_RDY) {                  /* Task now ready?                          */
   119fc:	e0bffd17 	ldw	r2,-12(fp)
   11a00:	10800c03 	ldbu	r2,48(r2)
   11a04:	10803fcc 	andi	r2,r2,255
   11a08:	1000181e 	bne	r2,zero,11a6c <OS_FlagTaskRdy+0xd0>
        OSRdyGrp               |= ptcb->OSTCBBitY;         /* Put task into ready list                 */
   11a0c:	e0bffd17 	ldw	r2,-12(fp)
   11a10:	10c00d83 	ldbu	r3,54(r2)
   11a14:	d0a72c03 	ldbu	r2,-25424(gp)
   11a18:	1884b03a 	or	r2,r3,r2
   11a1c:	d0a72c05 	stb	r2,-25424(gp)
        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
   11a20:	e0bffd17 	ldw	r2,-12(fp)
   11a24:	10800d03 	ldbu	r2,52(r2)
   11a28:	10c03fcc 	andi	r3,r2,255
   11a2c:	e0bffd17 	ldw	r2,-12(fp)
   11a30:	10800d03 	ldbu	r2,52(r2)
   11a34:	11003fcc 	andi	r4,r2,255
   11a38:	d0a72c44 	addi	r2,gp,-25423
   11a3c:	2085883a 	add	r2,r4,r2
   11a40:	11000003 	ldbu	r4,0(r2)
   11a44:	e0bffd17 	ldw	r2,-12(fp)
   11a48:	10800d43 	ldbu	r2,53(r2)
   11a4c:	2084b03a 	or	r2,r4,r2
   11a50:	1009883a 	mov	r4,r2
   11a54:	d0a72c44 	addi	r2,gp,-25423
   11a58:	1885883a 	add	r2,r3,r2
   11a5c:	11000005 	stb	r4,0(r2)
        sched                   = OS_TRUE;
   11a60:	00800044 	movi	r2,1
   11a64:	e0bffc05 	stb	r2,-16(fp)
   11a68:	00000106 	br	11a70 <OS_FlagTaskRdy+0xd4>
    } else {
        sched                   = OS_FALSE;
   11a6c:	e03ffc05 	stb	zero,-16(fp)
    }
    OS_FlagUnlink(pnode);
   11a70:	e13ffe17 	ldw	r4,-8(fp)
   11a74:	0011a900 	call	11a90 <OS_FlagUnlink>
    return (sched);
   11a78:	e0bffc03 	ldbu	r2,-16(fp)
}
   11a7c:	e037883a 	mov	sp,fp
   11a80:	dfc00117 	ldw	ra,4(sp)
   11a84:	df000017 	ldw	fp,0(sp)
   11a88:	dec00204 	addi	sp,sp,8
   11a8c:	f800283a 	ret

00011a90 <OS_FlagUnlink>:
*              2) This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

void  OS_FlagUnlink (OS_FLAG_NODE *pnode)
{
   11a90:	defffa04 	addi	sp,sp,-24
   11a94:	df000515 	stw	fp,20(sp)
   11a98:	df000504 	addi	fp,sp,20
   11a9c:	e13fff15 	stw	r4,-4(fp)
    OS_FLAG_GRP  *pgrp;
    OS_FLAG_NODE *pnode_prev;
    OS_FLAG_NODE *pnode_next;


    pnode_prev = (OS_FLAG_NODE *)pnode->OSFlagNodePrev;
   11aa0:	e0bfff17 	ldw	r2,-4(fp)
   11aa4:	10800117 	ldw	r2,4(r2)
   11aa8:	e0bffb15 	stw	r2,-20(fp)
    pnode_next = (OS_FLAG_NODE *)pnode->OSFlagNodeNext;
   11aac:	e0bfff17 	ldw	r2,-4(fp)
   11ab0:	10800017 	ldw	r2,0(r2)
   11ab4:	e0bffc15 	stw	r2,-16(fp)
    if (pnode_prev == (OS_FLAG_NODE *)0) {                      /* Is it first node in wait list?      */
   11ab8:	e0bffb17 	ldw	r2,-20(fp)
   11abc:	10000b1e 	bne	r2,zero,11aec <OS_FlagUnlink+0x5c>
        pgrp                 = (OS_FLAG_GRP *)pnode->OSFlagNodeFlagGrp;
   11ac0:	e0bfff17 	ldw	r2,-4(fp)
   11ac4:	10800317 	ldw	r2,12(r2)
   11ac8:	e0bffd15 	stw	r2,-12(fp)
        pgrp->OSFlagWaitList = (void *)pnode_next;              /*      Update list for new 1st node   */
   11acc:	e0bffd17 	ldw	r2,-12(fp)
   11ad0:	e0fffc17 	ldw	r3,-16(fp)
   11ad4:	10c00115 	stw	r3,4(r2)
        if (pnode_next != (OS_FLAG_NODE *)0) {
   11ad8:	e0bffc17 	ldw	r2,-16(fp)
   11adc:	10000b26 	beq	r2,zero,11b0c <OS_FlagUnlink+0x7c>
            pnode_next->OSFlagNodePrev = (OS_FLAG_NODE *)0;     /*      Link new 1st node PREV to NULL */
   11ae0:	e0bffc17 	ldw	r2,-16(fp)
   11ae4:	10000115 	stw	zero,4(r2)
   11ae8:	00000806 	br	11b0c <OS_FlagUnlink+0x7c>
        }
    } else {                                                    /* No,  A node somewhere in the list   */
        pnode_prev->OSFlagNodeNext = pnode_next;                /*      Link around the node to unlink */
   11aec:	e0bffb17 	ldw	r2,-20(fp)
   11af0:	e0fffc17 	ldw	r3,-16(fp)
   11af4:	10c00015 	stw	r3,0(r2)
        if (pnode_next != (OS_FLAG_NODE *)0) {                  /*      Was this the LAST node?        */
   11af8:	e0bffc17 	ldw	r2,-16(fp)
   11afc:	10000326 	beq	r2,zero,11b0c <OS_FlagUnlink+0x7c>
            pnode_next->OSFlagNodePrev = pnode_prev;            /*      No, Link around current node   */
   11b00:	e0bffc17 	ldw	r2,-16(fp)
   11b04:	e0fffb17 	ldw	r3,-20(fp)
   11b08:	10c00115 	stw	r3,4(r2)
        }
    }
#if OS_TASK_DEL_EN > 0
    ptcb                = (OS_TCB *)pnode->OSFlagNodeTCB;
   11b0c:	e0bfff17 	ldw	r2,-4(fp)
   11b10:	10800217 	ldw	r2,8(r2)
   11b14:	e0bffe15 	stw	r2,-8(fp)
    ptcb->OSTCBFlagNode = (OS_FLAG_NODE *)0;
   11b18:	e0bffe17 	ldw	r2,-8(fp)
   11b1c:	10000a15 	stw	zero,40(r2)
#endif
}
   11b20:	0001883a 	nop
   11b24:	e037883a 	mov	sp,fp
   11b28:	df000017 	ldw	fp,0(sp)
   11b2c:	dec00104 	addi	sp,sp,4
   11b30:	f800283a 	ret

00011b34 <OSMemCreate>:
*                              free partition is available.
*********************************************************************************************************
*/

OS_MEM  *OSMemCreate (void *addr, INT32U nblks, INT32U blksize, INT8U *perr)
{
   11b34:	defff404 	addi	sp,sp,-48
   11b38:	df000b15 	stw	fp,44(sp)
   11b3c:	df000b04 	addi	fp,sp,44
   11b40:	e13ffc15 	stw	r4,-16(fp)
   11b44:	e17ffd15 	stw	r5,-12(fp)
   11b48:	e1bffe15 	stw	r6,-8(fp)
   11b4c:	e1ffff15 	stw	r7,-4(fp)
    OS_MEM    *pmem;
    INT8U     *pblk;
    void     **plink;
    INT32U     i;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   11b50:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0              
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
   11b54:	e0bfff17 	ldw	r2,-4(fp)
   11b58:	1000021e 	bne	r2,zero,11b64 <OSMemCreate+0x30>
        return ((OS_MEM *)0);
   11b5c:	0005883a 	mov	r2,zero
   11b60:	00006506 	br	11cf8 <OSMemCreate+0x1c4>
    }
    if (addr == (void *)0) {                          /* Must pass a valid address for the memory part.*/
   11b64:	e0bffc17 	ldw	r2,-16(fp)
   11b68:	1000051e 	bne	r2,zero,11b80 <OSMemCreate+0x4c>
        *perr = OS_ERR_MEM_INVALID_ADDR;
   11b6c:	e0bfff17 	ldw	r2,-4(fp)
   11b70:	00c01884 	movi	r3,98
   11b74:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
   11b78:	0005883a 	mov	r2,zero
   11b7c:	00005e06 	br	11cf8 <OSMemCreate+0x1c4>
    }
    if (((INT32U)addr & (sizeof(void *) - 1)) != 0){  /* Must be pointer size aligned                  */
   11b80:	e0bffc17 	ldw	r2,-16(fp)
   11b84:	108000cc 	andi	r2,r2,3
   11b88:	10000526 	beq	r2,zero,11ba0 <OSMemCreate+0x6c>
        *perr = OS_ERR_MEM_INVALID_ADDR;
   11b8c:	e0bfff17 	ldw	r2,-4(fp)
   11b90:	00c01884 	movi	r3,98
   11b94:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
   11b98:	0005883a 	mov	r2,zero
   11b9c:	00005606 	br	11cf8 <OSMemCreate+0x1c4>
    }
    if (nblks < 2) {                                  /* Must have at least 2 blocks per partition     */
   11ba0:	e0bffd17 	ldw	r2,-12(fp)
   11ba4:	108000a8 	cmpgeui	r2,r2,2
   11ba8:	1000051e 	bne	r2,zero,11bc0 <OSMemCreate+0x8c>
        *perr = OS_ERR_MEM_INVALID_BLKS;
   11bac:	e0bfff17 	ldw	r2,-4(fp)
   11bb0:	00c016c4 	movi	r3,91
   11bb4:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
   11bb8:	0005883a 	mov	r2,zero
   11bbc:	00004e06 	br	11cf8 <OSMemCreate+0x1c4>
    }
    if (blksize < sizeof(void *)) {                   /* Must contain space for at least a pointer     */
   11bc0:	e0bffe17 	ldw	r2,-8(fp)
   11bc4:	10800128 	cmpgeui	r2,r2,4
   11bc8:	1000051e 	bne	r2,zero,11be0 <OSMemCreate+0xac>
        *perr = OS_ERR_MEM_INVALID_SIZE;
   11bcc:	e0bfff17 	ldw	r2,-4(fp)
   11bd0:	00c01704 	movi	r3,92
   11bd4:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
   11bd8:	0005883a 	mov	r2,zero
   11bdc:	00004606 	br	11cf8 <OSMemCreate+0x1c4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   11be0:	0005303a 	rdctl	r2,status
   11be4:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   11be8:	e0fffb17 	ldw	r3,-20(fp)
   11bec:	00bfff84 	movi	r2,-2
   11bf0:	1884703a 	and	r2,r3,r2
   11bf4:	1001703a 	wrctl	status,r2
  
  return context;
   11bf8:	e0bffb17 	ldw	r2,-20(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   11bfc:	e0bff815 	stw	r2,-32(fp)
    pmem = OSMemFreeList;                             /* Get next free memory partition                */
   11c00:	d0a72917 	ldw	r2,-25436(gp)
   11c04:	e0bffa15 	stw	r2,-24(fp)
    if (OSMemFreeList != (OS_MEM *)0) {               /* See if pool of free partitions was empty      */
   11c08:	d0a72917 	ldw	r2,-25436(gp)
   11c0c:	10000326 	beq	r2,zero,11c1c <OSMemCreate+0xe8>
        OSMemFreeList = (OS_MEM *)OSMemFreeList->OSMemFreeList;
   11c10:	d0a72917 	ldw	r2,-25436(gp)
   11c14:	10800117 	ldw	r2,4(r2)
   11c18:	d0a72915 	stw	r2,-25436(gp)
   11c1c:	e0bff817 	ldw	r2,-32(fp)
   11c20:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   11c24:	e0bff917 	ldw	r2,-28(fp)
   11c28:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    if (pmem == (OS_MEM *)0) {                        /* See if we have a memory partition             */
   11c2c:	e0bffa17 	ldw	r2,-24(fp)
   11c30:	1000051e 	bne	r2,zero,11c48 <OSMemCreate+0x114>
        *perr = OS_ERR_MEM_INVALID_PART;
   11c34:	e0bfff17 	ldw	r2,-4(fp)
   11c38:	00c01684 	movi	r3,90
   11c3c:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
   11c40:	0005883a 	mov	r2,zero
   11c44:	00002c06 	br	11cf8 <OSMemCreate+0x1c4>
    }
    plink = (void **)addr;                            /* Create linked list of free memory blocks      */
   11c48:	e0bffc17 	ldw	r2,-16(fp)
   11c4c:	e0bff615 	stw	r2,-40(fp)
    pblk  = (INT8U *)((INT32U)addr + blksize);
   11c50:	e0fffc17 	ldw	r3,-16(fp)
   11c54:	e0bffe17 	ldw	r2,-8(fp)
   11c58:	1885883a 	add	r2,r3,r2
   11c5c:	e0bff515 	stw	r2,-44(fp)
    for (i = 0; i < (nblks - 1); i++) {
   11c60:	e03ff715 	stw	zero,-36(fp)
   11c64:	00000c06 	br	11c98 <OSMemCreate+0x164>
       *plink = (void *)pblk;                         /* Save pointer to NEXT block in CURRENT block   */
   11c68:	e0bff617 	ldw	r2,-40(fp)
   11c6c:	e0fff517 	ldw	r3,-44(fp)
   11c70:	10c00015 	stw	r3,0(r2)
        plink = (void **)pblk;                        /* Position to  NEXT      block                  */
   11c74:	e0bff517 	ldw	r2,-44(fp)
   11c78:	e0bff615 	stw	r2,-40(fp)
        pblk  = (INT8U *)((INT32U)pblk + blksize);    /* Point to the FOLLOWING block                  */
   11c7c:	e0fff517 	ldw	r3,-44(fp)
   11c80:	e0bffe17 	ldw	r2,-8(fp)
   11c84:	1885883a 	add	r2,r3,r2
   11c88:	e0bff515 	stw	r2,-44(fp)
        *perr = OS_ERR_MEM_INVALID_PART;
        return ((OS_MEM *)0);
    }
    plink = (void **)addr;                            /* Create linked list of free memory blocks      */
    pblk  = (INT8U *)((INT32U)addr + blksize);
    for (i = 0; i < (nblks - 1); i++) {
   11c8c:	e0bff717 	ldw	r2,-36(fp)
   11c90:	10800044 	addi	r2,r2,1
   11c94:	e0bff715 	stw	r2,-36(fp)
   11c98:	e0bffd17 	ldw	r2,-12(fp)
   11c9c:	10bfffc4 	addi	r2,r2,-1
   11ca0:	e0fff717 	ldw	r3,-36(fp)
   11ca4:	18bff036 	bltu	r3,r2,11c68 <__alt_data_end+0xfffe1c68>
       *plink = (void *)pblk;                         /* Save pointer to NEXT block in CURRENT block   */
        plink = (void **)pblk;                        /* Position to  NEXT      block                  */
        pblk  = (INT8U *)((INT32U)pblk + blksize);    /* Point to the FOLLOWING block                  */
    }
    *plink              = (void *)0;                  /* Last memory block points to NULL              */
   11ca8:	e0bff617 	ldw	r2,-40(fp)
   11cac:	10000015 	stw	zero,0(r2)
    pmem->OSMemAddr     = addr;                       /* Store start address of memory partition       */
   11cb0:	e0bffa17 	ldw	r2,-24(fp)
   11cb4:	e0fffc17 	ldw	r3,-16(fp)
   11cb8:	10c00015 	stw	r3,0(r2)
    pmem->OSMemFreeList = addr;                       /* Initialize pointer to pool of free blocks     */
   11cbc:	e0bffa17 	ldw	r2,-24(fp)
   11cc0:	e0fffc17 	ldw	r3,-16(fp)
   11cc4:	10c00115 	stw	r3,4(r2)
    pmem->OSMemNFree    = nblks;                      /* Store number of free blocks in MCB            */
   11cc8:	e0bffa17 	ldw	r2,-24(fp)
   11ccc:	e0fffd17 	ldw	r3,-12(fp)
   11cd0:	10c00415 	stw	r3,16(r2)
    pmem->OSMemNBlks    = nblks;
   11cd4:	e0bffa17 	ldw	r2,-24(fp)
   11cd8:	e0fffd17 	ldw	r3,-12(fp)
   11cdc:	10c00315 	stw	r3,12(r2)
    pmem->OSMemBlkSize  = blksize;                    /* Store block size of each memory blocks        */
   11ce0:	e0bffa17 	ldw	r2,-24(fp)
   11ce4:	e0fffe17 	ldw	r3,-8(fp)
   11ce8:	10c00215 	stw	r3,8(r2)
    *perr               = OS_ERR_NONE;
   11cec:	e0bfff17 	ldw	r2,-4(fp)
   11cf0:	10000005 	stb	zero,0(r2)
    return (pmem);
   11cf4:	e0bffa17 	ldw	r2,-24(fp)
}
   11cf8:	e037883a 	mov	sp,fp
   11cfc:	df000017 	ldw	fp,0(sp)
   11d00:	dec00104 	addi	sp,sp,4
   11d04:	f800283a 	ret

00011d08 <OSMemGet>:
*               A pointer to NULL if an error is detected
*********************************************************************************************************
*/

void  *OSMemGet (OS_MEM *pmem, INT8U *perr)
{
   11d08:	defff804 	addi	sp,sp,-32
   11d0c:	df000715 	stw	fp,28(sp)
   11d10:	df000704 	addi	fp,sp,28
   11d14:	e13ffe15 	stw	r4,-8(fp)
   11d18:	e17fff15 	stw	r5,-4(fp)
    void      *pblk;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   11d1c:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
   11d20:	e0bfff17 	ldw	r2,-4(fp)
   11d24:	1000021e 	bne	r2,zero,11d30 <OSMemGet+0x28>
        return ((void *)0);
   11d28:	0005883a 	mov	r2,zero
   11d2c:	00002e06 	br	11de8 <OSMemGet+0xe0>
    }
    if (pmem == (OS_MEM *)0) {                        /* Must point to a valid memory partition        */
   11d30:	e0bffe17 	ldw	r2,-8(fp)
   11d34:	1000051e 	bne	r2,zero,11d4c <OSMemGet+0x44>
        *perr = OS_ERR_MEM_INVALID_PMEM;
   11d38:	e0bfff17 	ldw	r2,-4(fp)
   11d3c:	00c01804 	movi	r3,96
   11d40:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
   11d44:	0005883a 	mov	r2,zero
   11d48:	00002706 	br	11de8 <OSMemGet+0xe0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   11d4c:	0005303a 	rdctl	r2,status
   11d50:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   11d54:	e0fffd17 	ldw	r3,-12(fp)
   11d58:	00bfff84 	movi	r2,-2
   11d5c:	1884703a 	and	r2,r3,r2
   11d60:	1001703a 	wrctl	status,r2
  
  return context;
   11d64:	e0bffd17 	ldw	r2,-12(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   11d68:	e0bff915 	stw	r2,-28(fp)
    if (pmem->OSMemNFree > 0) {                       /* See if there are any free memory blocks       */
   11d6c:	e0bffe17 	ldw	r2,-8(fp)
   11d70:	10800417 	ldw	r2,16(r2)
   11d74:	10001426 	beq	r2,zero,11dc8 <OSMemGet+0xc0>
        pblk                = pmem->OSMemFreeList;    /* Yes, point to next free memory block          */
   11d78:	e0bffe17 	ldw	r2,-8(fp)
   11d7c:	10800117 	ldw	r2,4(r2)
   11d80:	e0bffb15 	stw	r2,-20(fp)
        pmem->OSMemFreeList = *(void **)pblk;         /*      Adjust pointer to new free list          */
   11d84:	e0bffb17 	ldw	r2,-20(fp)
   11d88:	10c00017 	ldw	r3,0(r2)
   11d8c:	e0bffe17 	ldw	r2,-8(fp)
   11d90:	10c00115 	stw	r3,4(r2)
        pmem->OSMemNFree--;                           /*      One less memory block in this partition  */
   11d94:	e0bffe17 	ldw	r2,-8(fp)
   11d98:	10800417 	ldw	r2,16(r2)
   11d9c:	10ffffc4 	addi	r3,r2,-1
   11da0:	e0bffe17 	ldw	r2,-8(fp)
   11da4:	10c00415 	stw	r3,16(r2)
   11da8:	e0bff917 	ldw	r2,-28(fp)
   11dac:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   11db0:	e0bffa17 	ldw	r2,-24(fp)
   11db4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_NONE;                          /*      No error                                 */
   11db8:	e0bfff17 	ldw	r2,-4(fp)
   11dbc:	10000005 	stb	zero,0(r2)
        return (pblk);                                /*      Return memory block to caller            */
   11dc0:	e0bffb17 	ldw	r2,-20(fp)
   11dc4:	00000806 	br	11de8 <OSMemGet+0xe0>
   11dc8:	e0bff917 	ldw	r2,-28(fp)
   11dcc:	e0bffc15 	stw	r2,-16(fp)
   11dd0:	e0bffc17 	ldw	r2,-16(fp)
   11dd4:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_MEM_NO_FREE_BLKS;                  /* No,  Notify caller of empty memory partition  */
   11dd8:	e0bfff17 	ldw	r2,-4(fp)
   11ddc:	00c01744 	movi	r3,93
   11de0:	10c00005 	stb	r3,0(r2)
    return ((void *)0);                               /*      Return NULL pointer to caller            */
   11de4:	0005883a 	mov	r2,zero
}
   11de8:	e037883a 	mov	sp,fp
   11dec:	df000017 	ldw	fp,0(sp)
   11df0:	dec00104 	addi	sp,sp,4
   11df4:	f800283a 	ret

00011df8 <OSMemNameGet>:
*********************************************************************************************************
*/

#if OS_MEM_NAME_SIZE > 1
INT8U  OSMemNameGet (OS_MEM *pmem, INT8U *pname, INT8U *perr)
{
   11df8:	defff704 	addi	sp,sp,-36
   11dfc:	dfc00815 	stw	ra,32(sp)
   11e00:	df000715 	stw	fp,28(sp)
   11e04:	df000704 	addi	fp,sp,28
   11e08:	e13ffd15 	stw	r4,-12(fp)
   11e0c:	e17ffe15 	stw	r5,-8(fp)
   11e10:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   11e14:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
   11e18:	e0bfff17 	ldw	r2,-4(fp)
   11e1c:	1000021e 	bne	r2,zero,11e28 <OSMemNameGet+0x30>
        return (0);
   11e20:	0005883a 	mov	r2,zero
   11e24:	00002b06 	br	11ed4 <OSMemNameGet+0xdc>
    }
    if (pmem == (OS_MEM *)0) {                   /* Is 'pmem' a NULL pointer?                          */
   11e28:	e0bffd17 	ldw	r2,-12(fp)
   11e2c:	1000051e 	bne	r2,zero,11e44 <OSMemNameGet+0x4c>
        *perr = OS_ERR_MEM_INVALID_PMEM;
   11e30:	e0bfff17 	ldw	r2,-4(fp)
   11e34:	00c01804 	movi	r3,96
   11e38:	10c00005 	stb	r3,0(r2)
        return (0);
   11e3c:	0005883a 	mov	r2,zero
   11e40:	00002406 	br	11ed4 <OSMemNameGet+0xdc>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
   11e44:	e0bffe17 	ldw	r2,-8(fp)
   11e48:	1000051e 	bne	r2,zero,11e60 <OSMemNameGet+0x68>
        *perr = OS_ERR_PNAME_NULL;
   11e4c:	e0bfff17 	ldw	r2,-4(fp)
   11e50:	00c00304 	movi	r3,12
   11e54:	10c00005 	stb	r3,0(r2)
        return (0);
   11e58:	0005883a 	mov	r2,zero
   11e5c:	00001d06 	br	11ed4 <OSMemNameGet+0xdc>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
   11e60:	d0a72e03 	ldbu	r2,-25416(gp)
   11e64:	10803fcc 	andi	r2,r2,255
   11e68:	10000526 	beq	r2,zero,11e80 <OSMemNameGet+0x88>
        *perr = OS_ERR_NAME_GET_ISR;
   11e6c:	e0bfff17 	ldw	r2,-4(fp)
   11e70:	00c00444 	movi	r3,17
   11e74:	10c00005 	stb	r3,0(r2)
        return (0);
   11e78:	0005883a 	mov	r2,zero
   11e7c:	00001506 	br	11ed4 <OSMemNameGet+0xdc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   11e80:	0005303a 	rdctl	r2,status
   11e84:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   11e88:	e0fffb17 	ldw	r3,-20(fp)
   11e8c:	00bfff84 	movi	r2,-2
   11e90:	1884703a 	and	r2,r3,r2
   11e94:	1001703a 	wrctl	status,r2
  
  return context;
   11e98:	e0bffb17 	ldw	r2,-20(fp)
    }
    OS_ENTER_CRITICAL();
   11e9c:	e0bff915 	stw	r2,-28(fp)
    len   = OS_StrCopy(pname, pmem->OSMemName);  /* Copy name from OS_MEM                              */
   11ea0:	e0bffd17 	ldw	r2,-12(fp)
   11ea4:	10800504 	addi	r2,r2,20
   11ea8:	100b883a 	mov	r5,r2
   11eac:	e13ffe17 	ldw	r4,-8(fp)
   11eb0:	000fd000 	call	fd00 <OS_StrCopy>
   11eb4:	e0bffa05 	stb	r2,-24(fp)
   11eb8:	e0bff917 	ldw	r2,-28(fp)
   11ebc:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   11ec0:	e0bffc17 	ldw	r2,-16(fp)
   11ec4:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   11ec8:	e0bfff17 	ldw	r2,-4(fp)
   11ecc:	10000005 	stb	zero,0(r2)
    return (len);
   11ed0:	e0bffa03 	ldbu	r2,-24(fp)
}
   11ed4:	e037883a 	mov	sp,fp
   11ed8:	dfc00117 	ldw	ra,4(sp)
   11edc:	df000017 	ldw	fp,0(sp)
   11ee0:	dec00204 	addi	sp,sp,8
   11ee4:	f800283a 	ret

00011ee8 <OSMemNameSet>:
*********************************************************************************************************
*/

#if OS_MEM_NAME_SIZE > 1
void  OSMemNameSet (OS_MEM *pmem, INT8U *pname, INT8U *perr)
{
   11ee8:	defff604 	addi	sp,sp,-40
   11eec:	dfc00915 	stw	ra,36(sp)
   11ef0:	df000815 	stw	fp,32(sp)
   11ef4:	df000804 	addi	fp,sp,32
   11ef8:	e13ffd15 	stw	r4,-12(fp)
   11efc:	e17ffe15 	stw	r5,-8(fp)
   11f00:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   11f04:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
   11f08:	e0bfff17 	ldw	r2,-4(fp)
   11f0c:	10003526 	beq	r2,zero,11fe4 <OSMemNameSet+0xfc>
        return;
    }
    if (pmem == (OS_MEM *)0) {                   /* Is 'pmem' a NULL pointer?                          */
   11f10:	e0bffd17 	ldw	r2,-12(fp)
   11f14:	1000041e 	bne	r2,zero,11f28 <OSMemNameSet+0x40>
        *perr = OS_ERR_MEM_INVALID_PMEM;
   11f18:	e0bfff17 	ldw	r2,-4(fp)
   11f1c:	00c01804 	movi	r3,96
   11f20:	10c00005 	stb	r3,0(r2)
        return;
   11f24:	00003006 	br	11fe8 <OSMemNameSet+0x100>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
   11f28:	e0bffe17 	ldw	r2,-8(fp)
   11f2c:	1000041e 	bne	r2,zero,11f40 <OSMemNameSet+0x58>
        *perr = OS_ERR_PNAME_NULL;
   11f30:	e0bfff17 	ldw	r2,-4(fp)
   11f34:	00c00304 	movi	r3,12
   11f38:	10c00005 	stb	r3,0(r2)
        return;
   11f3c:	00002a06 	br	11fe8 <OSMemNameSet+0x100>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
   11f40:	d0a72e03 	ldbu	r2,-25416(gp)
   11f44:	10803fcc 	andi	r2,r2,255
   11f48:	10000426 	beq	r2,zero,11f5c <OSMemNameSet+0x74>
        *perr = OS_ERR_NAME_SET_ISR;
   11f4c:	e0bfff17 	ldw	r2,-4(fp)
   11f50:	00c00484 	movi	r3,18
   11f54:	10c00005 	stb	r3,0(r2)
        return;
   11f58:	00002306 	br	11fe8 <OSMemNameSet+0x100>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   11f5c:	0005303a 	rdctl	r2,status
   11f60:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   11f64:	e0fffc17 	ldw	r3,-16(fp)
   11f68:	00bfff84 	movi	r2,-2
   11f6c:	1884703a 	and	r2,r3,r2
   11f70:	1001703a 	wrctl	status,r2
  
  return context;
   11f74:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
   11f78:	e0bff815 	stw	r2,-32(fp)
    len = OS_StrLen(pname);                      /* Can we fit the string in the storage area?         */
   11f7c:	e13ffe17 	ldw	r4,-8(fp)
   11f80:	000fd740 	call	fd74 <OS_StrLen>
   11f84:	e0bffa05 	stb	r2,-24(fp)
    if (len > (OS_MEM_NAME_SIZE - 1)) {          /* No                                                 */
   11f88:	e0bffa03 	ldbu	r2,-24(fp)
   11f8c:	10800830 	cmpltui	r2,r2,32
   11f90:	1000081e 	bne	r2,zero,11fb4 <OSMemNameSet+0xcc>
   11f94:	e0bff817 	ldw	r2,-32(fp)
   11f98:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   11f9c:	e0bff917 	ldw	r2,-28(fp)
   11fa0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_MEM_NAME_TOO_LONG;
   11fa4:	e0bfff17 	ldw	r2,-4(fp)
   11fa8:	00c018c4 	movi	r3,99
   11fac:	10c00005 	stb	r3,0(r2)
        return;
   11fb0:	00000d06 	br	11fe8 <OSMemNameSet+0x100>
    }
    (void)OS_StrCopy(pmem->OSMemName, pname);    /* Yes, copy name to the memory partition header      */
   11fb4:	e0bffd17 	ldw	r2,-12(fp)
   11fb8:	10800504 	addi	r2,r2,20
   11fbc:	e17ffe17 	ldw	r5,-8(fp)
   11fc0:	1009883a 	mov	r4,r2
   11fc4:	000fd000 	call	fd00 <OS_StrCopy>
   11fc8:	e0bff817 	ldw	r2,-32(fp)
   11fcc:	e0bffb15 	stw	r2,-20(fp)
   11fd0:	e0bffb17 	ldw	r2,-20(fp)
   11fd4:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   11fd8:	e0bfff17 	ldw	r2,-4(fp)
   11fdc:	10000005 	stb	zero,0(r2)
   11fe0:	00000106 	br	11fe8 <OSMemNameSet+0x100>



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
        return;
   11fe4:	0001883a 	nop
        return;
    }
    (void)OS_StrCopy(pmem->OSMemName, pname);    /* Yes, copy name to the memory partition header      */
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
}
   11fe8:	e037883a 	mov	sp,fp
   11fec:	dfc00117 	ldw	ra,4(sp)
   11ff0:	df000017 	ldw	fp,0(sp)
   11ff4:	dec00204 	addi	sp,sp,8
   11ff8:	f800283a 	ret

00011ffc <OSMemPut>:
*               OS_ERR_MEM_INVALID_PBLK  if you passed a NULL pointer for the block to release.
*********************************************************************************************************
*/

INT8U  OSMemPut (OS_MEM *pmem, void *pblk)
{
   11ffc:	defff904 	addi	sp,sp,-28
   12000:	df000615 	stw	fp,24(sp)
   12004:	df000604 	addi	fp,sp,24
   12008:	e13ffe15 	stw	r4,-8(fp)
   1200c:	e17fff15 	stw	r5,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   12010:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pmem == (OS_MEM *)0) {                   /* Must point to a valid memory partition             */
   12014:	e0bffe17 	ldw	r2,-8(fp)
   12018:	1000021e 	bne	r2,zero,12024 <OSMemPut+0x28>
        return (OS_ERR_MEM_INVALID_PMEM);
   1201c:	00801804 	movi	r2,96
   12020:	00002806 	br	120c4 <OSMemPut+0xc8>
    }
    if (pblk == (void *)0) {                     /* Must release a valid block                         */
   12024:	e0bfff17 	ldw	r2,-4(fp)
   12028:	1000021e 	bne	r2,zero,12034 <OSMemPut+0x38>
        return (OS_ERR_MEM_INVALID_PBLK);
   1202c:	008017c4 	movi	r2,95
   12030:	00002406 	br	120c4 <OSMemPut+0xc8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   12034:	0005303a 	rdctl	r2,status
   12038:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1203c:	e0fffd17 	ldw	r3,-12(fp)
   12040:	00bfff84 	movi	r2,-2
   12044:	1884703a 	and	r2,r3,r2
   12048:	1001703a 	wrctl	status,r2
  
  return context;
   1204c:	e0bffd17 	ldw	r2,-12(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   12050:	e0bffa15 	stw	r2,-24(fp)
    if (pmem->OSMemNFree >= pmem->OSMemNBlks) {  /* Make sure all blocks not already returned          */
   12054:	e0bffe17 	ldw	r2,-8(fp)
   12058:	10c00417 	ldw	r3,16(r2)
   1205c:	e0bffe17 	ldw	r2,-8(fp)
   12060:	10800317 	ldw	r2,12(r2)
   12064:	18800636 	bltu	r3,r2,12080 <OSMemPut+0x84>
   12068:	e0bffa17 	ldw	r2,-24(fp)
   1206c:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   12070:	e0bffb17 	ldw	r2,-20(fp)
   12074:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_MEM_FULL);
   12078:	00801784 	movi	r2,94
   1207c:	00001106 	br	120c4 <OSMemPut+0xc8>
    }
    *(void **)pblk      = pmem->OSMemFreeList;   /* Insert released block into free block list         */
   12080:	e0bffe17 	ldw	r2,-8(fp)
   12084:	10c00117 	ldw	r3,4(r2)
   12088:	e0bfff17 	ldw	r2,-4(fp)
   1208c:	10c00015 	stw	r3,0(r2)
    pmem->OSMemFreeList = pblk;
   12090:	e0bffe17 	ldw	r2,-8(fp)
   12094:	e0ffff17 	ldw	r3,-4(fp)
   12098:	10c00115 	stw	r3,4(r2)
    pmem->OSMemNFree++;                          /* One more memory block in this partition            */
   1209c:	e0bffe17 	ldw	r2,-8(fp)
   120a0:	10800417 	ldw	r2,16(r2)
   120a4:	10c00044 	addi	r3,r2,1
   120a8:	e0bffe17 	ldw	r2,-8(fp)
   120ac:	10c00415 	stw	r3,16(r2)
   120b0:	e0bffa17 	ldw	r2,-24(fp)
   120b4:	e0bffc15 	stw	r2,-16(fp)
   120b8:	e0bffc17 	ldw	r2,-16(fp)
   120bc:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);                        /* Notify caller that memory block was released       */
   120c0:	0005883a 	mov	r2,zero
}
   120c4:	e037883a 	mov	sp,fp
   120c8:	df000017 	ldw	fp,0(sp)
   120cc:	dec00104 	addi	sp,sp,4
   120d0:	f800283a 	ret

000120d4 <OSMemQuery>:
*********************************************************************************************************
*/

#if OS_MEM_QUERY_EN > 0
INT8U  OSMemQuery (OS_MEM *pmem, OS_MEM_DATA *p_mem_data)
{
   120d4:	defffa04 	addi	sp,sp,-24
   120d8:	df000515 	stw	fp,20(sp)
   120dc:	df000504 	addi	fp,sp,20
   120e0:	e13ffe15 	stw	r4,-8(fp)
   120e4:	e17fff15 	stw	r5,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   120e8:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pmem == (OS_MEM *)0) {                   /* Must point to a valid memory partition             */
   120ec:	e0bffe17 	ldw	r2,-8(fp)
   120f0:	1000021e 	bne	r2,zero,120fc <OSMemQuery+0x28>
        return (OS_ERR_MEM_INVALID_PMEM);
   120f4:	00801804 	movi	r2,96
   120f8:	00002c06 	br	121ac <OSMemQuery+0xd8>
    }
    if (p_mem_data == (OS_MEM_DATA *)0) {        /* Must release a valid storage area for the data     */
   120fc:	e0bfff17 	ldw	r2,-4(fp)
   12100:	1000021e 	bne	r2,zero,1210c <OSMemQuery+0x38>
        return (OS_ERR_MEM_INVALID_PDATA);
   12104:	00801844 	movi	r2,97
   12108:	00002806 	br	121ac <OSMemQuery+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1210c:	0005303a 	rdctl	r2,status
   12110:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   12114:	e0fffc17 	ldw	r3,-16(fp)
   12118:	00bfff84 	movi	r2,-2
   1211c:	1884703a 	and	r2,r3,r2
   12120:	1001703a 	wrctl	status,r2
  
  return context;
   12124:	e0bffc17 	ldw	r2,-16(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   12128:	e0bffb15 	stw	r2,-20(fp)
    p_mem_data->OSAddr     = pmem->OSMemAddr;
   1212c:	e0bffe17 	ldw	r2,-8(fp)
   12130:	10c00017 	ldw	r3,0(r2)
   12134:	e0bfff17 	ldw	r2,-4(fp)
   12138:	10c00015 	stw	r3,0(r2)
    p_mem_data->OSFreeList = pmem->OSMemFreeList;
   1213c:	e0bffe17 	ldw	r2,-8(fp)
   12140:	10c00117 	ldw	r3,4(r2)
   12144:	e0bfff17 	ldw	r2,-4(fp)
   12148:	10c00115 	stw	r3,4(r2)
    p_mem_data->OSBlkSize  = pmem->OSMemBlkSize;
   1214c:	e0bffe17 	ldw	r2,-8(fp)
   12150:	10c00217 	ldw	r3,8(r2)
   12154:	e0bfff17 	ldw	r2,-4(fp)
   12158:	10c00215 	stw	r3,8(r2)
    p_mem_data->OSNBlks    = pmem->OSMemNBlks;
   1215c:	e0bffe17 	ldw	r2,-8(fp)
   12160:	10c00317 	ldw	r3,12(r2)
   12164:	e0bfff17 	ldw	r2,-4(fp)
   12168:	10c00315 	stw	r3,12(r2)
    p_mem_data->OSNFree    = pmem->OSMemNFree;
   1216c:	e0bffe17 	ldw	r2,-8(fp)
   12170:	10c00417 	ldw	r3,16(r2)
   12174:	e0bfff17 	ldw	r2,-4(fp)
   12178:	10c00415 	stw	r3,16(r2)
   1217c:	e0bffb17 	ldw	r2,-20(fp)
   12180:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   12184:	e0bffd17 	ldw	r2,-12(fp)
   12188:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    p_mem_data->OSNUsed    = p_mem_data->OSNBlks - p_mem_data->OSNFree;
   1218c:	e0bfff17 	ldw	r2,-4(fp)
   12190:	10c00317 	ldw	r3,12(r2)
   12194:	e0bfff17 	ldw	r2,-4(fp)
   12198:	10800417 	ldw	r2,16(r2)
   1219c:	1887c83a 	sub	r3,r3,r2
   121a0:	e0bfff17 	ldw	r2,-4(fp)
   121a4:	10c00515 	stw	r3,20(r2)
    return (OS_ERR_NONE);
   121a8:	0005883a 	mov	r2,zero
}
   121ac:	e037883a 	mov	sp,fp
   121b0:	df000017 	ldw	fp,0(sp)
   121b4:	dec00104 	addi	sp,sp,4
   121b8:	f800283a 	ret

000121bc <OS_MemInit>:
* Note(s)    : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

void  OS_MemInit (void)
{
   121bc:	defffc04 	addi	sp,sp,-16
   121c0:	dfc00315 	stw	ra,12(sp)
   121c4:	df000215 	stw	fp,8(sp)
   121c8:	df000204 	addi	fp,sp,8
#if OS_MAX_MEM_PART >= 2
    OS_MEM  *pmem;
    INT16U   i;


    OS_MemClr((INT8U *)&OSMemTbl[0], sizeof(OSMemTbl));   /* Clear the memory partition table          */
   121cc:	01430c04 	movi	r5,3120
   121d0:	010000b4 	movhi	r4,2
   121d4:	21330104 	addi	r4,r4,-13308
   121d8:	000fb000 	call	fb00 <OS_MemClr>
    pmem = &OSMemTbl[0];                                  /* Point to memory control block (MCB)       */
   121dc:	008000b4 	movhi	r2,2
   121e0:	10b30104 	addi	r2,r2,-13308
   121e4:	e0bffe15 	stw	r2,-8(fp)
    for (i = 0; i < (OS_MAX_MEM_PART - 1); i++) {         /* Init. list of free memory partitions      */
   121e8:	e03fff0d 	sth	zero,-4(fp)
   121ec:	00001606 	br	12248 <OS_MemInit+0x8c>
        pmem->OSMemFreeList = (void *)&OSMemTbl[i+1];     /* Chain list of free partitions             */
   121f0:	e0bfff0b 	ldhu	r2,-4(fp)
   121f4:	10800044 	addi	r2,r2,1
   121f8:	01400d04 	movi	r5,52
   121fc:	1009883a 	mov	r4,r2
   12200:	000aa740 	call	aa74 <__mulsi3>
   12204:	1007883a 	mov	r3,r2
   12208:	008000b4 	movhi	r2,2
   1220c:	10b30104 	addi	r2,r2,-13308
   12210:	1887883a 	add	r3,r3,r2
   12214:	e0bffe17 	ldw	r2,-8(fp)
   12218:	10c00115 	stw	r3,4(r2)
#if OS_MEM_NAME_SIZE > 1
        pmem->OSMemName[0]  = '?';                        /* Unknown name                              */
   1221c:	e0bffe17 	ldw	r2,-8(fp)
   12220:	00c00fc4 	movi	r3,63
   12224:	10c00505 	stb	r3,20(r2)
        pmem->OSMemName[1]  = OS_ASCII_NUL;
   12228:	e0bffe17 	ldw	r2,-8(fp)
   1222c:	10000545 	stb	zero,21(r2)
#endif
        pmem++;
   12230:	e0bffe17 	ldw	r2,-8(fp)
   12234:	10800d04 	addi	r2,r2,52
   12238:	e0bffe15 	stw	r2,-8(fp)
    INT16U   i;


    OS_MemClr((INT8U *)&OSMemTbl[0], sizeof(OSMemTbl));   /* Clear the memory partition table          */
    pmem = &OSMemTbl[0];                                  /* Point to memory control block (MCB)       */
    for (i = 0; i < (OS_MAX_MEM_PART - 1); i++) {         /* Init. list of free memory partitions      */
   1223c:	e0bfff0b 	ldhu	r2,-4(fp)
   12240:	10800044 	addi	r2,r2,1
   12244:	e0bfff0d 	sth	r2,-4(fp)
   12248:	e0bfff0b 	ldhu	r2,-4(fp)
   1224c:	10800ef0 	cmpltui	r2,r2,59
   12250:	103fe71e 	bne	r2,zero,121f0 <__alt_data_end+0xfffe21f0>
        pmem->OSMemName[0]  = '?';                        /* Unknown name                              */
        pmem->OSMemName[1]  = OS_ASCII_NUL;
#endif
        pmem++;
    }
    pmem->OSMemFreeList = (void *)0;                      /* Initialize last node                      */
   12254:	e0bffe17 	ldw	r2,-8(fp)
   12258:	10000115 	stw	zero,4(r2)
#if OS_MEM_NAME_SIZE > 1
    pmem->OSMemName[0]  = '?';                            /* Unknown name                              */
   1225c:	e0bffe17 	ldw	r2,-8(fp)
   12260:	00c00fc4 	movi	r3,63
   12264:	10c00505 	stb	r3,20(r2)
    pmem->OSMemName[1]  = OS_ASCII_NUL;
   12268:	e0bffe17 	ldw	r2,-8(fp)
   1226c:	10000545 	stb	zero,21(r2)
#endif

    OSMemFreeList       = &OSMemTbl[0];                   /* Point to beginning of free list           */
   12270:	008000b4 	movhi	r2,2
   12274:	10b30104 	addi	r2,r2,-13308
   12278:	d0a72915 	stw	r2,-25436(gp)
#endif
}
   1227c:	0001883a 	nop
   12280:	e037883a 	mov	sp,fp
   12284:	dfc00117 	ldw	ra,4(sp)
   12288:	df000017 	ldw	fp,0(sp)
   1228c:	dec00204 	addi	sp,sp,8
   12290:	f800283a 	ret

00012294 <OSQAccept>:
*********************************************************************************************************
*/

#if OS_Q_ACCEPT_EN > 0
void  *OSQAccept (OS_EVENT *pevent, INT8U *perr)
{
   12294:	defff804 	addi	sp,sp,-32
   12298:	df000715 	stw	fp,28(sp)
   1229c:	df000704 	addi	fp,sp,28
   122a0:	e13ffe15 	stw	r4,-8(fp)
   122a4:	e17fff15 	stw	r5,-4(fp)
    void      *pmsg;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   122a8:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
   122ac:	e0bfff17 	ldw	r2,-4(fp)
   122b0:	1000021e 	bne	r2,zero,122bc <OSQAccept+0x28>
        return ((void *)0);
   122b4:	0005883a 	mov	r2,zero
   122b8:	00004206 	br	123c4 <OSQAccept+0x130>
    }
    if (pevent == (OS_EVENT *)0) {               /* Validate 'pevent'                                  */
   122bc:	e0bffe17 	ldw	r2,-8(fp)
   122c0:	1000051e 	bne	r2,zero,122d8 <OSQAccept+0x44>
        *perr = OS_ERR_PEVENT_NULL;
   122c4:	e0bfff17 	ldw	r2,-4(fp)
   122c8:	00c00104 	movi	r3,4
   122cc:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
   122d0:	0005883a 	mov	r2,zero
   122d4:	00003b06 	br	123c4 <OSQAccept+0x130>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {/* Validate event block type                          */
   122d8:	e0bffe17 	ldw	r2,-8(fp)
   122dc:	10800003 	ldbu	r2,0(r2)
   122e0:	10803fcc 	andi	r2,r2,255
   122e4:	108000a0 	cmpeqi	r2,r2,2
   122e8:	1000051e 	bne	r2,zero,12300 <OSQAccept+0x6c>
        *perr = OS_ERR_EVENT_TYPE;
   122ec:	e0bfff17 	ldw	r2,-4(fp)
   122f0:	00c00044 	movi	r3,1
   122f4:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
   122f8:	0005883a 	mov	r2,zero
   122fc:	00003106 	br	123c4 <OSQAccept+0x130>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   12300:	0005303a 	rdctl	r2,status
   12304:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   12308:	e0fffd17 	ldw	r3,-12(fp)
   1230c:	00bfff84 	movi	r2,-2
   12310:	1884703a 	and	r2,r3,r2
   12314:	1001703a 	wrctl	status,r2
  
  return context;
   12318:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
   1231c:	e0bffa15 	stw	r2,-24(fp)
    pq = (OS_Q *)pevent->OSEventPtr;             /* Point at queue control block                       */
   12320:	e0bffe17 	ldw	r2,-8(fp)
   12324:	10800117 	ldw	r2,4(r2)
   12328:	e0bffc15 	stw	r2,-16(fp)
    if (pq->OSQEntries > 0) {                    /* See if any messages in the queue                   */
   1232c:	e0bffc17 	ldw	r2,-16(fp)
   12330:	1080058b 	ldhu	r2,22(r2)
   12334:	10bfffcc 	andi	r2,r2,65535
   12338:	10001926 	beq	r2,zero,123a0 <OSQAccept+0x10c>
        pmsg = *pq->OSQOut++;                    /* Yes, extract oldest message from the queue         */
   1233c:	e0bffc17 	ldw	r2,-16(fp)
   12340:	10800417 	ldw	r2,16(r2)
   12344:	11000104 	addi	r4,r2,4
   12348:	e0fffc17 	ldw	r3,-16(fp)
   1234c:	19000415 	stw	r4,16(r3)
   12350:	10800017 	ldw	r2,0(r2)
   12354:	e0bff915 	stw	r2,-28(fp)
        pq->OSQEntries--;                        /* Update the number of entries in the queue          */
   12358:	e0bffc17 	ldw	r2,-16(fp)
   1235c:	1080058b 	ldhu	r2,22(r2)
   12360:	10bfffc4 	addi	r2,r2,-1
   12364:	1007883a 	mov	r3,r2
   12368:	e0bffc17 	ldw	r2,-16(fp)
   1236c:	10c0058d 	sth	r3,22(r2)
        if (pq->OSQOut == pq->OSQEnd) {          /* Wrap OUT pointer if we are at the end of the queue */
   12370:	e0bffc17 	ldw	r2,-16(fp)
   12374:	10c00417 	ldw	r3,16(r2)
   12378:	e0bffc17 	ldw	r2,-16(fp)
   1237c:	10800217 	ldw	r2,8(r2)
   12380:	1880041e 	bne	r3,r2,12394 <OSQAccept+0x100>
            pq->OSQOut = pq->OSQStart;
   12384:	e0bffc17 	ldw	r2,-16(fp)
   12388:	10c00117 	ldw	r3,4(r2)
   1238c:	e0bffc17 	ldw	r2,-16(fp)
   12390:	10c00415 	stw	r3,16(r2)
        }
        *perr = OS_ERR_NONE;
   12394:	e0bfff17 	ldw	r2,-4(fp)
   12398:	10000005 	stb	zero,0(r2)
   1239c:	00000406 	br	123b0 <OSQAccept+0x11c>
    } else {
        *perr = OS_ERR_Q_EMPTY;
   123a0:	e0bfff17 	ldw	r2,-4(fp)
   123a4:	00c007c4 	movi	r3,31
   123a8:	10c00005 	stb	r3,0(r2)
        pmsg  = (void *)0;                       /* Queue is empty                                     */
   123ac:	e03ff915 	stw	zero,-28(fp)
   123b0:	e0bffa17 	ldw	r2,-24(fp)
   123b4:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   123b8:	e0bffb17 	ldw	r2,-20(fp)
   123bc:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (pmsg);                               /* Return message received (or NULL)                  */
   123c0:	e0bff917 	ldw	r2,-28(fp)
}
   123c4:	e037883a 	mov	sp,fp
   123c8:	df000017 	ldw	fp,0(sp)
   123cc:	dec00104 	addi	sp,sp,4
   123d0:	f800283a 	ret

000123d4 <OSQCreate>:
*              == (OS_EVENT *)0  if no event control blocks were available or an error was detected
*********************************************************************************************************
*/

OS_EVENT  *OSQCreate (void **start, INT16U size)
{
   123d4:	defff404 	addi	sp,sp,-48
   123d8:	dfc00b15 	stw	ra,44(sp)
   123dc:	df000a15 	stw	fp,40(sp)
   123e0:	df000a04 	addi	fp,sp,40
   123e4:	e13ffe15 	stw	r4,-8(fp)
   123e8:	2805883a 	mov	r2,r5
   123ec:	e0bfff0d 	sth	r2,-4(fp)
    OS_EVENT  *pevent;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   123f0:	e03ff715 	stw	zero,-36(fp)
#endif



    if (OSIntNesting > 0) {                      /* See if called from ISR ...                         */
   123f4:	d0a72e03 	ldbu	r2,-25416(gp)
   123f8:	10803fcc 	andi	r2,r2,255
   123fc:	10000226 	beq	r2,zero,12408 <OSQCreate+0x34>
        return ((OS_EVENT *)0);                  /* ... can't CREATE from an ISR                       */
   12400:	0005883a 	mov	r2,zero
   12404:	00005906 	br	1256c <OSQCreate+0x198>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   12408:	0005303a 	rdctl	r2,status
   1240c:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   12410:	e0fffd17 	ldw	r3,-12(fp)
   12414:	00bfff84 	movi	r2,-2
   12418:	1884703a 	and	r2,r3,r2
   1241c:	1001703a 	wrctl	status,r2
  
  return context;
   12420:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
   12424:	e0bff715 	stw	r2,-36(fp)
    pevent = OSEventFreeList;                    /* Get next free event control block                  */
   12428:	d0a72d17 	ldw	r2,-25420(gp)
   1242c:	e0bff615 	stw	r2,-40(fp)
    if (OSEventFreeList != (OS_EVENT *)0) {      /* See if pool of free ECB pool was empty             */
   12430:	d0a72d17 	ldw	r2,-25420(gp)
   12434:	10000326 	beq	r2,zero,12444 <OSQCreate+0x70>
        OSEventFreeList = (OS_EVENT *)OSEventFreeList->OSEventPtr;
   12438:	d0a72d17 	ldw	r2,-25420(gp)
   1243c:	10800117 	ldw	r2,4(r2)
   12440:	d0a72d15 	stw	r2,-25420(gp)
   12444:	e0bff717 	ldw	r2,-36(fp)
   12448:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1244c:	e0bff817 	ldw	r2,-32(fp)
   12450:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    if (pevent != (OS_EVENT *)0) {               /* See if we have an event control block              */
   12454:	e0bff617 	ldw	r2,-40(fp)
   12458:	10004326 	beq	r2,zero,12568 <OSQCreate+0x194>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1245c:	0005303a 	rdctl	r2,status
   12460:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   12464:	e0fff917 	ldw	r3,-28(fp)
   12468:	00bfff84 	movi	r2,-2
   1246c:	1884703a 	and	r2,r3,r2
   12470:	1001703a 	wrctl	status,r2
  
  return context;
   12474:	e0bff917 	ldw	r2,-28(fp)
        OS_ENTER_CRITICAL();
   12478:	e0bff715 	stw	r2,-36(fp)
        pq = OSQFreeList;                        /* Get a free queue control block                     */
   1247c:	d0a72b17 	ldw	r2,-25428(gp)
   12480:	e0bffb15 	stw	r2,-20(fp)
        if (pq != (OS_Q *)0) {                   /* Were we able to get a queue control block ?        */
   12484:	e0bffb17 	ldw	r2,-20(fp)
   12488:	10002d26 	beq	r2,zero,12540 <OSQCreate+0x16c>
            OSQFreeList            = OSQFreeList->OSQPtr; /* Yes, Adjust free list pointer to next free*/
   1248c:	d0a72b17 	ldw	r2,-25428(gp)
   12490:	10800017 	ldw	r2,0(r2)
   12494:	d0a72b15 	stw	r2,-25428(gp)
   12498:	e0bff717 	ldw	r2,-36(fp)
   1249c:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   124a0:	e0bffa17 	ldw	r2,-24(fp)
   124a4:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
            pq->OSQStart           = start;               /*      Initialize the queue                 */
   124a8:	e0bffb17 	ldw	r2,-20(fp)
   124ac:	e0fffe17 	ldw	r3,-8(fp)
   124b0:	10c00115 	stw	r3,4(r2)
            pq->OSQEnd             = &start[size];
   124b4:	e0bfff0b 	ldhu	r2,-4(fp)
   124b8:	1085883a 	add	r2,r2,r2
   124bc:	1085883a 	add	r2,r2,r2
   124c0:	1007883a 	mov	r3,r2
   124c4:	e0bffe17 	ldw	r2,-8(fp)
   124c8:	10c7883a 	add	r3,r2,r3
   124cc:	e0bffb17 	ldw	r2,-20(fp)
   124d0:	10c00215 	stw	r3,8(r2)
            pq->OSQIn              = start;
   124d4:	e0bffb17 	ldw	r2,-20(fp)
   124d8:	e0fffe17 	ldw	r3,-8(fp)
   124dc:	10c00315 	stw	r3,12(r2)
            pq->OSQOut             = start;
   124e0:	e0bffb17 	ldw	r2,-20(fp)
   124e4:	e0fffe17 	ldw	r3,-8(fp)
   124e8:	10c00415 	stw	r3,16(r2)
            pq->OSQSize            = size;
   124ec:	e0bffb17 	ldw	r2,-20(fp)
   124f0:	e0ffff0b 	ldhu	r3,-4(fp)
   124f4:	10c0050d 	sth	r3,20(r2)
            pq->OSQEntries         = 0;
   124f8:	e0bffb17 	ldw	r2,-20(fp)
   124fc:	1000058d 	sth	zero,22(r2)
            pevent->OSEventType    = OS_EVENT_TYPE_Q;
   12500:	e0bff617 	ldw	r2,-40(fp)
   12504:	00c00084 	movi	r3,2
   12508:	10c00005 	stb	r3,0(r2)
            pevent->OSEventCnt     = 0;
   1250c:	e0bff617 	ldw	r2,-40(fp)
   12510:	1000020d 	sth	zero,8(r2)
            pevent->OSEventPtr     = pq;
   12514:	e0bff617 	ldw	r2,-40(fp)
   12518:	e0fffb17 	ldw	r3,-20(fp)
   1251c:	10c00115 	stw	r3,4(r2)
#if OS_EVENT_NAME_SIZE > 1
            pevent->OSEventName[0] = '?';                  /* Unknown name                             */
   12520:	e0bff617 	ldw	r2,-40(fp)
   12524:	00c00fc4 	movi	r3,63
   12528:	10c00385 	stb	r3,14(r2)
            pevent->OSEventName[1] = OS_ASCII_NUL;
   1252c:	e0bff617 	ldw	r2,-40(fp)
   12530:	100003c5 	stb	zero,15(r2)
#endif
            OS_EventWaitListInit(pevent);                 /*      Initalize the wait list              */
   12534:	e13ff617 	ldw	r4,-40(fp)
   12538:	000f7200 	call	f720 <OS_EventWaitListInit>
   1253c:	00000a06 	br	12568 <OSQCreate+0x194>
        } else {
            pevent->OSEventPtr = (void *)OSEventFreeList; /* No,  Return event control block on error  */
   12540:	d0e72d17 	ldw	r3,-25420(gp)
   12544:	e0bff617 	ldw	r2,-40(fp)
   12548:	10c00115 	stw	r3,4(r2)
            OSEventFreeList    = pevent;
   1254c:	e0bff617 	ldw	r2,-40(fp)
   12550:	d0a72d15 	stw	r2,-25420(gp)
   12554:	e0bff717 	ldw	r2,-36(fp)
   12558:	e0bffc15 	stw	r2,-16(fp)
   1255c:	e0bffc17 	ldw	r2,-16(fp)
   12560:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
            pevent = (OS_EVENT *)0;
   12564:	e03ff615 	stw	zero,-40(fp)
        }
    }
    return (pevent);
   12568:	e0bff617 	ldw	r2,-40(fp)
}
   1256c:	e037883a 	mov	sp,fp
   12570:	dfc00117 	ldw	ra,4(sp)
   12574:	df000017 	ldw	fp,0(sp)
   12578:	dec00204 	addi	sp,sp,8
   1257c:	f800283a 	ret

00012580 <OSQDel>:
*********************************************************************************************************
*/

#if OS_Q_DEL_EN > 0
OS_EVENT  *OSQDel (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
   12580:	defff204 	addi	sp,sp,-56
   12584:	dfc00d15 	stw	ra,52(sp)
   12588:	df000c15 	stw	fp,48(sp)
   1258c:	df000c04 	addi	fp,sp,48
   12590:	e13ffd15 	stw	r4,-12(fp)
   12594:	2805883a 	mov	r2,r5
   12598:	e1bfff15 	stw	r6,-4(fp)
   1259c:	e0bffe05 	stb	r2,-8(fp)
    BOOLEAN    tasks_waiting;
    OS_EVENT  *pevent_return;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
   125a0:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
   125a4:	e0bfff17 	ldw	r2,-4(fp)
   125a8:	1000021e 	bne	r2,zero,125b4 <OSQDel+0x34>
        return (pevent);
   125ac:	e0bffd17 	ldw	r2,-12(fp)
   125b0:	00008e06 	br	127ec <OSQDel+0x26c>
    }
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
   125b4:	e0bffd17 	ldw	r2,-12(fp)
   125b8:	1000051e 	bne	r2,zero,125d0 <OSQDel+0x50>
        *perr = OS_ERR_PEVENT_NULL;
   125bc:	e0bfff17 	ldw	r2,-4(fp)
   125c0:	00c00104 	movi	r3,4
   125c4:	10c00005 	stb	r3,0(r2)
        return (pevent);
   125c8:	e0bffd17 	ldw	r2,-12(fp)
   125cc:	00008706 	br	127ec <OSQDel+0x26c>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {          /* Validate event block type                */
   125d0:	e0bffd17 	ldw	r2,-12(fp)
   125d4:	10800003 	ldbu	r2,0(r2)
   125d8:	10803fcc 	andi	r2,r2,255
   125dc:	108000a0 	cmpeqi	r2,r2,2
   125e0:	1000051e 	bne	r2,zero,125f8 <OSQDel+0x78>
        *perr = OS_ERR_EVENT_TYPE;
   125e4:	e0bfff17 	ldw	r2,-4(fp)
   125e8:	00c00044 	movi	r3,1
   125ec:	10c00005 	stb	r3,0(r2)
        return (pevent);
   125f0:	e0bffd17 	ldw	r2,-12(fp)
   125f4:	00007d06 	br	127ec <OSQDel+0x26c>
    }
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
   125f8:	d0a72e03 	ldbu	r2,-25416(gp)
   125fc:	10803fcc 	andi	r2,r2,255
   12600:	10000526 	beq	r2,zero,12618 <OSQDel+0x98>
        *perr = OS_ERR_DEL_ISR;                            /* ... can't DELETE from an ISR             */
   12604:	e0bfff17 	ldw	r2,-4(fp)
   12608:	00c003c4 	movi	r3,15
   1260c:	10c00005 	stb	r3,0(r2)
        return (pevent);
   12610:	e0bffd17 	ldw	r2,-12(fp)
   12614:	00007506 	br	127ec <OSQDel+0x26c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   12618:	0005303a 	rdctl	r2,status
   1261c:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   12620:	e0fffc17 	ldw	r3,-16(fp)
   12624:	00bfff84 	movi	r2,-2
   12628:	1884703a 	and	r2,r3,r2
   1262c:	1001703a 	wrctl	status,r2
  
  return context;
   12630:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
   12634:	e0bff615 	stw	r2,-40(fp)
    if (pevent->OSEventGrp != 0) {                         /* See if any tasks waiting on queue        */
   12638:	e0bffd17 	ldw	r2,-12(fp)
   1263c:	10800283 	ldbu	r2,10(r2)
   12640:	10803fcc 	andi	r2,r2,255
   12644:	10000326 	beq	r2,zero,12654 <OSQDel+0xd4>
        tasks_waiting = OS_TRUE;                           /* Yes                                      */
   12648:	00800044 	movi	r2,1
   1264c:	e0bff405 	stb	r2,-48(fp)
   12650:	00000106 	br	12658 <OSQDel+0xd8>
    } else {
        tasks_waiting = OS_FALSE;                          /* No                                       */
   12654:	e03ff405 	stb	zero,-48(fp)
    }
    switch (opt) {
   12658:	e0bffe03 	ldbu	r2,-8(fp)
   1265c:	10000326 	beq	r2,zero,1266c <OSQDel+0xec>
   12660:	10800060 	cmpeqi	r2,r2,1
   12664:	1000301e 	bne	r2,zero,12728 <OSQDel+0x1a8>
   12668:	00005506 	br	127c0 <OSQDel+0x240>
        case OS_DEL_NO_PEND:                               /* Delete queue only if no task waiting     */
             if (tasks_waiting == OS_FALSE) {
   1266c:	e0bff403 	ldbu	r2,-48(fp)
   12670:	10001e1e 	bne	r2,zero,126ec <OSQDel+0x16c>
#if OS_EVENT_NAME_SIZE > 1
                 pevent->OSEventName[0] = '?';             /* Unknown name                             */
   12674:	e0bffd17 	ldw	r2,-12(fp)
   12678:	00c00fc4 	movi	r3,63
   1267c:	10c00385 	stb	r3,14(r2)
                 pevent->OSEventName[1] = OS_ASCII_NUL;
   12680:	e0bffd17 	ldw	r2,-12(fp)
   12684:	100003c5 	stb	zero,15(r2)
#endif
                 pq                     = (OS_Q *)pevent->OSEventPtr;  /* Return OS_Q to free list     */
   12688:	e0bffd17 	ldw	r2,-12(fp)
   1268c:	10800117 	ldw	r2,4(r2)
   12690:	e0bff815 	stw	r2,-32(fp)
                 pq->OSQPtr             = OSQFreeList;
   12694:	d0e72b17 	ldw	r3,-25428(gp)
   12698:	e0bff817 	ldw	r2,-32(fp)
   1269c:	10c00015 	stw	r3,0(r2)
                 OSQFreeList            = pq;
   126a0:	e0bff817 	ldw	r2,-32(fp)
   126a4:	d0a72b15 	stw	r2,-25428(gp)
                 pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
   126a8:	e0bffd17 	ldw	r2,-12(fp)
   126ac:	10000005 	stb	zero,0(r2)
                 pevent->OSEventPtr     = OSEventFreeList; /* Return Event Control Block to free list  */
   126b0:	d0e72d17 	ldw	r3,-25420(gp)
   126b4:	e0bffd17 	ldw	r2,-12(fp)
   126b8:	10c00115 	stw	r3,4(r2)
                 pevent->OSEventCnt     = 0;
   126bc:	e0bffd17 	ldw	r2,-12(fp)
   126c0:	1000020d 	sth	zero,8(r2)
                 OSEventFreeList        = pevent;          /* Get next free event control block        */
   126c4:	e0bffd17 	ldw	r2,-12(fp)
   126c8:	d0a72d15 	stw	r2,-25420(gp)
   126cc:	e0bff617 	ldw	r2,-40(fp)
   126d0:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   126d4:	e0bff717 	ldw	r2,-36(fp)
   126d8:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_NONE;
   126dc:	e0bfff17 	ldw	r2,-4(fp)
   126e0:	10000005 	stb	zero,0(r2)
                 pevent_return          = (OS_EVENT *)0;   /* Queue has been deleted                   */
   126e4:	e03ff515 	stw	zero,-44(fp)
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_TASK_WAITING;
                 pevent_return          = pevent;
             }
             break;
   126e8:	00003f06 	br	127e8 <OSQDel+0x268>
   126ec:	e0bff617 	ldw	r2,-40(fp)
   126f0:	e0bff915 	stw	r2,-28(fp)
   126f4:	e0bff917 	ldw	r2,-28(fp)
   126f8:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_NONE;
                 pevent_return          = (OS_EVENT *)0;   /* Queue has been deleted                   */
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_TASK_WAITING;
   126fc:	e0bfff17 	ldw	r2,-4(fp)
   12700:	00c01244 	movi	r3,73
   12704:	10c00005 	stb	r3,0(r2)
                 pevent_return          = pevent;
   12708:	e0bffd17 	ldw	r2,-12(fp)
   1270c:	e0bff515 	stw	r2,-44(fp)
             }
             break;
   12710:	00003506 	br	127e8 <OSQDel+0x268>

        case OS_DEL_ALWAYS:                                /* Always delete the queue                  */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for queue        */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_OK);
   12714:	000f883a 	mov	r7,zero
   12718:	01800104 	movi	r6,4
   1271c:	000b883a 	mov	r5,zero
   12720:	e13ffd17 	ldw	r4,-12(fp)
   12724:	000f1700 	call	f170 <OS_EventTaskRdy>
                 pevent_return          = pevent;
             }
             break;

        case OS_DEL_ALWAYS:                                /* Always delete the queue                  */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for queue        */
   12728:	e0bffd17 	ldw	r2,-12(fp)
   1272c:	10800283 	ldbu	r2,10(r2)
   12730:	10803fcc 	andi	r2,r2,255
   12734:	103ff71e 	bne	r2,zero,12714 <__alt_data_end+0xfffe2714>
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_OK);
             }
#if OS_EVENT_NAME_SIZE > 1
             pevent->OSEventName[0] = '?';                 /* Unknown name                             */
   12738:	e0bffd17 	ldw	r2,-12(fp)
   1273c:	00c00fc4 	movi	r3,63
   12740:	10c00385 	stb	r3,14(r2)
             pevent->OSEventName[1] = OS_ASCII_NUL;
   12744:	e0bffd17 	ldw	r2,-12(fp)
   12748:	100003c5 	stb	zero,15(r2)
#endif
             pq                     = (OS_Q *)pevent->OSEventPtr;   /* Return OS_Q to free list        */
   1274c:	e0bffd17 	ldw	r2,-12(fp)
   12750:	10800117 	ldw	r2,4(r2)
   12754:	e0bff815 	stw	r2,-32(fp)
             pq->OSQPtr             = OSQFreeList;
   12758:	d0e72b17 	ldw	r3,-25428(gp)
   1275c:	e0bff817 	ldw	r2,-32(fp)
   12760:	10c00015 	stw	r3,0(r2)
             OSQFreeList            = pq;
   12764:	e0bff817 	ldw	r2,-32(fp)
   12768:	d0a72b15 	stw	r2,-25428(gp)
             pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
   1276c:	e0bffd17 	ldw	r2,-12(fp)
   12770:	10000005 	stb	zero,0(r2)
             pevent->OSEventPtr     = OSEventFreeList;     /* Return Event Control Block to free list  */
   12774:	d0e72d17 	ldw	r3,-25420(gp)
   12778:	e0bffd17 	ldw	r2,-12(fp)
   1277c:	10c00115 	stw	r3,4(r2)
             pevent->OSEventCnt     = 0;
   12780:	e0bffd17 	ldw	r2,-12(fp)
   12784:	1000020d 	sth	zero,8(r2)
             OSEventFreeList        = pevent;              /* Get next free event control block        */
   12788:	e0bffd17 	ldw	r2,-12(fp)
   1278c:	d0a72d15 	stw	r2,-25420(gp)
   12790:	e0bff617 	ldw	r2,-40(fp)
   12794:	e0bffa15 	stw	r2,-24(fp)
   12798:	e0bffa17 	ldw	r2,-24(fp)
   1279c:	1001703a 	wrctl	status,r2
             OS_EXIT_CRITICAL();
             if (tasks_waiting == OS_TRUE) {               /* Reschedule only if task(s) were waiting  */
   127a0:	e0bff403 	ldbu	r2,-48(fp)
   127a4:	10800058 	cmpnei	r2,r2,1
   127a8:	1000011e 	bne	r2,zero,127b0 <OSQDel+0x230>
                 OS_Sched();                               /* Find highest priority task ready to run  */
   127ac:	000fbbc0 	call	fbbc <OS_Sched>
             }
             *perr                  = OS_ERR_NONE;
   127b0:	e0bfff17 	ldw	r2,-4(fp)
   127b4:	10000005 	stb	zero,0(r2)
             pevent_return          = (OS_EVENT *)0;       /* Queue has been deleted                   */
   127b8:	e03ff515 	stw	zero,-44(fp)
             break;
   127bc:	00000a06 	br	127e8 <OSQDel+0x268>
   127c0:	e0bff617 	ldw	r2,-40(fp)
   127c4:	e0bffb15 	stw	r2,-20(fp)
   127c8:	e0bffb17 	ldw	r2,-20(fp)
   127cc:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();
             *perr                  = OS_ERR_INVALID_OPT;
   127d0:	e0bfff17 	ldw	r2,-4(fp)
   127d4:	00c001c4 	movi	r3,7
   127d8:	10c00005 	stb	r3,0(r2)
             pevent_return          = pevent;
   127dc:	e0bffd17 	ldw	r2,-12(fp)
   127e0:	e0bff515 	stw	r2,-44(fp)
             break;
   127e4:	0001883a 	nop
    }
    return (pevent_return);
   127e8:	e0bff517 	ldw	r2,-44(fp)
}
   127ec:	e037883a 	mov	sp,fp
   127f0:	dfc00117 	ldw	ra,4(sp)
   127f4:	df000017 	ldw	fp,0(sp)
   127f8:	dec00204 	addi	sp,sp,8
   127fc:	f800283a 	ret

00012800 <OSQFlush>:
*********************************************************************************************************
*/

#if OS_Q_FLUSH_EN > 0
INT8U  OSQFlush (OS_EVENT *pevent)
{
   12800:	defffa04 	addi	sp,sp,-24
   12804:	df000515 	stw	fp,20(sp)
   12808:	df000504 	addi	fp,sp,20
   1280c:	e13fff15 	stw	r4,-4(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   12810:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
   12814:	e0bfff17 	ldw	r2,-4(fp)
   12818:	1000021e 	bne	r2,zero,12824 <OSQFlush+0x24>
        return (OS_ERR_PEVENT_NULL);
   1281c:	00800104 	movi	r2,4
   12820:	00002106 	br	128a8 <OSQFlush+0xa8>
    }
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {     /* Validate event block type                     */
   12824:	e0bfff17 	ldw	r2,-4(fp)
   12828:	10800003 	ldbu	r2,0(r2)
   1282c:	10803fcc 	andi	r2,r2,255
   12830:	108000a0 	cmpeqi	r2,r2,2
   12834:	1000021e 	bne	r2,zero,12840 <OSQFlush+0x40>
        return (OS_ERR_EVENT_TYPE);
   12838:	00800044 	movi	r2,1
   1283c:	00001a06 	br	128a8 <OSQFlush+0xa8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   12840:	0005303a 	rdctl	r2,status
   12844:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   12848:	e0fffd17 	ldw	r3,-12(fp)
   1284c:	00bfff84 	movi	r2,-2
   12850:	1884703a 	and	r2,r3,r2
   12854:	1001703a 	wrctl	status,r2
  
  return context;
   12858:	e0bffd17 	ldw	r2,-12(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   1285c:	e0bffb15 	stw	r2,-20(fp)
    pq             = (OS_Q *)pevent->OSEventPtr;      /* Point to queue storage structure              */
   12860:	e0bfff17 	ldw	r2,-4(fp)
   12864:	10800117 	ldw	r2,4(r2)
   12868:	e0bffc15 	stw	r2,-16(fp)
    pq->OSQIn      = pq->OSQStart;
   1286c:	e0bffc17 	ldw	r2,-16(fp)
   12870:	10c00117 	ldw	r3,4(r2)
   12874:	e0bffc17 	ldw	r2,-16(fp)
   12878:	10c00315 	stw	r3,12(r2)
    pq->OSQOut     = pq->OSQStart;
   1287c:	e0bffc17 	ldw	r2,-16(fp)
   12880:	10c00117 	ldw	r3,4(r2)
   12884:	e0bffc17 	ldw	r2,-16(fp)
   12888:	10c00415 	stw	r3,16(r2)
    pq->OSQEntries = 0;
   1288c:	e0bffc17 	ldw	r2,-16(fp)
   12890:	1000058d 	sth	zero,22(r2)
   12894:	e0bffb17 	ldw	r2,-20(fp)
   12898:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1289c:	e0bffe17 	ldw	r2,-8(fp)
   128a0:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
   128a4:	0005883a 	mov	r2,zero
}
   128a8:	e037883a 	mov	sp,fp
   128ac:	df000017 	ldw	fp,0(sp)
   128b0:	dec00104 	addi	sp,sp,4
   128b4:	f800283a 	ret

000128b8 <OSQPend>:
* Note(s)    : As of V2.60, this function allows you to receive NULL pointer messages.
*********************************************************************************************************
*/

void  *OSQPend (OS_EVENT *pevent, INT16U timeout, INT8U *perr)
{
   128b8:	defff304 	addi	sp,sp,-52
   128bc:	dfc00c15 	stw	ra,48(sp)
   128c0:	df000b15 	stw	fp,44(sp)
   128c4:	df000b04 	addi	fp,sp,44
   128c8:	e13ffd15 	stw	r4,-12(fp)
   128cc:	2805883a 	mov	r2,r5
   128d0:	e1bfff15 	stw	r6,-4(fp)
   128d4:	e0bffe0d 	sth	r2,-8(fp)
    void      *pmsg;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   128d8:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
   128dc:	e0bfff17 	ldw	r2,-4(fp)
   128e0:	1000021e 	bne	r2,zero,128ec <OSQPend+0x34>
        return ((void *)0);
   128e4:	0005883a 	mov	r2,zero
   128e8:	00009106 	br	12b30 <OSQPend+0x278>
    }
    if (pevent == (OS_EVENT *)0) {               /* Validate 'pevent'                                  */
   128ec:	e0bffd17 	ldw	r2,-12(fp)
   128f0:	1000051e 	bne	r2,zero,12908 <OSQPend+0x50>
        *perr = OS_ERR_PEVENT_NULL;
   128f4:	e0bfff17 	ldw	r2,-4(fp)
   128f8:	00c00104 	movi	r3,4
   128fc:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
   12900:	0005883a 	mov	r2,zero
   12904:	00008a06 	br	12b30 <OSQPend+0x278>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {/* Validate event block type                          */
   12908:	e0bffd17 	ldw	r2,-12(fp)
   1290c:	10800003 	ldbu	r2,0(r2)
   12910:	10803fcc 	andi	r2,r2,255
   12914:	108000a0 	cmpeqi	r2,r2,2
   12918:	1000051e 	bne	r2,zero,12930 <OSQPend+0x78>
        *perr = OS_ERR_EVENT_TYPE;
   1291c:	e0bfff17 	ldw	r2,-4(fp)
   12920:	00c00044 	movi	r3,1
   12924:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
   12928:	0005883a 	mov	r2,zero
   1292c:	00008006 	br	12b30 <OSQPend+0x278>
    }
    if (OSIntNesting > 0) {                      /* See if called from ISR ...                         */
   12930:	d0a72e03 	ldbu	r2,-25416(gp)
   12934:	10803fcc 	andi	r2,r2,255
   12938:	10000526 	beq	r2,zero,12950 <OSQPend+0x98>
        *perr = OS_ERR_PEND_ISR;                 /* ... can't PEND from an ISR                         */
   1293c:	e0bfff17 	ldw	r2,-4(fp)
   12940:	00c00084 	movi	r3,2
   12944:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
   12948:	0005883a 	mov	r2,zero
   1294c:	00007806 	br	12b30 <OSQPend+0x278>
    }
    if (OSLockNesting > 0) {                     /* See if called with scheduler locked ...            */
   12950:	d0a72003 	ldbu	r2,-25472(gp)
   12954:	10803fcc 	andi	r2,r2,255
   12958:	10000526 	beq	r2,zero,12970 <OSQPend+0xb8>
        *perr = OS_ERR_PEND_LOCKED;              /* ... can't PEND when locked                         */
   1295c:	e0bfff17 	ldw	r2,-4(fp)
   12960:	00c00344 	movi	r3,13
   12964:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
   12968:	0005883a 	mov	r2,zero
   1296c:	00007006 	br	12b30 <OSQPend+0x278>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   12970:	0005303a 	rdctl	r2,status
   12974:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   12978:	e0fffc17 	ldw	r3,-16(fp)
   1297c:	00bfff84 	movi	r2,-2
   12980:	1884703a 	and	r2,r3,r2
   12984:	1001703a 	wrctl	status,r2
  
  return context;
   12988:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
   1298c:	e0bff615 	stw	r2,-40(fp)
    pq = (OS_Q *)pevent->OSEventPtr;             /* Point at queue control block                       */
   12990:	e0bffd17 	ldw	r2,-12(fp)
   12994:	10800117 	ldw	r2,4(r2)
   12998:	e0bff815 	stw	r2,-32(fp)
    if (pq->OSQEntries > 0) {                    /* See if any messages in the queue                   */
   1299c:	e0bff817 	ldw	r2,-32(fp)
   129a0:	1080058b 	ldhu	r2,22(r2)
   129a4:	10bfffcc 	andi	r2,r2,65535
   129a8:	10001e26 	beq	r2,zero,12a24 <OSQPend+0x16c>
        pmsg = *pq->OSQOut++;                    /* Yes, extract oldest message from the queue         */
   129ac:	e0bff817 	ldw	r2,-32(fp)
   129b0:	10800417 	ldw	r2,16(r2)
   129b4:	11000104 	addi	r4,r2,4
   129b8:	e0fff817 	ldw	r3,-32(fp)
   129bc:	19000415 	stw	r4,16(r3)
   129c0:	10800017 	ldw	r2,0(r2)
   129c4:	e0bff515 	stw	r2,-44(fp)
        pq->OSQEntries--;                        /* Update the number of entries in the queue          */
   129c8:	e0bff817 	ldw	r2,-32(fp)
   129cc:	1080058b 	ldhu	r2,22(r2)
   129d0:	10bfffc4 	addi	r2,r2,-1
   129d4:	1007883a 	mov	r3,r2
   129d8:	e0bff817 	ldw	r2,-32(fp)
   129dc:	10c0058d 	sth	r3,22(r2)
        if (pq->OSQOut == pq->OSQEnd) {          /* Wrap OUT pointer if we are at the end of the queue */
   129e0:	e0bff817 	ldw	r2,-32(fp)
   129e4:	10c00417 	ldw	r3,16(r2)
   129e8:	e0bff817 	ldw	r2,-32(fp)
   129ec:	10800217 	ldw	r2,8(r2)
   129f0:	1880041e 	bne	r3,r2,12a04 <OSQPend+0x14c>
            pq->OSQOut = pq->OSQStart;
   129f4:	e0bff817 	ldw	r2,-32(fp)
   129f8:	10c00117 	ldw	r3,4(r2)
   129fc:	e0bff817 	ldw	r2,-32(fp)
   12a00:	10c00415 	stw	r3,16(r2)
   12a04:	e0bff617 	ldw	r2,-40(fp)
   12a08:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   12a0c:	e0bff717 	ldw	r2,-36(fp)
   12a10:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_NONE;
   12a14:	e0bfff17 	ldw	r2,-4(fp)
   12a18:	10000005 	stb	zero,0(r2)
        return (pmsg);                           /* Return message received                            */
   12a1c:	e0bff517 	ldw	r2,-44(fp)
   12a20:	00004306 	br	12b30 <OSQPend+0x278>
    }
    OSTCBCur->OSTCBStat     |= OS_STAT_Q;        /* Task will have to pend for a message to be posted  */
   12a24:	d0a72f17 	ldw	r2,-25412(gp)
   12a28:	d0e72f17 	ldw	r3,-25412(gp)
   12a2c:	18c00c03 	ldbu	r3,48(r3)
   12a30:	18c00114 	ori	r3,r3,4
   12a34:	10c00c05 	stb	r3,48(r2)
    OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
   12a38:	d0a72f17 	ldw	r2,-25412(gp)
   12a3c:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly       = timeout;          /* Load timeout into TCB                              */
   12a40:	d0a72f17 	ldw	r2,-25412(gp)
   12a44:	e0fffe0b 	ldhu	r3,-8(fp)
   12a48:	10c00b8d 	sth	r3,46(r2)
    OS_EventTaskWait(pevent);                    /* Suspend task until event or timeout occurs         */
   12a4c:	e13ffd17 	ldw	r4,-12(fp)
   12a50:	000f3080 	call	f308 <OS_EventTaskWait>
   12a54:	e0bff617 	ldw	r2,-40(fp)
   12a58:	e0bffb15 	stw	r2,-20(fp)
   12a5c:	e0bffb17 	ldw	r2,-20(fp)
   12a60:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OS_Sched();                                  /* Find next highest priority task ready to run       */
   12a64:	000fbbc0 	call	fbbc <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   12a68:	0005303a 	rdctl	r2,status
   12a6c:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   12a70:	e0fff917 	ldw	r3,-28(fp)
   12a74:	00bfff84 	movi	r2,-2
   12a78:	1884703a 	and	r2,r3,r2
   12a7c:	1001703a 	wrctl	status,r2
  
  return context;
   12a80:	e0bff917 	ldw	r2,-28(fp)
    OS_ENTER_CRITICAL();
   12a84:	e0bff615 	stw	r2,-40(fp)
    switch (OSTCBCur->OSTCBStatPend) {                /* See if we timed-out or aborted                */
   12a88:	d0a72f17 	ldw	r2,-25412(gp)
   12a8c:	10800c43 	ldbu	r2,49(r2)
   12a90:	10803fcc 	andi	r2,r2,255
   12a94:	10000326 	beq	r2,zero,12aa4 <OSQPend+0x1ec>
   12a98:	108000a0 	cmpeqi	r2,r2,2
   12a9c:	1000071e 	bne	r2,zero,12abc <OSQPend+0x204>
   12aa0:	00000b06 	br	12ad0 <OSQPend+0x218>
        case OS_STAT_PEND_OK:                         /* Extract message from TCB (Put there by QPost) */
             pmsg =  OSTCBCur->OSTCBMsg;
   12aa4:	d0a72f17 	ldw	r2,-25412(gp)
   12aa8:	10800917 	ldw	r2,36(r2)
   12aac:	e0bff515 	stw	r2,-44(fp)
            *perr =  OS_ERR_NONE;
   12ab0:	e0bfff17 	ldw	r2,-4(fp)
   12ab4:	10000005 	stb	zero,0(r2)
             break;
   12ab8:	00000e06 	br	12af4 <OSQPend+0x23c>

        case OS_STAT_PEND_ABORT:
             pmsg = (void *)0;
   12abc:	e03ff515 	stw	zero,-44(fp)
            *perr =  OS_ERR_PEND_ABORT;               /* Indicate that we aborted                      */
   12ac0:	e0bfff17 	ldw	r2,-4(fp)
   12ac4:	00c00384 	movi	r3,14
   12ac8:	10c00005 	stb	r3,0(r2)
             break;
   12acc:	00000906 	br	12af4 <OSQPend+0x23c>

        case OS_STAT_PEND_TO:
        default:
             OS_EventTaskRemove(OSTCBCur, pevent);
   12ad0:	d0a72f17 	ldw	r2,-25412(gp)
   12ad4:	e17ffd17 	ldw	r5,-12(fp)
   12ad8:	1009883a 	mov	r4,r2
   12adc:	000f5680 	call	f568 <OS_EventTaskRemove>
             pmsg = (void *)0;
   12ae0:	e03ff515 	stw	zero,-44(fp)
            *perr =  OS_ERR_TIMEOUT;                  /* Indicate that we didn't get event within TO   */
   12ae4:	e0bfff17 	ldw	r2,-4(fp)
   12ae8:	00c00284 	movi	r3,10
   12aec:	10c00005 	stb	r3,0(r2)
             break;
   12af0:	0001883a 	nop
    }
    OSTCBCur->OSTCBStat          =  OS_STAT_RDY;      /* Set   task  status to ready                   */
   12af4:	d0a72f17 	ldw	r2,-25412(gp)
   12af8:	10000c05 	stb	zero,48(r2)
    OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;  /* Clear pend  status                            */
   12afc:	d0a72f17 	ldw	r2,-25412(gp)
   12b00:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;    /* Clear event pointers                          */
   12b04:	d0a72f17 	ldw	r2,-25412(gp)
   12b08:	10000715 	stw	zero,28(r2)
#if (OS_EVENT_MULTI_EN > 0)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
   12b0c:	d0a72f17 	ldw	r2,-25412(gp)
   12b10:	10000815 	stw	zero,32(r2)
#endif
    OSTCBCur->OSTCBMsg           = (void      *)0;    /* Clear  received message                       */
   12b14:	d0a72f17 	ldw	r2,-25412(gp)
   12b18:	10000915 	stw	zero,36(r2)
   12b1c:	e0bff617 	ldw	r2,-40(fp)
   12b20:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   12b24:	e0bffa17 	ldw	r2,-24(fp)
   12b28:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (pmsg);                                    /* Return received message                       */
   12b2c:	e0bff517 	ldw	r2,-44(fp)
}
   12b30:	e037883a 	mov	sp,fp
   12b34:	dfc00117 	ldw	ra,4(sp)
   12b38:	df000017 	ldw	fp,0(sp)
   12b3c:	dec00204 	addi	sp,sp,8
   12b40:	f800283a 	ret

00012b44 <OSQPendAbort>:
*********************************************************************************************************
*/

#if OS_Q_PEND_ABORT_EN > 0
INT8U  OSQPendAbort (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
   12b44:	defff604 	addi	sp,sp,-40
   12b48:	dfc00915 	stw	ra,36(sp)
   12b4c:	df000815 	stw	fp,32(sp)
   12b50:	df000804 	addi	fp,sp,32
   12b54:	e13ffd15 	stw	r4,-12(fp)
   12b58:	2805883a 	mov	r2,r5
   12b5c:	e1bfff15 	stw	r6,-4(fp)
   12b60:	e0bffe05 	stb	r2,-8(fp)
    INT8U      nbr_tasks;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
   12b64:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
   12b68:	e0bfff17 	ldw	r2,-4(fp)
   12b6c:	1000021e 	bne	r2,zero,12b78 <OSQPendAbort+0x34>
        return (0);
   12b70:	0005883a 	mov	r2,zero
   12b74:	00004906 	br	12c9c <OSQPendAbort+0x158>
    }
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
   12b78:	e0bffd17 	ldw	r2,-12(fp)
   12b7c:	1000051e 	bne	r2,zero,12b94 <OSQPendAbort+0x50>
        *perr = OS_ERR_PEVENT_NULL;
   12b80:	e0bfff17 	ldw	r2,-4(fp)
   12b84:	00c00104 	movi	r3,4
   12b88:	10c00005 	stb	r3,0(r2)
        return (0);
   12b8c:	0005883a 	mov	r2,zero
   12b90:	00004206 	br	12c9c <OSQPendAbort+0x158>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {          /* Validate event block type                */
   12b94:	e0bffd17 	ldw	r2,-12(fp)
   12b98:	10800003 	ldbu	r2,0(r2)
   12b9c:	10803fcc 	andi	r2,r2,255
   12ba0:	108000a0 	cmpeqi	r2,r2,2
   12ba4:	1000051e 	bne	r2,zero,12bbc <OSQPendAbort+0x78>
        *perr = OS_ERR_EVENT_TYPE;
   12ba8:	e0bfff17 	ldw	r2,-4(fp)
   12bac:	00c00044 	movi	r3,1
   12bb0:	10c00005 	stb	r3,0(r2)
        return (0);
   12bb4:	0005883a 	mov	r2,zero
   12bb8:	00003806 	br	12c9c <OSQPendAbort+0x158>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   12bbc:	0005303a 	rdctl	r2,status
   12bc0:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   12bc4:	e0fffc17 	ldw	r3,-16(fp)
   12bc8:	00bfff84 	movi	r2,-2
   12bcc:	1884703a 	and	r2,r3,r2
   12bd0:	1001703a 	wrctl	status,r2
  
  return context;
   12bd4:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
   12bd8:	e0bff915 	stw	r2,-28(fp)
    if (pevent->OSEventGrp != 0) {                         /* See if any task waiting on queue?        */
   12bdc:	e0bffd17 	ldw	r2,-12(fp)
   12be0:	10800283 	ldbu	r2,10(r2)
   12be4:	10803fcc 	andi	r2,r2,255
   12be8:	10002526 	beq	r2,zero,12c80 <OSQPendAbort+0x13c>
        nbr_tasks = 0;
   12bec:	e03ff805 	stb	zero,-32(fp)
        switch (opt) {
   12bf0:	e0bffe03 	ldbu	r2,-8(fp)
   12bf4:	10800060 	cmpeqi	r2,r2,1
   12bf8:	10000e26 	beq	r2,zero,12c34 <OSQPendAbort+0xf0>
            case OS_PEND_OPT_BROADCAST:                    /* Do we need to abort ALL waiting tasks?   */
                 while (pevent->OSEventGrp != 0) {         /* Yes, ready ALL tasks waiting on queue    */
   12bfc:	00000806 	br	12c20 <OSQPendAbort+0xdc>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_ABORT);
   12c00:	01c00084 	movi	r7,2
   12c04:	01800104 	movi	r6,4
   12c08:	000b883a 	mov	r5,zero
   12c0c:	e13ffd17 	ldw	r4,-12(fp)
   12c10:	000f1700 	call	f170 <OS_EventTaskRdy>
                     nbr_tasks++;
   12c14:	e0bff803 	ldbu	r2,-32(fp)
   12c18:	10800044 	addi	r2,r2,1
   12c1c:	e0bff805 	stb	r2,-32(fp)
    OS_ENTER_CRITICAL();
    if (pevent->OSEventGrp != 0) {                         /* See if any task waiting on queue?        */
        nbr_tasks = 0;
        switch (opt) {
            case OS_PEND_OPT_BROADCAST:                    /* Do we need to abort ALL waiting tasks?   */
                 while (pevent->OSEventGrp != 0) {         /* Yes, ready ALL tasks waiting on queue    */
   12c20:	e0bffd17 	ldw	r2,-12(fp)
   12c24:	10800283 	ldbu	r2,10(r2)
   12c28:	10803fcc 	andi	r2,r2,255
   12c2c:	103ff41e 	bne	r2,zero,12c00 <__alt_data_end+0xfffe2c00>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_ABORT);
                     nbr_tasks++;
                 }
                 break;
   12c30:	00000906 	br	12c58 <OSQPendAbort+0x114>
               
            case OS_PEND_OPT_NONE:
            default:                                       /* No,  ready HPT       waiting on queue    */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_ABORT);
   12c34:	01c00084 	movi	r7,2
   12c38:	01800104 	movi	r6,4
   12c3c:	000b883a 	mov	r5,zero
   12c40:	e13ffd17 	ldw	r4,-12(fp)
   12c44:	000f1700 	call	f170 <OS_EventTaskRdy>
                 nbr_tasks++;
   12c48:	e0bff803 	ldbu	r2,-32(fp)
   12c4c:	10800044 	addi	r2,r2,1
   12c50:	e0bff805 	stb	r2,-32(fp)
                 break;
   12c54:	0001883a 	nop
   12c58:	e0bff917 	ldw	r2,-28(fp)
   12c5c:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   12c60:	e0bffa17 	ldw	r2,-24(fp)
   12c64:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        OS_Sched();                                        /* Find HPT ready to run                    */
   12c68:	000fbbc0 	call	fbbc <OS_Sched>
        *perr = OS_ERR_PEND_ABORT;
   12c6c:	e0bfff17 	ldw	r2,-4(fp)
   12c70:	00c00384 	movi	r3,14
   12c74:	10c00005 	stb	r3,0(r2)
        return (nbr_tasks);
   12c78:	e0bff803 	ldbu	r2,-32(fp)
   12c7c:	00000706 	br	12c9c <OSQPendAbort+0x158>
   12c80:	e0bff917 	ldw	r2,-28(fp)
   12c84:	e0bffb15 	stw	r2,-20(fp)
   12c88:	e0bffb17 	ldw	r2,-20(fp)
   12c8c:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   12c90:	e0bfff17 	ldw	r2,-4(fp)
   12c94:	10000005 	stb	zero,0(r2)
    return (0);                                            /* No tasks waiting on queue                */
   12c98:	0005883a 	mov	r2,zero
}
   12c9c:	e037883a 	mov	sp,fp
   12ca0:	dfc00117 	ldw	ra,4(sp)
   12ca4:	df000017 	ldw	fp,0(sp)
   12ca8:	dec00204 	addi	sp,sp,8
   12cac:	f800283a 	ret

00012cb0 <OSQPost>:
*********************************************************************************************************
*/

#if OS_Q_POST_EN > 0
INT8U  OSQPost (OS_EVENT *pevent, void *pmsg)
{
   12cb0:	defff604 	addi	sp,sp,-40
   12cb4:	dfc00915 	stw	ra,36(sp)
   12cb8:	df000815 	stw	fp,32(sp)
   12cbc:	df000804 	addi	fp,sp,32
   12cc0:	e13ffe15 	stw	r4,-8(fp)
   12cc4:	e17fff15 	stw	r5,-4(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
   12cc8:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                     /* Validate 'pevent'                            */
   12ccc:	e0bffe17 	ldw	r2,-8(fp)
   12cd0:	1000021e 	bne	r2,zero,12cdc <OSQPost+0x2c>
        return (OS_ERR_PEVENT_NULL);
   12cd4:	00800104 	movi	r2,4
   12cd8:	00004a06 	br	12e04 <OSQPost+0x154>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {      /* Validate event block type                    */
   12cdc:	e0bffe17 	ldw	r2,-8(fp)
   12ce0:	10800003 	ldbu	r2,0(r2)
   12ce4:	10803fcc 	andi	r2,r2,255
   12ce8:	108000a0 	cmpeqi	r2,r2,2
   12cec:	1000021e 	bne	r2,zero,12cf8 <OSQPost+0x48>
        return (OS_ERR_EVENT_TYPE);
   12cf0:	00800044 	movi	r2,1
   12cf4:	00004306 	br	12e04 <OSQPost+0x154>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   12cf8:	0005303a 	rdctl	r2,status
   12cfc:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   12d00:	e0fffd17 	ldw	r3,-12(fp)
   12d04:	00bfff84 	movi	r2,-2
   12d08:	1884703a 	and	r2,r3,r2
   12d0c:	1001703a 	wrctl	status,r2
  
  return context;
   12d10:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
   12d14:	e0bff815 	stw	r2,-32(fp)
    if (pevent->OSEventGrp != 0) {                     /* See if any task pending on queue             */
   12d18:	e0bffe17 	ldw	r2,-8(fp)
   12d1c:	10800283 	ldbu	r2,10(r2)
   12d20:	10803fcc 	andi	r2,r2,255
   12d24:	10000c26 	beq	r2,zero,12d58 <OSQPost+0xa8>
                                                       /* Ready highest priority task waiting on event */
        (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
   12d28:	000f883a 	mov	r7,zero
   12d2c:	01800104 	movi	r6,4
   12d30:	e17fff17 	ldw	r5,-4(fp)
   12d34:	e13ffe17 	ldw	r4,-8(fp)
   12d38:	000f1700 	call	f170 <OS_EventTaskRdy>
   12d3c:	e0bff817 	ldw	r2,-32(fp)
   12d40:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   12d44:	e0bff917 	ldw	r2,-28(fp)
   12d48:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                    /* Find highest priority task ready to run      */
   12d4c:	000fbbc0 	call	fbbc <OS_Sched>
        return (OS_ERR_NONE);
   12d50:	0005883a 	mov	r2,zero
   12d54:	00002b06 	br	12e04 <OSQPost+0x154>
    }
    pq = (OS_Q *)pevent->OSEventPtr;                   /* Point to queue control block                 */
   12d58:	e0bffe17 	ldw	r2,-8(fp)
   12d5c:	10800117 	ldw	r2,4(r2)
   12d60:	e0bffb15 	stw	r2,-20(fp)
    if (pq->OSQEntries >= pq->OSQSize) {               /* Make sure queue is not full                  */
   12d64:	e0bffb17 	ldw	r2,-20(fp)
   12d68:	10c0058b 	ldhu	r3,22(r2)
   12d6c:	e0bffb17 	ldw	r2,-20(fp)
   12d70:	1080050b 	ldhu	r2,20(r2)
   12d74:	18ffffcc 	andi	r3,r3,65535
   12d78:	10bfffcc 	andi	r2,r2,65535
   12d7c:	18800636 	bltu	r3,r2,12d98 <OSQPost+0xe8>
   12d80:	e0bff817 	ldw	r2,-32(fp)
   12d84:	e0bffa15 	stw	r2,-24(fp)
   12d88:	e0bffa17 	ldw	r2,-24(fp)
   12d8c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_Q_FULL);
   12d90:	00800784 	movi	r2,30
   12d94:	00001b06 	br	12e04 <OSQPost+0x154>
    }
    *pq->OSQIn++ = pmsg;                               /* Insert message into queue                    */
   12d98:	e0bffb17 	ldw	r2,-20(fp)
   12d9c:	10800317 	ldw	r2,12(r2)
   12da0:	11000104 	addi	r4,r2,4
   12da4:	e0fffb17 	ldw	r3,-20(fp)
   12da8:	19000315 	stw	r4,12(r3)
   12dac:	e0ffff17 	ldw	r3,-4(fp)
   12db0:	10c00015 	stw	r3,0(r2)
    pq->OSQEntries++;                                  /* Update the nbr of entries in the queue       */
   12db4:	e0bffb17 	ldw	r2,-20(fp)
   12db8:	1080058b 	ldhu	r2,22(r2)
   12dbc:	10800044 	addi	r2,r2,1
   12dc0:	1007883a 	mov	r3,r2
   12dc4:	e0bffb17 	ldw	r2,-20(fp)
   12dc8:	10c0058d 	sth	r3,22(r2)
    if (pq->OSQIn == pq->OSQEnd) {                     /* Wrap IN ptr if we are at end of queue        */
   12dcc:	e0bffb17 	ldw	r2,-20(fp)
   12dd0:	10c00317 	ldw	r3,12(r2)
   12dd4:	e0bffb17 	ldw	r2,-20(fp)
   12dd8:	10800217 	ldw	r2,8(r2)
   12ddc:	1880041e 	bne	r3,r2,12df0 <OSQPost+0x140>
        pq->OSQIn = pq->OSQStart;
   12de0:	e0bffb17 	ldw	r2,-20(fp)
   12de4:	10c00117 	ldw	r3,4(r2)
   12de8:	e0bffb17 	ldw	r2,-20(fp)
   12dec:	10c00315 	stw	r3,12(r2)
   12df0:	e0bff817 	ldw	r2,-32(fp)
   12df4:	e0bffc15 	stw	r2,-16(fp)
   12df8:	e0bffc17 	ldw	r2,-16(fp)
   12dfc:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
   12e00:	0005883a 	mov	r2,zero
}
   12e04:	e037883a 	mov	sp,fp
   12e08:	dfc00117 	ldw	ra,4(sp)
   12e0c:	df000017 	ldw	fp,0(sp)
   12e10:	dec00204 	addi	sp,sp,8
   12e14:	f800283a 	ret

00012e18 <OSQPostFront>:
*********************************************************************************************************
*/

#if OS_Q_POST_FRONT_EN > 0
INT8U  OSQPostFront (OS_EVENT *pevent, void *pmsg)
{
   12e18:	defff604 	addi	sp,sp,-40
   12e1c:	dfc00915 	stw	ra,36(sp)
   12e20:	df000815 	stw	fp,32(sp)
   12e24:	df000804 	addi	fp,sp,32
   12e28:	e13ffe15 	stw	r4,-8(fp)
   12e2c:	e17fff15 	stw	r5,-4(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   12e30:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
   12e34:	e0bffe17 	ldw	r2,-8(fp)
   12e38:	1000021e 	bne	r2,zero,12e44 <OSQPostFront+0x2c>
        return (OS_ERR_PEVENT_NULL);
   12e3c:	00800104 	movi	r2,4
   12e40:	00004c06 	br	12f74 <OSQPostFront+0x15c>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {     /* Validate event block type                     */
   12e44:	e0bffe17 	ldw	r2,-8(fp)
   12e48:	10800003 	ldbu	r2,0(r2)
   12e4c:	10803fcc 	andi	r2,r2,255
   12e50:	108000a0 	cmpeqi	r2,r2,2
   12e54:	1000021e 	bne	r2,zero,12e60 <OSQPostFront+0x48>
        return (OS_ERR_EVENT_TYPE);
   12e58:	00800044 	movi	r2,1
   12e5c:	00004506 	br	12f74 <OSQPostFront+0x15c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   12e60:	0005303a 	rdctl	r2,status
   12e64:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   12e68:	e0fffd17 	ldw	r3,-12(fp)
   12e6c:	00bfff84 	movi	r2,-2
   12e70:	1884703a 	and	r2,r3,r2
   12e74:	1001703a 	wrctl	status,r2
  
  return context;
   12e78:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
   12e7c:	e0bff815 	stw	r2,-32(fp)
    if (pevent->OSEventGrp != 0) {                    /* See if any task pending on queue              */
   12e80:	e0bffe17 	ldw	r2,-8(fp)
   12e84:	10800283 	ldbu	r2,10(r2)
   12e88:	10803fcc 	andi	r2,r2,255
   12e8c:	10000c26 	beq	r2,zero,12ec0 <OSQPostFront+0xa8>
                                                      /* Ready highest priority task waiting on event  */
        (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
   12e90:	000f883a 	mov	r7,zero
   12e94:	01800104 	movi	r6,4
   12e98:	e17fff17 	ldw	r5,-4(fp)
   12e9c:	e13ffe17 	ldw	r4,-8(fp)
   12ea0:	000f1700 	call	f170 <OS_EventTaskRdy>
   12ea4:	e0bff817 	ldw	r2,-32(fp)
   12ea8:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   12eac:	e0bff917 	ldw	r2,-28(fp)
   12eb0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                   /* Find highest priority task ready to run       */
   12eb4:	000fbbc0 	call	fbbc <OS_Sched>
        return (OS_ERR_NONE);
   12eb8:	0005883a 	mov	r2,zero
   12ebc:	00002d06 	br	12f74 <OSQPostFront+0x15c>
    }
    pq = (OS_Q *)pevent->OSEventPtr;                  /* Point to queue control block                  */
   12ec0:	e0bffe17 	ldw	r2,-8(fp)
   12ec4:	10800117 	ldw	r2,4(r2)
   12ec8:	e0bffb15 	stw	r2,-20(fp)
    if (pq->OSQEntries >= pq->OSQSize) {              /* Make sure queue is not full                   */
   12ecc:	e0bffb17 	ldw	r2,-20(fp)
   12ed0:	10c0058b 	ldhu	r3,22(r2)
   12ed4:	e0bffb17 	ldw	r2,-20(fp)
   12ed8:	1080050b 	ldhu	r2,20(r2)
   12edc:	18ffffcc 	andi	r3,r3,65535
   12ee0:	10bfffcc 	andi	r2,r2,65535
   12ee4:	18800636 	bltu	r3,r2,12f00 <OSQPostFront+0xe8>
   12ee8:	e0bff817 	ldw	r2,-32(fp)
   12eec:	e0bffa15 	stw	r2,-24(fp)
   12ef0:	e0bffa17 	ldw	r2,-24(fp)
   12ef4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_Q_FULL);
   12ef8:	00800784 	movi	r2,30
   12efc:	00001d06 	br	12f74 <OSQPostFront+0x15c>
    }
    if (pq->OSQOut == pq->OSQStart) {                 /* Wrap OUT ptr if we are at the 1st queue entry */
   12f00:	e0bffb17 	ldw	r2,-20(fp)
   12f04:	10c00417 	ldw	r3,16(r2)
   12f08:	e0bffb17 	ldw	r2,-20(fp)
   12f0c:	10800117 	ldw	r2,4(r2)
   12f10:	1880041e 	bne	r3,r2,12f24 <OSQPostFront+0x10c>
        pq->OSQOut = pq->OSQEnd;
   12f14:	e0bffb17 	ldw	r2,-20(fp)
   12f18:	10c00217 	ldw	r3,8(r2)
   12f1c:	e0bffb17 	ldw	r2,-20(fp)
   12f20:	10c00415 	stw	r3,16(r2)
    }
    pq->OSQOut--;
   12f24:	e0bffb17 	ldw	r2,-20(fp)
   12f28:	10800417 	ldw	r2,16(r2)
   12f2c:	10ffff04 	addi	r3,r2,-4
   12f30:	e0bffb17 	ldw	r2,-20(fp)
   12f34:	10c00415 	stw	r3,16(r2)
    *pq->OSQOut = pmsg;                               /* Insert message into queue                     */
   12f38:	e0bffb17 	ldw	r2,-20(fp)
   12f3c:	10800417 	ldw	r2,16(r2)
   12f40:	e0ffff17 	ldw	r3,-4(fp)
   12f44:	10c00015 	stw	r3,0(r2)
    pq->OSQEntries++;                                 /* Update the nbr of entries in the queue        */
   12f48:	e0bffb17 	ldw	r2,-20(fp)
   12f4c:	1080058b 	ldhu	r2,22(r2)
   12f50:	10800044 	addi	r2,r2,1
   12f54:	1007883a 	mov	r3,r2
   12f58:	e0bffb17 	ldw	r2,-20(fp)
   12f5c:	10c0058d 	sth	r3,22(r2)
   12f60:	e0bff817 	ldw	r2,-32(fp)
   12f64:	e0bffc15 	stw	r2,-16(fp)
   12f68:	e0bffc17 	ldw	r2,-16(fp)
   12f6c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
   12f70:	0005883a 	mov	r2,zero
}
   12f74:	e037883a 	mov	sp,fp
   12f78:	dfc00117 	ldw	ra,4(sp)
   12f7c:	df000017 	ldw	fp,0(sp)
   12f80:	dec00204 	addi	sp,sp,8
   12f84:	f800283a 	ret

00012f88 <OSQPostOpt>:
*********************************************************************************************************
*/

#if OS_Q_POST_OPT_EN > 0
INT8U  OSQPostOpt (OS_EVENT *pevent, void *pmsg, INT8U opt)
{
   12f88:	defff504 	addi	sp,sp,-44
   12f8c:	dfc00a15 	stw	ra,40(sp)
   12f90:	df000915 	stw	fp,36(sp)
   12f94:	df000904 	addi	fp,sp,36
   12f98:	e13ffd15 	stw	r4,-12(fp)
   12f9c:	e17ffe15 	stw	r5,-8(fp)
   12fa0:	3005883a 	mov	r2,r6
   12fa4:	e0bfff05 	stb	r2,-4(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   12fa8:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
   12fac:	e0bffd17 	ldw	r2,-12(fp)
   12fb0:	1000021e 	bne	r2,zero,12fbc <OSQPostOpt+0x34>
        return (OS_ERR_PEVENT_NULL);
   12fb4:	00800104 	movi	r2,4
   12fb8:	00007106 	br	13180 <OSQPostOpt+0x1f8>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {     /* Validate event block type                     */
   12fbc:	e0bffd17 	ldw	r2,-12(fp)
   12fc0:	10800003 	ldbu	r2,0(r2)
   12fc4:	10803fcc 	andi	r2,r2,255
   12fc8:	108000a0 	cmpeqi	r2,r2,2
   12fcc:	1000021e 	bne	r2,zero,12fd8 <OSQPostOpt+0x50>
        return (OS_ERR_EVENT_TYPE);
   12fd0:	00800044 	movi	r2,1
   12fd4:	00006a06 	br	13180 <OSQPostOpt+0x1f8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   12fd8:	0005303a 	rdctl	r2,status
   12fdc:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   12fe0:	e0fffc17 	ldw	r3,-16(fp)
   12fe4:	00bfff84 	movi	r2,-2
   12fe8:	1884703a 	and	r2,r3,r2
   12fec:	1001703a 	wrctl	status,r2
  
  return context;
   12ff0:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
   12ff4:	e0bff715 	stw	r2,-36(fp)
    if (pevent->OSEventGrp != 0x00) {                 /* See if any task pending on queue              */
   12ff8:	e0bffd17 	ldw	r2,-12(fp)
   12ffc:	10800283 	ldbu	r2,10(r2)
   13000:	10803fcc 	andi	r2,r2,255
   13004:	10001d26 	beq	r2,zero,1307c <OSQPostOpt+0xf4>
        if ((opt & OS_POST_OPT_BROADCAST) != 0x00) {  /* Do we need to post msg to ALL waiting tasks ? */
   13008:	e0bfff03 	ldbu	r2,-4(fp)
   1300c:	1080004c 	andi	r2,r2,1
   13010:	10000b26 	beq	r2,zero,13040 <OSQPostOpt+0xb8>
            while (pevent->OSEventGrp != 0) {         /* Yes, Post to ALL tasks waiting on queue       */
   13014:	00000506 	br	1302c <OSQPostOpt+0xa4>
                (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
   13018:	000f883a 	mov	r7,zero
   1301c:	01800104 	movi	r6,4
   13020:	e17ffe17 	ldw	r5,-8(fp)
   13024:	e13ffd17 	ldw	r4,-12(fp)
   13028:	000f1700 	call	f170 <OS_EventTaskRdy>
        return (OS_ERR_EVENT_TYPE);
    }
    OS_ENTER_CRITICAL();
    if (pevent->OSEventGrp != 0x00) {                 /* See if any task pending on queue              */
        if ((opt & OS_POST_OPT_BROADCAST) != 0x00) {  /* Do we need to post msg to ALL waiting tasks ? */
            while (pevent->OSEventGrp != 0) {         /* Yes, Post to ALL tasks waiting on queue       */
   1302c:	e0bffd17 	ldw	r2,-12(fp)
   13030:	10800283 	ldbu	r2,10(r2)
   13034:	10803fcc 	andi	r2,r2,255
   13038:	103ff71e 	bne	r2,zero,13018 <__alt_data_end+0xfffe3018>
   1303c:	00000506 	br	13054 <OSQPostOpt+0xcc>
                (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
            }
        } else {                                      /* No,  Post to HPT waiting on queue             */
            (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
   13040:	000f883a 	mov	r7,zero
   13044:	01800104 	movi	r6,4
   13048:	e17ffe17 	ldw	r5,-8(fp)
   1304c:	e13ffd17 	ldw	r4,-12(fp)
   13050:	000f1700 	call	f170 <OS_EventTaskRdy>
   13054:	e0bff717 	ldw	r2,-36(fp)
   13058:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1305c:	e0bff817 	ldw	r2,-32(fp)
   13060:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        if ((opt & OS_POST_OPT_NO_SCHED) == 0) {	  /* See if scheduler needs to be invoked          */
   13064:	e0bfff03 	ldbu	r2,-4(fp)
   13068:	1080010c 	andi	r2,r2,4
   1306c:	1000011e 	bne	r2,zero,13074 <OSQPostOpt+0xec>
            OS_Sched();                               /* Find highest priority task ready to run       */
   13070:	000fbbc0 	call	fbbc <OS_Sched>
        }
        return (OS_ERR_NONE);
   13074:	0005883a 	mov	r2,zero
   13078:	00004106 	br	13180 <OSQPostOpt+0x1f8>
    }
    pq = (OS_Q *)pevent->OSEventPtr;                  /* Point to queue control block                  */
   1307c:	e0bffd17 	ldw	r2,-12(fp)
   13080:	10800117 	ldw	r2,4(r2)
   13084:	e0bffa15 	stw	r2,-24(fp)
    if (pq->OSQEntries >= pq->OSQSize) {              /* Make sure queue is not full                   */
   13088:	e0bffa17 	ldw	r2,-24(fp)
   1308c:	10c0058b 	ldhu	r3,22(r2)
   13090:	e0bffa17 	ldw	r2,-24(fp)
   13094:	1080050b 	ldhu	r2,20(r2)
   13098:	18ffffcc 	andi	r3,r3,65535
   1309c:	10bfffcc 	andi	r2,r2,65535
   130a0:	18800636 	bltu	r3,r2,130bc <OSQPostOpt+0x134>
   130a4:	e0bff717 	ldw	r2,-36(fp)
   130a8:	e0bff915 	stw	r2,-28(fp)
   130ac:	e0bff917 	ldw	r2,-28(fp)
   130b0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_Q_FULL);
   130b4:	00800784 	movi	r2,30
   130b8:	00003106 	br	13180 <OSQPostOpt+0x1f8>
    }
    if ((opt & OS_POST_OPT_FRONT) != 0x00) {          /* Do we post to the FRONT of the queue?         */
   130bc:	e0bfff03 	ldbu	r2,-4(fp)
   130c0:	1080008c 	andi	r2,r2,2
   130c4:	10001326 	beq	r2,zero,13114 <OSQPostOpt+0x18c>
        if (pq->OSQOut == pq->OSQStart) {             /* Yes, Post as LIFO, Wrap OUT pointer if we ... */
   130c8:	e0bffa17 	ldw	r2,-24(fp)
   130cc:	10c00417 	ldw	r3,16(r2)
   130d0:	e0bffa17 	ldw	r2,-24(fp)
   130d4:	10800117 	ldw	r2,4(r2)
   130d8:	1880041e 	bne	r3,r2,130ec <OSQPostOpt+0x164>
            pq->OSQOut = pq->OSQEnd;                  /*      ... are at the 1st queue entry           */
   130dc:	e0bffa17 	ldw	r2,-24(fp)
   130e0:	10c00217 	ldw	r3,8(r2)
   130e4:	e0bffa17 	ldw	r2,-24(fp)
   130e8:	10c00415 	stw	r3,16(r2)
        }
        pq->OSQOut--;
   130ec:	e0bffa17 	ldw	r2,-24(fp)
   130f0:	10800417 	ldw	r2,16(r2)
   130f4:	10ffff04 	addi	r3,r2,-4
   130f8:	e0bffa17 	ldw	r2,-24(fp)
   130fc:	10c00415 	stw	r3,16(r2)
        *pq->OSQOut = pmsg;                           /*      Insert message into queue                */
   13100:	e0bffa17 	ldw	r2,-24(fp)
   13104:	10800417 	ldw	r2,16(r2)
   13108:	e0fffe17 	ldw	r3,-8(fp)
   1310c:	10c00015 	stw	r3,0(r2)
   13110:	00001006 	br	13154 <OSQPostOpt+0x1cc>
    } else {                                          /* No,  Post as FIFO                             */
        *pq->OSQIn++ = pmsg;                          /*      Insert message into queue                */
   13114:	e0bffa17 	ldw	r2,-24(fp)
   13118:	10800317 	ldw	r2,12(r2)
   1311c:	11000104 	addi	r4,r2,4
   13120:	e0fffa17 	ldw	r3,-24(fp)
   13124:	19000315 	stw	r4,12(r3)
   13128:	e0fffe17 	ldw	r3,-8(fp)
   1312c:	10c00015 	stw	r3,0(r2)
        if (pq->OSQIn == pq->OSQEnd) {                /*      Wrap IN ptr if we are at end of queue    */
   13130:	e0bffa17 	ldw	r2,-24(fp)
   13134:	10c00317 	ldw	r3,12(r2)
   13138:	e0bffa17 	ldw	r2,-24(fp)
   1313c:	10800217 	ldw	r2,8(r2)
   13140:	1880041e 	bne	r3,r2,13154 <OSQPostOpt+0x1cc>
            pq->OSQIn = pq->OSQStart;
   13144:	e0bffa17 	ldw	r2,-24(fp)
   13148:	10c00117 	ldw	r3,4(r2)
   1314c:	e0bffa17 	ldw	r2,-24(fp)
   13150:	10c00315 	stw	r3,12(r2)
        }
    }
    pq->OSQEntries++;                                 /* Update the nbr of entries in the queue        */
   13154:	e0bffa17 	ldw	r2,-24(fp)
   13158:	1080058b 	ldhu	r2,22(r2)
   1315c:	10800044 	addi	r2,r2,1
   13160:	1007883a 	mov	r3,r2
   13164:	e0bffa17 	ldw	r2,-24(fp)
   13168:	10c0058d 	sth	r3,22(r2)
   1316c:	e0bff717 	ldw	r2,-36(fp)
   13170:	e0bffb15 	stw	r2,-20(fp)
   13174:	e0bffb17 	ldw	r2,-20(fp)
   13178:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
   1317c:	0005883a 	mov	r2,zero
}
   13180:	e037883a 	mov	sp,fp
   13184:	dfc00117 	ldw	ra,4(sp)
   13188:	df000017 	ldw	fp,0(sp)
   1318c:	dec00204 	addi	sp,sp,8
   13190:	f800283a 	ret

00013194 <OSQQuery>:
*********************************************************************************************************
*/

#if OS_Q_QUERY_EN > 0
INT8U  OSQQuery (OS_EVENT *pevent, OS_Q_DATA *p_q_data)
{
   13194:	defff604 	addi	sp,sp,-40
   13198:	df000915 	stw	fp,36(sp)
   1319c:	df000904 	addi	fp,sp,36
   131a0:	e13ffe15 	stw	r4,-8(fp)
   131a4:	e17fff15 	stw	r5,-4(fp)
#else
    INT16U    *psrc;
    INT16U    *pdest;
#endif
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
   131a8:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                     /* Validate 'pevent'                            */
   131ac:	e0bffe17 	ldw	r2,-8(fp)
   131b0:	1000021e 	bne	r2,zero,131bc <OSQQuery+0x28>
        return (OS_ERR_PEVENT_NULL);
   131b4:	00800104 	movi	r2,4
   131b8:	00004906 	br	132e0 <OSQQuery+0x14c>
    }
    if (p_q_data == (OS_Q_DATA *)0) {                  /* Validate 'p_q_data'                          */
   131bc:	e0bfff17 	ldw	r2,-4(fp)
   131c0:	1000021e 	bne	r2,zero,131cc <OSQQuery+0x38>
        return (OS_ERR_PDATA_NULL);
   131c4:	00800244 	movi	r2,9
   131c8:	00004506 	br	132e0 <OSQQuery+0x14c>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {      /* Validate event block type                    */
   131cc:	e0bffe17 	ldw	r2,-8(fp)
   131d0:	10800003 	ldbu	r2,0(r2)
   131d4:	10803fcc 	andi	r2,r2,255
   131d8:	108000a0 	cmpeqi	r2,r2,2
   131dc:	1000021e 	bne	r2,zero,131e8 <OSQQuery+0x54>
        return (OS_ERR_EVENT_TYPE);
   131e0:	00800044 	movi	r2,1
   131e4:	00003e06 	br	132e0 <OSQQuery+0x14c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   131e8:	0005303a 	rdctl	r2,status
   131ec:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   131f0:	e0fffd17 	ldw	r3,-12(fp)
   131f4:	00bfff84 	movi	r2,-2
   131f8:	1884703a 	and	r2,r3,r2
   131fc:	1001703a 	wrctl	status,r2
  
  return context;
   13200:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
   13204:	e0bffa15 	stw	r2,-24(fp)
    p_q_data->OSEventGrp = pevent->OSEventGrp;         /* Copy message queue wait list                 */
   13208:	e0bffe17 	ldw	r2,-8(fp)
   1320c:	10c00283 	ldbu	r3,10(r2)
   13210:	e0bfff17 	ldw	r2,-4(fp)
   13214:	10c002c5 	stb	r3,11(r2)
    psrc                 = &pevent->OSEventTbl[0];
   13218:	e0bffe17 	ldw	r2,-8(fp)
   1321c:	108002c4 	addi	r2,r2,11
   13220:	e0bff815 	stw	r2,-32(fp)
    pdest                = &p_q_data->OSEventTbl[0];
   13224:	e0bfff17 	ldw	r2,-4(fp)
   13228:	10800204 	addi	r2,r2,8
   1322c:	e0bff915 	stw	r2,-28(fp)
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
   13230:	e03ff705 	stb	zero,-36(fp)
   13234:	00000b06 	br	13264 <OSQQuery+0xd0>
        *pdest++ = *psrc++;
   13238:	e0bff917 	ldw	r2,-28(fp)
   1323c:	10c00044 	addi	r3,r2,1
   13240:	e0fff915 	stw	r3,-28(fp)
   13244:	e0fff817 	ldw	r3,-32(fp)
   13248:	19000044 	addi	r4,r3,1
   1324c:	e13ff815 	stw	r4,-32(fp)
   13250:	18c00003 	ldbu	r3,0(r3)
   13254:	10c00005 	stb	r3,0(r2)
    }
    OS_ENTER_CRITICAL();
    p_q_data->OSEventGrp = pevent->OSEventGrp;         /* Copy message queue wait list                 */
    psrc                 = &pevent->OSEventTbl[0];
    pdest                = &p_q_data->OSEventTbl[0];
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
   13258:	e0bff703 	ldbu	r2,-36(fp)
   1325c:	10800044 	addi	r2,r2,1
   13260:	e0bff705 	stb	r2,-36(fp)
   13264:	e0bff703 	ldbu	r2,-36(fp)
   13268:	108000f0 	cmpltui	r2,r2,3
   1326c:	103ff21e 	bne	r2,zero,13238 <__alt_data_end+0xfffe3238>
        *pdest++ = *psrc++;
    }
    pq = (OS_Q *)pevent->OSEventPtr;
   13270:	e0bffe17 	ldw	r2,-8(fp)
   13274:	10800117 	ldw	r2,4(r2)
   13278:	e0bffc15 	stw	r2,-16(fp)
    if (pq->OSQEntries > 0) {
   1327c:	e0bffc17 	ldw	r2,-16(fp)
   13280:	1080058b 	ldhu	r2,22(r2)
   13284:	10bfffcc 	andi	r2,r2,65535
   13288:	10000626 	beq	r2,zero,132a4 <OSQQuery+0x110>
        p_q_data->OSMsg = *pq->OSQOut;                 /* Get next message to return if available      */
   1328c:	e0bffc17 	ldw	r2,-16(fp)
   13290:	10800417 	ldw	r2,16(r2)
   13294:	10c00017 	ldw	r3,0(r2)
   13298:	e0bfff17 	ldw	r2,-4(fp)
   1329c:	10c00015 	stw	r3,0(r2)
   132a0:	00000206 	br	132ac <OSQQuery+0x118>
    } else {
        p_q_data->OSMsg = (void *)0;
   132a4:	e0bfff17 	ldw	r2,-4(fp)
   132a8:	10000015 	stw	zero,0(r2)
    }
    p_q_data->OSNMsgs = pq->OSQEntries;
   132ac:	e0bffc17 	ldw	r2,-16(fp)
   132b0:	10c0058b 	ldhu	r3,22(r2)
   132b4:	e0bfff17 	ldw	r2,-4(fp)
   132b8:	10c0010d 	sth	r3,4(r2)
    p_q_data->OSQSize = pq->OSQSize;
   132bc:	e0bffc17 	ldw	r2,-16(fp)
   132c0:	10c0050b 	ldhu	r3,20(r2)
   132c4:	e0bfff17 	ldw	r2,-4(fp)
   132c8:	10c0018d 	sth	r3,6(r2)
   132cc:	e0bffa17 	ldw	r2,-24(fp)
   132d0:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   132d4:	e0bffb17 	ldw	r2,-20(fp)
   132d8:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
   132dc:	0005883a 	mov	r2,zero
}
   132e0:	e037883a 	mov	sp,fp
   132e4:	df000017 	ldw	fp,0(sp)
   132e8:	dec00104 	addi	sp,sp,4
   132ec:	f800283a 	ret

000132f0 <OS_QInit>:
* Note(s)    : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

void  OS_QInit (void)
{
   132f0:	defffb04 	addi	sp,sp,-20
   132f4:	dfc00415 	stw	ra,16(sp)
   132f8:	df000315 	stw	fp,12(sp)
   132fc:	df000304 	addi	fp,sp,12
    OS_Q   *pq1;
    OS_Q   *pq2;



    OS_MemClr((INT8U *)&OSQTbl[0], sizeof(OSQTbl));  /* Clear the queue table                          */
   13300:	01407804 	movi	r5,480
   13304:	010000b4 	movhi	r4,2
   13308:	21380d04 	addi	r4,r4,-8140
   1330c:	000fb000 	call	fb00 <OS_MemClr>
    pq1 = &OSQTbl[0];
   13310:	008000b4 	movhi	r2,2
   13314:	10b80d04 	addi	r2,r2,-8140
   13318:	e0bffe15 	stw	r2,-8(fp)
    pq2 = &OSQTbl[1];
   1331c:	008000b4 	movhi	r2,2
   13320:	10b81304 	addi	r2,r2,-8116
   13324:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < (OS_MAX_QS - 1); i++) {          /* Init. list of free QUEUE control blocks        */
   13328:	e03ffd0d 	sth	zero,-12(fp)
   1332c:	00000c06 	br	13360 <OS_QInit+0x70>
        pq1->OSQPtr = pq2;
   13330:	e0bffe17 	ldw	r2,-8(fp)
   13334:	e0ffff17 	ldw	r3,-4(fp)
   13338:	10c00015 	stw	r3,0(r2)
        pq1++;
   1333c:	e0bffe17 	ldw	r2,-8(fp)
   13340:	10800604 	addi	r2,r2,24
   13344:	e0bffe15 	stw	r2,-8(fp)
        pq2++;
   13348:	e0bfff17 	ldw	r2,-4(fp)
   1334c:	10800604 	addi	r2,r2,24
   13350:	e0bfff15 	stw	r2,-4(fp)


    OS_MemClr((INT8U *)&OSQTbl[0], sizeof(OSQTbl));  /* Clear the queue table                          */
    pq1 = &OSQTbl[0];
    pq2 = &OSQTbl[1];
    for (i = 0; i < (OS_MAX_QS - 1); i++) {          /* Init. list of free QUEUE control blocks        */
   13354:	e0bffd0b 	ldhu	r2,-12(fp)
   13358:	10800044 	addi	r2,r2,1
   1335c:	e0bffd0d 	sth	r2,-12(fp)
   13360:	e0bffd0b 	ldhu	r2,-12(fp)
   13364:	108004f0 	cmpltui	r2,r2,19
   13368:	103ff11e 	bne	r2,zero,13330 <__alt_data_end+0xfffe3330>
        pq1->OSQPtr = pq2;
        pq1++;
        pq2++;
    }
    pq1->OSQPtr = (OS_Q *)0;
   1336c:	e0bffe17 	ldw	r2,-8(fp)
   13370:	10000015 	stw	zero,0(r2)
    OSQFreeList = &OSQTbl[0];
   13374:	008000b4 	movhi	r2,2
   13378:	10b80d04 	addi	r2,r2,-8140
   1337c:	d0a72b15 	stw	r2,-25428(gp)
#endif
}
   13380:	0001883a 	nop
   13384:	e037883a 	mov	sp,fp
   13388:	dfc00117 	ldw	ra,4(sp)
   1338c:	df000017 	ldw	fp,0(sp)
   13390:	dec00204 	addi	sp,sp,8
   13394:	f800283a 	ret

00013398 <OSSemAccept>:
*********************************************************************************************************
*/

#if OS_SEM_ACCEPT_EN > 0
INT16U  OSSemAccept (OS_EVENT *pevent)
{
   13398:	defffa04 	addi	sp,sp,-24
   1339c:	df000515 	stw	fp,20(sp)
   133a0:	df000504 	addi	fp,sp,20
   133a4:	e13fff15 	stw	r4,-4(fp)
    INT16U     cnt;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   133a8:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
   133ac:	e0bfff17 	ldw	r2,-4(fp)
   133b0:	1000021e 	bne	r2,zero,133bc <OSSemAccept+0x24>
        return (0);
   133b4:	0005883a 	mov	r2,zero
   133b8:	00001f06 	br	13438 <OSSemAccept+0xa0>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
   133bc:	e0bfff17 	ldw	r2,-4(fp)
   133c0:	10800003 	ldbu	r2,0(r2)
   133c4:	10803fcc 	andi	r2,r2,255
   133c8:	108000e0 	cmpeqi	r2,r2,3
   133cc:	1000021e 	bne	r2,zero,133d8 <OSSemAccept+0x40>
        return (0);
   133d0:	0005883a 	mov	r2,zero
   133d4:	00001806 	br	13438 <OSSemAccept+0xa0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   133d8:	0005303a 	rdctl	r2,status
   133dc:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   133e0:	e0fffe17 	ldw	r3,-8(fp)
   133e4:	00bfff84 	movi	r2,-2
   133e8:	1884703a 	and	r2,r3,r2
   133ec:	1001703a 	wrctl	status,r2
  
  return context;
   133f0:	e0bffe17 	ldw	r2,-8(fp)
    }
    OS_ENTER_CRITICAL();
   133f4:	e0bffb15 	stw	r2,-20(fp)
    cnt = pevent->OSEventCnt;
   133f8:	e0bfff17 	ldw	r2,-4(fp)
   133fc:	1080020b 	ldhu	r2,8(r2)
   13400:	e0bffd0d 	sth	r2,-12(fp)
    if (cnt > 0) {                                    /* See if resource is available                  */
   13404:	e0bffd0b 	ldhu	r2,-12(fp)
   13408:	10000626 	beq	r2,zero,13424 <OSSemAccept+0x8c>
        pevent->OSEventCnt--;                         /* Yes, decrement semaphore and notify caller    */
   1340c:	e0bfff17 	ldw	r2,-4(fp)
   13410:	1080020b 	ldhu	r2,8(r2)
   13414:	10bfffc4 	addi	r2,r2,-1
   13418:	1007883a 	mov	r3,r2
   1341c:	e0bfff17 	ldw	r2,-4(fp)
   13420:	10c0020d 	sth	r3,8(r2)
   13424:	e0bffb17 	ldw	r2,-20(fp)
   13428:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1342c:	e0bffc17 	ldw	r2,-16(fp)
   13430:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (cnt);                                     /* Return semaphore count                        */
   13434:	e0bffd0b 	ldhu	r2,-12(fp)
}
   13438:	e037883a 	mov	sp,fp
   1343c:	df000017 	ldw	fp,0(sp)
   13440:	dec00104 	addi	sp,sp,4
   13444:	f800283a 	ret

00013448 <OSSemCreate>:
*              == (void *)0  if no event control blocks were available
*********************************************************************************************************
*/

OS_EVENT  *OSSemCreate (INT16U cnt)
{
   13448:	defff904 	addi	sp,sp,-28
   1344c:	dfc00615 	stw	ra,24(sp)
   13450:	df000515 	stw	fp,20(sp)
   13454:	df000504 	addi	fp,sp,20
   13458:	2005883a 	mov	r2,r4
   1345c:	e0bfff0d 	sth	r2,-4(fp)
    OS_EVENT  *pevent;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
   13460:	e03ffb15 	stw	zero,-20(fp)
#endif



    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
   13464:	d0a72e03 	ldbu	r2,-25416(gp)
   13468:	10803fcc 	andi	r2,r2,255
   1346c:	10000226 	beq	r2,zero,13478 <OSSemCreate+0x30>
        return ((OS_EVENT *)0);                            /* ... can't CREATE from an ISR             */
   13470:	0005883a 	mov	r2,zero
   13474:	00002506 	br	1350c <OSSemCreate+0xc4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   13478:	0005303a 	rdctl	r2,status
   1347c:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   13480:	e0fffe17 	ldw	r3,-8(fp)
   13484:	00bfff84 	movi	r2,-2
   13488:	1884703a 	and	r2,r3,r2
   1348c:	1001703a 	wrctl	status,r2
  
  return context;
   13490:	e0bffe17 	ldw	r2,-8(fp)
    }
    OS_ENTER_CRITICAL();
   13494:	e0bffb15 	stw	r2,-20(fp)
    pevent = OSEventFreeList;                              /* Get next free event control block        */
   13498:	d0a72d17 	ldw	r2,-25420(gp)
   1349c:	e0bffd15 	stw	r2,-12(fp)
    if (OSEventFreeList != (OS_EVENT *)0) {                /* See if pool of free ECB pool was empty   */
   134a0:	d0a72d17 	ldw	r2,-25420(gp)
   134a4:	10000326 	beq	r2,zero,134b4 <OSSemCreate+0x6c>
        OSEventFreeList = (OS_EVENT *)OSEventFreeList->OSEventPtr;
   134a8:	d0a72d17 	ldw	r2,-25420(gp)
   134ac:	10800117 	ldw	r2,4(r2)
   134b0:	d0a72d15 	stw	r2,-25420(gp)
   134b4:	e0bffb17 	ldw	r2,-20(fp)
   134b8:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   134bc:	e0bffc17 	ldw	r2,-16(fp)
   134c0:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    if (pevent != (OS_EVENT *)0) {                         /* Get an event control block               */
   134c4:	e0bffd17 	ldw	r2,-12(fp)
   134c8:	10000f26 	beq	r2,zero,13508 <OSSemCreate+0xc0>
        pevent->OSEventType    = OS_EVENT_TYPE_SEM;
   134cc:	e0bffd17 	ldw	r2,-12(fp)
   134d0:	00c000c4 	movi	r3,3
   134d4:	10c00005 	stb	r3,0(r2)
        pevent->OSEventCnt     = cnt;                      /* Set semaphore value                      */
   134d8:	e0bffd17 	ldw	r2,-12(fp)
   134dc:	e0ffff0b 	ldhu	r3,-4(fp)
   134e0:	10c0020d 	sth	r3,8(r2)
        pevent->OSEventPtr     = (void *)0;                /* Unlink from ECB free list                */
   134e4:	e0bffd17 	ldw	r2,-12(fp)
   134e8:	10000115 	stw	zero,4(r2)
#if OS_EVENT_NAME_SIZE > 1
        pevent->OSEventName[0] = '?';                      /* Unknown name                             */
   134ec:	e0bffd17 	ldw	r2,-12(fp)
   134f0:	00c00fc4 	movi	r3,63
   134f4:	10c00385 	stb	r3,14(r2)
        pevent->OSEventName[1] = OS_ASCII_NUL;
   134f8:	e0bffd17 	ldw	r2,-12(fp)
   134fc:	100003c5 	stb	zero,15(r2)
#endif
        OS_EventWaitListInit(pevent);                      /* Initialize to 'nobody waiting' on sem.   */
   13500:	e13ffd17 	ldw	r4,-12(fp)
   13504:	000f7200 	call	f720 <OS_EventWaitListInit>
    }
    return (pevent);
   13508:	e0bffd17 	ldw	r2,-12(fp)
}
   1350c:	e037883a 	mov	sp,fp
   13510:	dfc00117 	ldw	ra,4(sp)
   13514:	df000017 	ldw	fp,0(sp)
   13518:	dec00204 	addi	sp,sp,8
   1351c:	f800283a 	ret

00013520 <OSSemDel>:
*********************************************************************************************************
*/

#if OS_SEM_DEL_EN > 0
OS_EVENT  *OSSemDel (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
   13520:	defff304 	addi	sp,sp,-52
   13524:	dfc00c15 	stw	ra,48(sp)
   13528:	df000b15 	stw	fp,44(sp)
   1352c:	df000b04 	addi	fp,sp,44
   13530:	e13ffd15 	stw	r4,-12(fp)
   13534:	2805883a 	mov	r2,r5
   13538:	e1bfff15 	stw	r6,-4(fp)
   1353c:	e0bffe05 	stb	r2,-8(fp)
    BOOLEAN    tasks_waiting;
    OS_EVENT  *pevent_return;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
   13540:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
   13544:	e0bfff17 	ldw	r2,-4(fp)
   13548:	1000021e 	bne	r2,zero,13554 <OSSemDel+0x34>
        return (pevent);
   1354c:	e0bffd17 	ldw	r2,-12(fp)
   13550:	00007e06 	br	1374c <OSSemDel+0x22c>
    }
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
   13554:	e0bffd17 	ldw	r2,-12(fp)
   13558:	1000051e 	bne	r2,zero,13570 <OSSemDel+0x50>
        *perr = OS_ERR_PEVENT_NULL;
   1355c:	e0bfff17 	ldw	r2,-4(fp)
   13560:	00c00104 	movi	r3,4
   13564:	10c00005 	stb	r3,0(r2)
        return (pevent);
   13568:	e0bffd17 	ldw	r2,-12(fp)
   1356c:	00007706 	br	1374c <OSSemDel+0x22c>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {        /* Validate event block type                */
   13570:	e0bffd17 	ldw	r2,-12(fp)
   13574:	10800003 	ldbu	r2,0(r2)
   13578:	10803fcc 	andi	r2,r2,255
   1357c:	108000e0 	cmpeqi	r2,r2,3
   13580:	1000051e 	bne	r2,zero,13598 <OSSemDel+0x78>
        *perr = OS_ERR_EVENT_TYPE;
   13584:	e0bfff17 	ldw	r2,-4(fp)
   13588:	00c00044 	movi	r3,1
   1358c:	10c00005 	stb	r3,0(r2)
        return (pevent);
   13590:	e0bffd17 	ldw	r2,-12(fp)
   13594:	00006d06 	br	1374c <OSSemDel+0x22c>
    }
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
   13598:	d0a72e03 	ldbu	r2,-25416(gp)
   1359c:	10803fcc 	andi	r2,r2,255
   135a0:	10000526 	beq	r2,zero,135b8 <OSSemDel+0x98>
        *perr = OS_ERR_DEL_ISR;                             /* ... can't DELETE from an ISR             */
   135a4:	e0bfff17 	ldw	r2,-4(fp)
   135a8:	00c003c4 	movi	r3,15
   135ac:	10c00005 	stb	r3,0(r2)
        return (pevent);
   135b0:	e0bffd17 	ldw	r2,-12(fp)
   135b4:	00006506 	br	1374c <OSSemDel+0x22c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   135b8:	0005303a 	rdctl	r2,status
   135bc:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   135c0:	e0fffc17 	ldw	r3,-16(fp)
   135c4:	00bfff84 	movi	r2,-2
   135c8:	1884703a 	and	r2,r3,r2
   135cc:	1001703a 	wrctl	status,r2
  
  return context;
   135d0:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
   135d4:	e0bff715 	stw	r2,-36(fp)
    if (pevent->OSEventGrp != 0) {                         /* See if any tasks waiting on semaphore    */
   135d8:	e0bffd17 	ldw	r2,-12(fp)
   135dc:	10800283 	ldbu	r2,10(r2)
   135e0:	10803fcc 	andi	r2,r2,255
   135e4:	10000326 	beq	r2,zero,135f4 <OSSemDel+0xd4>
        tasks_waiting = OS_TRUE;                           /* Yes                                      */
   135e8:	00800044 	movi	r2,1
   135ec:	e0bff505 	stb	r2,-44(fp)
   135f0:	00000106 	br	135f8 <OSSemDel+0xd8>
    } else {
        tasks_waiting = OS_FALSE;                          /* No                                       */
   135f4:	e03ff505 	stb	zero,-44(fp)
    }
    switch (opt) {
   135f8:	e0bffe03 	ldbu	r2,-8(fp)
   135fc:	10000326 	beq	r2,zero,1360c <OSSemDel+0xec>
   13600:	10800060 	cmpeqi	r2,r2,1
   13604:	1000281e 	bne	r2,zero,136a8 <OSSemDel+0x188>
   13608:	00004506 	br	13720 <OSSemDel+0x200>
        case OS_DEL_NO_PEND:                               /* Delete semaphore only if no task waiting */
             if (tasks_waiting == OS_FALSE) {
   1360c:	e0bff503 	ldbu	r2,-44(fp)
   13610:	1000161e 	bne	r2,zero,1366c <OSSemDel+0x14c>
#if OS_EVENT_NAME_SIZE > 1
                 pevent->OSEventName[0] = '?';             /* Unknown name                             */
   13614:	e0bffd17 	ldw	r2,-12(fp)
   13618:	00c00fc4 	movi	r3,63
   1361c:	10c00385 	stb	r3,14(r2)
                 pevent->OSEventName[1] = OS_ASCII_NUL;
   13620:	e0bffd17 	ldw	r2,-12(fp)
   13624:	100003c5 	stb	zero,15(r2)
#endif
                 pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
   13628:	e0bffd17 	ldw	r2,-12(fp)
   1362c:	10000005 	stb	zero,0(r2)
                 pevent->OSEventPtr     = OSEventFreeList; /* Return Event Control Block to free list  */
   13630:	d0e72d17 	ldw	r3,-25420(gp)
   13634:	e0bffd17 	ldw	r2,-12(fp)
   13638:	10c00115 	stw	r3,4(r2)
                 pevent->OSEventCnt     = 0;
   1363c:	e0bffd17 	ldw	r2,-12(fp)
   13640:	1000020d 	sth	zero,8(r2)
                 OSEventFreeList        = pevent;          /* Get next free event control block        */
   13644:	e0bffd17 	ldw	r2,-12(fp)
   13648:	d0a72d15 	stw	r2,-25420(gp)
   1364c:	e0bff717 	ldw	r2,-36(fp)
   13650:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   13654:	e0bff817 	ldw	r2,-32(fp)
   13658:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_NONE;
   1365c:	e0bfff17 	ldw	r2,-4(fp)
   13660:	10000005 	stb	zero,0(r2)
                 pevent_return          = (OS_EVENT *)0;   /* Semaphore has been deleted               */
   13664:	e03ff615 	stw	zero,-40(fp)
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_TASK_WAITING;
                 pevent_return          = pevent;
             }
             break;
   13668:	00003706 	br	13748 <OSSemDel+0x228>
   1366c:	e0bff717 	ldw	r2,-36(fp)
   13670:	e0bff915 	stw	r2,-28(fp)
   13674:	e0bff917 	ldw	r2,-28(fp)
   13678:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_NONE;
                 pevent_return          = (OS_EVENT *)0;   /* Semaphore has been deleted               */
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_TASK_WAITING;
   1367c:	e0bfff17 	ldw	r2,-4(fp)
   13680:	00c01244 	movi	r3,73
   13684:	10c00005 	stb	r3,0(r2)
                 pevent_return          = pevent;
   13688:	e0bffd17 	ldw	r2,-12(fp)
   1368c:	e0bff615 	stw	r2,-40(fp)
             }
             break;
   13690:	00002d06 	br	13748 <OSSemDel+0x228>

        case OS_DEL_ALWAYS:                                /* Always delete the semaphore              */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for semaphore    */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_OK);
   13694:	000f883a 	mov	r7,zero
   13698:	01800044 	movi	r6,1
   1369c:	000b883a 	mov	r5,zero
   136a0:	e13ffd17 	ldw	r4,-12(fp)
   136a4:	000f1700 	call	f170 <OS_EventTaskRdy>
                 pevent_return          = pevent;
             }
             break;

        case OS_DEL_ALWAYS:                                /* Always delete the semaphore              */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for semaphore    */
   136a8:	e0bffd17 	ldw	r2,-12(fp)
   136ac:	10800283 	ldbu	r2,10(r2)
   136b0:	10803fcc 	andi	r2,r2,255
   136b4:	103ff71e 	bne	r2,zero,13694 <__alt_data_end+0xfffe3694>
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_OK);
             }
#if OS_EVENT_NAME_SIZE > 1
             pevent->OSEventName[0] = '?';                 /* Unknown name                             */
   136b8:	e0bffd17 	ldw	r2,-12(fp)
   136bc:	00c00fc4 	movi	r3,63
   136c0:	10c00385 	stb	r3,14(r2)
             pevent->OSEventName[1] = OS_ASCII_NUL;
   136c4:	e0bffd17 	ldw	r2,-12(fp)
   136c8:	100003c5 	stb	zero,15(r2)
#endif
             pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
   136cc:	e0bffd17 	ldw	r2,-12(fp)
   136d0:	10000005 	stb	zero,0(r2)
             pevent->OSEventPtr     = OSEventFreeList;     /* Return Event Control Block to free list  */
   136d4:	d0e72d17 	ldw	r3,-25420(gp)
   136d8:	e0bffd17 	ldw	r2,-12(fp)
   136dc:	10c00115 	stw	r3,4(r2)
             pevent->OSEventCnt     = 0;
   136e0:	e0bffd17 	ldw	r2,-12(fp)
   136e4:	1000020d 	sth	zero,8(r2)
             OSEventFreeList        = pevent;              /* Get next free event control block        */
   136e8:	e0bffd17 	ldw	r2,-12(fp)
   136ec:	d0a72d15 	stw	r2,-25420(gp)
   136f0:	e0bff717 	ldw	r2,-36(fp)
   136f4:	e0bffa15 	stw	r2,-24(fp)
   136f8:	e0bffa17 	ldw	r2,-24(fp)
   136fc:	1001703a 	wrctl	status,r2
             OS_EXIT_CRITICAL();
             if (tasks_waiting == OS_TRUE) {               /* Reschedule only if task(s) were waiting  */
   13700:	e0bff503 	ldbu	r2,-44(fp)
   13704:	10800058 	cmpnei	r2,r2,1
   13708:	1000011e 	bne	r2,zero,13710 <OSSemDel+0x1f0>
                 OS_Sched();                               /* Find highest priority task ready to run  */
   1370c:	000fbbc0 	call	fbbc <OS_Sched>
             }
             *perr                  = OS_ERR_NONE;
   13710:	e0bfff17 	ldw	r2,-4(fp)
   13714:	10000005 	stb	zero,0(r2)
             pevent_return          = (OS_EVENT *)0;       /* Semaphore has been deleted               */
   13718:	e03ff615 	stw	zero,-40(fp)
             break;
   1371c:	00000a06 	br	13748 <OSSemDel+0x228>
   13720:	e0bff717 	ldw	r2,-36(fp)
   13724:	e0bffb15 	stw	r2,-20(fp)
   13728:	e0bffb17 	ldw	r2,-20(fp)
   1372c:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();
             *perr                  = OS_ERR_INVALID_OPT;
   13730:	e0bfff17 	ldw	r2,-4(fp)
   13734:	00c001c4 	movi	r3,7
   13738:	10c00005 	stb	r3,0(r2)
             pevent_return          = pevent;
   1373c:	e0bffd17 	ldw	r2,-12(fp)
   13740:	e0bff615 	stw	r2,-40(fp)
             break;
   13744:	0001883a 	nop
    }
    return (pevent_return);
   13748:	e0bff617 	ldw	r2,-40(fp)
}
   1374c:	e037883a 	mov	sp,fp
   13750:	dfc00117 	ldw	ra,4(sp)
   13754:	df000017 	ldw	fp,0(sp)
   13758:	dec00204 	addi	sp,sp,8
   1375c:	f800283a 	ret

00013760 <OSSemPend>:
* Returns    : none
*********************************************************************************************************
*/
/*$PAGE*/
void  OSSemPend (OS_EVENT *pevent, INT16U timeout, INT8U *perr)
{
   13760:	defff504 	addi	sp,sp,-44
   13764:	dfc00a15 	stw	ra,40(sp)
   13768:	df000915 	stw	fp,36(sp)
   1376c:	df000904 	addi	fp,sp,36
   13770:	e13ffd15 	stw	r4,-12(fp)
   13774:	2805883a 	mov	r2,r5
   13778:	e1bfff15 	stw	r6,-4(fp)
   1377c:	e0bffe0d 	sth	r2,-8(fp)
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   13780:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
   13784:	e0bfff17 	ldw	r2,-4(fp)
   13788:	10007226 	beq	r2,zero,13954 <OSSemPend+0x1f4>
        return;
    }
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
   1378c:	e0bffd17 	ldw	r2,-12(fp)
   13790:	1000041e 	bne	r2,zero,137a4 <OSSemPend+0x44>
        *perr = OS_ERR_PEVENT_NULL;
   13794:	e0bfff17 	ldw	r2,-4(fp)
   13798:	00c00104 	movi	r3,4
   1379c:	10c00005 	stb	r3,0(r2)
        return;
   137a0:	00006d06 	br	13958 <OSSemPend+0x1f8>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
   137a4:	e0bffd17 	ldw	r2,-12(fp)
   137a8:	10800003 	ldbu	r2,0(r2)
   137ac:	10803fcc 	andi	r2,r2,255
   137b0:	108000e0 	cmpeqi	r2,r2,3
   137b4:	1000041e 	bne	r2,zero,137c8 <OSSemPend+0x68>
        *perr = OS_ERR_EVENT_TYPE;
   137b8:	e0bfff17 	ldw	r2,-4(fp)
   137bc:	00c00044 	movi	r3,1
   137c0:	10c00005 	stb	r3,0(r2)
        return;
   137c4:	00006406 	br	13958 <OSSemPend+0x1f8>
    }
    if (OSIntNesting > 0) {                           /* See if called from ISR ...                    */
   137c8:	d0a72e03 	ldbu	r2,-25416(gp)
   137cc:	10803fcc 	andi	r2,r2,255
   137d0:	10000426 	beq	r2,zero,137e4 <OSSemPend+0x84>
        *perr = OS_ERR_PEND_ISR;                      /* ... can't PEND from an ISR                    */
   137d4:	e0bfff17 	ldw	r2,-4(fp)
   137d8:	00c00084 	movi	r3,2
   137dc:	10c00005 	stb	r3,0(r2)
        return;
   137e0:	00005d06 	br	13958 <OSSemPend+0x1f8>
    }
    if (OSLockNesting > 0) {                          /* See if called with scheduler locked ...       */
   137e4:	d0a72003 	ldbu	r2,-25472(gp)
   137e8:	10803fcc 	andi	r2,r2,255
   137ec:	10000426 	beq	r2,zero,13800 <OSSemPend+0xa0>
        *perr = OS_ERR_PEND_LOCKED;                   /* ... can't PEND when locked                    */
   137f0:	e0bfff17 	ldw	r2,-4(fp)
   137f4:	00c00344 	movi	r3,13
   137f8:	10c00005 	stb	r3,0(r2)
        return;
   137fc:	00005606 	br	13958 <OSSemPend+0x1f8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   13800:	0005303a 	rdctl	r2,status
   13804:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   13808:	e0fffc17 	ldw	r3,-16(fp)
   1380c:	00bfff84 	movi	r2,-2
   13810:	1884703a 	and	r2,r3,r2
   13814:	1001703a 	wrctl	status,r2
  
  return context;
   13818:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
   1381c:	e0bff715 	stw	r2,-36(fp)
    if (pevent->OSEventCnt > 0) {                     /* If sem. is positive, resource available ...   */
   13820:	e0bffd17 	ldw	r2,-12(fp)
   13824:	1080020b 	ldhu	r2,8(r2)
   13828:	10bfffcc 	andi	r2,r2,65535
   1382c:	10000d26 	beq	r2,zero,13864 <OSSemPend+0x104>
        pevent->OSEventCnt--;                         /* ... decrement semaphore only if positive.     */
   13830:	e0bffd17 	ldw	r2,-12(fp)
   13834:	1080020b 	ldhu	r2,8(r2)
   13838:	10bfffc4 	addi	r2,r2,-1
   1383c:	1007883a 	mov	r3,r2
   13840:	e0bffd17 	ldw	r2,-12(fp)
   13844:	10c0020d 	sth	r3,8(r2)
   13848:	e0bff717 	ldw	r2,-36(fp)
   1384c:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   13850:	e0bff817 	ldw	r2,-32(fp)
   13854:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_NONE;
   13858:	e0bfff17 	ldw	r2,-4(fp)
   1385c:	10000005 	stb	zero,0(r2)
        return;
   13860:	00003d06 	br	13958 <OSSemPend+0x1f8>
    }
                                                      /* Otherwise, must wait until event occurs       */
    OSTCBCur->OSTCBStat     |= OS_STAT_SEM;           /* Resource not available, pend on semaphore     */
   13864:	d0a72f17 	ldw	r2,-25412(gp)
   13868:	d0e72f17 	ldw	r3,-25412(gp)
   1386c:	18c00c03 	ldbu	r3,48(r3)
   13870:	18c00054 	ori	r3,r3,1
   13874:	10c00c05 	stb	r3,48(r2)
    OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
   13878:	d0a72f17 	ldw	r2,-25412(gp)
   1387c:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly       = timeout;               /* Store pend timeout in TCB                     */
   13880:	d0a72f17 	ldw	r2,-25412(gp)
   13884:	e0fffe0b 	ldhu	r3,-8(fp)
   13888:	10c00b8d 	sth	r3,46(r2)
    OS_EventTaskWait(pevent);                         /* Suspend task until event or timeout occurs    */
   1388c:	e13ffd17 	ldw	r4,-12(fp)
   13890:	000f3080 	call	f308 <OS_EventTaskWait>
   13894:	e0bff717 	ldw	r2,-36(fp)
   13898:	e0bffb15 	stw	r2,-20(fp)
   1389c:	e0bffb17 	ldw	r2,-20(fp)
   138a0:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OS_Sched();                                       /* Find next highest priority task ready         */
   138a4:	000fbbc0 	call	fbbc <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   138a8:	0005303a 	rdctl	r2,status
   138ac:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   138b0:	e0fff917 	ldw	r3,-28(fp)
   138b4:	00bfff84 	movi	r2,-2
   138b8:	1884703a 	and	r2,r3,r2
   138bc:	1001703a 	wrctl	status,r2
  
  return context;
   138c0:	e0bff917 	ldw	r2,-28(fp)
    OS_ENTER_CRITICAL();
   138c4:	e0bff715 	stw	r2,-36(fp)
    switch (OSTCBCur->OSTCBStatPend) {                /* See if we timed-out or aborted                */
   138c8:	d0a72f17 	ldw	r2,-25412(gp)
   138cc:	10800c43 	ldbu	r2,49(r2)
   138d0:	10803fcc 	andi	r2,r2,255
   138d4:	10000326 	beq	r2,zero,138e4 <OSSemPend+0x184>
   138d8:	108000a0 	cmpeqi	r2,r2,2
   138dc:	1000041e 	bne	r2,zero,138f0 <OSSemPend+0x190>
   138e0:	00000706 	br	13900 <OSSemPend+0x1a0>
        case OS_STAT_PEND_OK:
             *perr = OS_ERR_NONE;
   138e4:	e0bfff17 	ldw	r2,-4(fp)
   138e8:	10000005 	stb	zero,0(r2)
             break;
   138ec:	00000c06 	br	13920 <OSSemPend+0x1c0>

        case OS_STAT_PEND_ABORT:
             *perr = OS_ERR_PEND_ABORT;               /* Indicate that we aborted                      */
   138f0:	e0bfff17 	ldw	r2,-4(fp)
   138f4:	00c00384 	movi	r3,14
   138f8:	10c00005 	stb	r3,0(r2)
             break;
   138fc:	00000806 	br	13920 <OSSemPend+0x1c0>

        case OS_STAT_PEND_TO:
        default:        
             OS_EventTaskRemove(OSTCBCur, pevent);
   13900:	d0a72f17 	ldw	r2,-25412(gp)
   13904:	e17ffd17 	ldw	r5,-12(fp)
   13908:	1009883a 	mov	r4,r2
   1390c:	000f5680 	call	f568 <OS_EventTaskRemove>
             *perr = OS_ERR_TIMEOUT;                  /* Indicate that we didn't get event within TO   */
   13910:	e0bfff17 	ldw	r2,-4(fp)
   13914:	00c00284 	movi	r3,10
   13918:	10c00005 	stb	r3,0(r2)
             break;
   1391c:	0001883a 	nop
    }
    OSTCBCur->OSTCBStat          =  OS_STAT_RDY;      /* Set   task  status to ready                   */
   13920:	d0a72f17 	ldw	r2,-25412(gp)
   13924:	10000c05 	stb	zero,48(r2)
    OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;  /* Clear pend  status                            */
   13928:	d0a72f17 	ldw	r2,-25412(gp)
   1392c:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;    /* Clear event pointers                          */
   13930:	d0a72f17 	ldw	r2,-25412(gp)
   13934:	10000715 	stw	zero,28(r2)
#if (OS_EVENT_MULTI_EN > 0)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
   13938:	d0a72f17 	ldw	r2,-25412(gp)
   1393c:	10000815 	stw	zero,32(r2)
   13940:	e0bff717 	ldw	r2,-36(fp)
   13944:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   13948:	e0bffa17 	ldw	r2,-24(fp)
   1394c:	1001703a 	wrctl	status,r2
   13950:	00000106 	br	13958 <OSSemPend+0x1f8>



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
        return;
   13954:	0001883a 	nop
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;    /* Clear event pointers                          */
#if (OS_EVENT_MULTI_EN > 0)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
#endif
    OS_EXIT_CRITICAL();
}
   13958:	e037883a 	mov	sp,fp
   1395c:	dfc00117 	ldw	ra,4(sp)
   13960:	df000017 	ldw	fp,0(sp)
   13964:	dec00204 	addi	sp,sp,8
   13968:	f800283a 	ret

0001396c <OSSemPendAbort>:
*********************************************************************************************************
*/

#if OS_SEM_PEND_ABORT_EN > 0
INT8U  OSSemPendAbort (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
   1396c:	defff604 	addi	sp,sp,-40
   13970:	dfc00915 	stw	ra,36(sp)
   13974:	df000815 	stw	fp,32(sp)
   13978:	df000804 	addi	fp,sp,32
   1397c:	e13ffd15 	stw	r4,-12(fp)
   13980:	2805883a 	mov	r2,r5
   13984:	e1bfff15 	stw	r6,-4(fp)
   13988:	e0bffe05 	stb	r2,-8(fp)
    INT8U      nbr_tasks;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   1398c:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
   13990:	e0bfff17 	ldw	r2,-4(fp)
   13994:	1000021e 	bne	r2,zero,139a0 <OSSemPendAbort+0x34>
        return (0);
   13998:	0005883a 	mov	r2,zero
   1399c:	00004906 	br	13ac4 <OSSemPendAbort+0x158>
    }
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
   139a0:	e0bffd17 	ldw	r2,-12(fp)
   139a4:	1000051e 	bne	r2,zero,139bc <OSSemPendAbort+0x50>
        *perr = OS_ERR_PEVENT_NULL;
   139a8:	e0bfff17 	ldw	r2,-4(fp)
   139ac:	00c00104 	movi	r3,4
   139b0:	10c00005 	stb	r3,0(r2)
        return (0);
   139b4:	0005883a 	mov	r2,zero
   139b8:	00004206 	br	13ac4 <OSSemPendAbort+0x158>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
   139bc:	e0bffd17 	ldw	r2,-12(fp)
   139c0:	10800003 	ldbu	r2,0(r2)
   139c4:	10803fcc 	andi	r2,r2,255
   139c8:	108000e0 	cmpeqi	r2,r2,3
   139cc:	1000051e 	bne	r2,zero,139e4 <OSSemPendAbort+0x78>
        *perr = OS_ERR_EVENT_TYPE;
   139d0:	e0bfff17 	ldw	r2,-4(fp)
   139d4:	00c00044 	movi	r3,1
   139d8:	10c00005 	stb	r3,0(r2)
        return (0);
   139dc:	0005883a 	mov	r2,zero
   139e0:	00003806 	br	13ac4 <OSSemPendAbort+0x158>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   139e4:	0005303a 	rdctl	r2,status
   139e8:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   139ec:	e0fffc17 	ldw	r3,-16(fp)
   139f0:	00bfff84 	movi	r2,-2
   139f4:	1884703a 	and	r2,r3,r2
   139f8:	1001703a 	wrctl	status,r2
  
  return context;
   139fc:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
   13a00:	e0bff915 	stw	r2,-28(fp)
    if (pevent->OSEventGrp != 0) {                    /* See if any task waiting on semaphore?         */
   13a04:	e0bffd17 	ldw	r2,-12(fp)
   13a08:	10800283 	ldbu	r2,10(r2)
   13a0c:	10803fcc 	andi	r2,r2,255
   13a10:	10002526 	beq	r2,zero,13aa8 <OSSemPendAbort+0x13c>
        nbr_tasks = 0;
   13a14:	e03ff805 	stb	zero,-32(fp)
        switch (opt) {
   13a18:	e0bffe03 	ldbu	r2,-8(fp)
   13a1c:	10800060 	cmpeqi	r2,r2,1
   13a20:	10000e26 	beq	r2,zero,13a5c <OSSemPendAbort+0xf0>
            case OS_PEND_OPT_BROADCAST:               /* Do we need to abort ALL waiting tasks?        */
                 while (pevent->OSEventGrp != 0) {    /* Yes, ready ALL tasks waiting on semaphore     */
   13a24:	00000806 	br	13a48 <OSSemPendAbort+0xdc>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_ABORT);
   13a28:	01c00084 	movi	r7,2
   13a2c:	01800044 	movi	r6,1
   13a30:	000b883a 	mov	r5,zero
   13a34:	e13ffd17 	ldw	r4,-12(fp)
   13a38:	000f1700 	call	f170 <OS_EventTaskRdy>
                     nbr_tasks++;
   13a3c:	e0bff803 	ldbu	r2,-32(fp)
   13a40:	10800044 	addi	r2,r2,1
   13a44:	e0bff805 	stb	r2,-32(fp)
    OS_ENTER_CRITICAL();
    if (pevent->OSEventGrp != 0) {                    /* See if any task waiting on semaphore?         */
        nbr_tasks = 0;
        switch (opt) {
            case OS_PEND_OPT_BROADCAST:               /* Do we need to abort ALL waiting tasks?        */
                 while (pevent->OSEventGrp != 0) {    /* Yes, ready ALL tasks waiting on semaphore     */
   13a48:	e0bffd17 	ldw	r2,-12(fp)
   13a4c:	10800283 	ldbu	r2,10(r2)
   13a50:	10803fcc 	andi	r2,r2,255
   13a54:	103ff41e 	bne	r2,zero,13a28 <__alt_data_end+0xfffe3a28>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_ABORT);
                     nbr_tasks++;
                 }
                 break;
   13a58:	00000906 	br	13a80 <OSSemPendAbort+0x114>
                 
            case OS_PEND_OPT_NONE:
            default:                                  /* No,  ready HPT       waiting on semaphore     */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_ABORT);
   13a5c:	01c00084 	movi	r7,2
   13a60:	01800044 	movi	r6,1
   13a64:	000b883a 	mov	r5,zero
   13a68:	e13ffd17 	ldw	r4,-12(fp)
   13a6c:	000f1700 	call	f170 <OS_EventTaskRdy>
                 nbr_tasks++;
   13a70:	e0bff803 	ldbu	r2,-32(fp)
   13a74:	10800044 	addi	r2,r2,1
   13a78:	e0bff805 	stb	r2,-32(fp)
                 break;
   13a7c:	0001883a 	nop
   13a80:	e0bff917 	ldw	r2,-28(fp)
   13a84:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   13a88:	e0bffa17 	ldw	r2,-24(fp)
   13a8c:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        OS_Sched();                                   /* Find HPT ready to run                         */
   13a90:	000fbbc0 	call	fbbc <OS_Sched>
        *perr = OS_ERR_PEND_ABORT;
   13a94:	e0bfff17 	ldw	r2,-4(fp)
   13a98:	00c00384 	movi	r3,14
   13a9c:	10c00005 	stb	r3,0(r2)
        return (nbr_tasks);
   13aa0:	e0bff803 	ldbu	r2,-32(fp)
   13aa4:	00000706 	br	13ac4 <OSSemPendAbort+0x158>
   13aa8:	e0bff917 	ldw	r2,-28(fp)
   13aac:	e0bffb15 	stw	r2,-20(fp)
   13ab0:	e0bffb17 	ldw	r2,-20(fp)
   13ab4:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   13ab8:	e0bfff17 	ldw	r2,-4(fp)
   13abc:	10000005 	stb	zero,0(r2)
    return (0);                                       /* No tasks waiting on semaphore                 */
   13ac0:	0005883a 	mov	r2,zero
}
   13ac4:	e037883a 	mov	sp,fp
   13ac8:	dfc00117 	ldw	ra,4(sp)
   13acc:	df000017 	ldw	fp,0(sp)
   13ad0:	dec00204 	addi	sp,sp,8
   13ad4:	f800283a 	ret

00013ad8 <OSSemPost>:
*              OS_ERR_PEVENT_NULL  If 'pevent' is a NULL pointer.
*********************************************************************************************************
*/

INT8U  OSSemPost (OS_EVENT *pevent)
{
   13ad8:	defff804 	addi	sp,sp,-32
   13adc:	dfc00715 	stw	ra,28(sp)
   13ae0:	df000615 	stw	fp,24(sp)
   13ae4:	df000604 	addi	fp,sp,24
   13ae8:	e13fff15 	stw	r4,-4(fp)
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   13aec:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
   13af0:	e0bfff17 	ldw	r2,-4(fp)
   13af4:	1000021e 	bne	r2,zero,13b00 <OSSemPost+0x28>
        return (OS_ERR_PEVENT_NULL);
   13af8:	00800104 	movi	r2,4
   13afc:	00003506 	br	13bd4 <OSSemPost+0xfc>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
   13b00:	e0bfff17 	ldw	r2,-4(fp)
   13b04:	10800003 	ldbu	r2,0(r2)
   13b08:	10803fcc 	andi	r2,r2,255
   13b0c:	108000e0 	cmpeqi	r2,r2,3
   13b10:	1000021e 	bne	r2,zero,13b1c <OSSemPost+0x44>
        return (OS_ERR_EVENT_TYPE);
   13b14:	00800044 	movi	r2,1
   13b18:	00002e06 	br	13bd4 <OSSemPost+0xfc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   13b1c:	0005303a 	rdctl	r2,status
   13b20:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   13b24:	e0fffe17 	ldw	r3,-8(fp)
   13b28:	00bfff84 	movi	r2,-2
   13b2c:	1884703a 	and	r2,r3,r2
   13b30:	1001703a 	wrctl	status,r2
  
  return context;
   13b34:	e0bffe17 	ldw	r2,-8(fp)
    }
    OS_ENTER_CRITICAL();
   13b38:	e0bffa15 	stw	r2,-24(fp)
    if (pevent->OSEventGrp != 0) {                    /* See if any task waiting for semaphore         */
   13b3c:	e0bfff17 	ldw	r2,-4(fp)
   13b40:	10800283 	ldbu	r2,10(r2)
   13b44:	10803fcc 	andi	r2,r2,255
   13b48:	10000c26 	beq	r2,zero,13b7c <OSSemPost+0xa4>
                                                      /* Ready HPT waiting on event                    */
        (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_OK);
   13b4c:	000f883a 	mov	r7,zero
   13b50:	01800044 	movi	r6,1
   13b54:	000b883a 	mov	r5,zero
   13b58:	e13fff17 	ldw	r4,-4(fp)
   13b5c:	000f1700 	call	f170 <OS_EventTaskRdy>
   13b60:	e0bffa17 	ldw	r2,-24(fp)
   13b64:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   13b68:	e0bffb17 	ldw	r2,-20(fp)
   13b6c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                   /* Find HPT ready to run                         */
   13b70:	000fbbc0 	call	fbbc <OS_Sched>
        return (OS_ERR_NONE);
   13b74:	0005883a 	mov	r2,zero
   13b78:	00001606 	br	13bd4 <OSSemPost+0xfc>
    }
    if (pevent->OSEventCnt < 65535u) {                /* Make sure semaphore will not overflow         */
   13b7c:	e0bfff17 	ldw	r2,-4(fp)
   13b80:	1080020b 	ldhu	r2,8(r2)
   13b84:	10ffffcc 	andi	r3,r2,65535
   13b88:	00bfffd4 	movui	r2,65535
   13b8c:	18800c26 	beq	r3,r2,13bc0 <OSSemPost+0xe8>
        pevent->OSEventCnt++;                         /* Increment semaphore count to register event   */
   13b90:	e0bfff17 	ldw	r2,-4(fp)
   13b94:	1080020b 	ldhu	r2,8(r2)
   13b98:	10800044 	addi	r2,r2,1
   13b9c:	1007883a 	mov	r3,r2
   13ba0:	e0bfff17 	ldw	r2,-4(fp)
   13ba4:	10c0020d 	sth	r3,8(r2)
   13ba8:	e0bffa17 	ldw	r2,-24(fp)
   13bac:	e0bffc15 	stw	r2,-16(fp)
   13bb0:	e0bffc17 	ldw	r2,-16(fp)
   13bb4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_NONE);
   13bb8:	0005883a 	mov	r2,zero
   13bbc:	00000506 	br	13bd4 <OSSemPost+0xfc>
   13bc0:	e0bffa17 	ldw	r2,-24(fp)
   13bc4:	e0bffd15 	stw	r2,-12(fp)
   13bc8:	e0bffd17 	ldw	r2,-12(fp)
   13bcc:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();                               /* Semaphore value has reached its maximum       */
    return (OS_ERR_SEM_OVF);
   13bd0:	00800c84 	movi	r2,50
}
   13bd4:	e037883a 	mov	sp,fp
   13bd8:	dfc00117 	ldw	ra,4(sp)
   13bdc:	df000017 	ldw	fp,0(sp)
   13be0:	dec00204 	addi	sp,sp,8
   13be4:	f800283a 	ret

00013be8 <OSSemQuery>:
*********************************************************************************************************
*/

#if OS_SEM_QUERY_EN > 0
INT8U  OSSemQuery (OS_EVENT *pevent, OS_SEM_DATA *p_sem_data)
{
   13be8:	defff704 	addi	sp,sp,-36
   13bec:	df000815 	stw	fp,32(sp)
   13bf0:	df000804 	addi	fp,sp,32
   13bf4:	e13ffe15 	stw	r4,-8(fp)
   13bf8:	e17fff15 	stw	r5,-4(fp)
    INT16U    *psrc;
    INT16U    *pdest;
#endif
    INT8U      i;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
   13bfc:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
   13c00:	e0bffe17 	ldw	r2,-8(fp)
   13c04:	1000021e 	bne	r2,zero,13c10 <OSSemQuery+0x28>
        return (OS_ERR_PEVENT_NULL);
   13c08:	00800104 	movi	r2,4
   13c0c:	00003606 	br	13ce8 <OSSemQuery+0x100>
    }
    if (p_sem_data == (OS_SEM_DATA *)0) {                  /* Validate 'p_sem_data'                    */
   13c10:	e0bfff17 	ldw	r2,-4(fp)
   13c14:	1000021e 	bne	r2,zero,13c20 <OSSemQuery+0x38>
        return (OS_ERR_PDATA_NULL);
   13c18:	00800244 	movi	r2,9
   13c1c:	00003206 	br	13ce8 <OSSemQuery+0x100>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {        /* Validate event block type                */
   13c20:	e0bffe17 	ldw	r2,-8(fp)
   13c24:	10800003 	ldbu	r2,0(r2)
   13c28:	10803fcc 	andi	r2,r2,255
   13c2c:	108000e0 	cmpeqi	r2,r2,3
   13c30:	1000021e 	bne	r2,zero,13c3c <OSSemQuery+0x54>
        return (OS_ERR_EVENT_TYPE);
   13c34:	00800044 	movi	r2,1
   13c38:	00002b06 	br	13ce8 <OSSemQuery+0x100>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   13c3c:	0005303a 	rdctl	r2,status
   13c40:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   13c44:	e0fffd17 	ldw	r3,-12(fp)
   13c48:	00bfff84 	movi	r2,-2
   13c4c:	1884703a 	and	r2,r3,r2
   13c50:	1001703a 	wrctl	status,r2
  
  return context;
   13c54:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
   13c58:	e0bffb15 	stw	r2,-20(fp)
    p_sem_data->OSEventGrp = pevent->OSEventGrp;           /* Copy message mailbox wait list           */
   13c5c:	e0bffe17 	ldw	r2,-8(fp)
   13c60:	10c00283 	ldbu	r3,10(r2)
   13c64:	e0bfff17 	ldw	r2,-4(fp)
   13c68:	10c00145 	stb	r3,5(r2)
    psrc                   = &pevent->OSEventTbl[0];
   13c6c:	e0bffe17 	ldw	r2,-8(fp)
   13c70:	108002c4 	addi	r2,r2,11
   13c74:	e0bff815 	stw	r2,-32(fp)
    pdest                  = &p_sem_data->OSEventTbl[0];
   13c78:	e0bfff17 	ldw	r2,-4(fp)
   13c7c:	10800084 	addi	r2,r2,2
   13c80:	e0bff915 	stw	r2,-28(fp)
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
   13c84:	e03ffa05 	stb	zero,-24(fp)
   13c88:	00000b06 	br	13cb8 <OSSemQuery+0xd0>
        *pdest++ = *psrc++;
   13c8c:	e0bff917 	ldw	r2,-28(fp)
   13c90:	10c00044 	addi	r3,r2,1
   13c94:	e0fff915 	stw	r3,-28(fp)
   13c98:	e0fff817 	ldw	r3,-32(fp)
   13c9c:	19000044 	addi	r4,r3,1
   13ca0:	e13ff815 	stw	r4,-32(fp)
   13ca4:	18c00003 	ldbu	r3,0(r3)
   13ca8:	10c00005 	stb	r3,0(r2)
    }
    OS_ENTER_CRITICAL();
    p_sem_data->OSEventGrp = pevent->OSEventGrp;           /* Copy message mailbox wait list           */
    psrc                   = &pevent->OSEventTbl[0];
    pdest                  = &p_sem_data->OSEventTbl[0];
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
   13cac:	e0bffa03 	ldbu	r2,-24(fp)
   13cb0:	10800044 	addi	r2,r2,1
   13cb4:	e0bffa05 	stb	r2,-24(fp)
   13cb8:	e0bffa03 	ldbu	r2,-24(fp)
   13cbc:	108000f0 	cmpltui	r2,r2,3
   13cc0:	103ff21e 	bne	r2,zero,13c8c <__alt_data_end+0xfffe3c8c>
        *pdest++ = *psrc++;
    }
    p_sem_data->OSCnt = pevent->OSEventCnt;                /* Get semaphore count                      */
   13cc4:	e0bffe17 	ldw	r2,-8(fp)
   13cc8:	10c0020b 	ldhu	r3,8(r2)
   13ccc:	e0bfff17 	ldw	r2,-4(fp)
   13cd0:	10c0000d 	sth	r3,0(r2)
   13cd4:	e0bffb17 	ldw	r2,-20(fp)
   13cd8:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   13cdc:	e0bffc17 	ldw	r2,-16(fp)
   13ce0:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
   13ce4:	0005883a 	mov	r2,zero
}
   13ce8:	e037883a 	mov	sp,fp
   13cec:	df000017 	ldw	fp,0(sp)
   13cf0:	dec00104 	addi	sp,sp,4
   13cf4:	f800283a 	ret

00013cf8 <OSSemSet>:
*********************************************************************************************************
*/

#if OS_SEM_SET_EN > 0
void  OSSemSet (OS_EVENT *pevent, INT16U cnt, INT8U *perr)
{
   13cf8:	defff904 	addi	sp,sp,-28
   13cfc:	df000615 	stw	fp,24(sp)
   13d00:	df000604 	addi	fp,sp,24
   13d04:	e13ffd15 	stw	r4,-12(fp)
   13d08:	2805883a 	mov	r2,r5
   13d0c:	e1bfff15 	stw	r6,-4(fp)
   13d10:	e0bffe0d 	sth	r2,-8(fp)
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   13d14:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
   13d18:	e0bfff17 	ldw	r2,-4(fp)
   13d1c:	10003126 	beq	r2,zero,13de4 <OSSemSet+0xec>
        return;
    }
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
   13d20:	e0bffd17 	ldw	r2,-12(fp)
   13d24:	1000041e 	bne	r2,zero,13d38 <OSSemSet+0x40>
        *perr = OS_ERR_PEVENT_NULL;
   13d28:	e0bfff17 	ldw	r2,-4(fp)
   13d2c:	00c00104 	movi	r3,4
   13d30:	10c00005 	stb	r3,0(r2)
        return;
   13d34:	00002c06 	br	13de8 <OSSemSet+0xf0>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
   13d38:	e0bffd17 	ldw	r2,-12(fp)
   13d3c:	10800003 	ldbu	r2,0(r2)
   13d40:	10803fcc 	andi	r2,r2,255
   13d44:	108000e0 	cmpeqi	r2,r2,3
   13d48:	1000041e 	bne	r2,zero,13d5c <OSSemSet+0x64>
        *perr = OS_ERR_EVENT_TYPE;
   13d4c:	e0bfff17 	ldw	r2,-4(fp)
   13d50:	00c00044 	movi	r3,1
   13d54:	10c00005 	stb	r3,0(r2)
        return;
   13d58:	00002306 	br	13de8 <OSSemSet+0xf0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   13d5c:	0005303a 	rdctl	r2,status
   13d60:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   13d64:	e0fffc17 	ldw	r3,-16(fp)
   13d68:	00bfff84 	movi	r2,-2
   13d6c:	1884703a 	and	r2,r3,r2
   13d70:	1001703a 	wrctl	status,r2
  
  return context;
   13d74:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
   13d78:	e0bffa15 	stw	r2,-24(fp)
    *perr = OS_ERR_NONE;
   13d7c:	e0bfff17 	ldw	r2,-4(fp)
   13d80:	10000005 	stb	zero,0(r2)
    if (pevent->OSEventCnt > 0) {                     /* See if semaphore already has a count          */
   13d84:	e0bffd17 	ldw	r2,-12(fp)
   13d88:	1080020b 	ldhu	r2,8(r2)
   13d8c:	10bfffcc 	andi	r2,r2,65535
   13d90:	10000426 	beq	r2,zero,13da4 <OSSemSet+0xac>
        pevent->OSEventCnt = cnt;                     /* Yes, set it to the new value specified.       */
   13d94:	e0bffd17 	ldw	r2,-12(fp)
   13d98:	e0fffe0b 	ldhu	r3,-8(fp)
   13d9c:	10c0020d 	sth	r3,8(r2)
   13da0:	00000b06 	br	13dd0 <OSSemSet+0xd8>
    } else {                                          /* No                                            */
        if (pevent->OSEventGrp == 0) {                /*      See if task(s) waiting?                  */
   13da4:	e0bffd17 	ldw	r2,-12(fp)
   13da8:	10800283 	ldbu	r2,10(r2)
   13dac:	10803fcc 	andi	r2,r2,255
   13db0:	1000041e 	bne	r2,zero,13dc4 <OSSemSet+0xcc>
            pevent->OSEventCnt = cnt;                 /*      No, OK to set the value                  */
   13db4:	e0bffd17 	ldw	r2,-12(fp)
   13db8:	e0fffe0b 	ldhu	r3,-8(fp)
   13dbc:	10c0020d 	sth	r3,8(r2)
   13dc0:	00000306 	br	13dd0 <OSSemSet+0xd8>
        } else {
            *perr              = OS_ERR_TASK_WAITING;
   13dc4:	e0bfff17 	ldw	r2,-4(fp)
   13dc8:	00c01244 	movi	r3,73
   13dcc:	10c00005 	stb	r3,0(r2)
   13dd0:	e0bffa17 	ldw	r2,-24(fp)
   13dd4:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   13dd8:	e0bffb17 	ldw	r2,-20(fp)
   13ddc:	1001703a 	wrctl	status,r2
   13de0:	00000106 	br	13de8 <OSSemSet+0xf0>



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
        return;
   13de4:	0001883a 	nop
        } else {
            *perr              = OS_ERR_TASK_WAITING;
        }
    }
    OS_EXIT_CRITICAL();
}
   13de8:	e037883a 	mov	sp,fp
   13dec:	df000017 	ldw	fp,0(sp)
   13df0:	dec00104 	addi	sp,sp,4
   13df4:	f800283a 	ret

00013df8 <OSTaskChangePrio>:
*********************************************************************************************************
*/

#if OS_TASK_CHANGE_PRIO_EN > 0
INT8U  OSTaskChangePrio (INT8U oldprio, INT8U newprio)
{
   13df8:	defff104 	addi	sp,sp,-60
   13dfc:	dfc00e15 	stw	ra,56(sp)
   13e00:	df000d15 	stw	fp,52(sp)
   13e04:	df000d04 	addi	fp,sp,52
   13e08:	2007883a 	mov	r3,r4
   13e0c:	2805883a 	mov	r2,r5
   13e10:	e0fffe05 	stb	r3,-8(fp)
   13e14:	e0bfff05 	stb	r2,-4(fp)
    INT16U     bitx_new;
    INT16U     bity_old;
    INT16U     bitx_old;
#endif
#if OS_CRITICAL_METHOD == 3
    OS_CPU_SR  cpu_sr = 0;                                  /* Storage for CPU status register         */
   13e18:	e03ff515 	stw	zero,-44(fp)
#endif


/*$PAGE*/
#if OS_ARG_CHK_EN > 0
    if (oldprio >= OS_LOWEST_PRIO) {
   13e1c:	e0bffe03 	ldbu	r2,-8(fp)
   13e20:	10800530 	cmpltui	r2,r2,20
   13e24:	1000051e 	bne	r2,zero,13e3c <OSTaskChangePrio+0x44>
        if (oldprio != OS_PRIO_SELF) {
   13e28:	e0bffe03 	ldbu	r2,-8(fp)
   13e2c:	10803fe0 	cmpeqi	r2,r2,255
   13e30:	1000021e 	bne	r2,zero,13e3c <OSTaskChangePrio+0x44>
            return (OS_ERR_PRIO_INVALID);
   13e34:	00800a84 	movi	r2,42
   13e38:	00012606 	br	142d4 <OSTaskChangePrio+0x4dc>
        }
    }
    if (newprio >= OS_LOWEST_PRIO) {
   13e3c:	e0bfff03 	ldbu	r2,-4(fp)
   13e40:	10800530 	cmpltui	r2,r2,20
   13e44:	1000021e 	bne	r2,zero,13e50 <OSTaskChangePrio+0x58>
        return (OS_ERR_PRIO_INVALID);
   13e48:	00800a84 	movi	r2,42
   13e4c:	00012106 	br	142d4 <OSTaskChangePrio+0x4dc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   13e50:	0005303a 	rdctl	r2,status
   13e54:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   13e58:	e0fffd17 	ldw	r3,-12(fp)
   13e5c:	00bfff84 	movi	r2,-2
   13e60:	1884703a 	and	r2,r3,r2
   13e64:	1001703a 	wrctl	status,r2
  
  return context;
   13e68:	e0bffd17 	ldw	r2,-12(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   13e6c:	e0bff515 	stw	r2,-44(fp)
    if (OSTCBPrioTbl[newprio] != (OS_TCB *)0) {             /* New priority must not already exist     */
   13e70:	e0ffff03 	ldbu	r3,-4(fp)
   13e74:	008000b4 	movhi	r2,2
   13e78:	10be9904 	addi	r2,r2,-1436
   13e7c:	18c7883a 	add	r3,r3,r3
   13e80:	18c7883a 	add	r3,r3,r3
   13e84:	10c5883a 	add	r2,r2,r3
   13e88:	10800017 	ldw	r2,0(r2)
   13e8c:	10000626 	beq	r2,zero,13ea8 <OSTaskChangePrio+0xb0>
   13e90:	e0bff517 	ldw	r2,-44(fp)
   13e94:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   13e98:	e0bff617 	ldw	r2,-40(fp)
   13e9c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_PRIO_EXIST);
   13ea0:	00800a04 	movi	r2,40
   13ea4:	00010b06 	br	142d4 <OSTaskChangePrio+0x4dc>
    }
    if (oldprio == OS_PRIO_SELF) {                          /* See if changing self                    */
   13ea8:	e0bffe03 	ldbu	r2,-8(fp)
   13eac:	10803fd8 	cmpnei	r2,r2,255
   13eb0:	1000031e 	bne	r2,zero,13ec0 <OSTaskChangePrio+0xc8>
        oldprio = OSTCBCur->OSTCBPrio;                      /* Yes, get priority                       */
   13eb4:	d0a72f17 	ldw	r2,-25412(gp)
   13eb8:	10800c83 	ldbu	r2,50(r2)
   13ebc:	e0bffe05 	stb	r2,-8(fp)
    }
    ptcb = OSTCBPrioTbl[oldprio];
   13ec0:	e0fffe03 	ldbu	r3,-8(fp)
   13ec4:	008000b4 	movhi	r2,2
   13ec8:	10be9904 	addi	r2,r2,-1436
   13ecc:	18c7883a 	add	r3,r3,r3
   13ed0:	18c7883a 	add	r3,r3,r3
   13ed4:	10c5883a 	add	r2,r2,r3
   13ed8:	10800017 	ldw	r2,0(r2)
   13edc:	e0bff815 	stw	r2,-32(fp)
    if (ptcb == (OS_TCB *)0) {                              /* Does task to change exist?              */
   13ee0:	e0bff817 	ldw	r2,-32(fp)
   13ee4:	1000061e 	bne	r2,zero,13f00 <OSTaskChangePrio+0x108>
   13ee8:	e0bff517 	ldw	r2,-44(fp)
   13eec:	e0bff715 	stw	r2,-36(fp)
   13ef0:	e0bff717 	ldw	r2,-36(fp)
   13ef4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                                 /* No, can't change its priority!          */
        return (OS_ERR_PRIO);
   13ef8:	00800a44 	movi	r2,41
   13efc:	0000f506 	br	142d4 <OSTaskChangePrio+0x4dc>
    }
    if (ptcb == OS_TCB_RESERVED) {                          /* Is task assigned to Mutex               */
   13f00:	e0bff817 	ldw	r2,-32(fp)
   13f04:	10800058 	cmpnei	r2,r2,1
   13f08:	1000061e 	bne	r2,zero,13f24 <OSTaskChangePrio+0x12c>
   13f0c:	e0bff517 	ldw	r2,-44(fp)
   13f10:	e0bff915 	stw	r2,-28(fp)
   13f14:	e0bff917 	ldw	r2,-28(fp)
   13f18:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                                 /* No, can't change its priority!          */
        return (OS_ERR_TASK_NOT_EXIST);
   13f1c:	008010c4 	movi	r2,67
   13f20:	0000ec06 	br	142d4 <OSTaskChangePrio+0x4dc>
    }
#if OS_LOWEST_PRIO <= 63
    y_new                 = (INT8U)(newprio >> 3);          /* Yes, compute new TCB fields             */
   13f24:	e0bfff03 	ldbu	r2,-4(fp)
   13f28:	1004d0fa 	srli	r2,r2,3
   13f2c:	e0bffb05 	stb	r2,-20(fp)
    x_new                 = (INT8U)(newprio & 0x07);
   13f30:	e0bfff03 	ldbu	r2,-4(fp)
   13f34:	108001cc 	andi	r2,r2,7
   13f38:	e0bffb45 	stb	r2,-19(fp)
    bity_new              = (INT8U)(1 << y_new);
   13f3c:	e0bffb03 	ldbu	r2,-20(fp)
   13f40:	00c00044 	movi	r3,1
   13f44:	1884983a 	sll	r2,r3,r2
   13f48:	e0bffb85 	stb	r2,-18(fp)
    bitx_new              = (INT8U)(1 << x_new);
   13f4c:	e0bffb43 	ldbu	r2,-19(fp)
   13f50:	00c00044 	movi	r3,1
   13f54:	1884983a 	sll	r2,r3,r2
   13f58:	e0bffbc5 	stb	r2,-17(fp)
    x_new                 = (INT8U)( newprio & 0x0F);
    bity_new              = (INT16U)(1 << y_new);
    bitx_new              = (INT16U)(1 << x_new);
#endif

    OSTCBPrioTbl[oldprio] = (OS_TCB *)0;                    /* Remove TCB from old priority            */
   13f5c:	e0fffe03 	ldbu	r3,-8(fp)
   13f60:	008000b4 	movhi	r2,2
   13f64:	10be9904 	addi	r2,r2,-1436
   13f68:	18c7883a 	add	r3,r3,r3
   13f6c:	18c7883a 	add	r3,r3,r3
   13f70:	10c5883a 	add	r2,r2,r3
   13f74:	10000015 	stw	zero,0(r2)
    OSTCBPrioTbl[newprio] =  ptcb;                          /* Place pointer to TCB @ new priority     */
   13f78:	e0ffff03 	ldbu	r3,-4(fp)
   13f7c:	008000b4 	movhi	r2,2
   13f80:	10be9904 	addi	r2,r2,-1436
   13f84:	18c7883a 	add	r3,r3,r3
   13f88:	18c7883a 	add	r3,r3,r3
   13f8c:	10c5883a 	add	r2,r2,r3
   13f90:	e0fff817 	ldw	r3,-32(fp)
   13f94:	10c00015 	stw	r3,0(r2)
    y_old                 =  ptcb->OSTCBY;
   13f98:	e0bff817 	ldw	r2,-32(fp)
   13f9c:	10800d03 	ldbu	r2,52(r2)
   13fa0:	e0bffc05 	stb	r2,-16(fp)
    bity_old              =  ptcb->OSTCBBitY;
   13fa4:	e0bff817 	ldw	r2,-32(fp)
   13fa8:	10800d83 	ldbu	r2,54(r2)
   13fac:	e0bffc45 	stb	r2,-15(fp)
    bitx_old              =  ptcb->OSTCBBitX;
   13fb0:	e0bff817 	ldw	r2,-32(fp)
   13fb4:	10800d43 	ldbu	r2,53(r2)
   13fb8:	e0bffc85 	stb	r2,-14(fp)
    if ((OSRdyTbl[y_old] &   bitx_old) != 0) {              /* If task is ready make it not            */
   13fbc:	e0fffc03 	ldbu	r3,-16(fp)
   13fc0:	d0a72c44 	addi	r2,gp,-25423
   13fc4:	1885883a 	add	r2,r3,r2
   13fc8:	10c00003 	ldbu	r3,0(r2)
   13fcc:	e0bffc83 	ldbu	r2,-14(fp)
   13fd0:	1884703a 	and	r2,r3,r2
   13fd4:	10803fcc 	andi	r2,r2,255
   13fd8:	10002826 	beq	r2,zero,1407c <OSTaskChangePrio+0x284>
         OSRdyTbl[y_old] &= ~bitx_old;
   13fdc:	e0fffc03 	ldbu	r3,-16(fp)
   13fe0:	e13ffc03 	ldbu	r4,-16(fp)
   13fe4:	d0a72c44 	addi	r2,gp,-25423
   13fe8:	2085883a 	add	r2,r4,r2
   13fec:	10800003 	ldbu	r2,0(r2)
   13ff0:	1009883a 	mov	r4,r2
   13ff4:	e0bffc83 	ldbu	r2,-14(fp)
   13ff8:	0084303a 	nor	r2,zero,r2
   13ffc:	2084703a 	and	r2,r4,r2
   14000:	1009883a 	mov	r4,r2
   14004:	d0a72c44 	addi	r2,gp,-25423
   14008:	1885883a 	add	r2,r3,r2
   1400c:	11000005 	stb	r4,0(r2)
         if (OSRdyTbl[y_old] == 0) {
   14010:	e0fffc03 	ldbu	r3,-16(fp)
   14014:	d0a72c44 	addi	r2,gp,-25423
   14018:	1885883a 	add	r2,r3,r2
   1401c:	10800003 	ldbu	r2,0(r2)
   14020:	10803fcc 	andi	r2,r2,255
   14024:	1000061e 	bne	r2,zero,14040 <OSTaskChangePrio+0x248>
             OSRdyGrp &= ~bity_old;
   14028:	e0bffc43 	ldbu	r2,-15(fp)
   1402c:	0084303a 	nor	r2,zero,r2
   14030:	1007883a 	mov	r3,r2
   14034:	d0a72c03 	ldbu	r2,-25424(gp)
   14038:	1884703a 	and	r2,r3,r2
   1403c:	d0a72c05 	stb	r2,-25424(gp)
         }
         OSRdyGrp        |= bity_new;                       /* Make new priority ready to run          */
   14040:	d0e72c03 	ldbu	r3,-25424(gp)
   14044:	e0bffb83 	ldbu	r2,-18(fp)
   14048:	1884b03a 	or	r2,r3,r2
   1404c:	d0a72c05 	stb	r2,-25424(gp)
         OSRdyTbl[y_new] |= bitx_new;
   14050:	e0fffb03 	ldbu	r3,-20(fp)
   14054:	e13ffb03 	ldbu	r4,-20(fp)
   14058:	d0a72c44 	addi	r2,gp,-25423
   1405c:	2085883a 	add	r2,r4,r2
   14060:	11000003 	ldbu	r4,0(r2)
   14064:	e0bffbc3 	ldbu	r2,-17(fp)
   14068:	2084b03a 	or	r2,r4,r2
   1406c:	1009883a 	mov	r4,r2
   14070:	d0a72c44 	addi	r2,gp,-25423
   14074:	1885883a 	add	r2,r3,r2
   14078:	11000005 	stb	r4,0(r2)
    }

#if (OS_EVENT_EN)
    pevent = ptcb->OSTCBEventPtr;
   1407c:	e0bff817 	ldw	r2,-32(fp)
   14080:	10800717 	ldw	r2,28(r2)
   14084:	e0bff315 	stw	r2,-52(fp)
    if (pevent != (OS_EVENT *)0) {
   14088:	e0bff317 	ldw	r2,-52(fp)
   1408c:	10003326 	beq	r2,zero,1415c <OSTaskChangePrio+0x364>
        pevent->OSEventTbl[y_old] &= ~bitx_old;             /* Remove old task prio from wait list     */
   14090:	e0bffc03 	ldbu	r2,-16(fp)
   14094:	e0fffc03 	ldbu	r3,-16(fp)
   14098:	e13ff317 	ldw	r4,-52(fp)
   1409c:	20c7883a 	add	r3,r4,r3
   140a0:	18c002c4 	addi	r3,r3,11
   140a4:	18c00003 	ldbu	r3,0(r3)
   140a8:	1809883a 	mov	r4,r3
   140ac:	e0fffc83 	ldbu	r3,-14(fp)
   140b0:	00c6303a 	nor	r3,zero,r3
   140b4:	20c6703a 	and	r3,r4,r3
   140b8:	1809883a 	mov	r4,r3
   140bc:	e0fff317 	ldw	r3,-52(fp)
   140c0:	1885883a 	add	r2,r3,r2
   140c4:	108002c4 	addi	r2,r2,11
   140c8:	11000005 	stb	r4,0(r2)
        if (pevent->OSEventTbl[y_old] == 0) {
   140cc:	e0bffc03 	ldbu	r2,-16(fp)
   140d0:	e0fff317 	ldw	r3,-52(fp)
   140d4:	1885883a 	add	r2,r3,r2
   140d8:	108002c4 	addi	r2,r2,11
   140dc:	10800003 	ldbu	r2,0(r2)
   140e0:	10803fcc 	andi	r2,r2,255
   140e4:	1000091e 	bne	r2,zero,1410c <OSTaskChangePrio+0x314>
            pevent->OSEventGrp    &= ~bity_old;
   140e8:	e0bff317 	ldw	r2,-52(fp)
   140ec:	10800283 	ldbu	r2,10(r2)
   140f0:	1007883a 	mov	r3,r2
   140f4:	e0bffc43 	ldbu	r2,-15(fp)
   140f8:	0084303a 	nor	r2,zero,r2
   140fc:	1884703a 	and	r2,r3,r2
   14100:	1007883a 	mov	r3,r2
   14104:	e0bff317 	ldw	r2,-52(fp)
   14108:	10c00285 	stb	r3,10(r2)
        }
        pevent->OSEventGrp        |= bity_new;              /* Add    new task prio to   wait list     */
   1410c:	e0bff317 	ldw	r2,-52(fp)
   14110:	10c00283 	ldbu	r3,10(r2)
   14114:	e0bffb83 	ldbu	r2,-18(fp)
   14118:	1884b03a 	or	r2,r3,r2
   1411c:	1007883a 	mov	r3,r2
   14120:	e0bff317 	ldw	r2,-52(fp)
   14124:	10c00285 	stb	r3,10(r2)
        pevent->OSEventTbl[y_new] |= bitx_new;
   14128:	e0bffb03 	ldbu	r2,-20(fp)
   1412c:	e0fffb03 	ldbu	r3,-20(fp)
   14130:	e13ff317 	ldw	r4,-52(fp)
   14134:	20c7883a 	add	r3,r4,r3
   14138:	18c002c4 	addi	r3,r3,11
   1413c:	19000003 	ldbu	r4,0(r3)
   14140:	e0fffbc3 	ldbu	r3,-17(fp)
   14144:	20c6b03a 	or	r3,r4,r3
   14148:	1809883a 	mov	r4,r3
   1414c:	e0fff317 	ldw	r3,-52(fp)
   14150:	1885883a 	add	r2,r3,r2
   14154:	108002c4 	addi	r2,r2,11
   14158:	11000005 	stb	r4,0(r2)
    }
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {
   1415c:	e0bff817 	ldw	r2,-32(fp)
   14160:	10800817 	ldw	r2,32(r2)
   14164:	10004226 	beq	r2,zero,14270 <OSTaskChangePrio+0x478>
        pevents =  ptcb->OSTCBEventMultiPtr;
   14168:	e0bff817 	ldw	r2,-32(fp)
   1416c:	10800817 	ldw	r2,32(r2)
   14170:	e0bff415 	stw	r2,-48(fp)
        pevent  = *pevents;
   14174:	e0bff417 	ldw	r2,-48(fp)
   14178:	10800017 	ldw	r2,0(r2)
   1417c:	e0bff315 	stw	r2,-52(fp)
        while (pevent != (OS_EVENT *)0) {
   14180:	00003906 	br	14268 <OSTaskChangePrio+0x470>
            pevent->OSEventTbl[y_old] &= ~bitx_old;         /* Remove old task prio from wait lists    */
   14184:	e0bffc03 	ldbu	r2,-16(fp)
   14188:	e0fffc03 	ldbu	r3,-16(fp)
   1418c:	e13ff317 	ldw	r4,-52(fp)
   14190:	20c7883a 	add	r3,r4,r3
   14194:	18c002c4 	addi	r3,r3,11
   14198:	18c00003 	ldbu	r3,0(r3)
   1419c:	1809883a 	mov	r4,r3
   141a0:	e0fffc83 	ldbu	r3,-14(fp)
   141a4:	00c6303a 	nor	r3,zero,r3
   141a8:	20c6703a 	and	r3,r4,r3
   141ac:	1809883a 	mov	r4,r3
   141b0:	e0fff317 	ldw	r3,-52(fp)
   141b4:	1885883a 	add	r2,r3,r2
   141b8:	108002c4 	addi	r2,r2,11
   141bc:	11000005 	stb	r4,0(r2)
            if (pevent->OSEventTbl[y_old] == 0) {
   141c0:	e0bffc03 	ldbu	r2,-16(fp)
   141c4:	e0fff317 	ldw	r3,-52(fp)
   141c8:	1885883a 	add	r2,r3,r2
   141cc:	108002c4 	addi	r2,r2,11
   141d0:	10800003 	ldbu	r2,0(r2)
   141d4:	10803fcc 	andi	r2,r2,255
   141d8:	1000091e 	bne	r2,zero,14200 <OSTaskChangePrio+0x408>
                pevent->OSEventGrp    &= ~bity_old;
   141dc:	e0bff317 	ldw	r2,-52(fp)
   141e0:	10800283 	ldbu	r2,10(r2)
   141e4:	1007883a 	mov	r3,r2
   141e8:	e0bffc43 	ldbu	r2,-15(fp)
   141ec:	0084303a 	nor	r2,zero,r2
   141f0:	1884703a 	and	r2,r3,r2
   141f4:	1007883a 	mov	r3,r2
   141f8:	e0bff317 	ldw	r2,-52(fp)
   141fc:	10c00285 	stb	r3,10(r2)
            }
            pevent->OSEventGrp        |= bity_new;          /* Add    new task prio to   wait lists    */
   14200:	e0bff317 	ldw	r2,-52(fp)
   14204:	10c00283 	ldbu	r3,10(r2)
   14208:	e0bffb83 	ldbu	r2,-18(fp)
   1420c:	1884b03a 	or	r2,r3,r2
   14210:	1007883a 	mov	r3,r2
   14214:	e0bff317 	ldw	r2,-52(fp)
   14218:	10c00285 	stb	r3,10(r2)
            pevent->OSEventTbl[y_new] |= bitx_new;
   1421c:	e0bffb03 	ldbu	r2,-20(fp)
   14220:	e0fffb03 	ldbu	r3,-20(fp)
   14224:	e13ff317 	ldw	r4,-52(fp)
   14228:	20c7883a 	add	r3,r4,r3
   1422c:	18c002c4 	addi	r3,r3,11
   14230:	19000003 	ldbu	r4,0(r3)
   14234:	e0fffbc3 	ldbu	r3,-17(fp)
   14238:	20c6b03a 	or	r3,r4,r3
   1423c:	1809883a 	mov	r4,r3
   14240:	e0fff317 	ldw	r3,-52(fp)
   14244:	1885883a 	add	r2,r3,r2
   14248:	108002c4 	addi	r2,r2,11
   1424c:	11000005 	stb	r4,0(r2)
            pevents++;
   14250:	e0bff417 	ldw	r2,-48(fp)
   14254:	10800104 	addi	r2,r2,4
   14258:	e0bff415 	stw	r2,-48(fp)
            pevent                     = *pevents;
   1425c:	e0bff417 	ldw	r2,-48(fp)
   14260:	10800017 	ldw	r2,0(r2)
   14264:	e0bff315 	stw	r2,-52(fp)
    }
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {
        pevents =  ptcb->OSTCBEventMultiPtr;
        pevent  = *pevents;
        while (pevent != (OS_EVENT *)0) {
   14268:	e0bff317 	ldw	r2,-52(fp)
   1426c:	103fc51e 	bne	r2,zero,14184 <__alt_data_end+0xfffe4184>
        }
    }
#endif
#endif

    ptcb->OSTCBPrio = newprio;                              /* Set new task priority                   */
   14270:	e0bff817 	ldw	r2,-32(fp)
   14274:	e0ffff03 	ldbu	r3,-4(fp)
   14278:	10c00c85 	stb	r3,50(r2)
    ptcb->OSTCBY    = y_new;
   1427c:	e0bff817 	ldw	r2,-32(fp)
   14280:	e0fffb03 	ldbu	r3,-20(fp)
   14284:	10c00d05 	stb	r3,52(r2)
    ptcb->OSTCBX    = x_new;
   14288:	e0bff817 	ldw	r2,-32(fp)
   1428c:	e0fffb43 	ldbu	r3,-19(fp)
   14290:	10c00cc5 	stb	r3,51(r2)
    ptcb->OSTCBBitY = bity_new;
   14294:	e0bff817 	ldw	r2,-32(fp)
   14298:	e0fffb83 	ldbu	r3,-18(fp)
   1429c:	10c00d85 	stb	r3,54(r2)
    ptcb->OSTCBBitX = bitx_new;
   142a0:	e0bff817 	ldw	r2,-32(fp)
   142a4:	e0fffbc3 	ldbu	r3,-17(fp)
   142a8:	10c00d45 	stb	r3,53(r2)
   142ac:	e0bff517 	ldw	r2,-44(fp)
   142b0:	e0bffa15 	stw	r2,-24(fp)
   142b4:	e0bffa17 	ldw	r2,-24(fp)
   142b8:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    if (OSRunning == OS_TRUE) {
   142bc:	d0a72043 	ldbu	r2,-25471(gp)
   142c0:	10803fcc 	andi	r2,r2,255
   142c4:	10800058 	cmpnei	r2,r2,1
   142c8:	1000011e 	bne	r2,zero,142d0 <OSTaskChangePrio+0x4d8>
        OS_Sched();                                         /* Find new highest priority task          */
   142cc:	000fbbc0 	call	fbbc <OS_Sched>
    }
    return (OS_ERR_NONE);
   142d0:	0005883a 	mov	r2,zero
}
   142d4:	e037883a 	mov	sp,fp
   142d8:	dfc00117 	ldw	ra,4(sp)
   142dc:	df000017 	ldw	fp,0(sp)
   142e0:	dec00204 	addi	sp,sp,8
   142e4:	f800283a 	ret

000142e8 <OSTaskCreate>:
*********************************************************************************************************
*/

#if OS_TASK_CREATE_EN > 0
INT8U  OSTaskCreate (void (*task)(void *p_arg), void *p_arg, OS_STK *ptos, INT8U prio)
{
   142e8:	deffee04 	addi	sp,sp,-72
   142ec:	dfc01115 	stw	ra,68(sp)
   142f0:	df001015 	stw	fp,64(sp)
   142f4:	df001004 	addi	fp,sp,64
   142f8:	e13ffc15 	stw	r4,-16(fp)
   142fc:	e17ffd15 	stw	r5,-12(fp)
   14300:	e1bffe15 	stw	r6,-8(fp)
   14304:	3805883a 	mov	r2,r7
   14308:	e0bfff05 	stb	r2,-4(fp)
    OS_STK    *psp;
    INT8U      err;
#if OS_CRITICAL_METHOD == 3                  /* Allocate storage for CPU status register               */
    OS_CPU_SR  cpu_sr = 0;
   1430c:	e03ff315 	stw	zero,-52(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {             /* Make sure priority is within allowable range           */
   14310:	e0bfff03 	ldbu	r2,-4(fp)
   14314:	10800570 	cmpltui	r2,r2,21
   14318:	1000021e 	bne	r2,zero,14324 <OSTaskCreate+0x3c>
        return (OS_ERR_PRIO_INVALID);
   1431c:	00800a84 	movi	r2,42
   14320:	00005706 	br	14480 <OSTaskCreate+0x198>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   14324:	0005303a 	rdctl	r2,status
   14328:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1432c:	e0fffb17 	ldw	r3,-20(fp)
   14330:	00bfff84 	movi	r2,-2
   14334:	1884703a 	and	r2,r3,r2
   14338:	1001703a 	wrctl	status,r2
  
  return context;
   1433c:	e0bffb17 	ldw	r2,-20(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   14340:	e0bff315 	stw	r2,-52(fp)
    if (OSIntNesting > 0) {                  /* Make sure we don't create the task from within an ISR  */
   14344:	d0a72e03 	ldbu	r2,-25416(gp)
   14348:	10803fcc 	andi	r2,r2,255
   1434c:	10000626 	beq	r2,zero,14368 <OSTaskCreate+0x80>
   14350:	e0bff317 	ldw	r2,-52(fp)
   14354:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   14358:	e0bff417 	ldw	r2,-48(fp)
   1435c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_CREATE_ISR);
   14360:	00800f04 	movi	r2,60
   14364:	00004606 	br	14480 <OSTaskCreate+0x198>
    }
    if (OSTCBPrioTbl[prio] == (OS_TCB *)0) { /* Make sure task doesn't already exist at this priority  */
   14368:	e0ffff03 	ldbu	r3,-4(fp)
   1436c:	008000b4 	movhi	r2,2
   14370:	10be9904 	addi	r2,r2,-1436
   14374:	18c7883a 	add	r3,r3,r3
   14378:	18c7883a 	add	r3,r3,r3
   1437c:	10c5883a 	add	r2,r2,r3
   14380:	10800017 	ldw	r2,0(r2)
   14384:	1000391e 	bne	r2,zero,1446c <OSTaskCreate+0x184>
        OSTCBPrioTbl[prio] = OS_TCB_RESERVED;/* Reserve the priority to prevent others from doing ...  */
   14388:	e0ffff03 	ldbu	r3,-4(fp)
   1438c:	008000b4 	movhi	r2,2
   14390:	10be9904 	addi	r2,r2,-1436
   14394:	18c7883a 	add	r3,r3,r3
   14398:	18c7883a 	add	r3,r3,r3
   1439c:	10c5883a 	add	r2,r2,r3
   143a0:	00c00044 	movi	r3,1
   143a4:	10c00015 	stw	r3,0(r2)
   143a8:	e0bff317 	ldw	r2,-52(fp)
   143ac:	e0bff515 	stw	r2,-44(fp)
   143b0:	e0bff517 	ldw	r2,-44(fp)
   143b4:	1001703a 	wrctl	status,r2
                                             /* ... the same thing until task is created.              */
        OS_EXIT_CRITICAL();
        psp = OSTaskStkInit(task, p_arg, ptos, 0);              /* Initialize the task's stack         */
   143b8:	000f883a 	mov	r7,zero
   143bc:	e1bffe17 	ldw	r6,-8(fp)
   143c0:	e17ffd17 	ldw	r5,-12(fp)
   143c4:	e13ffc17 	ldw	r4,-16(fp)
   143c8:	00172ec0 	call	172ec <OSTaskStkInit>
   143cc:	e0bff715 	stw	r2,-36(fp)
        err = OS_TCBInit(prio, psp, (OS_STK *)0, 0, 0, (void *)0, 0);
   143d0:	e0bfff03 	ldbu	r2,-4(fp)
   143d4:	d8000215 	stw	zero,8(sp)
   143d8:	d8000115 	stw	zero,4(sp)
   143dc:	d8000015 	stw	zero,0(sp)
   143e0:	000f883a 	mov	r7,zero
   143e4:	000d883a 	mov	r6,zero
   143e8:	e17ff717 	ldw	r5,-36(fp)
   143ec:	1009883a 	mov	r4,r2
   143f0:	000ffbc0 	call	ffbc <OS_TCBInit>
   143f4:	e0bff805 	stb	r2,-32(fp)
        if (err == OS_ERR_NONE) {
   143f8:	e0bff803 	ldbu	r2,-32(fp)
   143fc:	1000061e 	bne	r2,zero,14418 <OSTaskCreate+0x130>
            if (OSRunning == OS_TRUE) {      /* Find highest priority task if multitasking has started */
   14400:	d0a72043 	ldbu	r2,-25471(gp)
   14404:	10803fcc 	andi	r2,r2,255
   14408:	10800058 	cmpnei	r2,r2,1
   1440c:	1000151e 	bne	r2,zero,14464 <OSTaskCreate+0x17c>
                OS_Sched();
   14410:	000fbbc0 	call	fbbc <OS_Sched>
   14414:	00001306 	br	14464 <OSTaskCreate+0x17c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   14418:	0005303a 	rdctl	r2,status
   1441c:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   14420:	e0fffa17 	ldw	r3,-24(fp)
   14424:	00bfff84 	movi	r2,-2
   14428:	1884703a 	and	r2,r3,r2
   1442c:	1001703a 	wrctl	status,r2
  
  return context;
   14430:	e0bffa17 	ldw	r2,-24(fp)
            }
        } else {
            OS_ENTER_CRITICAL();
   14434:	e0bff315 	stw	r2,-52(fp)
            OSTCBPrioTbl[prio] = (OS_TCB *)0;/* Make this priority available to others                 */
   14438:	e0ffff03 	ldbu	r3,-4(fp)
   1443c:	008000b4 	movhi	r2,2
   14440:	10be9904 	addi	r2,r2,-1436
   14444:	18c7883a 	add	r3,r3,r3
   14448:	18c7883a 	add	r3,r3,r3
   1444c:	10c5883a 	add	r2,r2,r3
   14450:	10000015 	stw	zero,0(r2)
   14454:	e0bff317 	ldw	r2,-52(fp)
   14458:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1445c:	e0bff617 	ldw	r2,-40(fp)
   14460:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
        }
        return (err);
   14464:	e0bff803 	ldbu	r2,-32(fp)
   14468:	00000506 	br	14480 <OSTaskCreate+0x198>
   1446c:	e0bff317 	ldw	r2,-52(fp)
   14470:	e0bff915 	stw	r2,-28(fp)
   14474:	e0bff917 	ldw	r2,-28(fp)
   14478:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_PRIO_EXIST);
   1447c:	00800a04 	movi	r2,40
}
   14480:	e037883a 	mov	sp,fp
   14484:	dfc00117 	ldw	ra,4(sp)
   14488:	df000017 	ldw	fp,0(sp)
   1448c:	dec00204 	addi	sp,sp,8
   14490:	f800283a 	ret

00014494 <OSTaskCreateExt>:
                        INT16U   id,
                        OS_STK  *pbos,
                        INT32U   stk_size,
                        void    *pext,
                        INT16U   opt)
{
   14494:	deffec04 	addi	sp,sp,-80
   14498:	dfc01315 	stw	ra,76(sp)
   1449c:	df001215 	stw	fp,72(sp)
   144a0:	df001204 	addi	fp,sp,72
   144a4:	e13ffa15 	stw	r4,-24(fp)
   144a8:	e17ffb15 	stw	r5,-20(fp)
   144ac:	e1bffc15 	stw	r6,-16(fp)
   144b0:	3809883a 	mov	r4,r7
   144b4:	e0c00217 	ldw	r3,8(fp)
   144b8:	e0800617 	ldw	r2,24(fp)
   144bc:	e13ffd05 	stb	r4,-12(fp)
   144c0:	e0fffe0d 	sth	r3,-8(fp)
   144c4:	e0bfff0d 	sth	r2,-4(fp)
    OS_STK    *psp;
    INT8U      err;
#if OS_CRITICAL_METHOD == 3                  /* Allocate storage for CPU status register               */
    OS_CPU_SR  cpu_sr = 0;
   144c8:	e03ff115 	stw	zero,-60(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {             /* Make sure priority is within allowable range           */
   144cc:	e0bffd03 	ldbu	r2,-12(fp)
   144d0:	10800570 	cmpltui	r2,r2,21
   144d4:	1000021e 	bne	r2,zero,144e0 <OSTaskCreateExt+0x4c>
        return (OS_ERR_PRIO_INVALID);
   144d8:	00800a84 	movi	r2,42
   144dc:	00006106 	br	14664 <OSTaskCreateExt+0x1d0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   144e0:	0005303a 	rdctl	r2,status
   144e4:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   144e8:	e0fff917 	ldw	r3,-28(fp)
   144ec:	00bfff84 	movi	r2,-2
   144f0:	1884703a 	and	r2,r3,r2
   144f4:	1001703a 	wrctl	status,r2
  
  return context;
   144f8:	e0bff917 	ldw	r2,-28(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   144fc:	e0bff115 	stw	r2,-60(fp)
    if (OSIntNesting > 0) {                  /* Make sure we don't create the task from within an ISR  */
   14500:	d0a72e03 	ldbu	r2,-25416(gp)
   14504:	10803fcc 	andi	r2,r2,255
   14508:	10000626 	beq	r2,zero,14524 <OSTaskCreateExt+0x90>
   1450c:	e0bff117 	ldw	r2,-60(fp)
   14510:	e0bff215 	stw	r2,-56(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   14514:	e0bff217 	ldw	r2,-56(fp)
   14518:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_CREATE_ISR);
   1451c:	00800f04 	movi	r2,60
   14520:	00005006 	br	14664 <OSTaskCreateExt+0x1d0>
    }
    if (OSTCBPrioTbl[prio] == (OS_TCB *)0) { /* Make sure task doesn't already exist at this priority  */
   14524:	e0fffd03 	ldbu	r3,-12(fp)
   14528:	008000b4 	movhi	r2,2
   1452c:	10be9904 	addi	r2,r2,-1436
   14530:	18c7883a 	add	r3,r3,r3
   14534:	18c7883a 	add	r3,r3,r3
   14538:	10c5883a 	add	r2,r2,r3
   1453c:	10800017 	ldw	r2,0(r2)
   14540:	1000431e 	bne	r2,zero,14650 <OSTaskCreateExt+0x1bc>
        OSTCBPrioTbl[prio] = OS_TCB_RESERVED;/* Reserve the priority to prevent others from doing ...  */
   14544:	e0fffd03 	ldbu	r3,-12(fp)
   14548:	008000b4 	movhi	r2,2
   1454c:	10be9904 	addi	r2,r2,-1436
   14550:	18c7883a 	add	r3,r3,r3
   14554:	18c7883a 	add	r3,r3,r3
   14558:	10c5883a 	add	r2,r2,r3
   1455c:	00c00044 	movi	r3,1
   14560:	10c00015 	stw	r3,0(r2)
   14564:	e0bff117 	ldw	r2,-60(fp)
   14568:	e0bff315 	stw	r2,-52(fp)
   1456c:	e0bff317 	ldw	r2,-52(fp)
   14570:	1001703a 	wrctl	status,r2
                                             /* ... the same thing until task is created.              */
        OS_EXIT_CRITICAL();

#if (OS_TASK_STAT_STK_CHK_EN > 0)
        OS_TaskStkClr(pbos, stk_size, opt);                    /* Clear the task stack (if needed)     */
   14574:	e0bfff0b 	ldhu	r2,-4(fp)
   14578:	100d883a 	mov	r6,r2
   1457c:	e1400417 	ldw	r5,16(fp)
   14580:	e1000317 	ldw	r4,12(fp)
   14584:	00154f40 	call	154f4 <OS_TaskStkClr>
#endif

        psp = OSTaskStkInit(task, p_arg, ptos, opt);           /* Initialize the task's stack          */
   14588:	e0bfff0b 	ldhu	r2,-4(fp)
   1458c:	100f883a 	mov	r7,r2
   14590:	e1bffc17 	ldw	r6,-16(fp)
   14594:	e17ffb17 	ldw	r5,-20(fp)
   14598:	e13ffa17 	ldw	r4,-24(fp)
   1459c:	00172ec0 	call	172ec <OSTaskStkInit>
   145a0:	e0bff515 	stw	r2,-44(fp)
        err = OS_TCBInit(prio, psp, pbos, id, stk_size, pext, opt);
   145a4:	e0fffd03 	ldbu	r3,-12(fp)
   145a8:	e13ffe0b 	ldhu	r4,-8(fp)
   145ac:	e0bfff0b 	ldhu	r2,-4(fp)
   145b0:	d8800215 	stw	r2,8(sp)
   145b4:	e0800517 	ldw	r2,20(fp)
   145b8:	d8800115 	stw	r2,4(sp)
   145bc:	e0800417 	ldw	r2,16(fp)
   145c0:	d8800015 	stw	r2,0(sp)
   145c4:	200f883a 	mov	r7,r4
   145c8:	e1800317 	ldw	r6,12(fp)
   145cc:	e17ff517 	ldw	r5,-44(fp)
   145d0:	1809883a 	mov	r4,r3
   145d4:	000ffbc0 	call	ffbc <OS_TCBInit>
   145d8:	e0bff605 	stb	r2,-40(fp)
        if (err == OS_ERR_NONE) {
   145dc:	e0bff603 	ldbu	r2,-40(fp)
   145e0:	1000061e 	bne	r2,zero,145fc <OSTaskCreateExt+0x168>
            if (OSRunning == OS_TRUE) {                        /* Find HPT if multitasking has started */
   145e4:	d0a72043 	ldbu	r2,-25471(gp)
   145e8:	10803fcc 	andi	r2,r2,255
   145ec:	10800058 	cmpnei	r2,r2,1
   145f0:	1000151e 	bne	r2,zero,14648 <OSTaskCreateExt+0x1b4>
                OS_Sched();
   145f4:	000fbbc0 	call	fbbc <OS_Sched>
   145f8:	00001306 	br	14648 <OSTaskCreateExt+0x1b4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   145fc:	0005303a 	rdctl	r2,status
   14600:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   14604:	e0fff817 	ldw	r3,-32(fp)
   14608:	00bfff84 	movi	r2,-2
   1460c:	1884703a 	and	r2,r3,r2
   14610:	1001703a 	wrctl	status,r2
  
  return context;
   14614:	e0bff817 	ldw	r2,-32(fp)
            }
        } else {
            OS_ENTER_CRITICAL();
   14618:	e0bff115 	stw	r2,-60(fp)
            OSTCBPrioTbl[prio] = (OS_TCB *)0;                  /* Make this priority avail. to others  */
   1461c:	e0fffd03 	ldbu	r3,-12(fp)
   14620:	008000b4 	movhi	r2,2
   14624:	10be9904 	addi	r2,r2,-1436
   14628:	18c7883a 	add	r3,r3,r3
   1462c:	18c7883a 	add	r3,r3,r3
   14630:	10c5883a 	add	r2,r2,r3
   14634:	10000015 	stw	zero,0(r2)
   14638:	e0bff117 	ldw	r2,-60(fp)
   1463c:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   14640:	e0bff417 	ldw	r2,-48(fp)
   14644:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
        }
        return (err);
   14648:	e0bff603 	ldbu	r2,-40(fp)
   1464c:	00000506 	br	14664 <OSTaskCreateExt+0x1d0>
   14650:	e0bff117 	ldw	r2,-60(fp)
   14654:	e0bff715 	stw	r2,-36(fp)
   14658:	e0bff717 	ldw	r2,-36(fp)
   1465c:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_PRIO_EXIST);
   14660:	00800a04 	movi	r2,40
}
   14664:	e037883a 	mov	sp,fp
   14668:	dfc00117 	ldw	ra,4(sp)
   1466c:	df000017 	ldw	fp,0(sp)
   14670:	dec00204 	addi	sp,sp,8
   14674:	f800283a 	ret

00014678 <OSTaskDel>:
*********************************************************************************************************
*/

#if OS_TASK_DEL_EN > 0
INT8U  OSTaskDel (INT8U prio)
{
   14678:	defff404 	addi	sp,sp,-48
   1467c:	dfc00b15 	stw	ra,44(sp)
   14680:	df000a15 	stw	fp,40(sp)
   14684:	df000a04 	addi	fp,sp,40
   14688:	2005883a 	mov	r2,r4
   1468c:	e0bfff05 	stb	r2,-4(fp)
#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0)
    OS_FLAG_NODE *pnode;
#endif
    OS_TCB       *ptcb;
#if OS_CRITICAL_METHOD == 3                             /* Allocate storage for CPU status register    */
    OS_CPU_SR     cpu_sr = 0;
   14690:	e03ff615 	stw	zero,-40(fp)
#endif



    if (OSIntNesting > 0) {                             /* See if trying to delete from ISR            */
   14694:	d0a72e03 	ldbu	r2,-25416(gp)
   14698:	10803fcc 	andi	r2,r2,255
   1469c:	10000226 	beq	r2,zero,146a8 <OSTaskDel+0x30>
        return (OS_ERR_TASK_DEL_ISR);
   146a0:	00801004 	movi	r2,64
   146a4:	0000c006 	br	149a8 <OSTaskDel+0x330>
    }
    if (prio == OS_TASK_IDLE_PRIO) {                    /* Not allowed to delete idle task             */
   146a8:	e0bfff03 	ldbu	r2,-4(fp)
   146ac:	10800518 	cmpnei	r2,r2,20
   146b0:	1000021e 	bne	r2,zero,146bc <OSTaskDel+0x44>
        return (OS_ERR_TASK_DEL_IDLE);
   146b4:	00800f84 	movi	r2,62
   146b8:	0000bb06 	br	149a8 <OSTaskDel+0x330>
    }
#if OS_ARG_CHK_EN > 0
    if (prio >= OS_LOWEST_PRIO) {                       /* Task priority valid ?                       */
   146bc:	e0bfff03 	ldbu	r2,-4(fp)
   146c0:	10800530 	cmpltui	r2,r2,20
   146c4:	1000051e 	bne	r2,zero,146dc <OSTaskDel+0x64>
        if (prio != OS_PRIO_SELF) {
   146c8:	e0bfff03 	ldbu	r2,-4(fp)
   146cc:	10803fe0 	cmpeqi	r2,r2,255
   146d0:	1000021e 	bne	r2,zero,146dc <OSTaskDel+0x64>
            return (OS_ERR_PRIO_INVALID);
   146d4:	00800a84 	movi	r2,42
   146d8:	0000b306 	br	149a8 <OSTaskDel+0x330>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   146dc:	0005303a 	rdctl	r2,status
   146e0:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   146e4:	e0fffe17 	ldw	r3,-8(fp)
   146e8:	00bfff84 	movi	r2,-2
   146ec:	1884703a 	and	r2,r3,r2
   146f0:	1001703a 	wrctl	status,r2
  
  return context;
   146f4:	e0bffe17 	ldw	r2,-8(fp)
        }
    }
#endif

/*$PAGE*/
    OS_ENTER_CRITICAL();
   146f8:	e0bff615 	stw	r2,-40(fp)
    if (prio == OS_PRIO_SELF) {                         /* See if requesting to delete self            */
   146fc:	e0bfff03 	ldbu	r2,-4(fp)
   14700:	10803fd8 	cmpnei	r2,r2,255
   14704:	1000031e 	bne	r2,zero,14714 <OSTaskDel+0x9c>
        prio = OSTCBCur->OSTCBPrio;                     /* Set priority to delete to current           */
   14708:	d0a72f17 	ldw	r2,-25412(gp)
   1470c:	10800c83 	ldbu	r2,50(r2)
   14710:	e0bfff05 	stb	r2,-4(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
   14714:	e0ffff03 	ldbu	r3,-4(fp)
   14718:	008000b4 	movhi	r2,2
   1471c:	10be9904 	addi	r2,r2,-1436
   14720:	18c7883a 	add	r3,r3,r3
   14724:	18c7883a 	add	r3,r3,r3
   14728:	10c5883a 	add	r2,r2,r3
   1472c:	10800017 	ldw	r2,0(r2)
   14730:	e0bff815 	stw	r2,-32(fp)
    if (ptcb == (OS_TCB *)0) {                          /* Task to delete must exist                   */
   14734:	e0bff817 	ldw	r2,-32(fp)
   14738:	1000061e 	bne	r2,zero,14754 <OSTaskDel+0xdc>
   1473c:	e0bff617 	ldw	r2,-40(fp)
   14740:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   14744:	e0bff717 	ldw	r2,-36(fp)
   14748:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
   1474c:	008010c4 	movi	r2,67
   14750:	00009506 	br	149a8 <OSTaskDel+0x330>
    }
    if (ptcb == OS_TCB_RESERVED) {                      /* Must not be assigned to Mutex               */
   14754:	e0bff817 	ldw	r2,-32(fp)
   14758:	10800058 	cmpnei	r2,r2,1
   1475c:	1000061e 	bne	r2,zero,14778 <OSTaskDel+0x100>
   14760:	e0bff617 	ldw	r2,-40(fp)
   14764:	e0bff915 	stw	r2,-28(fp)
   14768:	e0bff917 	ldw	r2,-28(fp)
   1476c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_DEL);
   14770:	00800f44 	movi	r2,61
   14774:	00008c06 	br	149a8 <OSTaskDel+0x330>
    }

    OSRdyTbl[ptcb->OSTCBY] &= ~ptcb->OSTCBBitX;
   14778:	e0bff817 	ldw	r2,-32(fp)
   1477c:	10800d03 	ldbu	r2,52(r2)
   14780:	10c03fcc 	andi	r3,r2,255
   14784:	e0bff817 	ldw	r2,-32(fp)
   14788:	10800d03 	ldbu	r2,52(r2)
   1478c:	11003fcc 	andi	r4,r2,255
   14790:	d0a72c44 	addi	r2,gp,-25423
   14794:	2085883a 	add	r2,r4,r2
   14798:	10800003 	ldbu	r2,0(r2)
   1479c:	1009883a 	mov	r4,r2
   147a0:	e0bff817 	ldw	r2,-32(fp)
   147a4:	10800d43 	ldbu	r2,53(r2)
   147a8:	0084303a 	nor	r2,zero,r2
   147ac:	2084703a 	and	r2,r4,r2
   147b0:	1009883a 	mov	r4,r2
   147b4:	d0a72c44 	addi	r2,gp,-25423
   147b8:	1885883a 	add	r2,r3,r2
   147bc:	11000005 	stb	r4,0(r2)
    if (OSRdyTbl[ptcb->OSTCBY] == 0) {                  /* Make task not ready                         */
   147c0:	e0bff817 	ldw	r2,-32(fp)
   147c4:	10800d03 	ldbu	r2,52(r2)
   147c8:	10c03fcc 	andi	r3,r2,255
   147cc:	d0a72c44 	addi	r2,gp,-25423
   147d0:	1885883a 	add	r2,r3,r2
   147d4:	10800003 	ldbu	r2,0(r2)
   147d8:	10803fcc 	andi	r2,r2,255
   147dc:	1000071e 	bne	r2,zero,147fc <OSTaskDel+0x184>
        OSRdyGrp           &= ~ptcb->OSTCBBitY;
   147e0:	e0bff817 	ldw	r2,-32(fp)
   147e4:	10800d83 	ldbu	r2,54(r2)
   147e8:	0084303a 	nor	r2,zero,r2
   147ec:	1007883a 	mov	r3,r2
   147f0:	d0a72c03 	ldbu	r2,-25424(gp)
   147f4:	1884703a 	and	r2,r3,r2
   147f8:	d0a72c05 	stb	r2,-25424(gp)
    }
    
#if (OS_EVENT_EN)
    if (ptcb->OSTCBEventPtr != (OS_EVENT *)0) {
   147fc:	e0bff817 	ldw	r2,-32(fp)
   14800:	10800717 	ldw	r2,28(r2)
   14804:	10000526 	beq	r2,zero,1481c <OSTaskDel+0x1a4>
        OS_EventTaskRemove(ptcb, ptcb->OSTCBEventPtr);  /* Remove this task from any event   wait list */
   14808:	e0bff817 	ldw	r2,-32(fp)
   1480c:	10800717 	ldw	r2,28(r2)
   14810:	100b883a 	mov	r5,r2
   14814:	e13ff817 	ldw	r4,-32(fp)
   14818:	000f5680 	call	f568 <OS_EventTaskRemove>
    }
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {   /* Remove this task from any events' wait lists*/
   1481c:	e0bff817 	ldw	r2,-32(fp)
   14820:	10800817 	ldw	r2,32(r2)
   14824:	10000526 	beq	r2,zero,1483c <OSTaskDel+0x1c4>
        OS_EventTaskRemoveMulti(ptcb, ptcb->OSTCBEventMultiPtr);
   14828:	e0bff817 	ldw	r2,-32(fp)
   1482c:	10800817 	ldw	r2,32(r2)
   14830:	100b883a 	mov	r5,r2
   14834:	e13ff817 	ldw	r4,-32(fp)
   14838:	000f6200 	call	f620 <OS_EventTaskRemoveMulti>
    }
#endif
#endif

#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0)
    pnode = ptcb->OSTCBFlagNode;
   1483c:	e0bff817 	ldw	r2,-32(fp)
   14840:	10800a17 	ldw	r2,40(r2)
   14844:	e0bffb15 	stw	r2,-20(fp)
    if (pnode != (OS_FLAG_NODE *)0) {                   /* If task is waiting on event flag            */
   14848:	e0bffb17 	ldw	r2,-20(fp)
   1484c:	10000226 	beq	r2,zero,14858 <OSTaskDel+0x1e0>
        OS_FlagUnlink(pnode);                           /* Remove from wait list                       */
   14850:	e13ffb17 	ldw	r4,-20(fp)
   14854:	0011a900 	call	11a90 <OS_FlagUnlink>
    }
#endif

    ptcb->OSTCBDly      = 0;                            /* Prevent OSTimeTick() from updating          */
   14858:	e0bff817 	ldw	r2,-32(fp)
   1485c:	10000b8d 	sth	zero,46(r2)
    ptcb->OSTCBStat     = OS_STAT_RDY;                  /* Prevent task from being resumed             */
   14860:	e0bff817 	ldw	r2,-32(fp)
   14864:	10000c05 	stb	zero,48(r2)
    ptcb->OSTCBStatPend = OS_STAT_PEND_OK;
   14868:	e0bff817 	ldw	r2,-32(fp)
   1486c:	10000c45 	stb	zero,49(r2)
    if (OSLockNesting < 255u) {                         /* Make sure we don't context switch           */
   14870:	d0a72003 	ldbu	r2,-25472(gp)
   14874:	10803fcc 	andi	r2,r2,255
   14878:	10803fe0 	cmpeqi	r2,r2,255
   1487c:	1000031e 	bne	r2,zero,1488c <OSTaskDel+0x214>
        OSLockNesting++;
   14880:	d0a72003 	ldbu	r2,-25472(gp)
   14884:	10800044 	addi	r2,r2,1
   14888:	d0a72005 	stb	r2,-25472(gp)
   1488c:	e0bff617 	ldw	r2,-40(fp)
   14890:	e0bffd15 	stw	r2,-12(fp)
   14894:	e0bffd17 	ldw	r2,-12(fp)
   14898:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();                                 /* Enabling INT. ignores next instruc.         */
    OS_Dummy();                                         /* ... Dummy ensures that INTs will be         */
   1489c:	000f1500 	call	f150 <OS_Dummy>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   148a0:	0005303a 	rdctl	r2,status
   148a4:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   148a8:	e0fffa17 	ldw	r3,-24(fp)
   148ac:	00bfff84 	movi	r2,-2
   148b0:	1884703a 	and	r2,r3,r2
   148b4:	1001703a 	wrctl	status,r2
  
  return context;
   148b8:	e0bffa17 	ldw	r2,-24(fp)
    OS_ENTER_CRITICAL();                                /* ... disabled HERE!                          */
   148bc:	e0bff615 	stw	r2,-40(fp)
    if (OSLockNesting > 0) {                            /* Remove context switch lock                  */
   148c0:	d0a72003 	ldbu	r2,-25472(gp)
   148c4:	10803fcc 	andi	r2,r2,255
   148c8:	10000326 	beq	r2,zero,148d8 <OSTaskDel+0x260>
        OSLockNesting--;
   148cc:	d0a72003 	ldbu	r2,-25472(gp)
   148d0:	10bfffc4 	addi	r2,r2,-1
   148d4:	d0a72005 	stb	r2,-25472(gp)
    }
    OSTaskDelHook(ptcb);                                /* Call user defined hook                      */
   148d8:	e13ff817 	ldw	r4,-32(fp)
   148dc:	001746c0 	call	1746c <OSTaskDelHook>
    OSTaskCtr--;                                        /* One less task being managed                 */
   148e0:	d0a72843 	ldbu	r2,-25439(gp)
   148e4:	10bfffc4 	addi	r2,r2,-1
   148e8:	d0a72845 	stb	r2,-25439(gp)
    OSTCBPrioTbl[prio] = (OS_TCB *)0;                   /* Clear old priority entry                    */
   148ec:	e0ffff03 	ldbu	r3,-4(fp)
   148f0:	008000b4 	movhi	r2,2
   148f4:	10be9904 	addi	r2,r2,-1436
   148f8:	18c7883a 	add	r3,r3,r3
   148fc:	18c7883a 	add	r3,r3,r3
   14900:	10c5883a 	add	r2,r2,r3
   14904:	10000015 	stw	zero,0(r2)
    if (ptcb->OSTCBPrev == (OS_TCB *)0) {               /* Remove from TCB chain                       */
   14908:	e0bff817 	ldw	r2,-32(fp)
   1490c:	10800617 	ldw	r2,24(r2)
   14910:	1000071e 	bne	r2,zero,14930 <OSTaskDel+0x2b8>
        ptcb->OSTCBNext->OSTCBPrev = (OS_TCB *)0;
   14914:	e0bff817 	ldw	r2,-32(fp)
   14918:	10800517 	ldw	r2,20(r2)
   1491c:	10000615 	stw	zero,24(r2)
        OSTCBList                  = ptcb->OSTCBNext;
   14920:	e0bff817 	ldw	r2,-32(fp)
   14924:	10800517 	ldw	r2,20(r2)
   14928:	d0a72315 	stw	r2,-25460(gp)
   1492c:	00000a06 	br	14958 <OSTaskDel+0x2e0>
    } else {
        ptcb->OSTCBPrev->OSTCBNext = ptcb->OSTCBNext;
   14930:	e0bff817 	ldw	r2,-32(fp)
   14934:	10800617 	ldw	r2,24(r2)
   14938:	e0fff817 	ldw	r3,-32(fp)
   1493c:	18c00517 	ldw	r3,20(r3)
   14940:	10c00515 	stw	r3,20(r2)
        ptcb->OSTCBNext->OSTCBPrev = ptcb->OSTCBPrev;
   14944:	e0bff817 	ldw	r2,-32(fp)
   14948:	10800517 	ldw	r2,20(r2)
   1494c:	e0fff817 	ldw	r3,-32(fp)
   14950:	18c00617 	ldw	r3,24(r3)
   14954:	10c00615 	stw	r3,24(r2)
    }
    ptcb->OSTCBNext   = OSTCBFreeList;                  /* Return TCB to free TCB list                 */
   14958:	d0e72717 	ldw	r3,-25444(gp)
   1495c:	e0bff817 	ldw	r2,-32(fp)
   14960:	10c00515 	stw	r3,20(r2)
    OSTCBFreeList     = ptcb;
   14964:	e0bff817 	ldw	r2,-32(fp)
   14968:	d0a72715 	stw	r2,-25444(gp)
#if OS_TASK_NAME_SIZE > 1
    ptcb->OSTCBTaskName[0] = '?';                       /* Unknown name                                */
   1496c:	e0bff817 	ldw	r2,-32(fp)
   14970:	00c00fc4 	movi	r3,63
   14974:	10c01305 	stb	r3,76(r2)
    ptcb->OSTCBTaskName[1] = OS_ASCII_NUL;
   14978:	e0bff817 	ldw	r2,-32(fp)
   1497c:	10001345 	stb	zero,77(r2)
   14980:	e0bff617 	ldw	r2,-40(fp)
   14984:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   14988:	e0bffc17 	ldw	r2,-16(fp)
   1498c:	1001703a 	wrctl	status,r2
#endif
    OS_EXIT_CRITICAL();
    if (OSRunning == OS_TRUE) {
   14990:	d0a72043 	ldbu	r2,-25471(gp)
   14994:	10803fcc 	andi	r2,r2,255
   14998:	10800058 	cmpnei	r2,r2,1
   1499c:	1000011e 	bne	r2,zero,149a4 <OSTaskDel+0x32c>
        OS_Sched();                                     /* Find new highest priority task              */
   149a0:	000fbbc0 	call	fbbc <OS_Sched>
    }
    return (OS_ERR_NONE);
   149a4:	0005883a 	mov	r2,zero
}
   149a8:	e037883a 	mov	sp,fp
   149ac:	dfc00117 	ldw	ra,4(sp)
   149b0:	df000017 	ldw	fp,0(sp)
   149b4:	dec00204 	addi	sp,sp,8
   149b8:	f800283a 	ret

000149bc <OSTaskDelReq>:
*********************************************************************************************************
*/
/*$PAGE*/
#if OS_TASK_DEL_EN > 0
INT8U  OSTaskDelReq (INT8U prio)
{
   149bc:	defff504 	addi	sp,sp,-44
   149c0:	df000a15 	stw	fp,40(sp)
   149c4:	df000a04 	addi	fp,sp,40
   149c8:	2005883a 	mov	r2,r4
   149cc:	e0bfff05 	stb	r2,-4(fp)
    INT8U      stat;
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   149d0:	e03ff615 	stw	zero,-40(fp)
#endif



    if (prio == OS_TASK_IDLE_PRIO) {                            /* Not allowed to delete idle task     */
   149d4:	e0bfff03 	ldbu	r2,-4(fp)
   149d8:	10800518 	cmpnei	r2,r2,20
   149dc:	1000021e 	bne	r2,zero,149e8 <OSTaskDelReq+0x2c>
        return (OS_ERR_TASK_DEL_IDLE);
   149e0:	00800f84 	movi	r2,62
   149e4:	00004506 	br	14afc <OSTaskDelReq+0x140>
    }
#if OS_ARG_CHK_EN > 0
    if (prio >= OS_LOWEST_PRIO) {                               /* Task priority valid ?               */
   149e8:	e0bfff03 	ldbu	r2,-4(fp)
   149ec:	10800530 	cmpltui	r2,r2,20
   149f0:	1000051e 	bne	r2,zero,14a08 <OSTaskDelReq+0x4c>
        if (prio != OS_PRIO_SELF) {
   149f4:	e0bfff03 	ldbu	r2,-4(fp)
   149f8:	10803fe0 	cmpeqi	r2,r2,255
   149fc:	1000021e 	bne	r2,zero,14a08 <OSTaskDelReq+0x4c>
            return (OS_ERR_PRIO_INVALID);
   14a00:	00800a84 	movi	r2,42
   14a04:	00003d06 	br	14afc <OSTaskDelReq+0x140>
        }
    }
#endif
    if (prio == OS_PRIO_SELF) {                                 /* See if a task is requesting to ...  */
   14a08:	e0bfff03 	ldbu	r2,-4(fp)
   14a0c:	10803fd8 	cmpnei	r2,r2,255
   14a10:	1000111e 	bne	r2,zero,14a58 <OSTaskDelReq+0x9c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   14a14:	0005303a 	rdctl	r2,status
   14a18:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   14a1c:	e0fff917 	ldw	r3,-28(fp)
   14a20:	00bfff84 	movi	r2,-2
   14a24:	1884703a 	and	r2,r3,r2
   14a28:	1001703a 	wrctl	status,r2
  
  return context;
   14a2c:	e0bff917 	ldw	r2,-28(fp)
        OS_ENTER_CRITICAL();                                    /* ... this task to delete itself      */
   14a30:	e0bff615 	stw	r2,-40(fp)
        stat = OSTCBCur->OSTCBDelReq;                           /* Return request status to caller     */
   14a34:	d0a72f17 	ldw	r2,-25412(gp)
   14a38:	10800dc3 	ldbu	r2,55(r2)
   14a3c:	e0bff805 	stb	r2,-32(fp)
   14a40:	e0bff617 	ldw	r2,-40(fp)
   14a44:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   14a48:	e0bffe17 	ldw	r2,-8(fp)
   14a4c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (stat);
   14a50:	e0bff803 	ldbu	r2,-32(fp)
   14a54:	00002906 	br	14afc <OSTaskDelReq+0x140>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   14a58:	0005303a 	rdctl	r2,status
   14a5c:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   14a60:	e0fff717 	ldw	r3,-36(fp)
   14a64:	00bfff84 	movi	r2,-2
   14a68:	1884703a 	and	r2,r3,r2
   14a6c:	1001703a 	wrctl	status,r2
  
  return context;
   14a70:	e0bff717 	ldw	r2,-36(fp)
    }
    OS_ENTER_CRITICAL();
   14a74:	e0bff615 	stw	r2,-40(fp)
    ptcb = OSTCBPrioTbl[prio];
   14a78:	e0ffff03 	ldbu	r3,-4(fp)
   14a7c:	008000b4 	movhi	r2,2
   14a80:	10be9904 	addi	r2,r2,-1436
   14a84:	18c7883a 	add	r3,r3,r3
   14a88:	18c7883a 	add	r3,r3,r3
   14a8c:	10c5883a 	add	r2,r2,r3
   14a90:	10800017 	ldw	r2,0(r2)
   14a94:	e0bffb15 	stw	r2,-20(fp)
    if (ptcb == (OS_TCB *)0) {                                  /* Task to delete must exist           */
   14a98:	e0bffb17 	ldw	r2,-20(fp)
   14a9c:	1000061e 	bne	r2,zero,14ab8 <OSTaskDelReq+0xfc>
   14aa0:	e0bff617 	ldw	r2,-40(fp)
   14aa4:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   14aa8:	e0bffa17 	ldw	r2,-24(fp)
   14aac:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);                         /* Task must already be deleted        */
   14ab0:	008010c4 	movi	r2,67
   14ab4:	00001106 	br	14afc <OSTaskDelReq+0x140>
    }
    if (ptcb == OS_TCB_RESERVED) {                              /* Must NOT be assigned to a Mutex     */
   14ab8:	e0bffb17 	ldw	r2,-20(fp)
   14abc:	10800058 	cmpnei	r2,r2,1
   14ac0:	1000061e 	bne	r2,zero,14adc <OSTaskDelReq+0x120>
   14ac4:	e0bff617 	ldw	r2,-40(fp)
   14ac8:	e0bffc15 	stw	r2,-16(fp)
   14acc:	e0bffc17 	ldw	r2,-16(fp)
   14ad0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_DEL);
   14ad4:	00800f44 	movi	r2,61
   14ad8:	00000806 	br	14afc <OSTaskDelReq+0x140>
    }
    ptcb->OSTCBDelReq = OS_ERR_TASK_DEL_REQ;                    /* Set flag indicating task to be DEL. */
   14adc:	e0bffb17 	ldw	r2,-20(fp)
   14ae0:	00c00fc4 	movi	r3,63
   14ae4:	10c00dc5 	stb	r3,55(r2)
   14ae8:	e0bff617 	ldw	r2,-40(fp)
   14aec:	e0bffd15 	stw	r2,-12(fp)
   14af0:	e0bffd17 	ldw	r2,-12(fp)
   14af4:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
   14af8:	0005883a 	mov	r2,zero
}
   14afc:	e037883a 	mov	sp,fp
   14b00:	df000017 	ldw	fp,0(sp)
   14b04:	dec00104 	addi	sp,sp,4
   14b08:	f800283a 	ret

00014b0c <OSTaskNameGet>:
*********************************************************************************************************
*/

#if OS_TASK_NAME_SIZE > 1
INT8U  OSTaskNameGet (INT8U prio, INT8U *pname, INT8U *perr)
{
   14b0c:	defff404 	addi	sp,sp,-48
   14b10:	dfc00b15 	stw	ra,44(sp)
   14b14:	df000a15 	stw	fp,40(sp)
   14b18:	df000a04 	addi	fp,sp,40
   14b1c:	2005883a 	mov	r2,r4
   14b20:	e17ffe15 	stw	r5,-8(fp)
   14b24:	e1bfff15 	stw	r6,-4(fp)
   14b28:	e0bffd05 	stb	r2,-12(fp)
    OS_TCB    *ptcb;
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                              /* Allocate storage for CPU status register   */
    OS_CPU_SR  cpu_sr = 0;
   14b2c:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                            /* Validate 'perr'                            */
   14b30:	e0bfff17 	ldw	r2,-4(fp)
   14b34:	1000021e 	bne	r2,zero,14b40 <OSTaskNameGet+0x34>
        return (0);
   14b38:	0005883a 	mov	r2,zero
   14b3c:	00005406 	br	14c90 <OSTaskNameGet+0x184>
    }
    if (prio > OS_LOWEST_PRIO) {                         /* Task priority valid ?                      */
   14b40:	e0bffd03 	ldbu	r2,-12(fp)
   14b44:	10800570 	cmpltui	r2,r2,21
   14b48:	1000081e 	bne	r2,zero,14b6c <OSTaskNameGet+0x60>
        if (prio != OS_PRIO_SELF) {
   14b4c:	e0bffd03 	ldbu	r2,-12(fp)
   14b50:	10803fe0 	cmpeqi	r2,r2,255
   14b54:	1000051e 	bne	r2,zero,14b6c <OSTaskNameGet+0x60>
            *perr = OS_ERR_PRIO_INVALID;                 /* No                                         */
   14b58:	e0bfff17 	ldw	r2,-4(fp)
   14b5c:	00c00a84 	movi	r3,42
   14b60:	10c00005 	stb	r3,0(r2)
            return (0);
   14b64:	0005883a 	mov	r2,zero
   14b68:	00004906 	br	14c90 <OSTaskNameGet+0x184>
        }
    }
    if (pname == (INT8U *)0) {                           /* Is 'pname' a NULL pointer?                 */
   14b6c:	e0bffe17 	ldw	r2,-8(fp)
   14b70:	1000051e 	bne	r2,zero,14b88 <OSTaskNameGet+0x7c>
        *perr = OS_ERR_PNAME_NULL;                       /* Yes                                        */
   14b74:	e0bfff17 	ldw	r2,-4(fp)
   14b78:	00c00304 	movi	r3,12
   14b7c:	10c00005 	stb	r3,0(r2)
        return (0);
   14b80:	0005883a 	mov	r2,zero
   14b84:	00004206 	br	14c90 <OSTaskNameGet+0x184>
    }
#endif
    if (OSIntNesting > 0) {                              /* See if trying to call from an ISR          */
   14b88:	d0a72e03 	ldbu	r2,-25416(gp)
   14b8c:	10803fcc 	andi	r2,r2,255
   14b90:	10000526 	beq	r2,zero,14ba8 <OSTaskNameGet+0x9c>
        *perr = OS_ERR_NAME_GET_ISR;
   14b94:	e0bfff17 	ldw	r2,-4(fp)
   14b98:	00c00444 	movi	r3,17
   14b9c:	10c00005 	stb	r3,0(r2)
        return (0);
   14ba0:	0005883a 	mov	r2,zero
   14ba4:	00003a06 	br	14c90 <OSTaskNameGet+0x184>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   14ba8:	0005303a 	rdctl	r2,status
   14bac:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   14bb0:	e0fffc17 	ldw	r3,-16(fp)
   14bb4:	00bfff84 	movi	r2,-2
   14bb8:	1884703a 	and	r2,r3,r2
   14bbc:	1001703a 	wrctl	status,r2
  
  return context;
   14bc0:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
   14bc4:	e0bff615 	stw	r2,-40(fp)
    if (prio == OS_PRIO_SELF) {                          /* See if caller desires it's own name        */
   14bc8:	e0bffd03 	ldbu	r2,-12(fp)
   14bcc:	10803fd8 	cmpnei	r2,r2,255
   14bd0:	1000031e 	bne	r2,zero,14be0 <OSTaskNameGet+0xd4>
        prio = OSTCBCur->OSTCBPrio;
   14bd4:	d0a72f17 	ldw	r2,-25412(gp)
   14bd8:	10800c83 	ldbu	r2,50(r2)
   14bdc:	e0bffd05 	stb	r2,-12(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
   14be0:	e0fffd03 	ldbu	r3,-12(fp)
   14be4:	008000b4 	movhi	r2,2
   14be8:	10be9904 	addi	r2,r2,-1436
   14bec:	18c7883a 	add	r3,r3,r3
   14bf0:	18c7883a 	add	r3,r3,r3
   14bf4:	10c5883a 	add	r2,r2,r3
   14bf8:	10800017 	ldw	r2,0(r2)
   14bfc:	e0bff815 	stw	r2,-32(fp)
    if (ptcb == (OS_TCB *)0) {                           /* Does task exist?                           */
   14c00:	e0bff817 	ldw	r2,-32(fp)
   14c04:	1000091e 	bne	r2,zero,14c2c <OSTaskNameGet+0x120>
   14c08:	e0bff617 	ldw	r2,-40(fp)
   14c0c:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   14c10:	e0bff717 	ldw	r2,-36(fp)
   14c14:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                              /* No                                         */
        *perr = OS_ERR_TASK_NOT_EXIST;
   14c18:	e0bfff17 	ldw	r2,-4(fp)
   14c1c:	00c010c4 	movi	r3,67
   14c20:	10c00005 	stb	r3,0(r2)
        return (0);
   14c24:	0005883a 	mov	r2,zero
   14c28:	00001906 	br	14c90 <OSTaskNameGet+0x184>
    }
    if (ptcb == OS_TCB_RESERVED) {                       /* Task assigned to a Mutex?                  */
   14c2c:	e0bff817 	ldw	r2,-32(fp)
   14c30:	10800058 	cmpnei	r2,r2,1
   14c34:	1000091e 	bne	r2,zero,14c5c <OSTaskNameGet+0x150>
   14c38:	e0bff617 	ldw	r2,-40(fp)
   14c3c:	e0bff915 	stw	r2,-28(fp)
   14c40:	e0bff917 	ldw	r2,-28(fp)
   14c44:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                              /* Yes                                        */
        *perr = OS_ERR_TASK_NOT_EXIST;
   14c48:	e0bfff17 	ldw	r2,-4(fp)
   14c4c:	00c010c4 	movi	r3,67
   14c50:	10c00005 	stb	r3,0(r2)
        return (0);
   14c54:	0005883a 	mov	r2,zero
   14c58:	00000d06 	br	14c90 <OSTaskNameGet+0x184>
    }
    len   = OS_StrCopy(pname, ptcb->OSTCBTaskName);      /* Yes, copy name from TCB                    */
   14c5c:	e0bff817 	ldw	r2,-32(fp)
   14c60:	10801304 	addi	r2,r2,76
   14c64:	100b883a 	mov	r5,r2
   14c68:	e13ffe17 	ldw	r4,-8(fp)
   14c6c:	000fd000 	call	fd00 <OS_StrCopy>
   14c70:	e0bffb05 	stb	r2,-20(fp)
   14c74:	e0bff617 	ldw	r2,-40(fp)
   14c78:	e0bffa15 	stw	r2,-24(fp)
   14c7c:	e0bffa17 	ldw	r2,-24(fp)
   14c80:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   14c84:	e0bfff17 	ldw	r2,-4(fp)
   14c88:	10000005 	stb	zero,0(r2)
    return (len);
   14c8c:	e0bffb03 	ldbu	r2,-20(fp)
}
   14c90:	e037883a 	mov	sp,fp
   14c94:	dfc00117 	ldw	ra,4(sp)
   14c98:	df000017 	ldw	fp,0(sp)
   14c9c:	dec00204 	addi	sp,sp,8
   14ca0:	f800283a 	ret

00014ca4 <OSTaskNameSet>:
* Returns    : None
*********************************************************************************************************
*/
#if OS_TASK_NAME_SIZE > 1
void  OSTaskNameSet (INT8U prio, INT8U *pname, INT8U *perr)
{
   14ca4:	defff304 	addi	sp,sp,-52
   14ca8:	dfc00c15 	stw	ra,48(sp)
   14cac:	df000b15 	stw	fp,44(sp)
   14cb0:	df000b04 	addi	fp,sp,44
   14cb4:	2005883a 	mov	r2,r4
   14cb8:	e17ffe15 	stw	r5,-8(fp)
   14cbc:	e1bfff15 	stw	r6,-4(fp)
   14cc0:	e0bffd05 	stb	r2,-12(fp)
    INT8U      len;
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                          /* Allocate storage for CPU status register       */
    OS_CPU_SR  cpu_sr = 0;
   14cc4:	e03ff515 	stw	zero,-44(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                        /* Validate 'perr'                                */
   14cc8:	e0bfff17 	ldw	r2,-4(fp)
   14ccc:	10005c26 	beq	r2,zero,14e40 <OSTaskNameSet+0x19c>
        return;
    }
    if (prio > OS_LOWEST_PRIO) {                     /* Task priority valid ?                          */
   14cd0:	e0bffd03 	ldbu	r2,-12(fp)
   14cd4:	10800570 	cmpltui	r2,r2,21
   14cd8:	1000071e 	bne	r2,zero,14cf8 <OSTaskNameSet+0x54>
        if (prio != OS_PRIO_SELF) {
   14cdc:	e0bffd03 	ldbu	r2,-12(fp)
   14ce0:	10803fe0 	cmpeqi	r2,r2,255
   14ce4:	1000041e 	bne	r2,zero,14cf8 <OSTaskNameSet+0x54>
            *perr = OS_ERR_PRIO_INVALID;             /* No                                             */
   14ce8:	e0bfff17 	ldw	r2,-4(fp)
   14cec:	00c00a84 	movi	r3,42
   14cf0:	10c00005 	stb	r3,0(r2)
            return;
   14cf4:	00005306 	br	14e44 <OSTaskNameSet+0x1a0>
        }
    }
    if (pname == (INT8U *)0) {                       /* Is 'pname' a NULL pointer?                     */
   14cf8:	e0bffe17 	ldw	r2,-8(fp)
   14cfc:	1000041e 	bne	r2,zero,14d10 <OSTaskNameSet+0x6c>
        *perr = OS_ERR_PNAME_NULL;                   /* Yes                                            */
   14d00:	e0bfff17 	ldw	r2,-4(fp)
   14d04:	00c00304 	movi	r3,12
   14d08:	10c00005 	stb	r3,0(r2)
        return;
   14d0c:	00004d06 	br	14e44 <OSTaskNameSet+0x1a0>
    }
#endif
    if (OSIntNesting > 0) {                          /* See if trying to call from an ISR              */
   14d10:	d0a72e03 	ldbu	r2,-25416(gp)
   14d14:	10803fcc 	andi	r2,r2,255
   14d18:	10000426 	beq	r2,zero,14d2c <OSTaskNameSet+0x88>
        *perr = OS_ERR_NAME_SET_ISR;
   14d1c:	e0bfff17 	ldw	r2,-4(fp)
   14d20:	00c00484 	movi	r3,18
   14d24:	10c00005 	stb	r3,0(r2)
        return;
   14d28:	00004606 	br	14e44 <OSTaskNameSet+0x1a0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   14d2c:	0005303a 	rdctl	r2,status
   14d30:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   14d34:	e0fffc17 	ldw	r3,-16(fp)
   14d38:	00bfff84 	movi	r2,-2
   14d3c:	1884703a 	and	r2,r3,r2
   14d40:	1001703a 	wrctl	status,r2
  
  return context;
   14d44:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
   14d48:	e0bff515 	stw	r2,-44(fp)
    if (prio == OS_PRIO_SELF) {                      /* See if caller desires to set it's own name     */
   14d4c:	e0bffd03 	ldbu	r2,-12(fp)
   14d50:	10803fd8 	cmpnei	r2,r2,255
   14d54:	1000031e 	bne	r2,zero,14d64 <OSTaskNameSet+0xc0>
        prio = OSTCBCur->OSTCBPrio;
   14d58:	d0a72f17 	ldw	r2,-25412(gp)
   14d5c:	10800c83 	ldbu	r2,50(r2)
   14d60:	e0bffd05 	stb	r2,-12(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
   14d64:	e0fffd03 	ldbu	r3,-12(fp)
   14d68:	008000b4 	movhi	r2,2
   14d6c:	10be9904 	addi	r2,r2,-1436
   14d70:	18c7883a 	add	r3,r3,r3
   14d74:	18c7883a 	add	r3,r3,r3
   14d78:	10c5883a 	add	r2,r2,r3
   14d7c:	10800017 	ldw	r2,0(r2)
   14d80:	e0bff715 	stw	r2,-36(fp)
    if (ptcb == (OS_TCB *)0) {                       /* Does task exist?                               */
   14d84:	e0bff717 	ldw	r2,-36(fp)
   14d88:	1000081e 	bne	r2,zero,14dac <OSTaskNameSet+0x108>
   14d8c:	e0bff517 	ldw	r2,-44(fp)
   14d90:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   14d94:	e0bff617 	ldw	r2,-40(fp)
   14d98:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                          /* No                                             */
        *perr = OS_ERR_TASK_NOT_EXIST;
   14d9c:	e0bfff17 	ldw	r2,-4(fp)
   14da0:	00c010c4 	movi	r3,67
   14da4:	10c00005 	stb	r3,0(r2)
        return;
   14da8:	00002606 	br	14e44 <OSTaskNameSet+0x1a0>
    }
    if (ptcb == OS_TCB_RESERVED) {                   /* Task assigned to a Mutex?                      */
   14dac:	e0bff717 	ldw	r2,-36(fp)
   14db0:	10800058 	cmpnei	r2,r2,1
   14db4:	1000081e 	bne	r2,zero,14dd8 <OSTaskNameSet+0x134>
   14db8:	e0bff517 	ldw	r2,-44(fp)
   14dbc:	e0bff815 	stw	r2,-32(fp)
   14dc0:	e0bff817 	ldw	r2,-32(fp)
   14dc4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                          /* Yes                                            */
        *perr = OS_ERR_TASK_NOT_EXIST;
   14dc8:	e0bfff17 	ldw	r2,-4(fp)
   14dcc:	00c010c4 	movi	r3,67
   14dd0:	10c00005 	stb	r3,0(r2)
        return;
   14dd4:	00001b06 	br	14e44 <OSTaskNameSet+0x1a0>
    }
    len = OS_StrLen(pname);                          /* Yes, Can we fit the string in the TCB?         */
   14dd8:	e13ffe17 	ldw	r4,-8(fp)
   14ddc:	000fd740 	call	fd74 <OS_StrLen>
   14de0:	e0bffa05 	stb	r2,-24(fp)
    if (len > (OS_TASK_NAME_SIZE - 1)) {             /*      No                                        */
   14de4:	e0bffa03 	ldbu	r2,-24(fp)
   14de8:	10800830 	cmpltui	r2,r2,32
   14dec:	1000081e 	bne	r2,zero,14e10 <OSTaskNameSet+0x16c>
   14df0:	e0bff517 	ldw	r2,-44(fp)
   14df4:	e0bff915 	stw	r2,-28(fp)
   14df8:	e0bff917 	ldw	r2,-28(fp)
   14dfc:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_TASK_NAME_TOO_LONG;
   14e00:	e0bfff17 	ldw	r2,-4(fp)
   14e04:	00c01044 	movi	r3,65
   14e08:	10c00005 	stb	r3,0(r2)
        return;
   14e0c:	00000d06 	br	14e44 <OSTaskNameSet+0x1a0>
    }
    (void)OS_StrCopy(ptcb->OSTCBTaskName, pname);    /*      Yes, copy to TCB                          */
   14e10:	e0bff717 	ldw	r2,-36(fp)
   14e14:	10801304 	addi	r2,r2,76
   14e18:	e17ffe17 	ldw	r5,-8(fp)
   14e1c:	1009883a 	mov	r4,r2
   14e20:	000fd000 	call	fd00 <OS_StrCopy>
   14e24:	e0bff517 	ldw	r2,-44(fp)
   14e28:	e0bffb15 	stw	r2,-20(fp)
   14e2c:	e0bffb17 	ldw	r2,-20(fp)
   14e30:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   14e34:	e0bfff17 	ldw	r2,-4(fp)
   14e38:	10000005 	stb	zero,0(r2)
   14e3c:	00000106 	br	14e44 <OSTaskNameSet+0x1a0>



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                        /* Validate 'perr'                                */
        return;
   14e40:	0001883a 	nop
        return;
    }
    (void)OS_StrCopy(ptcb->OSTCBTaskName, pname);    /*      Yes, copy to TCB                          */
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
}
   14e44:	e037883a 	mov	sp,fp
   14e48:	dfc00117 	ldw	ra,4(sp)
   14e4c:	df000017 	ldw	fp,0(sp)
   14e50:	dec00204 	addi	sp,sp,8
   14e54:	f800283a 	ret

00014e58 <OSTaskResume>:
*********************************************************************************************************
*/

#if OS_TASK_SUSPEND_EN > 0
INT8U  OSTaskResume (INT8U prio)
{
   14e58:	defff404 	addi	sp,sp,-48
   14e5c:	dfc00b15 	stw	ra,44(sp)
   14e60:	df000a15 	stw	fp,40(sp)
   14e64:	df000a04 	addi	fp,sp,40
   14e68:	2005883a 	mov	r2,r4
   14e6c:	e0bfff05 	stb	r2,-4(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                                   /* Storage for CPU status register       */
    OS_CPU_SR  cpu_sr = 0;
   14e70:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio >= OS_LOWEST_PRIO) {                             /* Make sure task priority is valid      */
   14e74:	e0bfff03 	ldbu	r2,-4(fp)
   14e78:	10800530 	cmpltui	r2,r2,20
   14e7c:	1000021e 	bne	r2,zero,14e88 <OSTaskResume+0x30>
        return (OS_ERR_PRIO_INVALID);
   14e80:	00800a84 	movi	r2,42
   14e84:	00006406 	br	15018 <OSTaskResume+0x1c0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   14e88:	0005303a 	rdctl	r2,status
   14e8c:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   14e90:	e0fffe17 	ldw	r3,-8(fp)
   14e94:	00bfff84 	movi	r2,-2
   14e98:	1884703a 	and	r2,r3,r2
   14e9c:	1001703a 	wrctl	status,r2
  
  return context;
   14ea0:	e0bffe17 	ldw	r2,-8(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   14ea4:	e0bff615 	stw	r2,-40(fp)
    ptcb = OSTCBPrioTbl[prio];
   14ea8:	e0ffff03 	ldbu	r3,-4(fp)
   14eac:	008000b4 	movhi	r2,2
   14eb0:	10be9904 	addi	r2,r2,-1436
   14eb4:	18c7883a 	add	r3,r3,r3
   14eb8:	18c7883a 	add	r3,r3,r3
   14ebc:	10c5883a 	add	r2,r2,r3
   14ec0:	10800017 	ldw	r2,0(r2)
   14ec4:	e0bff815 	stw	r2,-32(fp)
    if (ptcb == (OS_TCB *)0) {                                /* Task to suspend must exist            */
   14ec8:	e0bff817 	ldw	r2,-32(fp)
   14ecc:	1000061e 	bne	r2,zero,14ee8 <OSTaskResume+0x90>
   14ed0:	e0bff617 	ldw	r2,-40(fp)
   14ed4:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   14ed8:	e0bff717 	ldw	r2,-36(fp)
   14edc:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_RESUME_PRIO);
   14ee0:	00801184 	movi	r2,70
   14ee4:	00004c06 	br	15018 <OSTaskResume+0x1c0>
    }
    if (ptcb == OS_TCB_RESERVED) {                            /* See if assigned to Mutex              */
   14ee8:	e0bff817 	ldw	r2,-32(fp)
   14eec:	10800058 	cmpnei	r2,r2,1
   14ef0:	1000061e 	bne	r2,zero,14f0c <OSTaskResume+0xb4>
   14ef4:	e0bff617 	ldw	r2,-40(fp)
   14ef8:	e0bff915 	stw	r2,-28(fp)
   14efc:	e0bff917 	ldw	r2,-28(fp)
   14f00:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
   14f04:	008010c4 	movi	r2,67
   14f08:	00004306 	br	15018 <OSTaskResume+0x1c0>
    }
    if ((ptcb->OSTCBStat & OS_STAT_SUSPEND) != OS_STAT_RDY) { /* Task must be suspended                */
   14f0c:	e0bff817 	ldw	r2,-32(fp)
   14f10:	10800c03 	ldbu	r2,48(r2)
   14f14:	10803fcc 	andi	r2,r2,255
   14f18:	1080020c 	andi	r2,r2,8
   14f1c:	10003926 	beq	r2,zero,15004 <OSTaskResume+0x1ac>
        ptcb->OSTCBStat &= ~(INT8U)OS_STAT_SUSPEND;           /* Remove suspension                     */
   14f20:	e0bff817 	ldw	r2,-32(fp)
   14f24:	10c00c03 	ldbu	r3,48(r2)
   14f28:	00bffdc4 	movi	r2,-9
   14f2c:	1884703a 	and	r2,r3,r2
   14f30:	1007883a 	mov	r3,r2
   14f34:	e0bff817 	ldw	r2,-32(fp)
   14f38:	10c00c05 	stb	r3,48(r2)
        if (ptcb->OSTCBStat == OS_STAT_RDY) {                 /* See if task is now ready              */
   14f3c:	e0bff817 	ldw	r2,-32(fp)
   14f40:	10800c03 	ldbu	r2,48(r2)
   14f44:	10803fcc 	andi	r2,r2,255
   14f48:	1000281e 	bne	r2,zero,14fec <OSTaskResume+0x194>
            if (ptcb->OSTCBDly == 0) {
   14f4c:	e0bff817 	ldw	r2,-32(fp)
   14f50:	10800b8b 	ldhu	r2,46(r2)
   14f54:	10bfffcc 	andi	r2,r2,65535
   14f58:	10001f1e 	bne	r2,zero,14fd8 <OSTaskResume+0x180>
                OSRdyGrp               |= ptcb->OSTCBBitY;    /* Yes, Make task ready to run           */
   14f5c:	e0bff817 	ldw	r2,-32(fp)
   14f60:	10c00d83 	ldbu	r3,54(r2)
   14f64:	d0a72c03 	ldbu	r2,-25424(gp)
   14f68:	1884b03a 	or	r2,r3,r2
   14f6c:	d0a72c05 	stb	r2,-25424(gp)
                OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
   14f70:	e0bff817 	ldw	r2,-32(fp)
   14f74:	10800d03 	ldbu	r2,52(r2)
   14f78:	10c03fcc 	andi	r3,r2,255
   14f7c:	e0bff817 	ldw	r2,-32(fp)
   14f80:	10800d03 	ldbu	r2,52(r2)
   14f84:	11003fcc 	andi	r4,r2,255
   14f88:	d0a72c44 	addi	r2,gp,-25423
   14f8c:	2085883a 	add	r2,r4,r2
   14f90:	11000003 	ldbu	r4,0(r2)
   14f94:	e0bff817 	ldw	r2,-32(fp)
   14f98:	10800d43 	ldbu	r2,53(r2)
   14f9c:	2084b03a 	or	r2,r4,r2
   14fa0:	1009883a 	mov	r4,r2
   14fa4:	d0a72c44 	addi	r2,gp,-25423
   14fa8:	1885883a 	add	r2,r3,r2
   14fac:	11000005 	stb	r4,0(r2)
   14fb0:	e0bff617 	ldw	r2,-40(fp)
   14fb4:	e0bffa15 	stw	r2,-24(fp)
   14fb8:	e0bffa17 	ldw	r2,-24(fp)
   14fbc:	1001703a 	wrctl	status,r2
                OS_EXIT_CRITICAL();
                if (OSRunning == OS_TRUE) {
   14fc0:	d0a72043 	ldbu	r2,-25471(gp)
   14fc4:	10803fcc 	andi	r2,r2,255
   14fc8:	10800058 	cmpnei	r2,r2,1
   14fcc:	10000b1e 	bne	r2,zero,14ffc <OSTaskResume+0x1a4>
                    OS_Sched();                               /* Find new highest priority task        */
   14fd0:	000fbbc0 	call	fbbc <OS_Sched>
   14fd4:	00000906 	br	14ffc <OSTaskResume+0x1a4>
   14fd8:	e0bff617 	ldw	r2,-40(fp)
   14fdc:	e0bffb15 	stw	r2,-20(fp)
   14fe0:	e0bffb17 	ldw	r2,-20(fp)
   14fe4:	1001703a 	wrctl	status,r2
   14fe8:	00000406 	br	14ffc <OSTaskResume+0x1a4>
   14fec:	e0bff617 	ldw	r2,-40(fp)
   14ff0:	e0bffc15 	stw	r2,-16(fp)
   14ff4:	e0bffc17 	ldw	r2,-16(fp)
   14ff8:	1001703a 	wrctl	status,r2
                OS_EXIT_CRITICAL();
            }
        } else {                                              /* Must be pending on event              */
            OS_EXIT_CRITICAL();
        }
        return (OS_ERR_NONE);
   14ffc:	0005883a 	mov	r2,zero
   15000:	00000506 	br	15018 <OSTaskResume+0x1c0>
   15004:	e0bff617 	ldw	r2,-40(fp)
   15008:	e0bffd15 	stw	r2,-12(fp)
   1500c:	e0bffd17 	ldw	r2,-12(fp)
   15010:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_TASK_NOT_SUSPENDED);
   15014:	00801104 	movi	r2,68
}
   15018:	e037883a 	mov	sp,fp
   1501c:	dfc00117 	ldw	ra,4(sp)
   15020:	df000017 	ldw	fp,0(sp)
   15024:	dec00204 	addi	sp,sp,8
   15028:	f800283a 	ret

0001502c <OSTaskStkChk>:
*              OS_ERR_PDATA_NULL      if 'p_stk_data' is a NULL pointer
*********************************************************************************************************
*/
#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
INT8U  OSTaskStkChk (INT8U prio, OS_STK_DATA *p_stk_data)
{
   1502c:	defff304 	addi	sp,sp,-52
   15030:	df000c15 	stw	fp,48(sp)
   15034:	df000c04 	addi	fp,sp,48
   15038:	2005883a 	mov	r2,r4
   1503c:	e17fff15 	stw	r5,-4(fp)
   15040:	e0bffe05 	stb	r2,-8(fp)
    OS_TCB    *ptcb;
    OS_STK    *pchk;
    INT32U     nfree;
    INT32U     size;
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
   15044:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {                       /* Make sure task priority is valid             */
   15048:	e0bffe03 	ldbu	r2,-8(fp)
   1504c:	10800570 	cmpltui	r2,r2,21
   15050:	1000051e 	bne	r2,zero,15068 <OSTaskStkChk+0x3c>
        if (prio != OS_PRIO_SELF) {
   15054:	e0bffe03 	ldbu	r2,-8(fp)
   15058:	10803fe0 	cmpeqi	r2,r2,255
   1505c:	1000021e 	bne	r2,zero,15068 <OSTaskStkChk+0x3c>
            return (OS_ERR_PRIO_INVALID);
   15060:	00800a84 	movi	r2,42
   15064:	00005d06 	br	151dc <OSTaskStkChk+0x1b0>
        }
    }
    if (p_stk_data == (OS_STK_DATA *)0) {              /* Validate 'p_stk_data'                        */
   15068:	e0bfff17 	ldw	r2,-4(fp)
   1506c:	1000021e 	bne	r2,zero,15078 <OSTaskStkChk+0x4c>
        return (OS_ERR_PDATA_NULL);
   15070:	00800244 	movi	r2,9
   15074:	00005906 	br	151dc <OSTaskStkChk+0x1b0>
    }
#endif
    p_stk_data->OSFree = 0;                            /* Assume failure, set to 0 size                */
   15078:	e0bfff17 	ldw	r2,-4(fp)
   1507c:	10000015 	stw	zero,0(r2)
    p_stk_data->OSUsed = 0;
   15080:	e0bfff17 	ldw	r2,-4(fp)
   15084:	10000115 	stw	zero,4(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   15088:	0005303a 	rdctl	r2,status
   1508c:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   15090:	e0fffd17 	ldw	r3,-12(fp)
   15094:	00bfff84 	movi	r2,-2
   15098:	1884703a 	and	r2,r3,r2
   1509c:	1001703a 	wrctl	status,r2
  
  return context;
   150a0:	e0bffd17 	ldw	r2,-12(fp)
    OS_ENTER_CRITICAL();
   150a4:	e0bff615 	stw	r2,-40(fp)
    if (prio == OS_PRIO_SELF) {                        /* See if check for SELF                        */
   150a8:	e0bffe03 	ldbu	r2,-8(fp)
   150ac:	10803fd8 	cmpnei	r2,r2,255
   150b0:	1000031e 	bne	r2,zero,150c0 <OSTaskStkChk+0x94>
        prio = OSTCBCur->OSTCBPrio;
   150b4:	d0a72f17 	ldw	r2,-25412(gp)
   150b8:	10800c83 	ldbu	r2,50(r2)
   150bc:	e0bffe05 	stb	r2,-8(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
   150c0:	e0fffe03 	ldbu	r3,-8(fp)
   150c4:	008000b4 	movhi	r2,2
   150c8:	10be9904 	addi	r2,r2,-1436
   150cc:	18c7883a 	add	r3,r3,r3
   150d0:	18c7883a 	add	r3,r3,r3
   150d4:	10c5883a 	add	r2,r2,r3
   150d8:	10800017 	ldw	r2,0(r2)
   150dc:	e0bff815 	stw	r2,-32(fp)
    if (ptcb == (OS_TCB *)0) {                         /* Make sure task exist                         */
   150e0:	e0bff817 	ldw	r2,-32(fp)
   150e4:	1000061e 	bne	r2,zero,15100 <OSTaskStkChk+0xd4>
   150e8:	e0bff617 	ldw	r2,-40(fp)
   150ec:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   150f0:	e0bff717 	ldw	r2,-36(fp)
   150f4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
   150f8:	008010c4 	movi	r2,67
   150fc:	00003706 	br	151dc <OSTaskStkChk+0x1b0>
    }
    if (ptcb == OS_TCB_RESERVED) {
   15100:	e0bff817 	ldw	r2,-32(fp)
   15104:	10800058 	cmpnei	r2,r2,1
   15108:	1000061e 	bne	r2,zero,15124 <OSTaskStkChk+0xf8>
   1510c:	e0bff617 	ldw	r2,-40(fp)
   15110:	e0bff915 	stw	r2,-28(fp)
   15114:	e0bff917 	ldw	r2,-28(fp)
   15118:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
   1511c:	008010c4 	movi	r2,67
   15120:	00002e06 	br	151dc <OSTaskStkChk+0x1b0>
    }
    if ((ptcb->OSTCBOpt & OS_TASK_OPT_STK_CHK) == 0) { /* Make sure stack checking option is set       */
   15124:	e0bff817 	ldw	r2,-32(fp)
   15128:	1080040b 	ldhu	r2,16(r2)
   1512c:	10bfffcc 	andi	r2,r2,65535
   15130:	1080004c 	andi	r2,r2,1
   15134:	1000061e 	bne	r2,zero,15150 <OSTaskStkChk+0x124>
   15138:	e0bff617 	ldw	r2,-40(fp)
   1513c:	e0bffa15 	stw	r2,-24(fp)
   15140:	e0bffa17 	ldw	r2,-24(fp)
   15144:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_OPT);
   15148:	00801144 	movi	r2,69
   1514c:	00002306 	br	151dc <OSTaskStkChk+0x1b0>
    }
    nfree = 0;
   15150:	e03ff515 	stw	zero,-44(fp)
    size  = ptcb->OSTCBStkSize;
   15154:	e0bff817 	ldw	r2,-32(fp)
   15158:	10800317 	ldw	r2,12(r2)
   1515c:	e0bffc15 	stw	r2,-16(fp)
    pchk  = ptcb->OSTCBStkBottom;
   15160:	e0bff817 	ldw	r2,-32(fp)
   15164:	10800217 	ldw	r2,8(r2)
   15168:	e0bff415 	stw	r2,-48(fp)
   1516c:	e0bff617 	ldw	r2,-40(fp)
   15170:	e0bffb15 	stw	r2,-20(fp)
   15174:	e0bffb17 	ldw	r2,-20(fp)
   15178:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
#if OS_STK_GROWTH == 1
    while (*pchk++ == (OS_STK)0) {                    /* Compute the number of zero entries on the stk */
   1517c:	00000306 	br	1518c <OSTaskStkChk+0x160>
        nfree++;
   15180:	e0bff517 	ldw	r2,-44(fp)
   15184:	10800044 	addi	r2,r2,1
   15188:	e0bff515 	stw	r2,-44(fp)
    nfree = 0;
    size  = ptcb->OSTCBStkSize;
    pchk  = ptcb->OSTCBStkBottom;
    OS_EXIT_CRITICAL();
#if OS_STK_GROWTH == 1
    while (*pchk++ == (OS_STK)0) {                    /* Compute the number of zero entries on the stk */
   1518c:	e0bff417 	ldw	r2,-48(fp)
   15190:	10c00104 	addi	r3,r2,4
   15194:	e0fff415 	stw	r3,-48(fp)
   15198:	10800017 	ldw	r2,0(r2)
   1519c:	103ff826 	beq	r2,zero,15180 <__alt_data_end+0xfffe5180>
#else
    while (*pchk-- == (OS_STK)0) {
        nfree++;
    }
#endif
    p_stk_data->OSFree = nfree * sizeof(OS_STK);          /* Compute number of free bytes on the stack */
   151a0:	e0bff517 	ldw	r2,-44(fp)
   151a4:	1085883a 	add	r2,r2,r2
   151a8:	1085883a 	add	r2,r2,r2
   151ac:	1007883a 	mov	r3,r2
   151b0:	e0bfff17 	ldw	r2,-4(fp)
   151b4:	10c00015 	stw	r3,0(r2)
    p_stk_data->OSUsed = (size - nfree) * sizeof(OS_STK); /* Compute number of bytes used on the stack */
   151b8:	e0fffc17 	ldw	r3,-16(fp)
   151bc:	e0bff517 	ldw	r2,-44(fp)
   151c0:	1885c83a 	sub	r2,r3,r2
   151c4:	1085883a 	add	r2,r2,r2
   151c8:	1085883a 	add	r2,r2,r2
   151cc:	1007883a 	mov	r3,r2
   151d0:	e0bfff17 	ldw	r2,-4(fp)
   151d4:	10c00115 	stw	r3,4(r2)
    return (OS_ERR_NONE);
   151d8:	0005883a 	mov	r2,zero
}
   151dc:	e037883a 	mov	sp,fp
   151e0:	df000017 	ldw	fp,0(sp)
   151e4:	dec00104 	addi	sp,sp,4
   151e8:	f800283a 	ret

000151ec <OSTaskSuspend>:
*********************************************************************************************************
*/

#if OS_TASK_SUSPEND_EN > 0
INT8U  OSTaskSuspend (INT8U prio)
{
   151ec:	defff504 	addi	sp,sp,-44
   151f0:	dfc00a15 	stw	ra,40(sp)
   151f4:	df000915 	stw	fp,36(sp)
   151f8:	df000904 	addi	fp,sp,36
   151fc:	2005883a 	mov	r2,r4
   15200:	e0bfff05 	stb	r2,-4(fp)
    BOOLEAN    self;
    OS_TCB    *ptcb;
    INT8U      y;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   15204:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio == OS_TASK_IDLE_PRIO) {                            /* Not allowed to suspend idle task    */
   15208:	e0bfff03 	ldbu	r2,-4(fp)
   1520c:	10800518 	cmpnei	r2,r2,20
   15210:	1000021e 	bne	r2,zero,1521c <OSTaskSuspend+0x30>
        return (OS_ERR_TASK_SUSPEND_IDLE);
   15214:	008011c4 	movi	r2,71
   15218:	00006806 	br	153bc <OSTaskSuspend+0x1d0>
    }
    if (prio >= OS_LOWEST_PRIO) {                               /* Task priority valid ?               */
   1521c:	e0bfff03 	ldbu	r2,-4(fp)
   15220:	10800530 	cmpltui	r2,r2,20
   15224:	1000051e 	bne	r2,zero,1523c <OSTaskSuspend+0x50>
        if (prio != OS_PRIO_SELF) {
   15228:	e0bfff03 	ldbu	r2,-4(fp)
   1522c:	10803fe0 	cmpeqi	r2,r2,255
   15230:	1000021e 	bne	r2,zero,1523c <OSTaskSuspend+0x50>
            return (OS_ERR_PRIO_INVALID);
   15234:	00800a84 	movi	r2,42
   15238:	00006006 	br	153bc <OSTaskSuspend+0x1d0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1523c:	0005303a 	rdctl	r2,status
   15240:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   15244:	e0fffe17 	ldw	r3,-8(fp)
   15248:	00bfff84 	movi	r2,-2
   1524c:	1884703a 	and	r2,r3,r2
   15250:	1001703a 	wrctl	status,r2
  
  return context;
   15254:	e0bffe17 	ldw	r2,-8(fp)
        }
    }
#endif
    OS_ENTER_CRITICAL();
   15258:	e0bff815 	stw	r2,-32(fp)
    if (prio == OS_PRIO_SELF) {                                 /* See if suspend SELF                 */
   1525c:	e0bfff03 	ldbu	r2,-4(fp)
   15260:	10803fd8 	cmpnei	r2,r2,255
   15264:	1000061e 	bne	r2,zero,15280 <OSTaskSuspend+0x94>
        prio = OSTCBCur->OSTCBPrio;
   15268:	d0a72f17 	ldw	r2,-25412(gp)
   1526c:	10800c83 	ldbu	r2,50(r2)
   15270:	e0bfff05 	stb	r2,-4(fp)
        self = OS_TRUE;
   15274:	00800044 	movi	r2,1
   15278:	e0bff705 	stb	r2,-36(fp)
   1527c:	00000906 	br	152a4 <OSTaskSuspend+0xb8>
    } else if (prio == OSTCBCur->OSTCBPrio) {                   /* See if suspending self              */
   15280:	d0a72f17 	ldw	r2,-25412(gp)
   15284:	10800c83 	ldbu	r2,50(r2)
   15288:	10c03fcc 	andi	r3,r2,255
   1528c:	e0bfff03 	ldbu	r2,-4(fp)
   15290:	1880031e 	bne	r3,r2,152a0 <OSTaskSuspend+0xb4>
        self = OS_TRUE;
   15294:	00800044 	movi	r2,1
   15298:	e0bff705 	stb	r2,-36(fp)
   1529c:	00000106 	br	152a4 <OSTaskSuspend+0xb8>
    } else {
        self = OS_FALSE;                                        /* No suspending another task          */
   152a0:	e03ff705 	stb	zero,-36(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
   152a4:	e0ffff03 	ldbu	r3,-4(fp)
   152a8:	008000b4 	movhi	r2,2
   152ac:	10be9904 	addi	r2,r2,-1436
   152b0:	18c7883a 	add	r3,r3,r3
   152b4:	18c7883a 	add	r3,r3,r3
   152b8:	10c5883a 	add	r2,r2,r3
   152bc:	10800017 	ldw	r2,0(r2)
   152c0:	e0bffa15 	stw	r2,-24(fp)
    if (ptcb == (OS_TCB *)0) {                                  /* Task to suspend must exist          */
   152c4:	e0bffa17 	ldw	r2,-24(fp)
   152c8:	1000061e 	bne	r2,zero,152e4 <OSTaskSuspend+0xf8>
   152cc:	e0bff817 	ldw	r2,-32(fp)
   152d0:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   152d4:	e0bff917 	ldw	r2,-28(fp)
   152d8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_SUSPEND_PRIO);
   152dc:	00801204 	movi	r2,72
   152e0:	00003606 	br	153bc <OSTaskSuspend+0x1d0>
    }
    if (ptcb == OS_TCB_RESERVED) {                              /* See if assigned to Mutex            */
   152e4:	e0bffa17 	ldw	r2,-24(fp)
   152e8:	10800058 	cmpnei	r2,r2,1
   152ec:	1000061e 	bne	r2,zero,15308 <OSTaskSuspend+0x11c>
   152f0:	e0bff817 	ldw	r2,-32(fp)
   152f4:	e0bffb15 	stw	r2,-20(fp)
   152f8:	e0bffb17 	ldw	r2,-20(fp)
   152fc:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
   15300:	008010c4 	movi	r2,67
   15304:	00002d06 	br	153bc <OSTaskSuspend+0x1d0>
    }
    y            = ptcb->OSTCBY;
   15308:	e0bffa17 	ldw	r2,-24(fp)
   1530c:	10800d03 	ldbu	r2,52(r2)
   15310:	e0bffd05 	stb	r2,-12(fp)
    OSRdyTbl[y] &= ~ptcb->OSTCBBitX;                            /* Make task not ready                 */
   15314:	e0fffd03 	ldbu	r3,-12(fp)
   15318:	e13ffd03 	ldbu	r4,-12(fp)
   1531c:	d0a72c44 	addi	r2,gp,-25423
   15320:	2085883a 	add	r2,r4,r2
   15324:	10800003 	ldbu	r2,0(r2)
   15328:	1009883a 	mov	r4,r2
   1532c:	e0bffa17 	ldw	r2,-24(fp)
   15330:	10800d43 	ldbu	r2,53(r2)
   15334:	0084303a 	nor	r2,zero,r2
   15338:	2084703a 	and	r2,r4,r2
   1533c:	1009883a 	mov	r4,r2
   15340:	d0a72c44 	addi	r2,gp,-25423
   15344:	1885883a 	add	r2,r3,r2
   15348:	11000005 	stb	r4,0(r2)
    if (OSRdyTbl[y] == 0) {
   1534c:	e0fffd03 	ldbu	r3,-12(fp)
   15350:	d0a72c44 	addi	r2,gp,-25423
   15354:	1885883a 	add	r2,r3,r2
   15358:	10800003 	ldbu	r2,0(r2)
   1535c:	10803fcc 	andi	r2,r2,255
   15360:	1000071e 	bne	r2,zero,15380 <OSTaskSuspend+0x194>
        OSRdyGrp &= ~ptcb->OSTCBBitY;
   15364:	e0bffa17 	ldw	r2,-24(fp)
   15368:	10800d83 	ldbu	r2,54(r2)
   1536c:	0084303a 	nor	r2,zero,r2
   15370:	1007883a 	mov	r3,r2
   15374:	d0a72c03 	ldbu	r2,-25424(gp)
   15378:	1884703a 	and	r2,r3,r2
   1537c:	d0a72c05 	stb	r2,-25424(gp)
    }
    ptcb->OSTCBStat |= OS_STAT_SUSPEND;                         /* Status of task is 'SUSPENDED'       */
   15380:	e0bffa17 	ldw	r2,-24(fp)
   15384:	10800c03 	ldbu	r2,48(r2)
   15388:	10800214 	ori	r2,r2,8
   1538c:	1007883a 	mov	r3,r2
   15390:	e0bffa17 	ldw	r2,-24(fp)
   15394:	10c00c05 	stb	r3,48(r2)
   15398:	e0bff817 	ldw	r2,-32(fp)
   1539c:	e0bffc15 	stw	r2,-16(fp)
   153a0:	e0bffc17 	ldw	r2,-16(fp)
   153a4:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    if (self == OS_TRUE) {                                      /* Context switch only if SELF         */
   153a8:	e0bff703 	ldbu	r2,-36(fp)
   153ac:	10800058 	cmpnei	r2,r2,1
   153b0:	1000011e 	bne	r2,zero,153b8 <OSTaskSuspend+0x1cc>
        OS_Sched();                                             /* Find new highest priority task      */
   153b4:	000fbbc0 	call	fbbc <OS_Sched>
    }
    return (OS_ERR_NONE);
   153b8:	0005883a 	mov	r2,zero
}
   153bc:	e037883a 	mov	sp,fp
   153c0:	dfc00117 	ldw	ra,4(sp)
   153c4:	df000017 	ldw	fp,0(sp)
   153c8:	dec00204 	addi	sp,sp,8
   153cc:	f800283a 	ret

000153d0 <OSTaskQuery>:
*********************************************************************************************************
*/

#if OS_TASK_QUERY_EN > 0
INT8U  OSTaskQuery (INT8U prio, OS_TCB *p_task_data)
{
   153d0:	defff604 	addi	sp,sp,-40
   153d4:	dfc00915 	stw	ra,36(sp)
   153d8:	df000815 	stw	fp,32(sp)
   153dc:	df000804 	addi	fp,sp,32
   153e0:	2005883a 	mov	r2,r4
   153e4:	e17fff15 	stw	r5,-4(fp)
   153e8:	e0bffe05 	stb	r2,-8(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   153ec:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {                 /* Task priority valid ?                              */
   153f0:	e0bffe03 	ldbu	r2,-8(fp)
   153f4:	10800570 	cmpltui	r2,r2,21
   153f8:	1000051e 	bne	r2,zero,15410 <OSTaskQuery+0x40>
        if (prio != OS_PRIO_SELF) {
   153fc:	e0bffe03 	ldbu	r2,-8(fp)
   15400:	10803fe0 	cmpeqi	r2,r2,255
   15404:	1000021e 	bne	r2,zero,15410 <OSTaskQuery+0x40>
            return (OS_ERR_PRIO_INVALID);
   15408:	00800a84 	movi	r2,42
   1540c:	00003406 	br	154e0 <OSTaskQuery+0x110>
        }
    }
    if (p_task_data == (OS_TCB *)0) {            /* Validate 'p_task_data'                             */
   15410:	e0bfff17 	ldw	r2,-4(fp)
   15414:	1000021e 	bne	r2,zero,15420 <OSTaskQuery+0x50>
        return (OS_ERR_PDATA_NULL);
   15418:	00800244 	movi	r2,9
   1541c:	00003006 	br	154e0 <OSTaskQuery+0x110>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   15420:	0005303a 	rdctl	r2,status
   15424:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   15428:	e0fffd17 	ldw	r3,-12(fp)
   1542c:	00bfff84 	movi	r2,-2
   15430:	1884703a 	and	r2,r3,r2
   15434:	1001703a 	wrctl	status,r2
  
  return context;
   15438:	e0bffd17 	ldw	r2,-12(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   1543c:	e0bff815 	stw	r2,-32(fp)
    if (prio == OS_PRIO_SELF) {                  /* See if suspend SELF                                */
   15440:	e0bffe03 	ldbu	r2,-8(fp)
   15444:	10803fd8 	cmpnei	r2,r2,255
   15448:	1000031e 	bne	r2,zero,15458 <OSTaskQuery+0x88>
        prio = OSTCBCur->OSTCBPrio;
   1544c:	d0a72f17 	ldw	r2,-25412(gp)
   15450:	10800c83 	ldbu	r2,50(r2)
   15454:	e0bffe05 	stb	r2,-8(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
   15458:	e0fffe03 	ldbu	r3,-8(fp)
   1545c:	008000b4 	movhi	r2,2
   15460:	10be9904 	addi	r2,r2,-1436
   15464:	18c7883a 	add	r3,r3,r3
   15468:	18c7883a 	add	r3,r3,r3
   1546c:	10c5883a 	add	r2,r2,r3
   15470:	10800017 	ldw	r2,0(r2)
   15474:	e0bffa15 	stw	r2,-24(fp)
    if (ptcb == (OS_TCB *)0) {                   /* Task to query must exist                           */
   15478:	e0bffa17 	ldw	r2,-24(fp)
   1547c:	1000061e 	bne	r2,zero,15498 <OSTaskQuery+0xc8>
   15480:	e0bff817 	ldw	r2,-32(fp)
   15484:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   15488:	e0bff917 	ldw	r2,-28(fp)
   1548c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_PRIO);
   15490:	00800a44 	movi	r2,41
   15494:	00001206 	br	154e0 <OSTaskQuery+0x110>
    }
    if (ptcb == OS_TCB_RESERVED) {               /* Task to query must not be assigned to a Mutex      */
   15498:	e0bffa17 	ldw	r2,-24(fp)
   1549c:	10800058 	cmpnei	r2,r2,1
   154a0:	1000061e 	bne	r2,zero,154bc <OSTaskQuery+0xec>
   154a4:	e0bff817 	ldw	r2,-32(fp)
   154a8:	e0bffb15 	stw	r2,-20(fp)
   154ac:	e0bffb17 	ldw	r2,-20(fp)
   154b0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
   154b4:	008010c4 	movi	r2,67
   154b8:	00000906 	br	154e0 <OSTaskQuery+0x110>
    }
                                                 /* Copy TCB into user storage area                    */
    OS_MemCopy((INT8U *)p_task_data, (INT8U *)ptcb, sizeof(OS_TCB));
   154bc:	01801b04 	movi	r6,108
   154c0:	e17ffa17 	ldw	r5,-24(fp)
   154c4:	e13fff17 	ldw	r4,-4(fp)
   154c8:	000fb540 	call	fb54 <OS_MemCopy>
   154cc:	e0bff817 	ldw	r2,-32(fp)
   154d0:	e0bffc15 	stw	r2,-16(fp)
   154d4:	e0bffc17 	ldw	r2,-16(fp)
   154d8:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
   154dc:	0005883a 	mov	r2,zero
}
   154e0:	e037883a 	mov	sp,fp
   154e4:	dfc00117 	ldw	ra,4(sp)
   154e8:	df000017 	ldw	fp,0(sp)
   154ec:	dec00204 	addi	sp,sp,8
   154f0:	f800283a 	ret

000154f4 <OS_TaskStkClr>:
* Returns    : none
*********************************************************************************************************
*/
#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
void  OS_TaskStkClr (OS_STK *pbos, INT32U size, INT16U opt)
{
   154f4:	defffc04 	addi	sp,sp,-16
   154f8:	df000315 	stw	fp,12(sp)
   154fc:	df000304 	addi	fp,sp,12
   15500:	e13ffd15 	stw	r4,-12(fp)
   15504:	e17ffe15 	stw	r5,-8(fp)
   15508:	3005883a 	mov	r2,r6
   1550c:	e0bfff0d 	sth	r2,-4(fp)
    if ((opt & OS_TASK_OPT_STK_CHK) != 0x0000) {       /* See if stack checking has been enabled       */
   15510:	e0bfff0b 	ldhu	r2,-4(fp)
   15514:	1080004c 	andi	r2,r2,1
   15518:	10000d26 	beq	r2,zero,15550 <OS_TaskStkClr+0x5c>
        if ((opt & OS_TASK_OPT_STK_CLR) != 0x0000) {   /* See if stack needs to be cleared             */
   1551c:	e0bfff0b 	ldhu	r2,-4(fp)
   15520:	1080008c 	andi	r2,r2,2
   15524:	10000a26 	beq	r2,zero,15550 <OS_TaskStkClr+0x5c>
#if OS_STK_GROWTH == 1
            while (size > 0) {                         /* Stack grows from HIGH to LOW memory          */
   15528:	00000706 	br	15548 <OS_TaskStkClr+0x54>
                size--;
   1552c:	e0bffe17 	ldw	r2,-8(fp)
   15530:	10bfffc4 	addi	r2,r2,-1
   15534:	e0bffe15 	stw	r2,-8(fp)
                *pbos++ = (OS_STK)0;                   /* Clear from bottom of stack and up!           */
   15538:	e0bffd17 	ldw	r2,-12(fp)
   1553c:	10c00104 	addi	r3,r2,4
   15540:	e0fffd15 	stw	r3,-12(fp)
   15544:	10000015 	stw	zero,0(r2)
void  OS_TaskStkClr (OS_STK *pbos, INT32U size, INT16U opt)
{
    if ((opt & OS_TASK_OPT_STK_CHK) != 0x0000) {       /* See if stack checking has been enabled       */
        if ((opt & OS_TASK_OPT_STK_CLR) != 0x0000) {   /* See if stack needs to be cleared             */
#if OS_STK_GROWTH == 1
            while (size > 0) {                         /* Stack grows from HIGH to LOW memory          */
   15548:	e0bffe17 	ldw	r2,-8(fp)
   1554c:	103ff71e 	bne	r2,zero,1552c <__alt_data_end+0xfffe552c>
                *pbos-- = (OS_STK)0;                   /* Clear from bottom of stack and down          */
            }
#endif
        }
    }
}
   15550:	0001883a 	nop
   15554:	e037883a 	mov	sp,fp
   15558:	df000017 	ldw	fp,0(sp)
   1555c:	dec00104 	addi	sp,sp,4
   15560:	f800283a 	ret

00015564 <OSTimeDly>:
* Returns    : none
*********************************************************************************************************
*/

void  OSTimeDly (INT16U ticks)
{
   15564:	defff904 	addi	sp,sp,-28
   15568:	dfc00615 	stw	ra,24(sp)
   1556c:	df000515 	stw	fp,20(sp)
   15570:	df000504 	addi	fp,sp,20
   15574:	2005883a 	mov	r2,r4
   15578:	e0bfff0d 	sth	r2,-4(fp)
    INT8U      y;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   1557c:	e03ffb15 	stw	zero,-20(fp)
#endif



    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
   15580:	d0a72e03 	ldbu	r2,-25416(gp)
   15584:	10803fcc 	andi	r2,r2,255
   15588:	1000311e 	bne	r2,zero,15650 <OSTimeDly+0xec>
        return;
    }
    if (ticks > 0) {                             /* 0 means no delay!                                  */
   1558c:	e0bfff0b 	ldhu	r2,-4(fp)
   15590:	10003026 	beq	r2,zero,15654 <OSTimeDly+0xf0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   15594:	0005303a 	rdctl	r2,status
   15598:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1559c:	e0fffe17 	ldw	r3,-8(fp)
   155a0:	00bfff84 	movi	r2,-2
   155a4:	1884703a 	and	r2,r3,r2
   155a8:	1001703a 	wrctl	status,r2
  
  return context;
   155ac:	e0bffe17 	ldw	r2,-8(fp)
        OS_ENTER_CRITICAL();
   155b0:	e0bffb15 	stw	r2,-20(fp)
        y            =  OSTCBCur->OSTCBY;        /* Delay current task                                 */
   155b4:	d0a72f17 	ldw	r2,-25412(gp)
   155b8:	10800d03 	ldbu	r2,52(r2)
   155bc:	e0bffd05 	stb	r2,-12(fp)
        OSRdyTbl[y] &= ~OSTCBCur->OSTCBBitX;
   155c0:	e0fffd03 	ldbu	r3,-12(fp)
   155c4:	e13ffd03 	ldbu	r4,-12(fp)
   155c8:	d0a72c44 	addi	r2,gp,-25423
   155cc:	2085883a 	add	r2,r4,r2
   155d0:	10800003 	ldbu	r2,0(r2)
   155d4:	1009883a 	mov	r4,r2
   155d8:	d0a72f17 	ldw	r2,-25412(gp)
   155dc:	10800d43 	ldbu	r2,53(r2)
   155e0:	0084303a 	nor	r2,zero,r2
   155e4:	2084703a 	and	r2,r4,r2
   155e8:	1009883a 	mov	r4,r2
   155ec:	d0a72c44 	addi	r2,gp,-25423
   155f0:	1885883a 	add	r2,r3,r2
   155f4:	11000005 	stb	r4,0(r2)
        if (OSRdyTbl[y] == 0) {
   155f8:	e0fffd03 	ldbu	r3,-12(fp)
   155fc:	d0a72c44 	addi	r2,gp,-25423
   15600:	1885883a 	add	r2,r3,r2
   15604:	10800003 	ldbu	r2,0(r2)
   15608:	10803fcc 	andi	r2,r2,255
   1560c:	1000071e 	bne	r2,zero,1562c <OSTimeDly+0xc8>
            OSRdyGrp &= ~OSTCBCur->OSTCBBitY;
   15610:	d0a72f17 	ldw	r2,-25412(gp)
   15614:	10800d83 	ldbu	r2,54(r2)
   15618:	0084303a 	nor	r2,zero,r2
   1561c:	1007883a 	mov	r3,r2
   15620:	d0a72c03 	ldbu	r2,-25424(gp)
   15624:	1884703a 	and	r2,r3,r2
   15628:	d0a72c05 	stb	r2,-25424(gp)
        }
        OSTCBCur->OSTCBDly = ticks;              /* Load ticks in TCB                                  */
   1562c:	d0a72f17 	ldw	r2,-25412(gp)
   15630:	e0ffff0b 	ldhu	r3,-4(fp)
   15634:	10c00b8d 	sth	r3,46(r2)
   15638:	e0bffb17 	ldw	r2,-20(fp)
   1563c:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   15640:	e0bffc17 	ldw	r2,-16(fp)
   15644:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                              /* Find next task to run!                             */
   15648:	000fbbc0 	call	fbbc <OS_Sched>
   1564c:	00000106 	br	15654 <OSTimeDly+0xf0>
#endif



    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
        return;
   15650:	0001883a 	nop
        }
        OSTCBCur->OSTCBDly = ticks;              /* Load ticks in TCB                                  */
        OS_EXIT_CRITICAL();
        OS_Sched();                              /* Find next task to run!                             */
    }
}
   15654:	e037883a 	mov	sp,fp
   15658:	dfc00117 	ldw	ra,4(sp)
   1565c:	df000017 	ldw	fp,0(sp)
   15660:	dec00204 	addi	sp,sp,8
   15664:	f800283a 	ret

00015668 <OSTimeDlyHMSM>:
*********************************************************************************************************
*/

#if OS_TIME_DLY_HMSM_EN > 0
INT8U  OSTimeDlyHMSM (INT8U hours, INT8U minutes, INT8U seconds, INT16U ms)
{
   15668:	defff704 	addi	sp,sp,-36
   1566c:	dfc00815 	stw	ra,32(sp)
   15670:	df000715 	stw	fp,28(sp)
   15674:	dc000615 	stw	r16,24(sp)
   15678:	df000704 	addi	fp,sp,28
   1567c:	2011883a 	mov	r8,r4
   15680:	2809883a 	mov	r4,r5
   15684:	3007883a 	mov	r3,r6
   15688:	3805883a 	mov	r2,r7
   1568c:	e23ffb05 	stb	r8,-20(fp)
   15690:	e13ffc05 	stb	r4,-16(fp)
   15694:	e0fffd05 	stb	r3,-12(fp)
   15698:	e0bffe0d 	sth	r2,-8(fp)
    INT32U ticks;
    INT16U loops;


    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
   1569c:	d0a72e03 	ldbu	r2,-25416(gp)
   156a0:	10803fcc 	andi	r2,r2,255
   156a4:	10000226 	beq	r2,zero,156b0 <OSTimeDlyHMSM+0x48>
        return (OS_ERR_TIME_DLY_ISR);
   156a8:	00801544 	movi	r2,85
   156ac:	00004706 	br	157cc <OSTimeDlyHMSM+0x164>
    }
#if OS_ARG_CHK_EN > 0
    if (hours == 0) {
   156b0:	e0bffb03 	ldbu	r2,-20(fp)
   156b4:	1000081e 	bne	r2,zero,156d8 <OSTimeDlyHMSM+0x70>
        if (minutes == 0) {
   156b8:	e0bffc03 	ldbu	r2,-16(fp)
   156bc:	1000061e 	bne	r2,zero,156d8 <OSTimeDlyHMSM+0x70>
            if (seconds == 0) {
   156c0:	e0bffd03 	ldbu	r2,-12(fp)
   156c4:	1000041e 	bne	r2,zero,156d8 <OSTimeDlyHMSM+0x70>
                if (ms == 0) {
   156c8:	e0bffe0b 	ldhu	r2,-8(fp)
   156cc:	1000021e 	bne	r2,zero,156d8 <OSTimeDlyHMSM+0x70>
                    return (OS_ERR_TIME_ZERO_DLY);
   156d0:	00801504 	movi	r2,84
   156d4:	00003d06 	br	157cc <OSTimeDlyHMSM+0x164>
                }
            }
        }
    }
    if (minutes > 59) {
   156d8:	e0bffc03 	ldbu	r2,-16(fp)
   156dc:	10800f30 	cmpltui	r2,r2,60
   156e0:	1000021e 	bne	r2,zero,156ec <OSTimeDlyHMSM+0x84>
        return (OS_ERR_TIME_INVALID_MINUTES);    /* Validate arguments to be within range              */
   156e4:	00801444 	movi	r2,81
   156e8:	00003806 	br	157cc <OSTimeDlyHMSM+0x164>
    }
    if (seconds > 59) {
   156ec:	e0bffd03 	ldbu	r2,-12(fp)
   156f0:	10800f30 	cmpltui	r2,r2,60
   156f4:	1000021e 	bne	r2,zero,15700 <OSTimeDlyHMSM+0x98>
        return (OS_ERR_TIME_INVALID_SECONDS);
   156f8:	00801484 	movi	r2,82
   156fc:	00003306 	br	157cc <OSTimeDlyHMSM+0x164>
    }
    if (ms > 999) {
   15700:	e0bffe0b 	ldhu	r2,-8(fp)
   15704:	1080fa30 	cmpltui	r2,r2,1000
   15708:	1000021e 	bne	r2,zero,15714 <OSTimeDlyHMSM+0xac>
        return (OS_ERR_TIME_INVALID_MS);
   1570c:	008014c4 	movi	r2,83
   15710:	00002e06 	br	157cc <OSTimeDlyHMSM+0x164>
    }
#endif
                                                 /* Compute the total number of clock ticks required.. */
                                                 /* .. (rounded to the nearest tick)                   */
    ticks = ((INT32U)hours * 3600L + (INT32U)minutes * 60L + (INT32U)seconds) * OS_TICKS_PER_SEC
   15714:	e0bffb03 	ldbu	r2,-20(fp)
   15718:	01438404 	movi	r5,3600
   1571c:	1009883a 	mov	r4,r2
   15720:	000aa740 	call	aa74 <__mulsi3>
   15724:	1021883a 	mov	r16,r2
   15728:	e0bffc03 	ldbu	r2,-16(fp)
   1572c:	01400f04 	movi	r5,60
   15730:	1009883a 	mov	r4,r2
   15734:	000aa740 	call	aa74 <__mulsi3>
   15738:	8087883a 	add	r3,r16,r2
   1573c:	e0bffd03 	ldbu	r2,-12(fp)
   15740:	1885883a 	add	r2,r3,r2
   15744:	0140fa04 	movi	r5,1000
   15748:	1009883a 	mov	r4,r2
   1574c:	000aa740 	call	aa74 <__mulsi3>
   15750:	1021883a 	mov	r16,r2
          + OS_TICKS_PER_SEC * ((INT32U)ms + 500L / OS_TICKS_PER_SEC) / 1000L;
   15754:	e0bffe0b 	ldhu	r2,-8(fp)
   15758:	0140fa04 	movi	r5,1000
   1575c:	1009883a 	mov	r4,r2
   15760:	000aa740 	call	aa74 <__mulsi3>
   15764:	0140fa04 	movi	r5,1000
   15768:	1009883a 	mov	r4,r2
   1576c:	00005cc0 	call	5cc <__udivsi3>
        return (OS_ERR_TIME_INVALID_MS);
    }
#endif
                                                 /* Compute the total number of clock ticks required.. */
                                                 /* .. (rounded to the nearest tick)                   */
    ticks = ((INT32U)hours * 3600L + (INT32U)minutes * 60L + (INT32U)seconds) * OS_TICKS_PER_SEC
   15770:	8085883a 	add	r2,r16,r2
   15774:	e0bffa15 	stw	r2,-24(fp)
          + OS_TICKS_PER_SEC * ((INT32U)ms + 500L / OS_TICKS_PER_SEC) / 1000L;
    loops = (INT16U)(ticks >> 16);               /* Compute the integral number of 65536 tick delays   */
   15778:	e0bffa17 	ldw	r2,-24(fp)
   1577c:	1004d43a 	srli	r2,r2,16
   15780:	e0bff90d 	sth	r2,-28(fp)
    ticks = ticks & 0xFFFFL;                     /* Obtain  the fractional number of ticks             */
   15784:	e0bffa17 	ldw	r2,-24(fp)
   15788:	10bfffcc 	andi	r2,r2,65535
   1578c:	e0bffa15 	stw	r2,-24(fp)
    OSTimeDly((INT16U)ticks);
   15790:	e0bffa17 	ldw	r2,-24(fp)
   15794:	10bfffcc 	andi	r2,r2,65535
   15798:	1009883a 	mov	r4,r2
   1579c:	00155640 	call	15564 <OSTimeDly>
    while (loops > 0) {
   157a0:	00000706 	br	157c0 <OSTimeDlyHMSM+0x158>
        OSTimeDly((INT16U)32768u);
   157a4:	01200014 	movui	r4,32768
   157a8:	00155640 	call	15564 <OSTimeDly>
        OSTimeDly((INT16U)32768u);
   157ac:	01200014 	movui	r4,32768
   157b0:	00155640 	call	15564 <OSTimeDly>
        loops--;
   157b4:	e0bff90b 	ldhu	r2,-28(fp)
   157b8:	10bfffc4 	addi	r2,r2,-1
   157bc:	e0bff90d 	sth	r2,-28(fp)
    ticks = ((INT32U)hours * 3600L + (INT32U)minutes * 60L + (INT32U)seconds) * OS_TICKS_PER_SEC
          + OS_TICKS_PER_SEC * ((INT32U)ms + 500L / OS_TICKS_PER_SEC) / 1000L;
    loops = (INT16U)(ticks >> 16);               /* Compute the integral number of 65536 tick delays   */
    ticks = ticks & 0xFFFFL;                     /* Obtain  the fractional number of ticks             */
    OSTimeDly((INT16U)ticks);
    while (loops > 0) {
   157c0:	e0bff90b 	ldhu	r2,-28(fp)
   157c4:	103ff71e 	bne	r2,zero,157a4 <__alt_data_end+0xfffe57a4>
        OSTimeDly((INT16U)32768u);
        OSTimeDly((INT16U)32768u);
        loops--;
    }
    return (OS_ERR_NONE);
   157c8:	0005883a 	mov	r2,zero
}
   157cc:	e6ffff04 	addi	sp,fp,-4
   157d0:	dfc00217 	ldw	ra,8(sp)
   157d4:	df000117 	ldw	fp,4(sp)
   157d8:	dc000017 	ldw	r16,0(sp)
   157dc:	dec00304 	addi	sp,sp,12
   157e0:	f800283a 	ret

000157e4 <OSTimeDlyResume>:
*********************************************************************************************************
*/

#if OS_TIME_DLY_RESUME_EN > 0
INT8U  OSTimeDlyResume (INT8U prio)
{
   157e4:	defff504 	addi	sp,sp,-44
   157e8:	dfc00a15 	stw	ra,40(sp)
   157ec:	df000915 	stw	fp,36(sp)
   157f0:	df000904 	addi	fp,sp,36
   157f4:	2005883a 	mov	r2,r4
   157f8:	e0bfff05 	stb	r2,-4(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                                    /* Storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   157fc:	e03ff715 	stw	zero,-36(fp)
#endif



    if (prio >= OS_LOWEST_PRIO) {
   15800:	e0bfff03 	ldbu	r2,-4(fp)
   15804:	10800530 	cmpltui	r2,r2,20
   15808:	1000021e 	bne	r2,zero,15814 <OSTimeDlyResume+0x30>
        return (OS_ERR_PRIO_INVALID);
   1580c:	00800a84 	movi	r2,42
   15810:	00006406 	br	159a4 <OSTimeDlyResume+0x1c0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   15814:	0005303a 	rdctl	r2,status
   15818:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1581c:	e0fffe17 	ldw	r3,-8(fp)
   15820:	00bfff84 	movi	r2,-2
   15824:	1884703a 	and	r2,r3,r2
   15828:	1001703a 	wrctl	status,r2
  
  return context;
   1582c:	e0bffe17 	ldw	r2,-8(fp)
    }
    OS_ENTER_CRITICAL();
   15830:	e0bff715 	stw	r2,-36(fp)
    ptcb = OSTCBPrioTbl[prio];                                 /* Make sure that task exist            */
   15834:	e0ffff03 	ldbu	r3,-4(fp)
   15838:	008000b4 	movhi	r2,2
   1583c:	10be9904 	addi	r2,r2,-1436
   15840:	18c7883a 	add	r3,r3,r3
   15844:	18c7883a 	add	r3,r3,r3
   15848:	10c5883a 	add	r2,r2,r3
   1584c:	10800017 	ldw	r2,0(r2)
   15850:	e0bff915 	stw	r2,-28(fp)
    if (ptcb == (OS_TCB *)0) {
   15854:	e0bff917 	ldw	r2,-28(fp)
   15858:	1000061e 	bne	r2,zero,15874 <OSTimeDlyResume+0x90>
   1585c:	e0bff717 	ldw	r2,-36(fp)
   15860:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   15864:	e0bff817 	ldw	r2,-32(fp)
   15868:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);                        /* The task does not exist              */
   1586c:	008010c4 	movi	r2,67
   15870:	00004c06 	br	159a4 <OSTimeDlyResume+0x1c0>
    }
    if (ptcb == OS_TCB_RESERVED) {
   15874:	e0bff917 	ldw	r2,-28(fp)
   15878:	10800058 	cmpnei	r2,r2,1
   1587c:	1000061e 	bne	r2,zero,15898 <OSTimeDlyResume+0xb4>
   15880:	e0bff717 	ldw	r2,-36(fp)
   15884:	e0bffa15 	stw	r2,-24(fp)
   15888:	e0bffa17 	ldw	r2,-24(fp)
   1588c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);                        /* The task does not exist              */
   15890:	008010c4 	movi	r2,67
   15894:	00004306 	br	159a4 <OSTimeDlyResume+0x1c0>
    }
    if (ptcb->OSTCBDly == 0) {                                 /* See if task is delayed               */
   15898:	e0bff917 	ldw	r2,-28(fp)
   1589c:	10800b8b 	ldhu	r2,46(r2)
   158a0:	10bfffcc 	andi	r2,r2,65535
   158a4:	1000061e 	bne	r2,zero,158c0 <OSTimeDlyResume+0xdc>
   158a8:	e0bff717 	ldw	r2,-36(fp)
   158ac:	e0bffb15 	stw	r2,-20(fp)
   158b0:	e0bffb17 	ldw	r2,-20(fp)
   158b4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TIME_NOT_DLY);                          /* Indicate that task was not delayed   */
   158b8:	00801404 	movi	r2,80
   158bc:	00003906 	br	159a4 <OSTimeDlyResume+0x1c0>
    }

    ptcb->OSTCBDly = 0;                                        /* Clear the time delay                 */
   158c0:	e0bff917 	ldw	r2,-28(fp)
   158c4:	10000b8d 	sth	zero,46(r2)
    if ((ptcb->OSTCBStat & OS_STAT_PEND_ANY) != OS_STAT_RDY) {
   158c8:	e0bff917 	ldw	r2,-28(fp)
   158cc:	10800c03 	ldbu	r2,48(r2)
   158d0:	10803fcc 	andi	r2,r2,255
   158d4:	10800dcc 	andi	r2,r2,55
   158d8:	10000b26 	beq	r2,zero,15908 <OSTimeDlyResume+0x124>
        ptcb->OSTCBStat     &= ~OS_STAT_PEND_ANY;              /* Yes, Clear status flag               */
   158dc:	e0bff917 	ldw	r2,-28(fp)
   158e0:	10c00c03 	ldbu	r3,48(r2)
   158e4:	00bff204 	movi	r2,-56
   158e8:	1884703a 	and	r2,r3,r2
   158ec:	1007883a 	mov	r3,r2
   158f0:	e0bff917 	ldw	r2,-28(fp)
   158f4:	10c00c05 	stb	r3,48(r2)
        ptcb->OSTCBStatPend  =  OS_STAT_PEND_TO;               /* Indicate PEND timeout                */
   158f8:	e0bff917 	ldw	r2,-28(fp)
   158fc:	00c00044 	movi	r3,1
   15900:	10c00c45 	stb	r3,49(r2)
   15904:	00000206 	br	15910 <OSTimeDlyResume+0x12c>
    } else {
        ptcb->OSTCBStatPend  =  OS_STAT_PEND_OK;
   15908:	e0bff917 	ldw	r2,-28(fp)
   1590c:	10000c45 	stb	zero,49(r2)
    }
    if ((ptcb->OSTCBStat & OS_STAT_SUSPEND) == OS_STAT_RDY) {  /* Is task suspended?                   */
   15910:	e0bff917 	ldw	r2,-28(fp)
   15914:	10800c03 	ldbu	r2,48(r2)
   15918:	10803fcc 	andi	r2,r2,255
   1591c:	1080020c 	andi	r2,r2,8
   15920:	10001b1e 	bne	r2,zero,15990 <OSTimeDlyResume+0x1ac>
        OSRdyGrp               |= ptcb->OSTCBBitY;             /* No,  Make ready                      */
   15924:	e0bff917 	ldw	r2,-28(fp)
   15928:	10c00d83 	ldbu	r3,54(r2)
   1592c:	d0a72c03 	ldbu	r2,-25424(gp)
   15930:	1884b03a 	or	r2,r3,r2
   15934:	d0a72c05 	stb	r2,-25424(gp)
        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
   15938:	e0bff917 	ldw	r2,-28(fp)
   1593c:	10800d03 	ldbu	r2,52(r2)
   15940:	10c03fcc 	andi	r3,r2,255
   15944:	e0bff917 	ldw	r2,-28(fp)
   15948:	10800d03 	ldbu	r2,52(r2)
   1594c:	11003fcc 	andi	r4,r2,255
   15950:	d0a72c44 	addi	r2,gp,-25423
   15954:	2085883a 	add	r2,r4,r2
   15958:	11000003 	ldbu	r4,0(r2)
   1595c:	e0bff917 	ldw	r2,-28(fp)
   15960:	10800d43 	ldbu	r2,53(r2)
   15964:	2084b03a 	or	r2,r4,r2
   15968:	1009883a 	mov	r4,r2
   1596c:	d0a72c44 	addi	r2,gp,-25423
   15970:	1885883a 	add	r2,r3,r2
   15974:	11000005 	stb	r4,0(r2)
   15978:	e0bff717 	ldw	r2,-36(fp)
   1597c:	e0bffc15 	stw	r2,-16(fp)
   15980:	e0bffc17 	ldw	r2,-16(fp)
   15984:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                            /* See if this is new highest priority  */
   15988:	000fbbc0 	call	fbbc <OS_Sched>
   1598c:	00000406 	br	159a0 <OSTimeDlyResume+0x1bc>
   15990:	e0bff717 	ldw	r2,-36(fp)
   15994:	e0bffd15 	stw	r2,-12(fp)
   15998:	e0bffd17 	ldw	r2,-12(fp)
   1599c:	1001703a 	wrctl	status,r2
    } else {
        OS_EXIT_CRITICAL();                                    /* Task may be suspended                */
    }
    return (OS_ERR_NONE);
   159a0:	0005883a 	mov	r2,zero
}
   159a4:	e037883a 	mov	sp,fp
   159a8:	dfc00117 	ldw	ra,4(sp)
   159ac:	df000017 	ldw	fp,0(sp)
   159b0:	dec00204 	addi	sp,sp,8
   159b4:	f800283a 	ret

000159b8 <OSTimeGet>:
*********************************************************************************************************
*/

#if OS_TIME_GET_SET_EN > 0
INT32U  OSTimeGet (void)
{
   159b8:	defffb04 	addi	sp,sp,-20
   159bc:	df000415 	stw	fp,16(sp)
   159c0:	df000404 	addi	fp,sp,16
    INT32U     ticks;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   159c4:	e03ffc15 	stw	zero,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   159c8:	0005303a 	rdctl	r2,status
   159cc:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   159d0:	e0fffe17 	ldw	r3,-8(fp)
   159d4:	00bfff84 	movi	r2,-2
   159d8:	1884703a 	and	r2,r3,r2
   159dc:	1001703a 	wrctl	status,r2
  
  return context;
   159e0:	e0bffe17 	ldw	r2,-8(fp)
#endif



    OS_ENTER_CRITICAL();
   159e4:	e0bffc15 	stw	r2,-16(fp)
    ticks = OSTime;
   159e8:	d0a73017 	ldw	r2,-25408(gp)
   159ec:	e0bffd15 	stw	r2,-12(fp)
   159f0:	e0bffc17 	ldw	r2,-16(fp)
   159f4:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   159f8:	e0bfff17 	ldw	r2,-4(fp)
   159fc:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (ticks);
   15a00:	e0bffd17 	ldw	r2,-12(fp)
}
   15a04:	e037883a 	mov	sp,fp
   15a08:	df000017 	ldw	fp,0(sp)
   15a0c:	dec00104 	addi	sp,sp,4
   15a10:	f800283a 	ret

00015a14 <OSTimeSet>:
*********************************************************************************************************
*/

#if OS_TIME_GET_SET_EN > 0
void  OSTimeSet (INT32U ticks)
{
   15a14:	defffb04 	addi	sp,sp,-20
   15a18:	df000415 	stw	fp,16(sp)
   15a1c:	df000404 	addi	fp,sp,16
   15a20:	e13fff15 	stw	r4,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   15a24:	e03ffc15 	stw	zero,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   15a28:	0005303a 	rdctl	r2,status
   15a2c:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   15a30:	e0fffd17 	ldw	r3,-12(fp)
   15a34:	00bfff84 	movi	r2,-2
   15a38:	1884703a 	and	r2,r3,r2
   15a3c:	1001703a 	wrctl	status,r2
  
  return context;
   15a40:	e0bffd17 	ldw	r2,-12(fp)
#endif



    OS_ENTER_CRITICAL();
   15a44:	e0bffc15 	stw	r2,-16(fp)
    OSTime = ticks;
   15a48:	e0bfff17 	ldw	r2,-4(fp)
   15a4c:	d0a73015 	stw	r2,-25408(gp)
   15a50:	e0bffc17 	ldw	r2,-16(fp)
   15a54:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   15a58:	e0bffe17 	ldw	r2,-8(fp)
   15a5c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
}
   15a60:	0001883a 	nop
   15a64:	e037883a 	mov	sp,fp
   15a68:	df000017 	ldw	fp,0(sp)
   15a6c:	dec00104 	addi	sp,sp,4
   15a70:	f800283a 	ret

00015a74 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
   15a74:	defffd04 	addi	sp,sp,-12
   15a78:	dfc00215 	stw	ra,8(sp)
   15a7c:	df000115 	stw	fp,4(sp)
   15a80:	df000104 	addi	fp,sp,4
   15a84:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
   15a88:	d1600804 	addi	r5,gp,-32736
   15a8c:	e13fff17 	ldw	r4,-4(fp)
   15a90:	0016aec0 	call	16aec <alt_dev_llist_insert>
}
   15a94:	e037883a 	mov	sp,fp
   15a98:	dfc00117 	ldw	ra,4(sp)
   15a9c:	df000017 	ldw	fp,0(sp)
   15aa0:	dec00204 	addi	sp,sp,8
   15aa4:	f800283a 	ret

00015aa8 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
   15aa8:	defffd04 	addi	sp,sp,-12
   15aac:	dfc00215 	stw	ra,8(sp)
   15ab0:	df000115 	stw	fp,4(sp)
   15ab4:	df000104 	addi	fp,sp,4
   15ab8:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( NIOS2, nios2);
   15abc:	00171f80 	call	171f8 <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
   15ac0:	00800044 	movi	r2,1
   15ac4:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
   15ac8:	0001883a 	nop
   15acc:	e037883a 	mov	sp,fp
   15ad0:	dfc00117 	ldw	ra,4(sp)
   15ad4:	df000017 	ldw	fp,0(sp)
   15ad8:	dec00204 	addi	sp,sp,8
   15adc:	f800283a 	ret

00015ae0 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
   15ae0:	defffe04 	addi	sp,sp,-8
   15ae4:	dfc00115 	stw	ra,4(sp)
   15ae8:	df000015 	stw	fp,0(sp)
   15aec:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER, timer);
   15af0:	01c0fa04 	movi	r7,1000
   15af4:	000d883a 	mov	r6,zero
   15af8:	000b883a 	mov	r5,zero
   15afc:	01000134 	movhi	r4,4
   15b00:	21040004 	addi	r4,r4,4096
   15b04:	00168e80 	call	168e8 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG, jtag);
   15b08:	01800084 	movi	r6,2
   15b0c:	000b883a 	mov	r5,zero
   15b10:	010000b4 	movhi	r4,2
   15b14:	21229404 	addi	r4,r4,-30128
   15b18:	0015ca80 	call	15ca8 <altera_avalon_jtag_uart_init>
   15b1c:	010000b4 	movhi	r4,2
   15b20:	21228a04 	addi	r4,r4,-30168
   15b24:	0015a740 	call	15a74 <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID, sysid);
   15b28:	0001883a 	nop
}
   15b2c:	0001883a 	nop
   15b30:	e037883a 	mov	sp,fp
   15b34:	dfc00117 	ldw	ra,4(sp)
   15b38:	df000017 	ldw	fp,0(sp)
   15b3c:	dec00204 	addi	sp,sp,8
   15b40:	f800283a 	ret

00015b44 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
   15b44:	defffa04 	addi	sp,sp,-24
   15b48:	dfc00515 	stw	ra,20(sp)
   15b4c:	df000415 	stw	fp,16(sp)
   15b50:	df000404 	addi	fp,sp,16
   15b54:	e13ffd15 	stw	r4,-12(fp)
   15b58:	e17ffe15 	stw	r5,-8(fp)
   15b5c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   15b60:	e0bffd17 	ldw	r2,-12(fp)
   15b64:	10800017 	ldw	r2,0(r2)
   15b68:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
   15b6c:	e0bffc17 	ldw	r2,-16(fp)
   15b70:	10c00a04 	addi	r3,r2,40
   15b74:	e0bffd17 	ldw	r2,-12(fp)
   15b78:	10800217 	ldw	r2,8(r2)
   15b7c:	100f883a 	mov	r7,r2
   15b80:	e1bfff17 	ldw	r6,-4(fp)
   15b84:	e17ffe17 	ldw	r5,-8(fp)
   15b88:	1809883a 	mov	r4,r3
   15b8c:	00162f00 	call	162f0 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
   15b90:	e037883a 	mov	sp,fp
   15b94:	dfc00117 	ldw	ra,4(sp)
   15b98:	df000017 	ldw	fp,0(sp)
   15b9c:	dec00204 	addi	sp,sp,8
   15ba0:	f800283a 	ret

00015ba4 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
   15ba4:	defffa04 	addi	sp,sp,-24
   15ba8:	dfc00515 	stw	ra,20(sp)
   15bac:	df000415 	stw	fp,16(sp)
   15bb0:	df000404 	addi	fp,sp,16
   15bb4:	e13ffd15 	stw	r4,-12(fp)
   15bb8:	e17ffe15 	stw	r5,-8(fp)
   15bbc:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   15bc0:	e0bffd17 	ldw	r2,-12(fp)
   15bc4:	10800017 	ldw	r2,0(r2)
   15bc8:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
   15bcc:	e0bffc17 	ldw	r2,-16(fp)
   15bd0:	10c00a04 	addi	r3,r2,40
   15bd4:	e0bffd17 	ldw	r2,-12(fp)
   15bd8:	10800217 	ldw	r2,8(r2)
   15bdc:	100f883a 	mov	r7,r2
   15be0:	e1bfff17 	ldw	r6,-4(fp)
   15be4:	e17ffe17 	ldw	r5,-8(fp)
   15be8:	1809883a 	mov	r4,r3
   15bec:	00165ac0 	call	165ac <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
   15bf0:	e037883a 	mov	sp,fp
   15bf4:	dfc00117 	ldw	ra,4(sp)
   15bf8:	df000017 	ldw	fp,0(sp)
   15bfc:	dec00204 	addi	sp,sp,8
   15c00:	f800283a 	ret

00015c04 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
   15c04:	defffc04 	addi	sp,sp,-16
   15c08:	dfc00315 	stw	ra,12(sp)
   15c0c:	df000215 	stw	fp,8(sp)
   15c10:	df000204 	addi	fp,sp,8
   15c14:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   15c18:	e0bfff17 	ldw	r2,-4(fp)
   15c1c:	10800017 	ldw	r2,0(r2)
   15c20:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
   15c24:	e0bffe17 	ldw	r2,-8(fp)
   15c28:	10c00a04 	addi	r3,r2,40
   15c2c:	e0bfff17 	ldw	r2,-4(fp)
   15c30:	10800217 	ldw	r2,8(r2)
   15c34:	100b883a 	mov	r5,r2
   15c38:	1809883a 	mov	r4,r3
   15c3c:	00161980 	call	16198 <altera_avalon_jtag_uart_close>
}
   15c40:	e037883a 	mov	sp,fp
   15c44:	dfc00117 	ldw	ra,4(sp)
   15c48:	df000017 	ldw	fp,0(sp)
   15c4c:	dec00204 	addi	sp,sp,8
   15c50:	f800283a 	ret

00015c54 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
   15c54:	defffa04 	addi	sp,sp,-24
   15c58:	dfc00515 	stw	ra,20(sp)
   15c5c:	df000415 	stw	fp,16(sp)
   15c60:	df000404 	addi	fp,sp,16
   15c64:	e13ffd15 	stw	r4,-12(fp)
   15c68:	e17ffe15 	stw	r5,-8(fp)
   15c6c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
   15c70:	e0bffd17 	ldw	r2,-12(fp)
   15c74:	10800017 	ldw	r2,0(r2)
   15c78:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
   15c7c:	e0bffc17 	ldw	r2,-16(fp)
   15c80:	10800a04 	addi	r2,r2,40
   15c84:	e1bfff17 	ldw	r6,-4(fp)
   15c88:	e17ffe17 	ldw	r5,-8(fp)
   15c8c:	1009883a 	mov	r4,r2
   15c90:	00162000 	call	16200 <altera_avalon_jtag_uart_ioctl>
}
   15c94:	e037883a 	mov	sp,fp
   15c98:	dfc00117 	ldw	ra,4(sp)
   15c9c:	df000017 	ldw	fp,0(sp)
   15ca0:	dec00204 	addi	sp,sp,8
   15ca4:	f800283a 	ret

00015ca8 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
   15ca8:	defff104 	addi	sp,sp,-60
   15cac:	dfc00e15 	stw	ra,56(sp)
   15cb0:	df000d15 	stw	fp,52(sp)
   15cb4:	df000d04 	addi	fp,sp,52
   15cb8:	e13ff915 	stw	r4,-28(fp)
   15cbc:	e17ffa15 	stw	r5,-24(fp)
   15cc0:	e1bffb15 	stw	r6,-20(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
   15cc4:	e0bff917 	ldw	r2,-28(fp)
   15cc8:	10800c04 	addi	r2,r2,48
   15ccc:	e0bff415 	stw	r2,-48(fp)
   15cd0:	e03ff80d 	sth	zero,-32(fp)

static ALT_INLINE int ALT_ALWAYS_INLINE alt_flag_create (OS_FLAG_GRP** pgroup, 
               OS_FLAGS flags)
{
  INT8U err;
  *pgroup = OSFlagCreate (flags, &err);
   15cd4:	e0bff80b 	ldhu	r2,-32(fp)
   15cd8:	e0fff884 	addi	r3,fp,-30
   15cdc:	180b883a 	mov	r5,r3
   15ce0:	1009883a 	mov	r4,r2
   15ce4:	00107280 	call	10728 <OSFlagCreate>
   15ce8:	1007883a 	mov	r3,r2
   15cec:	e0bff417 	ldw	r2,-48(fp)
   15cf0:	10c00015 	stw	r3,0(r2)
  ALT_SEM_CREATE(&sp->read_lock, 1);
   15cf4:	e0bff917 	ldw	r2,-28(fp)
   15cf8:	10800a04 	addi	r2,r2,40
   15cfc:	e0bff515 	stw	r2,-44(fp)
   15d00:	00800044 	movi	r2,1
   15d04:	e0bff78d 	sth	r2,-34(fp)
   15d08:	e0bff78b 	ldhu	r2,-34(fp)
   15d0c:	1009883a 	mov	r4,r2
   15d10:	00134480 	call	13448 <OSSemCreate>
   15d14:	1007883a 	mov	r3,r2
   15d18:	e0bff517 	ldw	r2,-44(fp)
   15d1c:	10c00015 	stw	r3,0(r2)
  ALT_SEM_CREATE(&sp->write_lock, 1);
   15d20:	e0bff917 	ldw	r2,-28(fp)
   15d24:	10800b04 	addi	r2,r2,44
   15d28:	e0bff615 	stw	r2,-40(fp)
   15d2c:	00800044 	movi	r2,1
   15d30:	e0bff70d 	sth	r2,-36(fp)
   15d34:	e0bff70b 	ldhu	r2,-36(fp)
   15d38:	1009883a 	mov	r4,r2
   15d3c:	00134480 	call	13448 <OSSemCreate>
   15d40:	1007883a 	mov	r3,r2
   15d44:	e0bff617 	ldw	r2,-40(fp)
   15d48:	10c00015 	stw	r3,0(r2)

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   15d4c:	e0bff917 	ldw	r2,-28(fp)
   15d50:	00c00044 	movi	r3,1
   15d54:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
   15d58:	e0bff917 	ldw	r2,-28(fp)
   15d5c:	10800017 	ldw	r2,0(r2)
   15d60:	10800104 	addi	r2,r2,4
   15d64:	1007883a 	mov	r3,r2
   15d68:	e0bff917 	ldw	r2,-28(fp)
   15d6c:	10800817 	ldw	r2,32(r2)
   15d70:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
   15d74:	e0bffa17 	ldw	r2,-24(fp)
   15d78:	e0fffb17 	ldw	r3,-20(fp)
   15d7c:	d8000015 	stw	zero,0(sp)
   15d80:	e1fff917 	ldw	r7,-28(fp)
   15d84:	01800074 	movhi	r6,1
   15d88:	31977c04 	addi	r6,r6,24048
   15d8c:	180b883a 	mov	r5,r3
   15d90:	1009883a 	mov	r4,r2
   15d94:	000d5740 	call	d574 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
   15d98:	e0bff917 	ldw	r2,-28(fp)
   15d9c:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
   15da0:	e0bff917 	ldw	r2,-28(fp)
   15da4:	10800204 	addi	r2,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   15da8:	d0e73417 	ldw	r3,-25392(gp)
   15dac:	e1fff917 	ldw	r7,-28(fp)
   15db0:	01800074 	movhi	r6,1
   15db4:	31982504 	addi	r6,r6,24724
   15db8:	180b883a 	mov	r5,r3
   15dbc:	1009883a 	mov	r4,r2
   15dc0:	00169640 	call	16964 <alt_alarm_start>
   15dc4:	1000040e 	bge	r2,zero,15dd8 <altera_avalon_jtag_uart_init+0x130>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
   15dc8:	e0fff917 	ldw	r3,-28(fp)
   15dcc:	00a00034 	movhi	r2,32768
   15dd0:	10bfffc4 	addi	r2,r2,-1
   15dd4:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
   15dd8:	0001883a 	nop
   15ddc:	e037883a 	mov	sp,fp
   15de0:	dfc00117 	ldw	ra,4(sp)
   15de4:	df000017 	ldw	fp,0(sp)
   15de8:	dec00204 	addi	sp,sp,8
   15dec:	f800283a 	ret

00015df0 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
   15df0:	defff204 	addi	sp,sp,-56
   15df4:	dfc00d15 	stw	ra,52(sp)
   15df8:	df000c15 	stw	fp,48(sp)
   15dfc:	df000c04 	addi	fp,sp,48
   15e00:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
   15e04:	e0bfff17 	ldw	r2,-4(fp)
   15e08:	e0bff615 	stw	r2,-40(fp)
  unsigned int base = sp->base;
   15e0c:	e0bff617 	ldw	r2,-40(fp)
   15e10:	10800017 	ldw	r2,0(r2)
   15e14:	e0bff715 	stw	r2,-36(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   15e18:	e0bff717 	ldw	r2,-36(fp)
   15e1c:	10800104 	addi	r2,r2,4
   15e20:	10800037 	ldwio	r2,0(r2)
   15e24:	e0bff815 	stw	r2,-32(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
   15e28:	e0bff817 	ldw	r2,-32(fp)
   15e2c:	1080c00c 	andi	r2,r2,768
   15e30:	10009126 	beq	r2,zero,16078 <altera_avalon_jtag_uart_irq+0x288>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
   15e34:	e0bff817 	ldw	r2,-32(fp)
   15e38:	1080400c 	andi	r2,r2,256
   15e3c:	10004726 	beq	r2,zero,15f5c <altera_avalon_jtag_uart_irq+0x16c>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
   15e40:	00800074 	movhi	r2,1
   15e44:	e0bff415 	stw	r2,-48(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   15e48:	e0bff617 	ldw	r2,-40(fp)
   15e4c:	10800d17 	ldw	r2,52(r2)
   15e50:	10800044 	addi	r2,r2,1
   15e54:	1081ffcc 	andi	r2,r2,2047
   15e58:	e0bff915 	stw	r2,-28(fp)
        if (next == sp->rx_out)
   15e5c:	e0bff617 	ldw	r2,-40(fp)
   15e60:	10c00e17 	ldw	r3,56(r2)
   15e64:	e0bff917 	ldw	r2,-28(fp)
   15e68:	18802726 	beq	r3,r2,15f08 <altera_avalon_jtag_uart_irq+0x118>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
   15e6c:	e0bff717 	ldw	r2,-36(fp)
   15e70:	10800037 	ldwio	r2,0(r2)
   15e74:	e0bff415 	stw	r2,-48(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
   15e78:	e0bff417 	ldw	r2,-48(fp)
   15e7c:	10a0000c 	andi	r2,r2,32768
   15e80:	10002326 	beq	r2,zero,15f10 <altera_avalon_jtag_uart_irq+0x120>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
   15e84:	e0bff617 	ldw	r2,-40(fp)
   15e88:	10800d17 	ldw	r2,52(r2)
   15e8c:	e0fff417 	ldw	r3,-48(fp)
   15e90:	1809883a 	mov	r4,r3
   15e94:	e0fff617 	ldw	r3,-40(fp)
   15e98:	1885883a 	add	r2,r3,r2
   15e9c:	10801104 	addi	r2,r2,68
   15ea0:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   15ea4:	e0bff617 	ldw	r2,-40(fp)
   15ea8:	10800d17 	ldw	r2,52(r2)
   15eac:	10800044 	addi	r2,r2,1
   15eb0:	10c1ffcc 	andi	r3,r2,2047
   15eb4:	e0bff617 	ldw	r2,-40(fp)
   15eb8:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
   15ebc:	e0bff617 	ldw	r2,-40(fp)
   15ec0:	10800c17 	ldw	r2,48(r2)
   15ec4:	e0bffb15 	stw	r2,-20(fp)
   15ec8:	00800044 	movi	r2,1
   15ecc:	e0bffc0d 	sth	r2,-16(fp)
   15ed0:	00800044 	movi	r2,1
   15ed4:	e0bffc85 	stb	r2,-14(fp)
                   OS_FLAGS     flags, 
                   INT8U        opt)
{
  INT8U err;

  if (OSRunning)
   15ed8:	d0a72043 	ldbu	r2,-25471(gp)
   15edc:	10803fcc 	andi	r2,r2,255
   15ee0:	103fd926 	beq	r2,zero,15e48 <__alt_data_end+0xfffe5e48>
  {
    OSFlagPost (group, flags, opt, &err);
   15ee4:	e0bffc0b 	ldhu	r2,-16(fp)
   15ee8:	e0fffc83 	ldbu	r3,-14(fp)
   15eec:	e13ffdc4 	addi	r4,fp,-9
   15ef0:	200f883a 	mov	r7,r4
   15ef4:	180d883a 	mov	r6,r3
   15ef8:	100b883a 	mov	r5,r2
   15efc:	e13ffb17 	ldw	r4,-20(fp)
   15f00:	00113040 	call	11304 <OSFlagPost>
      }
   15f04:	003fd006 	br	15e48 <__alt_data_end+0xfffe5e48>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
   15f08:	0001883a 	nop
   15f0c:	00000106 	br	15f14 <altera_avalon_jtag_uart_irq+0x124>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
   15f10:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
   15f14:	e0bff417 	ldw	r2,-48(fp)
   15f18:	10bfffec 	andhi	r2,r2,65535
   15f1c:	10000f26 	beq	r2,zero,15f5c <altera_avalon_jtag_uart_irq+0x16c>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   15f20:	e0bff617 	ldw	r2,-40(fp)
   15f24:	10c00817 	ldw	r3,32(r2)
   15f28:	00bfff84 	movi	r2,-2
   15f2c:	1886703a 	and	r3,r3,r2
   15f30:	e0bff617 	ldw	r2,-40(fp)
   15f34:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
   15f38:	e0bff717 	ldw	r2,-36(fp)
   15f3c:	10800104 	addi	r2,r2,4
   15f40:	1007883a 	mov	r3,r2
   15f44:	e0bff617 	ldw	r2,-40(fp)
   15f48:	10800817 	ldw	r2,32(r2)
   15f4c:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   15f50:	e0bff717 	ldw	r2,-36(fp)
   15f54:	10800104 	addi	r2,r2,4
   15f58:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
   15f5c:	e0bff817 	ldw	r2,-32(fp)
   15f60:	1080800c 	andi	r2,r2,512
   15f64:	103fac26 	beq	r2,zero,15e18 <__alt_data_end+0xfffe5e18>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
   15f68:	e0bff817 	ldw	r2,-32(fp)
   15f6c:	1004d43a 	srli	r2,r2,16
   15f70:	e0bff515 	stw	r2,-44(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
   15f74:	00002606 	br	16010 <altera_avalon_jtag_uart_irq+0x220>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
   15f78:	e0bff717 	ldw	r2,-36(fp)
   15f7c:	e0fff617 	ldw	r3,-40(fp)
   15f80:	18c01017 	ldw	r3,64(r3)
   15f84:	e13ff617 	ldw	r4,-40(fp)
   15f88:	20c7883a 	add	r3,r4,r3
   15f8c:	18c21104 	addi	r3,r3,2116
   15f90:	18c00003 	ldbu	r3,0(r3)
   15f94:	18c03fcc 	andi	r3,r3,255
   15f98:	18c0201c 	xori	r3,r3,128
   15f9c:	18ffe004 	addi	r3,r3,-128
   15fa0:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   15fa4:	e0bff617 	ldw	r2,-40(fp)
   15fa8:	10801017 	ldw	r2,64(r2)
   15fac:	10800044 	addi	r2,r2,1
   15fb0:	10c1ffcc 	andi	r3,r2,2047
   15fb4:	e0bff617 	ldw	r2,-40(fp)
   15fb8:	10c01015 	stw	r3,64(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);
   15fbc:	e0bff617 	ldw	r2,-40(fp)
   15fc0:	10800c17 	ldw	r2,48(r2)
   15fc4:	e0bffa15 	stw	r2,-24(fp)
   15fc8:	00800084 	movi	r2,2
   15fcc:	e0bffd0d 	sth	r2,-12(fp)
   15fd0:	00800044 	movi	r2,1
   15fd4:	e0bffd85 	stb	r2,-10(fp)
                   OS_FLAGS     flags, 
                   INT8U        opt)
{
  INT8U err;

  if (OSRunning)
   15fd8:	d0a72043 	ldbu	r2,-25471(gp)
   15fdc:	10803fcc 	andi	r2,r2,255
   15fe0:	10000826 	beq	r2,zero,16004 <altera_avalon_jtag_uart_irq+0x214>
  {
    OSFlagPost (group, flags, opt, &err);
   15fe4:	e0bffd0b 	ldhu	r2,-12(fp)
   15fe8:	e0fffd83 	ldbu	r3,-10(fp)
   15fec:	e13ffe04 	addi	r4,fp,-8
   15ff0:	200f883a 	mov	r7,r4
   15ff4:	180d883a 	mov	r6,r3
   15ff8:	100b883a 	mov	r5,r2
   15ffc:	e13ffa17 	ldw	r4,-24(fp)
   16000:	00113040 	call	11304 <OSFlagPost>

        space--;
   16004:	e0bff517 	ldw	r2,-44(fp)
   16008:	10bfffc4 	addi	r2,r2,-1
   1600c:	e0bff515 	stw	r2,-44(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
   16010:	e0bff517 	ldw	r2,-44(fp)
   16014:	10000526 	beq	r2,zero,1602c <altera_avalon_jtag_uart_irq+0x23c>
   16018:	e0bff617 	ldw	r2,-40(fp)
   1601c:	10c01017 	ldw	r3,64(r2)
   16020:	e0bff617 	ldw	r2,-40(fp)
   16024:	10800f17 	ldw	r2,60(r2)
   16028:	18bfd31e 	bne	r3,r2,15f78 <__alt_data_end+0xfffe5f78>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
   1602c:	e0bff517 	ldw	r2,-44(fp)
   16030:	103f7926 	beq	r2,zero,15e18 <__alt_data_end+0xfffe5e18>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   16034:	e0bff617 	ldw	r2,-40(fp)
   16038:	10c00817 	ldw	r3,32(r2)
   1603c:	00bfff44 	movi	r2,-3
   16040:	1886703a 	and	r3,r3,r2
   16044:	e0bff617 	ldw	r2,-40(fp)
   16048:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   1604c:	e0bff617 	ldw	r2,-40(fp)
   16050:	10800017 	ldw	r2,0(r2)
   16054:	10800104 	addi	r2,r2,4
   16058:	1007883a 	mov	r3,r2
   1605c:	e0bff617 	ldw	r2,-40(fp)
   16060:	10800817 	ldw	r2,32(r2)
   16064:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   16068:	e0bff717 	ldw	r2,-36(fp)
   1606c:	10800104 	addi	r2,r2,4
   16070:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
   16074:	003f6806 	br	15e18 <__alt_data_end+0xfffe5e18>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
   16078:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
   1607c:	0001883a 	nop
   16080:	e037883a 	mov	sp,fp
   16084:	dfc00117 	ldw	ra,4(sp)
   16088:	df000017 	ldw	fp,0(sp)
   1608c:	dec00204 	addi	sp,sp,8
   16090:	f800283a 	ret

00016094 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
   16094:	defff904 	addi	sp,sp,-28
   16098:	dfc00615 	stw	ra,24(sp)
   1609c:	df000515 	stw	fp,20(sp)
   160a0:	df000504 	addi	fp,sp,20
   160a4:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
   160a8:	e0bfff17 	ldw	r2,-4(fp)
   160ac:	e0bffb15 	stw	r2,-20(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
   160b0:	e0bffb17 	ldw	r2,-20(fp)
   160b4:	10800017 	ldw	r2,0(r2)
   160b8:	10800104 	addi	r2,r2,4
   160bc:	10800037 	ldwio	r2,0(r2)
   160c0:	e0bffc15 	stw	r2,-16(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
   160c4:	e0bffc17 	ldw	r2,-16(fp)
   160c8:	1081000c 	andi	r2,r2,1024
   160cc:	10000b26 	beq	r2,zero,160fc <altera_avalon_jtag_uart_timeout+0x68>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
   160d0:	e0bffb17 	ldw	r2,-20(fp)
   160d4:	10800017 	ldw	r2,0(r2)
   160d8:	10800104 	addi	r2,r2,4
   160dc:	1007883a 	mov	r3,r2
   160e0:	e0bffb17 	ldw	r2,-20(fp)
   160e4:	10800817 	ldw	r2,32(r2)
   160e8:	10810014 	ori	r2,r2,1024
   160ec:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
   160f0:	e0bffb17 	ldw	r2,-20(fp)
   160f4:	10000915 	stw	zero,36(r2)
   160f8:	00002106 	br	16180 <altera_avalon_jtag_uart_timeout+0xec>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
   160fc:	e0bffb17 	ldw	r2,-20(fp)
   16100:	10c00917 	ldw	r3,36(r2)
   16104:	00a00034 	movhi	r2,32768
   16108:	10bfff04 	addi	r2,r2,-4
   1610c:	10c01c36 	bltu	r2,r3,16180 <altera_avalon_jtag_uart_timeout+0xec>
    sp->host_inactive++;
   16110:	e0bffb17 	ldw	r2,-20(fp)
   16114:	10800917 	ldw	r2,36(r2)
   16118:	10c00044 	addi	r3,r2,1
   1611c:	e0bffb17 	ldw	r2,-20(fp)
   16120:	10c00915 	stw	r3,36(r2)
    
    if (sp->host_inactive >= sp->timeout) {
   16124:	e0bffb17 	ldw	r2,-20(fp)
   16128:	10c00917 	ldw	r3,36(r2)
   1612c:	e0bffb17 	ldw	r2,-20(fp)
   16130:	10800117 	ldw	r2,4(r2)
   16134:	18801236 	bltu	r3,r2,16180 <altera_avalon_jtag_uart_timeout+0xec>
      /* Post an event to indicate host is inactive (for jtag_uart_read */
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
   16138:	e0bffb17 	ldw	r2,-20(fp)
   1613c:	10800c17 	ldw	r2,48(r2)
   16140:	e0bffd15 	stw	r2,-12(fp)
   16144:	00800104 	movi	r2,4
   16148:	e0bffe0d 	sth	r2,-8(fp)
   1614c:	00800044 	movi	r2,1
   16150:	e0bffe85 	stb	r2,-6(fp)
                   OS_FLAGS     flags, 
                   INT8U        opt)
{
  INT8U err;

  if (OSRunning)
   16154:	d0a72043 	ldbu	r2,-25471(gp)
   16158:	10803fcc 	andi	r2,r2,255
   1615c:	10000826 	beq	r2,zero,16180 <altera_avalon_jtag_uart_timeout+0xec>
  {
    OSFlagPost (group, flags, opt, &err);
   16160:	e0bffe0b 	ldhu	r2,-8(fp)
   16164:	e0fffe83 	ldbu	r3,-6(fp)
   16168:	e13ffec4 	addi	r4,fp,-5
   1616c:	200f883a 	mov	r7,r4
   16170:	180d883a 	mov	r6,r3
   16174:	100b883a 	mov	r5,r2
   16178:	e13ffd17 	ldw	r4,-12(fp)
   1617c:	00113040 	call	11304 <OSFlagPost>
   16180:	d0a73417 	ldw	r2,-25392(gp)
    }
  }

  return alt_ticks_per_second();
}
   16184:	e037883a 	mov	sp,fp
   16188:	dfc00117 	ldw	ra,4(sp)
   1618c:	df000017 	ldw	fp,0(sp)
   16190:	dec00204 	addi	sp,sp,8
   16194:	f800283a 	ret

00016198 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
   16198:	defffd04 	addi	sp,sp,-12
   1619c:	df000215 	stw	fp,8(sp)
   161a0:	df000204 	addi	fp,sp,8
   161a4:	e13ffe15 	stw	r4,-8(fp)
   161a8:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   161ac:	00000506 	br	161c4 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
   161b0:	e0bfff17 	ldw	r2,-4(fp)
   161b4:	1090000c 	andi	r2,r2,16384
   161b8:	10000226 	beq	r2,zero,161c4 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
   161bc:	00bffd44 	movi	r2,-11
   161c0:	00000b06 	br	161f0 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   161c4:	e0bffe17 	ldw	r2,-8(fp)
   161c8:	10c01017 	ldw	r3,64(r2)
   161cc:	e0bffe17 	ldw	r2,-8(fp)
   161d0:	10800f17 	ldw	r2,60(r2)
   161d4:	18800526 	beq	r3,r2,161ec <altera_avalon_jtag_uart_close+0x54>
   161d8:	e0bffe17 	ldw	r2,-8(fp)
   161dc:	10c00917 	ldw	r3,36(r2)
   161e0:	e0bffe17 	ldw	r2,-8(fp)
   161e4:	10800117 	ldw	r2,4(r2)
   161e8:	18bff136 	bltu	r3,r2,161b0 <__alt_data_end+0xfffe61b0>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
   161ec:	0005883a 	mov	r2,zero
}
   161f0:	e037883a 	mov	sp,fp
   161f4:	df000017 	ldw	fp,0(sp)
   161f8:	dec00104 	addi	sp,sp,4
   161fc:	f800283a 	ret

00016200 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
   16200:	defffa04 	addi	sp,sp,-24
   16204:	df000515 	stw	fp,20(sp)
   16208:	df000504 	addi	fp,sp,20
   1620c:	e13ffd15 	stw	r4,-12(fp)
   16210:	e17ffe15 	stw	r5,-8(fp)
   16214:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
   16218:	00bff9c4 	movi	r2,-25
   1621c:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
   16220:	e0bffe17 	ldw	r2,-8(fp)
   16224:	10da8060 	cmpeqi	r3,r2,27137
   16228:	1800031e 	bne	r3,zero,16238 <altera_avalon_jtag_uart_ioctl+0x38>
   1622c:	109a80a0 	cmpeqi	r2,r2,27138
   16230:	1000181e 	bne	r2,zero,16294 <altera_avalon_jtag_uart_ioctl+0x94>
      rc = 0;
    }
    break;

  default:
    break;
   16234:	00002906 	br	162dc <altera_avalon_jtag_uart_ioctl+0xdc>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
   16238:	e0bffd17 	ldw	r2,-12(fp)
   1623c:	10c00117 	ldw	r3,4(r2)
   16240:	00a00034 	movhi	r2,32768
   16244:	10bfffc4 	addi	r2,r2,-1
   16248:	18802126 	beq	r3,r2,162d0 <altera_avalon_jtag_uart_ioctl+0xd0>
    {
      int timeout = *((int *)arg);
   1624c:	e0bfff17 	ldw	r2,-4(fp)
   16250:	10800017 	ldw	r2,0(r2)
   16254:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
   16258:	e0bffc17 	ldw	r2,-16(fp)
   1625c:	10800090 	cmplti	r2,r2,2
   16260:	1000061e 	bne	r2,zero,1627c <altera_avalon_jtag_uart_ioctl+0x7c>
   16264:	e0fffc17 	ldw	r3,-16(fp)
   16268:	00a00034 	movhi	r2,32768
   1626c:	10bfffc4 	addi	r2,r2,-1
   16270:	18800226 	beq	r3,r2,1627c <altera_avalon_jtag_uart_ioctl+0x7c>
   16274:	e0bffc17 	ldw	r2,-16(fp)
   16278:	00000206 	br	16284 <altera_avalon_jtag_uart_ioctl+0x84>
   1627c:	00a00034 	movhi	r2,32768
   16280:	10bfff84 	addi	r2,r2,-2
   16284:	e0fffd17 	ldw	r3,-12(fp)
   16288:	18800115 	stw	r2,4(r3)
      rc = 0;
   1628c:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   16290:	00000f06 	br	162d0 <altera_avalon_jtag_uart_ioctl+0xd0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
   16294:	e0bffd17 	ldw	r2,-12(fp)
   16298:	10c00117 	ldw	r3,4(r2)
   1629c:	00a00034 	movhi	r2,32768
   162a0:	10bfffc4 	addi	r2,r2,-1
   162a4:	18800c26 	beq	r3,r2,162d8 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
   162a8:	e0bffd17 	ldw	r2,-12(fp)
   162ac:	10c00917 	ldw	r3,36(r2)
   162b0:	e0bffd17 	ldw	r2,-12(fp)
   162b4:	10800117 	ldw	r2,4(r2)
   162b8:	1885803a 	cmpltu	r2,r3,r2
   162bc:	10c03fcc 	andi	r3,r2,255
   162c0:	e0bfff17 	ldw	r2,-4(fp)
   162c4:	10c00015 	stw	r3,0(r2)
      rc = 0;
   162c8:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   162cc:	00000206 	br	162d8 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
   162d0:	0001883a 	nop
   162d4:	00000106 	br	162dc <altera_avalon_jtag_uart_ioctl+0xdc>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
   162d8:	0001883a 	nop

  default:
    break;
  }

  return rc;
   162dc:	e0bffb17 	ldw	r2,-20(fp)
}
   162e0:	e037883a 	mov	sp,fp
   162e4:	df000017 	ldw	fp,0(sp)
   162e8:	dec00104 	addi	sp,sp,4
   162ec:	f800283a 	ret

000162f0 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
   162f0:	deffed04 	addi	sp,sp,-76
   162f4:	dfc01215 	stw	ra,72(sp)
   162f8:	df001115 	stw	fp,68(sp)
   162fc:	df001104 	addi	fp,sp,68
   16300:	e13ffc15 	stw	r4,-16(fp)
   16304:	e17ffd15 	stw	r5,-12(fp)
   16308:	e1bffe15 	stw	r6,-8(fp)
   1630c:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
   16310:	e0bffd17 	ldw	r2,-12(fp)
   16314:	e0bff015 	stw	r2,-64(fp)

  /*
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);
   16318:	e0bffc17 	ldw	r2,-16(fp)
   1631c:	10800a17 	ldw	r2,40(r2)
   16320:	e0bff815 	stw	r2,-32(fp)
   16324:	e03ff90d 	sth	zero,-28(fp)

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sem_pend (OS_EVENT* sem, 
                  INT16U timeout)
{
  INT8U err;
  OSSemPend (sem, timeout, &err);
   16328:	e0bff90b 	ldhu	r2,-28(fp)
   1632c:	e0fffb04 	addi	r3,fp,-20
   16330:	180d883a 	mov	r6,r3
   16334:	100b883a 	mov	r5,r2
   16338:	e13ff817 	ldw	r4,-32(fp)
   1633c:	00137600 	call	13760 <OSSemPend>

  while (space > 0)
   16340:	00006106 	br	164c8 <altera_avalon_jtag_uart_read+0x1d8>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
   16344:	e0bffc17 	ldw	r2,-16(fp)
   16348:	10800d17 	ldw	r2,52(r2)
   1634c:	e0bff315 	stw	r2,-52(fp)
      out = sp->rx_out;
   16350:	e0bffc17 	ldw	r2,-16(fp)
   16354:	10800e17 	ldw	r2,56(r2)
   16358:	e0bff415 	stw	r2,-48(fp)

      if (in >= out)
   1635c:	e0fff317 	ldw	r3,-52(fp)
   16360:	e0bff417 	ldw	r2,-48(fp)
   16364:	18800536 	bltu	r3,r2,1637c <altera_avalon_jtag_uart_read+0x8c>
        n = in - out;
   16368:	e0fff317 	ldw	r3,-52(fp)
   1636c:	e0bff417 	ldw	r2,-48(fp)
   16370:	1885c83a 	sub	r2,r3,r2
   16374:	e0bff115 	stw	r2,-60(fp)
   16378:	00000406 	br	1638c <altera_avalon_jtag_uart_read+0x9c>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
   1637c:	00c20004 	movi	r3,2048
   16380:	e0bff417 	ldw	r2,-48(fp)
   16384:	1885c83a 	sub	r2,r3,r2
   16388:	e0bff115 	stw	r2,-60(fp)

      if (n == 0)
   1638c:	e0bff117 	ldw	r2,-60(fp)
   16390:	10001e26 	beq	r2,zero,1640c <altera_avalon_jtag_uart_read+0x11c>
        break; /* No more data available */

      if (n > space)
   16394:	e0fffe17 	ldw	r3,-8(fp)
   16398:	e0bff117 	ldw	r2,-60(fp)
   1639c:	1880022e 	bgeu	r3,r2,163a8 <altera_avalon_jtag_uart_read+0xb8>
        n = space;
   163a0:	e0bffe17 	ldw	r2,-8(fp)
   163a4:	e0bff115 	stw	r2,-60(fp)

      memcpy(ptr, sp->rx_buf + out, n);
   163a8:	e0bffc17 	ldw	r2,-16(fp)
   163ac:	10c01104 	addi	r3,r2,68
   163b0:	e0bff417 	ldw	r2,-48(fp)
   163b4:	1885883a 	add	r2,r3,r2
   163b8:	e1bff117 	ldw	r6,-60(fp)
   163bc:	100b883a 	mov	r5,r2
   163c0:	e13ff017 	ldw	r4,-64(fp)
   163c4:	0005c480 	call	5c48 <memcpy>
      ptr   += n;
   163c8:	e0fff017 	ldw	r3,-64(fp)
   163cc:	e0bff117 	ldw	r2,-60(fp)
   163d0:	1885883a 	add	r2,r3,r2
   163d4:	e0bff015 	stw	r2,-64(fp)
      space -= n;
   163d8:	e0fffe17 	ldw	r3,-8(fp)
   163dc:	e0bff117 	ldw	r2,-60(fp)
   163e0:	1885c83a 	sub	r2,r3,r2
   163e4:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   163e8:	e0fff417 	ldw	r3,-48(fp)
   163ec:	e0bff117 	ldw	r2,-60(fp)
   163f0:	1885883a 	add	r2,r3,r2
   163f4:	10c1ffcc 	andi	r3,r2,2047
   163f8:	e0bffc17 	ldw	r2,-16(fp)
   163fc:	10c00e15 	stw	r3,56(r2)
    }
    while (space > 0);
   16400:	e0bffe17 	ldw	r2,-8(fp)
   16404:	00bfcf16 	blt	zero,r2,16344 <__alt_data_end+0xfffe6344>
   16408:	00000106 	br	16410 <altera_avalon_jtag_uart_read+0x120>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
   1640c:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
   16410:	e0fff017 	ldw	r3,-64(fp)
   16414:	e0bffd17 	ldw	r2,-12(fp)
   16418:	18802e1e 	bne	r3,r2,164d4 <altera_avalon_jtag_uart_read+0x1e4>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
   1641c:	e0bfff17 	ldw	r2,-4(fp)
   16420:	1090000c 	andi	r2,r2,16384
   16424:	10002d1e 	bne	r2,zero,164dc <altera_avalon_jtag_uart_read+0x1ec>
      break;

#ifdef __ucosii__
    /* OS Present: Pend on a flag if the OS is running, otherwise spin */
    if(OSRunning == OS_TRUE) {
   16428:	d0a72043 	ldbu	r2,-25471(gp)
   1642c:	10803fcc 	andi	r2,r2,255
   16430:	10800058 	cmpnei	r2,r2,1
   16434:	1000161e 	bne	r2,zero,16490 <altera_avalon_jtag_uart_read+0x1a0>
       * When running in a multi-threaded mode, we pend on the read event
       * flag set and timeout event flag set in the isr. This avoids wasting CPU
       * cycles waiting in this thread, when we could be doing something more
       * profitable elsewhere.
       */
      ALT_FLAG_PEND (sp->events,
   16438:	e0bffc17 	ldw	r2,-16(fp)
   1643c:	10800c17 	ldw	r2,48(r2)
   16440:	e0bff215 	stw	r2,-56(fp)
   16444:	00800144 	movi	r2,5
   16448:	e0bff98d 	sth	r2,-26(fp)
   1644c:	00bfe0c4 	movi	r2,-125
   16450:	e0bffa05 	stb	r2,-24(fp)
   16454:	e03ffa8d 	sth	zero,-22(fp)
                   OS_FLAGS flags, 
                   INT8U wait_type, 
                   INT16U timeout)
{
  INT8U err;
  if (OSRunning)
   16458:	d0a72043 	ldbu	r2,-25471(gp)
   1645c:	10803fcc 	andi	r2,r2,255
   16460:	10001526 	beq	r2,zero,164b8 <altera_avalon_jtag_uart_read+0x1c8>
  {
    OSFlagPend (group, flags, wait_type, timeout, &err);
   16464:	e0fff98b 	ldhu	r3,-26(fp)
   16468:	e13ffa03 	ldbu	r4,-24(fp)
   1646c:	e17ffa8b 	ldhu	r5,-22(fp)
   16470:	e0bffb44 	addi	r2,fp,-19
   16474:	d8800015 	stw	r2,0(sp)
   16478:	280f883a 	mov	r7,r5
   1647c:	200d883a 	mov	r6,r4
   16480:	180b883a 	mov	r5,r3
   16484:	e13ff217 	ldw	r4,-56(fp)
   16488:	0010cec0 	call	10cec <OSFlagPend>
   1648c:	00000a06 	br	164b8 <altera_avalon_jtag_uart_read+0x1c8>
                     OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                     0);
    }
    else {
      /* Spin until more data arrives or until host disconnects */
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
   16490:	0001883a 	nop
   16494:	e0bffc17 	ldw	r2,-16(fp)
   16498:	10c00d17 	ldw	r3,52(r2)
   1649c:	e0bff317 	ldw	r2,-52(fp)
   164a0:	1880051e 	bne	r3,r2,164b8 <altera_avalon_jtag_uart_read+0x1c8>
   164a4:	e0bffc17 	ldw	r2,-16(fp)
   164a8:	10c00917 	ldw	r3,36(r2)
   164ac:	e0bffc17 	ldw	r2,-16(fp)
   164b0:	10800117 	ldw	r2,4(r2)
   164b4:	18bff736 	bltu	r3,r2,16494 <__alt_data_end+0xfffe6494>
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
   164b8:	e0bffc17 	ldw	r2,-16(fp)
   164bc:	10c00d17 	ldw	r3,52(r2)
   164c0:	e0bff317 	ldw	r2,-52(fp)
   164c4:	18800726 	beq	r3,r2,164e4 <altera_avalon_jtag_uart_read+0x1f4>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   164c8:	e0bffe17 	ldw	r2,-8(fp)
   164cc:	00bf9d16 	blt	zero,r2,16344 <__alt_data_end+0xfffe6344>
   164d0:	00000506 	br	164e8 <altera_avalon_jtag_uart_read+0x1f8>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
   164d4:	0001883a 	nop
   164d8:	00000306 	br	164e8 <altera_avalon_jtag_uart_read+0x1f8>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
   164dc:	0001883a 	nop
   164e0:	00000106 	br	164e8 <altera_avalon_jtag_uart_read+0x1f8>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
   164e4:	0001883a 	nop
  /*
   * Now that access to the circular buffer is complete, release the read
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);
   164e8:	e0bffc17 	ldw	r2,-16(fp)
   164ec:	10800a17 	ldw	r2,40(r2)
   164f0:	1009883a 	mov	r4,r2
   164f4:	0013ad80 	call	13ad8 <OSSemPost>

  if (ptr != buffer)
   164f8:	e0fff017 	ldw	r3,-64(fp)
   164fc:	e0bffd17 	ldw	r2,-12(fp)
   16500:	18801826 	beq	r3,r2,16564 <altera_avalon_jtag_uart_read+0x274>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   16504:	0005303a 	rdctl	r2,status
   16508:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1650c:	e0fff717 	ldw	r3,-36(fp)
   16510:	00bfff84 	movi	r2,-2
   16514:	1884703a 	and	r2,r3,r2
   16518:	1001703a 	wrctl	status,r2
  
  return context;
   1651c:	e0bff717 	ldw	r2,-36(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
   16520:	e0bff615 	stw	r2,-40(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   16524:	e0bffc17 	ldw	r2,-16(fp)
   16528:	10800817 	ldw	r2,32(r2)
   1652c:	10c00054 	ori	r3,r2,1
   16530:	e0bffc17 	ldw	r2,-16(fp)
   16534:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   16538:	e0bffc17 	ldw	r2,-16(fp)
   1653c:	10800017 	ldw	r2,0(r2)
   16540:	10800104 	addi	r2,r2,4
   16544:	1007883a 	mov	r3,r2
   16548:	e0bffc17 	ldw	r2,-16(fp)
   1654c:	10800817 	ldw	r2,32(r2)
   16550:	18800035 	stwio	r2,0(r3)
   16554:	e0bff617 	ldw	r2,-40(fp)
   16558:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1655c:	e0bff517 	ldw	r2,-44(fp)
   16560:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
   16564:	e0fff017 	ldw	r3,-64(fp)
   16568:	e0bffd17 	ldw	r2,-12(fp)
   1656c:	18800426 	beq	r3,r2,16580 <altera_avalon_jtag_uart_read+0x290>
    return ptr - buffer;
   16570:	e0fff017 	ldw	r3,-64(fp)
   16574:	e0bffd17 	ldw	r2,-12(fp)
   16578:	1885c83a 	sub	r2,r3,r2
   1657c:	00000606 	br	16598 <altera_avalon_jtag_uart_read+0x2a8>
  else if (flags & O_NONBLOCK)
   16580:	e0bfff17 	ldw	r2,-4(fp)
   16584:	1090000c 	andi	r2,r2,16384
   16588:	10000226 	beq	r2,zero,16594 <altera_avalon_jtag_uart_read+0x2a4>
    return -EWOULDBLOCK;
   1658c:	00bffd44 	movi	r2,-11
   16590:	00000106 	br	16598 <altera_avalon_jtag_uart_read+0x2a8>
  else
    return -EIO;
   16594:	00bffec4 	movi	r2,-5
}
   16598:	e037883a 	mov	sp,fp
   1659c:	dfc00117 	ldw	ra,4(sp)
   165a0:	df000017 	ldw	fp,0(sp)
   165a4:	dec00204 	addi	sp,sp,8
   165a8:	f800283a 	ret

000165ac <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
   165ac:	deffed04 	addi	sp,sp,-76
   165b0:	dfc01215 	stw	ra,72(sp)
   165b4:	df001115 	stw	fp,68(sp)
   165b8:	df001104 	addi	fp,sp,68
   165bc:	e13ffc15 	stw	r4,-16(fp)
   165c0:	e17ffd15 	stw	r5,-12(fp)
   165c4:	e1bffe15 	stw	r6,-8(fp)
   165c8:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
   165cc:	e03ff015 	stw	zero,-64(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
   165d0:	e0bffd17 	ldw	r2,-12(fp)
   165d4:	e0bff215 	stw	r2,-56(fp)

  /*
   * When running in a multi threaded environment, obtain the "write_lock"
   * semaphore. This ensures that writing to the device is thread-safe.
   */
  ALT_SEM_PEND (sp->write_lock, 0);
   165d8:	e0bffc17 	ldw	r2,-16(fp)
   165dc:	10800b17 	ldw	r2,44(r2)
   165e0:	e0bff815 	stw	r2,-32(fp)
   165e4:	e03ff90d 	sth	zero,-28(fp)
   165e8:	e0bff90b 	ldhu	r2,-28(fp)
   165ec:	e0fffb44 	addi	r3,fp,-19
   165f0:	180d883a 	mov	r6,r3
   165f4:	100b883a 	mov	r5,r2
   165f8:	e13ff817 	ldw	r4,-32(fp)
   165fc:	00137600 	call	13760 <OSSemPend>

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   16600:	00003706 	br	166e0 <altera_avalon_jtag_uart_write+0x134>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
   16604:	e0bffc17 	ldw	r2,-16(fp)
   16608:	10800f17 	ldw	r2,60(r2)
   1660c:	e0bff415 	stw	r2,-48(fp)
      out = sp->tx_out;
   16610:	e0bffc17 	ldw	r2,-16(fp)
   16614:	10801017 	ldw	r2,64(r2)
   16618:	e0bff015 	stw	r2,-64(fp)

      if (in < out)
   1661c:	e0fff417 	ldw	r3,-48(fp)
   16620:	e0bff017 	ldw	r2,-64(fp)
   16624:	1880062e 	bgeu	r3,r2,16640 <altera_avalon_jtag_uart_write+0x94>
        n = out - 1 - in;
   16628:	e0fff017 	ldw	r3,-64(fp)
   1662c:	e0bff417 	ldw	r2,-48(fp)
   16630:	1885c83a 	sub	r2,r3,r2
   16634:	10bfffc4 	addi	r2,r2,-1
   16638:	e0bff115 	stw	r2,-60(fp)
   1663c:	00000b06 	br	1666c <altera_avalon_jtag_uart_write+0xc0>
      else if (out > 0)
   16640:	e0bff017 	ldw	r2,-64(fp)
   16644:	10000526 	beq	r2,zero,1665c <altera_avalon_jtag_uart_write+0xb0>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
   16648:	00c20004 	movi	r3,2048
   1664c:	e0bff417 	ldw	r2,-48(fp)
   16650:	1885c83a 	sub	r2,r3,r2
   16654:	e0bff115 	stw	r2,-60(fp)
   16658:	00000406 	br	1666c <altera_avalon_jtag_uart_write+0xc0>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
   1665c:	00c1ffc4 	movi	r3,2047
   16660:	e0bff417 	ldw	r2,-48(fp)
   16664:	1885c83a 	sub	r2,r3,r2
   16668:	e0bff115 	stw	r2,-60(fp)

      if (n == 0)
   1666c:	e0bff117 	ldw	r2,-60(fp)
   16670:	10001e26 	beq	r2,zero,166ec <altera_avalon_jtag_uart_write+0x140>
        break;

      if (n > count)
   16674:	e0fffe17 	ldw	r3,-8(fp)
   16678:	e0bff117 	ldw	r2,-60(fp)
   1667c:	1880022e 	bgeu	r3,r2,16688 <altera_avalon_jtag_uart_write+0xdc>
        n = count;
   16680:	e0bffe17 	ldw	r2,-8(fp)
   16684:	e0bff115 	stw	r2,-60(fp)

      memcpy(sp->tx_buf + in, ptr, n);
   16688:	e0bffc17 	ldw	r2,-16(fp)
   1668c:	10c21104 	addi	r3,r2,2116
   16690:	e0bff417 	ldw	r2,-48(fp)
   16694:	1885883a 	add	r2,r3,r2
   16698:	e1bff117 	ldw	r6,-60(fp)
   1669c:	e17ffd17 	ldw	r5,-12(fp)
   166a0:	1009883a 	mov	r4,r2
   166a4:	0005c480 	call	5c48 <memcpy>
      ptr   += n;
   166a8:	e0fffd17 	ldw	r3,-12(fp)
   166ac:	e0bff117 	ldw	r2,-60(fp)
   166b0:	1885883a 	add	r2,r3,r2
   166b4:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
   166b8:	e0fffe17 	ldw	r3,-8(fp)
   166bc:	e0bff117 	ldw	r2,-60(fp)
   166c0:	1885c83a 	sub	r2,r3,r2
   166c4:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   166c8:	e0fff417 	ldw	r3,-48(fp)
   166cc:	e0bff117 	ldw	r2,-60(fp)
   166d0:	1885883a 	add	r2,r3,r2
   166d4:	10c1ffcc 	andi	r3,r2,2047
   166d8:	e0bffc17 	ldw	r2,-16(fp)
   166dc:	10c00f15 	stw	r3,60(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   166e0:	e0bffe17 	ldw	r2,-8(fp)
   166e4:	00bfc716 	blt	zero,r2,16604 <__alt_data_end+0xfffe6604>
   166e8:	00000106 	br	166f0 <altera_avalon_jtag_uart_write+0x144>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
   166ec:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   166f0:	0005303a 	rdctl	r2,status
   166f4:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   166f8:	e0fff717 	ldw	r3,-36(fp)
   166fc:	00bfff84 	movi	r2,-2
   16700:	1884703a 	and	r2,r3,r2
   16704:	1001703a 	wrctl	status,r2
  
  return context;
   16708:	e0bff717 	ldw	r2,-36(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
   1670c:	e0bff615 	stw	r2,-40(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   16710:	e0bffc17 	ldw	r2,-16(fp)
   16714:	10800817 	ldw	r2,32(r2)
   16718:	10c00094 	ori	r3,r2,2
   1671c:	e0bffc17 	ldw	r2,-16(fp)
   16720:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   16724:	e0bffc17 	ldw	r2,-16(fp)
   16728:	10800017 	ldw	r2,0(r2)
   1672c:	10800104 	addi	r2,r2,4
   16730:	1007883a 	mov	r3,r2
   16734:	e0bffc17 	ldw	r2,-16(fp)
   16738:	10800817 	ldw	r2,32(r2)
   1673c:	18800035 	stwio	r2,0(r3)
   16740:	e0bff617 	ldw	r2,-40(fp)
   16744:	e0bff315 	stw	r2,-52(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   16748:	e0bff317 	ldw	r2,-52(fp)
   1674c:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
   16750:	e0bffe17 	ldw	r2,-8(fp)
   16754:	00802a0e 	bge	zero,r2,16800 <altera_avalon_jtag_uart_write+0x254>
    {
      if (flags & O_NONBLOCK)
   16758:	e0bfff17 	ldw	r2,-4(fp)
   1675c:	1090000c 	andi	r2,r2,16384
   16760:	10002a1e 	bne	r2,zero,1680c <altera_avalon_jtag_uart_write+0x260>
        break;

#ifdef __ucosii__
      /* OS Present: Pend on a flag if the OS is running, otherwise spin */
      if(OSRunning == OS_TRUE) {
   16764:	d0a72043 	ldbu	r2,-25471(gp)
   16768:	10803fcc 	andi	r2,r2,255
   1676c:	10800058 	cmpnei	r2,r2,1
   16770:	1000161e 	bne	r2,zero,167cc <altera_avalon_jtag_uart_write+0x220>
         * more profitable elsewhere.
         */
#ifdef ALTERA_AVALON_JTAG_UART_IGNORE_FIFO_FULL_ERROR
        if(!sp->host_inactive)
#endif
        ALT_FLAG_PEND (sp->events,
   16774:	e0bffc17 	ldw	r2,-16(fp)
   16778:	10800c17 	ldw	r2,48(r2)
   1677c:	e0bff515 	stw	r2,-44(fp)
   16780:	00800184 	movi	r2,6
   16784:	e0bff98d 	sth	r2,-26(fp)
   16788:	00bfe0c4 	movi	r2,-125
   1678c:	e0bffa05 	stb	r2,-24(fp)
   16790:	e03ffa8d 	sth	zero,-22(fp)
                   OS_FLAGS flags, 
                   INT8U wait_type, 
                   INT16U timeout)
{
  INT8U err;
  if (OSRunning)
   16794:	d0a72043 	ldbu	r2,-25471(gp)
   16798:	10803fcc 	andi	r2,r2,255
   1679c:	10001526 	beq	r2,zero,167f4 <altera_avalon_jtag_uart_write+0x248>
  {
    OSFlagPend (group, flags, wait_type, timeout, &err);
   167a0:	e0fff98b 	ldhu	r3,-26(fp)
   167a4:	e13ffa03 	ldbu	r4,-24(fp)
   167a8:	e17ffa8b 	ldhu	r5,-22(fp)
   167ac:	e0bffb04 	addi	r2,fp,-20
   167b0:	d8800015 	stw	r2,0(sp)
   167b4:	280f883a 	mov	r7,r5
   167b8:	200d883a 	mov	r6,r4
   167bc:	180b883a 	mov	r5,r3
   167c0:	e13ff517 	ldw	r4,-44(fp)
   167c4:	0010cec0 	call	10cec <OSFlagPend>
   167c8:	00000a06 	br	167f4 <altera_avalon_jtag_uart_write+0x248>
        /*
         * OS not running: Wait for data to be removed from buffer.
         * Once the interrupt routine has removed some data then we
         * will be able to insert some more.
         */
        while (out == sp->tx_out && sp->host_inactive < sp->timeout)
   167cc:	0001883a 	nop
   167d0:	e0bffc17 	ldw	r2,-16(fp)
   167d4:	10c01017 	ldw	r3,64(r2)
   167d8:	e0bff017 	ldw	r2,-64(fp)
   167dc:	1880051e 	bne	r3,r2,167f4 <altera_avalon_jtag_uart_write+0x248>
   167e0:	e0bffc17 	ldw	r2,-16(fp)
   167e4:	10c00917 	ldw	r3,36(r2)
   167e8:	e0bffc17 	ldw	r2,-16(fp)
   167ec:	10800117 	ldw	r2,4(r2)
   167f0:	18bff736 	bltu	r3,r2,167d0 <__alt_data_end+0xfffe67d0>
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
   167f4:	e0bffc17 	ldw	r2,-16(fp)
   167f8:	10800917 	ldw	r2,36(r2)
   167fc:	1000051e 	bne	r2,zero,16814 <altera_avalon_jtag_uart_write+0x268>
         break;
    }
  }
  while (count > 0);
   16800:	e0bffe17 	ldw	r2,-8(fp)
   16804:	00bfb616 	blt	zero,r2,166e0 <__alt_data_end+0xfffe66e0>
   16808:	00000306 	br	16818 <altera_avalon_jtag_uart_write+0x26c>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
   1680c:	0001883a 	nop
   16810:	00000106 	br	16818 <altera_avalon_jtag_uart_write+0x26c>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
   16814:	0001883a 	nop

  /*
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);
   16818:	e0bffc17 	ldw	r2,-16(fp)
   1681c:	10800b17 	ldw	r2,44(r2)
   16820:	1009883a 	mov	r4,r2
   16824:	0013ad80 	call	13ad8 <OSSemPost>

  if (ptr != start)
   16828:	e0fffd17 	ldw	r3,-12(fp)
   1682c:	e0bff217 	ldw	r2,-56(fp)
   16830:	18800426 	beq	r3,r2,16844 <altera_avalon_jtag_uart_write+0x298>
    return ptr - start;
   16834:	e0fffd17 	ldw	r3,-12(fp)
   16838:	e0bff217 	ldw	r2,-56(fp)
   1683c:	1885c83a 	sub	r2,r3,r2
   16840:	00000606 	br	1685c <altera_avalon_jtag_uart_write+0x2b0>
  else if (flags & O_NONBLOCK)
   16844:	e0bfff17 	ldw	r2,-4(fp)
   16848:	1090000c 	andi	r2,r2,16384
   1684c:	10000226 	beq	r2,zero,16858 <altera_avalon_jtag_uart_write+0x2ac>
    return -EWOULDBLOCK;
   16850:	00bffd44 	movi	r2,-11
   16854:	00000106 	br	1685c <altera_avalon_jtag_uart_write+0x2b0>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
   16858:	00bffec4 	movi	r2,-5
}
   1685c:	e037883a 	mov	sp,fp
   16860:	dfc00117 	ldw	ra,4(sp)
   16864:	df000017 	ldw	fp,0(sp)
   16868:	dec00204 	addi	sp,sp,8
   1686c:	f800283a 	ret

00016870 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
   16870:	defffa04 	addi	sp,sp,-24
   16874:	dfc00515 	stw	ra,20(sp)
   16878:	df000415 	stw	fp,16(sp)
   1687c:	df000404 	addi	fp,sp,16
   16880:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
   16884:	0007883a 	mov	r3,zero
   16888:	e0bfff17 	ldw	r2,-4(fp)
   1688c:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
   16890:	e0bfff17 	ldw	r2,-4(fp)
   16894:	10800104 	addi	r2,r2,4
   16898:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1689c:	0005303a 	rdctl	r2,status
   168a0:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   168a4:	e0fffd17 	ldw	r3,-12(fp)
   168a8:	00bfff84 	movi	r2,-2
   168ac:	1884703a 	and	r2,r3,r2
   168b0:	1001703a 	wrctl	status,r2
  
  return context;
   168b4:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
   168b8:	e0bffc15 	stw	r2,-16(fp)
  alt_tick ();
   168bc:	00170f00 	call	170f0 <alt_tick>
   168c0:	e0bffc17 	ldw	r2,-16(fp)
   168c4:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   168c8:	e0bffe17 	ldw	r2,-8(fp)
   168cc:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
   168d0:	0001883a 	nop
   168d4:	e037883a 	mov	sp,fp
   168d8:	dfc00117 	ldw	ra,4(sp)
   168dc:	df000017 	ldw	fp,0(sp)
   168e0:	dec00204 	addi	sp,sp,8
   168e4:	f800283a 	ret

000168e8 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
   168e8:	defff804 	addi	sp,sp,-32
   168ec:	dfc00715 	stw	ra,28(sp)
   168f0:	df000615 	stw	fp,24(sp)
   168f4:	df000604 	addi	fp,sp,24
   168f8:	e13ffc15 	stw	r4,-16(fp)
   168fc:	e17ffd15 	stw	r5,-12(fp)
   16900:	e1bffe15 	stw	r6,-8(fp)
   16904:	e1ffff15 	stw	r7,-4(fp)
   16908:	e0bfff17 	ldw	r2,-4(fp)
   1690c:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
   16910:	d0a73417 	ldw	r2,-25392(gp)
   16914:	1000021e 	bne	r2,zero,16920 <alt_avalon_timer_sc_init+0x38>
  {
    _alt_tick_rate = nticks;
   16918:	e0bffb17 	ldw	r2,-20(fp)
   1691c:	d0a73415 	stw	r2,-25392(gp)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
   16920:	e0bffc17 	ldw	r2,-16(fp)
   16924:	10800104 	addi	r2,r2,4
   16928:	00c001c4 	movi	r3,7
   1692c:	10c00035 	stwio	r3,0(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
   16930:	d8000015 	stw	zero,0(sp)
   16934:	e1fffc17 	ldw	r7,-16(fp)
   16938:	01800074 	movhi	r6,1
   1693c:	319a1c04 	addi	r6,r6,26736
   16940:	e17ffe17 	ldw	r5,-8(fp)
   16944:	e13ffd17 	ldw	r4,-12(fp)
   16948:	000d5740 	call	d574 <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
   1694c:	0001883a 	nop
   16950:	e037883a 	mov	sp,fp
   16954:	dfc00117 	ldw	ra,4(sp)
   16958:	df000017 	ldw	fp,0(sp)
   1695c:	dec00204 	addi	sp,sp,8
   16960:	f800283a 	ret

00016964 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
   16964:	defff504 	addi	sp,sp,-44
   16968:	df000a15 	stw	fp,40(sp)
   1696c:	df000a04 	addi	fp,sp,40
   16970:	e13ffc15 	stw	r4,-16(fp)
   16974:	e17ffd15 	stw	r5,-12(fp)
   16978:	e1bffe15 	stw	r6,-8(fp)
   1697c:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
   16980:	e03ff615 	stw	zero,-40(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   16984:	d0a73417 	ldw	r2,-25392(gp)
  
  if (alt_ticks_per_second ())
   16988:	10003c26 	beq	r2,zero,16a7c <alt_alarm_start+0x118>
  {
    if (alarm)
   1698c:	e0bffc17 	ldw	r2,-16(fp)
   16990:	10003826 	beq	r2,zero,16a74 <alt_alarm_start+0x110>
    {
      alarm->callback = callback;
   16994:	e0bffc17 	ldw	r2,-16(fp)
   16998:	e0fffe17 	ldw	r3,-8(fp)
   1699c:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
   169a0:	e0bffc17 	ldw	r2,-16(fp)
   169a4:	e0ffff17 	ldw	r3,-4(fp)
   169a8:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   169ac:	0005303a 	rdctl	r2,status
   169b0:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   169b4:	e0fff917 	ldw	r3,-28(fp)
   169b8:	00bfff84 	movi	r2,-2
   169bc:	1884703a 	and	r2,r3,r2
   169c0:	1001703a 	wrctl	status,r2
  
  return context;
   169c4:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
   169c8:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
   169cc:	d0a73517 	ldw	r2,-25388(gp)
      
      current_nticks = alt_nticks();
   169d0:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
   169d4:	e0fffd17 	ldw	r3,-12(fp)
   169d8:	e0bff617 	ldw	r2,-40(fp)
   169dc:	1885883a 	add	r2,r3,r2
   169e0:	10c00044 	addi	r3,r2,1
   169e4:	e0bffc17 	ldw	r2,-16(fp)
   169e8:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
   169ec:	e0bffc17 	ldw	r2,-16(fp)
   169f0:	10c00217 	ldw	r3,8(r2)
   169f4:	e0bff617 	ldw	r2,-40(fp)
   169f8:	1880042e 	bgeu	r3,r2,16a0c <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
   169fc:	e0bffc17 	ldw	r2,-16(fp)
   16a00:	00c00044 	movi	r3,1
   16a04:	10c00405 	stb	r3,16(r2)
   16a08:	00000206 	br	16a14 <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
   16a0c:	e0bffc17 	ldw	r2,-16(fp)
   16a10:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
   16a14:	e0bffc17 	ldw	r2,-16(fp)
   16a18:	d0e02d04 	addi	r3,gp,-32588
   16a1c:	e0fffa15 	stw	r3,-24(fp)
   16a20:	e0bffb15 	stw	r2,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   16a24:	e0bffb17 	ldw	r2,-20(fp)
   16a28:	e0fffa17 	ldw	r3,-24(fp)
   16a2c:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   16a30:	e0bffa17 	ldw	r2,-24(fp)
   16a34:	10c00017 	ldw	r3,0(r2)
   16a38:	e0bffb17 	ldw	r2,-20(fp)
   16a3c:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   16a40:	e0bffa17 	ldw	r2,-24(fp)
   16a44:	10800017 	ldw	r2,0(r2)
   16a48:	e0fffb17 	ldw	r3,-20(fp)
   16a4c:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   16a50:	e0bffa17 	ldw	r2,-24(fp)
   16a54:	e0fffb17 	ldw	r3,-20(fp)
   16a58:	10c00015 	stw	r3,0(r2)
   16a5c:	e0bff817 	ldw	r2,-32(fp)
   16a60:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   16a64:	e0bff717 	ldw	r2,-36(fp)
   16a68:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
   16a6c:	0005883a 	mov	r2,zero
   16a70:	00000306 	br	16a80 <alt_alarm_start+0x11c>
    }
    else
    {
      return -EINVAL;
   16a74:	00bffa84 	movi	r2,-22
   16a78:	00000106 	br	16a80 <alt_alarm_start+0x11c>
    }
  }
  else
  {
    return -ENOTSUP;
   16a7c:	00bfde84 	movi	r2,-134
  }
}
   16a80:	e037883a 	mov	sp,fp
   16a84:	df000017 	ldw	fp,0(sp)
   16a88:	dec00104 	addi	sp,sp,4
   16a8c:	f800283a 	ret

00016a90 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
   16a90:	deffff04 	addi	sp,sp,-4
   16a94:	df000015 	stw	fp,0(sp)
   16a98:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
   16a9c:	0001883a 	nop
   16aa0:	e037883a 	mov	sp,fp
   16aa4:	df000017 	ldw	fp,0(sp)
   16aa8:	dec00104 	addi	sp,sp,4
   16aac:	f800283a 	ret

00016ab0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   16ab0:	defffe04 	addi	sp,sp,-8
   16ab4:	dfc00115 	stw	ra,4(sp)
   16ab8:	df000015 	stw	fp,0(sp)
   16abc:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   16ac0:	d0a00b17 	ldw	r2,-32724(gp)
   16ac4:	10000326 	beq	r2,zero,16ad4 <alt_get_errno+0x24>
   16ac8:	d0a00b17 	ldw	r2,-32724(gp)
   16acc:	103ee83a 	callr	r2
   16ad0:	00000106 	br	16ad8 <alt_get_errno+0x28>
   16ad4:	d0a71604 	addi	r2,gp,-25512
}
   16ad8:	e037883a 	mov	sp,fp
   16adc:	dfc00117 	ldw	ra,4(sp)
   16ae0:	df000017 	ldw	fp,0(sp)
   16ae4:	dec00204 	addi	sp,sp,8
   16ae8:	f800283a 	ret

00016aec <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
   16aec:	defffa04 	addi	sp,sp,-24
   16af0:	dfc00515 	stw	ra,20(sp)
   16af4:	df000415 	stw	fp,16(sp)
   16af8:	df000404 	addi	fp,sp,16
   16afc:	e13ffe15 	stw	r4,-8(fp)
   16b00:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
   16b04:	e0bffe17 	ldw	r2,-8(fp)
   16b08:	10000326 	beq	r2,zero,16b18 <alt_dev_llist_insert+0x2c>
   16b0c:	e0bffe17 	ldw	r2,-8(fp)
   16b10:	10800217 	ldw	r2,8(r2)
   16b14:	1000061e 	bne	r2,zero,16b30 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
   16b18:	0016ab00 	call	16ab0 <alt_get_errno>
   16b1c:	1007883a 	mov	r3,r2
   16b20:	00800584 	movi	r2,22
   16b24:	18800015 	stw	r2,0(r3)
    return -EINVAL;
   16b28:	00bffa84 	movi	r2,-22
   16b2c:	00001306 	br	16b7c <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
   16b30:	e0bffe17 	ldw	r2,-8(fp)
   16b34:	e0ffff17 	ldw	r3,-4(fp)
   16b38:	e0fffc15 	stw	r3,-16(fp)
   16b3c:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   16b40:	e0bffd17 	ldw	r2,-12(fp)
   16b44:	e0fffc17 	ldw	r3,-16(fp)
   16b48:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   16b4c:	e0bffc17 	ldw	r2,-16(fp)
   16b50:	10c00017 	ldw	r3,0(r2)
   16b54:	e0bffd17 	ldw	r2,-12(fp)
   16b58:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   16b5c:	e0bffc17 	ldw	r2,-16(fp)
   16b60:	10800017 	ldw	r2,0(r2)
   16b64:	e0fffd17 	ldw	r3,-12(fp)
   16b68:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   16b6c:	e0bffc17 	ldw	r2,-16(fp)
   16b70:	e0fffd17 	ldw	r3,-12(fp)
   16b74:	10c00015 	stw	r3,0(r2)

  return 0;  
   16b78:	0005883a 	mov	r2,zero
}
   16b7c:	e037883a 	mov	sp,fp
   16b80:	dfc00117 	ldw	ra,4(sp)
   16b84:	df000017 	ldw	fp,0(sp)
   16b88:	dec00204 	addi	sp,sp,8
   16b8c:	f800283a 	ret

00016b90 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
   16b90:	defffd04 	addi	sp,sp,-12
   16b94:	dfc00215 	stw	ra,8(sp)
   16b98:	df000115 	stw	fp,4(sp)
   16b9c:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   16ba0:	00800074 	movhi	r2,1
   16ba4:	109ee404 	addi	r2,r2,31632
   16ba8:	e0bfff15 	stw	r2,-4(fp)
   16bac:	00000606 	br	16bc8 <_do_ctors+0x38>
        (*ctor) (); 
   16bb0:	e0bfff17 	ldw	r2,-4(fp)
   16bb4:	10800017 	ldw	r2,0(r2)
   16bb8:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   16bbc:	e0bfff17 	ldw	r2,-4(fp)
   16bc0:	10bfff04 	addi	r2,r2,-4
   16bc4:	e0bfff15 	stw	r2,-4(fp)
   16bc8:	e0ffff17 	ldw	r3,-4(fp)
   16bcc:	00800074 	movhi	r2,1
   16bd0:	109ee504 	addi	r2,r2,31636
   16bd4:	18bff62e 	bgeu	r3,r2,16bb0 <__alt_data_end+0xfffe6bb0>
        (*ctor) (); 
}
   16bd8:	0001883a 	nop
   16bdc:	e037883a 	mov	sp,fp
   16be0:	dfc00117 	ldw	ra,4(sp)
   16be4:	df000017 	ldw	fp,0(sp)
   16be8:	dec00204 	addi	sp,sp,8
   16bec:	f800283a 	ret

00016bf0 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
   16bf0:	defffd04 	addi	sp,sp,-12
   16bf4:	dfc00215 	stw	ra,8(sp)
   16bf8:	df000115 	stw	fp,4(sp)
   16bfc:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   16c00:	00800074 	movhi	r2,1
   16c04:	109ee404 	addi	r2,r2,31632
   16c08:	e0bfff15 	stw	r2,-4(fp)
   16c0c:	00000606 	br	16c28 <_do_dtors+0x38>
        (*dtor) (); 
   16c10:	e0bfff17 	ldw	r2,-4(fp)
   16c14:	10800017 	ldw	r2,0(r2)
   16c18:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   16c1c:	e0bfff17 	ldw	r2,-4(fp)
   16c20:	10bfff04 	addi	r2,r2,-4
   16c24:	e0bfff15 	stw	r2,-4(fp)
   16c28:	e0ffff17 	ldw	r3,-4(fp)
   16c2c:	00800074 	movhi	r2,1
   16c30:	109ee504 	addi	r2,r2,31636
   16c34:	18bff62e 	bgeu	r3,r2,16c10 <__alt_data_end+0xfffe6c10>
        (*dtor) (); 
}
   16c38:	0001883a 	nop
   16c3c:	e037883a 	mov	sp,fp
   16c40:	dfc00117 	ldw	ra,4(sp)
   16c44:	df000017 	ldw	fp,0(sp)
   16c48:	dec00204 	addi	sp,sp,8
   16c4c:	f800283a 	ret

00016c50 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
   16c50:	deffff04 	addi	sp,sp,-4
   16c54:	df000015 	stw	fp,0(sp)
   16c58:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
   16c5c:	0001883a 	nop
   16c60:	e037883a 	mov	sp,fp
   16c64:	df000017 	ldw	fp,0(sp)
   16c68:	dec00104 	addi	sp,sp,4
   16c6c:	f800283a 	ret

00016c70 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
   16c70:	defff804 	addi	sp,sp,-32
   16c74:	dfc00715 	stw	ra,28(sp)
   16c78:	df000615 	stw	fp,24(sp)
   16c7c:	dc000515 	stw	r16,20(sp)
   16c80:	df000604 	addi	fp,sp,24
   16c84:	e13ffb15 	stw	r4,-20(fp)
   16c88:	e17ffc15 	stw	r5,-16(fp)
   16c8c:	e1bffd15 	stw	r6,-12(fp)
   16c90:	e1fffe15 	stw	r7,-8(fp)
  int old;

  old = open (name, flags, mode);
   16c94:	e1bffe17 	ldw	r6,-8(fp)
   16c98:	e17ffd17 	ldw	r5,-12(fp)
   16c9c:	e13ffc17 	ldw	r4,-16(fp)
   16ca0:	0016ef80 	call	16ef8 <open>
   16ca4:	e0bffa15 	stw	r2,-24(fp)

  if (old >= 0)
   16ca8:	e0bffa17 	ldw	r2,-24(fp)
   16cac:	10002216 	blt	r2,zero,16d38 <alt_open_fd+0xc8>
  {
    fd->dev      = alt_fd_list[old].dev;
   16cb0:	040000b4 	movhi	r16,2
   16cb4:	84222a04 	addi	r16,r16,-30552
   16cb8:	e0bffa17 	ldw	r2,-24(fp)
   16cbc:	01400304 	movi	r5,12
   16cc0:	1009883a 	mov	r4,r2
   16cc4:	000aa740 	call	aa74 <__mulsi3>
   16cc8:	8085883a 	add	r2,r16,r2
   16ccc:	10c00017 	ldw	r3,0(r2)
   16cd0:	e0bffb17 	ldw	r2,-20(fp)
   16cd4:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
   16cd8:	040000b4 	movhi	r16,2
   16cdc:	84222a04 	addi	r16,r16,-30552
   16ce0:	e0bffa17 	ldw	r2,-24(fp)
   16ce4:	01400304 	movi	r5,12
   16ce8:	1009883a 	mov	r4,r2
   16cec:	000aa740 	call	aa74 <__mulsi3>
   16cf0:	8085883a 	add	r2,r16,r2
   16cf4:	10800104 	addi	r2,r2,4
   16cf8:	10c00017 	ldw	r3,0(r2)
   16cfc:	e0bffb17 	ldw	r2,-20(fp)
   16d00:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
   16d04:	040000b4 	movhi	r16,2
   16d08:	84222a04 	addi	r16,r16,-30552
   16d0c:	e0bffa17 	ldw	r2,-24(fp)
   16d10:	01400304 	movi	r5,12
   16d14:	1009883a 	mov	r4,r2
   16d18:	000aa740 	call	aa74 <__mulsi3>
   16d1c:	8085883a 	add	r2,r16,r2
   16d20:	10800204 	addi	r2,r2,8
   16d24:	10c00017 	ldw	r3,0(r2)
   16d28:	e0bffb17 	ldw	r2,-20(fp)
   16d2c:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
   16d30:	e13ffa17 	ldw	r4,-24(fp)
   16d34:	000dcfc0 	call	dcfc <alt_release_fd>
  }
} 
   16d38:	0001883a 	nop
   16d3c:	e6ffff04 	addi	sp,fp,-4
   16d40:	dfc00217 	ldw	ra,8(sp)
   16d44:	df000117 	ldw	fp,4(sp)
   16d48:	dc000017 	ldw	r16,0(sp)
   16d4c:	dec00304 	addi	sp,sp,12
   16d50:	f800283a 	ret

00016d54 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
   16d54:	defffb04 	addi	sp,sp,-20
   16d58:	dfc00415 	stw	ra,16(sp)
   16d5c:	df000315 	stw	fp,12(sp)
   16d60:	df000304 	addi	fp,sp,12
   16d64:	e13ffd15 	stw	r4,-12(fp)
   16d68:	e17ffe15 	stw	r5,-8(fp)
   16d6c:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
   16d70:	01c07fc4 	movi	r7,511
   16d74:	01800044 	movi	r6,1
   16d78:	e17ffd17 	ldw	r5,-12(fp)
   16d7c:	010000b4 	movhi	r4,2
   16d80:	21222d04 	addi	r4,r4,-30540
   16d84:	0016c700 	call	16c70 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
   16d88:	01c07fc4 	movi	r7,511
   16d8c:	000d883a 	mov	r6,zero
   16d90:	e17ffe17 	ldw	r5,-8(fp)
   16d94:	010000b4 	movhi	r4,2
   16d98:	21222a04 	addi	r4,r4,-30552
   16d9c:	0016c700 	call	16c70 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
   16da0:	01c07fc4 	movi	r7,511
   16da4:	01800044 	movi	r6,1
   16da8:	e17fff17 	ldw	r5,-4(fp)
   16dac:	010000b4 	movhi	r4,2
   16db0:	21223004 	addi	r4,r4,-30528
   16db4:	0016c700 	call	16c70 <alt_open_fd>
}  
   16db8:	0001883a 	nop
   16dbc:	e037883a 	mov	sp,fp
   16dc0:	dfc00117 	ldw	ra,4(sp)
   16dc4:	df000017 	ldw	fp,0(sp)
   16dc8:	dec00204 	addi	sp,sp,8
   16dcc:	f800283a 	ret

00016dd0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   16dd0:	defffe04 	addi	sp,sp,-8
   16dd4:	dfc00115 	stw	ra,4(sp)
   16dd8:	df000015 	stw	fp,0(sp)
   16ddc:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   16de0:	d0a00b17 	ldw	r2,-32724(gp)
   16de4:	10000326 	beq	r2,zero,16df4 <alt_get_errno+0x24>
   16de8:	d0a00b17 	ldw	r2,-32724(gp)
   16dec:	103ee83a 	callr	r2
   16df0:	00000106 	br	16df8 <alt_get_errno+0x28>
   16df4:	d0a71604 	addi	r2,gp,-25512
}
   16df8:	e037883a 	mov	sp,fp
   16dfc:	dfc00117 	ldw	ra,4(sp)
   16e00:	df000017 	ldw	fp,0(sp)
   16e04:	dec00204 	addi	sp,sp,8
   16e08:	f800283a 	ret

00016e0c <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
   16e0c:	defffb04 	addi	sp,sp,-20
   16e10:	dfc00415 	stw	ra,16(sp)
   16e14:	df000315 	stw	fp,12(sp)
   16e18:	dc000215 	stw	r16,8(sp)
   16e1c:	df000304 	addi	fp,sp,12
   16e20:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
   16e24:	e0bffe17 	ldw	r2,-8(fp)
   16e28:	10800217 	ldw	r2,8(r2)
   16e2c:	10d00034 	orhi	r3,r2,16384
   16e30:	e0bffe17 	ldw	r2,-8(fp)
   16e34:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   16e38:	e03ffd15 	stw	zero,-12(fp)
   16e3c:	00002306 	br	16ecc <alt_file_locked+0xc0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   16e40:	040000b4 	movhi	r16,2
   16e44:	84222a04 	addi	r16,r16,-30552
   16e48:	e0bffd17 	ldw	r2,-12(fp)
   16e4c:	01400304 	movi	r5,12
   16e50:	1009883a 	mov	r4,r2
   16e54:	000aa740 	call	aa74 <__mulsi3>
   16e58:	8085883a 	add	r2,r16,r2
   16e5c:	10c00017 	ldw	r3,0(r2)
   16e60:	e0bffe17 	ldw	r2,-8(fp)
   16e64:	10800017 	ldw	r2,0(r2)
   16e68:	1880151e 	bne	r3,r2,16ec0 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   16e6c:	040000b4 	movhi	r16,2
   16e70:	84222a04 	addi	r16,r16,-30552
   16e74:	e0bffd17 	ldw	r2,-12(fp)
   16e78:	01400304 	movi	r5,12
   16e7c:	1009883a 	mov	r4,r2
   16e80:	000aa740 	call	aa74 <__mulsi3>
   16e84:	8085883a 	add	r2,r16,r2
   16e88:	10800204 	addi	r2,r2,8
   16e8c:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   16e90:	10000b0e 	bge	r2,zero,16ec0 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
   16e94:	01400304 	movi	r5,12
   16e98:	e13ffd17 	ldw	r4,-12(fp)
   16e9c:	000aa740 	call	aa74 <__mulsi3>
   16ea0:	1007883a 	mov	r3,r2
   16ea4:	008000b4 	movhi	r2,2
   16ea8:	10a22a04 	addi	r2,r2,-30552
   16eac:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   16eb0:	e0bffe17 	ldw	r2,-8(fp)
   16eb4:	18800226 	beq	r3,r2,16ec0 <alt_file_locked+0xb4>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
   16eb8:	00bffcc4 	movi	r2,-13
   16ebc:	00000806 	br	16ee0 <alt_file_locked+0xd4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   16ec0:	e0bffd17 	ldw	r2,-12(fp)
   16ec4:	10800044 	addi	r2,r2,1
   16ec8:	e0bffd15 	stw	r2,-12(fp)
   16ecc:	d0a00a17 	ldw	r2,-32728(gp)
   16ed0:	1007883a 	mov	r3,r2
   16ed4:	e0bffd17 	ldw	r2,-12(fp)
   16ed8:	18bfd92e 	bgeu	r3,r2,16e40 <__alt_data_end+0xfffe6e40>
    }
  }
  
  /* The device is not locked */
 
  return 0;
   16edc:	0005883a 	mov	r2,zero
}
   16ee0:	e6ffff04 	addi	sp,fp,-4
   16ee4:	dfc00217 	ldw	ra,8(sp)
   16ee8:	df000117 	ldw	fp,4(sp)
   16eec:	dc000017 	ldw	r16,0(sp)
   16ef0:	dec00304 	addi	sp,sp,12
   16ef4:	f800283a 	ret

00016ef8 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
   16ef8:	defff604 	addi	sp,sp,-40
   16efc:	dfc00915 	stw	ra,36(sp)
   16f00:	df000815 	stw	fp,32(sp)
   16f04:	df000804 	addi	fp,sp,32
   16f08:	e13ffd15 	stw	r4,-12(fp)
   16f0c:	e17ffe15 	stw	r5,-8(fp)
   16f10:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
   16f14:	00bfffc4 	movi	r2,-1
   16f18:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
   16f1c:	00bffb44 	movi	r2,-19
   16f20:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
   16f24:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
   16f28:	d1600804 	addi	r5,gp,-32736
   16f2c:	e13ffd17 	ldw	r4,-12(fp)
   16f30:	00175740 	call	17574 <alt_find_dev>
   16f34:	e0bff815 	stw	r2,-32(fp)
   16f38:	e0bff817 	ldw	r2,-32(fp)
   16f3c:	1000051e 	bne	r2,zero,16f54 <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
   16f40:	e13ffd17 	ldw	r4,-12(fp)
   16f44:	00176040 	call	17604 <alt_find_file>
   16f48:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
   16f4c:	00800044 	movi	r2,1
   16f50:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
   16f54:	e0bff817 	ldw	r2,-32(fp)
   16f58:	10002b26 	beq	r2,zero,17008 <open+0x110>
  {
    if ((index = alt_get_fd (dev)) < 0)
   16f5c:	e13ff817 	ldw	r4,-32(fp)
   16f60:	001770c0 	call	1770c <alt_get_fd>
   16f64:	e0bff915 	stw	r2,-28(fp)
   16f68:	e0bff917 	ldw	r2,-28(fp)
   16f6c:	1000030e 	bge	r2,zero,16f7c <open+0x84>
    {
      status = index;
   16f70:	e0bff917 	ldw	r2,-28(fp)
   16f74:	e0bffa15 	stw	r2,-24(fp)
   16f78:	00002506 	br	17010 <open+0x118>
    }
    else
    {
      fd = &alt_fd_list[index];
   16f7c:	01400304 	movi	r5,12
   16f80:	e13ff917 	ldw	r4,-28(fp)
   16f84:	000aa740 	call	aa74 <__mulsi3>
   16f88:	1007883a 	mov	r3,r2
   16f8c:	008000b4 	movhi	r2,2
   16f90:	10a22a04 	addi	r2,r2,-30552
   16f94:	1885883a 	add	r2,r3,r2
   16f98:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
   16f9c:	e0fffe17 	ldw	r3,-8(fp)
   16fa0:	00900034 	movhi	r2,16384
   16fa4:	10bfffc4 	addi	r2,r2,-1
   16fa8:	1886703a 	and	r3,r3,r2
   16fac:	e0bffc17 	ldw	r2,-16(fp)
   16fb0:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
   16fb4:	e0bffb17 	ldw	r2,-20(fp)
   16fb8:	1000051e 	bne	r2,zero,16fd0 <open+0xd8>
   16fbc:	e13ffc17 	ldw	r4,-16(fp)
   16fc0:	0016e0c0 	call	16e0c <alt_file_locked>
   16fc4:	e0bffa15 	stw	r2,-24(fp)
   16fc8:	e0bffa17 	ldw	r2,-24(fp)
   16fcc:	10001016 	blt	r2,zero,17010 <open+0x118>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
   16fd0:	e0bff817 	ldw	r2,-32(fp)
   16fd4:	10800317 	ldw	r2,12(r2)
   16fd8:	10000826 	beq	r2,zero,16ffc <open+0x104>
   16fdc:	e0bff817 	ldw	r2,-32(fp)
   16fe0:	10800317 	ldw	r2,12(r2)
   16fe4:	e1ffff17 	ldw	r7,-4(fp)
   16fe8:	e1bffe17 	ldw	r6,-8(fp)
   16fec:	e17ffd17 	ldw	r5,-12(fp)
   16ff0:	e13ffc17 	ldw	r4,-16(fp)
   16ff4:	103ee83a 	callr	r2
   16ff8:	00000106 	br	17000 <open+0x108>
   16ffc:	0005883a 	mov	r2,zero
   17000:	e0bffa15 	stw	r2,-24(fp)
   17004:	00000206 	br	17010 <open+0x118>
      }
    }
  }
  else
  {
    status = -ENODEV;
   17008:	00bffb44 	movi	r2,-19
   1700c:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
   17010:	e0bffa17 	ldw	r2,-24(fp)
   17014:	1000090e 	bge	r2,zero,1703c <open+0x144>
  {
    alt_release_fd (index);  
   17018:	e13ff917 	ldw	r4,-28(fp)
   1701c:	000dcfc0 	call	dcfc <alt_release_fd>
    ALT_ERRNO = -status;
   17020:	0016dd00 	call	16dd0 <alt_get_errno>
   17024:	1007883a 	mov	r3,r2
   17028:	e0bffa17 	ldw	r2,-24(fp)
   1702c:	0085c83a 	sub	r2,zero,r2
   17030:	18800015 	stw	r2,0(r3)
    return -1;
   17034:	00bfffc4 	movi	r2,-1
   17038:	00000106 	br	17040 <open+0x148>
  }
  
  /* return the reference upon success */

  return index;
   1703c:	e0bff917 	ldw	r2,-28(fp)
}
   17040:	e037883a 	mov	sp,fp
   17044:	dfc00117 	ldw	ra,4(sp)
   17048:	df000017 	ldw	fp,0(sp)
   1704c:	dec00204 	addi	sp,sp,8
   17050:	f800283a 	ret

00017054 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
   17054:	defffa04 	addi	sp,sp,-24
   17058:	df000515 	stw	fp,20(sp)
   1705c:	df000504 	addi	fp,sp,20
   17060:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   17064:	0005303a 	rdctl	r2,status
   17068:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1706c:	e0fffc17 	ldw	r3,-16(fp)
   17070:	00bfff84 	movi	r2,-2
   17074:	1884703a 	and	r2,r3,r2
   17078:	1001703a 	wrctl	status,r2
  
  return context;
   1707c:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
   17080:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
   17084:	e0bfff17 	ldw	r2,-4(fp)
   17088:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
   1708c:	e0bffd17 	ldw	r2,-12(fp)
   17090:	10800017 	ldw	r2,0(r2)
   17094:	e0fffd17 	ldw	r3,-12(fp)
   17098:	18c00117 	ldw	r3,4(r3)
   1709c:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
   170a0:	e0bffd17 	ldw	r2,-12(fp)
   170a4:	10800117 	ldw	r2,4(r2)
   170a8:	e0fffd17 	ldw	r3,-12(fp)
   170ac:	18c00017 	ldw	r3,0(r3)
   170b0:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
   170b4:	e0bffd17 	ldw	r2,-12(fp)
   170b8:	e0fffd17 	ldw	r3,-12(fp)
   170bc:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
   170c0:	e0bffd17 	ldw	r2,-12(fp)
   170c4:	e0fffd17 	ldw	r3,-12(fp)
   170c8:	10c00015 	stw	r3,0(r2)
   170cc:	e0bffb17 	ldw	r2,-20(fp)
   170d0:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   170d4:	e0bffe17 	ldw	r2,-8(fp)
   170d8:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
   170dc:	0001883a 	nop
   170e0:	e037883a 	mov	sp,fp
   170e4:	df000017 	ldw	fp,0(sp)
   170e8:	dec00104 	addi	sp,sp,4
   170ec:	f800283a 	ret

000170f0 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
   170f0:	defffb04 	addi	sp,sp,-20
   170f4:	dfc00415 	stw	ra,16(sp)
   170f8:	df000315 	stw	fp,12(sp)
   170fc:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
   17100:	d0a02d17 	ldw	r2,-32588(gp)
   17104:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
   17108:	d0a73517 	ldw	r2,-25388(gp)
   1710c:	10800044 	addi	r2,r2,1
   17110:	d0a73515 	stw	r2,-25388(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   17114:	00002e06 	br	171d0 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
   17118:	e0bffd17 	ldw	r2,-12(fp)
   1711c:	10800017 	ldw	r2,0(r2)
   17120:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
   17124:	e0bffd17 	ldw	r2,-12(fp)
   17128:	10800403 	ldbu	r2,16(r2)
   1712c:	10803fcc 	andi	r2,r2,255
   17130:	10000426 	beq	r2,zero,17144 <alt_tick+0x54>
   17134:	d0a73517 	ldw	r2,-25388(gp)
   17138:	1000021e 	bne	r2,zero,17144 <alt_tick+0x54>
    {
      alarm->rollover = 0;
   1713c:	e0bffd17 	ldw	r2,-12(fp)
   17140:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
   17144:	e0bffd17 	ldw	r2,-12(fp)
   17148:	10800217 	ldw	r2,8(r2)
   1714c:	d0e73517 	ldw	r3,-25388(gp)
   17150:	18801d36 	bltu	r3,r2,171c8 <alt_tick+0xd8>
   17154:	e0bffd17 	ldw	r2,-12(fp)
   17158:	10800403 	ldbu	r2,16(r2)
   1715c:	10803fcc 	andi	r2,r2,255
   17160:	1000191e 	bne	r2,zero,171c8 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
   17164:	e0bffd17 	ldw	r2,-12(fp)
   17168:	10800317 	ldw	r2,12(r2)
   1716c:	e0fffd17 	ldw	r3,-12(fp)
   17170:	18c00517 	ldw	r3,20(r3)
   17174:	1809883a 	mov	r4,r3
   17178:	103ee83a 	callr	r2
   1717c:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
   17180:	e0bfff17 	ldw	r2,-4(fp)
   17184:	1000031e 	bne	r2,zero,17194 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
   17188:	e13ffd17 	ldw	r4,-12(fp)
   1718c:	00170540 	call	17054 <alt_alarm_stop>
   17190:	00000d06 	br	171c8 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
   17194:	e0bffd17 	ldw	r2,-12(fp)
   17198:	10c00217 	ldw	r3,8(r2)
   1719c:	e0bfff17 	ldw	r2,-4(fp)
   171a0:	1887883a 	add	r3,r3,r2
   171a4:	e0bffd17 	ldw	r2,-12(fp)
   171a8:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
   171ac:	e0bffd17 	ldw	r2,-12(fp)
   171b0:	10c00217 	ldw	r3,8(r2)
   171b4:	d0a73517 	ldw	r2,-25388(gp)
   171b8:	1880032e 	bgeu	r3,r2,171c8 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
   171bc:	e0bffd17 	ldw	r2,-12(fp)
   171c0:	00c00044 	movi	r3,1
   171c4:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
   171c8:	e0bffe17 	ldw	r2,-8(fp)
   171cc:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   171d0:	e0fffd17 	ldw	r3,-12(fp)
   171d4:	d0a02d04 	addi	r2,gp,-32588
   171d8:	18bfcf1e 	bne	r3,r2,17118 <__alt_data_end+0xfffe7118>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
   171dc:	000ef100 	call	ef10 <OSTimeTick>
}
   171e0:	0001883a 	nop
   171e4:	e037883a 	mov	sp,fp
   171e8:	dfc00117 	ldw	ra,4(sp)
   171ec:	df000017 	ldw	fp,0(sp)
   171f0:	dec00204 	addi	sp,sp,8
   171f4:	f800283a 	ret

000171f8 <altera_nios2_qsys_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
   171f8:	deffff04 	addi	sp,sp,-4
   171fc:	df000015 	stw	fp,0(sp)
   17200:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
   17204:	000170fa 	wrctl	ienable,zero
}
   17208:	0001883a 	nop
   1720c:	e037883a 	mov	sp,fp
   17210:	df000017 	ldw	fp,0(sp)
   17214:	dec00104 	addi	sp,sp,4
   17218:	f800283a 	ret

0001721c <OSCtxSw>:

      /* 
       * Save the remaining registers to the stack. 
       */

      addi sp, sp, -44
   1721c:	defff504 	addi	sp,sp,-44
      bltu  sp, et, .Lstack_overflow

#endif

#if OS_THREAD_SAFE_NEWLIB
      ldw r3, %gprel(_impure_ptr)(gp)   /* load the pointer */
   17220:	d0e00117 	ldw	r3,-32764(gp)
#endif /* OS_THREAD_SAFE_NEWLIB */

      ldw r4, %gprel(OSTCBCur)(gp)
   17224:	d1272f17 	ldw	r4,-25412(gp)

      stw ra,  0(sp)
   17228:	dfc00015 	stw	ra,0(sp)
      stw fp,  4(sp)
   1722c:	df000115 	stw	fp,4(sp)
      stw r23, 8(sp)
   17230:	ddc00215 	stw	r23,8(sp)
      stw r22, 12(sp)
   17234:	dd800315 	stw	r22,12(sp)
      stw r21, 16(sp)
   17238:	dd400415 	stw	r21,16(sp)
      stw r20, 20(sp)
   1723c:	dd000515 	stw	r20,20(sp)
      stw r19, 24(sp)
   17240:	dcc00615 	stw	r19,24(sp)
      stw r18, 28(sp)
   17244:	dc800715 	stw	r18,28(sp)
      stw r17, 32(sp)
   17248:	dc400815 	stw	r17,32(sp)
      stw r16, 36(sp)
   1724c:	dc000915 	stw	r16,36(sp)
       * store the current value of _impure_ptr so it can be restored
       * later; _impure_ptr is asigned on a per task basis. It is used
       * by Newlib to achieve reentrancy.	
       */

      stw r3, 40(sp)                  /* save the impure pointer */
   17250:	d8c00a15 	stw	r3,40(sp)
      /* 
       * Save the current tasks stack pointer into the current tasks OS_TCB.
       * i.e. OSTCBCur->OSTCBStkPtr = sp;
       */

      stw sp, (r4)                  /* save the stack pointer (OSTCBStkPtr */
   17254:	26c00015 	stw	sp,0(r4)

      /*
       * Call the user definable OSTaskSWHook()
       */

      call OSTaskSwHook
   17258:	00174900 	call	17490 <OSTaskSwHook>
      /*
       * OSTCBCur = OSTCBHighRdy; 
       * OSPrioCur = OSPrioHighRdy; 
       */

      ldw r4, %gprel(OSTCBHighRdy)(gp)
   1725c:	d1272a17 	ldw	r4,-25432(gp)
      ldb r5, %gprel(OSPrioHighRdy)(gp)
   17260:	d1672207 	ldb	r5,-25464(gp)

      stw r4, %gprel(OSTCBCur)(gp)     /* set the current task to be the new task */
   17264:	d1272f15 	stw	r4,-25412(gp)
      stb r5, %gprel(OSPrioCur)(gp)    /* store the new task's priority as the current */
   17268:	d1672245 	stb	r5,-25463(gp)

      /*
       * Set the stack pointer to point to the new task's stack
       */

      ldw sp, (r4) /* the stack pointer is the first entry in the OS_TCB structure */
   1726c:	26c00017 	ldw	sp,0(r4)
      /*
       * restore the value of _impure_ptr ; _impure_ptr is asigned on a 
       * per task basis. It is used by Newlib to achieve reentrancy.	
       */

      ldw r3, 40(sp)                  /* load the new impure pointer */
   17270:	d8c00a17 	ldw	r3,40(sp)

      /*
       * Restore the saved registers for the new task.
       */

      ldw ra,  0(sp)
   17274:	dfc00017 	ldw	ra,0(sp)
      ldw fp,  4(sp)
   17278:	df000117 	ldw	fp,4(sp)
      ldw r23, 8(sp)
   1727c:	ddc00217 	ldw	r23,8(sp)
      ldw r22, 12(sp)
   17280:	dd800317 	ldw	r22,12(sp)
      ldw r21, 16(sp)
   17284:	dd400417 	ldw	r21,16(sp)
      ldw r20, 20(sp)
   17288:	dd000517 	ldw	r20,20(sp)
      ldw r19, 24(sp)
   1728c:	dcc00617 	ldw	r19,24(sp)
      ldw r18, 28(sp)
   17290:	dc800717 	ldw	r18,28(sp)
      ldw r17, 32(sp)
   17294:	dc400817 	ldw	r17,32(sp)
      ldw r16, 36(sp)
   17298:	dc000917 	ldw	r16,36(sp)

#if OS_THREAD_SAFE_NEWLIB

      stw r3, %gprel(_impure_ptr)(gp) /* update _impure_ptr */
   1729c:	d0e00115 	stw	r3,-32764(gp)

      stw et, %gprel(alt_stack_limit_value)(gp)

#endif

      addi sp, sp, 44
   172a0:	dec00b04 	addi	sp,sp,44

      /*
       * resume execution of the new task.
       */

      ret
   172a4:	f800283a 	ret

000172a8 <OSStartHighRdy>:

      /*
       * disable interrupts so that the scheduler doesn't run while
       * we're initialising this task.
       */  
      rdctl r18, status
   172a8:	0025303a 	rdctl	r18,status
      subi  r17, zero, 2   /* r17 = 0xfffffffe */
   172ac:	047fff84 	movi	r17,-2
      and   r18, r18, r17
   172b0:	9464703a 	and	r18,r18,r17
      wrctl status, r18
   172b4:	9001703a 	wrctl	status,r18

      /*
       * Call the user definable OSTaskSWHook()
       */

      call OSTaskSwHook
   172b8:	00174900 	call	17490 <OSTaskSwHook>

      /* 
       * set OSRunning = TRUE.
       */

      movi r18, 1                    /* set r18 to the value 'TRUE' */
   172bc:	04800044 	movi	r18,1
      stb r18, %gprel(OSRunning)(gp) /* save this to OSRunning */
   172c0:	d4a72045 	stb	r18,-25471(gp)

      /*
       * start execution of the new task.
       */

      br 9b
   172c4:	003fe506 	br	1725c <__alt_data_end+0xfffe725c>

000172c8 <OSStartTsk>:

OSStartTsk:
      /* This instruction is never executed.  Its here to make the
       * backtrace work right 
       */
      movi sp, 0
   172c8:	06c00004 	movi	sp,0

      /* Enable interrupts */
      rdctl r2, status
   172cc:	0005303a 	rdctl	r2,status
      ori   r2, r2, 0x1
   172d0:	10800054 	ori	r2,r2,1
      wrctl status, r2
   172d4:	1001703a 	wrctl	status,r2

      ldw r2, 4(sp)
   172d8:	d8800117 	ldw	r2,4(sp)
      ldw r4, 0(sp)
   172dc:	d9000017 	ldw	r4,0(sp)

      addi sp, sp, 8
   172e0:	dec00204 	addi	sp,sp,8

      callr r2
   172e4:	103ee83a 	callr	r2

      nop
   172e8:	0001883a 	nop

000172ec <OSTaskStkInit>:
 *              been placed on the stack in the proper order.
 *
 ***********************************************************************************************/

OS_STK *OSTaskStkInit(void (*task)(void *pd), void *pdata, OS_STK *pstk, INT16U opt)
{
   172ec:	defff704 	addi	sp,sp,-36
   172f0:	dfc00815 	stw	ra,32(sp)
   172f4:	df000715 	stw	fp,28(sp)
   172f8:	df000704 	addi	fp,sp,28
   172fc:	e13ffc15 	stw	r4,-16(fp)
   17300:	e17ffd15 	stw	r5,-12(fp)
   17304:	e1bffe15 	stw	r6,-8(fp)
   17308:	3805883a 	mov	r2,r7
   1730c:	e0bfff0d 	sth	r2,-4(fp)
    * create and initialise the impure pointer used for Newlib thread local storage.
    * This is only done if the C library is being used in a thread safe mode. Otherwise
    * a single reent structure is used for all threads, which saves memory.
    */

   local_impure_ptr = (struct _reent*)((((INT32U)(pstk)) & ~0x3) - sizeof(struct _reent));
   17310:	e0fffe17 	ldw	r3,-8(fp)
   17314:	00bfff04 	movi	r2,-4
   17318:	1884703a 	and	r2,r3,r2
   1731c:	10bef704 	addi	r2,r2,-1060
   17320:	e0bff915 	stw	r2,-28(fp)

   _REENT_INIT_PTR (local_impure_ptr);
   17324:	01810904 	movi	r6,1060
   17328:	000b883a 	mov	r5,zero
   1732c:	e13ff917 	ldw	r4,-28(fp)
   17330:	0005d900 	call	5d90 <memset>
   17334:	e0bff917 	ldw	r2,-28(fp)
   17338:	10c0bb04 	addi	r3,r2,748
   1733c:	e0bff917 	ldw	r2,-28(fp)
   17340:	10c00115 	stw	r3,4(r2)
   17344:	e0bff917 	ldw	r2,-28(fp)
   17348:	10c0d504 	addi	r3,r2,852
   1734c:	e0bff917 	ldw	r2,-28(fp)
   17350:	10c00215 	stw	r3,8(r2)
   17354:	e0bff917 	ldw	r2,-28(fp)
   17358:	10c0ef04 	addi	r3,r2,956
   1735c:	e0bff917 	ldw	r2,-28(fp)
   17360:	10c00315 	stw	r3,12(r2)
   17364:	e0fff917 	ldw	r3,-28(fp)
   17368:	00800074 	movhi	r2,1
   1736c:	109ff604 	addi	r2,r2,32728
   17370:	18800d15 	stw	r2,52(r3)
   17374:	e0bff917 	ldw	r2,-28(fp)
   17378:	00c00044 	movi	r3,1
   1737c:	10c02915 	stw	r3,164(r2)
   17380:	10002a15 	stw	zero,168(r2)
   17384:	e0bff917 	ldw	r2,-28(fp)
   17388:	00ccc384 	movi	r3,13070
   1738c:	10c02b0d 	sth	r3,172(r2)
   17390:	e0bff917 	ldw	r2,-28(fp)
   17394:	00eaf344 	movi	r3,-21555
   17398:	10c02b8d 	sth	r3,174(r2)
   1739c:	e0bff917 	ldw	r2,-28(fp)
   173a0:	00c48d04 	movi	r3,4660
   173a4:	10c02c0d 	sth	r3,176(r2)
   173a8:	e0bff917 	ldw	r2,-28(fp)
   173ac:	00f99b44 	movi	r3,-6547
   173b0:	10c02c8d 	sth	r3,178(r2)
   173b4:	e0bff917 	ldw	r2,-28(fp)
   173b8:	00f7bb04 	movi	r3,-8468
   173bc:	10c02d0d 	sth	r3,180(r2)
   173c0:	e0bff917 	ldw	r2,-28(fp)
   173c4:	00c00144 	movi	r3,5
   173c8:	10c02d8d 	sth	r3,182(r2)
   173cc:	e0bff917 	ldw	r2,-28(fp)
   173d0:	00c002c4 	movi	r3,11
   173d4:	10c02e0d 	sth	r3,184(r2)
   /* 
    * create a stack frame at the top of the stack (leaving space for the 
    * reentrant data structure).
    */

   frame_pointer = (INT32U*) local_impure_ptr;
   173d8:	e0bff917 	ldw	r2,-28(fp)
   173dc:	e0bffa15 	stw	r2,-24(fp)
#else
   frame_pointer =   (INT32U*) (((INT32U)(pstk)) & ~0x3);
#endif /* OS_THREAD_SAFE_NEWLIB */
   stk = frame_pointer - 13;
   173e0:	e0bffa17 	ldw	r2,-24(fp)
   173e4:	10bff304 	addi	r2,r2,-52
   173e8:	e0bffb15 	stw	r2,-20(fp)

   /* Now fill the stack frame. */

   stk[12] = (INT32U)task;            /* task address (ra) */
   173ec:	e0bffb17 	ldw	r2,-20(fp)
   173f0:	10800c04 	addi	r2,r2,48
   173f4:	e0fffc17 	ldw	r3,-16(fp)
   173f8:	10c00015 	stw	r3,0(r2)
   stk[11] = (INT32U) pdata;          /* first register argument (r4) */
   173fc:	e0bffb17 	ldw	r2,-20(fp)
   17400:	10800b04 	addi	r2,r2,44
   17404:	e0fffd17 	ldw	r3,-12(fp)
   17408:	10c00015 	stw	r3,0(r2)

#if OS_THREAD_SAFE_NEWLIB
   stk[10] = (INT32U) local_impure_ptr; /* value of _impure_ptr for this thread */
   1740c:	e0bffb17 	ldw	r2,-20(fp)
   17410:	10800a04 	addi	r2,r2,40
   17414:	e0fff917 	ldw	r3,-28(fp)
   17418:	10c00015 	stw	r3,0(r2)
#endif /* OS_THREAD_SAFE_NEWLIB */
   stk[0]  = ((INT32U)&OSStartTsk) + 4;/* exception return address (ea) */  
   1741c:	00800074 	movhi	r2,1
   17420:	109cb204 	addi	r2,r2,29384
   17424:	10c00104 	addi	r3,r2,4
   17428:	e0bffb17 	ldw	r2,-20(fp)
   1742c:	10c00015 	stw	r3,0(r2)
    */
   __asm__ (".set OSTCBNext_OFFSET,%0" :: "i" (offsetof(OS_TCB, OSTCBNext)));
   __asm__ (".set OSTCBPrio_OFFSET,%0" :: "i" (offsetof(OS_TCB, OSTCBPrio)));
   __asm__ (".set OSTCBStkPtr_OFFSET,%0" :: "i" (offsetof(OS_TCB, OSTCBStkPtr)));
  
   return((OS_STK *)stk);
   17430:	e0bffb17 	ldw	r2,-20(fp)
}
   17434:	e037883a 	mov	sp,fp
   17438:	dfc00117 	ldw	ra,4(sp)
   1743c:	df000017 	ldw	fp,0(sp)
   17440:	dec00204 	addi	sp,sp,8
   17444:	f800283a 	ret

00017448 <OSTaskCreateHook>:
*
* Note(s)    : 1) Interrupts are disabled during this call.
*********************************************************************************************************
*/
void OSTaskCreateHook (OS_TCB *ptcb)
{
   17448:	defffe04 	addi	sp,sp,-8
   1744c:	df000115 	stw	fp,4(sp)
   17450:	df000104 	addi	fp,sp,4
   17454:	e13fff15 	stw	r4,-4(fp)
    ptcb = ptcb;                       /* Prevent compiler warning */
}
   17458:	0001883a 	nop
   1745c:	e037883a 	mov	sp,fp
   17460:	df000017 	ldw	fp,0(sp)
   17464:	dec00104 	addi	sp,sp,4
   17468:	f800283a 	ret

0001746c <OSTaskDelHook>:
*
* Note(s)    : 1) Interrupts are disabled during this call.
*********************************************************************************************************
*/
void OSTaskDelHook (OS_TCB *ptcb)
{
   1746c:	defffe04 	addi	sp,sp,-8
   17470:	df000115 	stw	fp,4(sp)
   17474:	df000104 	addi	fp,sp,4
   17478:	e13fff15 	stw	r4,-4(fp)
    ptcb = ptcb;                       /* Prevent compiler warning                                     */
}
   1747c:	0001883a 	nop
   17480:	e037883a 	mov	sp,fp
   17484:	df000017 	ldw	fp,0(sp)
   17488:	dec00104 	addi	sp,sp,4
   1748c:	f800283a 	ret

00017490 <OSTaskSwHook>:
*                 will be 'switched in' (i.e. the highest priority task) and, 'OSTCBCur' points to the
*                 task being switched out (i.e. the preempted task).
*********************************************************************************************************
*/
void OSTaskSwHook (void)
{
   17490:	deffff04 	addi	sp,sp,-4
   17494:	df000015 	stw	fp,0(sp)
   17498:	d839883a 	mov	fp,sp
}
   1749c:	0001883a 	nop
   174a0:	e037883a 	mov	sp,fp
   174a4:	df000017 	ldw	fp,0(sp)
   174a8:	dec00104 	addi	sp,sp,4
   174ac:	f800283a 	ret

000174b0 <OSTaskStatHook>:
*
* Arguments  : none
*********************************************************************************************************
*/
void OSTaskStatHook (void)
{
   174b0:	deffff04 	addi	sp,sp,-4
   174b4:	df000015 	stw	fp,0(sp)
   174b8:	d839883a 	mov	fp,sp
}
   174bc:	0001883a 	nop
   174c0:	e037883a 	mov	sp,fp
   174c4:	df000017 	ldw	fp,0(sp)
   174c8:	dec00104 	addi	sp,sp,4
   174cc:	f800283a 	ret

000174d0 <OSTimeTickHook>:
#ifdef ALT_INICHE
void cticks_hook(void);
#endif

void OSTimeTickHook (void)
{
   174d0:	deffff04 	addi	sp,sp,-4
   174d4:	df000015 	stw	fp,0(sp)
   174d8:	d839883a 	mov	fp,sp
    
#ifdef ALT_INICHE
    /* Service the Interniche timer */
    cticks_hook();
#endif
}
   174dc:	0001883a 	nop
   174e0:	e037883a 	mov	sp,fp
   174e4:	df000017 	ldw	fp,0(sp)
   174e8:	dec00104 	addi	sp,sp,4
   174ec:	f800283a 	ret

000174f0 <OSInitHookBegin>:

void OSInitHookBegin(void)
{
   174f0:	deffff04 	addi	sp,sp,-4
   174f4:	df000015 	stw	fp,0(sp)
   174f8:	d839883a 	mov	fp,sp
#if OS_TMR_EN > 0
    OSTmrCtr = 0;
#endif
}
   174fc:	0001883a 	nop
   17500:	e037883a 	mov	sp,fp
   17504:	df000017 	ldw	fp,0(sp)
   17508:	dec00104 	addi	sp,sp,4
   1750c:	f800283a 	ret

00017510 <OSInitHookEnd>:

void OSInitHookEnd(void)
{
   17510:	deffff04 	addi	sp,sp,-4
   17514:	df000015 	stw	fp,0(sp)
   17518:	d839883a 	mov	fp,sp
}
   1751c:	0001883a 	nop
   17520:	e037883a 	mov	sp,fp
   17524:	df000017 	ldw	fp,0(sp)
   17528:	dec00104 	addi	sp,sp,4
   1752c:	f800283a 	ret

00017530 <OSTaskIdleHook>:

void OSTaskIdleHook(void)
{
   17530:	deffff04 	addi	sp,sp,-4
   17534:	df000015 	stw	fp,0(sp)
   17538:	d839883a 	mov	fp,sp
}
   1753c:	0001883a 	nop
   17540:	e037883a 	mov	sp,fp
   17544:	df000017 	ldw	fp,0(sp)
   17548:	dec00104 	addi	sp,sp,4
   1754c:	f800283a 	ret

00017550 <OSTCBInitHook>:

void OSTCBInitHook(OS_TCB *ptcb)
{
   17550:	defffe04 	addi	sp,sp,-8
   17554:	df000115 	stw	fp,4(sp)
   17558:	df000104 	addi	fp,sp,4
   1755c:	e13fff15 	stw	r4,-4(fp)
}
   17560:	0001883a 	nop
   17564:	e037883a 	mov	sp,fp
   17568:	df000017 	ldw	fp,0(sp)
   1756c:	dec00104 	addi	sp,sp,4
   17570:	f800283a 	ret

00017574 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
   17574:	defffa04 	addi	sp,sp,-24
   17578:	dfc00515 	stw	ra,20(sp)
   1757c:	df000415 	stw	fp,16(sp)
   17580:	df000404 	addi	fp,sp,16
   17584:	e13ffe15 	stw	r4,-8(fp)
   17588:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
   1758c:	e0bfff17 	ldw	r2,-4(fp)
   17590:	10800017 	ldw	r2,0(r2)
   17594:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
   17598:	e13ffe17 	ldw	r4,-8(fp)
   1759c:	00072500 	call	7250 <strlen>
   175a0:	10800044 	addi	r2,r2,1
   175a4:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   175a8:	00000d06 	br	175e0 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
   175ac:	e0bffc17 	ldw	r2,-16(fp)
   175b0:	10800217 	ldw	r2,8(r2)
   175b4:	e0fffd17 	ldw	r3,-12(fp)
   175b8:	180d883a 	mov	r6,r3
   175bc:	e17ffe17 	ldw	r5,-8(fp)
   175c0:	1009883a 	mov	r4,r2
   175c4:	001784c0 	call	1784c <memcmp>
   175c8:	1000021e 	bne	r2,zero,175d4 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
   175cc:	e0bffc17 	ldw	r2,-16(fp)
   175d0:	00000706 	br	175f0 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
   175d4:	e0bffc17 	ldw	r2,-16(fp)
   175d8:	10800017 	ldw	r2,0(r2)
   175dc:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   175e0:	e0fffc17 	ldw	r3,-16(fp)
   175e4:	e0bfff17 	ldw	r2,-4(fp)
   175e8:	18bff01e 	bne	r3,r2,175ac <__alt_data_end+0xfffe75ac>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
   175ec:	0005883a 	mov	r2,zero
}
   175f0:	e037883a 	mov	sp,fp
   175f4:	dfc00117 	ldw	ra,4(sp)
   175f8:	df000017 	ldw	fp,0(sp)
   175fc:	dec00204 	addi	sp,sp,8
   17600:	f800283a 	ret

00017604 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
   17604:	defffb04 	addi	sp,sp,-20
   17608:	dfc00415 	stw	ra,16(sp)
   1760c:	df000315 	stw	fp,12(sp)
   17610:	df000304 	addi	fp,sp,12
   17614:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
   17618:	d0a00617 	ldw	r2,-32744(gp)
   1761c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   17620:	00003106 	br	176e8 <alt_find_file+0xe4>
  {
    len = strlen(next->name);
   17624:	e0bffd17 	ldw	r2,-12(fp)
   17628:	10800217 	ldw	r2,8(r2)
   1762c:	1009883a 	mov	r4,r2
   17630:	00072500 	call	7250 <strlen>
   17634:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
   17638:	e0bffd17 	ldw	r2,-12(fp)
   1763c:	10c00217 	ldw	r3,8(r2)
   17640:	e0bffe17 	ldw	r2,-8(fp)
   17644:	10bfffc4 	addi	r2,r2,-1
   17648:	1885883a 	add	r2,r3,r2
   1764c:	10800003 	ldbu	r2,0(r2)
   17650:	10803fcc 	andi	r2,r2,255
   17654:	1080201c 	xori	r2,r2,128
   17658:	10bfe004 	addi	r2,r2,-128
   1765c:	10800bd8 	cmpnei	r2,r2,47
   17660:	1000031e 	bne	r2,zero,17670 <alt_find_file+0x6c>
    {
      len -= 1;
   17664:	e0bffe17 	ldw	r2,-8(fp)
   17668:	10bfffc4 	addi	r2,r2,-1
   1766c:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   17670:	e0bffe17 	ldw	r2,-8(fp)
   17674:	e0ffff17 	ldw	r3,-4(fp)
   17678:	1885883a 	add	r2,r3,r2
   1767c:	10800003 	ldbu	r2,0(r2)
   17680:	10803fcc 	andi	r2,r2,255
   17684:	1080201c 	xori	r2,r2,128
   17688:	10bfe004 	addi	r2,r2,-128
   1768c:	10800be0 	cmpeqi	r2,r2,47
   17690:	1000081e 	bne	r2,zero,176b4 <alt_find_file+0xb0>
   17694:	e0bffe17 	ldw	r2,-8(fp)
   17698:	e0ffff17 	ldw	r3,-4(fp)
   1769c:	1885883a 	add	r2,r3,r2
   176a0:	10800003 	ldbu	r2,0(r2)
   176a4:	10803fcc 	andi	r2,r2,255
   176a8:	1080201c 	xori	r2,r2,128
   176ac:	10bfe004 	addi	r2,r2,-128
   176b0:	10000a1e 	bne	r2,zero,176dc <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
   176b4:	e0bffd17 	ldw	r2,-12(fp)
   176b8:	10800217 	ldw	r2,8(r2)
   176bc:	e0fffe17 	ldw	r3,-8(fp)
   176c0:	180d883a 	mov	r6,r3
   176c4:	e17fff17 	ldw	r5,-4(fp)
   176c8:	1009883a 	mov	r4,r2
   176cc:	001784c0 	call	1784c <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   176d0:	1000021e 	bne	r2,zero,176dc <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
   176d4:	e0bffd17 	ldw	r2,-12(fp)
   176d8:	00000706 	br	176f8 <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
   176dc:	e0bffd17 	ldw	r2,-12(fp)
   176e0:	10800017 	ldw	r2,0(r2)
   176e4:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   176e8:	e0fffd17 	ldw	r3,-12(fp)
   176ec:	d0a00604 	addi	r2,gp,-32744
   176f0:	18bfcc1e 	bne	r3,r2,17624 <__alt_data_end+0xfffe7624>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
   176f4:	0005883a 	mov	r2,zero
}
   176f8:	e037883a 	mov	sp,fp
   176fc:	dfc00117 	ldw	ra,4(sp)
   17700:	df000017 	ldw	fp,0(sp)
   17704:	dec00204 	addi	sp,sp,8
   17708:	f800283a 	ret

0001770c <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
   1770c:	defff804 	addi	sp,sp,-32
   17710:	dfc00715 	stw	ra,28(sp)
   17714:	df000615 	stw	fp,24(sp)
   17718:	dc000515 	stw	r16,20(sp)
   1771c:	df000604 	addi	fp,sp,24
   17720:	e13ffe15 	stw	r4,-8(fp)
  alt_32 i;
  int rc = -EMFILE;
   17724:	00bffa04 	movi	r2,-24
   17728:	e0bffb15 	stw	r2,-20(fp)
  /* 
   * Take the alt_fd_list_lock semaphore in order to avoid races when 
   * accessing the file descriptor pool.
   */
  
  ALT_SEM_PEND(alt_fd_list_lock, 0);
   1772c:	d0a71717 	ldw	r2,-25508(gp)
   17730:	e0bffc15 	stw	r2,-16(fp)
   17734:	e03ffd0d 	sth	zero,-12(fp)
   17738:	e0bffd0b 	ldhu	r2,-12(fp)
   1773c:	e0fffd84 	addi	r3,fp,-10
   17740:	180d883a 	mov	r6,r3
   17744:	100b883a 	mov	r5,r2
   17748:	e13ffc17 	ldw	r4,-16(fp)
   1774c:	00137600 	call	13760 <OSSemPend>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   17750:	e03ffa15 	stw	zero,-24(fp)
   17754:	00001d06 	br	177cc <alt_get_fd+0xc0>
  {
    if (!alt_fd_list[i].dev)
   17758:	040000b4 	movhi	r16,2
   1775c:	84222a04 	addi	r16,r16,-30552
   17760:	e0bffa17 	ldw	r2,-24(fp)
   17764:	01400304 	movi	r5,12
   17768:	1009883a 	mov	r4,r2
   1776c:	000aa740 	call	aa74 <__mulsi3>
   17770:	8085883a 	add	r2,r16,r2
   17774:	10800017 	ldw	r2,0(r2)
   17778:	1000111e 	bne	r2,zero,177c0 <alt_get_fd+0xb4>
    {
      alt_fd_list[i].dev = dev;
   1777c:	040000b4 	movhi	r16,2
   17780:	84222a04 	addi	r16,r16,-30552
   17784:	e0bffa17 	ldw	r2,-24(fp)
   17788:	01400304 	movi	r5,12
   1778c:	1009883a 	mov	r4,r2
   17790:	000aa740 	call	aa74 <__mulsi3>
   17794:	8085883a 	add	r2,r16,r2
   17798:	e0fffe17 	ldw	r3,-8(fp)
   1779c:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
   177a0:	d0e00a17 	ldw	r3,-32728(gp)
   177a4:	e0bffa17 	ldw	r2,-24(fp)
   177a8:	1880020e 	bge	r3,r2,177b4 <alt_get_fd+0xa8>
      {
        alt_max_fd = i;
   177ac:	e0bffa17 	ldw	r2,-24(fp)
   177b0:	d0a00a15 	stw	r2,-32728(gp)
      }
      rc = i;
   177b4:	e0bffa17 	ldw	r2,-24(fp)
   177b8:	e0bffb15 	stw	r2,-20(fp)
      goto alt_get_fd_exit;
   177bc:	00000606 	br	177d8 <alt_get_fd+0xcc>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   177c0:	e0bffa17 	ldw	r2,-24(fp)
   177c4:	10800044 	addi	r2,r2,1
   177c8:	e0bffa15 	stw	r2,-24(fp)
   177cc:	e0bffa17 	ldw	r2,-24(fp)
   177d0:	10800810 	cmplti	r2,r2,32
   177d4:	103fe01e 	bne	r2,zero,17758 <__alt_data_end+0xfffe7758>
  /*
   * Release the alt_fd_list_lock semaphore now that we are done with the
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);
   177d8:	d0a71717 	ldw	r2,-25508(gp)
   177dc:	1009883a 	mov	r4,r2
   177e0:	0013ad80 	call	13ad8 <OSSemPost>

  return rc;
   177e4:	e0bffb17 	ldw	r2,-20(fp)
}
   177e8:	e6ffff04 	addi	sp,fp,-4
   177ec:	dfc00217 	ldw	ra,8(sp)
   177f0:	df000117 	ldw	fp,4(sp)
   177f4:	dc000017 	ldw	r16,0(sp)
   177f8:	dec00304 	addi	sp,sp,12
   177fc:	f800283a 	ret

00017800 <atexit>:
   17800:	200b883a 	mov	r5,r4
   17804:	000f883a 	mov	r7,zero
   17808:	000d883a 	mov	r6,zero
   1780c:	0009883a 	mov	r4,zero
   17810:	00178c81 	jmpi	178c8 <__register_exitproc>

00017814 <exit>:
   17814:	defffe04 	addi	sp,sp,-8
   17818:	000b883a 	mov	r5,zero
   1781c:	dc000015 	stw	r16,0(sp)
   17820:	dfc00115 	stw	ra,4(sp)
   17824:	2021883a 	mov	r16,r4
   17828:	00179e00 	call	179e0 <__call_exitprocs>
   1782c:	008000b4 	movhi	r2,2
   17830:	10a6a504 	addi	r2,r2,-25964
   17834:	11000017 	ldw	r4,0(r2)
   17838:	20800f17 	ldw	r2,60(r4)
   1783c:	10000126 	beq	r2,zero,17844 <exit+0x30>
   17840:	103ee83a 	callr	r2
   17844:	8009883a 	mov	r4,r16
   17848:	0017b600 	call	17b60 <_exit>

0001784c <memcmp>:
   1784c:	01c000c4 	movi	r7,3
   17850:	3980192e 	bgeu	r7,r6,178b8 <memcmp+0x6c>
   17854:	2144b03a 	or	r2,r4,r5
   17858:	11c4703a 	and	r2,r2,r7
   1785c:	10000f26 	beq	r2,zero,1789c <memcmp+0x50>
   17860:	20800003 	ldbu	r2,0(r4)
   17864:	28c00003 	ldbu	r3,0(r5)
   17868:	10c0151e 	bne	r2,r3,178c0 <memcmp+0x74>
   1786c:	31bfff84 	addi	r6,r6,-2
   17870:	01ffffc4 	movi	r7,-1
   17874:	00000406 	br	17888 <memcmp+0x3c>
   17878:	20800003 	ldbu	r2,0(r4)
   1787c:	28c00003 	ldbu	r3,0(r5)
   17880:	31bfffc4 	addi	r6,r6,-1
   17884:	10c00e1e 	bne	r2,r3,178c0 <memcmp+0x74>
   17888:	21000044 	addi	r4,r4,1
   1788c:	29400044 	addi	r5,r5,1
   17890:	31fff91e 	bne	r6,r7,17878 <__alt_data_end+0xfffe7878>
   17894:	0005883a 	mov	r2,zero
   17898:	f800283a 	ret
   1789c:	20c00017 	ldw	r3,0(r4)
   178a0:	28800017 	ldw	r2,0(r5)
   178a4:	18bfee1e 	bne	r3,r2,17860 <__alt_data_end+0xfffe7860>
   178a8:	31bfff04 	addi	r6,r6,-4
   178ac:	21000104 	addi	r4,r4,4
   178b0:	29400104 	addi	r5,r5,4
   178b4:	39bff936 	bltu	r7,r6,1789c <__alt_data_end+0xfffe789c>
   178b8:	303fe91e 	bne	r6,zero,17860 <__alt_data_end+0xfffe7860>
   178bc:	003ff506 	br	17894 <__alt_data_end+0xfffe7894>
   178c0:	10c5c83a 	sub	r2,r2,r3
   178c4:	f800283a 	ret

000178c8 <__register_exitproc>:
   178c8:	defffa04 	addi	sp,sp,-24
   178cc:	dc000315 	stw	r16,12(sp)
   178d0:	040000b4 	movhi	r16,2
   178d4:	8426a504 	addi	r16,r16,-25964
   178d8:	80c00017 	ldw	r3,0(r16)
   178dc:	dc400415 	stw	r17,16(sp)
   178e0:	dfc00515 	stw	ra,20(sp)
   178e4:	18805217 	ldw	r2,328(r3)
   178e8:	2023883a 	mov	r17,r4
   178ec:	10003726 	beq	r2,zero,179cc <__register_exitproc+0x104>
   178f0:	10c00117 	ldw	r3,4(r2)
   178f4:	010007c4 	movi	r4,31
   178f8:	20c00e16 	blt	r4,r3,17934 <__register_exitproc+0x6c>
   178fc:	1a000044 	addi	r8,r3,1
   17900:	8800221e 	bne	r17,zero,1798c <__register_exitproc+0xc4>
   17904:	18c00084 	addi	r3,r3,2
   17908:	18c7883a 	add	r3,r3,r3
   1790c:	18c7883a 	add	r3,r3,r3
   17910:	12000115 	stw	r8,4(r2)
   17914:	10c7883a 	add	r3,r2,r3
   17918:	19400015 	stw	r5,0(r3)
   1791c:	0005883a 	mov	r2,zero
   17920:	dfc00517 	ldw	ra,20(sp)
   17924:	dc400417 	ldw	r17,16(sp)
   17928:	dc000317 	ldw	r16,12(sp)
   1792c:	dec00604 	addi	sp,sp,24
   17930:	f800283a 	ret
   17934:	00800034 	movhi	r2,0
   17938:	10800004 	addi	r2,r2,0
   1793c:	10002626 	beq	r2,zero,179d8 <__register_exitproc+0x110>
   17940:	01006404 	movi	r4,400
   17944:	d9400015 	stw	r5,0(sp)
   17948:	d9800115 	stw	r6,4(sp)
   1794c:	d9c00215 	stw	r7,8(sp)
   17950:	00000000 	call	0 <__alt_mem_memory>
   17954:	d9400017 	ldw	r5,0(sp)
   17958:	d9800117 	ldw	r6,4(sp)
   1795c:	d9c00217 	ldw	r7,8(sp)
   17960:	10001d26 	beq	r2,zero,179d8 <__register_exitproc+0x110>
   17964:	81000017 	ldw	r4,0(r16)
   17968:	10000115 	stw	zero,4(r2)
   1796c:	02000044 	movi	r8,1
   17970:	22405217 	ldw	r9,328(r4)
   17974:	0007883a 	mov	r3,zero
   17978:	12400015 	stw	r9,0(r2)
   1797c:	20805215 	stw	r2,328(r4)
   17980:	10006215 	stw	zero,392(r2)
   17984:	10006315 	stw	zero,396(r2)
   17988:	883fde26 	beq	r17,zero,17904 <__alt_data_end+0xfffe7904>
   1798c:	18c9883a 	add	r4,r3,r3
   17990:	2109883a 	add	r4,r4,r4
   17994:	1109883a 	add	r4,r2,r4
   17998:	21802215 	stw	r6,136(r4)
   1799c:	01800044 	movi	r6,1
   179a0:	12406217 	ldw	r9,392(r2)
   179a4:	30cc983a 	sll	r6,r6,r3
   179a8:	4992b03a 	or	r9,r9,r6
   179ac:	12406215 	stw	r9,392(r2)
   179b0:	21c04215 	stw	r7,264(r4)
   179b4:	01000084 	movi	r4,2
   179b8:	893fd21e 	bne	r17,r4,17904 <__alt_data_end+0xfffe7904>
   179bc:	11006317 	ldw	r4,396(r2)
   179c0:	218cb03a 	or	r6,r4,r6
   179c4:	11806315 	stw	r6,396(r2)
   179c8:	003fce06 	br	17904 <__alt_data_end+0xfffe7904>
   179cc:	18805304 	addi	r2,r3,332
   179d0:	18805215 	stw	r2,328(r3)
   179d4:	003fc606 	br	178f0 <__alt_data_end+0xfffe78f0>
   179d8:	00bfffc4 	movi	r2,-1
   179dc:	003fd006 	br	17920 <__alt_data_end+0xfffe7920>

000179e0 <__call_exitprocs>:
   179e0:	defff504 	addi	sp,sp,-44
   179e4:	df000915 	stw	fp,36(sp)
   179e8:	dd400615 	stw	r21,24(sp)
   179ec:	dc800315 	stw	r18,12(sp)
   179f0:	dfc00a15 	stw	ra,40(sp)
   179f4:	ddc00815 	stw	r23,32(sp)
   179f8:	dd800715 	stw	r22,28(sp)
   179fc:	dd000515 	stw	r20,20(sp)
   17a00:	dcc00415 	stw	r19,16(sp)
   17a04:	dc400215 	stw	r17,8(sp)
   17a08:	dc000115 	stw	r16,4(sp)
   17a0c:	d9000015 	stw	r4,0(sp)
   17a10:	2839883a 	mov	fp,r5
   17a14:	04800044 	movi	r18,1
   17a18:	057fffc4 	movi	r21,-1
   17a1c:	008000b4 	movhi	r2,2
   17a20:	10a6a504 	addi	r2,r2,-25964
   17a24:	12000017 	ldw	r8,0(r2)
   17a28:	45005217 	ldw	r20,328(r8)
   17a2c:	44c05204 	addi	r19,r8,328
   17a30:	a0001c26 	beq	r20,zero,17aa4 <__call_exitprocs+0xc4>
   17a34:	a0800117 	ldw	r2,4(r20)
   17a38:	15ffffc4 	addi	r23,r2,-1
   17a3c:	b8000d16 	blt	r23,zero,17a74 <__call_exitprocs+0x94>
   17a40:	14000044 	addi	r16,r2,1
   17a44:	8421883a 	add	r16,r16,r16
   17a48:	8421883a 	add	r16,r16,r16
   17a4c:	84402004 	addi	r17,r16,128
   17a50:	a463883a 	add	r17,r20,r17
   17a54:	a421883a 	add	r16,r20,r16
   17a58:	e0001e26 	beq	fp,zero,17ad4 <__call_exitprocs+0xf4>
   17a5c:	80804017 	ldw	r2,256(r16)
   17a60:	e0801c26 	beq	fp,r2,17ad4 <__call_exitprocs+0xf4>
   17a64:	bdffffc4 	addi	r23,r23,-1
   17a68:	843fff04 	addi	r16,r16,-4
   17a6c:	8c7fff04 	addi	r17,r17,-4
   17a70:	bd7ff91e 	bne	r23,r21,17a58 <__alt_data_end+0xfffe7a58>
   17a74:	00800034 	movhi	r2,0
   17a78:	10800004 	addi	r2,r2,0
   17a7c:	10000926 	beq	r2,zero,17aa4 <__call_exitprocs+0xc4>
   17a80:	a0800117 	ldw	r2,4(r20)
   17a84:	1000301e 	bne	r2,zero,17b48 <__call_exitprocs+0x168>
   17a88:	a0800017 	ldw	r2,0(r20)
   17a8c:	10003226 	beq	r2,zero,17b58 <__call_exitprocs+0x178>
   17a90:	a009883a 	mov	r4,r20
   17a94:	98800015 	stw	r2,0(r19)
   17a98:	00000000 	call	0 <__alt_mem_memory>
   17a9c:	9d000017 	ldw	r20,0(r19)
   17aa0:	a03fe41e 	bne	r20,zero,17a34 <__alt_data_end+0xfffe7a34>
   17aa4:	dfc00a17 	ldw	ra,40(sp)
   17aa8:	df000917 	ldw	fp,36(sp)
   17aac:	ddc00817 	ldw	r23,32(sp)
   17ab0:	dd800717 	ldw	r22,28(sp)
   17ab4:	dd400617 	ldw	r21,24(sp)
   17ab8:	dd000517 	ldw	r20,20(sp)
   17abc:	dcc00417 	ldw	r19,16(sp)
   17ac0:	dc800317 	ldw	r18,12(sp)
   17ac4:	dc400217 	ldw	r17,8(sp)
   17ac8:	dc000117 	ldw	r16,4(sp)
   17acc:	dec00b04 	addi	sp,sp,44
   17ad0:	f800283a 	ret
   17ad4:	a0800117 	ldw	r2,4(r20)
   17ad8:	80c00017 	ldw	r3,0(r16)
   17adc:	10bfffc4 	addi	r2,r2,-1
   17ae0:	15c01426 	beq	r2,r23,17b34 <__call_exitprocs+0x154>
   17ae4:	80000015 	stw	zero,0(r16)
   17ae8:	183fde26 	beq	r3,zero,17a64 <__alt_data_end+0xfffe7a64>
   17aec:	95c8983a 	sll	r4,r18,r23
   17af0:	a0806217 	ldw	r2,392(r20)
   17af4:	a5800117 	ldw	r22,4(r20)
   17af8:	2084703a 	and	r2,r4,r2
   17afc:	10000b26 	beq	r2,zero,17b2c <__call_exitprocs+0x14c>
   17b00:	a0806317 	ldw	r2,396(r20)
   17b04:	2088703a 	and	r4,r4,r2
   17b08:	20000c1e 	bne	r4,zero,17b3c <__call_exitprocs+0x15c>
   17b0c:	89400017 	ldw	r5,0(r17)
   17b10:	d9000017 	ldw	r4,0(sp)
   17b14:	183ee83a 	callr	r3
   17b18:	a0800117 	ldw	r2,4(r20)
   17b1c:	15bfbf1e 	bne	r2,r22,17a1c <__alt_data_end+0xfffe7a1c>
   17b20:	98800017 	ldw	r2,0(r19)
   17b24:	153fcf26 	beq	r2,r20,17a64 <__alt_data_end+0xfffe7a64>
   17b28:	003fbc06 	br	17a1c <__alt_data_end+0xfffe7a1c>
   17b2c:	183ee83a 	callr	r3
   17b30:	003ff906 	br	17b18 <__alt_data_end+0xfffe7b18>
   17b34:	a5c00115 	stw	r23,4(r20)
   17b38:	003feb06 	br	17ae8 <__alt_data_end+0xfffe7ae8>
   17b3c:	89000017 	ldw	r4,0(r17)
   17b40:	183ee83a 	callr	r3
   17b44:	003ff406 	br	17b18 <__alt_data_end+0xfffe7b18>
   17b48:	a0800017 	ldw	r2,0(r20)
   17b4c:	a027883a 	mov	r19,r20
   17b50:	1029883a 	mov	r20,r2
   17b54:	003fb606 	br	17a30 <__alt_data_end+0xfffe7a30>
   17b58:	0005883a 	mov	r2,zero
   17b5c:	003ffb06 	br	17b4c <__alt_data_end+0xfffe7b4c>

00017b60 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
   17b60:	defffd04 	addi	sp,sp,-12
   17b64:	df000215 	stw	fp,8(sp)
   17b68:	df000204 	addi	fp,sp,8
   17b6c:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
   17b70:	d0272045 	stb	zero,-25471(gp)
   17b74:	e0bfff17 	ldw	r2,-4(fp)
   17b78:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
   17b7c:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
   17b80:	10000226 	beq	r2,zero,17b8c <_exit+0x2c>
    ALT_SIM_FAIL();
   17b84:	002af070 	cmpltui	zero,zero,43969
   17b88:	00000106 	br	17b90 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
   17b8c:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
   17b90:	003fff06 	br	17b90 <__alt_data_end+0xfffe7b90>
