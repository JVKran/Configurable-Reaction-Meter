#include <stdio.h>
#include <string.h>
#include <stdint.h>

#include <unistd.h>
#include <fcntl.h>

#include <stdbool.h>
#include <io.h>

#include "includes.h"

#define   TASK_STACKSIZE       1024
OS_STK    task1_stk[TASK_STACKSIZE];
OS_STK    task2_stk[TASK_STACKSIZE];

#define TASK1_PRIORITY      1		// Period of 1ms (highest priority)
#define TASK2_PRIORITY      2		// Period of 1 second

// Task 1
void large_counter(void* pdata){
	uint16_t counter = 0;
	INT8U ret = OS_NO_ERR;

	while (1){
		int data = counter & 0xF;
		data |= ((counter >> 4) & 0xF) << 4;
		data |= ((counter >> 8) & 0xF) << 8;
		data |= ((counter >> 12) & 0xF) << 12;
		IOWR(SSD_CONTROLLER_BASE, 1, data);

		counter++;
		OSTimeDlyHMSM(0, 0, 0, 1);
	}
}

// Task 2
void small_counter(void* pdata){
	uint8_t counter = 0;
	INT8U ret = OS_NO_ERR;

	while (1){
		int data = counter & 0xFF;
		data |= (counter >> 8) & 0xFF;
		IOWR(SSD_CONTROLLER_BASE, 0, data);

		counter++;
		OSTimeDlyHMSM(0, 0, 1, 0);
	}
}

int main(void){

	running_sem = OSSemCreate(0);

  OSTaskCreateExt(large_counter,
                  NULL,
                  (OS_STK*)&task1_stk[TASK_STACKSIZE-1],
                  TASK1_PRIORITY,
                  TASK1_PRIORITY,
                  task1_stk,
                  TASK_STACKSIZE,
                  NULL,
                  0);
              
               
  OSTaskCreateExt(small_counter,
                  NULL,
				  (OS_STK*)&task2_stk[TASK_STACKSIZE-1],
                  TASK2_PRIORITY,
                  TASK2_PRIORITY,
                  task2_stk,
                  TASK_STACKSIZE,
                  NULL,
                  0);

  OSStart();
  return 0;
}
