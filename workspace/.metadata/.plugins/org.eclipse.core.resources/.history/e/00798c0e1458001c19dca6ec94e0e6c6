#include <stdio.h>
#include <string.h>
#include <stdint.h>

#include <unistd.h>
#include <fcntl.h>

#include <stdbool.h>
#include <io.h>

#include "includes.h"
#include "src/timer.hpp"

timer_c timer(TIMER_BASE, TIMER_IRQ_INTERRUPT_CONTROLLER_ID, TIMER_IRQ);

#define   TASK_STACKSIZE       1024
OS_STK    task1_stk[TASK_STACKSIZE];
OS_STK    task2_stk[TASK_STACKSIZE];
OS_STK    task3_stk[TASK_STACKSIZE];

#define TASK1_PRIORITY      1		// Period of 1ms (highest priority)
#define TASK2_PRIORITY      2		// Period of 1 second
#define TASK3_PRIORITY      3		// Worst case period of +infinity (lowest priority)

OS_EVENT *running_sem;

void show_number(unsigned int number){
	int data = number % 10;
	data |= (number / 10 % 10) << 4;
	data |= (number / 100 % 10) << 8;
	data |= (number / 1000 % 10) << 12;
	IOWR_32DIRECT(REG32_AVALON_INTERFACE_0_BASE, 4, data);

	data = (number / 10000 % 10);
	data |= (number / 100000 % 10) << 4;
	IOWR_32DIRECT(REG32_AVALON_INTERFACE_0_BASE, 0, data);
}

volatile unsigned int count;

void timer_isr(){
	show_number(count++);
}

void reaction_meter(void* pdata){
	uint16_t counter = 0;
	INT8U ret = OS_NO_ERR;

	timer.configure(1000, &timer_isr);
	while (1){
		printf("Hey");
		count = 0;
//		timer.start();
		OSTimeDlyHMSM(0, 0, 0, 500);
//		timer.stop();
	}
}

char* receive(){
	static char payload[10];
	int i = 0;
	char data;

	do {
		data = getchar();
		payload[i++] = data;
	} while(data != '\n');

	return payload;
}

void console(void* pdata){
	char* command;
	INT8U ret = OS_NO_ERR;

	while(1){
		command = receive();
		if(strstr(command, "start") != NULL){
			printf("Starting counters.");
			OSSemPost(running_sem);
		} else if (strstr(command, "stop") != NULL){
			printf("Stopping counters.");
			OSSemPend(running_sem, 0, &ret);
		} else {
			printf("Unkown command \'%s\'.", command);
		}
	}
}

int main(void){

	running_sem = OSSemCreate(0);

	OSTaskCreateExt(reaction_meter,
                  NULL,
                  (OS_STK*)&task1_stk[TASK_STACKSIZE-1],
                  TASK1_PRIORITY,
                  TASK1_PRIORITY,
                  task1_stk,
                  TASK_STACKSIZE,
                  NULL,
                  0);

	OSTaskCreateExt(console,
                  NULL,
				  (OS_STK*)&task3_stk[TASK_STACKSIZE-1],
                  TASK3_PRIORITY,
                  TASK3_PRIORITY,
                  task3_stk,
                  TASK_STACKSIZE,
                  NULL,
                  0);

	OSStart();
	return 0;
}
