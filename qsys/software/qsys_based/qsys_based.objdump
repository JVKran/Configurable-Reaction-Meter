
qsys_based.elf:     file format elf32-littlenios2
qsys_based.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x000001c0

Program Header:
    LOAD off    0x00001000 vaddr 0x00000000 paddr 0x00000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00000020 paddr 0x00000020 align 2**12
         filesz 0x0001825c memsz 0x0001825c flags r-x
    LOAD off    0x0001927c vaddr 0x0001827c paddr 0x00019df0 align 2**12
         filesz 0x00001b74 memsz 0x00001b74 flags rw-
    LOAD off    0x0001b964 vaddr 0x0001b964 paddr 0x0001b964 align 2**12
         filesz 0x00000000 memsz 0x000043f8 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00000000  00000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   000001a0  00000020  00000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00017c94  000001c0  000001c0  000011c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000428  00017e54  00017e54  00018e54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001b74  0001827c  00019df0  0001927c  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          000043f8  0001b964  0001b964  0001b964  2**2
                  ALLOC, SMALL_DATA
  6 .memory       00000000  0001fd5c  0001fd5c  0001adf0  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  0001adf0  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00000fc8  00000000  00000000  0001ae18  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   0002c22d  00000000  00000000  0001bde0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0000a7f8  00000000  00000000  0004800d  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   0000d853  00000000  00000000  00052805  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00003100  00000000  00000000  00060058  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00004618  00000000  00000000  00063158  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00017755  00000000  00000000  00067770  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000010  00000000  00000000  0007eec8  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00001888  00000000  00000000  0007eed8  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000006  00000000  00000000  000850ca  2**0
                  CONTENTS, READONLY
 18 .cpu          00000005  00000000  00000000  000850d0  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  000850d5  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  000850d6  2**0
                  CONTENTS, READONLY
 21 .sysid_hash   00000004  00000000  00000000  000850d7  2**0
                  CONTENTS, READONLY
 22 .sysid_base   00000004  00000000  00000000  000850db  2**0
                  CONTENTS, READONLY
 23 .sysid_time   00000004  00000000  00000000  000850df  2**0
                  CONTENTS, READONLY
 24 .stderr_dev   00000004  00000000  00000000  000850e3  2**0
                  CONTENTS, READONLY
 25 .stdin_dev    00000004  00000000  00000000  000850e7  2**0
                  CONTENTS, READONLY
 26 .stdout_dev   00000004  00000000  00000000  000850eb  2**0
                  CONTENTS, READONLY
 27 .sopc_system_name 0000000f  00000000  00000000  000850ef  2**0
                  CONTENTS, READONLY
 28 .quartus_project_dir 00000046  00000000  00000000  000850fe  2**0
                  CONTENTS, READONLY
 29 .jdi          00004beb  00000000  00000000  00085144  2**0
                  CONTENTS, READONLY
 30 .sopcinfo     00042f34  00000000  00000000  00089d2f  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00000000 l    d  .entry	00000000 .entry
00000020 l    d  .exceptions	00000000 .exceptions
000001c0 l    d  .text	00000000 .text
00017e54 l    d  .rodata	00000000 .rodata
0001827c l    d  .rwdata	00000000 .rwdata
0001b964 l    d  .bss	00000000 .bss
0001fd5c l    d  .memory	00000000 .memory
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../qsys_based_bsp//obj/HAL/src/crt0.o
000001f8 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_exception_entry.o
00000094 l       .exceptions	00000000 alt_exception_unknown
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 hello_ucosii.c
000005e0 l     F .text	000000b4 isr
00000694 l     F .text	00000054 init_response_meter
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 vfprintf.c
00017eae l     O .rodata	00000010 zeroes.4404
00002cac l     F .text	000000bc __sbprintf
00017ebe l     O .rodata	00000010 blanks.4403
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
00002ebc l     F .text	00000228 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
00004a14 l     F .text	00000008 __fp_unlock
00004a28 l     F .text	0000019c __sinit.part.1
00004bc4 l     F .text	00000008 __fp_lock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
0001827c l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 locale.c
000186c0 l     O .rwdata	00000020 lc_ctype_charset
000186a0 l     O .rwdata	00000020 lc_message_charset
000186e0 l     O .rwdata	00000038 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mprec.c
00017ef0 l     O .rodata	0000000c p05.2768
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
000075a8 l     F .text	000000fc __sprint_r.part.0
00018014 l     O .rodata	00000010 zeroes.4349
00008be4 l     F .text	000000bc __sbprintf
00018024 l     O .rodata	00000010 blanks.4348
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 alt_close.c
0000d600 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
0000d714 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
0000d740 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_isatty.c
0000dad4 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
0000dbbc l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
0000dca8 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_read.c
0000de7c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
00019d68 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
0000e0f0 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_env_lock.c
00019d6c l     O .rwdata	00000004 lockid
0001b9a8 l     O .bss	00000004 locks
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00019d70 l     O .rwdata	00000004 lockid
0001b9b0 l     O .bss	00000004 locks
00000000 l    df *ABS*	00000000 os_core.c
0000fb28 l     F .text	00000048 OS_InitMisc
0000fb70 l     F .text	0000006c OS_InitRdyList
0000fcdc l     F .text	000000e4 OS_InitTCBList
0000fa48 l     F .text	000000e0 OS_InitEventList
0000fbdc l     F .text	00000080 OS_InitTaskIdle
0000fc5c l     F .text	00000080 OS_InitTaskStat
0000ff4c l     F .text	00000074 OS_SchedNew
00000000 l    df *ABS*	00000000 os_dbg.c
00000000 l    df *ABS*	00000000 os_flag.c
00011c5c l     F .text	000000f4 OS_FlagTaskRdy
00011a1c l     F .text	00000160 OS_FlagBlock
00000000 l    df *ABS*	00000000 os_mem.c
00000000 l    df *ABS*	00000000 os_q.c
00000000 l    df *ABS*	00000000 os_sem.c
00000000 l    df *ABS*	00000000 os_task.c
00000000 l    df *ABS*	00000000 os_time.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
00015d34 l     F .text	00000034 alt_dev_reg
00018cc8 l     O .rwdata	0000106c jtag
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
000160b0 l     F .text	000002a4 altera_avalon_jtag_uart_irq
00016354 l     F .text	00000104 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
00016b30 l     F .text	00000078 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
00016d70 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
00016f30 l     F .text	000000e4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_open.c
00017090 l     F .text	0000003c alt_get_errno
000170cc l     F .text	000000ec alt_file_locked
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000000 l    df *ABS*	00000000 os_cpu_a.o
00000040 l       *ABS*	00000000 OSCtxSw_SWITCH_PC
00000000 l    df *ABS*	00000000 os_cpu_c.c
00000014 l       *ABS*	00000000 OSTCBNext_OFFSET
00000032 l       *ABS*	00000000 OSTCBPrio_OFFSET
00000000 l       *ABS*	00000000 OSTCBStkPtr_OFFSET
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
000070b8 g     F .text	00000074 _mprec_log10
00019dbe g     O .rwdata	00000002 OSTaskNameSize
000071a4 g     F .text	0000008c __any_on
00009660 g     F .text	00000054 _isatty_r
00017efc g     O .rodata	00000028 __mprec_tinytens
0000ddc0 g     F .text	000000bc alt_main
0001ca38 g     O .bss	00000100 alt_irq
000096b4 g     F .text	00000060 _lseek_r
0001247c g     F .text	000000d8 OS_MemInit
00019df0 g       *ABS*	00000000 __flash_rwdata_start
00015cd4 g     F .text	00000060 OSTimeSet
0000bfd8 g     F .text	00000088 .hidden __eqdf2
0000e79c g     F .text	00000610 OSEventPendMulti
0001fd5c g       *ABS*	00000000 __alt_heap_start
00017708 g     F .text	00000024 OSTaskCreateHook
0001ba38 g     O .bss	00001000 task1_stk
00000978 g     F .text	0000003c printf
00019d96 g     O .rwdata	00000002 OSMboxEn
0000ee04 g     F .text	0000004c OSIntEnter
00009f8c g     F .text	0000009c _wcrtomb_r
000073d0 g     F .text	0000005c __sseek
00004d74 g     F .text	00000010 __sinit
00009e34 g     F .text	00000140 __swbuf_r
00019da6 g     O .rwdata	00000002 OSQEn
00005380 g     F .text	0000007c _setlocale_r
00004bcc g     F .text	00000078 __sfmoreglue
0000e470 g     F .text	000000cc __malloc_unlock
00017770 g     F .text	00000020 OSTaskStatHook
0001b9b8 g     O .bss	00000001 OSLockNesting
00019de4 g     O .rwdata	00000002 OSDataSize
0001b9b9 g     O .bss	00000001 OSRunning
00009714 g     F .text	0000015c memmove
000177b0 g     F .text	00000020 OSInitHookBegin
00019ddc g     O .rwdata	00000002 OSTmrSize
00004d5c g     F .text	00000018 _cleanup
00006178 g     F .text	000000a8 _Balloc
0001b9bc g     O .bss	00000004 OSIdleCtr
0000c060 g     F .text	000000dc .hidden __gtdf2
00017588 g       .text	00000000 OSStartTsk
0001027c g     F .text	000002d4 OS_TCBInit
00000000 g     F .entry	0000000c __reset
00019de2 g     O .rwdata	00000002 OSTmrWheelTblSize
00000020 g       *ABS*	00000000 __flash_exceptions_start
0001b964 g     O .bss	00000004 running_sem
00019d82 g     O .rwdata	00000002 OSEventSize
0001b9c0 g     O .bss	00000001 OSPrioHighRdy
0000913c g     F .text	0000005c _fstat_r
0001772c g     F .text	00000024 OSTaskDelHook
0001b990 g     O .bss	00000004 errno
0000734c g     F .text	00000008 __seofread
00017568 g       .text	00000000 OSStartHighRdy
00014754 g     F .text	000001e4 OSTaskCreateExt
00011564 g     F .text	00000060 OSFlagPendGetFlagsRdy
00019dc2 g     O .rwdata	00000002 OSTaskStatStkSize
000106e0 g     F .text	00000308 OSFlagAccept
00012ac0 g     F .text	000000b8 OSQFlush
00012554 g     F .text	00000140 OSQAccept
0001b9a0 g     O .bss	00000004 alt_argv
00021d34 g       *ABS*	00000000 _gp
000145a8 g     F .text	000001ac OSTaskCreate
000140b8 g     F .text	000004f0 OSTaskChangePrio
0001b9b4 g     O .bss	00000004 alt_heapsem
00010550 g     F .text	00000190 OSDebugInit
00014938 g     F .text	00000344 OSTaskDel
00018b48 g     O .rwdata	00000180 alt_fd_list
0001cb38 g     O .bss	00000370 OSFlagTbl
0000f828 g     F .text	000000b8 OS_EventTaskRemove
00017834 g     F .text	00000090 alt_find_dev
00005f08 g     F .text	00000148 memcpy
00019dac g     O .rwdata	00000002 OSRdyTblSize
00004a1c g     F .text	0000000c _cleanup_r
0000d418 g     F .text	000000dc .hidden __floatsidf
00017014 g     F .text	0000007c alt_io_redirect
0000c13c g     F .text	000000f4 .hidden __ltdf2
00017e54 g       *ABS*	00000000 __DTOR_END__
0000e53c g     F .text	00000120 OSEventNameGet
00019d90 g     O .rwdata	00000002 OSFlagMax
00007230 g     F .text	00000074 __fpclassifyd
00007014 g     F .text	000000a4 __ratio
0000ee50 g     F .text	000000f8 OSIntExit
00008bc8 g     F .text	0000001c __vfiprintf_internal
00019dca g     O .rwdata	00000002 OSTCBSize
0001b9c1 g     O .bss	00000001 OSPrioCur
000165b0 g     F .text	000002bc altera_avalon_jtag_uart_read
00000948 g     F .text	00000030 _printf_r
0000088c g     F .text	00000064 .hidden __udivsi3
0000db10 g     F .text	000000ac isatty
00019db0 g     O .rwdata	00000002 OSStkWidth
00017f4c g     O .rodata	000000c8 __mprec_tens
00019da4 g     O .rwdata	00000002 OSPtrSize
000001fc g     F .text	000000d4 show_score
000053fc g     F .text	0000000c __locale_charset
00019d84 g     O .rwdata	00000002 OSEventTblSize
000174dc g       .text	00000000 OSCtxSw
0001b98c g     O .bss	00000004 __malloc_top_pad
0001b9c4 g     O .bss	00000004 OSTCBList
0001b994 g     O .bss	00000004 alt_fd_list_lock
00019d3c g     O .rwdata	00000004 __mb_cur_max
0000542c g     F .text	0000000c _localeconv_r
00009198 g     F .text	000004c8 __sfvwrite_r
000065ac g     F .text	0000003c __i2b
0001cea8 g     O .bss	00000c30 OSMemTbl
0001b9c8 g     O .bss	00000001 OSTickStepState
000072a4 g     F .text	00000054 _sbrk_r
00019da8 g     O .rwdata	00000002 OSQMax
0001dad8 g     O .bss	00000800 OSTaskStatStk
000120b8 g     F .text	000000f0 OSMemNameGet
00019d88 g     O .rwdata	00000002 OSFlagEn
00009870 g     F .text	00000060 _read_r
00019dce g     O .rwdata	00000002 OSTimeTickHookEn
00012f70 g     F .text	00000168 OSQPost
00011d50 g     F .text	000000a4 OS_FlagUnlink
00019d5c g     O .rwdata	00000004 alt_max_fd
0000fe14 g     F .text	00000068 OS_MemCopy
0000fe7c g     F .text	000000d0 OS_Sched
00008e30 g     F .text	000000f0 _fclose_r
00011fc8 g     F .text	000000f0 OSMemGet
00014f64 g     F .text	000001b4 OSTaskNameSet
000049e4 g     F .text	00000030 fflush
0001b988 g     O .bss	00000004 __malloc_max_sbrked_mem
0001b9cc g     O .bss	00000004 OSCtxSwCtr
00017790 g     F .text	00000020 OSTimeTickHook
00019d92 g     O .rwdata	00000002 OSFlagNameSize
0000f8e0 g     F .text	00000100 OS_EventTaskRemoveMulti
0000ad5c g     F .text	000008ac .hidden __adddf3
0000f6d8 g     F .text	00000150 OS_EventTaskWaitMulti
00006dbc g     F .text	0000010c __b2d
00019daa g     O .rwdata	00000002 OSQSize
0000a770 g     F .text	000005c4 .hidden __umoddi3
0000dce4 g     F .text	000000dc lseek
00013a20 g     F .text	0000020c OSSemPend
00019d34 g     O .rwdata	00000004 _global_impure_ptr
000098d0 g     F .text	00000564 _realloc_r
00019d94 g     O .rwdata	00000002 OSLowestPrio
0001fd5c g       *ABS*	00000000 __bss_end
0000d9e4 g     F .text	000000f0 alt_iic_isr_register
00017810 g     F .text	00000024 OSTCBInitHook
00019dda g     O .rwdata	00000002 OSTmrCfgTicksPerSec
000173b0 g     F .text	00000108 alt_tick
0000a174 g     F .text	000005fc .hidden __udivdi3
00009098 g     F .text	00000024 _fputwc_r
00019d7c g     O .rwdata	00000002 OSEventEn
00017f24 g     O .rodata	00000028 __mprec_bigtens
00006390 g     F .text	00000104 __s2b
00019dd6 g     O .rwdata	00000002 OSTmrCfgNameSize
0000d4f4 g     F .text	000000a8 .hidden __floatunsidf
00006afc g     F .text	00000060 __mcmp
00004d94 g     F .text	00000018 __fp_lock_all
0000d998 g     F .text	0000004c alt_ic_irq_enabled
00011b7c g     F .text	000000e0 OS_FlagInit
00017314 g     F .text	0000009c alt_alarm_stop
00019db8 g     O .rwdata	00000002 OSTaskIdleStkSize
0001b998 g     O .bss	00000004 alt_irq_active
00013658 g     F .text	000000b0 OSSemAccept
000122bc g     F .text	000000d8 OSMemPut
00011df4 g     F .text	000001d4 OSMemCreate
0001b9d0 g     O .bss	00000004 OSIdleCtrMax
000000ec g     F .exceptions	000000d4 alt_irq_handler
00018b20 g     O .rwdata	00000028 alt_dev_null
00019dcc g     O .rwdata	00000002 OSTicksPerSec
000174dc g       .text	00000000 OSIntCtxSw
00016d50 g     F .text	00000020 alt_dcache_flush_all
00006494 g     F .text	00000068 __hi0bits
0000d398 g     F .text	00000080 .hidden __fixdfsi
0001b9d4 g     O .bss	00000004 OSTCBFreeList
00019df0 g       *ABS*	00000000 __ram_rwdata_end
00013c2c g     F .text	0000016c OSSemPendAbort
00019d54 g     O .rwdata	00000008 alt_dev_list
0000e12c g     F .text	00000100 write
00019dd0 g     O .rwdata	00000002 OSVersionNbr
0001827c g       *ABS*	00000000 __ram_rodata_end
0000d77c g     F .text	000000b8 fstat
00000394 g     F .text	0000024c reaction_meter
0000c13c g     F .text	000000f4 .hidden __ledf2
00019d78 g     O .rwdata	00000004 OSEndiannessTest
00006874 g     F .text	00000140 __pow5mult
000076bc g     F .text	0000150c ___vfiprintf_internal_r
0001b980 g     O .bss	00000004 __nlocale_changed
000008f0 g     F .text	00000058 .hidden __umodsi3
00019d8a g     O .rwdata	00000002 OSFlagGrpSize
0001fd5c g       *ABS*	00000000 end
00015f68 g     F .text	00000148 altera_avalon_jtag_uart_init
000100e4 g     F .text	000000cc OS_TaskStat
0001b968 g     O .bss	00000004 start_counting_sem
00017e54 g       *ABS*	00000000 __CTOR_LIST__
00030000 g       *ABS*	00000000 __alt_stack_pointer
00016ba8 g     F .text	0000007c alt_avalon_timer_sc_init
0000d59c g     F .text	00000064 .hidden __clzsi2
0001686c g     F .text	000002c4 altera_avalon_jtag_uart_write
00004d84 g     F .text	00000004 __sfp_lock_acquire
00005e24 g     F .text	000000e4 memchr
0000fdc0 g     F .text	00000054 OS_MemClr
000009b4 g     F .text	000022dc ___vfprintf_internal_r
000175ac g     F .text	0000015c OSTaskStkInit
00004ee8 g     F .text	00000310 _free_r
00005408 g     F .text	00000010 __locale_mb_cur_max
0000f430 g     F .text	00000198 OS_EventTaskRdy
0000034c g     F .text	00000048 rotate_left
00017ca0 g     F .text	00000180 __call_exitprocs
0001b9d8 g     O .bss	00000001 OSCPUUsage
0001b97c g     O .bss	00000004 __mlocale_changed
00019d40 g     O .rwdata	00000004 __malloc_sbrk_base
000001c0 g     F .text	0000003c _start
0001ba08 g     O .bss	00000004 _alt_tick_rate
00012b78 g     F .text	0000028c OSQPend
00015824 g     F .text	00000104 OSTimeDly
000069b4 g     F .text	00000148 __lshift
0001ba0c g     O .bss	00000004 _alt_nticks
0000deb8 g     F .text	00000104 read
00015da0 g     F .text	00000064 alt_sys_init
00017b88 g     F .text	00000118 __register_exitproc
0001b9d9 g     O .bss	00000001 OSTaskCtr
00015928 g     F .text	0000017c OSTimeDlyHMSM
000065e8 g     F .text	0000028c __multiply
00016458 g     F .text	00000068 altera_avalon_jtag_uart_close
0000ad34 g     F .text	00000028 .hidden __mulsi3
0001827c g       *ABS*	00000000 __ram_rwdata_start
00017e54 g       *ABS*	00000000 __ram_rodata_start
0001ba10 g     O .bss	00000028 __malloc_current_mallinfo
00019d7e g     O .rwdata	00000002 OSEventMax
00006ec8 g     F .text	0000014c __d2b
00013d98 g     F .text	00000110 OSSemPost
0000efd4 g     F .text	000000dc OSSchedUnlock
00015e04 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
000179cc g     F .text	000000f4 alt_get_fd
0001b9dc g     O .bss	00000004 OSMemFreeList
0000f120 g     F .text	000000b0 OSStatInit
00011958 g     F .text	000000c4 OSFlagQuery
00019db4 g     O .rwdata	00000002 OSTaskCreateExtEn
00008d00 g     F .text	00000054 _close_r
00017b0c g     F .text	0000007c memcmp
0000f410 g     F .text	00000020 OS_Dummy
00015ec4 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
0001fd5c g       *ABS*	00000000 __alt_stack_base
00015f14 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
0001b96c g     O .bss	00000004 start_sem
00002d68 g     F .text	00000154 __swsetup_r
0001e2d8 g     O .bss	000001e0 OSQTbl
0000b608 g     F .text	000009d0 .hidden __divdf3
00004c44 g     F .text	00000118 __sfp
0000712c g     F .text	00000078 __copybits
00018718 g     O .rwdata	00000408 __malloc_av_
00004d90 g     F .text	00000004 __sinit_lock_release
0001b9e0 g     O .bss	00000004 OSTCBHighRdy
0000c230 g     F .text	0000086c .hidden __muldf3
000072f8 g     F .text	00000054 __sread
0001b9e4 g     O .bss	00000004 OSQFreeList
000002d0 g     F .text	0000007c show_tries
000178c4 g     F .text	00000108 alt_find_file
00016dac g     F .text	000000a4 alt_dev_llist_insert
0000e350 g     F .text	00000120 __malloc_lock
0000e040 g     F .text	000000b0 sbrk
0000e65c g     F .text	00000140 OSEventNameSet
00004988 g     F .text	0000005c _fflush_r
0001b970 g     O .bss	00000004 stop_sem
00008d54 g     F .text	000000dc _calloc_r
0001b9e8 g     O .bss	00000001 OSRdyGrp
0001b964 g       *ABS*	00000000 __bss_start
00006050 g     F .text	00000128 memset
000006e8 g     F .text	000000ac main
0001b9a4 g     O .bss	00000004 alt_envp
0001b984 g     O .bss	00000004 __malloc_max_total_mem
00015e64 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
00009f74 g     F .text	00000018 __swbuf
0001814c g     O .rodata	00000100 OSUnMapTbl
00019dae g     O .rwdata	00000002 OSSemEn
000115c4 g     F .text	00000394 OSFlagPost
0000742c g     F .text	00000008 __sclose
00030000 g       *ABS*	00000000 __alt_heap_limit
00008f20 g     F .text	00000014 fclose
0000f5c8 g     F .text	00000110 OS_EventTaskWait
000101b0 g     F .text	000000cc OS_TaskStatStkChk
00014c7c g     F .text	00000150 OSTaskDelReq
000030e4 g     F .text	00001688 _dtoa_r
00005618 g     F .text	0000080c _malloc_r
0000a0e8 g     F .text	00000030 __ascii_wctomb
00019d60 g     O .rwdata	00000004 alt_errno
0000f0b0 g     F .text	00000070 OSStart
0000e2f0 g     F .text	00000060 __env_unlock
000051f8 g     F .text	000000c4 _fwalk
00015118 g     F .text	000001d4 OSTaskResume
0001b974 g     O .bss	00000004 restart_sem
00012394 g     F .text	000000e8 OSMemQuery
00019dc0 g     O .rwdata	00000002 OSTaskStatEn
00019d9a g     O .rwdata	00000002 OSMemMax
000130d8 g     F .text	00000170 OSQPostFront
00000794 g     F .text	00000084 .hidden __divsi3
0001b9e9 g     O .bss	00000003 OSRdyTbl
00019d74 g     O .rwdata	00000002 OSDebugEn
00004dc4 g     F .text	00000124 _malloc_trim_r
00017e54 g       *ABS*	00000000 __CTOR_END__
00019d8c g     O .rwdata	00000002 OSFlagNodeSize
00019dd4 g     O .rwdata	00000002 OSTmrCfgMax
00007434 g     F .text	000000dc strcmp
00012694 g     F .text	000001ac OSQCreate
00014dcc g     F .text	00000198 OSTaskNameGet
00017e54 g       *ABS*	00000000 __flash_rodata_start
00013248 g     F .text	0000020c OSQPostOpt
0000f1d0 g     F .text	00000220 OSTimeTick
00019dbc g     O .rwdata	00000002 OSTaskMax
00017e54 g       *ABS*	00000000 __DTOR_LIST__
00013708 g     F .text	000000d8 OSSemCreate
00019de0 g     O .rwdata	00000002 OSTmrWheelSize
0000bfd8 g     F .text	00000088 .hidden __nedf2
00019db6 g     O .rwdata	00000002 OSTaskDelEn
00013ea8 g     F .text	00000110 OSSemQuery
00012840 g     F .text	00000280 OSQDel
00012e04 g     F .text	0000016c OSQPendAbort
00015d68 g     F .text	00000038 alt_irq_init
0000dfbc g     F .text	00000084 alt_release_fd
00018034 g     O .rodata	00000100 .hidden __clz_tab
0001b978 g     O .bss	00000004 _PathLocale
00017ac0 g     F .text	00000014 atexit
00008ca0 g     F .text	00000060 _write_r
0000ef48 g     F .text	0000008c OSSchedLock
00005438 g     F .text	00000018 setlocale
000109e8 g     F .text	00000108 OSFlagCreate
00019d38 g     O .rwdata	00000004 _impure_ptr
0001b99c g     O .bss	00000004 alt_argc
0000476c g     F .text	0000021c __sflush_r
00016eb0 g     F .text	00000060 _do_dtors
00005424 g     F .text	00000008 __locale_cjk_lang
00019d86 g     O .rwdata	00000002 OSEventMultiEn
00010af0 g     F .text	00000248 OSFlagDel
0001b9ec g     O .bss	00000004 OSEventFreeList
00000020 g       .exceptions	00000000 alt_irq_entry
00006d58 g     F .text	00000064 __ulp
00010fac g     F .text	000005b8 OSFlagPend
00019dd2 g     O .rwdata	00000002 OSTmrEn
00004dac g     F .text	00000018 __fp_unlock_all
00019d4c g     O .rwdata	00000008 alt_fs_list
0000ffc0 g     F .text	00000074 OS_StrCopy
00019d9c g     O .rwdata	00000002 OSMemNameSize
000177d0 g     F .text	00000020 OSInitHookEnd
00000020 g       *ABS*	00000000 __ram_exceptions_start
00019dc8 g     O .rwdata	00000002 OSTCBPrioTblMax
00005450 g     F .text	0000000c localeconv
00019dc4 g     O .rwdata	00000002 OSTaskStatStkChkEn
0000d834 g     F .text	00000050 alt_ic_isr_register
00019d98 g     O .rwdata	00000002 OSMemEn
00019da2 g     O .rwdata	00000002 OSMutexEn
00019df0 g       *ABS*	00000000 _edata
0001fd5c g       *ABS*	00000000 _end
0001b9f0 g     O .bss	00000001 OSIntNesting
00008f34 g     F .text	00000164 __fputwc
000001c0 g       *ABS*	00000000 __ram_exceptions_end
000164c0 g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
00015aa4 g     F .text	000001d4 OSTimeDlyResume
00010e60 g     F .text	0000014c OSFlagNameSet
000152ec g     F .text	000001c0 OSTaskStkChk
0000d90c g     F .text	0000008c alt_ic_irq_disable
00019d9e g     O .rwdata	00000002 OSMemSize
00007354 g     F .text	0000007c __swrite
00000000 g       *ABS*	00000000 __alt_mem_memory
00019d44 g     O .rwdata	00000004 __malloc_trim_threshold
000174b8 g     F .text	00000024 altera_nios2_qsys_irq_init
00005418 g     F .text	0000000c __locale_msgcharset
0001b9f4 g     O .bss	00000004 OSTCBCur
00017ad4 g     F .text	00000038 exit
00019da0 g     O .rwdata	00000002 OSMemTblSize
000052bc g     F .text	000000c4 _fwalk_reent
00006b5c g     F .text	000001fc __mdiff
00000818 g     F .text	00000074 .hidden __modsi3
00030000 g       *ABS*	00000000 __alt_data_end
00000020 g     F .exceptions	00000000 alt_exception
00004d88 g     F .text	00000004 __sfp_lock_release
0000edac g     F .text	00000058 OSInit
00015690 g     F .text	00000124 OSTaskQuery
000135b0 g     F .text	000000a8 OS_QInit
00010034 g     F .text	00000054 OS_StrLen
000121a8 g     F .text	00000114 OSMemNameSet
00019dba g     O .rwdata	00000002 OSTaskProfileEn
0001b9f8 g     O .bss	00000004 OSTime
0001e4b8 g     O .bss	00000800 OSTaskIdleStk
00017e20 g     F .text	00000034 _exit
00016c24 g     F .text	0000012c alt_alarm_start
00010d38 g     F .text	00000128 OSFlagNameGet
00015c78 g     F .text	0000005c OSTimeGet
0000545c g     F .text	000001bc __smakebuf_r
00007510 g     F .text	00000098 strlen
00017750 g     F .text	00000020 OSTaskSwHook
000171b8 g     F .text	0000015c open
0001ecb8 g     O .bss	00000b40 OSEventTbl
0000c060 g     F .text	000000dc .hidden __gedf2
0001f7f8 g     O .bss	00000510 OSTCBTbl
00013fb8 g     F .text	00000100 OSSemSet
00019d48 g     O .rwdata	00000004 __wctomb
000076a4 g     F .text	00000018 __sprint_r
00016f10 g     F .text	00000020 alt_icache_flush_all
00019d64 g     O .rwdata	00000004 alt_priority_mask
000137e0 g     F .text	00000240 OSSemDel
0001b9fc g     O .bss	00000004 OSFlagFreeList
0000d884 g     F .text	00000088 alt_ic_irq_enable
00019d80 g     O .rwdata	00000002 OSEventNameSize
00002c90 g     F .text	0000001c __vfprintf_internal
0001ba00 g     O .bss	00000001 OSStatRdy
0001fd08 g     O .bss	00000054 OSTCBPrioTbl
0000a118 g     F .text	0000005c _wctomb_r
0000e22c g     F .text	000000c4 __env_lock
00019dc6 g     O .rwdata	00000002 OSTaskSwHookEn
0000ca9c g     F .text	000008fc .hidden __subdf3
000064fc g     F .text	000000b0 __lo0bits
00019de8 g     O .rwdata	00000008 alt_alarm_list
00019d8e g     O .rwdata	00000002 OSFlagWidth
00016e50 g     F .text	00000060 _do_ctors
0000a028 g     F .text	000000c0 wcrtomb
0000d63c g     F .text	000000d8 close
0001b9ac g     O .bss	00000004 alt_envsem
0001ba04 g     O .bss	00000004 OSIdleCtrRun
0000f3f0 g     F .text	00000020 OSVersion
00019dd8 g     O .rwdata	00000002 OSTmrCfgWheelSize
0000dc24 g     F .text	00000084 alt_load
000157b4 g     F .text	00000070 OS_TaskStkClr
00019db2 g     O .rwdata	00000002 OSTaskCreateEn
0000f9e0 g     F .text	00000068 OS_EventWaitListInit
000090bc g     F .text	00000080 fputwc
000177f0 g     F .text	00000020 OSTaskIdleHook
00004d8c g     F .text	00000004 __sinit_lock_acquire
00006248 g     F .text	00000148 __multadd
000154ac g     F .text	000001e4 OSTaskSuspend
00006220 g     F .text	00000028 _Bfree
00010088 g     F .text	0000005c OS_TaskIdle
00019dde g     O .rwdata	00000002 OSTmrTblSize
00013454 g     F .text	0000015c OSQQuery



Disassembly of section .entry:

00000000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   0:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
   4:	08407014 	ori	at,at,448
    jmp r1
   8:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

00000020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
  20:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
  24:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
  28:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
  2c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
  30:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
  34:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
  38:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
  3c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
  40:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
  44:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
  48:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
  4c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
  50:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
  54:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
  58:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
  5c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
  60:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
  64:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
  68:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
  6c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  70:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
  74:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
  78:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
  7c:	10000326 	beq	r2,zero,8c <OSCtxSw_SWITCH_PC+0x4c>
        beq   r4, zero, .Lnot_irq
  80:	20000226 	beq	r4,zero,8c <OSCtxSw_SWITCH_PC+0x4c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
  84:	00000ec0 	call	ec <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
  88:	00000306 	br	98 <alt_exception_unknown+0x4>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
  8c:	df401215 	stw	ea,72(sp)
        ldw   r2, -4(ea)   /* Instruction that caused exception */
  90:	e8bfff17 	ldw	r2,-4(ea)

00000094 <alt_exception_unknown>:
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
  94:	003da03a 	break	0
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
  98:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
  9c:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
  a0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
  a4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
  a8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
  ac:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
  b0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
  b4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
  b8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
  bc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
  c0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
  c4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
  c8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
  cc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
  d0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
  d4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
  d8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
  dc:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
  e0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
  e4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
  e8:	ef80083a 	eret

000000ec <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
  ec:	defff904 	addi	sp,sp,-28
  f0:	dfc00615 	stw	ra,24(sp)
  f4:	df000515 	stw	fp,20(sp)
  f8:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
  fc:	000ee040 	call	ee04 <OSIntEnter>
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 100:	0005313a 	rdctl	r2,ipending
 104:	e0bffe15 	stw	r2,-8(fp)

  return active;
 108:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 10c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
 110:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 114:	00800044 	movi	r2,1
 118:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 11c:	e0fffb17 	ldw	r3,-20(fp)
 120:	e0bffc17 	ldw	r2,-16(fp)
 124:	1884703a 	and	r2,r3,r2
 128:	10001426 	beq	r2,zero,17c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
 12c:	008000b4 	movhi	r2,2
 130:	10b28e04 	addi	r2,r2,-13768
 134:	e0fffd17 	ldw	r3,-12(fp)
 138:	180690fa 	slli	r3,r3,3
 13c:	10c5883a 	add	r2,r2,r3
 140:	10c00017 	ldw	r3,0(r2)
 144:	008000b4 	movhi	r2,2
 148:	10b28e04 	addi	r2,r2,-13768
 14c:	e13ffd17 	ldw	r4,-12(fp)
 150:	200890fa 	slli	r4,r4,3
 154:	1105883a 	add	r2,r2,r4
 158:	10800104 	addi	r2,r2,4
 15c:	10800017 	ldw	r2,0(r2)
 160:	1009883a 	mov	r4,r2
 164:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
 168:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 16c:	0005313a 	rdctl	r2,ipending
 170:	e0bfff15 	stw	r2,-4(fp)

  return active;
 174:	e0bfff17 	ldw	r2,-4(fp)
 178:	00000706 	br	198 <alt_irq_handler+0xac>
      }
      mask <<= 1;
 17c:	e0bffc17 	ldw	r2,-16(fp)
 180:	1085883a 	add	r2,r2,r2
 184:	e0bffc15 	stw	r2,-16(fp)
      i++;
 188:	e0bffd17 	ldw	r2,-12(fp)
 18c:	10800044 	addi	r2,r2,1
 190:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 194:	003fe106 	br	11c <__alt_data_end+0xfffd011c>

    active = alt_irq_pending ();
 198:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
 19c:	e0bffb17 	ldw	r2,-20(fp)
 1a0:	103fdb1e 	bne	r2,zero,110 <__alt_data_end+0xfffd0110>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
 1a4:	000ee500 	call	ee50 <OSIntExit>
}
 1a8:	0001883a 	nop
 1ac:	e037883a 	mov	sp,fp
 1b0:	dfc00117 	ldw	ra,4(sp)
 1b4:	df000017 	ldw	fp,0(sp)
 1b8:	dec00204 	addi	sp,sp,8
 1bc:	f800283a 	ret

Disassembly of section .text:

000001c0 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
     1c0:	06c000f4 	movhi	sp,3
    ori sp, sp, %lo(__alt_stack_pointer)
     1c4:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
     1c8:	068000b4 	movhi	gp,2
    ori gp, gp, %lo(_gp)
     1cc:	d6874d14 	ori	gp,gp,7476
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
     1d0:	00800074 	movhi	r2,1
    ori r2, r2, %lo(__bss_start)
     1d4:	10ae5914 	ori	r2,r2,47460

    movhi r3, %hi(__bss_end)
     1d8:	00c00074 	movhi	r3,1
    ori r3, r3, %lo(__bss_end)
     1dc:	18ff5714 	ori	r3,r3,64860

    beq r2, r3, 1f
     1e0:	10c00326 	beq	r2,r3,1f0 <_start+0x30>

0:
    stw zero, (r2)
     1e4:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
     1e8:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
     1ec:	10fffd36 	bltu	r2,r3,1e4 <__alt_data_end+0xfffd01e4>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
     1f0:	000dc240 	call	dc24 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
     1f4:	000ddc00 	call	ddc0 <alt_main>

000001f8 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
     1f8:	003fff06 	br	1f8 <__alt_data_end+0xfffd01f8>

000001fc <show_score>:
#define	  IRQ_CONTROLLER	   0

// Synchronisation mechanisms.
OS_EVENT *running_sem, *start_sem, *stop_sem, *start_counting_sem, *restart_sem;

void show_score(unsigned int score){
     1fc:	defffc04 	addi	sp,sp,-16
     200:	dfc00315 	stw	ra,12(sp)
     204:	df000215 	stw	fp,8(sp)
     208:	df000204 	addi	fp,sp,8
     20c:	e13fff15 	stw	r4,-4(fp)
	int data = score % 10;
     210:	e0bfff17 	ldw	r2,-4(fp)
     214:	01400284 	movi	r5,10
     218:	1009883a 	mov	r4,r2
     21c:	00008f00 	call	8f0 <__umodsi3>
     220:	e0bffe15 	stw	r2,-8(fp)
	data |= (score / 10 % 10) << 4;
     224:	e0bfff17 	ldw	r2,-4(fp)
     228:	01400284 	movi	r5,10
     22c:	1009883a 	mov	r4,r2
     230:	000088c0 	call	88c <__udivsi3>
     234:	01400284 	movi	r5,10
     238:	1009883a 	mov	r4,r2
     23c:	00008f00 	call	8f0 <__umodsi3>
     240:	1006913a 	slli	r3,r2,4
     244:	e0bffe17 	ldw	r2,-8(fp)
     248:	1884b03a 	or	r2,r3,r2
     24c:	e0bffe15 	stw	r2,-8(fp)
	data |= (score / 100 % 10) << 8;
     250:	e0bfff17 	ldw	r2,-4(fp)
     254:	01401904 	movi	r5,100
     258:	1009883a 	mov	r4,r2
     25c:	000088c0 	call	88c <__udivsi3>
     260:	01400284 	movi	r5,10
     264:	1009883a 	mov	r4,r2
     268:	00008f00 	call	8f0 <__umodsi3>
     26c:	1006923a 	slli	r3,r2,8
     270:	e0bffe17 	ldw	r2,-8(fp)
     274:	1884b03a 	or	r2,r3,r2
     278:	e0bffe15 	stw	r2,-8(fp)
	data |= (score / 1000 % 10) << 12;
     27c:	e0bfff17 	ldw	r2,-4(fp)
     280:	0140fa04 	movi	r5,1000
     284:	1009883a 	mov	r4,r2
     288:	000088c0 	call	88c <__udivsi3>
     28c:	01400284 	movi	r5,10
     290:	1009883a 	mov	r4,r2
     294:	00008f00 	call	8f0 <__umodsi3>
     298:	1006933a 	slli	r3,r2,12
     29c:	e0bffe17 	ldw	r2,-8(fp)
     2a0:	1884b03a 	or	r2,r3,r2
     2a4:	e0bffe15 	stw	r2,-8(fp)
	IOWR_32DIRECT(SSD_CONTROLLER_BASE, 4, data);
     2a8:	00800134 	movhi	r2,4
     2ac:	10840f04 	addi	r2,r2,4156
     2b0:	e0fffe17 	ldw	r3,-8(fp)
     2b4:	10c00035 	stwio	r3,0(r2)
}
     2b8:	0001883a 	nop
     2bc:	e037883a 	mov	sp,fp
     2c0:	dfc00117 	ldw	ra,4(sp)
     2c4:	df000017 	ldw	fp,0(sp)
     2c8:	dec00204 	addi	sp,sp,8
     2cc:	f800283a 	ret

000002d0 <show_tries>:

void show_tries(unsigned int tries){
     2d0:	defffc04 	addi	sp,sp,-16
     2d4:	dfc00315 	stw	ra,12(sp)
     2d8:	df000215 	stw	fp,8(sp)
     2dc:	df000204 	addi	fp,sp,8
     2e0:	e13fff15 	stw	r4,-4(fp)
	int data = tries % 10;
     2e4:	e0bfff17 	ldw	r2,-4(fp)
     2e8:	01400284 	movi	r5,10
     2ec:	1009883a 	mov	r4,r2
     2f0:	00008f00 	call	8f0 <__umodsi3>
     2f4:	e0bffe15 	stw	r2,-8(fp)
	data |= (tries / 10 % 10) << 4;
     2f8:	e0bfff17 	ldw	r2,-4(fp)
     2fc:	01400284 	movi	r5,10
     300:	1009883a 	mov	r4,r2
     304:	000088c0 	call	88c <__udivsi3>
     308:	01400284 	movi	r5,10
     30c:	1009883a 	mov	r4,r2
     310:	00008f00 	call	8f0 <__umodsi3>
     314:	1006913a 	slli	r3,r2,4
     318:	e0bffe17 	ldw	r2,-8(fp)
     31c:	1884b03a 	or	r2,r3,r2
     320:	e0bffe15 	stw	r2,-8(fp)
	IOWR_32DIRECT(SSD_CONTROLLER_BASE, 0, data);
     324:	00800134 	movhi	r2,4
     328:	10840e04 	addi	r2,r2,4152
     32c:	e0fffe17 	ldw	r3,-8(fp)
     330:	10c00035 	stwio	r3,0(r2)
}
     334:	0001883a 	nop
     338:	e037883a 	mov	sp,fp
     33c:	dfc00117 	ldw	ra,4(sp)
     340:	df000017 	ldw	fp,0(sp)
     344:	dec00204 	addi	sp,sp,8
     348:	f800283a 	ret

0000034c <rotate_left>:

int rotate_left(int num, int shift){
     34c:	defffd04 	addi	sp,sp,-12
     350:	df000215 	stw	fp,8(sp)
     354:	df000204 	addi	fp,sp,8
     358:	e13ffe15 	stw	r4,-8(fp)
     35c:	e17fff15 	stw	r5,-4(fp)
    return (num << shift) | (num >> (9 - shift));
     360:	e0fffe17 	ldw	r3,-8(fp)
     364:	e0bfff17 	ldw	r2,-4(fp)
     368:	1886983a 	sll	r3,r3,r2
     36c:	01000244 	movi	r4,9
     370:	e0bfff17 	ldw	r2,-4(fp)
     374:	2085c83a 	sub	r2,r4,r2
     378:	e13ffe17 	ldw	r4,-8(fp)
     37c:	2085d83a 	sra	r2,r4,r2
     380:	1884b03a 	or	r2,r3,r2
}
     384:	e037883a 	mov	sp,fp
     388:	df000017 	ldw	fp,0(sp)
     38c:	dec00104 	addi	sp,sp,4
     390:	f800283a 	ret

00000394 <reaction_meter>:

void reaction_meter(void* pdata){
     394:	defff804 	addi	sp,sp,-32
     398:	dfc00715 	stw	ra,28(sp)
     39c:	df000615 	stw	fp,24(sp)
     3a0:	df000604 	addi	fp,sp,24
     3a4:	e13fff15 	stw	r4,-4(fp)
	INT8U ret = OS_NO_ERR;
     3a8:	e03ffec5 	stb	zero,-5(fp)
	uint16_t highscore = UINT16_MAX;
     3ac:	00bfffc4 	movi	r2,-1
     3b0:	e0bffa0d 	sth	r2,-24(fp)
	uint16_t response_time, leds = 0;
     3b4:	e03ffb0d 	sth	zero,-20(fp)
	uint8_t tries = 0;
     3b8:	e03ffb85 	stb	zero,-18(fp)

	enum states {IDLE, START, COUNT, STOP};
	enum states state = IDLE;
     3bc:	e03ffc15 	stw	zero,-16(fp)

	while (1){
		switch(state){
     3c0:	e0bffc17 	ldw	r2,-16(fp)
     3c4:	10c00060 	cmpeqi	r3,r2,1
     3c8:	1800231e 	bne	r3,zero,458 <reaction_meter+0xc4>
     3cc:	0080052e 	bgeu	zero,r2,3e4 <reaction_meter+0x50>
     3d0:	10c000a0 	cmpeqi	r3,r2,2
     3d4:	18002b1e 	bne	r3,zero,484 <reaction_meter+0xf0>
     3d8:	108000e0 	cmpeqi	r2,r2,3
     3dc:	10005b1e 	bne	r2,zero,54c <reaction_meter+0x1b8>
     3e0:	00007e06 	br	5dc <reaction_meter+0x248>
		case IDLE: {
			if(highscore != UINT16_MAX){
     3e4:	e0fffa0b 	ldhu	r3,-24(fp)
     3e8:	00bfffd4 	movui	r2,65535
     3ec:	18800426 	beq	r3,r2,400 <reaction_meter+0x6c>
				show_score(highscore);
     3f0:	e0bffa0b 	ldhu	r2,-24(fp)
     3f4:	1009883a 	mov	r4,r2
     3f8:	00001fc0 	call	1fc <show_score>
     3fc:	00000206 	br	408 <reaction_meter+0x74>
			} else {
				show_score(0);
     400:	0009883a 	mov	r4,zero
     404:	00001fc0 	call	1fc <show_score>
			}
			show_tries(tries++);
     408:	e0bffb83 	ldbu	r2,-18(fp)
     40c:	10c00044 	addi	r3,r2,1
     410:	e0fffb85 	stb	r3,-18(fp)
     414:	10803fcc 	andi	r2,r2,255
     418:	1009883a 	mov	r4,r2
     41c:	00002d00 	call	2d0 <show_tries>
			leds = 0;
     420:	e03ffb0d 	sth	zero,-20(fp)
			IOWR_ALTERA_AVALON_PIO_DATA(LEDS_BASE, leds);
     424:	e0fffb0b 	ldhu	r3,-20(fp)
     428:	00800134 	movhi	r2,4
     42c:	10840804 	addi	r2,r2,4128
     430:	10c00035 	stwio	r3,0(r2)
			OSSemPend(start_sem, 0, &ret);
     434:	d0a70e17 	ldw	r2,-25544(gp)
     438:	e0fffec4 	addi	r3,fp,-5
     43c:	180d883a 	mov	r6,r3
     440:	000b883a 	mov	r5,zero
     444:	1009883a 	mov	r4,r2
     448:	0013a200 	call	13a20 <OSSemPend>
			state = START;
     44c:	00800044 	movi	r2,1
     450:	e0bffc15 	stw	r2,-16(fp)
			break;
     454:	00006106 	br	5dc <reaction_meter+0x248>
		}
		case START: {
			show_score(0);
     458:	0009883a 	mov	r4,zero
     45c:	00001fc0 	call	1fc <show_score>
			OSSemPend(start_counting_sem, 0, &ret);
     460:	d0a70d17 	ldw	r2,-25548(gp)
     464:	e0fffec4 	addi	r3,fp,-5
     468:	180d883a 	mov	r6,r3
     46c:	000b883a 	mov	r5,zero
     470:	1009883a 	mov	r4,r2
     474:	0013a200 	call	13a20 <OSSemPend>
			state = COUNT;
     478:	00800084 	movi	r2,2
     47c:	e0bffc15 	stw	r2,-16(fp)
			break;
     480:	00005606 	br	5dc <reaction_meter+0x248>
		}
		case COUNT: {
			enum states next_state = IDLE;
     484:	e03ffd15 	stw	zero,-12(fp)
			for(uint16_t time = 0; time < 20; time++){
     488:	e03ffe0d 	sth	zero,-8(fp)
     48c:	00002706 	br	52c <reaction_meter+0x198>
				leds <<= 1;
     490:	e0bffb0b 	ldhu	r2,-20(fp)
     494:	1085883a 	add	r2,r2,r2
     498:	e0bffb0d 	sth	r2,-20(fp)
				leds |= 1UL;
     49c:	e0bffb0b 	ldhu	r2,-20(fp)
     4a0:	10800054 	ori	r2,r2,1
     4a4:	e0bffb0d 	sth	r2,-20(fp)
				IOWR_ALTERA_AVALON_PIO_DATA(LEDS_BASE, leds);
     4a8:	e0fffb0b 	ldhu	r3,-20(fp)
     4ac:	00800134 	movhi	r2,4
     4b0:	10840804 	addi	r2,r2,4128
     4b4:	10c00035 	stwio	r3,0(r2)
				OSSemPend(stop_sem, 100, &ret); 	// Wait 1ms at max.
     4b8:	d0a70f17 	ldw	r2,-25540(gp)
     4bc:	e0fffec4 	addi	r3,fp,-5
     4c0:	180d883a 	mov	r6,r3
     4c4:	01401904 	movi	r5,100
     4c8:	1009883a 	mov	r4,r2
     4cc:	0013a200 	call	13a20 <OSSemPend>
				if(ret != OS_TIMEOUT){
     4d0:	e0bffec3 	ldbu	r2,-5(fp)
     4d4:	10803fcc 	andi	r2,r2,255
     4d8:	108002a0 	cmpeqi	r2,r2,10
     4dc:	1000101e 	bne	r2,zero,520 <reaction_meter+0x18c>
					response_time = IORD_16DIRECT(RESPONSE_TIME_METER_0_BASE, 2);
     4e0:	00800134 	movhi	r2,4
     4e4:	10841284 	addi	r2,r2,4170
     4e8:	1080002b 	ldhuio	r2,0(r2)
     4ec:	10bfffcc 	andi	r2,r2,65535
     4f0:	e0bffa8d 	sth	r2,-22(fp)
					if(response_time >= MIN_RESP_TIME){
     4f4:	e0bffa8b 	ldhu	r2,-22(fp)
     4f8:	10801430 	cmpltui	r2,r2,80
     4fc:	10000f1e 	bne	r2,zero,53c <reaction_meter+0x1a8>
						printf("Responded within %ims!\n", response_time);
     500:	e0bffa8b 	ldhu	r2,-22(fp)
     504:	100b883a 	mov	r5,r2
     508:	01000074 	movhi	r4,1
     50c:	211f9504 	addi	r4,r4,32340
     510:	00009780 	call	978 <printf>
						next_state = STOP;
     514:	008000c4 	movi	r2,3
     518:	e0bffd15 	stw	r2,-12(fp)
					}
					break;
     51c:	00000706 	br	53c <reaction_meter+0x1a8>
			state = COUNT;
			break;
		}
		case COUNT: {
			enum states next_state = IDLE;
			for(uint16_t time = 0; time < 20; time++){
     520:	e0bffe0b 	ldhu	r2,-8(fp)
     524:	10800044 	addi	r2,r2,1
     528:	e0bffe0d 	sth	r2,-8(fp)
     52c:	e0bffe0b 	ldhu	r2,-8(fp)
     530:	10800530 	cmpltui	r2,r2,20
     534:	103fd61e 	bne	r2,zero,490 <__alt_data_end+0xfffd0490>
     538:	00000106 	br	540 <reaction_meter+0x1ac>
					response_time = IORD_16DIRECT(RESPONSE_TIME_METER_0_BASE, 2);
					if(response_time >= MIN_RESP_TIME){
						printf("Responded within %ims!\n", response_time);
						next_state = STOP;
					}
					break;
     53c:	0001883a 	nop
				}
			}
			state = next_state;
     540:	e0bffd17 	ldw	r2,-12(fp)
     544:	e0bffc15 	stw	r2,-16(fp)
			break;
     548:	00002406 	br	5dc <reaction_meter+0x248>
		}
		case STOP: {
			show_score(response_time);
     54c:	e0bffa8b 	ldhu	r2,-22(fp)
     550:	1009883a 	mov	r4,r2
     554:	00001fc0 	call	1fc <show_score>
			bool new_highscore = false;
     558:	e03ffe85 	stb	zero,-6(fp)
			if(response_time < highscore){
     55c:	e0fffa8b 	ldhu	r3,-22(fp)
     560:	e0bffa0b 	ldhu	r2,-24(fp)
     564:	1880042e 	bgeu	r3,r2,578 <reaction_meter+0x1e4>
				highscore = response_time;
     568:	e0bffa8b 	ldhu	r2,-22(fp)
     56c:	e0bffa0d 	sth	r2,-24(fp)
				new_highscore = true;
     570:	00800044 	movi	r2,1
     574:	e0bffe85 	stb	r2,-6(fp)
			}
			while(true){
				OSSemPend(restart_sem, 100, &ret);
     578:	d0a71017 	ldw	r2,-25536(gp)
     57c:	e0fffec4 	addi	r3,fp,-5
     580:	180d883a 	mov	r6,r3
     584:	01401904 	movi	r5,100
     588:	1009883a 	mov	r4,r2
     58c:	0013a200 	call	13a20 <OSSemPend>
				if(ret != OS_TIMEOUT){
     590:	e0bffec3 	ldbu	r2,-5(fp)
     594:	10803fcc 	andi	r2,r2,255
     598:	108002a0 	cmpeqi	r2,r2,10
     59c:	10000c26 	beq	r2,zero,5d0 <reaction_meter+0x23c>
					break;
				}
				if(new_highscore){
     5a0:	e0bffe83 	ldbu	r2,-6(fp)
     5a4:	103ff426 	beq	r2,zero,578 <__alt_data_end+0xfffd0578>
					leds = rotate_left(leds, 1);
     5a8:	e0bffb0b 	ldhu	r2,-20(fp)
     5ac:	01400044 	movi	r5,1
     5b0:	1009883a 	mov	r4,r2
     5b4:	000034c0 	call	34c <rotate_left>
     5b8:	e0bffb0d 	sth	r2,-20(fp)
					IOWR_ALTERA_AVALON_PIO_DATA(LEDS_BASE, leds);
     5bc:	e0fffb0b 	ldhu	r3,-20(fp)
     5c0:	00800134 	movhi	r2,4
     5c4:	10840804 	addi	r2,r2,4128
     5c8:	10c00035 	stwio	r3,0(r2)
				}
			}
     5cc:	003fea06 	br	578 <__alt_data_end+0xfffd0578>
				new_highscore = true;
			}
			while(true){
				OSSemPend(restart_sem, 100, &ret);
				if(ret != OS_TIMEOUT){
					break;
     5d0:	0001883a 	nop
				if(new_highscore){
					leds = rotate_left(leds, 1);
					IOWR_ALTERA_AVALON_PIO_DATA(LEDS_BASE, leds);
				}
			}
			state = IDLE;
     5d4:	e03ffc15 	stw	zero,-16(fp)
			break;
     5d8:	0001883a 	nop
		}
		}
	}
     5dc:	003f7806 	br	3c0 <__alt_data_end+0xfffd03c0>

000005e0 <isr>:
}

static void isr(void * isr_context){
     5e0:	defffc04 	addi	sp,sp,-16
     5e4:	dfc00315 	stw	ra,12(sp)
     5e8:	df000215 	stw	fp,8(sp)
     5ec:	df000204 	addi	fp,sp,8
     5f0:	e13fff15 	stw	r4,-4(fp)
	uint16_t state = IORD_16DIRECT(RESPONSE_TIME_METER_0_BASE, 0);
     5f4:	00800134 	movhi	r2,4
     5f8:	10841204 	addi	r2,r2,4168
     5fc:	1080002b 	ldhuio	r2,0(r2)
     600:	10bfffcc 	andi	r2,r2,65535
     604:	e0bffe0d 	sth	r2,-8(fp)
	if(state == 3){
     608:	e0bffe0b 	ldhu	r2,-8(fp)
     60c:	108000d8 	cmpnei	r2,r2,3
     610:	1000041e 	bne	r2,zero,624 <isr+0x44>
		OSSemPost(start_counting_sem);
     614:	d0a70d17 	ldw	r2,-25548(gp)
     618:	1009883a 	mov	r4,r2
     61c:	0013d980 	call	13d98 <OSSemPost>
     620:	00001306 	br	670 <isr+0x90>
	} else if(state == 1){
     624:	e0bffe0b 	ldhu	r2,-8(fp)
     628:	10800058 	cmpnei	r2,r2,1
     62c:	1000041e 	bne	r2,zero,640 <isr+0x60>
		OSSemPost(start_sem);
     630:	d0a70e17 	ldw	r2,-25544(gp)
     634:	1009883a 	mov	r4,r2
     638:	0013d980 	call	13d98 <OSSemPost>
     63c:	00000c06 	br	670 <isr+0x90>
	} else if(state == SYS_STOP) {
     640:	e0bffe0b 	ldhu	r2,-8(fp)
     644:	10800118 	cmpnei	r2,r2,4
     648:	1000041e 	bne	r2,zero,65c <isr+0x7c>
		OSSemPost(stop_sem);
     64c:	d0a70f17 	ldw	r2,-25540(gp)
     650:	1009883a 	mov	r4,r2
     654:	0013d980 	call	13d98 <OSSemPost>
     658:	00000506 	br	670 <isr+0x90>
	} else if (state == 0){
     65c:	e0bffe0b 	ldhu	r2,-8(fp)
     660:	1000031e 	bne	r2,zero,670 <isr+0x90>
		OSSemPost(restart_sem);
     664:	d0a71017 	ldw	r2,-25536(gp)
     668:	1009883a 	mov	r4,r2
     66c:	0013d980 	call	13d98 <OSSemPost>
	}
	show_tries(state);
     670:	e0bffe0b 	ldhu	r2,-8(fp)
     674:	1009883a 	mov	r4,r2
     678:	00002d00 	call	2d0 <show_tries>
}
     67c:	0001883a 	nop
     680:	e037883a 	mov	sp,fp
     684:	dfc00117 	ldw	ra,4(sp)
     688:	df000017 	ldw	fp,0(sp)
     68c:	dec00204 	addi	sp,sp,8
     690:	f800283a 	ret

00000694 <init_response_meter>:

static void init_response_meter(){
     694:	defffd04 	addi	sp,sp,-12
     698:	dfc00215 	stw	ra,8(sp)
     69c:	df000115 	stw	fp,4(sp)
     6a0:	df000104 	addi	fp,sp,4
	alt_ic_isr_register(IRQ_CONTROLLER, IRQ_ID, isr, 0, 0x0);
     6a4:	d8000015 	stw	zero,0(sp)
     6a8:	000f883a 	mov	r7,zero
     6ac:	01800034 	movhi	r6,0
     6b0:	31817804 	addi	r6,r6,1504
     6b4:	01400044 	movi	r5,1
     6b8:	0009883a 	mov	r4,zero
     6bc:	000d8340 	call	d834 <alt_ic_isr_register>
#ifdef FIXED_DELAY
	IOWR_16DIRECT(RESPONSE_TIME_METER_0_BASE, 0, FIXED_DELAY);
#else
	IOWR_16DIRECT(RESPONSE_TIME_METER_0_BASE, 0, 0);
     6c0:	0007883a 	mov	r3,zero
     6c4:	00800134 	movhi	r2,4
     6c8:	10841204 	addi	r2,r2,4168
     6cc:	10c0002d 	sthio	r3,0(r2)
#endif
}
     6d0:	0001883a 	nop
     6d4:	e037883a 	mov	sp,fp
     6d8:	dfc00117 	ldw	ra,4(sp)
     6dc:	df000017 	ldw	fp,0(sp)
     6e0:	dec00204 	addi	sp,sp,8
     6e4:	f800283a 	ret

000006e8 <main>:

int main(void){
     6e8:	defff904 	addi	sp,sp,-28
     6ec:	dfc00615 	stw	ra,24(sp)
     6f0:	df000515 	stw	fp,20(sp)
     6f4:	df000504 	addi	fp,sp,20
	start_sem = OSSemCreate(0);
     6f8:	0009883a 	mov	r4,zero
     6fc:	00137080 	call	13708 <OSSemCreate>
     700:	d0a70e15 	stw	r2,-25544(gp)
	start_counting_sem = OSSemCreate(0);
     704:	0009883a 	mov	r4,zero
     708:	00137080 	call	13708 <OSSemCreate>
     70c:	d0a70d15 	stw	r2,-25548(gp)
	running_sem = OSSemCreate(0);
     710:	0009883a 	mov	r4,zero
     714:	00137080 	call	13708 <OSSemCreate>
     718:	d0a70c15 	stw	r2,-25552(gp)
	stop_sem = OSSemCreate(0);
     71c:	0009883a 	mov	r4,zero
     720:	00137080 	call	13708 <OSSemCreate>
     724:	d0a70f15 	stw	r2,-25540(gp)
	restart_sem = OSSemCreate(0);
     728:	0009883a 	mov	r4,zero
     72c:	00137080 	call	13708 <OSSemCreate>
     730:	d0a71015 	stw	r2,-25536(gp)

	init_response_meter();
     734:	00006940 	call	694 <init_response_meter>

	OSTaskCreateExt(reaction_meter,
     738:	d8000415 	stw	zero,16(sp)
     73c:	d8000315 	stw	zero,12(sp)
     740:	00810004 	movi	r2,1024
     744:	d8800215 	stw	r2,8(sp)
     748:	008000b4 	movhi	r2,2
     74c:	10ae8e04 	addi	r2,r2,-17864
     750:	d8800115 	stw	r2,4(sp)
     754:	00800044 	movi	r2,1
     758:	d8800015 	stw	r2,0(sp)
     75c:	01c00044 	movi	r7,1
     760:	018000b4 	movhi	r6,2
     764:	31b28d04 	addi	r6,r6,-13772
     768:	000b883a 	mov	r5,zero
     76c:	01000034 	movhi	r4,0
     770:	2100e504 	addi	r4,r4,916
     774:	00147540 	call	14754 <OSTaskCreateExt>
                  task1_stk,
                  TASK_STACKSIZE,
                  NULL,
                  0);

	OSStart();
     778:	000f0b00 	call	f0b0 <OSStart>
	return 0;
     77c:	0005883a 	mov	r2,zero
}
     780:	e037883a 	mov	sp,fp
     784:	dfc00117 	ldw	ra,4(sp)
     788:	df000017 	ldw	fp,0(sp)
     78c:	dec00204 	addi	sp,sp,8
     790:	f800283a 	ret

00000794 <__divsi3>:
     794:	20001b16 	blt	r4,zero,804 <__divsi3+0x70>
     798:	000f883a 	mov	r7,zero
     79c:	28001616 	blt	r5,zero,7f8 <__divsi3+0x64>
     7a0:	200d883a 	mov	r6,r4
     7a4:	29001a2e 	bgeu	r5,r4,810 <__divsi3+0x7c>
     7a8:	00800804 	movi	r2,32
     7ac:	00c00044 	movi	r3,1
     7b0:	00000106 	br	7b8 <__divsi3+0x24>
     7b4:	10000d26 	beq	r2,zero,7ec <__divsi3+0x58>
     7b8:	294b883a 	add	r5,r5,r5
     7bc:	10bfffc4 	addi	r2,r2,-1
     7c0:	18c7883a 	add	r3,r3,r3
     7c4:	293ffb36 	bltu	r5,r4,7b4 <__alt_data_end+0xfffd07b4>
     7c8:	0005883a 	mov	r2,zero
     7cc:	18000726 	beq	r3,zero,7ec <__divsi3+0x58>
     7d0:	0005883a 	mov	r2,zero
     7d4:	31400236 	bltu	r6,r5,7e0 <__divsi3+0x4c>
     7d8:	314dc83a 	sub	r6,r6,r5
     7dc:	10c4b03a 	or	r2,r2,r3
     7e0:	1806d07a 	srli	r3,r3,1
     7e4:	280ad07a 	srli	r5,r5,1
     7e8:	183ffa1e 	bne	r3,zero,7d4 <__alt_data_end+0xfffd07d4>
     7ec:	38000126 	beq	r7,zero,7f4 <__divsi3+0x60>
     7f0:	0085c83a 	sub	r2,zero,r2
     7f4:	f800283a 	ret
     7f8:	014bc83a 	sub	r5,zero,r5
     7fc:	39c0005c 	xori	r7,r7,1
     800:	003fe706 	br	7a0 <__alt_data_end+0xfffd07a0>
     804:	0109c83a 	sub	r4,zero,r4
     808:	01c00044 	movi	r7,1
     80c:	003fe306 	br	79c <__alt_data_end+0xfffd079c>
     810:	00c00044 	movi	r3,1
     814:	003fee06 	br	7d0 <__alt_data_end+0xfffd07d0>

00000818 <__modsi3>:
     818:	20001716 	blt	r4,zero,878 <__modsi3+0x60>
     81c:	000f883a 	mov	r7,zero
     820:	2005883a 	mov	r2,r4
     824:	28001216 	blt	r5,zero,870 <__modsi3+0x58>
     828:	2900162e 	bgeu	r5,r4,884 <__modsi3+0x6c>
     82c:	01800804 	movi	r6,32
     830:	00c00044 	movi	r3,1
     834:	00000106 	br	83c <__modsi3+0x24>
     838:	30000a26 	beq	r6,zero,864 <__modsi3+0x4c>
     83c:	294b883a 	add	r5,r5,r5
     840:	31bfffc4 	addi	r6,r6,-1
     844:	18c7883a 	add	r3,r3,r3
     848:	293ffb36 	bltu	r5,r4,838 <__alt_data_end+0xfffd0838>
     84c:	18000526 	beq	r3,zero,864 <__modsi3+0x4c>
     850:	1806d07a 	srli	r3,r3,1
     854:	11400136 	bltu	r2,r5,85c <__modsi3+0x44>
     858:	1145c83a 	sub	r2,r2,r5
     85c:	280ad07a 	srli	r5,r5,1
     860:	183ffb1e 	bne	r3,zero,850 <__alt_data_end+0xfffd0850>
     864:	38000126 	beq	r7,zero,86c <__modsi3+0x54>
     868:	0085c83a 	sub	r2,zero,r2
     86c:	f800283a 	ret
     870:	014bc83a 	sub	r5,zero,r5
     874:	003fec06 	br	828 <__alt_data_end+0xfffd0828>
     878:	0109c83a 	sub	r4,zero,r4
     87c:	01c00044 	movi	r7,1
     880:	003fe706 	br	820 <__alt_data_end+0xfffd0820>
     884:	00c00044 	movi	r3,1
     888:	003ff106 	br	850 <__alt_data_end+0xfffd0850>

0000088c <__udivsi3>:
     88c:	200d883a 	mov	r6,r4
     890:	2900152e 	bgeu	r5,r4,8e8 <__udivsi3+0x5c>
     894:	28001416 	blt	r5,zero,8e8 <__udivsi3+0x5c>
     898:	00800804 	movi	r2,32
     89c:	00c00044 	movi	r3,1
     8a0:	00000206 	br	8ac <__udivsi3+0x20>
     8a4:	10000e26 	beq	r2,zero,8e0 <__udivsi3+0x54>
     8a8:	28000516 	blt	r5,zero,8c0 <__udivsi3+0x34>
     8ac:	294b883a 	add	r5,r5,r5
     8b0:	10bfffc4 	addi	r2,r2,-1
     8b4:	18c7883a 	add	r3,r3,r3
     8b8:	293ffa36 	bltu	r5,r4,8a4 <__alt_data_end+0xfffd08a4>
     8bc:	18000826 	beq	r3,zero,8e0 <__udivsi3+0x54>
     8c0:	0005883a 	mov	r2,zero
     8c4:	31400236 	bltu	r6,r5,8d0 <__udivsi3+0x44>
     8c8:	314dc83a 	sub	r6,r6,r5
     8cc:	10c4b03a 	or	r2,r2,r3
     8d0:	1806d07a 	srli	r3,r3,1
     8d4:	280ad07a 	srli	r5,r5,1
     8d8:	183ffa1e 	bne	r3,zero,8c4 <__alt_data_end+0xfffd08c4>
     8dc:	f800283a 	ret
     8e0:	0005883a 	mov	r2,zero
     8e4:	f800283a 	ret
     8e8:	00c00044 	movi	r3,1
     8ec:	003ff406 	br	8c0 <__alt_data_end+0xfffd08c0>

000008f0 <__umodsi3>:
     8f0:	2005883a 	mov	r2,r4
     8f4:	2900122e 	bgeu	r5,r4,940 <__umodsi3+0x50>
     8f8:	28001116 	blt	r5,zero,940 <__umodsi3+0x50>
     8fc:	01800804 	movi	r6,32
     900:	00c00044 	movi	r3,1
     904:	00000206 	br	910 <__umodsi3+0x20>
     908:	30000c26 	beq	r6,zero,93c <__umodsi3+0x4c>
     90c:	28000516 	blt	r5,zero,924 <__umodsi3+0x34>
     910:	294b883a 	add	r5,r5,r5
     914:	31bfffc4 	addi	r6,r6,-1
     918:	18c7883a 	add	r3,r3,r3
     91c:	293ffa36 	bltu	r5,r4,908 <__alt_data_end+0xfffd0908>
     920:	18000626 	beq	r3,zero,93c <__umodsi3+0x4c>
     924:	1806d07a 	srli	r3,r3,1
     928:	11400136 	bltu	r2,r5,930 <__umodsi3+0x40>
     92c:	1145c83a 	sub	r2,r2,r5
     930:	280ad07a 	srli	r5,r5,1
     934:	183ffb1e 	bne	r3,zero,924 <__alt_data_end+0xfffd0924>
     938:	f800283a 	ret
     93c:	f800283a 	ret
     940:	00c00044 	movi	r3,1
     944:	003ff706 	br	924 <__alt_data_end+0xfffd0924>

00000948 <_printf_r>:
     948:	defffd04 	addi	sp,sp,-12
     94c:	2805883a 	mov	r2,r5
     950:	dfc00015 	stw	ra,0(sp)
     954:	d9800115 	stw	r6,4(sp)
     958:	d9c00215 	stw	r7,8(sp)
     95c:	21400217 	ldw	r5,8(r4)
     960:	d9c00104 	addi	r7,sp,4
     964:	100d883a 	mov	r6,r2
     968:	00009b40 	call	9b4 <___vfprintf_internal_r>
     96c:	dfc00017 	ldw	ra,0(sp)
     970:	dec00304 	addi	sp,sp,12
     974:	f800283a 	ret

00000978 <printf>:
     978:	defffc04 	addi	sp,sp,-16
     97c:	dfc00015 	stw	ra,0(sp)
     980:	d9400115 	stw	r5,4(sp)
     984:	d9800215 	stw	r6,8(sp)
     988:	d9c00315 	stw	r7,12(sp)
     98c:	008000b4 	movhi	r2,2
     990:	10a74e04 	addi	r2,r2,-25288
     994:	10800017 	ldw	r2,0(r2)
     998:	200b883a 	mov	r5,r4
     99c:	d9800104 	addi	r6,sp,4
     9a0:	11000217 	ldw	r4,8(r2)
     9a4:	0002c900 	call	2c90 <__vfprintf_internal>
     9a8:	dfc00017 	ldw	ra,0(sp)
     9ac:	dec00404 	addi	sp,sp,16
     9b0:	f800283a 	ret

000009b4 <___vfprintf_internal_r>:
     9b4:	deffb804 	addi	sp,sp,-288
     9b8:	dfc04715 	stw	ra,284(sp)
     9bc:	ddc04515 	stw	r23,276(sp)
     9c0:	dd404315 	stw	r21,268(sp)
     9c4:	d9002d15 	stw	r4,180(sp)
     9c8:	282f883a 	mov	r23,r5
     9cc:	302b883a 	mov	r21,r6
     9d0:	d9c02e15 	stw	r7,184(sp)
     9d4:	df004615 	stw	fp,280(sp)
     9d8:	dd804415 	stw	r22,272(sp)
     9dc:	dd004215 	stw	r20,264(sp)
     9e0:	dcc04115 	stw	r19,260(sp)
     9e4:	dc804015 	stw	r18,256(sp)
     9e8:	dc403f15 	stw	r17,252(sp)
     9ec:	dc003e15 	stw	r16,248(sp)
     9f0:	000542c0 	call	542c <_localeconv_r>
     9f4:	10800017 	ldw	r2,0(r2)
     9f8:	1009883a 	mov	r4,r2
     9fc:	d8803415 	stw	r2,208(sp)
     a00:	00075100 	call	7510 <strlen>
     a04:	d8803715 	stw	r2,220(sp)
     a08:	d8802d17 	ldw	r2,180(sp)
     a0c:	10000226 	beq	r2,zero,a18 <___vfprintf_internal_r+0x64>
     a10:	10800e17 	ldw	r2,56(r2)
     a14:	1000fb26 	beq	r2,zero,e04 <___vfprintf_internal_r+0x450>
     a18:	b880030b 	ldhu	r2,12(r23)
     a1c:	10c8000c 	andi	r3,r2,8192
     a20:	1800061e 	bne	r3,zero,a3c <___vfprintf_internal_r+0x88>
     a24:	b9001917 	ldw	r4,100(r23)
     a28:	00f7ffc4 	movi	r3,-8193
     a2c:	10880014 	ori	r2,r2,8192
     a30:	20c6703a 	and	r3,r4,r3
     a34:	b880030d 	sth	r2,12(r23)
     a38:	b8c01915 	stw	r3,100(r23)
     a3c:	10c0020c 	andi	r3,r2,8
     a40:	1800c326 	beq	r3,zero,d50 <___vfprintf_internal_r+0x39c>
     a44:	b8c00417 	ldw	r3,16(r23)
     a48:	1800c126 	beq	r3,zero,d50 <___vfprintf_internal_r+0x39c>
     a4c:	1080068c 	andi	r2,r2,26
     a50:	00c00284 	movi	r3,10
     a54:	10c0c626 	beq	r2,r3,d70 <___vfprintf_internal_r+0x3bc>
     a58:	d8c00404 	addi	r3,sp,16
     a5c:	05000074 	movhi	r20,1
     a60:	d9001e04 	addi	r4,sp,120
     a64:	a51fab84 	addi	r20,r20,32430
     a68:	d8c01e15 	stw	r3,120(sp)
     a6c:	d8002015 	stw	zero,128(sp)
     a70:	d8001f15 	stw	zero,124(sp)
     a74:	d8003315 	stw	zero,204(sp)
     a78:	d8003615 	stw	zero,216(sp)
     a7c:	d8003815 	stw	zero,224(sp)
     a80:	1811883a 	mov	r8,r3
     a84:	d8003915 	stw	zero,228(sp)
     a88:	d8003a15 	stw	zero,232(sp)
     a8c:	d8002f15 	stw	zero,188(sp)
     a90:	d9002815 	stw	r4,160(sp)
     a94:	a8800007 	ldb	r2,0(r21)
     a98:	10028b26 	beq	r2,zero,14c8 <___vfprintf_internal_r+0xb14>
     a9c:	00c00944 	movi	r3,37
     aa0:	a823883a 	mov	r17,r21
     aa4:	10c0021e 	bne	r2,r3,ab0 <___vfprintf_internal_r+0xfc>
     aa8:	00001406 	br	afc <___vfprintf_internal_r+0x148>
     aac:	10c00326 	beq	r2,r3,abc <___vfprintf_internal_r+0x108>
     ab0:	8c400044 	addi	r17,r17,1
     ab4:	88800007 	ldb	r2,0(r17)
     ab8:	103ffc1e 	bne	r2,zero,aac <__alt_data_end+0xfffd0aac>
     abc:	8d61c83a 	sub	r16,r17,r21
     ac0:	80000e26 	beq	r16,zero,afc <___vfprintf_internal_r+0x148>
     ac4:	d8c02017 	ldw	r3,128(sp)
     ac8:	d8801f17 	ldw	r2,124(sp)
     acc:	45400015 	stw	r21,0(r8)
     ad0:	1c07883a 	add	r3,r3,r16
     ad4:	10800044 	addi	r2,r2,1
     ad8:	d8c02015 	stw	r3,128(sp)
     adc:	44000115 	stw	r16,4(r8)
     ae0:	d8801f15 	stw	r2,124(sp)
     ae4:	00c001c4 	movi	r3,7
     ae8:	1880a916 	blt	r3,r2,d90 <___vfprintf_internal_r+0x3dc>
     aec:	42000204 	addi	r8,r8,8
     af0:	d9402f17 	ldw	r5,188(sp)
     af4:	2c0b883a 	add	r5,r5,r16
     af8:	d9402f15 	stw	r5,188(sp)
     afc:	88800007 	ldb	r2,0(r17)
     b00:	1000aa26 	beq	r2,zero,dac <___vfprintf_internal_r+0x3f8>
     b04:	8d400044 	addi	r21,r17,1
     b08:	8c400047 	ldb	r17,1(r17)
     b0c:	0021883a 	mov	r16,zero
     b10:	00bfffc4 	movi	r2,-1
     b14:	0025883a 	mov	r18,zero
     b18:	dc002905 	stb	r16,164(sp)
     b1c:	d8002785 	stb	zero,158(sp)
     b20:	d8002b05 	stb	zero,172(sp)
     b24:	d8802a15 	stw	r2,168(sp)
     b28:	d8003115 	stw	zero,196(sp)
     b2c:	04c01604 	movi	r19,88
     b30:	05800244 	movi	r22,9
     b34:	9021883a 	mov	r16,r18
     b38:	4039883a 	mov	fp,r8
     b3c:	ad400044 	addi	r21,r21,1
     b40:	88bff804 	addi	r2,r17,-32
     b44:	98833236 	bltu	r19,r2,1810 <___vfprintf_internal_r+0xe5c>
     b48:	100490ba 	slli	r2,r2,2
     b4c:	00c00034 	movhi	r3,0
     b50:	18c2d804 	addi	r3,r3,2912
     b54:	10c5883a 	add	r2,r2,r3
     b58:	10800017 	ldw	r2,0(r2)
     b5c:	1000683a 	jmp	r2
     b60:	00001708 	cmpgei	zero,zero,92
     b64:	00001810 	cmplti	zero,zero,96
     b68:	00001810 	cmplti	zero,zero,96
     b6c:	00001728 	cmpgeui	zero,zero,92
     b70:	00001810 	cmplti	zero,zero,96
     b74:	00001810 	cmplti	zero,zero,96
     b78:	00001810 	cmplti	zero,zero,96
     b7c:	00001810 	cmplti	zero,zero,96
     b80:	00001810 	cmplti	zero,zero,96
     b84:	00001810 	cmplti	zero,zero,96
     b88:	00000e10 	cmplti	zero,zero,56
     b8c:	00001618 	cmpnei	zero,zero,88
     b90:	00001810 	cmplti	zero,zero,96
     b94:	00000cd4 	movui	zero,51
     b98:	00000e34 	movhi	zero,56
     b9c:	00001810 	cmplti	zero,zero,96
     ba0:	00000e84 	movi	zero,58
     ba4:	00000e90 	cmplti	zero,zero,58
     ba8:	00000e90 	cmplti	zero,zero,58
     bac:	00000e90 	cmplti	zero,zero,58
     bb0:	00000e90 	cmplti	zero,zero,58
     bb4:	00000e90 	cmplti	zero,zero,58
     bb8:	00000e90 	cmplti	zero,zero,58
     bbc:	00000e90 	cmplti	zero,zero,58
     bc0:	00000e90 	cmplti	zero,zero,58
     bc4:	00000e90 	cmplti	zero,zero,58
     bc8:	00001810 	cmplti	zero,zero,96
     bcc:	00001810 	cmplti	zero,zero,96
     bd0:	00001810 	cmplti	zero,zero,96
     bd4:	00001810 	cmplti	zero,zero,96
     bd8:	00001810 	cmplti	zero,zero,96
     bdc:	00001810 	cmplti	zero,zero,96
     be0:	00001810 	cmplti	zero,zero,96
     be4:	00001810 	cmplti	zero,zero,96
     be8:	00001810 	cmplti	zero,zero,96
     bec:	00001810 	cmplti	zero,zero,96
     bf0:	00000ecc 	andi	zero,zero,59
     bf4:	00000f94 	movui	zero,62
     bf8:	00001810 	cmplti	zero,zero,96
     bfc:	00000f94 	movui	zero,62
     c00:	00001810 	cmplti	zero,zero,96
     c04:	00001810 	cmplti	zero,zero,96
     c08:	00001810 	cmplti	zero,zero,96
     c0c:	00001810 	cmplti	zero,zero,96
     c10:	00001040 	call	104 <alt_irq_handler+0x18>
     c14:	00001810 	cmplti	zero,zero,96
     c18:	00001810 	cmplti	zero,zero,96
     c1c:	0000104c 	andi	zero,zero,65
     c20:	00001810 	cmplti	zero,zero,96
     c24:	00001810 	cmplti	zero,zero,96
     c28:	00001810 	cmplti	zero,zero,96
     c2c:	00001810 	cmplti	zero,zero,96
     c30:	00001810 	cmplti	zero,zero,96
     c34:	000014d0 	cmplti	zero,zero,83
     c38:	00001810 	cmplti	zero,zero,96
     c3c:	00001810 	cmplti	zero,zero,96
     c40:	0000153c 	xorhi	zero,zero,84
     c44:	00001810 	cmplti	zero,zero,96
     c48:	00001810 	cmplti	zero,zero,96
     c4c:	00001810 	cmplti	zero,zero,96
     c50:	00001810 	cmplti	zero,zero,96
     c54:	00001810 	cmplti	zero,zero,96
     c58:	00001810 	cmplti	zero,zero,96
     c5c:	00001810 	cmplti	zero,zero,96
     c60:	00001810 	cmplti	zero,zero,96
     c64:	00001810 	cmplti	zero,zero,96
     c68:	00001810 	cmplti	zero,zero,96
     c6c:	000017b4 	movhi	zero,94
     c70:	00001734 	movhi	zero,92
     c74:	00000f94 	movui	zero,62
     c78:	00000f94 	movui	zero,62
     c7c:	00000f94 	movui	zero,62
     c80:	00001754 	movui	zero,93
     c84:	00001734 	movhi	zero,92
     c88:	00001810 	cmplti	zero,zero,96
     c8c:	00001810 	cmplti	zero,zero,96
     c90:	00001760 	cmpeqi	zero,zero,93
     c94:	00001810 	cmplti	zero,zero,96
     c98:	00001774 	movhi	zero,93
     c9c:	000015f8 	rdprs	zero,zero,87
     ca0:	00000ce0 	cmpeqi	zero,zero,51
     ca4:	00001630 	cmpltui	zero,zero,88
     ca8:	00001810 	cmplti	zero,zero,96
     cac:	0000163c 	xorhi	zero,zero,88
     cb0:	00001810 	cmplti	zero,zero,96
     cb4:	000016a0 	cmpeqi	zero,zero,90
     cb8:	00001810 	cmplti	zero,zero,96
     cbc:	00001810 	cmplti	zero,zero,96
     cc0:	000016c0 	call	16c <alt_irq_handler+0x80>
     cc4:	d8c03117 	ldw	r3,196(sp)
     cc8:	d8802e15 	stw	r2,184(sp)
     ccc:	00c7c83a 	sub	r3,zero,r3
     cd0:	d8c03115 	stw	r3,196(sp)
     cd4:	84000114 	ori	r16,r16,4
     cd8:	ac400007 	ldb	r17,0(r21)
     cdc:	003f9706 	br	b3c <__alt_data_end+0xfffd0b3c>
     ce0:	00800c04 	movi	r2,48
     ce4:	d8802705 	stb	r2,156(sp)
     ce8:	00801e04 	movi	r2,120
     cec:	d8802745 	stb	r2,157(sp)
     cf0:	d9002a17 	ldw	r4,168(sp)
     cf4:	d8802e17 	ldw	r2,184(sp)
     cf8:	d8002785 	stb	zero,158(sp)
     cfc:	e011883a 	mov	r8,fp
     d00:	10c00104 	addi	r3,r2,4
     d04:	14c00017 	ldw	r19,0(r2)
     d08:	002d883a 	mov	r22,zero
     d0c:	80800094 	ori	r2,r16,2
     d10:	2002ca16 	blt	r4,zero,183c <___vfprintf_internal_r+0xe88>
     d14:	00bfdfc4 	movi	r2,-129
     d18:	80a4703a 	and	r18,r16,r2
     d1c:	d8c02e15 	stw	r3,184(sp)
     d20:	94800094 	ori	r18,r18,2
     d24:	9802b41e 	bne	r19,zero,17f8 <___vfprintf_internal_r+0xe44>
     d28:	01400074 	movhi	r5,1
     d2c:	295fa404 	addi	r5,r5,32400
     d30:	d9403915 	stw	r5,228(sp)
     d34:	04401e04 	movi	r17,120
     d38:	d8802a17 	ldw	r2,168(sp)
     d3c:	0039883a 	mov	fp,zero
     d40:	1001fa26 	beq	r2,zero,152c <___vfprintf_internal_r+0xb78>
     d44:	0027883a 	mov	r19,zero
     d48:	002d883a 	mov	r22,zero
     d4c:	00021906 	br	15b4 <___vfprintf_internal_r+0xc00>
     d50:	d9002d17 	ldw	r4,180(sp)
     d54:	b80b883a 	mov	r5,r23
     d58:	0002d680 	call	2d68 <__swsetup_r>
     d5c:	1005dc1e 	bne	r2,zero,24d0 <___vfprintf_internal_r+0x1b1c>
     d60:	b880030b 	ldhu	r2,12(r23)
     d64:	00c00284 	movi	r3,10
     d68:	1080068c 	andi	r2,r2,26
     d6c:	10ff3a1e 	bne	r2,r3,a58 <__alt_data_end+0xfffd0a58>
     d70:	b880038f 	ldh	r2,14(r23)
     d74:	103f3816 	blt	r2,zero,a58 <__alt_data_end+0xfffd0a58>
     d78:	d9c02e17 	ldw	r7,184(sp)
     d7c:	d9002d17 	ldw	r4,180(sp)
     d80:	a80d883a 	mov	r6,r21
     d84:	b80b883a 	mov	r5,r23
     d88:	0002cac0 	call	2cac <__sbprintf>
     d8c:	00001106 	br	dd4 <___vfprintf_internal_r+0x420>
     d90:	d9002d17 	ldw	r4,180(sp)
     d94:	d9801e04 	addi	r6,sp,120
     d98:	b80b883a 	mov	r5,r23
     d9c:	00076a40 	call	76a4 <__sprint_r>
     da0:	1000081e 	bne	r2,zero,dc4 <___vfprintf_internal_r+0x410>
     da4:	da000404 	addi	r8,sp,16
     da8:	003f5106 	br	af0 <__alt_data_end+0xfffd0af0>
     dac:	d8802017 	ldw	r2,128(sp)
     db0:	10000426 	beq	r2,zero,dc4 <___vfprintf_internal_r+0x410>
     db4:	d9002d17 	ldw	r4,180(sp)
     db8:	d9801e04 	addi	r6,sp,120
     dbc:	b80b883a 	mov	r5,r23
     dc0:	00076a40 	call	76a4 <__sprint_r>
     dc4:	b880030b 	ldhu	r2,12(r23)
     dc8:	1080100c 	andi	r2,r2,64
     dcc:	1005c01e 	bne	r2,zero,24d0 <___vfprintf_internal_r+0x1b1c>
     dd0:	d8802f17 	ldw	r2,188(sp)
     dd4:	dfc04717 	ldw	ra,284(sp)
     dd8:	df004617 	ldw	fp,280(sp)
     ddc:	ddc04517 	ldw	r23,276(sp)
     de0:	dd804417 	ldw	r22,272(sp)
     de4:	dd404317 	ldw	r21,268(sp)
     de8:	dd004217 	ldw	r20,264(sp)
     dec:	dcc04117 	ldw	r19,260(sp)
     df0:	dc804017 	ldw	r18,256(sp)
     df4:	dc403f17 	ldw	r17,252(sp)
     df8:	dc003e17 	ldw	r16,248(sp)
     dfc:	dec04804 	addi	sp,sp,288
     e00:	f800283a 	ret
     e04:	d9002d17 	ldw	r4,180(sp)
     e08:	0004d740 	call	4d74 <__sinit>
     e0c:	003f0206 	br	a18 <__alt_data_end+0xfffd0a18>
     e10:	d9002e17 	ldw	r4,184(sp)
     e14:	d9402e17 	ldw	r5,184(sp)
     e18:	21000017 	ldw	r4,0(r4)
     e1c:	28800104 	addi	r2,r5,4
     e20:	d9003115 	stw	r4,196(sp)
     e24:	203fa716 	blt	r4,zero,cc4 <__alt_data_end+0xfffd0cc4>
     e28:	d8802e15 	stw	r2,184(sp)
     e2c:	ac400007 	ldb	r17,0(r21)
     e30:	003f4206 	br	b3c <__alt_data_end+0xfffd0b3c>
     e34:	ac400007 	ldb	r17,0(r21)
     e38:	01000a84 	movi	r4,42
     e3c:	a8c00044 	addi	r3,r21,1
     e40:	89075826 	beq	r17,r4,2ba4 <___vfprintf_internal_r+0x21f0>
     e44:	8cbff404 	addi	r18,r17,-48
     e48:	b486ae36 	bltu	r22,r18,2904 <___vfprintf_internal_r+0x1f50>
     e4c:	0009883a 	mov	r4,zero
     e50:	1823883a 	mov	r17,r3
     e54:	01400284 	movi	r5,10
     e58:	000ad340 	call	ad34 <__mulsi3>
     e5c:	88c00007 	ldb	r3,0(r17)
     e60:	1489883a 	add	r4,r2,r18
     e64:	8d400044 	addi	r21,r17,1
     e68:	1cbff404 	addi	r18,r3,-48
     e6c:	a823883a 	mov	r17,r21
     e70:	b4bff82e 	bgeu	r22,r18,e54 <__alt_data_end+0xfffd0e54>
     e74:	1823883a 	mov	r17,r3
     e78:	2005f616 	blt	r4,zero,2654 <___vfprintf_internal_r+0x1ca0>
     e7c:	d9002a15 	stw	r4,168(sp)
     e80:	003f2f06 	br	b40 <__alt_data_end+0xfffd0b40>
     e84:	84002014 	ori	r16,r16,128
     e88:	ac400007 	ldb	r17,0(r21)
     e8c:	003f2b06 	br	b3c <__alt_data_end+0xfffd0b3c>
     e90:	8cbff404 	addi	r18,r17,-48
     e94:	d8003115 	stw	zero,196(sp)
     e98:	0009883a 	mov	r4,zero
     e9c:	a823883a 	mov	r17,r21
     ea0:	01400284 	movi	r5,10
     ea4:	000ad340 	call	ad34 <__mulsi3>
     ea8:	88c00007 	ldb	r3,0(r17)
     eac:	9089883a 	add	r4,r18,r2
     eb0:	ad400044 	addi	r21,r21,1
     eb4:	1cbff404 	addi	r18,r3,-48
     eb8:	a823883a 	mov	r17,r21
     ebc:	b4bff82e 	bgeu	r22,r18,ea0 <__alt_data_end+0xfffd0ea0>
     ec0:	1823883a 	mov	r17,r3
     ec4:	d9003115 	stw	r4,196(sp)
     ec8:	003f1d06 	br	b40 <__alt_data_end+0xfffd0b40>
     ecc:	8025883a 	mov	r18,r16
     ed0:	dc002903 	ldbu	r16,164(sp)
     ed4:	e011883a 	mov	r8,fp
     ed8:	84003fcc 	andi	r16,r16,255
     edc:	8007531e 	bne	r16,zero,2c2c <___vfprintf_internal_r+0x2278>
     ee0:	94800414 	ori	r18,r18,16
     ee4:	9080080c 	andi	r2,r18,32
     ee8:	1003a326 	beq	r2,zero,1d78 <___vfprintf_internal_r+0x13c4>
     eec:	d9002e17 	ldw	r4,184(sp)
     ef0:	20800117 	ldw	r2,4(r4)
     ef4:	24c00017 	ldw	r19,0(r4)
     ef8:	21000204 	addi	r4,r4,8
     efc:	d9002e15 	stw	r4,184(sp)
     f00:	102d883a 	mov	r22,r2
     f04:	10047316 	blt	r2,zero,20d4 <___vfprintf_internal_r+0x1720>
     f08:	d9002a17 	ldw	r4,168(sp)
     f0c:	df002783 	ldbu	fp,158(sp)
     f10:	2003e416 	blt	r4,zero,1ea4 <___vfprintf_internal_r+0x14f0>
     f14:	00ffdfc4 	movi	r3,-129
     f18:	9d84b03a 	or	r2,r19,r22
     f1c:	90e4703a 	and	r18,r18,r3
     f20:	10018026 	beq	r2,zero,1524 <___vfprintf_internal_r+0xb70>
     f24:	b003ab26 	beq	r22,zero,1dd4 <___vfprintf_internal_r+0x1420>
     f28:	dc402915 	stw	r17,164(sp)
     f2c:	dc001e04 	addi	r16,sp,120
     f30:	b023883a 	mov	r17,r22
     f34:	402d883a 	mov	r22,r8
     f38:	9809883a 	mov	r4,r19
     f3c:	880b883a 	mov	r5,r17
     f40:	01800284 	movi	r6,10
     f44:	000f883a 	mov	r7,zero
     f48:	000a7700 	call	a770 <__umoddi3>
     f4c:	10800c04 	addi	r2,r2,48
     f50:	843fffc4 	addi	r16,r16,-1
     f54:	9809883a 	mov	r4,r19
     f58:	880b883a 	mov	r5,r17
     f5c:	80800005 	stb	r2,0(r16)
     f60:	01800284 	movi	r6,10
     f64:	000f883a 	mov	r7,zero
     f68:	000a1740 	call	a174 <__udivdi3>
     f6c:	1027883a 	mov	r19,r2
     f70:	10c4b03a 	or	r2,r2,r3
     f74:	1823883a 	mov	r17,r3
     f78:	103fef1e 	bne	r2,zero,f38 <__alt_data_end+0xfffd0f38>
     f7c:	d8c02817 	ldw	r3,160(sp)
     f80:	dc402917 	ldw	r17,164(sp)
     f84:	b011883a 	mov	r8,r22
     f88:	1c07c83a 	sub	r3,r3,r16
     f8c:	d8c02b15 	stw	r3,172(sp)
     f90:	00005f06 	br	1110 <___vfprintf_internal_r+0x75c>
     f94:	8025883a 	mov	r18,r16
     f98:	dc002903 	ldbu	r16,164(sp)
     f9c:	e011883a 	mov	r8,fp
     fa0:	84003fcc 	andi	r16,r16,255
     fa4:	80071e1e 	bne	r16,zero,2c20 <___vfprintf_internal_r+0x226c>
     fa8:	9080020c 	andi	r2,r18,8
     fac:	1004af26 	beq	r2,zero,226c <___vfprintf_internal_r+0x18b8>
     fb0:	d9002e17 	ldw	r4,184(sp)
     fb4:	d9402e17 	ldw	r5,184(sp)
     fb8:	d8802e17 	ldw	r2,184(sp)
     fbc:	21000017 	ldw	r4,0(r4)
     fc0:	29400117 	ldw	r5,4(r5)
     fc4:	10800204 	addi	r2,r2,8
     fc8:	d9003615 	stw	r4,216(sp)
     fcc:	d9403815 	stw	r5,224(sp)
     fd0:	d8802e15 	stw	r2,184(sp)
     fd4:	d9003617 	ldw	r4,216(sp)
     fd8:	d9403817 	ldw	r5,224(sp)
     fdc:	da003d15 	stw	r8,244(sp)
     fe0:	04000044 	movi	r16,1
     fe4:	00072300 	call	7230 <__fpclassifyd>
     fe8:	da003d17 	ldw	r8,244(sp)
     fec:	1404441e 	bne	r2,r16,2100 <___vfprintf_internal_r+0x174c>
     ff0:	d9003617 	ldw	r4,216(sp)
     ff4:	d9403817 	ldw	r5,224(sp)
     ff8:	000d883a 	mov	r6,zero
     ffc:	000f883a 	mov	r7,zero
    1000:	000c13c0 	call	c13c <__ledf2>
    1004:	da003d17 	ldw	r8,244(sp)
    1008:	1005e316 	blt	r2,zero,2798 <___vfprintf_internal_r+0x1de4>
    100c:	df002783 	ldbu	fp,158(sp)
    1010:	008011c4 	movi	r2,71
    1014:	1445580e 	bge	r2,r17,2578 <___vfprintf_internal_r+0x1bc4>
    1018:	04000074 	movhi	r16,1
    101c:	841f9c04 	addi	r16,r16,32368
    1020:	00c000c4 	movi	r3,3
    1024:	00bfdfc4 	movi	r2,-129
    1028:	d8c02915 	stw	r3,164(sp)
    102c:	90a4703a 	and	r18,r18,r2
    1030:	d8c02b15 	stw	r3,172(sp)
    1034:	d8002a15 	stw	zero,168(sp)
    1038:	d8003215 	stw	zero,200(sp)
    103c:	00003a06 	br	1128 <___vfprintf_internal_r+0x774>
    1040:	84000214 	ori	r16,r16,8
    1044:	ac400007 	ldb	r17,0(r21)
    1048:	003ebc06 	br	b3c <__alt_data_end+0xfffd0b3c>
    104c:	8025883a 	mov	r18,r16
    1050:	dc002903 	ldbu	r16,164(sp)
    1054:	e011883a 	mov	r8,fp
    1058:	84003fcc 	andi	r16,r16,255
    105c:	8007001e 	bne	r16,zero,2c60 <___vfprintf_internal_r+0x22ac>
    1060:	94800414 	ori	r18,r18,16
    1064:	9080080c 	andi	r2,r18,32
    1068:	1002fa26 	beq	r2,zero,1c54 <___vfprintf_internal_r+0x12a0>
    106c:	d9002e17 	ldw	r4,184(sp)
    1070:	d9402a17 	ldw	r5,168(sp)
    1074:	d8002785 	stb	zero,158(sp)
    1078:	20800204 	addi	r2,r4,8
    107c:	24c00017 	ldw	r19,0(r4)
    1080:	25800117 	ldw	r22,4(r4)
    1084:	2804b116 	blt	r5,zero,234c <___vfprintf_internal_r+0x1998>
    1088:	013fdfc4 	movi	r4,-129
    108c:	9d86b03a 	or	r3,r19,r22
    1090:	d8802e15 	stw	r2,184(sp)
    1094:	9124703a 	and	r18,r18,r4
    1098:	1802fb1e 	bne	r3,zero,1c88 <___vfprintf_internal_r+0x12d4>
    109c:	d8c02a17 	ldw	r3,168(sp)
    10a0:	0039883a 	mov	fp,zero
    10a4:	1805e526 	beq	r3,zero,283c <___vfprintf_internal_r+0x1e88>
    10a8:	0027883a 	mov	r19,zero
    10ac:	002d883a 	mov	r22,zero
    10b0:	dc001e04 	addi	r16,sp,120
    10b4:	9806d0fa 	srli	r3,r19,3
    10b8:	b008977a 	slli	r4,r22,29
    10bc:	b02cd0fa 	srli	r22,r22,3
    10c0:	9cc001cc 	andi	r19,r19,7
    10c4:	98800c04 	addi	r2,r19,48
    10c8:	843fffc4 	addi	r16,r16,-1
    10cc:	20e6b03a 	or	r19,r4,r3
    10d0:	80800005 	stb	r2,0(r16)
    10d4:	9d86b03a 	or	r3,r19,r22
    10d8:	183ff61e 	bne	r3,zero,10b4 <__alt_data_end+0xfffd10b4>
    10dc:	90c0004c 	andi	r3,r18,1
    10e0:	18014126 	beq	r3,zero,15e8 <___vfprintf_internal_r+0xc34>
    10e4:	10803fcc 	andi	r2,r2,255
    10e8:	1080201c 	xori	r2,r2,128
    10ec:	10bfe004 	addi	r2,r2,-128
    10f0:	00c00c04 	movi	r3,48
    10f4:	10c13c26 	beq	r2,r3,15e8 <___vfprintf_internal_r+0xc34>
    10f8:	80ffffc5 	stb	r3,-1(r16)
    10fc:	d8c02817 	ldw	r3,160(sp)
    1100:	80bfffc4 	addi	r2,r16,-1
    1104:	1021883a 	mov	r16,r2
    1108:	1887c83a 	sub	r3,r3,r2
    110c:	d8c02b15 	stw	r3,172(sp)
    1110:	d8802b17 	ldw	r2,172(sp)
    1114:	d9002a17 	ldw	r4,168(sp)
    1118:	1100010e 	bge	r2,r4,1120 <___vfprintf_internal_r+0x76c>
    111c:	2005883a 	mov	r2,r4
    1120:	d8802915 	stw	r2,164(sp)
    1124:	d8003215 	stw	zero,200(sp)
    1128:	e7003fcc 	andi	fp,fp,255
    112c:	e700201c 	xori	fp,fp,128
    1130:	e73fe004 	addi	fp,fp,-128
    1134:	e0000326 	beq	fp,zero,1144 <___vfprintf_internal_r+0x790>
    1138:	d8c02917 	ldw	r3,164(sp)
    113c:	18c00044 	addi	r3,r3,1
    1140:	d8c02915 	stw	r3,164(sp)
    1144:	90c0008c 	andi	r3,r18,2
    1148:	d8c02c15 	stw	r3,176(sp)
    114c:	18000326 	beq	r3,zero,115c <___vfprintf_internal_r+0x7a8>
    1150:	d8c02917 	ldw	r3,164(sp)
    1154:	18c00084 	addi	r3,r3,2
    1158:	d8c02915 	stw	r3,164(sp)
    115c:	90c0210c 	andi	r3,r18,132
    1160:	d8c03015 	stw	r3,192(sp)
    1164:	1801c51e 	bne	r3,zero,187c <___vfprintf_internal_r+0xec8>
    1168:	d9003117 	ldw	r4,196(sp)
    116c:	d8c02917 	ldw	r3,164(sp)
    1170:	20e7c83a 	sub	r19,r4,r3
    1174:	04c1c10e 	bge	zero,r19,187c <___vfprintf_internal_r+0xec8>
    1178:	02400404 	movi	r9,16
    117c:	d8c02017 	ldw	r3,128(sp)
    1180:	d8801f17 	ldw	r2,124(sp)
    1184:	4cc52f0e 	bge	r9,r19,2644 <___vfprintf_internal_r+0x1c90>
    1188:	01400074 	movhi	r5,1
    118c:	295faf84 	addi	r5,r5,32446
    1190:	dc403b15 	stw	r17,236(sp)
    1194:	d9403515 	stw	r5,212(sp)
    1198:	9823883a 	mov	r17,r19
    119c:	482d883a 	mov	r22,r9
    11a0:	9027883a 	mov	r19,r18
    11a4:	070001c4 	movi	fp,7
    11a8:	8025883a 	mov	r18,r16
    11ac:	dc002d17 	ldw	r16,180(sp)
    11b0:	00000306 	br	11c0 <___vfprintf_internal_r+0x80c>
    11b4:	8c7ffc04 	addi	r17,r17,-16
    11b8:	42000204 	addi	r8,r8,8
    11bc:	b440130e 	bge	r22,r17,120c <___vfprintf_internal_r+0x858>
    11c0:	01000074 	movhi	r4,1
    11c4:	18c00404 	addi	r3,r3,16
    11c8:	10800044 	addi	r2,r2,1
    11cc:	211faf84 	addi	r4,r4,32446
    11d0:	41000015 	stw	r4,0(r8)
    11d4:	45800115 	stw	r22,4(r8)
    11d8:	d8c02015 	stw	r3,128(sp)
    11dc:	d8801f15 	stw	r2,124(sp)
    11e0:	e0bff40e 	bge	fp,r2,11b4 <__alt_data_end+0xfffd11b4>
    11e4:	d9801e04 	addi	r6,sp,120
    11e8:	b80b883a 	mov	r5,r23
    11ec:	8009883a 	mov	r4,r16
    11f0:	00076a40 	call	76a4 <__sprint_r>
    11f4:	103ef31e 	bne	r2,zero,dc4 <__alt_data_end+0xfffd0dc4>
    11f8:	8c7ffc04 	addi	r17,r17,-16
    11fc:	d8c02017 	ldw	r3,128(sp)
    1200:	d8801f17 	ldw	r2,124(sp)
    1204:	da000404 	addi	r8,sp,16
    1208:	b47fed16 	blt	r22,r17,11c0 <__alt_data_end+0xfffd11c0>
    120c:	9021883a 	mov	r16,r18
    1210:	9825883a 	mov	r18,r19
    1214:	8827883a 	mov	r19,r17
    1218:	dc403b17 	ldw	r17,236(sp)
    121c:	d9403517 	ldw	r5,212(sp)
    1220:	98c7883a 	add	r3,r19,r3
    1224:	10800044 	addi	r2,r2,1
    1228:	41400015 	stw	r5,0(r8)
    122c:	44c00115 	stw	r19,4(r8)
    1230:	d8c02015 	stw	r3,128(sp)
    1234:	d8801f15 	stw	r2,124(sp)
    1238:	010001c4 	movi	r4,7
    123c:	2082c516 	blt	r4,r2,1d54 <___vfprintf_internal_r+0x13a0>
    1240:	df002787 	ldb	fp,158(sp)
    1244:	42000204 	addi	r8,r8,8
    1248:	e0000c26 	beq	fp,zero,127c <___vfprintf_internal_r+0x8c8>
    124c:	d8801f17 	ldw	r2,124(sp)
    1250:	d9002784 	addi	r4,sp,158
    1254:	18c00044 	addi	r3,r3,1
    1258:	10800044 	addi	r2,r2,1
    125c:	41000015 	stw	r4,0(r8)
    1260:	01000044 	movi	r4,1
    1264:	41000115 	stw	r4,4(r8)
    1268:	d8c02015 	stw	r3,128(sp)
    126c:	d8801f15 	stw	r2,124(sp)
    1270:	010001c4 	movi	r4,7
    1274:	20825e16 	blt	r4,r2,1bf0 <___vfprintf_internal_r+0x123c>
    1278:	42000204 	addi	r8,r8,8
    127c:	d8802c17 	ldw	r2,176(sp)
    1280:	10000c26 	beq	r2,zero,12b4 <___vfprintf_internal_r+0x900>
    1284:	d8801f17 	ldw	r2,124(sp)
    1288:	d9002704 	addi	r4,sp,156
    128c:	18c00084 	addi	r3,r3,2
    1290:	10800044 	addi	r2,r2,1
    1294:	41000015 	stw	r4,0(r8)
    1298:	01000084 	movi	r4,2
    129c:	41000115 	stw	r4,4(r8)
    12a0:	d8c02015 	stw	r3,128(sp)
    12a4:	d8801f15 	stw	r2,124(sp)
    12a8:	010001c4 	movi	r4,7
    12ac:	20825816 	blt	r4,r2,1c10 <___vfprintf_internal_r+0x125c>
    12b0:	42000204 	addi	r8,r8,8
    12b4:	d9003017 	ldw	r4,192(sp)
    12b8:	00802004 	movi	r2,128
    12bc:	2081bb26 	beq	r4,r2,19ac <___vfprintf_internal_r+0xff8>
    12c0:	d9402a17 	ldw	r5,168(sp)
    12c4:	d8802b17 	ldw	r2,172(sp)
    12c8:	28adc83a 	sub	r22,r5,r2
    12cc:	0580310e 	bge	zero,r22,1394 <___vfprintf_internal_r+0x9e0>
    12d0:	07000404 	movi	fp,16
    12d4:	d8801f17 	ldw	r2,124(sp)
    12d8:	e584360e 	bge	fp,r22,23b4 <___vfprintf_internal_r+0x1a00>
    12dc:	01400074 	movhi	r5,1
    12e0:	295fab84 	addi	r5,r5,32430
    12e4:	dc402a15 	stw	r17,168(sp)
    12e8:	d9402c15 	stw	r5,176(sp)
    12ec:	b023883a 	mov	r17,r22
    12f0:	04c001c4 	movi	r19,7
    12f4:	a82d883a 	mov	r22,r21
    12f8:	902b883a 	mov	r21,r18
    12fc:	8025883a 	mov	r18,r16
    1300:	dc002d17 	ldw	r16,180(sp)
    1304:	00000306 	br	1314 <___vfprintf_internal_r+0x960>
    1308:	8c7ffc04 	addi	r17,r17,-16
    130c:	42000204 	addi	r8,r8,8
    1310:	e440110e 	bge	fp,r17,1358 <___vfprintf_internal_r+0x9a4>
    1314:	18c00404 	addi	r3,r3,16
    1318:	10800044 	addi	r2,r2,1
    131c:	45000015 	stw	r20,0(r8)
    1320:	47000115 	stw	fp,4(r8)
    1324:	d8c02015 	stw	r3,128(sp)
    1328:	d8801f15 	stw	r2,124(sp)
    132c:	98bff60e 	bge	r19,r2,1308 <__alt_data_end+0xfffd1308>
    1330:	d9801e04 	addi	r6,sp,120
    1334:	b80b883a 	mov	r5,r23
    1338:	8009883a 	mov	r4,r16
    133c:	00076a40 	call	76a4 <__sprint_r>
    1340:	103ea01e 	bne	r2,zero,dc4 <__alt_data_end+0xfffd0dc4>
    1344:	8c7ffc04 	addi	r17,r17,-16
    1348:	d8c02017 	ldw	r3,128(sp)
    134c:	d8801f17 	ldw	r2,124(sp)
    1350:	da000404 	addi	r8,sp,16
    1354:	e47fef16 	blt	fp,r17,1314 <__alt_data_end+0xfffd1314>
    1358:	9021883a 	mov	r16,r18
    135c:	a825883a 	mov	r18,r21
    1360:	b02b883a 	mov	r21,r22
    1364:	882d883a 	mov	r22,r17
    1368:	dc402a17 	ldw	r17,168(sp)
    136c:	d9002c17 	ldw	r4,176(sp)
    1370:	1d87883a 	add	r3,r3,r22
    1374:	10800044 	addi	r2,r2,1
    1378:	41000015 	stw	r4,0(r8)
    137c:	45800115 	stw	r22,4(r8)
    1380:	d8c02015 	stw	r3,128(sp)
    1384:	d8801f15 	stw	r2,124(sp)
    1388:	010001c4 	movi	r4,7
    138c:	20821016 	blt	r4,r2,1bd0 <___vfprintf_internal_r+0x121c>
    1390:	42000204 	addi	r8,r8,8
    1394:	9080400c 	andi	r2,r18,256
    1398:	10013a1e 	bne	r2,zero,1884 <___vfprintf_internal_r+0xed0>
    139c:	d9402b17 	ldw	r5,172(sp)
    13a0:	d8801f17 	ldw	r2,124(sp)
    13a4:	44000015 	stw	r16,0(r8)
    13a8:	1947883a 	add	r3,r3,r5
    13ac:	10800044 	addi	r2,r2,1
    13b0:	41400115 	stw	r5,4(r8)
    13b4:	d8c02015 	stw	r3,128(sp)
    13b8:	d8801f15 	stw	r2,124(sp)
    13bc:	010001c4 	movi	r4,7
    13c0:	2081f516 	blt	r4,r2,1b98 <___vfprintf_internal_r+0x11e4>
    13c4:	42000204 	addi	r8,r8,8
    13c8:	9480010c 	andi	r18,r18,4
    13cc:	90003226 	beq	r18,zero,1498 <___vfprintf_internal_r+0xae4>
    13d0:	d9403117 	ldw	r5,196(sp)
    13d4:	d8802917 	ldw	r2,164(sp)
    13d8:	28a1c83a 	sub	r16,r5,r2
    13dc:	04002e0e 	bge	zero,r16,1498 <___vfprintf_internal_r+0xae4>
    13e0:	04400404 	movi	r17,16
    13e4:	d8801f17 	ldw	r2,124(sp)
    13e8:	8c04c40e 	bge	r17,r16,26fc <___vfprintf_internal_r+0x1d48>
    13ec:	01400074 	movhi	r5,1
    13f0:	295faf84 	addi	r5,r5,32446
    13f4:	d9403515 	stw	r5,212(sp)
    13f8:	048001c4 	movi	r18,7
    13fc:	dcc02d17 	ldw	r19,180(sp)
    1400:	00000306 	br	1410 <___vfprintf_internal_r+0xa5c>
    1404:	843ffc04 	addi	r16,r16,-16
    1408:	42000204 	addi	r8,r8,8
    140c:	8c00130e 	bge	r17,r16,145c <___vfprintf_internal_r+0xaa8>
    1410:	01000074 	movhi	r4,1
    1414:	18c00404 	addi	r3,r3,16
    1418:	10800044 	addi	r2,r2,1
    141c:	211faf84 	addi	r4,r4,32446
    1420:	41000015 	stw	r4,0(r8)
    1424:	44400115 	stw	r17,4(r8)
    1428:	d8c02015 	stw	r3,128(sp)
    142c:	d8801f15 	stw	r2,124(sp)
    1430:	90bff40e 	bge	r18,r2,1404 <__alt_data_end+0xfffd1404>
    1434:	d9801e04 	addi	r6,sp,120
    1438:	b80b883a 	mov	r5,r23
    143c:	9809883a 	mov	r4,r19
    1440:	00076a40 	call	76a4 <__sprint_r>
    1444:	103e5f1e 	bne	r2,zero,dc4 <__alt_data_end+0xfffd0dc4>
    1448:	843ffc04 	addi	r16,r16,-16
    144c:	d8c02017 	ldw	r3,128(sp)
    1450:	d8801f17 	ldw	r2,124(sp)
    1454:	da000404 	addi	r8,sp,16
    1458:	8c3fed16 	blt	r17,r16,1410 <__alt_data_end+0xfffd1410>
    145c:	d9403517 	ldw	r5,212(sp)
    1460:	1c07883a 	add	r3,r3,r16
    1464:	10800044 	addi	r2,r2,1
    1468:	41400015 	stw	r5,0(r8)
    146c:	44000115 	stw	r16,4(r8)
    1470:	d8c02015 	stw	r3,128(sp)
    1474:	d8801f15 	stw	r2,124(sp)
    1478:	010001c4 	movi	r4,7
    147c:	2080060e 	bge	r4,r2,1498 <___vfprintf_internal_r+0xae4>
    1480:	d9002d17 	ldw	r4,180(sp)
    1484:	d9801e04 	addi	r6,sp,120
    1488:	b80b883a 	mov	r5,r23
    148c:	00076a40 	call	76a4 <__sprint_r>
    1490:	103e4c1e 	bne	r2,zero,dc4 <__alt_data_end+0xfffd0dc4>
    1494:	d8c02017 	ldw	r3,128(sp)
    1498:	d8803117 	ldw	r2,196(sp)
    149c:	d9002917 	ldw	r4,164(sp)
    14a0:	1100010e 	bge	r2,r4,14a8 <___vfprintf_internal_r+0xaf4>
    14a4:	2005883a 	mov	r2,r4
    14a8:	d9402f17 	ldw	r5,188(sp)
    14ac:	288b883a 	add	r5,r5,r2
    14b0:	d9402f15 	stw	r5,188(sp)
    14b4:	1801c01e 	bne	r3,zero,1bb8 <___vfprintf_internal_r+0x1204>
    14b8:	a8800007 	ldb	r2,0(r21)
    14bc:	d8001f15 	stw	zero,124(sp)
    14c0:	da000404 	addi	r8,sp,16
    14c4:	103d751e 	bne	r2,zero,a9c <__alt_data_end+0xfffd0a9c>
    14c8:	a823883a 	mov	r17,r21
    14cc:	003d8b06 	br	afc <__alt_data_end+0xfffd0afc>
    14d0:	8025883a 	mov	r18,r16
    14d4:	dc002903 	ldbu	r16,164(sp)
    14d8:	e011883a 	mov	r8,fp
    14dc:	84003fcc 	andi	r16,r16,255
    14e0:	8005e51e 	bne	r16,zero,2c78 <___vfprintf_internal_r+0x22c4>
    14e4:	94800414 	ori	r18,r18,16
    14e8:	9080080c 	andi	r2,r18,32
    14ec:	10022b26 	beq	r2,zero,1d9c <___vfprintf_internal_r+0x13e8>
    14f0:	d9002e17 	ldw	r4,184(sp)
    14f4:	d9402a17 	ldw	r5,168(sp)
    14f8:	d8002785 	stb	zero,158(sp)
    14fc:	20c00204 	addi	r3,r4,8
    1500:	24c00017 	ldw	r19,0(r4)
    1504:	25800117 	ldw	r22,4(r4)
    1508:	28042e16 	blt	r5,zero,25c4 <___vfprintf_internal_r+0x1c10>
    150c:	013fdfc4 	movi	r4,-129
    1510:	9d84b03a 	or	r2,r19,r22
    1514:	d8c02e15 	stw	r3,184(sp)
    1518:	9124703a 	and	r18,r18,r4
    151c:	0039883a 	mov	fp,zero
    1520:	103e801e 	bne	r2,zero,f24 <__alt_data_end+0xfffd0f24>
    1524:	d9002a17 	ldw	r4,168(sp)
    1528:	2002e01e 	bne	r4,zero,20ac <___vfprintf_internal_r+0x16f8>
    152c:	d8002a15 	stw	zero,168(sp)
    1530:	d8002b15 	stw	zero,172(sp)
    1534:	dc001e04 	addi	r16,sp,120
    1538:	003ef506 	br	1110 <__alt_data_end+0xfffd1110>
    153c:	8025883a 	mov	r18,r16
    1540:	dc002903 	ldbu	r16,164(sp)
    1544:	e011883a 	mov	r8,fp
    1548:	84003fcc 	andi	r16,r16,255
    154c:	8005ba1e 	bne	r16,zero,2c38 <___vfprintf_internal_r+0x2284>
    1550:	01000074 	movhi	r4,1
    1554:	211f9f04 	addi	r4,r4,32380
    1558:	d9003915 	stw	r4,228(sp)
    155c:	9080080c 	andi	r2,r18,32
    1560:	10006126 	beq	r2,zero,16e8 <___vfprintf_internal_r+0xd34>
    1564:	d9402e17 	ldw	r5,184(sp)
    1568:	2cc00017 	ldw	r19,0(r5)
    156c:	2d800117 	ldw	r22,4(r5)
    1570:	29400204 	addi	r5,r5,8
    1574:	d9402e15 	stw	r5,184(sp)
    1578:	9080004c 	andi	r2,r18,1
    157c:	1001ac26 	beq	r2,zero,1c30 <___vfprintf_internal_r+0x127c>
    1580:	9d84b03a 	or	r2,r19,r22
    1584:	10038526 	beq	r2,zero,239c <___vfprintf_internal_r+0x19e8>
    1588:	d8c02a17 	ldw	r3,168(sp)
    158c:	00800c04 	movi	r2,48
    1590:	d8802705 	stb	r2,156(sp)
    1594:	dc402745 	stb	r17,157(sp)
    1598:	d8002785 	stb	zero,158(sp)
    159c:	90800094 	ori	r2,r18,2
    15a0:	18047916 	blt	r3,zero,2788 <___vfprintf_internal_r+0x1dd4>
    15a4:	00bfdfc4 	movi	r2,-129
    15a8:	90a4703a 	and	r18,r18,r2
    15ac:	94800094 	ori	r18,r18,2
    15b0:	0039883a 	mov	fp,zero
    15b4:	d9003917 	ldw	r4,228(sp)
    15b8:	dc001e04 	addi	r16,sp,120
    15bc:	988003cc 	andi	r2,r19,15
    15c0:	b006973a 	slli	r3,r22,28
    15c4:	2085883a 	add	r2,r4,r2
    15c8:	9826d13a 	srli	r19,r19,4
    15cc:	10800003 	ldbu	r2,0(r2)
    15d0:	b02cd13a 	srli	r22,r22,4
    15d4:	843fffc4 	addi	r16,r16,-1
    15d8:	1ce6b03a 	or	r19,r3,r19
    15dc:	80800005 	stb	r2,0(r16)
    15e0:	9d84b03a 	or	r2,r19,r22
    15e4:	103ff51e 	bne	r2,zero,15bc <__alt_data_end+0xfffd15bc>
    15e8:	d8c02817 	ldw	r3,160(sp)
    15ec:	1c07c83a 	sub	r3,r3,r16
    15f0:	d8c02b15 	stw	r3,172(sp)
    15f4:	003ec606 	br	1110 <__alt_data_end+0xfffd1110>
    15f8:	8025883a 	mov	r18,r16
    15fc:	dc002903 	ldbu	r16,164(sp)
    1600:	e011883a 	mov	r8,fp
    1604:	84003fcc 	andi	r16,r16,255
    1608:	803e9626 	beq	r16,zero,1064 <__alt_data_end+0xfffd1064>
    160c:	d8c02b03 	ldbu	r3,172(sp)
    1610:	d8c02785 	stb	r3,158(sp)
    1614:	003e9306 	br	1064 <__alt_data_end+0xfffd1064>
    1618:	00c00044 	movi	r3,1
    161c:	d8c02905 	stb	r3,164(sp)
    1620:	00c00ac4 	movi	r3,43
    1624:	d8c02b05 	stb	r3,172(sp)
    1628:	ac400007 	ldb	r17,0(r21)
    162c:	003d4306 	br	b3c <__alt_data_end+0xfffd0b3c>
    1630:	84000814 	ori	r16,r16,32
    1634:	ac400007 	ldb	r17,0(r21)
    1638:	003d4006 	br	b3c <__alt_data_end+0xfffd0b3c>
    163c:	d8802e17 	ldw	r2,184(sp)
    1640:	8025883a 	mov	r18,r16
    1644:	d8002785 	stb	zero,158(sp)
    1648:	14000017 	ldw	r16,0(r2)
    164c:	e011883a 	mov	r8,fp
    1650:	14c00104 	addi	r19,r2,4
    1654:	80042d26 	beq	r16,zero,270c <___vfprintf_internal_r+0x1d58>
    1658:	d8c02a17 	ldw	r3,168(sp)
    165c:	1803e416 	blt	r3,zero,25f0 <___vfprintf_internal_r+0x1c3c>
    1660:	180d883a 	mov	r6,r3
    1664:	000b883a 	mov	r5,zero
    1668:	8009883a 	mov	r4,r16
    166c:	df003d15 	stw	fp,244(sp)
    1670:	0005e240 	call	5e24 <memchr>
    1674:	da003d17 	ldw	r8,244(sp)
    1678:	10046826 	beq	r2,zero,281c <___vfprintf_internal_r+0x1e68>
    167c:	1405c83a 	sub	r2,r2,r16
    1680:	d8802b15 	stw	r2,172(sp)
    1684:	1003e016 	blt	r2,zero,2608 <___vfprintf_internal_r+0x1c54>
    1688:	df002783 	ldbu	fp,158(sp)
    168c:	d8802915 	stw	r2,164(sp)
    1690:	dcc02e15 	stw	r19,184(sp)
    1694:	d8002a15 	stw	zero,168(sp)
    1698:	d8003215 	stw	zero,200(sp)
    169c:	003ea206 	br	1128 <__alt_data_end+0xfffd1128>
    16a0:	8025883a 	mov	r18,r16
    16a4:	dc002903 	ldbu	r16,164(sp)
    16a8:	e011883a 	mov	r8,fp
    16ac:	84003fcc 	andi	r16,r16,255
    16b0:	803f8d26 	beq	r16,zero,14e8 <__alt_data_end+0xfffd14e8>
    16b4:	d8c02b03 	ldbu	r3,172(sp)
    16b8:	d8c02785 	stb	r3,158(sp)
    16bc:	003f8a06 	br	14e8 <__alt_data_end+0xfffd14e8>
    16c0:	8025883a 	mov	r18,r16
    16c4:	dc002903 	ldbu	r16,164(sp)
    16c8:	e011883a 	mov	r8,fp
    16cc:	84003fcc 	andi	r16,r16,255
    16d0:	8005661e 	bne	r16,zero,2c6c <___vfprintf_internal_r+0x22b8>
    16d4:	01000074 	movhi	r4,1
    16d8:	211fa404 	addi	r4,r4,32400
    16dc:	d9003915 	stw	r4,228(sp)
    16e0:	9080080c 	andi	r2,r18,32
    16e4:	103f9f1e 	bne	r2,zero,1564 <__alt_data_end+0xfffd1564>
    16e8:	9080040c 	andi	r2,r18,16
    16ec:	1002eb26 	beq	r2,zero,229c <___vfprintf_internal_r+0x18e8>
    16f0:	d8802e17 	ldw	r2,184(sp)
    16f4:	002d883a 	mov	r22,zero
    16f8:	14c00017 	ldw	r19,0(r2)
    16fc:	10800104 	addi	r2,r2,4
    1700:	d8802e15 	stw	r2,184(sp)
    1704:	003f9c06 	br	1578 <__alt_data_end+0xfffd1578>
    1708:	d8802b07 	ldb	r2,172(sp)
    170c:	1002e11e 	bne	r2,zero,2294 <___vfprintf_internal_r+0x18e0>
    1710:	00c00044 	movi	r3,1
    1714:	d8c02905 	stb	r3,164(sp)
    1718:	00c00804 	movi	r3,32
    171c:	d8c02b05 	stb	r3,172(sp)
    1720:	ac400007 	ldb	r17,0(r21)
    1724:	003d0506 	br	b3c <__alt_data_end+0xfffd0b3c>
    1728:	84000054 	ori	r16,r16,1
    172c:	ac400007 	ldb	r17,0(r21)
    1730:	003d0206 	br	b3c <__alt_data_end+0xfffd0b3c>
    1734:	8025883a 	mov	r18,r16
    1738:	dc002903 	ldbu	r16,164(sp)
    173c:	e011883a 	mov	r8,fp
    1740:	84003fcc 	andi	r16,r16,255
    1744:	803de726 	beq	r16,zero,ee4 <__alt_data_end+0xfffd0ee4>
    1748:	d8c02b03 	ldbu	r3,172(sp)
    174c:	d8c02785 	stb	r3,158(sp)
    1750:	003de406 	br	ee4 <__alt_data_end+0xfffd0ee4>
    1754:	84001014 	ori	r16,r16,64
    1758:	ac400007 	ldb	r17,0(r21)
    175c:	003cf706 	br	b3c <__alt_data_end+0xfffd0b3c>
    1760:	ac400007 	ldb	r17,0(r21)
    1764:	00801b04 	movi	r2,108
    1768:	88838f26 	beq	r17,r2,25a8 <___vfprintf_internal_r+0x1bf4>
    176c:	84000414 	ori	r16,r16,16
    1770:	003cf206 	br	b3c <__alt_data_end+0xfffd0b3c>
    1774:	8025883a 	mov	r18,r16
    1778:	dc002903 	ldbu	r16,164(sp)
    177c:	e011883a 	mov	r8,fp
    1780:	84003fcc 	andi	r16,r16,255
    1784:	80053f1e 	bne	r16,zero,2c84 <___vfprintf_internal_r+0x22d0>
    1788:	9080080c 	andi	r2,r18,32
    178c:	1002d226 	beq	r2,zero,22d8 <___vfprintf_internal_r+0x1924>
    1790:	d9002e17 	ldw	r4,184(sp)
    1794:	d9402f17 	ldw	r5,188(sp)
    1798:	20800017 	ldw	r2,0(r4)
    179c:	2807d7fa 	srai	r3,r5,31
    17a0:	21000104 	addi	r4,r4,4
    17a4:	d9002e15 	stw	r4,184(sp)
    17a8:	11400015 	stw	r5,0(r2)
    17ac:	10c00115 	stw	r3,4(r2)
    17b0:	003cb806 	br	a94 <__alt_data_end+0xfffd0a94>
    17b4:	d8c02e17 	ldw	r3,184(sp)
    17b8:	d9002e17 	ldw	r4,184(sp)
    17bc:	8025883a 	mov	r18,r16
    17c0:	18800017 	ldw	r2,0(r3)
    17c4:	21000104 	addi	r4,r4,4
    17c8:	00c00044 	movi	r3,1
    17cc:	e011883a 	mov	r8,fp
    17d0:	d8c02915 	stw	r3,164(sp)
    17d4:	d8002785 	stb	zero,158(sp)
    17d8:	d8801405 	stb	r2,80(sp)
    17dc:	d9002e15 	stw	r4,184(sp)
    17e0:	d8c02b15 	stw	r3,172(sp)
    17e4:	d8002a15 	stw	zero,168(sp)
    17e8:	d8003215 	stw	zero,200(sp)
    17ec:	dc001404 	addi	r16,sp,80
    17f0:	0039883a 	mov	fp,zero
    17f4:	003e5306 	br	1144 <__alt_data_end+0xfffd1144>
    17f8:	01000074 	movhi	r4,1
    17fc:	211fa404 	addi	r4,r4,32400
    1800:	0039883a 	mov	fp,zero
    1804:	d9003915 	stw	r4,228(sp)
    1808:	04401e04 	movi	r17,120
    180c:	003f6906 	br	15b4 <__alt_data_end+0xfffd15b4>
    1810:	8025883a 	mov	r18,r16
    1814:	dc002903 	ldbu	r16,164(sp)
    1818:	e011883a 	mov	r8,fp
    181c:	84003fcc 	andi	r16,r16,255
    1820:	8005081e 	bne	r16,zero,2c44 <___vfprintf_internal_r+0x2290>
    1824:	883d6126 	beq	r17,zero,dac <__alt_data_end+0xfffd0dac>
    1828:	00c00044 	movi	r3,1
    182c:	d8c02915 	stw	r3,164(sp)
    1830:	dc401405 	stb	r17,80(sp)
    1834:	d8002785 	stb	zero,158(sp)
    1838:	003fe906 	br	17e0 <__alt_data_end+0xfffd17e0>
    183c:	01400074 	movhi	r5,1
    1840:	295fa404 	addi	r5,r5,32400
    1844:	d9403915 	stw	r5,228(sp)
    1848:	d8c02e15 	stw	r3,184(sp)
    184c:	1025883a 	mov	r18,r2
    1850:	04401e04 	movi	r17,120
    1854:	9d84b03a 	or	r2,r19,r22
    1858:	1000fc1e 	bne	r2,zero,1c4c <___vfprintf_internal_r+0x1298>
    185c:	0039883a 	mov	fp,zero
    1860:	00800084 	movi	r2,2
    1864:	10803fcc 	andi	r2,r2,255
    1868:	00c00044 	movi	r3,1
    186c:	10c20f26 	beq	r2,r3,20ac <___vfprintf_internal_r+0x16f8>
    1870:	00c00084 	movi	r3,2
    1874:	10fd3326 	beq	r2,r3,d44 <__alt_data_end+0xfffd0d44>
    1878:	003e0b06 	br	10a8 <__alt_data_end+0xfffd10a8>
    187c:	d8c02017 	ldw	r3,128(sp)
    1880:	003e7106 	br	1248 <__alt_data_end+0xfffd1248>
    1884:	00801944 	movi	r2,101
    1888:	14407e0e 	bge	r2,r17,1a84 <___vfprintf_internal_r+0x10d0>
    188c:	d9003617 	ldw	r4,216(sp)
    1890:	d9403817 	ldw	r5,224(sp)
    1894:	000d883a 	mov	r6,zero
    1898:	000f883a 	mov	r7,zero
    189c:	d8c03c15 	stw	r3,240(sp)
    18a0:	da003d15 	stw	r8,244(sp)
    18a4:	000bfd80 	call	bfd8 <__eqdf2>
    18a8:	d8c03c17 	ldw	r3,240(sp)
    18ac:	da003d17 	ldw	r8,244(sp)
    18b0:	1000f71e 	bne	r2,zero,1c90 <___vfprintf_internal_r+0x12dc>
    18b4:	d8801f17 	ldw	r2,124(sp)
    18b8:	01000074 	movhi	r4,1
    18bc:	211fab04 	addi	r4,r4,32428
    18c0:	18c00044 	addi	r3,r3,1
    18c4:	10800044 	addi	r2,r2,1
    18c8:	41000015 	stw	r4,0(r8)
    18cc:	01000044 	movi	r4,1
    18d0:	41000115 	stw	r4,4(r8)
    18d4:	d8c02015 	stw	r3,128(sp)
    18d8:	d8801f15 	stw	r2,124(sp)
    18dc:	010001c4 	movi	r4,7
    18e0:	2082b816 	blt	r4,r2,23c4 <___vfprintf_internal_r+0x1a10>
    18e4:	42000204 	addi	r8,r8,8
    18e8:	d8802617 	ldw	r2,152(sp)
    18ec:	d9403317 	ldw	r5,204(sp)
    18f0:	11400216 	blt	r2,r5,18fc <___vfprintf_internal_r+0xf48>
    18f4:	9080004c 	andi	r2,r18,1
    18f8:	103eb326 	beq	r2,zero,13c8 <__alt_data_end+0xfffd13c8>
    18fc:	d8803717 	ldw	r2,220(sp)
    1900:	d9003417 	ldw	r4,208(sp)
    1904:	d9403717 	ldw	r5,220(sp)
    1908:	1887883a 	add	r3,r3,r2
    190c:	d8801f17 	ldw	r2,124(sp)
    1910:	41000015 	stw	r4,0(r8)
    1914:	41400115 	stw	r5,4(r8)
    1918:	10800044 	addi	r2,r2,1
    191c:	d8c02015 	stw	r3,128(sp)
    1920:	d8801f15 	stw	r2,124(sp)
    1924:	010001c4 	movi	r4,7
    1928:	20832916 	blt	r4,r2,25d0 <___vfprintf_internal_r+0x1c1c>
    192c:	42000204 	addi	r8,r8,8
    1930:	d8803317 	ldw	r2,204(sp)
    1934:	143fffc4 	addi	r16,r2,-1
    1938:	043ea30e 	bge	zero,r16,13c8 <__alt_data_end+0xfffd13c8>
    193c:	04400404 	movi	r17,16
    1940:	d8801f17 	ldw	r2,124(sp)
    1944:	8c00880e 	bge	r17,r16,1b68 <___vfprintf_internal_r+0x11b4>
    1948:	01400074 	movhi	r5,1
    194c:	295fab84 	addi	r5,r5,32430
    1950:	d9402c15 	stw	r5,176(sp)
    1954:	058001c4 	movi	r22,7
    1958:	dcc02d17 	ldw	r19,180(sp)
    195c:	00000306 	br	196c <___vfprintf_internal_r+0xfb8>
    1960:	42000204 	addi	r8,r8,8
    1964:	843ffc04 	addi	r16,r16,-16
    1968:	8c00820e 	bge	r17,r16,1b74 <___vfprintf_internal_r+0x11c0>
    196c:	18c00404 	addi	r3,r3,16
    1970:	10800044 	addi	r2,r2,1
    1974:	45000015 	stw	r20,0(r8)
    1978:	44400115 	stw	r17,4(r8)
    197c:	d8c02015 	stw	r3,128(sp)
    1980:	d8801f15 	stw	r2,124(sp)
    1984:	b0bff60e 	bge	r22,r2,1960 <__alt_data_end+0xfffd1960>
    1988:	d9801e04 	addi	r6,sp,120
    198c:	b80b883a 	mov	r5,r23
    1990:	9809883a 	mov	r4,r19
    1994:	00076a40 	call	76a4 <__sprint_r>
    1998:	103d0a1e 	bne	r2,zero,dc4 <__alt_data_end+0xfffd0dc4>
    199c:	d8c02017 	ldw	r3,128(sp)
    19a0:	d8801f17 	ldw	r2,124(sp)
    19a4:	da000404 	addi	r8,sp,16
    19a8:	003fee06 	br	1964 <__alt_data_end+0xfffd1964>
    19ac:	d9403117 	ldw	r5,196(sp)
    19b0:	d8802917 	ldw	r2,164(sp)
    19b4:	28adc83a 	sub	r22,r5,r2
    19b8:	05be410e 	bge	zero,r22,12c0 <__alt_data_end+0xfffd12c0>
    19bc:	07000404 	movi	fp,16
    19c0:	d8801f17 	ldw	r2,124(sp)
    19c4:	e5838f0e 	bge	fp,r22,2804 <___vfprintf_internal_r+0x1e50>
    19c8:	01400074 	movhi	r5,1
    19cc:	295fab84 	addi	r5,r5,32430
    19d0:	dc403015 	stw	r17,192(sp)
    19d4:	d9402c15 	stw	r5,176(sp)
    19d8:	b023883a 	mov	r17,r22
    19dc:	04c001c4 	movi	r19,7
    19e0:	a82d883a 	mov	r22,r21
    19e4:	902b883a 	mov	r21,r18
    19e8:	8025883a 	mov	r18,r16
    19ec:	dc002d17 	ldw	r16,180(sp)
    19f0:	00000306 	br	1a00 <___vfprintf_internal_r+0x104c>
    19f4:	8c7ffc04 	addi	r17,r17,-16
    19f8:	42000204 	addi	r8,r8,8
    19fc:	e440110e 	bge	fp,r17,1a44 <___vfprintf_internal_r+0x1090>
    1a00:	18c00404 	addi	r3,r3,16
    1a04:	10800044 	addi	r2,r2,1
    1a08:	45000015 	stw	r20,0(r8)
    1a0c:	47000115 	stw	fp,4(r8)
    1a10:	d8c02015 	stw	r3,128(sp)
    1a14:	d8801f15 	stw	r2,124(sp)
    1a18:	98bff60e 	bge	r19,r2,19f4 <__alt_data_end+0xfffd19f4>
    1a1c:	d9801e04 	addi	r6,sp,120
    1a20:	b80b883a 	mov	r5,r23
    1a24:	8009883a 	mov	r4,r16
    1a28:	00076a40 	call	76a4 <__sprint_r>
    1a2c:	103ce51e 	bne	r2,zero,dc4 <__alt_data_end+0xfffd0dc4>
    1a30:	8c7ffc04 	addi	r17,r17,-16
    1a34:	d8c02017 	ldw	r3,128(sp)
    1a38:	d8801f17 	ldw	r2,124(sp)
    1a3c:	da000404 	addi	r8,sp,16
    1a40:	e47fef16 	blt	fp,r17,1a00 <__alt_data_end+0xfffd1a00>
    1a44:	9021883a 	mov	r16,r18
    1a48:	a825883a 	mov	r18,r21
    1a4c:	b02b883a 	mov	r21,r22
    1a50:	882d883a 	mov	r22,r17
    1a54:	dc403017 	ldw	r17,192(sp)
    1a58:	d9002c17 	ldw	r4,176(sp)
    1a5c:	1d87883a 	add	r3,r3,r22
    1a60:	10800044 	addi	r2,r2,1
    1a64:	41000015 	stw	r4,0(r8)
    1a68:	45800115 	stw	r22,4(r8)
    1a6c:	d8c02015 	stw	r3,128(sp)
    1a70:	d8801f15 	stw	r2,124(sp)
    1a74:	010001c4 	movi	r4,7
    1a78:	20818e16 	blt	r4,r2,20b4 <___vfprintf_internal_r+0x1700>
    1a7c:	42000204 	addi	r8,r8,8
    1a80:	003e0f06 	br	12c0 <__alt_data_end+0xfffd12c0>
    1a84:	d9403317 	ldw	r5,204(sp)
    1a88:	00800044 	movi	r2,1
    1a8c:	18c00044 	addi	r3,r3,1
    1a90:	1141530e 	bge	r2,r5,1fe0 <___vfprintf_internal_r+0x162c>
    1a94:	dc401f17 	ldw	r17,124(sp)
    1a98:	00800044 	movi	r2,1
    1a9c:	40800115 	stw	r2,4(r8)
    1aa0:	8c400044 	addi	r17,r17,1
    1aa4:	44000015 	stw	r16,0(r8)
    1aa8:	d8c02015 	stw	r3,128(sp)
    1aac:	dc401f15 	stw	r17,124(sp)
    1ab0:	008001c4 	movi	r2,7
    1ab4:	14416b16 	blt	r2,r17,2064 <___vfprintf_internal_r+0x16b0>
    1ab8:	42000204 	addi	r8,r8,8
    1abc:	d8803717 	ldw	r2,220(sp)
    1ac0:	d9003417 	ldw	r4,208(sp)
    1ac4:	8c400044 	addi	r17,r17,1
    1ac8:	10c7883a 	add	r3,r2,r3
    1acc:	40800115 	stw	r2,4(r8)
    1ad0:	41000015 	stw	r4,0(r8)
    1ad4:	d8c02015 	stw	r3,128(sp)
    1ad8:	dc401f15 	stw	r17,124(sp)
    1adc:	008001c4 	movi	r2,7
    1ae0:	14416916 	blt	r2,r17,2088 <___vfprintf_internal_r+0x16d4>
    1ae4:	45800204 	addi	r22,r8,8
    1ae8:	d9003617 	ldw	r4,216(sp)
    1aec:	d9403817 	ldw	r5,224(sp)
    1af0:	000d883a 	mov	r6,zero
    1af4:	000f883a 	mov	r7,zero
    1af8:	d8c03c15 	stw	r3,240(sp)
    1afc:	000bfd80 	call	bfd8 <__eqdf2>
    1b00:	d8c03c17 	ldw	r3,240(sp)
    1b04:	1000bc26 	beq	r2,zero,1df8 <___vfprintf_internal_r+0x1444>
    1b08:	d9403317 	ldw	r5,204(sp)
    1b0c:	84000044 	addi	r16,r16,1
    1b10:	8c400044 	addi	r17,r17,1
    1b14:	28bfffc4 	addi	r2,r5,-1
    1b18:	1887883a 	add	r3,r3,r2
    1b1c:	b0800115 	stw	r2,4(r22)
    1b20:	b4000015 	stw	r16,0(r22)
    1b24:	d8c02015 	stw	r3,128(sp)
    1b28:	dc401f15 	stw	r17,124(sp)
    1b2c:	008001c4 	movi	r2,7
    1b30:	14414316 	blt	r2,r17,2040 <___vfprintf_internal_r+0x168c>
    1b34:	b5800204 	addi	r22,r22,8
    1b38:	d9003a17 	ldw	r4,232(sp)
    1b3c:	df0022c4 	addi	fp,sp,139
    1b40:	8c400044 	addi	r17,r17,1
    1b44:	20c7883a 	add	r3,r4,r3
    1b48:	b7000015 	stw	fp,0(r22)
    1b4c:	b1000115 	stw	r4,4(r22)
    1b50:	d8c02015 	stw	r3,128(sp)
    1b54:	dc401f15 	stw	r17,124(sp)
    1b58:	008001c4 	movi	r2,7
    1b5c:	14400e16 	blt	r2,r17,1b98 <___vfprintf_internal_r+0x11e4>
    1b60:	b2000204 	addi	r8,r22,8
    1b64:	003e1806 	br	13c8 <__alt_data_end+0xfffd13c8>
    1b68:	01000074 	movhi	r4,1
    1b6c:	211fab84 	addi	r4,r4,32430
    1b70:	d9002c15 	stw	r4,176(sp)
    1b74:	d9002c17 	ldw	r4,176(sp)
    1b78:	1c07883a 	add	r3,r3,r16
    1b7c:	44000115 	stw	r16,4(r8)
    1b80:	41000015 	stw	r4,0(r8)
    1b84:	10800044 	addi	r2,r2,1
    1b88:	d8c02015 	stw	r3,128(sp)
    1b8c:	d8801f15 	stw	r2,124(sp)
    1b90:	010001c4 	movi	r4,7
    1b94:	20be0b0e 	bge	r4,r2,13c4 <__alt_data_end+0xfffd13c4>
    1b98:	d9002d17 	ldw	r4,180(sp)
    1b9c:	d9801e04 	addi	r6,sp,120
    1ba0:	b80b883a 	mov	r5,r23
    1ba4:	00076a40 	call	76a4 <__sprint_r>
    1ba8:	103c861e 	bne	r2,zero,dc4 <__alt_data_end+0xfffd0dc4>
    1bac:	d8c02017 	ldw	r3,128(sp)
    1bb0:	da000404 	addi	r8,sp,16
    1bb4:	003e0406 	br	13c8 <__alt_data_end+0xfffd13c8>
    1bb8:	d9002d17 	ldw	r4,180(sp)
    1bbc:	d9801e04 	addi	r6,sp,120
    1bc0:	b80b883a 	mov	r5,r23
    1bc4:	00076a40 	call	76a4 <__sprint_r>
    1bc8:	103e3b26 	beq	r2,zero,14b8 <__alt_data_end+0xfffd14b8>
    1bcc:	003c7d06 	br	dc4 <__alt_data_end+0xfffd0dc4>
    1bd0:	d9002d17 	ldw	r4,180(sp)
    1bd4:	d9801e04 	addi	r6,sp,120
    1bd8:	b80b883a 	mov	r5,r23
    1bdc:	00076a40 	call	76a4 <__sprint_r>
    1be0:	103c781e 	bne	r2,zero,dc4 <__alt_data_end+0xfffd0dc4>
    1be4:	d8c02017 	ldw	r3,128(sp)
    1be8:	da000404 	addi	r8,sp,16
    1bec:	003de906 	br	1394 <__alt_data_end+0xfffd1394>
    1bf0:	d9002d17 	ldw	r4,180(sp)
    1bf4:	d9801e04 	addi	r6,sp,120
    1bf8:	b80b883a 	mov	r5,r23
    1bfc:	00076a40 	call	76a4 <__sprint_r>
    1c00:	103c701e 	bne	r2,zero,dc4 <__alt_data_end+0xfffd0dc4>
    1c04:	d8c02017 	ldw	r3,128(sp)
    1c08:	da000404 	addi	r8,sp,16
    1c0c:	003d9b06 	br	127c <__alt_data_end+0xfffd127c>
    1c10:	d9002d17 	ldw	r4,180(sp)
    1c14:	d9801e04 	addi	r6,sp,120
    1c18:	b80b883a 	mov	r5,r23
    1c1c:	00076a40 	call	76a4 <__sprint_r>
    1c20:	103c681e 	bne	r2,zero,dc4 <__alt_data_end+0xfffd0dc4>
    1c24:	d8c02017 	ldw	r3,128(sp)
    1c28:	da000404 	addi	r8,sp,16
    1c2c:	003da106 	br	12b4 <__alt_data_end+0xfffd12b4>
    1c30:	d9402a17 	ldw	r5,168(sp)
    1c34:	d8002785 	stb	zero,158(sp)
    1c38:	283f0616 	blt	r5,zero,1854 <__alt_data_end+0xfffd1854>
    1c3c:	00ffdfc4 	movi	r3,-129
    1c40:	9d84b03a 	or	r2,r19,r22
    1c44:	90e4703a 	and	r18,r18,r3
    1c48:	103c3b26 	beq	r2,zero,d38 <__alt_data_end+0xfffd0d38>
    1c4c:	0039883a 	mov	fp,zero
    1c50:	003e5806 	br	15b4 <__alt_data_end+0xfffd15b4>
    1c54:	9080040c 	andi	r2,r18,16
    1c58:	1001b326 	beq	r2,zero,2328 <___vfprintf_internal_r+0x1974>
    1c5c:	d8c02e17 	ldw	r3,184(sp)
    1c60:	d9002a17 	ldw	r4,168(sp)
    1c64:	d8002785 	stb	zero,158(sp)
    1c68:	18800104 	addi	r2,r3,4
    1c6c:	1cc00017 	ldw	r19,0(r3)
    1c70:	002d883a 	mov	r22,zero
    1c74:	2001b516 	blt	r4,zero,234c <___vfprintf_internal_r+0x1998>
    1c78:	00ffdfc4 	movi	r3,-129
    1c7c:	d8802e15 	stw	r2,184(sp)
    1c80:	90e4703a 	and	r18,r18,r3
    1c84:	983d0526 	beq	r19,zero,109c <__alt_data_end+0xfffd109c>
    1c88:	0039883a 	mov	fp,zero
    1c8c:	003d0806 	br	10b0 <__alt_data_end+0xfffd10b0>
    1c90:	dc402617 	ldw	r17,152(sp)
    1c94:	0441d30e 	bge	zero,r17,23e4 <___vfprintf_internal_r+0x1a30>
    1c98:	dc403217 	ldw	r17,200(sp)
    1c9c:	d8803317 	ldw	r2,204(sp)
    1ca0:	1440010e 	bge	r2,r17,1ca8 <___vfprintf_internal_r+0x12f4>
    1ca4:	1023883a 	mov	r17,r2
    1ca8:	04400a0e 	bge	zero,r17,1cd4 <___vfprintf_internal_r+0x1320>
    1cac:	d8801f17 	ldw	r2,124(sp)
    1cb0:	1c47883a 	add	r3,r3,r17
    1cb4:	44000015 	stw	r16,0(r8)
    1cb8:	10800044 	addi	r2,r2,1
    1cbc:	44400115 	stw	r17,4(r8)
    1cc0:	d8c02015 	stw	r3,128(sp)
    1cc4:	d8801f15 	stw	r2,124(sp)
    1cc8:	010001c4 	movi	r4,7
    1ccc:	20826516 	blt	r4,r2,2664 <___vfprintf_internal_r+0x1cb0>
    1cd0:	42000204 	addi	r8,r8,8
    1cd4:	88026116 	blt	r17,zero,265c <___vfprintf_internal_r+0x1ca8>
    1cd8:	d9003217 	ldw	r4,200(sp)
    1cdc:	2463c83a 	sub	r17,r4,r17
    1ce0:	04407b0e 	bge	zero,r17,1ed0 <___vfprintf_internal_r+0x151c>
    1ce4:	05800404 	movi	r22,16
    1ce8:	d8801f17 	ldw	r2,124(sp)
    1cec:	b4419d0e 	bge	r22,r17,2364 <___vfprintf_internal_r+0x19b0>
    1cf0:	01000074 	movhi	r4,1
    1cf4:	211fab84 	addi	r4,r4,32430
    1cf8:	d9002c15 	stw	r4,176(sp)
    1cfc:	070001c4 	movi	fp,7
    1d00:	dcc02d17 	ldw	r19,180(sp)
    1d04:	00000306 	br	1d14 <___vfprintf_internal_r+0x1360>
    1d08:	42000204 	addi	r8,r8,8
    1d0c:	8c7ffc04 	addi	r17,r17,-16
    1d10:	b441970e 	bge	r22,r17,2370 <___vfprintf_internal_r+0x19bc>
    1d14:	18c00404 	addi	r3,r3,16
    1d18:	10800044 	addi	r2,r2,1
    1d1c:	45000015 	stw	r20,0(r8)
    1d20:	45800115 	stw	r22,4(r8)
    1d24:	d8c02015 	stw	r3,128(sp)
    1d28:	d8801f15 	stw	r2,124(sp)
    1d2c:	e0bff60e 	bge	fp,r2,1d08 <__alt_data_end+0xfffd1d08>
    1d30:	d9801e04 	addi	r6,sp,120
    1d34:	b80b883a 	mov	r5,r23
    1d38:	9809883a 	mov	r4,r19
    1d3c:	00076a40 	call	76a4 <__sprint_r>
    1d40:	103c201e 	bne	r2,zero,dc4 <__alt_data_end+0xfffd0dc4>
    1d44:	d8c02017 	ldw	r3,128(sp)
    1d48:	d8801f17 	ldw	r2,124(sp)
    1d4c:	da000404 	addi	r8,sp,16
    1d50:	003fee06 	br	1d0c <__alt_data_end+0xfffd1d0c>
    1d54:	d9002d17 	ldw	r4,180(sp)
    1d58:	d9801e04 	addi	r6,sp,120
    1d5c:	b80b883a 	mov	r5,r23
    1d60:	00076a40 	call	76a4 <__sprint_r>
    1d64:	103c171e 	bne	r2,zero,dc4 <__alt_data_end+0xfffd0dc4>
    1d68:	d8c02017 	ldw	r3,128(sp)
    1d6c:	df002787 	ldb	fp,158(sp)
    1d70:	da000404 	addi	r8,sp,16
    1d74:	003d3406 	br	1248 <__alt_data_end+0xfffd1248>
    1d78:	9080040c 	andi	r2,r18,16
    1d7c:	10016126 	beq	r2,zero,2304 <___vfprintf_internal_r+0x1950>
    1d80:	d9402e17 	ldw	r5,184(sp)
    1d84:	2cc00017 	ldw	r19,0(r5)
    1d88:	29400104 	addi	r5,r5,4
    1d8c:	d9402e15 	stw	r5,184(sp)
    1d90:	982dd7fa 	srai	r22,r19,31
    1d94:	b005883a 	mov	r2,r22
    1d98:	003c5a06 	br	f04 <__alt_data_end+0xfffd0f04>
    1d9c:	9080040c 	andi	r2,r18,16
    1da0:	10003526 	beq	r2,zero,1e78 <___vfprintf_internal_r+0x14c4>
    1da4:	d8c02e17 	ldw	r3,184(sp)
    1da8:	d9002a17 	ldw	r4,168(sp)
    1dac:	d8002785 	stb	zero,158(sp)
    1db0:	18800104 	addi	r2,r3,4
    1db4:	1cc00017 	ldw	r19,0(r3)
    1db8:	002d883a 	mov	r22,zero
    1dbc:	20003716 	blt	r4,zero,1e9c <___vfprintf_internal_r+0x14e8>
    1dc0:	00ffdfc4 	movi	r3,-129
    1dc4:	d8802e15 	stw	r2,184(sp)
    1dc8:	90e4703a 	and	r18,r18,r3
    1dcc:	0039883a 	mov	fp,zero
    1dd0:	983dd426 	beq	r19,zero,1524 <__alt_data_end+0xfffd1524>
    1dd4:	00800244 	movi	r2,9
    1dd8:	14fc5336 	bltu	r2,r19,f28 <__alt_data_end+0xfffd0f28>
    1ddc:	d8c02817 	ldw	r3,160(sp)
    1de0:	dc001dc4 	addi	r16,sp,119
    1de4:	9cc00c04 	addi	r19,r19,48
    1de8:	1c07c83a 	sub	r3,r3,r16
    1dec:	dcc01dc5 	stb	r19,119(sp)
    1df0:	d8c02b15 	stw	r3,172(sp)
    1df4:	003cc606 	br	1110 <__alt_data_end+0xfffd1110>
    1df8:	d8803317 	ldw	r2,204(sp)
    1dfc:	143fffc4 	addi	r16,r2,-1
    1e00:	043f4d0e 	bge	zero,r16,1b38 <__alt_data_end+0xfffd1b38>
    1e04:	07000404 	movi	fp,16
    1e08:	e400810e 	bge	fp,r16,2010 <___vfprintf_internal_r+0x165c>
    1e0c:	01400074 	movhi	r5,1
    1e10:	295fab84 	addi	r5,r5,32430
    1e14:	d9402c15 	stw	r5,176(sp)
    1e18:	01c001c4 	movi	r7,7
    1e1c:	dcc02d17 	ldw	r19,180(sp)
    1e20:	00000306 	br	1e30 <___vfprintf_internal_r+0x147c>
    1e24:	b5800204 	addi	r22,r22,8
    1e28:	843ffc04 	addi	r16,r16,-16
    1e2c:	e4007b0e 	bge	fp,r16,201c <___vfprintf_internal_r+0x1668>
    1e30:	18c00404 	addi	r3,r3,16
    1e34:	8c400044 	addi	r17,r17,1
    1e38:	b5000015 	stw	r20,0(r22)
    1e3c:	b7000115 	stw	fp,4(r22)
    1e40:	d8c02015 	stw	r3,128(sp)
    1e44:	dc401f15 	stw	r17,124(sp)
    1e48:	3c7ff60e 	bge	r7,r17,1e24 <__alt_data_end+0xfffd1e24>
    1e4c:	d9801e04 	addi	r6,sp,120
    1e50:	b80b883a 	mov	r5,r23
    1e54:	9809883a 	mov	r4,r19
    1e58:	d9c03c15 	stw	r7,240(sp)
    1e5c:	00076a40 	call	76a4 <__sprint_r>
    1e60:	d9c03c17 	ldw	r7,240(sp)
    1e64:	103bd71e 	bne	r2,zero,dc4 <__alt_data_end+0xfffd0dc4>
    1e68:	d8c02017 	ldw	r3,128(sp)
    1e6c:	dc401f17 	ldw	r17,124(sp)
    1e70:	dd800404 	addi	r22,sp,16
    1e74:	003fec06 	br	1e28 <__alt_data_end+0xfffd1e28>
    1e78:	9080100c 	andi	r2,r18,64
    1e7c:	d8002785 	stb	zero,158(sp)
    1e80:	10010e26 	beq	r2,zero,22bc <___vfprintf_internal_r+0x1908>
    1e84:	d9402e17 	ldw	r5,184(sp)
    1e88:	d8c02a17 	ldw	r3,168(sp)
    1e8c:	002d883a 	mov	r22,zero
    1e90:	28800104 	addi	r2,r5,4
    1e94:	2cc0000b 	ldhu	r19,0(r5)
    1e98:	183fc90e 	bge	r3,zero,1dc0 <__alt_data_end+0xfffd1dc0>
    1e9c:	d8802e15 	stw	r2,184(sp)
    1ea0:	0039883a 	mov	fp,zero
    1ea4:	9d84b03a 	or	r2,r19,r22
    1ea8:	103c1e1e 	bne	r2,zero,f24 <__alt_data_end+0xfffd0f24>
    1eac:	00800044 	movi	r2,1
    1eb0:	003e6c06 	br	1864 <__alt_data_end+0xfffd1864>
    1eb4:	d9002d17 	ldw	r4,180(sp)
    1eb8:	d9801e04 	addi	r6,sp,120
    1ebc:	b80b883a 	mov	r5,r23
    1ec0:	00076a40 	call	76a4 <__sprint_r>
    1ec4:	103bbf1e 	bne	r2,zero,dc4 <__alt_data_end+0xfffd0dc4>
    1ec8:	d8c02017 	ldw	r3,128(sp)
    1ecc:	da000404 	addi	r8,sp,16
    1ed0:	d9003217 	ldw	r4,200(sp)
    1ed4:	d8802617 	ldw	r2,152(sp)
    1ed8:	d9403317 	ldw	r5,204(sp)
    1edc:	8123883a 	add	r17,r16,r4
    1ee0:	11400216 	blt	r2,r5,1eec <___vfprintf_internal_r+0x1538>
    1ee4:	9100004c 	andi	r4,r18,1
    1ee8:	20000d26 	beq	r4,zero,1f20 <___vfprintf_internal_r+0x156c>
    1eec:	d9003717 	ldw	r4,220(sp)
    1ef0:	d9403417 	ldw	r5,208(sp)
    1ef4:	1907883a 	add	r3,r3,r4
    1ef8:	d9001f17 	ldw	r4,124(sp)
    1efc:	41400015 	stw	r5,0(r8)
    1f00:	d9403717 	ldw	r5,220(sp)
    1f04:	21000044 	addi	r4,r4,1
    1f08:	d8c02015 	stw	r3,128(sp)
    1f0c:	41400115 	stw	r5,4(r8)
    1f10:	d9001f15 	stw	r4,124(sp)
    1f14:	014001c4 	movi	r5,7
    1f18:	2901e816 	blt	r5,r4,26bc <___vfprintf_internal_r+0x1d08>
    1f1c:	42000204 	addi	r8,r8,8
    1f20:	d9003317 	ldw	r4,204(sp)
    1f24:	8121883a 	add	r16,r16,r4
    1f28:	2085c83a 	sub	r2,r4,r2
    1f2c:	8461c83a 	sub	r16,r16,r17
    1f30:	1400010e 	bge	r2,r16,1f38 <___vfprintf_internal_r+0x1584>
    1f34:	1021883a 	mov	r16,r2
    1f38:	04000a0e 	bge	zero,r16,1f64 <___vfprintf_internal_r+0x15b0>
    1f3c:	d9001f17 	ldw	r4,124(sp)
    1f40:	1c07883a 	add	r3,r3,r16
    1f44:	44400015 	stw	r17,0(r8)
    1f48:	21000044 	addi	r4,r4,1
    1f4c:	44000115 	stw	r16,4(r8)
    1f50:	d8c02015 	stw	r3,128(sp)
    1f54:	d9001f15 	stw	r4,124(sp)
    1f58:	014001c4 	movi	r5,7
    1f5c:	2901fb16 	blt	r5,r4,274c <___vfprintf_internal_r+0x1d98>
    1f60:	42000204 	addi	r8,r8,8
    1f64:	8001f716 	blt	r16,zero,2744 <___vfprintf_internal_r+0x1d90>
    1f68:	1421c83a 	sub	r16,r2,r16
    1f6c:	043d160e 	bge	zero,r16,13c8 <__alt_data_end+0xfffd13c8>
    1f70:	04400404 	movi	r17,16
    1f74:	d8801f17 	ldw	r2,124(sp)
    1f78:	8c3efb0e 	bge	r17,r16,1b68 <__alt_data_end+0xfffd1b68>
    1f7c:	01400074 	movhi	r5,1
    1f80:	295fab84 	addi	r5,r5,32430
    1f84:	d9402c15 	stw	r5,176(sp)
    1f88:	058001c4 	movi	r22,7
    1f8c:	dcc02d17 	ldw	r19,180(sp)
    1f90:	00000306 	br	1fa0 <___vfprintf_internal_r+0x15ec>
    1f94:	42000204 	addi	r8,r8,8
    1f98:	843ffc04 	addi	r16,r16,-16
    1f9c:	8c3ef50e 	bge	r17,r16,1b74 <__alt_data_end+0xfffd1b74>
    1fa0:	18c00404 	addi	r3,r3,16
    1fa4:	10800044 	addi	r2,r2,1
    1fa8:	45000015 	stw	r20,0(r8)
    1fac:	44400115 	stw	r17,4(r8)
    1fb0:	d8c02015 	stw	r3,128(sp)
    1fb4:	d8801f15 	stw	r2,124(sp)
    1fb8:	b0bff60e 	bge	r22,r2,1f94 <__alt_data_end+0xfffd1f94>
    1fbc:	d9801e04 	addi	r6,sp,120
    1fc0:	b80b883a 	mov	r5,r23
    1fc4:	9809883a 	mov	r4,r19
    1fc8:	00076a40 	call	76a4 <__sprint_r>
    1fcc:	103b7d1e 	bne	r2,zero,dc4 <__alt_data_end+0xfffd0dc4>
    1fd0:	d8c02017 	ldw	r3,128(sp)
    1fd4:	d8801f17 	ldw	r2,124(sp)
    1fd8:	da000404 	addi	r8,sp,16
    1fdc:	003fee06 	br	1f98 <__alt_data_end+0xfffd1f98>
    1fe0:	9088703a 	and	r4,r18,r2
    1fe4:	203eab1e 	bne	r4,zero,1a94 <__alt_data_end+0xfffd1a94>
    1fe8:	dc401f17 	ldw	r17,124(sp)
    1fec:	40800115 	stw	r2,4(r8)
    1ff0:	44000015 	stw	r16,0(r8)
    1ff4:	8c400044 	addi	r17,r17,1
    1ff8:	d8c02015 	stw	r3,128(sp)
    1ffc:	dc401f15 	stw	r17,124(sp)
    2000:	008001c4 	movi	r2,7
    2004:	14400e16 	blt	r2,r17,2040 <___vfprintf_internal_r+0x168c>
    2008:	45800204 	addi	r22,r8,8
    200c:	003eca06 	br	1b38 <__alt_data_end+0xfffd1b38>
    2010:	01000074 	movhi	r4,1
    2014:	211fab84 	addi	r4,r4,32430
    2018:	d9002c15 	stw	r4,176(sp)
    201c:	d8802c17 	ldw	r2,176(sp)
    2020:	1c07883a 	add	r3,r3,r16
    2024:	8c400044 	addi	r17,r17,1
    2028:	b0800015 	stw	r2,0(r22)
    202c:	b4000115 	stw	r16,4(r22)
    2030:	d8c02015 	stw	r3,128(sp)
    2034:	dc401f15 	stw	r17,124(sp)
    2038:	008001c4 	movi	r2,7
    203c:	147ebd0e 	bge	r2,r17,1b34 <__alt_data_end+0xfffd1b34>
    2040:	d9002d17 	ldw	r4,180(sp)
    2044:	d9801e04 	addi	r6,sp,120
    2048:	b80b883a 	mov	r5,r23
    204c:	00076a40 	call	76a4 <__sprint_r>
    2050:	103b5c1e 	bne	r2,zero,dc4 <__alt_data_end+0xfffd0dc4>
    2054:	d8c02017 	ldw	r3,128(sp)
    2058:	dc401f17 	ldw	r17,124(sp)
    205c:	dd800404 	addi	r22,sp,16
    2060:	003eb506 	br	1b38 <__alt_data_end+0xfffd1b38>
    2064:	d9002d17 	ldw	r4,180(sp)
    2068:	d9801e04 	addi	r6,sp,120
    206c:	b80b883a 	mov	r5,r23
    2070:	00076a40 	call	76a4 <__sprint_r>
    2074:	103b531e 	bne	r2,zero,dc4 <__alt_data_end+0xfffd0dc4>
    2078:	d8c02017 	ldw	r3,128(sp)
    207c:	dc401f17 	ldw	r17,124(sp)
    2080:	da000404 	addi	r8,sp,16
    2084:	003e8d06 	br	1abc <__alt_data_end+0xfffd1abc>
    2088:	d9002d17 	ldw	r4,180(sp)
    208c:	d9801e04 	addi	r6,sp,120
    2090:	b80b883a 	mov	r5,r23
    2094:	00076a40 	call	76a4 <__sprint_r>
    2098:	103b4a1e 	bne	r2,zero,dc4 <__alt_data_end+0xfffd0dc4>
    209c:	d8c02017 	ldw	r3,128(sp)
    20a0:	dc401f17 	ldw	r17,124(sp)
    20a4:	dd800404 	addi	r22,sp,16
    20a8:	003e8f06 	br	1ae8 <__alt_data_end+0xfffd1ae8>
    20ac:	0027883a 	mov	r19,zero
    20b0:	003f4a06 	br	1ddc <__alt_data_end+0xfffd1ddc>
    20b4:	d9002d17 	ldw	r4,180(sp)
    20b8:	d9801e04 	addi	r6,sp,120
    20bc:	b80b883a 	mov	r5,r23
    20c0:	00076a40 	call	76a4 <__sprint_r>
    20c4:	103b3f1e 	bne	r2,zero,dc4 <__alt_data_end+0xfffd0dc4>
    20c8:	d8c02017 	ldw	r3,128(sp)
    20cc:	da000404 	addi	r8,sp,16
    20d0:	003c7b06 	br	12c0 <__alt_data_end+0xfffd12c0>
    20d4:	d9402a17 	ldw	r5,168(sp)
    20d8:	04e7c83a 	sub	r19,zero,r19
    20dc:	07000b44 	movi	fp,45
    20e0:	9804c03a 	cmpne	r2,r19,zero
    20e4:	05adc83a 	sub	r22,zero,r22
    20e8:	df002785 	stb	fp,158(sp)
    20ec:	b0adc83a 	sub	r22,r22,r2
    20f0:	28017b16 	blt	r5,zero,26e0 <___vfprintf_internal_r+0x1d2c>
    20f4:	00bfdfc4 	movi	r2,-129
    20f8:	90a4703a 	and	r18,r18,r2
    20fc:	003b8906 	br	f24 <__alt_data_end+0xfffd0f24>
    2100:	d9003617 	ldw	r4,216(sp)
    2104:	d9403817 	ldw	r5,224(sp)
    2108:	da003d15 	stw	r8,244(sp)
    210c:	00072300 	call	7230 <__fpclassifyd>
    2110:	da003d17 	ldw	r8,244(sp)
    2114:	1000f026 	beq	r2,zero,24d8 <___vfprintf_internal_r+0x1b24>
    2118:	d9002a17 	ldw	r4,168(sp)
    211c:	05bff7c4 	movi	r22,-33
    2120:	00bfffc4 	movi	r2,-1
    2124:	8dac703a 	and	r22,r17,r22
    2128:	20820026 	beq	r4,r2,292c <___vfprintf_internal_r+0x1f78>
    212c:	008011c4 	movi	r2,71
    2130:	b081f726 	beq	r22,r2,2910 <___vfprintf_internal_r+0x1f5c>
    2134:	d9003817 	ldw	r4,224(sp)
    2138:	90c04014 	ori	r3,r18,256
    213c:	d8c02c15 	stw	r3,176(sp)
    2140:	20021516 	blt	r4,zero,2998 <___vfprintf_internal_r+0x1fe4>
    2144:	dcc03817 	ldw	r19,224(sp)
    2148:	d8002905 	stb	zero,164(sp)
    214c:	00801984 	movi	r2,102
    2150:	8881f926 	beq	r17,r2,2938 <___vfprintf_internal_r+0x1f84>
    2154:	00801184 	movi	r2,70
    2158:	88821c26 	beq	r17,r2,29cc <___vfprintf_internal_r+0x2018>
    215c:	00801144 	movi	r2,69
    2160:	b081ef26 	beq	r22,r2,2920 <___vfprintf_internal_r+0x1f6c>
    2164:	d8c02a17 	ldw	r3,168(sp)
    2168:	d8802104 	addi	r2,sp,132
    216c:	d8800315 	stw	r2,12(sp)
    2170:	d9403617 	ldw	r5,216(sp)
    2174:	d8802504 	addi	r2,sp,148
    2178:	d9002d17 	ldw	r4,180(sp)
    217c:	d8800215 	stw	r2,8(sp)
    2180:	d8802604 	addi	r2,sp,152
    2184:	d8c00015 	stw	r3,0(sp)
    2188:	d8800115 	stw	r2,4(sp)
    218c:	01c00084 	movi	r7,2
    2190:	980d883a 	mov	r6,r19
    2194:	d8c03c15 	stw	r3,240(sp)
    2198:	da003d15 	stw	r8,244(sp)
    219c:	00030e40 	call	30e4 <_dtoa_r>
    21a0:	1021883a 	mov	r16,r2
    21a4:	008019c4 	movi	r2,103
    21a8:	d8c03c17 	ldw	r3,240(sp)
    21ac:	da003d17 	ldw	r8,244(sp)
    21b0:	88817126 	beq	r17,r2,2778 <___vfprintf_internal_r+0x1dc4>
    21b4:	008011c4 	movi	r2,71
    21b8:	88829126 	beq	r17,r2,2c00 <___vfprintf_internal_r+0x224c>
    21bc:	80f9883a 	add	fp,r16,r3
    21c0:	d9003617 	ldw	r4,216(sp)
    21c4:	000d883a 	mov	r6,zero
    21c8:	000f883a 	mov	r7,zero
    21cc:	980b883a 	mov	r5,r19
    21d0:	da003d15 	stw	r8,244(sp)
    21d4:	000bfd80 	call	bfd8 <__eqdf2>
    21d8:	da003d17 	ldw	r8,244(sp)
    21dc:	10018d26 	beq	r2,zero,2814 <___vfprintf_internal_r+0x1e60>
    21e0:	d8802117 	ldw	r2,132(sp)
    21e4:	1700062e 	bgeu	r2,fp,2200 <___vfprintf_internal_r+0x184c>
    21e8:	01000c04 	movi	r4,48
    21ec:	10c00044 	addi	r3,r2,1
    21f0:	d8c02115 	stw	r3,132(sp)
    21f4:	11000005 	stb	r4,0(r2)
    21f8:	d8802117 	ldw	r2,132(sp)
    21fc:	173ffb36 	bltu	r2,fp,21ec <__alt_data_end+0xfffd21ec>
    2200:	1405c83a 	sub	r2,r2,r16
    2204:	d8803315 	stw	r2,204(sp)
    2208:	008011c4 	movi	r2,71
    220c:	b0817626 	beq	r22,r2,27e8 <___vfprintf_internal_r+0x1e34>
    2210:	00801944 	movi	r2,101
    2214:	1442800e 	bge	r2,r17,2c18 <___vfprintf_internal_r+0x2264>
    2218:	d8c02617 	ldw	r3,152(sp)
    221c:	00801984 	movi	r2,102
    2220:	d8c03215 	stw	r3,200(sp)
    2224:	8881fe26 	beq	r17,r2,2a20 <___vfprintf_internal_r+0x206c>
    2228:	d8c03217 	ldw	r3,200(sp)
    222c:	d9003317 	ldw	r4,204(sp)
    2230:	1901dd16 	blt	r3,r4,29a8 <___vfprintf_internal_r+0x1ff4>
    2234:	9480004c 	andi	r18,r18,1
    2238:	90022b1e 	bne	r18,zero,2ae8 <___vfprintf_internal_r+0x2134>
    223c:	1805883a 	mov	r2,r3
    2240:	18028316 	blt	r3,zero,2c50 <___vfprintf_internal_r+0x229c>
    2244:	d8c03217 	ldw	r3,200(sp)
    2248:	044019c4 	movi	r17,103
    224c:	d8c02b15 	stw	r3,172(sp)
    2250:	df002907 	ldb	fp,164(sp)
    2254:	e001531e 	bne	fp,zero,27a4 <___vfprintf_internal_r+0x1df0>
    2258:	df002783 	ldbu	fp,158(sp)
    225c:	d8802915 	stw	r2,164(sp)
    2260:	dc802c17 	ldw	r18,176(sp)
    2264:	d8002a15 	stw	zero,168(sp)
    2268:	003baf06 	br	1128 <__alt_data_end+0xfffd1128>
    226c:	d8c02e17 	ldw	r3,184(sp)
    2270:	d9002e17 	ldw	r4,184(sp)
    2274:	d9402e17 	ldw	r5,184(sp)
    2278:	18c00017 	ldw	r3,0(r3)
    227c:	21000117 	ldw	r4,4(r4)
    2280:	29400204 	addi	r5,r5,8
    2284:	d8c03615 	stw	r3,216(sp)
    2288:	d9003815 	stw	r4,224(sp)
    228c:	d9402e15 	stw	r5,184(sp)
    2290:	003b5006 	br	fd4 <__alt_data_end+0xfffd0fd4>
    2294:	ac400007 	ldb	r17,0(r21)
    2298:	003a2806 	br	b3c <__alt_data_end+0xfffd0b3c>
    229c:	9080100c 	andi	r2,r18,64
    22a0:	1000a826 	beq	r2,zero,2544 <___vfprintf_internal_r+0x1b90>
    22a4:	d8c02e17 	ldw	r3,184(sp)
    22a8:	002d883a 	mov	r22,zero
    22ac:	1cc0000b 	ldhu	r19,0(r3)
    22b0:	18c00104 	addi	r3,r3,4
    22b4:	d8c02e15 	stw	r3,184(sp)
    22b8:	003caf06 	br	1578 <__alt_data_end+0xfffd1578>
    22bc:	d9002e17 	ldw	r4,184(sp)
    22c0:	d9402a17 	ldw	r5,168(sp)
    22c4:	002d883a 	mov	r22,zero
    22c8:	20800104 	addi	r2,r4,4
    22cc:	24c00017 	ldw	r19,0(r4)
    22d0:	283ebb0e 	bge	r5,zero,1dc0 <__alt_data_end+0xfffd1dc0>
    22d4:	003ef106 	br	1e9c <__alt_data_end+0xfffd1e9c>
    22d8:	9080040c 	andi	r2,r18,16
    22dc:	1000921e 	bne	r2,zero,2528 <___vfprintf_internal_r+0x1b74>
    22e0:	9480100c 	andi	r18,r18,64
    22e4:	90013926 	beq	r18,zero,27cc <___vfprintf_internal_r+0x1e18>
    22e8:	d9402e17 	ldw	r5,184(sp)
    22ec:	d8c02f17 	ldw	r3,188(sp)
    22f0:	28800017 	ldw	r2,0(r5)
    22f4:	29400104 	addi	r5,r5,4
    22f8:	d9402e15 	stw	r5,184(sp)
    22fc:	10c0000d 	sth	r3,0(r2)
    2300:	0039e406 	br	a94 <__alt_data_end+0xfffd0a94>
    2304:	9080100c 	andi	r2,r18,64
    2308:	10008026 	beq	r2,zero,250c <___vfprintf_internal_r+0x1b58>
    230c:	d8802e17 	ldw	r2,184(sp)
    2310:	14c0000f 	ldh	r19,0(r2)
    2314:	10800104 	addi	r2,r2,4
    2318:	d8802e15 	stw	r2,184(sp)
    231c:	982dd7fa 	srai	r22,r19,31
    2320:	b005883a 	mov	r2,r22
    2324:	003af706 	br	f04 <__alt_data_end+0xfffd0f04>
    2328:	9080100c 	andi	r2,r18,64
    232c:	d8002785 	stb	zero,158(sp)
    2330:	10008a1e 	bne	r2,zero,255c <___vfprintf_internal_r+0x1ba8>
    2334:	d9002e17 	ldw	r4,184(sp)
    2338:	d9402a17 	ldw	r5,168(sp)
    233c:	002d883a 	mov	r22,zero
    2340:	20800104 	addi	r2,r4,4
    2344:	24c00017 	ldw	r19,0(r4)
    2348:	283e4b0e 	bge	r5,zero,1c78 <__alt_data_end+0xfffd1c78>
    234c:	9d86b03a 	or	r3,r19,r22
    2350:	d8802e15 	stw	r2,184(sp)
    2354:	183e4c1e 	bne	r3,zero,1c88 <__alt_data_end+0xfffd1c88>
    2358:	0039883a 	mov	fp,zero
    235c:	0005883a 	mov	r2,zero
    2360:	003d4006 	br	1864 <__alt_data_end+0xfffd1864>
    2364:	01400074 	movhi	r5,1
    2368:	295fab84 	addi	r5,r5,32430
    236c:	d9402c15 	stw	r5,176(sp)
    2370:	d9402c17 	ldw	r5,176(sp)
    2374:	1c47883a 	add	r3,r3,r17
    2378:	10800044 	addi	r2,r2,1
    237c:	41400015 	stw	r5,0(r8)
    2380:	44400115 	stw	r17,4(r8)
    2384:	d8c02015 	stw	r3,128(sp)
    2388:	d8801f15 	stw	r2,124(sp)
    238c:	010001c4 	movi	r4,7
    2390:	20bec816 	blt	r4,r2,1eb4 <__alt_data_end+0xfffd1eb4>
    2394:	42000204 	addi	r8,r8,8
    2398:	003ecd06 	br	1ed0 <__alt_data_end+0xfffd1ed0>
    239c:	d9002a17 	ldw	r4,168(sp)
    23a0:	d8002785 	stb	zero,158(sp)
    23a4:	203d2d16 	blt	r4,zero,185c <__alt_data_end+0xfffd185c>
    23a8:	00bfdfc4 	movi	r2,-129
    23ac:	90a4703a 	and	r18,r18,r2
    23b0:	003a6106 	br	d38 <__alt_data_end+0xfffd0d38>
    23b4:	01000074 	movhi	r4,1
    23b8:	211fab84 	addi	r4,r4,32430
    23bc:	d9002c15 	stw	r4,176(sp)
    23c0:	003bea06 	br	136c <__alt_data_end+0xfffd136c>
    23c4:	d9002d17 	ldw	r4,180(sp)
    23c8:	d9801e04 	addi	r6,sp,120
    23cc:	b80b883a 	mov	r5,r23
    23d0:	00076a40 	call	76a4 <__sprint_r>
    23d4:	103a7b1e 	bne	r2,zero,dc4 <__alt_data_end+0xfffd0dc4>
    23d8:	d8c02017 	ldw	r3,128(sp)
    23dc:	da000404 	addi	r8,sp,16
    23e0:	003d4106 	br	18e8 <__alt_data_end+0xfffd18e8>
    23e4:	d8801f17 	ldw	r2,124(sp)
    23e8:	01400074 	movhi	r5,1
    23ec:	01000044 	movi	r4,1
    23f0:	18c00044 	addi	r3,r3,1
    23f4:	10800044 	addi	r2,r2,1
    23f8:	295fab04 	addi	r5,r5,32428
    23fc:	41000115 	stw	r4,4(r8)
    2400:	41400015 	stw	r5,0(r8)
    2404:	d8c02015 	stw	r3,128(sp)
    2408:	d8801f15 	stw	r2,124(sp)
    240c:	010001c4 	movi	r4,7
    2410:	20805c16 	blt	r4,r2,2584 <___vfprintf_internal_r+0x1bd0>
    2414:	42000204 	addi	r8,r8,8
    2418:	8800041e 	bne	r17,zero,242c <___vfprintf_internal_r+0x1a78>
    241c:	d8803317 	ldw	r2,204(sp)
    2420:	1000021e 	bne	r2,zero,242c <___vfprintf_internal_r+0x1a78>
    2424:	9080004c 	andi	r2,r18,1
    2428:	103be726 	beq	r2,zero,13c8 <__alt_data_end+0xfffd13c8>
    242c:	d9003717 	ldw	r4,220(sp)
    2430:	d8801f17 	ldw	r2,124(sp)
    2434:	d9403417 	ldw	r5,208(sp)
    2438:	20c7883a 	add	r3,r4,r3
    243c:	10800044 	addi	r2,r2,1
    2440:	41000115 	stw	r4,4(r8)
    2444:	41400015 	stw	r5,0(r8)
    2448:	d8c02015 	stw	r3,128(sp)
    244c:	d8801f15 	stw	r2,124(sp)
    2450:	010001c4 	movi	r4,7
    2454:	20812116 	blt	r4,r2,28dc <___vfprintf_internal_r+0x1f28>
    2458:	42000204 	addi	r8,r8,8
    245c:	0463c83a 	sub	r17,zero,r17
    2460:	0440730e 	bge	zero,r17,2630 <___vfprintf_internal_r+0x1c7c>
    2464:	05800404 	movi	r22,16
    2468:	b440860e 	bge	r22,r17,2684 <___vfprintf_internal_r+0x1cd0>
    246c:	01400074 	movhi	r5,1
    2470:	295fab84 	addi	r5,r5,32430
    2474:	d9402c15 	stw	r5,176(sp)
    2478:	070001c4 	movi	fp,7
    247c:	dcc02d17 	ldw	r19,180(sp)
    2480:	00000306 	br	2490 <___vfprintf_internal_r+0x1adc>
    2484:	42000204 	addi	r8,r8,8
    2488:	8c7ffc04 	addi	r17,r17,-16
    248c:	b440800e 	bge	r22,r17,2690 <___vfprintf_internal_r+0x1cdc>
    2490:	18c00404 	addi	r3,r3,16
    2494:	10800044 	addi	r2,r2,1
    2498:	45000015 	stw	r20,0(r8)
    249c:	45800115 	stw	r22,4(r8)
    24a0:	d8c02015 	stw	r3,128(sp)
    24a4:	d8801f15 	stw	r2,124(sp)
    24a8:	e0bff60e 	bge	fp,r2,2484 <__alt_data_end+0xfffd2484>
    24ac:	d9801e04 	addi	r6,sp,120
    24b0:	b80b883a 	mov	r5,r23
    24b4:	9809883a 	mov	r4,r19
    24b8:	00076a40 	call	76a4 <__sprint_r>
    24bc:	103a411e 	bne	r2,zero,dc4 <__alt_data_end+0xfffd0dc4>
    24c0:	d8c02017 	ldw	r3,128(sp)
    24c4:	d8801f17 	ldw	r2,124(sp)
    24c8:	da000404 	addi	r8,sp,16
    24cc:	003fee06 	br	2488 <__alt_data_end+0xfffd2488>
    24d0:	00bfffc4 	movi	r2,-1
    24d4:	003a3f06 	br	dd4 <__alt_data_end+0xfffd0dd4>
    24d8:	008011c4 	movi	r2,71
    24dc:	1440b816 	blt	r2,r17,27c0 <___vfprintf_internal_r+0x1e0c>
    24e0:	04000074 	movhi	r16,1
    24e4:	841f9d04 	addi	r16,r16,32372
    24e8:	00c000c4 	movi	r3,3
    24ec:	00bfdfc4 	movi	r2,-129
    24f0:	d8c02915 	stw	r3,164(sp)
    24f4:	90a4703a 	and	r18,r18,r2
    24f8:	df002783 	ldbu	fp,158(sp)
    24fc:	d8c02b15 	stw	r3,172(sp)
    2500:	d8002a15 	stw	zero,168(sp)
    2504:	d8003215 	stw	zero,200(sp)
    2508:	003b0706 	br	1128 <__alt_data_end+0xfffd1128>
    250c:	d8c02e17 	ldw	r3,184(sp)
    2510:	1cc00017 	ldw	r19,0(r3)
    2514:	18c00104 	addi	r3,r3,4
    2518:	d8c02e15 	stw	r3,184(sp)
    251c:	982dd7fa 	srai	r22,r19,31
    2520:	b005883a 	mov	r2,r22
    2524:	003a7706 	br	f04 <__alt_data_end+0xfffd0f04>
    2528:	d8c02e17 	ldw	r3,184(sp)
    252c:	d9002f17 	ldw	r4,188(sp)
    2530:	18800017 	ldw	r2,0(r3)
    2534:	18c00104 	addi	r3,r3,4
    2538:	d8c02e15 	stw	r3,184(sp)
    253c:	11000015 	stw	r4,0(r2)
    2540:	00395406 	br	a94 <__alt_data_end+0xfffd0a94>
    2544:	d9002e17 	ldw	r4,184(sp)
    2548:	002d883a 	mov	r22,zero
    254c:	24c00017 	ldw	r19,0(r4)
    2550:	21000104 	addi	r4,r4,4
    2554:	d9002e15 	stw	r4,184(sp)
    2558:	003c0706 	br	1578 <__alt_data_end+0xfffd1578>
    255c:	d9402e17 	ldw	r5,184(sp)
    2560:	d8c02a17 	ldw	r3,168(sp)
    2564:	002d883a 	mov	r22,zero
    2568:	28800104 	addi	r2,r5,4
    256c:	2cc0000b 	ldhu	r19,0(r5)
    2570:	183dc10e 	bge	r3,zero,1c78 <__alt_data_end+0xfffd1c78>
    2574:	003f7506 	br	234c <__alt_data_end+0xfffd234c>
    2578:	04000074 	movhi	r16,1
    257c:	841f9b04 	addi	r16,r16,32364
    2580:	003aa706 	br	1020 <__alt_data_end+0xfffd1020>
    2584:	d9002d17 	ldw	r4,180(sp)
    2588:	d9801e04 	addi	r6,sp,120
    258c:	b80b883a 	mov	r5,r23
    2590:	00076a40 	call	76a4 <__sprint_r>
    2594:	103a0b1e 	bne	r2,zero,dc4 <__alt_data_end+0xfffd0dc4>
    2598:	dc402617 	ldw	r17,152(sp)
    259c:	d8c02017 	ldw	r3,128(sp)
    25a0:	da000404 	addi	r8,sp,16
    25a4:	003f9c06 	br	2418 <__alt_data_end+0xfffd2418>
    25a8:	ac400043 	ldbu	r17,1(r21)
    25ac:	84000814 	ori	r16,r16,32
    25b0:	ad400044 	addi	r21,r21,1
    25b4:	8c403fcc 	andi	r17,r17,255
    25b8:	8c40201c 	xori	r17,r17,128
    25bc:	8c7fe004 	addi	r17,r17,-128
    25c0:	00395e06 	br	b3c <__alt_data_end+0xfffd0b3c>
    25c4:	d8c02e15 	stw	r3,184(sp)
    25c8:	0039883a 	mov	fp,zero
    25cc:	003e3506 	br	1ea4 <__alt_data_end+0xfffd1ea4>
    25d0:	d9002d17 	ldw	r4,180(sp)
    25d4:	d9801e04 	addi	r6,sp,120
    25d8:	b80b883a 	mov	r5,r23
    25dc:	00076a40 	call	76a4 <__sprint_r>
    25e0:	1039f81e 	bne	r2,zero,dc4 <__alt_data_end+0xfffd0dc4>
    25e4:	d8c02017 	ldw	r3,128(sp)
    25e8:	da000404 	addi	r8,sp,16
    25ec:	003cd006 	br	1930 <__alt_data_end+0xfffd1930>
    25f0:	8009883a 	mov	r4,r16
    25f4:	df003d15 	stw	fp,244(sp)
    25f8:	00075100 	call	7510 <strlen>
    25fc:	d8802b15 	stw	r2,172(sp)
    2600:	da003d17 	ldw	r8,244(sp)
    2604:	103c200e 	bge	r2,zero,1688 <__alt_data_end+0xfffd1688>
    2608:	0005883a 	mov	r2,zero
    260c:	003c1e06 	br	1688 <__alt_data_end+0xfffd1688>
    2610:	d9002d17 	ldw	r4,180(sp)
    2614:	d9801e04 	addi	r6,sp,120
    2618:	b80b883a 	mov	r5,r23
    261c:	00076a40 	call	76a4 <__sprint_r>
    2620:	1039e81e 	bne	r2,zero,dc4 <__alt_data_end+0xfffd0dc4>
    2624:	d8c02017 	ldw	r3,128(sp)
    2628:	d8801f17 	ldw	r2,124(sp)
    262c:	da000404 	addi	r8,sp,16
    2630:	d9403317 	ldw	r5,204(sp)
    2634:	10800044 	addi	r2,r2,1
    2638:	44000015 	stw	r16,0(r8)
    263c:	28c7883a 	add	r3,r5,r3
    2640:	003b5b06 	br	13b0 <__alt_data_end+0xfffd13b0>
    2644:	01000074 	movhi	r4,1
    2648:	211faf84 	addi	r4,r4,32446
    264c:	d9003515 	stw	r4,212(sp)
    2650:	003af206 	br	121c <__alt_data_end+0xfffd121c>
    2654:	013fffc4 	movi	r4,-1
    2658:	003a0806 	br	e7c <__alt_data_end+0xfffd0e7c>
    265c:	0023883a 	mov	r17,zero
    2660:	003d9d06 	br	1cd8 <__alt_data_end+0xfffd1cd8>
    2664:	d9002d17 	ldw	r4,180(sp)
    2668:	d9801e04 	addi	r6,sp,120
    266c:	b80b883a 	mov	r5,r23
    2670:	00076a40 	call	76a4 <__sprint_r>
    2674:	1039d31e 	bne	r2,zero,dc4 <__alt_data_end+0xfffd0dc4>
    2678:	d8c02017 	ldw	r3,128(sp)
    267c:	da000404 	addi	r8,sp,16
    2680:	003d9406 	br	1cd4 <__alt_data_end+0xfffd1cd4>
    2684:	01000074 	movhi	r4,1
    2688:	211fab84 	addi	r4,r4,32430
    268c:	d9002c15 	stw	r4,176(sp)
    2690:	d9002c17 	ldw	r4,176(sp)
    2694:	1c47883a 	add	r3,r3,r17
    2698:	10800044 	addi	r2,r2,1
    269c:	41000015 	stw	r4,0(r8)
    26a0:	44400115 	stw	r17,4(r8)
    26a4:	d8c02015 	stw	r3,128(sp)
    26a8:	d8801f15 	stw	r2,124(sp)
    26ac:	010001c4 	movi	r4,7
    26b0:	20bfd716 	blt	r4,r2,2610 <__alt_data_end+0xfffd2610>
    26b4:	42000204 	addi	r8,r8,8
    26b8:	003fdd06 	br	2630 <__alt_data_end+0xfffd2630>
    26bc:	d9002d17 	ldw	r4,180(sp)
    26c0:	d9801e04 	addi	r6,sp,120
    26c4:	b80b883a 	mov	r5,r23
    26c8:	00076a40 	call	76a4 <__sprint_r>
    26cc:	1039bd1e 	bne	r2,zero,dc4 <__alt_data_end+0xfffd0dc4>
    26d0:	d8802617 	ldw	r2,152(sp)
    26d4:	d8c02017 	ldw	r3,128(sp)
    26d8:	da000404 	addi	r8,sp,16
    26dc:	003e1006 	br	1f20 <__alt_data_end+0xfffd1f20>
    26e0:	00800044 	movi	r2,1
    26e4:	10803fcc 	andi	r2,r2,255
    26e8:	00c00044 	movi	r3,1
    26ec:	10fa0d26 	beq	r2,r3,f24 <__alt_data_end+0xfffd0f24>
    26f0:	00c00084 	movi	r3,2
    26f4:	10fbaf26 	beq	r2,r3,15b4 <__alt_data_end+0xfffd15b4>
    26f8:	003a6d06 	br	10b0 <__alt_data_end+0xfffd10b0>
    26fc:	01000074 	movhi	r4,1
    2700:	211faf84 	addi	r4,r4,32446
    2704:	d9003515 	stw	r4,212(sp)
    2708:	003b5406 	br	145c <__alt_data_end+0xfffd145c>
    270c:	d8802a17 	ldw	r2,168(sp)
    2710:	00c00184 	movi	r3,6
    2714:	1880012e 	bgeu	r3,r2,271c <___vfprintf_internal_r+0x1d68>
    2718:	1805883a 	mov	r2,r3
    271c:	d8802b15 	stw	r2,172(sp)
    2720:	1000ef16 	blt	r2,zero,2ae0 <___vfprintf_internal_r+0x212c>
    2724:	04000074 	movhi	r16,1
    2728:	d8802915 	stw	r2,164(sp)
    272c:	dcc02e15 	stw	r19,184(sp)
    2730:	d8002a15 	stw	zero,168(sp)
    2734:	d8003215 	stw	zero,200(sp)
    2738:	841fa904 	addi	r16,r16,32420
    273c:	0039883a 	mov	fp,zero
    2740:	003a8006 	br	1144 <__alt_data_end+0xfffd1144>
    2744:	0021883a 	mov	r16,zero
    2748:	003e0706 	br	1f68 <__alt_data_end+0xfffd1f68>
    274c:	d9002d17 	ldw	r4,180(sp)
    2750:	d9801e04 	addi	r6,sp,120
    2754:	b80b883a 	mov	r5,r23
    2758:	00076a40 	call	76a4 <__sprint_r>
    275c:	1039991e 	bne	r2,zero,dc4 <__alt_data_end+0xfffd0dc4>
    2760:	d8802617 	ldw	r2,152(sp)
    2764:	d9403317 	ldw	r5,204(sp)
    2768:	d8c02017 	ldw	r3,128(sp)
    276c:	da000404 	addi	r8,sp,16
    2770:	2885c83a 	sub	r2,r5,r2
    2774:	003dfb06 	br	1f64 <__alt_data_end+0xfffd1f64>
    2778:	9080004c 	andi	r2,r18,1
    277c:	103e8f1e 	bne	r2,zero,21bc <__alt_data_end+0xfffd21bc>
    2780:	d8802117 	ldw	r2,132(sp)
    2784:	003e9e06 	br	2200 <__alt_data_end+0xfffd2200>
    2788:	1025883a 	mov	r18,r2
    278c:	0039883a 	mov	fp,zero
    2790:	00800084 	movi	r2,2
    2794:	003fd306 	br	26e4 <__alt_data_end+0xfffd26e4>
    2798:	07000b44 	movi	fp,45
    279c:	df002785 	stb	fp,158(sp)
    27a0:	003a1b06 	br	1010 <__alt_data_end+0xfffd1010>
    27a4:	00c00b44 	movi	r3,45
    27a8:	d8c02785 	stb	r3,158(sp)
    27ac:	d8802915 	stw	r2,164(sp)
    27b0:	dc802c17 	ldw	r18,176(sp)
    27b4:	d8002a15 	stw	zero,168(sp)
    27b8:	07000b44 	movi	fp,45
    27bc:	003a5e06 	br	1138 <__alt_data_end+0xfffd1138>
    27c0:	04000074 	movhi	r16,1
    27c4:	841f9e04 	addi	r16,r16,32376
    27c8:	003f4706 	br	24e8 <__alt_data_end+0xfffd24e8>
    27cc:	d9002e17 	ldw	r4,184(sp)
    27d0:	d9402f17 	ldw	r5,188(sp)
    27d4:	20800017 	ldw	r2,0(r4)
    27d8:	21000104 	addi	r4,r4,4
    27dc:	d9002e15 	stw	r4,184(sp)
    27e0:	11400015 	stw	r5,0(r2)
    27e4:	0038ab06 	br	a94 <__alt_data_end+0xfffd0a94>
    27e8:	dd802617 	ldw	r22,152(sp)
    27ec:	00bfff44 	movi	r2,-3
    27f0:	b0801c16 	blt	r22,r2,2864 <___vfprintf_internal_r+0x1eb0>
    27f4:	d9402a17 	ldw	r5,168(sp)
    27f8:	2d801a16 	blt	r5,r22,2864 <___vfprintf_internal_r+0x1eb0>
    27fc:	dd803215 	stw	r22,200(sp)
    2800:	003e8906 	br	2228 <__alt_data_end+0xfffd2228>
    2804:	01000074 	movhi	r4,1
    2808:	211fab84 	addi	r4,r4,32430
    280c:	d9002c15 	stw	r4,176(sp)
    2810:	003c9106 	br	1a58 <__alt_data_end+0xfffd1a58>
    2814:	e005883a 	mov	r2,fp
    2818:	003e7906 	br	2200 <__alt_data_end+0xfffd2200>
    281c:	d9002a17 	ldw	r4,168(sp)
    2820:	df002783 	ldbu	fp,158(sp)
    2824:	dcc02e15 	stw	r19,184(sp)
    2828:	d9002915 	stw	r4,164(sp)
    282c:	d9002b15 	stw	r4,172(sp)
    2830:	d8002a15 	stw	zero,168(sp)
    2834:	d8003215 	stw	zero,200(sp)
    2838:	003a3b06 	br	1128 <__alt_data_end+0xfffd1128>
    283c:	9080004c 	andi	r2,r18,1
    2840:	0039883a 	mov	fp,zero
    2844:	10000426 	beq	r2,zero,2858 <___vfprintf_internal_r+0x1ea4>
    2848:	00800c04 	movi	r2,48
    284c:	dc001dc4 	addi	r16,sp,119
    2850:	d8801dc5 	stb	r2,119(sp)
    2854:	003b6406 	br	15e8 <__alt_data_end+0xfffd15e8>
    2858:	d8002b15 	stw	zero,172(sp)
    285c:	dc001e04 	addi	r16,sp,120
    2860:	003a2b06 	br	1110 <__alt_data_end+0xfffd1110>
    2864:	8c7fff84 	addi	r17,r17,-2
    2868:	b5bfffc4 	addi	r22,r22,-1
    286c:	dd802615 	stw	r22,152(sp)
    2870:	dc4022c5 	stb	r17,139(sp)
    2874:	b000bf16 	blt	r22,zero,2b74 <___vfprintf_internal_r+0x21c0>
    2878:	00800ac4 	movi	r2,43
    287c:	d8802305 	stb	r2,140(sp)
    2880:	00800244 	movi	r2,9
    2884:	15807016 	blt	r2,r22,2a48 <___vfprintf_internal_r+0x2094>
    2888:	00800c04 	movi	r2,48
    288c:	b5800c04 	addi	r22,r22,48
    2890:	d8802345 	stb	r2,141(sp)
    2894:	dd802385 	stb	r22,142(sp)
    2898:	d88023c4 	addi	r2,sp,143
    289c:	df0022c4 	addi	fp,sp,139
    28a0:	d8c03317 	ldw	r3,204(sp)
    28a4:	1739c83a 	sub	fp,r2,fp
    28a8:	d9003317 	ldw	r4,204(sp)
    28ac:	e0c7883a 	add	r3,fp,r3
    28b0:	df003a15 	stw	fp,232(sp)
    28b4:	d8c02b15 	stw	r3,172(sp)
    28b8:	00800044 	movi	r2,1
    28bc:	1100b30e 	bge	r2,r4,2b8c <___vfprintf_internal_r+0x21d8>
    28c0:	d8c02b17 	ldw	r3,172(sp)
    28c4:	18c00044 	addi	r3,r3,1
    28c8:	d8c02b15 	stw	r3,172(sp)
    28cc:	1805883a 	mov	r2,r3
    28d0:	1800ac16 	blt	r3,zero,2b84 <___vfprintf_internal_r+0x21d0>
    28d4:	d8003215 	stw	zero,200(sp)
    28d8:	003e5d06 	br	2250 <__alt_data_end+0xfffd2250>
    28dc:	d9002d17 	ldw	r4,180(sp)
    28e0:	d9801e04 	addi	r6,sp,120
    28e4:	b80b883a 	mov	r5,r23
    28e8:	00076a40 	call	76a4 <__sprint_r>
    28ec:	1039351e 	bne	r2,zero,dc4 <__alt_data_end+0xfffd0dc4>
    28f0:	dc402617 	ldw	r17,152(sp)
    28f4:	d8c02017 	ldw	r3,128(sp)
    28f8:	d8801f17 	ldw	r2,124(sp)
    28fc:	da000404 	addi	r8,sp,16
    2900:	003ed606 	br	245c <__alt_data_end+0xfffd245c>
    2904:	182b883a 	mov	r21,r3
    2908:	d8002a15 	stw	zero,168(sp)
    290c:	00388c06 	br	b40 <__alt_data_end+0xfffd0b40>
    2910:	d8802a17 	ldw	r2,168(sp)
    2914:	103e071e 	bne	r2,zero,2134 <__alt_data_end+0xfffd2134>
    2918:	dc002a15 	stw	r16,168(sp)
    291c:	003e0506 	br	2134 <__alt_data_end+0xfffd2134>
    2920:	d9002a17 	ldw	r4,168(sp)
    2924:	20c00044 	addi	r3,r4,1
    2928:	003e0f06 	br	2168 <__alt_data_end+0xfffd2168>
    292c:	01400184 	movi	r5,6
    2930:	d9402a15 	stw	r5,168(sp)
    2934:	003dff06 	br	2134 <__alt_data_end+0xfffd2134>
    2938:	d8802104 	addi	r2,sp,132
    293c:	d8800315 	stw	r2,12(sp)
    2940:	d8802504 	addi	r2,sp,148
    2944:	d8800215 	stw	r2,8(sp)
    2948:	d8802604 	addi	r2,sp,152
    294c:	d8800115 	stw	r2,4(sp)
    2950:	d8802a17 	ldw	r2,168(sp)
    2954:	d9403617 	ldw	r5,216(sp)
    2958:	d9002d17 	ldw	r4,180(sp)
    295c:	d8800015 	stw	r2,0(sp)
    2960:	01c000c4 	movi	r7,3
    2964:	980d883a 	mov	r6,r19
    2968:	da003d15 	stw	r8,244(sp)
    296c:	00030e40 	call	30e4 <_dtoa_r>
    2970:	d8c02a17 	ldw	r3,168(sp)
    2974:	da003d17 	ldw	r8,244(sp)
    2978:	1021883a 	mov	r16,r2
    297c:	10f9883a 	add	fp,r2,r3
    2980:	81000007 	ldb	r4,0(r16)
    2984:	00800c04 	movi	r2,48
    2988:	20805e26 	beq	r4,r2,2b04 <___vfprintf_internal_r+0x2150>
    298c:	d8c02617 	ldw	r3,152(sp)
    2990:	e0f9883a 	add	fp,fp,r3
    2994:	003e0a06 	br	21c0 <__alt_data_end+0xfffd21c0>
    2998:	00c00b44 	movi	r3,45
    299c:	24e0003c 	xorhi	r19,r4,32768
    29a0:	d8c02905 	stb	r3,164(sp)
    29a4:	003de906 	br	214c <__alt_data_end+0xfffd214c>
    29a8:	d8c03217 	ldw	r3,200(sp)
    29ac:	00c07a0e 	bge	zero,r3,2b98 <___vfprintf_internal_r+0x21e4>
    29b0:	00800044 	movi	r2,1
    29b4:	d9003317 	ldw	r4,204(sp)
    29b8:	1105883a 	add	r2,r2,r4
    29bc:	d8802b15 	stw	r2,172(sp)
    29c0:	10004e16 	blt	r2,zero,2afc <___vfprintf_internal_r+0x2148>
    29c4:	044019c4 	movi	r17,103
    29c8:	003e2106 	br	2250 <__alt_data_end+0xfffd2250>
    29cc:	d9002a17 	ldw	r4,168(sp)
    29d0:	d8802104 	addi	r2,sp,132
    29d4:	d8800315 	stw	r2,12(sp)
    29d8:	d9000015 	stw	r4,0(sp)
    29dc:	d8802504 	addi	r2,sp,148
    29e0:	d9403617 	ldw	r5,216(sp)
    29e4:	d9002d17 	ldw	r4,180(sp)
    29e8:	d8800215 	stw	r2,8(sp)
    29ec:	d8802604 	addi	r2,sp,152
    29f0:	d8800115 	stw	r2,4(sp)
    29f4:	01c000c4 	movi	r7,3
    29f8:	980d883a 	mov	r6,r19
    29fc:	da003d15 	stw	r8,244(sp)
    2a00:	00030e40 	call	30e4 <_dtoa_r>
    2a04:	d8c02a17 	ldw	r3,168(sp)
    2a08:	da003d17 	ldw	r8,244(sp)
    2a0c:	1021883a 	mov	r16,r2
    2a10:	00801184 	movi	r2,70
    2a14:	80f9883a 	add	fp,r16,r3
    2a18:	88bfd926 	beq	r17,r2,2980 <__alt_data_end+0xfffd2980>
    2a1c:	003de806 	br	21c0 <__alt_data_end+0xfffd21c0>
    2a20:	d9002a17 	ldw	r4,168(sp)
    2a24:	00c04d0e 	bge	zero,r3,2b5c <___vfprintf_internal_r+0x21a8>
    2a28:	2000441e 	bne	r4,zero,2b3c <___vfprintf_internal_r+0x2188>
    2a2c:	9480004c 	andi	r18,r18,1
    2a30:	9000421e 	bne	r18,zero,2b3c <___vfprintf_internal_r+0x2188>
    2a34:	1805883a 	mov	r2,r3
    2a38:	18006f16 	blt	r3,zero,2bf8 <___vfprintf_internal_r+0x2244>
    2a3c:	d8c03217 	ldw	r3,200(sp)
    2a40:	d8c02b15 	stw	r3,172(sp)
    2a44:	003e0206 	br	2250 <__alt_data_end+0xfffd2250>
    2a48:	df0022c4 	addi	fp,sp,139
    2a4c:	dc002a15 	stw	r16,168(sp)
    2a50:	4027883a 	mov	r19,r8
    2a54:	e021883a 	mov	r16,fp
    2a58:	b009883a 	mov	r4,r22
    2a5c:	01400284 	movi	r5,10
    2a60:	00008180 	call	818 <__modsi3>
    2a64:	10800c04 	addi	r2,r2,48
    2a68:	843fffc4 	addi	r16,r16,-1
    2a6c:	b009883a 	mov	r4,r22
    2a70:	01400284 	movi	r5,10
    2a74:	80800005 	stb	r2,0(r16)
    2a78:	00007940 	call	794 <__divsi3>
    2a7c:	102d883a 	mov	r22,r2
    2a80:	00800244 	movi	r2,9
    2a84:	15bff416 	blt	r2,r22,2a58 <__alt_data_end+0xfffd2a58>
    2a88:	9811883a 	mov	r8,r19
    2a8c:	b0800c04 	addi	r2,r22,48
    2a90:	8027883a 	mov	r19,r16
    2a94:	997fffc4 	addi	r5,r19,-1
    2a98:	98bfffc5 	stb	r2,-1(r19)
    2a9c:	dc002a17 	ldw	r16,168(sp)
    2aa0:	2f006d2e 	bgeu	r5,fp,2c58 <___vfprintf_internal_r+0x22a4>
    2aa4:	d9c02384 	addi	r7,sp,142
    2aa8:	3ccfc83a 	sub	r7,r7,r19
    2aac:	d9002344 	addi	r4,sp,141
    2ab0:	e1cf883a 	add	r7,fp,r7
    2ab4:	00000106 	br	2abc <___vfprintf_internal_r+0x2108>
    2ab8:	28800003 	ldbu	r2,0(r5)
    2abc:	20800005 	stb	r2,0(r4)
    2ac0:	21000044 	addi	r4,r4,1
    2ac4:	29400044 	addi	r5,r5,1
    2ac8:	393ffb1e 	bne	r7,r4,2ab8 <__alt_data_end+0xfffd2ab8>
    2acc:	d8802304 	addi	r2,sp,140
    2ad0:	14c5c83a 	sub	r2,r2,r19
    2ad4:	d8c02344 	addi	r3,sp,141
    2ad8:	1885883a 	add	r2,r3,r2
    2adc:	003f7006 	br	28a0 <__alt_data_end+0xfffd28a0>
    2ae0:	0005883a 	mov	r2,zero
    2ae4:	003f0f06 	br	2724 <__alt_data_end+0xfffd2724>
    2ae8:	d8c03217 	ldw	r3,200(sp)
    2aec:	18c00044 	addi	r3,r3,1
    2af0:	d8c02b15 	stw	r3,172(sp)
    2af4:	1805883a 	mov	r2,r3
    2af8:	183fb20e 	bge	r3,zero,29c4 <__alt_data_end+0xfffd29c4>
    2afc:	0005883a 	mov	r2,zero
    2b00:	003fb006 	br	29c4 <__alt_data_end+0xfffd29c4>
    2b04:	d9003617 	ldw	r4,216(sp)
    2b08:	000d883a 	mov	r6,zero
    2b0c:	000f883a 	mov	r7,zero
    2b10:	980b883a 	mov	r5,r19
    2b14:	d8c03c15 	stw	r3,240(sp)
    2b18:	da003d15 	stw	r8,244(sp)
    2b1c:	000bfd80 	call	bfd8 <__eqdf2>
    2b20:	d8c03c17 	ldw	r3,240(sp)
    2b24:	da003d17 	ldw	r8,244(sp)
    2b28:	103f9826 	beq	r2,zero,298c <__alt_data_end+0xfffd298c>
    2b2c:	00800044 	movi	r2,1
    2b30:	10c7c83a 	sub	r3,r2,r3
    2b34:	d8c02615 	stw	r3,152(sp)
    2b38:	003f9506 	br	2990 <__alt_data_end+0xfffd2990>
    2b3c:	d9002a17 	ldw	r4,168(sp)
    2b40:	d8c03217 	ldw	r3,200(sp)
    2b44:	20800044 	addi	r2,r4,1
    2b48:	1885883a 	add	r2,r3,r2
    2b4c:	d8802b15 	stw	r2,172(sp)
    2b50:	103dbf0e 	bge	r2,zero,2250 <__alt_data_end+0xfffd2250>
    2b54:	0005883a 	mov	r2,zero
    2b58:	003dbd06 	br	2250 <__alt_data_end+0xfffd2250>
    2b5c:	2000201e 	bne	r4,zero,2be0 <___vfprintf_internal_r+0x222c>
    2b60:	9480004c 	andi	r18,r18,1
    2b64:	90001e1e 	bne	r18,zero,2be0 <___vfprintf_internal_r+0x222c>
    2b68:	00800044 	movi	r2,1
    2b6c:	d8802b15 	stw	r2,172(sp)
    2b70:	003db706 	br	2250 <__alt_data_end+0xfffd2250>
    2b74:	00800b44 	movi	r2,45
    2b78:	05adc83a 	sub	r22,zero,r22
    2b7c:	d8802305 	stb	r2,140(sp)
    2b80:	003f3f06 	br	2880 <__alt_data_end+0xfffd2880>
    2b84:	0005883a 	mov	r2,zero
    2b88:	003f5206 	br	28d4 <__alt_data_end+0xfffd28d4>
    2b8c:	90a4703a 	and	r18,r18,r2
    2b90:	903f4e26 	beq	r18,zero,28cc <__alt_data_end+0xfffd28cc>
    2b94:	003f4a06 	br	28c0 <__alt_data_end+0xfffd28c0>
    2b98:	00800084 	movi	r2,2
    2b9c:	10c5c83a 	sub	r2,r2,r3
    2ba0:	003f8406 	br	29b4 <__alt_data_end+0xfffd29b4>
    2ba4:	d9402e17 	ldw	r5,184(sp)
    2ba8:	d9002e17 	ldw	r4,184(sp)
    2bac:	ac400043 	ldbu	r17,1(r21)
    2bb0:	29400017 	ldw	r5,0(r5)
    2bb4:	20800104 	addi	r2,r4,4
    2bb8:	d8802e15 	stw	r2,184(sp)
    2bbc:	d9402a15 	stw	r5,168(sp)
    2bc0:	182b883a 	mov	r21,r3
    2bc4:	283e7b0e 	bge	r5,zero,25b4 <__alt_data_end+0xfffd25b4>
    2bc8:	8c403fcc 	andi	r17,r17,255
    2bcc:	017fffc4 	movi	r5,-1
    2bd0:	8c40201c 	xori	r17,r17,128
    2bd4:	d9402a15 	stw	r5,168(sp)
    2bd8:	8c7fe004 	addi	r17,r17,-128
    2bdc:	0037d706 	br	b3c <__alt_data_end+0xfffd0b3c>
    2be0:	d8c02a17 	ldw	r3,168(sp)
    2be4:	18c00084 	addi	r3,r3,2
    2be8:	d8c02b15 	stw	r3,172(sp)
    2bec:	1805883a 	mov	r2,r3
    2bf0:	183d970e 	bge	r3,zero,2250 <__alt_data_end+0xfffd2250>
    2bf4:	003fd706 	br	2b54 <__alt_data_end+0xfffd2b54>
    2bf8:	0005883a 	mov	r2,zero
    2bfc:	003f8f06 	br	2a3c <__alt_data_end+0xfffd2a3c>
    2c00:	9080004c 	andi	r2,r18,1
    2c04:	103f821e 	bne	r2,zero,2a10 <__alt_data_end+0xfffd2a10>
    2c08:	d8802117 	ldw	r2,132(sp)
    2c0c:	1405c83a 	sub	r2,r2,r16
    2c10:	d8803315 	stw	r2,204(sp)
    2c14:	b47ef426 	beq	r22,r17,27e8 <__alt_data_end+0xfffd27e8>
    2c18:	dd802617 	ldw	r22,152(sp)
    2c1c:	003f1206 	br	2868 <__alt_data_end+0xfffd2868>
    2c20:	d8c02b03 	ldbu	r3,172(sp)
    2c24:	d8c02785 	stb	r3,158(sp)
    2c28:	0038df06 	br	fa8 <__alt_data_end+0xfffd0fa8>
    2c2c:	d8c02b03 	ldbu	r3,172(sp)
    2c30:	d8c02785 	stb	r3,158(sp)
    2c34:	0038aa06 	br	ee0 <__alt_data_end+0xfffd0ee0>
    2c38:	d8c02b03 	ldbu	r3,172(sp)
    2c3c:	d8c02785 	stb	r3,158(sp)
    2c40:	003a4306 	br	1550 <__alt_data_end+0xfffd1550>
    2c44:	d8c02b03 	ldbu	r3,172(sp)
    2c48:	d8c02785 	stb	r3,158(sp)
    2c4c:	003af506 	br	1824 <__alt_data_end+0xfffd1824>
    2c50:	0005883a 	mov	r2,zero
    2c54:	003d7b06 	br	2244 <__alt_data_end+0xfffd2244>
    2c58:	d8802344 	addi	r2,sp,141
    2c5c:	003f1006 	br	28a0 <__alt_data_end+0xfffd28a0>
    2c60:	d8c02b03 	ldbu	r3,172(sp)
    2c64:	d8c02785 	stb	r3,158(sp)
    2c68:	0038fd06 	br	1060 <__alt_data_end+0xfffd1060>
    2c6c:	d8c02b03 	ldbu	r3,172(sp)
    2c70:	d8c02785 	stb	r3,158(sp)
    2c74:	003a9706 	br	16d4 <__alt_data_end+0xfffd16d4>
    2c78:	d8c02b03 	ldbu	r3,172(sp)
    2c7c:	d8c02785 	stb	r3,158(sp)
    2c80:	003a1806 	br	14e4 <__alt_data_end+0xfffd14e4>
    2c84:	d8c02b03 	ldbu	r3,172(sp)
    2c88:	d8c02785 	stb	r3,158(sp)
    2c8c:	003abe06 	br	1788 <__alt_data_end+0xfffd1788>

00002c90 <__vfprintf_internal>:
    2c90:	008000b4 	movhi	r2,2
    2c94:	10a74e04 	addi	r2,r2,-25288
    2c98:	300f883a 	mov	r7,r6
    2c9c:	280d883a 	mov	r6,r5
    2ca0:	200b883a 	mov	r5,r4
    2ca4:	11000017 	ldw	r4,0(r2)
    2ca8:	00009b41 	jmpi	9b4 <___vfprintf_internal_r>

00002cac <__sbprintf>:
    2cac:	2880030b 	ldhu	r2,12(r5)
    2cb0:	2ac01917 	ldw	r11,100(r5)
    2cb4:	2a80038b 	ldhu	r10,14(r5)
    2cb8:	2a400717 	ldw	r9,28(r5)
    2cbc:	2a000917 	ldw	r8,36(r5)
    2cc0:	defee204 	addi	sp,sp,-1144
    2cc4:	00c10004 	movi	r3,1024
    2cc8:	dc011a15 	stw	r16,1128(sp)
    2ccc:	10bfff4c 	andi	r2,r2,65533
    2cd0:	2821883a 	mov	r16,r5
    2cd4:	d8cb883a 	add	r5,sp,r3
    2cd8:	dc811c15 	stw	r18,1136(sp)
    2cdc:	dc411b15 	stw	r17,1132(sp)
    2ce0:	dfc11d15 	stw	ra,1140(sp)
    2ce4:	2025883a 	mov	r18,r4
    2ce8:	d881030d 	sth	r2,1036(sp)
    2cec:	dac11915 	stw	r11,1124(sp)
    2cf0:	da81038d 	sth	r10,1038(sp)
    2cf4:	da410715 	stw	r9,1052(sp)
    2cf8:	da010915 	stw	r8,1060(sp)
    2cfc:	dec10015 	stw	sp,1024(sp)
    2d00:	dec10415 	stw	sp,1040(sp)
    2d04:	d8c10215 	stw	r3,1032(sp)
    2d08:	d8c10515 	stw	r3,1044(sp)
    2d0c:	d8010615 	stw	zero,1048(sp)
    2d10:	00009b40 	call	9b4 <___vfprintf_internal_r>
    2d14:	1023883a 	mov	r17,r2
    2d18:	10000416 	blt	r2,zero,2d2c <__sbprintf+0x80>
    2d1c:	d9410004 	addi	r5,sp,1024
    2d20:	9009883a 	mov	r4,r18
    2d24:	00049880 	call	4988 <_fflush_r>
    2d28:	10000d1e 	bne	r2,zero,2d60 <__sbprintf+0xb4>
    2d2c:	d881030b 	ldhu	r2,1036(sp)
    2d30:	1080100c 	andi	r2,r2,64
    2d34:	10000326 	beq	r2,zero,2d44 <__sbprintf+0x98>
    2d38:	8080030b 	ldhu	r2,12(r16)
    2d3c:	10801014 	ori	r2,r2,64
    2d40:	8080030d 	sth	r2,12(r16)
    2d44:	8805883a 	mov	r2,r17
    2d48:	dfc11d17 	ldw	ra,1140(sp)
    2d4c:	dc811c17 	ldw	r18,1136(sp)
    2d50:	dc411b17 	ldw	r17,1132(sp)
    2d54:	dc011a17 	ldw	r16,1128(sp)
    2d58:	dec11e04 	addi	sp,sp,1144
    2d5c:	f800283a 	ret
    2d60:	047fffc4 	movi	r17,-1
    2d64:	003ff106 	br	2d2c <__alt_data_end+0xfffd2d2c>

00002d68 <__swsetup_r>:
    2d68:	008000b4 	movhi	r2,2
    2d6c:	defffd04 	addi	sp,sp,-12
    2d70:	10a74e04 	addi	r2,r2,-25288
    2d74:	dc400115 	stw	r17,4(sp)
    2d78:	2023883a 	mov	r17,r4
    2d7c:	11000017 	ldw	r4,0(r2)
    2d80:	dc000015 	stw	r16,0(sp)
    2d84:	dfc00215 	stw	ra,8(sp)
    2d88:	2821883a 	mov	r16,r5
    2d8c:	20000226 	beq	r4,zero,2d98 <__swsetup_r+0x30>
    2d90:	20800e17 	ldw	r2,56(r4)
    2d94:	10003126 	beq	r2,zero,2e5c <__swsetup_r+0xf4>
    2d98:	8080030b 	ldhu	r2,12(r16)
    2d9c:	10c0020c 	andi	r3,r2,8
    2da0:	1009883a 	mov	r4,r2
    2da4:	18000f26 	beq	r3,zero,2de4 <__swsetup_r+0x7c>
    2da8:	80c00417 	ldw	r3,16(r16)
    2dac:	18001526 	beq	r3,zero,2e04 <__swsetup_r+0x9c>
    2db0:	1100004c 	andi	r4,r2,1
    2db4:	20001c1e 	bne	r4,zero,2e28 <__swsetup_r+0xc0>
    2db8:	1080008c 	andi	r2,r2,2
    2dbc:	1000291e 	bne	r2,zero,2e64 <__swsetup_r+0xfc>
    2dc0:	80800517 	ldw	r2,20(r16)
    2dc4:	80800215 	stw	r2,8(r16)
    2dc8:	18001c26 	beq	r3,zero,2e3c <__swsetup_r+0xd4>
    2dcc:	0005883a 	mov	r2,zero
    2dd0:	dfc00217 	ldw	ra,8(sp)
    2dd4:	dc400117 	ldw	r17,4(sp)
    2dd8:	dc000017 	ldw	r16,0(sp)
    2ddc:	dec00304 	addi	sp,sp,12
    2de0:	f800283a 	ret
    2de4:	2080040c 	andi	r2,r4,16
    2de8:	10002e26 	beq	r2,zero,2ea4 <__swsetup_r+0x13c>
    2dec:	2080010c 	andi	r2,r4,4
    2df0:	10001e1e 	bne	r2,zero,2e6c <__swsetup_r+0x104>
    2df4:	80c00417 	ldw	r3,16(r16)
    2df8:	20800214 	ori	r2,r4,8
    2dfc:	8080030d 	sth	r2,12(r16)
    2e00:	183feb1e 	bne	r3,zero,2db0 <__alt_data_end+0xfffd2db0>
    2e04:	1100a00c 	andi	r4,r2,640
    2e08:	01408004 	movi	r5,512
    2e0c:	217fe826 	beq	r4,r5,2db0 <__alt_data_end+0xfffd2db0>
    2e10:	800b883a 	mov	r5,r16
    2e14:	8809883a 	mov	r4,r17
    2e18:	000545c0 	call	545c <__smakebuf_r>
    2e1c:	8080030b 	ldhu	r2,12(r16)
    2e20:	80c00417 	ldw	r3,16(r16)
    2e24:	003fe206 	br	2db0 <__alt_data_end+0xfffd2db0>
    2e28:	80800517 	ldw	r2,20(r16)
    2e2c:	80000215 	stw	zero,8(r16)
    2e30:	0085c83a 	sub	r2,zero,r2
    2e34:	80800615 	stw	r2,24(r16)
    2e38:	183fe41e 	bne	r3,zero,2dcc <__alt_data_end+0xfffd2dcc>
    2e3c:	80c0030b 	ldhu	r3,12(r16)
    2e40:	0005883a 	mov	r2,zero
    2e44:	1900200c 	andi	r4,r3,128
    2e48:	203fe126 	beq	r4,zero,2dd0 <__alt_data_end+0xfffd2dd0>
    2e4c:	18c01014 	ori	r3,r3,64
    2e50:	80c0030d 	sth	r3,12(r16)
    2e54:	00bfffc4 	movi	r2,-1
    2e58:	003fdd06 	br	2dd0 <__alt_data_end+0xfffd2dd0>
    2e5c:	0004d740 	call	4d74 <__sinit>
    2e60:	003fcd06 	br	2d98 <__alt_data_end+0xfffd2d98>
    2e64:	0005883a 	mov	r2,zero
    2e68:	003fd606 	br	2dc4 <__alt_data_end+0xfffd2dc4>
    2e6c:	81400c17 	ldw	r5,48(r16)
    2e70:	28000626 	beq	r5,zero,2e8c <__swsetup_r+0x124>
    2e74:	80801004 	addi	r2,r16,64
    2e78:	28800326 	beq	r5,r2,2e88 <__swsetup_r+0x120>
    2e7c:	8809883a 	mov	r4,r17
    2e80:	0004ee80 	call	4ee8 <_free_r>
    2e84:	8100030b 	ldhu	r4,12(r16)
    2e88:	80000c15 	stw	zero,48(r16)
    2e8c:	80c00417 	ldw	r3,16(r16)
    2e90:	00bff6c4 	movi	r2,-37
    2e94:	1108703a 	and	r4,r2,r4
    2e98:	80000115 	stw	zero,4(r16)
    2e9c:	80c00015 	stw	r3,0(r16)
    2ea0:	003fd506 	br	2df8 <__alt_data_end+0xfffd2df8>
    2ea4:	00800244 	movi	r2,9
    2ea8:	88800015 	stw	r2,0(r17)
    2eac:	20801014 	ori	r2,r4,64
    2eb0:	8080030d 	sth	r2,12(r16)
    2eb4:	00bfffc4 	movi	r2,-1
    2eb8:	003fc506 	br	2dd0 <__alt_data_end+0xfffd2dd0>

00002ebc <quorem>:
    2ebc:	defff204 	addi	sp,sp,-56
    2ec0:	ddc00b15 	stw	r23,44(sp)
    2ec4:	20800417 	ldw	r2,16(r4)
    2ec8:	2dc00417 	ldw	r23,16(r5)
    2ecc:	dfc00d15 	stw	ra,52(sp)
    2ed0:	df000c15 	stw	fp,48(sp)
    2ed4:	dd800a15 	stw	r22,40(sp)
    2ed8:	dd400915 	stw	r21,36(sp)
    2edc:	dd000815 	stw	r20,32(sp)
    2ee0:	dcc00715 	stw	r19,28(sp)
    2ee4:	dc800615 	stw	r18,24(sp)
    2ee8:	dc400515 	stw	r17,20(sp)
    2eec:	dc000415 	stw	r16,16(sp)
    2ef0:	15c07a16 	blt	r2,r23,30dc <quorem+0x220>
    2ef4:	bdffffc4 	addi	r23,r23,-1
    2ef8:	bde9883a 	add	r20,r23,r23
    2efc:	28c00504 	addi	r3,r5,20
    2f00:	a529883a 	add	r20,r20,r20
    2f04:	1d39883a 	add	fp,r3,r20
    2f08:	24c00504 	addi	r19,r4,20
    2f0c:	d9400215 	stw	r5,8(sp)
    2f10:	9d29883a 	add	r20,r19,r20
    2f14:	e1400017 	ldw	r5,0(fp)
    2f18:	d9000015 	stw	r4,0(sp)
    2f1c:	a1000017 	ldw	r4,0(r20)
    2f20:	29400044 	addi	r5,r5,1
    2f24:	d8c00115 	stw	r3,4(sp)
    2f28:	dd000315 	stw	r20,12(sp)
    2f2c:	000088c0 	call	88c <__udivsi3>
    2f30:	1025883a 	mov	r18,r2
    2f34:	10003026 	beq	r2,zero,2ff8 <quorem+0x13c>
    2f38:	dc400117 	ldw	r17,4(sp)
    2f3c:	9829883a 	mov	r20,r19
    2f40:	002d883a 	mov	r22,zero
    2f44:	0021883a 	mov	r16,zero
    2f48:	8d400017 	ldw	r21,0(r17)
    2f4c:	900b883a 	mov	r5,r18
    2f50:	8c400104 	addi	r17,r17,4
    2f54:	a93fffcc 	andi	r4,r21,65535
    2f58:	000ad340 	call	ad34 <__mulsi3>
    2f5c:	a808d43a 	srli	r4,r21,16
    2f60:	900b883a 	mov	r5,r18
    2f64:	15ad883a 	add	r22,r2,r22
    2f68:	000ad340 	call	ad34 <__mulsi3>
    2f6c:	a1000017 	ldw	r4,0(r20)
    2f70:	b00cd43a 	srli	r6,r22,16
    2f74:	b0ffffcc 	andi	r3,r22,65535
    2f78:	217fffcc 	andi	r5,r4,65535
    2f7c:	2c21883a 	add	r16,r5,r16
    2f80:	80c7c83a 	sub	r3,r16,r3
    2f84:	2008d43a 	srli	r4,r4,16
    2f88:	1185883a 	add	r2,r2,r6
    2f8c:	1821d43a 	srai	r16,r3,16
    2f90:	117fffcc 	andi	r5,r2,65535
    2f94:	2149c83a 	sub	r4,r4,r5
    2f98:	2421883a 	add	r16,r4,r16
    2f9c:	8008943a 	slli	r4,r16,16
    2fa0:	18ffffcc 	andi	r3,r3,65535
    2fa4:	102cd43a 	srli	r22,r2,16
    2fa8:	20c8b03a 	or	r4,r4,r3
    2fac:	a1000015 	stw	r4,0(r20)
    2fb0:	8021d43a 	srai	r16,r16,16
    2fb4:	a5000104 	addi	r20,r20,4
    2fb8:	e47fe32e 	bgeu	fp,r17,2f48 <__alt_data_end+0xfffd2f48>
    2fbc:	d8c00317 	ldw	r3,12(sp)
    2fc0:	18800017 	ldw	r2,0(r3)
    2fc4:	10000c1e 	bne	r2,zero,2ff8 <quorem+0x13c>
    2fc8:	18bfff04 	addi	r2,r3,-4
    2fcc:	9880082e 	bgeu	r19,r2,2ff0 <quorem+0x134>
    2fd0:	18ffff17 	ldw	r3,-4(r3)
    2fd4:	18000326 	beq	r3,zero,2fe4 <quorem+0x128>
    2fd8:	00000506 	br	2ff0 <quorem+0x134>
    2fdc:	10c00017 	ldw	r3,0(r2)
    2fe0:	1800031e 	bne	r3,zero,2ff0 <quorem+0x134>
    2fe4:	10bfff04 	addi	r2,r2,-4
    2fe8:	bdffffc4 	addi	r23,r23,-1
    2fec:	98bffb36 	bltu	r19,r2,2fdc <__alt_data_end+0xfffd2fdc>
    2ff0:	d8c00017 	ldw	r3,0(sp)
    2ff4:	1dc00415 	stw	r23,16(r3)
    2ff8:	d9400217 	ldw	r5,8(sp)
    2ffc:	d9000017 	ldw	r4,0(sp)
    3000:	0006afc0 	call	6afc <__mcmp>
    3004:	10002816 	blt	r2,zero,30a8 <quorem+0x1ec>
    3008:	dc400117 	ldw	r17,4(sp)
    300c:	94800044 	addi	r18,r18,1
    3010:	980d883a 	mov	r6,r19
    3014:	0007883a 	mov	r3,zero
    3018:	31000017 	ldw	r4,0(r6)
    301c:	89400017 	ldw	r5,0(r17)
    3020:	31800104 	addi	r6,r6,4
    3024:	20bfffcc 	andi	r2,r4,65535
    3028:	10c7883a 	add	r3,r2,r3
    302c:	28bfffcc 	andi	r2,r5,65535
    3030:	1885c83a 	sub	r2,r3,r2
    3034:	280ad43a 	srli	r5,r5,16
    3038:	2008d43a 	srli	r4,r4,16
    303c:	1007d43a 	srai	r3,r2,16
    3040:	10bfffcc 	andi	r2,r2,65535
    3044:	2149c83a 	sub	r4,r4,r5
    3048:	20c9883a 	add	r4,r4,r3
    304c:	200a943a 	slli	r5,r4,16
    3050:	8c400104 	addi	r17,r17,4
    3054:	2007d43a 	srai	r3,r4,16
    3058:	2884b03a 	or	r2,r5,r2
    305c:	30bfff15 	stw	r2,-4(r6)
    3060:	e47fed2e 	bgeu	fp,r17,3018 <__alt_data_end+0xfffd3018>
    3064:	bdc5883a 	add	r2,r23,r23
    3068:	1085883a 	add	r2,r2,r2
    306c:	9887883a 	add	r3,r19,r2
    3070:	18800017 	ldw	r2,0(r3)
    3074:	10000c1e 	bne	r2,zero,30a8 <quorem+0x1ec>
    3078:	18bfff04 	addi	r2,r3,-4
    307c:	9880082e 	bgeu	r19,r2,30a0 <quorem+0x1e4>
    3080:	18ffff17 	ldw	r3,-4(r3)
    3084:	18000326 	beq	r3,zero,3094 <quorem+0x1d8>
    3088:	00000506 	br	30a0 <quorem+0x1e4>
    308c:	10c00017 	ldw	r3,0(r2)
    3090:	1800031e 	bne	r3,zero,30a0 <quorem+0x1e4>
    3094:	10bfff04 	addi	r2,r2,-4
    3098:	bdffffc4 	addi	r23,r23,-1
    309c:	98bffb36 	bltu	r19,r2,308c <__alt_data_end+0xfffd308c>
    30a0:	d8c00017 	ldw	r3,0(sp)
    30a4:	1dc00415 	stw	r23,16(r3)
    30a8:	9005883a 	mov	r2,r18
    30ac:	dfc00d17 	ldw	ra,52(sp)
    30b0:	df000c17 	ldw	fp,48(sp)
    30b4:	ddc00b17 	ldw	r23,44(sp)
    30b8:	dd800a17 	ldw	r22,40(sp)
    30bc:	dd400917 	ldw	r21,36(sp)
    30c0:	dd000817 	ldw	r20,32(sp)
    30c4:	dcc00717 	ldw	r19,28(sp)
    30c8:	dc800617 	ldw	r18,24(sp)
    30cc:	dc400517 	ldw	r17,20(sp)
    30d0:	dc000417 	ldw	r16,16(sp)
    30d4:	dec00e04 	addi	sp,sp,56
    30d8:	f800283a 	ret
    30dc:	0005883a 	mov	r2,zero
    30e0:	003ff206 	br	30ac <__alt_data_end+0xfffd30ac>

000030e4 <_dtoa_r>:
    30e4:	20801017 	ldw	r2,64(r4)
    30e8:	deffde04 	addi	sp,sp,-136
    30ec:	df002015 	stw	fp,128(sp)
    30f0:	dcc01b15 	stw	r19,108(sp)
    30f4:	dc801a15 	stw	r18,104(sp)
    30f8:	dc401915 	stw	r17,100(sp)
    30fc:	dc001815 	stw	r16,96(sp)
    3100:	dfc02115 	stw	ra,132(sp)
    3104:	ddc01f15 	stw	r23,124(sp)
    3108:	dd801e15 	stw	r22,120(sp)
    310c:	dd401d15 	stw	r21,116(sp)
    3110:	dd001c15 	stw	r20,112(sp)
    3114:	d9c00315 	stw	r7,12(sp)
    3118:	2039883a 	mov	fp,r4
    311c:	3023883a 	mov	r17,r6
    3120:	2825883a 	mov	r18,r5
    3124:	dc002417 	ldw	r16,144(sp)
    3128:	3027883a 	mov	r19,r6
    312c:	10000826 	beq	r2,zero,3150 <_dtoa_r+0x6c>
    3130:	21801117 	ldw	r6,68(r4)
    3134:	00c00044 	movi	r3,1
    3138:	100b883a 	mov	r5,r2
    313c:	1986983a 	sll	r3,r3,r6
    3140:	11800115 	stw	r6,4(r2)
    3144:	10c00215 	stw	r3,8(r2)
    3148:	00062200 	call	6220 <_Bfree>
    314c:	e0001015 	stw	zero,64(fp)
    3150:	88002e16 	blt	r17,zero,320c <_dtoa_r+0x128>
    3154:	80000015 	stw	zero,0(r16)
    3158:	889ffc2c 	andhi	r2,r17,32752
    315c:	00dffc34 	movhi	r3,32752
    3160:	10c01c26 	beq	r2,r3,31d4 <_dtoa_r+0xf0>
    3164:	000d883a 	mov	r6,zero
    3168:	000f883a 	mov	r7,zero
    316c:	9009883a 	mov	r4,r18
    3170:	980b883a 	mov	r5,r19
    3174:	000bfd80 	call	bfd8 <__eqdf2>
    3178:	10002b1e 	bne	r2,zero,3228 <_dtoa_r+0x144>
    317c:	d9c02317 	ldw	r7,140(sp)
    3180:	00800044 	movi	r2,1
    3184:	38800015 	stw	r2,0(r7)
    3188:	d8802517 	ldw	r2,148(sp)
    318c:	10019e26 	beq	r2,zero,3808 <_dtoa_r+0x724>
    3190:	d8c02517 	ldw	r3,148(sp)
    3194:	00800074 	movhi	r2,1
    3198:	109fab44 	addi	r2,r2,32429
    319c:	18800015 	stw	r2,0(r3)
    31a0:	10bfffc4 	addi	r2,r2,-1
    31a4:	dfc02117 	ldw	ra,132(sp)
    31a8:	df002017 	ldw	fp,128(sp)
    31ac:	ddc01f17 	ldw	r23,124(sp)
    31b0:	dd801e17 	ldw	r22,120(sp)
    31b4:	dd401d17 	ldw	r21,116(sp)
    31b8:	dd001c17 	ldw	r20,112(sp)
    31bc:	dcc01b17 	ldw	r19,108(sp)
    31c0:	dc801a17 	ldw	r18,104(sp)
    31c4:	dc401917 	ldw	r17,100(sp)
    31c8:	dc001817 	ldw	r16,96(sp)
    31cc:	dec02204 	addi	sp,sp,136
    31d0:	f800283a 	ret
    31d4:	d8c02317 	ldw	r3,140(sp)
    31d8:	0089c3c4 	movi	r2,9999
    31dc:	18800015 	stw	r2,0(r3)
    31e0:	90017726 	beq	r18,zero,37c0 <_dtoa_r+0x6dc>
    31e4:	00800074 	movhi	r2,1
    31e8:	109fb704 	addi	r2,r2,32476
    31ec:	d9002517 	ldw	r4,148(sp)
    31f0:	203fec26 	beq	r4,zero,31a4 <__alt_data_end+0xfffd31a4>
    31f4:	10c000c7 	ldb	r3,3(r2)
    31f8:	1801781e 	bne	r3,zero,37dc <_dtoa_r+0x6f8>
    31fc:	10c000c4 	addi	r3,r2,3
    3200:	d9802517 	ldw	r6,148(sp)
    3204:	30c00015 	stw	r3,0(r6)
    3208:	003fe606 	br	31a4 <__alt_data_end+0xfffd31a4>
    320c:	04e00034 	movhi	r19,32768
    3210:	9cffffc4 	addi	r19,r19,-1
    3214:	00800044 	movi	r2,1
    3218:	8ce6703a 	and	r19,r17,r19
    321c:	80800015 	stw	r2,0(r16)
    3220:	9823883a 	mov	r17,r19
    3224:	003fcc06 	br	3158 <__alt_data_end+0xfffd3158>
    3228:	d8800204 	addi	r2,sp,8
    322c:	d8800015 	stw	r2,0(sp)
    3230:	d9c00104 	addi	r7,sp,4
    3234:	900b883a 	mov	r5,r18
    3238:	980d883a 	mov	r6,r19
    323c:	e009883a 	mov	r4,fp
    3240:	8820d53a 	srli	r16,r17,20
    3244:	0006ec80 	call	6ec8 <__d2b>
    3248:	d8800915 	stw	r2,36(sp)
    324c:	8001651e 	bne	r16,zero,37e4 <_dtoa_r+0x700>
    3250:	dd800217 	ldw	r22,8(sp)
    3254:	dc000117 	ldw	r16,4(sp)
    3258:	00800804 	movi	r2,32
    325c:	b421883a 	add	r16,r22,r16
    3260:	80c10c84 	addi	r3,r16,1074
    3264:	10c2d10e 	bge	r2,r3,3dac <_dtoa_r+0xcc8>
    3268:	00801004 	movi	r2,64
    326c:	81010484 	addi	r4,r16,1042
    3270:	10c7c83a 	sub	r3,r2,r3
    3274:	9108d83a 	srl	r4,r18,r4
    3278:	88e2983a 	sll	r17,r17,r3
    327c:	2448b03a 	or	r4,r4,r17
    3280:	000d4f40 	call	d4f4 <__floatunsidf>
    3284:	017f8434 	movhi	r5,65040
    3288:	01800044 	movi	r6,1
    328c:	1009883a 	mov	r4,r2
    3290:	194b883a 	add	r5,r3,r5
    3294:	843fffc4 	addi	r16,r16,-1
    3298:	d9801115 	stw	r6,68(sp)
    329c:	000d883a 	mov	r6,zero
    32a0:	01cffe34 	movhi	r7,16376
    32a4:	000ca9c0 	call	ca9c <__subdf3>
    32a8:	0198dbf4 	movhi	r6,25455
    32ac:	01cff4f4 	movhi	r7,16339
    32b0:	3190d844 	addi	r6,r6,17249
    32b4:	39e1e9c4 	addi	r7,r7,-30809
    32b8:	1009883a 	mov	r4,r2
    32bc:	180b883a 	mov	r5,r3
    32c0:	000c2300 	call	c230 <__muldf3>
    32c4:	01a2d874 	movhi	r6,35681
    32c8:	01cff1f4 	movhi	r7,16327
    32cc:	31b22cc4 	addi	r6,r6,-14157
    32d0:	39e28a04 	addi	r7,r7,-30168
    32d4:	180b883a 	mov	r5,r3
    32d8:	1009883a 	mov	r4,r2
    32dc:	000ad5c0 	call	ad5c <__adddf3>
    32e0:	8009883a 	mov	r4,r16
    32e4:	1029883a 	mov	r20,r2
    32e8:	1823883a 	mov	r17,r3
    32ec:	000d4180 	call	d418 <__floatsidf>
    32f0:	019427f4 	movhi	r6,20639
    32f4:	01cff4f4 	movhi	r7,16339
    32f8:	319e7ec4 	addi	r6,r6,31227
    32fc:	39d104c4 	addi	r7,r7,17427
    3300:	1009883a 	mov	r4,r2
    3304:	180b883a 	mov	r5,r3
    3308:	000c2300 	call	c230 <__muldf3>
    330c:	100d883a 	mov	r6,r2
    3310:	180f883a 	mov	r7,r3
    3314:	a009883a 	mov	r4,r20
    3318:	880b883a 	mov	r5,r17
    331c:	000ad5c0 	call	ad5c <__adddf3>
    3320:	1009883a 	mov	r4,r2
    3324:	180b883a 	mov	r5,r3
    3328:	1029883a 	mov	r20,r2
    332c:	1823883a 	mov	r17,r3
    3330:	000d3980 	call	d398 <__fixdfsi>
    3334:	000d883a 	mov	r6,zero
    3338:	000f883a 	mov	r7,zero
    333c:	a009883a 	mov	r4,r20
    3340:	880b883a 	mov	r5,r17
    3344:	d8800515 	stw	r2,20(sp)
    3348:	000c13c0 	call	c13c <__ledf2>
    334c:	10028716 	blt	r2,zero,3d6c <_dtoa_r+0xc88>
    3350:	d8c00517 	ldw	r3,20(sp)
    3354:	00800584 	movi	r2,22
    3358:	10c27536 	bltu	r2,r3,3d30 <_dtoa_r+0xc4c>
    335c:	180490fa 	slli	r2,r3,3
    3360:	00c00074 	movhi	r3,1
    3364:	18dfd304 	addi	r3,r3,32588
    3368:	1885883a 	add	r2,r3,r2
    336c:	11000017 	ldw	r4,0(r2)
    3370:	11400117 	ldw	r5,4(r2)
    3374:	900d883a 	mov	r6,r18
    3378:	980f883a 	mov	r7,r19
    337c:	000c0600 	call	c060 <__gedf2>
    3380:	00828d0e 	bge	zero,r2,3db8 <_dtoa_r+0xcd4>
    3384:	d9000517 	ldw	r4,20(sp)
    3388:	d8000e15 	stw	zero,56(sp)
    338c:	213fffc4 	addi	r4,r4,-1
    3390:	d9000515 	stw	r4,20(sp)
    3394:	b42dc83a 	sub	r22,r22,r16
    3398:	b5bfffc4 	addi	r22,r22,-1
    339c:	b0026f16 	blt	r22,zero,3d5c <_dtoa_r+0xc78>
    33a0:	d8000815 	stw	zero,32(sp)
    33a4:	d9c00517 	ldw	r7,20(sp)
    33a8:	38026416 	blt	r7,zero,3d3c <_dtoa_r+0xc58>
    33ac:	b1ed883a 	add	r22,r22,r7
    33b0:	d9c00d15 	stw	r7,52(sp)
    33b4:	d8000a15 	stw	zero,40(sp)
    33b8:	d9800317 	ldw	r6,12(sp)
    33bc:	00800244 	movi	r2,9
    33c0:	11811436 	bltu	r2,r6,3814 <_dtoa_r+0x730>
    33c4:	00800144 	movi	r2,5
    33c8:	1184e10e 	bge	r2,r6,4750 <_dtoa_r+0x166c>
    33cc:	31bfff04 	addi	r6,r6,-4
    33d0:	d9800315 	stw	r6,12(sp)
    33d4:	0023883a 	mov	r17,zero
    33d8:	d9800317 	ldw	r6,12(sp)
    33dc:	008000c4 	movi	r2,3
    33e0:	30836726 	beq	r6,r2,4180 <_dtoa_r+0x109c>
    33e4:	1183410e 	bge	r2,r6,40ec <_dtoa_r+0x1008>
    33e8:	d9c00317 	ldw	r7,12(sp)
    33ec:	00800104 	movi	r2,4
    33f0:	38827c26 	beq	r7,r2,3de4 <_dtoa_r+0xd00>
    33f4:	00800144 	movi	r2,5
    33f8:	3884c41e 	bne	r7,r2,470c <_dtoa_r+0x1628>
    33fc:	00800044 	movi	r2,1
    3400:	d8800b15 	stw	r2,44(sp)
    3404:	d8c00517 	ldw	r3,20(sp)
    3408:	d9002217 	ldw	r4,136(sp)
    340c:	1907883a 	add	r3,r3,r4
    3410:	19800044 	addi	r6,r3,1
    3414:	d8c00c15 	stw	r3,48(sp)
    3418:	d9800615 	stw	r6,24(sp)
    341c:	0183a40e 	bge	zero,r6,42b0 <_dtoa_r+0x11cc>
    3420:	d9800617 	ldw	r6,24(sp)
    3424:	3021883a 	mov	r16,r6
    3428:	e0001115 	stw	zero,68(fp)
    342c:	008005c4 	movi	r2,23
    3430:	1184c92e 	bgeu	r2,r6,4758 <_dtoa_r+0x1674>
    3434:	00c00044 	movi	r3,1
    3438:	00800104 	movi	r2,4
    343c:	1085883a 	add	r2,r2,r2
    3440:	11000504 	addi	r4,r2,20
    3444:	180b883a 	mov	r5,r3
    3448:	18c00044 	addi	r3,r3,1
    344c:	313ffb2e 	bgeu	r6,r4,343c <__alt_data_end+0xfffd343c>
    3450:	e1401115 	stw	r5,68(fp)
    3454:	e009883a 	mov	r4,fp
    3458:	00061780 	call	6178 <_Balloc>
    345c:	d8800715 	stw	r2,28(sp)
    3460:	e0801015 	stw	r2,64(fp)
    3464:	00800384 	movi	r2,14
    3468:	1400f736 	bltu	r2,r16,3848 <_dtoa_r+0x764>
    346c:	8800f626 	beq	r17,zero,3848 <_dtoa_r+0x764>
    3470:	d9c00517 	ldw	r7,20(sp)
    3474:	01c39a0e 	bge	zero,r7,42e0 <_dtoa_r+0x11fc>
    3478:	388003cc 	andi	r2,r7,15
    347c:	100490fa 	slli	r2,r2,3
    3480:	382bd13a 	srai	r21,r7,4
    3484:	00c00074 	movhi	r3,1
    3488:	18dfd304 	addi	r3,r3,32588
    348c:	1885883a 	add	r2,r3,r2
    3490:	a8c0040c 	andi	r3,r21,16
    3494:	12400017 	ldw	r9,0(r2)
    3498:	12000117 	ldw	r8,4(r2)
    349c:	18037926 	beq	r3,zero,4284 <_dtoa_r+0x11a0>
    34a0:	00800074 	movhi	r2,1
    34a4:	109fc904 	addi	r2,r2,32548
    34a8:	11800817 	ldw	r6,32(r2)
    34ac:	11c00917 	ldw	r7,36(r2)
    34b0:	9009883a 	mov	r4,r18
    34b4:	980b883a 	mov	r5,r19
    34b8:	da001715 	stw	r8,92(sp)
    34bc:	da401615 	stw	r9,88(sp)
    34c0:	000b6080 	call	b608 <__divdf3>
    34c4:	da001717 	ldw	r8,92(sp)
    34c8:	da401617 	ldw	r9,88(sp)
    34cc:	ad4003cc 	andi	r21,r21,15
    34d0:	040000c4 	movi	r16,3
    34d4:	1023883a 	mov	r17,r2
    34d8:	1829883a 	mov	r20,r3
    34dc:	a8001126 	beq	r21,zero,3524 <_dtoa_r+0x440>
    34e0:	05c00074 	movhi	r23,1
    34e4:	bddfc904 	addi	r23,r23,32548
    34e8:	4805883a 	mov	r2,r9
    34ec:	4007883a 	mov	r3,r8
    34f0:	a980004c 	andi	r6,r21,1
    34f4:	1009883a 	mov	r4,r2
    34f8:	a82bd07a 	srai	r21,r21,1
    34fc:	180b883a 	mov	r5,r3
    3500:	30000426 	beq	r6,zero,3514 <_dtoa_r+0x430>
    3504:	b9800017 	ldw	r6,0(r23)
    3508:	b9c00117 	ldw	r7,4(r23)
    350c:	84000044 	addi	r16,r16,1
    3510:	000c2300 	call	c230 <__muldf3>
    3514:	bdc00204 	addi	r23,r23,8
    3518:	a83ff51e 	bne	r21,zero,34f0 <__alt_data_end+0xfffd34f0>
    351c:	1013883a 	mov	r9,r2
    3520:	1811883a 	mov	r8,r3
    3524:	480d883a 	mov	r6,r9
    3528:	400f883a 	mov	r7,r8
    352c:	8809883a 	mov	r4,r17
    3530:	a00b883a 	mov	r5,r20
    3534:	000b6080 	call	b608 <__divdf3>
    3538:	d8800f15 	stw	r2,60(sp)
    353c:	d8c01015 	stw	r3,64(sp)
    3540:	d8c00e17 	ldw	r3,56(sp)
    3544:	18000626 	beq	r3,zero,3560 <_dtoa_r+0x47c>
    3548:	d9000f17 	ldw	r4,60(sp)
    354c:	d9401017 	ldw	r5,64(sp)
    3550:	000d883a 	mov	r6,zero
    3554:	01cffc34 	movhi	r7,16368
    3558:	000c13c0 	call	c13c <__ledf2>
    355c:	10040b16 	blt	r2,zero,458c <_dtoa_r+0x14a8>
    3560:	8009883a 	mov	r4,r16
    3564:	000d4180 	call	d418 <__floatsidf>
    3568:	d9800f17 	ldw	r6,60(sp)
    356c:	d9c01017 	ldw	r7,64(sp)
    3570:	1009883a 	mov	r4,r2
    3574:	180b883a 	mov	r5,r3
    3578:	000c2300 	call	c230 <__muldf3>
    357c:	000d883a 	mov	r6,zero
    3580:	01d00734 	movhi	r7,16412
    3584:	1009883a 	mov	r4,r2
    3588:	180b883a 	mov	r5,r3
    358c:	000ad5c0 	call	ad5c <__adddf3>
    3590:	1021883a 	mov	r16,r2
    3594:	d8800617 	ldw	r2,24(sp)
    3598:	047f3034 	movhi	r17,64704
    359c:	1c63883a 	add	r17,r3,r17
    35a0:	10031826 	beq	r2,zero,4204 <_dtoa_r+0x1120>
    35a4:	d8c00517 	ldw	r3,20(sp)
    35a8:	db000617 	ldw	r12,24(sp)
    35ac:	d8c01315 	stw	r3,76(sp)
    35b0:	d9000b17 	ldw	r4,44(sp)
    35b4:	20038f26 	beq	r4,zero,43f4 <_dtoa_r+0x1310>
    35b8:	60bfffc4 	addi	r2,r12,-1
    35bc:	100490fa 	slli	r2,r2,3
    35c0:	00c00074 	movhi	r3,1
    35c4:	18dfd304 	addi	r3,r3,32588
    35c8:	1885883a 	add	r2,r3,r2
    35cc:	11800017 	ldw	r6,0(r2)
    35d0:	11c00117 	ldw	r7,4(r2)
    35d4:	d8800717 	ldw	r2,28(sp)
    35d8:	0009883a 	mov	r4,zero
    35dc:	014ff834 	movhi	r5,16352
    35e0:	db001615 	stw	r12,88(sp)
    35e4:	15c00044 	addi	r23,r2,1
    35e8:	000b6080 	call	b608 <__divdf3>
    35ec:	800d883a 	mov	r6,r16
    35f0:	880f883a 	mov	r7,r17
    35f4:	1009883a 	mov	r4,r2
    35f8:	180b883a 	mov	r5,r3
    35fc:	000ca9c0 	call	ca9c <__subdf3>
    3600:	d9401017 	ldw	r5,64(sp)
    3604:	d9000f17 	ldw	r4,60(sp)
    3608:	102b883a 	mov	r21,r2
    360c:	d8c01215 	stw	r3,72(sp)
    3610:	000d3980 	call	d398 <__fixdfsi>
    3614:	1009883a 	mov	r4,r2
    3618:	1029883a 	mov	r20,r2
    361c:	000d4180 	call	d418 <__floatsidf>
    3620:	d9000f17 	ldw	r4,60(sp)
    3624:	d9401017 	ldw	r5,64(sp)
    3628:	100d883a 	mov	r6,r2
    362c:	180f883a 	mov	r7,r3
    3630:	000ca9c0 	call	ca9c <__subdf3>
    3634:	1823883a 	mov	r17,r3
    3638:	d8c00717 	ldw	r3,28(sp)
    363c:	d9401217 	ldw	r5,72(sp)
    3640:	a2000c04 	addi	r8,r20,48
    3644:	1021883a 	mov	r16,r2
    3648:	1a000005 	stb	r8,0(r3)
    364c:	800d883a 	mov	r6,r16
    3650:	880f883a 	mov	r7,r17
    3654:	a809883a 	mov	r4,r21
    3658:	4029883a 	mov	r20,r8
    365c:	000c0600 	call	c060 <__gedf2>
    3660:	00841d16 	blt	zero,r2,46d8 <_dtoa_r+0x15f4>
    3664:	800d883a 	mov	r6,r16
    3668:	880f883a 	mov	r7,r17
    366c:	0009883a 	mov	r4,zero
    3670:	014ffc34 	movhi	r5,16368
    3674:	000ca9c0 	call	ca9c <__subdf3>
    3678:	d9401217 	ldw	r5,72(sp)
    367c:	100d883a 	mov	r6,r2
    3680:	180f883a 	mov	r7,r3
    3684:	a809883a 	mov	r4,r21
    3688:	000c0600 	call	c060 <__gedf2>
    368c:	db001617 	ldw	r12,88(sp)
    3690:	00840e16 	blt	zero,r2,46cc <_dtoa_r+0x15e8>
    3694:	00800044 	movi	r2,1
    3698:	13006b0e 	bge	r2,r12,3848 <_dtoa_r+0x764>
    369c:	d9000717 	ldw	r4,28(sp)
    36a0:	dd800f15 	stw	r22,60(sp)
    36a4:	dcc01015 	stw	r19,64(sp)
    36a8:	2319883a 	add	r12,r4,r12
    36ac:	dcc01217 	ldw	r19,72(sp)
    36b0:	602d883a 	mov	r22,r12
    36b4:	dc801215 	stw	r18,72(sp)
    36b8:	b825883a 	mov	r18,r23
    36bc:	00000906 	br	36e4 <_dtoa_r+0x600>
    36c0:	000ca9c0 	call	ca9c <__subdf3>
    36c4:	a80d883a 	mov	r6,r21
    36c8:	980f883a 	mov	r7,r19
    36cc:	1009883a 	mov	r4,r2
    36d0:	180b883a 	mov	r5,r3
    36d4:	000c13c0 	call	c13c <__ledf2>
    36d8:	1003e816 	blt	r2,zero,467c <_dtoa_r+0x1598>
    36dc:	b825883a 	mov	r18,r23
    36e0:	bd83e926 	beq	r23,r22,4688 <_dtoa_r+0x15a4>
    36e4:	a809883a 	mov	r4,r21
    36e8:	980b883a 	mov	r5,r19
    36ec:	000d883a 	mov	r6,zero
    36f0:	01d00934 	movhi	r7,16420
    36f4:	000c2300 	call	c230 <__muldf3>
    36f8:	000d883a 	mov	r6,zero
    36fc:	01d00934 	movhi	r7,16420
    3700:	8009883a 	mov	r4,r16
    3704:	880b883a 	mov	r5,r17
    3708:	102b883a 	mov	r21,r2
    370c:	1827883a 	mov	r19,r3
    3710:	000c2300 	call	c230 <__muldf3>
    3714:	180b883a 	mov	r5,r3
    3718:	1009883a 	mov	r4,r2
    371c:	1821883a 	mov	r16,r3
    3720:	1023883a 	mov	r17,r2
    3724:	000d3980 	call	d398 <__fixdfsi>
    3728:	1009883a 	mov	r4,r2
    372c:	1029883a 	mov	r20,r2
    3730:	000d4180 	call	d418 <__floatsidf>
    3734:	8809883a 	mov	r4,r17
    3738:	800b883a 	mov	r5,r16
    373c:	100d883a 	mov	r6,r2
    3740:	180f883a 	mov	r7,r3
    3744:	000ca9c0 	call	ca9c <__subdf3>
    3748:	a5000c04 	addi	r20,r20,48
    374c:	a80d883a 	mov	r6,r21
    3750:	980f883a 	mov	r7,r19
    3754:	1009883a 	mov	r4,r2
    3758:	180b883a 	mov	r5,r3
    375c:	95000005 	stb	r20,0(r18)
    3760:	1021883a 	mov	r16,r2
    3764:	1823883a 	mov	r17,r3
    3768:	000c13c0 	call	c13c <__ledf2>
    376c:	bdc00044 	addi	r23,r23,1
    3770:	800d883a 	mov	r6,r16
    3774:	880f883a 	mov	r7,r17
    3778:	0009883a 	mov	r4,zero
    377c:	014ffc34 	movhi	r5,16368
    3780:	103fcf0e 	bge	r2,zero,36c0 <__alt_data_end+0xfffd36c0>
    3784:	d8c01317 	ldw	r3,76(sp)
    3788:	d8c00515 	stw	r3,20(sp)
    378c:	d9400917 	ldw	r5,36(sp)
    3790:	e009883a 	mov	r4,fp
    3794:	00062200 	call	6220 <_Bfree>
    3798:	d9000517 	ldw	r4,20(sp)
    379c:	d9802317 	ldw	r6,140(sp)
    37a0:	d9c02517 	ldw	r7,148(sp)
    37a4:	b8000005 	stb	zero,0(r23)
    37a8:	20800044 	addi	r2,r4,1
    37ac:	30800015 	stw	r2,0(r6)
    37b0:	3802aa26 	beq	r7,zero,425c <_dtoa_r+0x1178>
    37b4:	3dc00015 	stw	r23,0(r7)
    37b8:	d8800717 	ldw	r2,28(sp)
    37bc:	003e7906 	br	31a4 <__alt_data_end+0xfffd31a4>
    37c0:	00800434 	movhi	r2,16
    37c4:	10bfffc4 	addi	r2,r2,-1
    37c8:	88a2703a 	and	r17,r17,r2
    37cc:	883e851e 	bne	r17,zero,31e4 <__alt_data_end+0xfffd31e4>
    37d0:	00800074 	movhi	r2,1
    37d4:	109fb404 	addi	r2,r2,32464
    37d8:	003e8406 	br	31ec <__alt_data_end+0xfffd31ec>
    37dc:	10c00204 	addi	r3,r2,8
    37e0:	003e8706 	br	3200 <__alt_data_end+0xfffd3200>
    37e4:	01400434 	movhi	r5,16
    37e8:	297fffc4 	addi	r5,r5,-1
    37ec:	994a703a 	and	r5,r19,r5
    37f0:	9009883a 	mov	r4,r18
    37f4:	843f0044 	addi	r16,r16,-1023
    37f8:	294ffc34 	orhi	r5,r5,16368
    37fc:	dd800217 	ldw	r22,8(sp)
    3800:	d8001115 	stw	zero,68(sp)
    3804:	003ea506 	br	329c <__alt_data_end+0xfffd329c>
    3808:	00800074 	movhi	r2,1
    380c:	109fab04 	addi	r2,r2,32428
    3810:	003e6406 	br	31a4 <__alt_data_end+0xfffd31a4>
    3814:	e0001115 	stw	zero,68(fp)
    3818:	000b883a 	mov	r5,zero
    381c:	e009883a 	mov	r4,fp
    3820:	00061780 	call	6178 <_Balloc>
    3824:	01bfffc4 	movi	r6,-1
    3828:	01c00044 	movi	r7,1
    382c:	d8800715 	stw	r2,28(sp)
    3830:	d9800c15 	stw	r6,48(sp)
    3834:	e0801015 	stw	r2,64(fp)
    3838:	d8000315 	stw	zero,12(sp)
    383c:	d9c00b15 	stw	r7,44(sp)
    3840:	d9800615 	stw	r6,24(sp)
    3844:	d8002215 	stw	zero,136(sp)
    3848:	d8800117 	ldw	r2,4(sp)
    384c:	10008916 	blt	r2,zero,3a74 <_dtoa_r+0x990>
    3850:	d9000517 	ldw	r4,20(sp)
    3854:	00c00384 	movi	r3,14
    3858:	19008616 	blt	r3,r4,3a74 <_dtoa_r+0x990>
    385c:	200490fa 	slli	r2,r4,3
    3860:	00c00074 	movhi	r3,1
    3864:	d9802217 	ldw	r6,136(sp)
    3868:	18dfd304 	addi	r3,r3,32588
    386c:	1885883a 	add	r2,r3,r2
    3870:	14000017 	ldw	r16,0(r2)
    3874:	14400117 	ldw	r17,4(r2)
    3878:	30016316 	blt	r6,zero,3e08 <_dtoa_r+0xd24>
    387c:	800d883a 	mov	r6,r16
    3880:	880f883a 	mov	r7,r17
    3884:	9009883a 	mov	r4,r18
    3888:	980b883a 	mov	r5,r19
    388c:	000b6080 	call	b608 <__divdf3>
    3890:	180b883a 	mov	r5,r3
    3894:	1009883a 	mov	r4,r2
    3898:	000d3980 	call	d398 <__fixdfsi>
    389c:	1009883a 	mov	r4,r2
    38a0:	102b883a 	mov	r21,r2
    38a4:	000d4180 	call	d418 <__floatsidf>
    38a8:	800d883a 	mov	r6,r16
    38ac:	880f883a 	mov	r7,r17
    38b0:	1009883a 	mov	r4,r2
    38b4:	180b883a 	mov	r5,r3
    38b8:	000c2300 	call	c230 <__muldf3>
    38bc:	100d883a 	mov	r6,r2
    38c0:	180f883a 	mov	r7,r3
    38c4:	9009883a 	mov	r4,r18
    38c8:	980b883a 	mov	r5,r19
    38cc:	000ca9c0 	call	ca9c <__subdf3>
    38d0:	d9c00717 	ldw	r7,28(sp)
    38d4:	1009883a 	mov	r4,r2
    38d8:	a8800c04 	addi	r2,r21,48
    38dc:	38800005 	stb	r2,0(r7)
    38e0:	3dc00044 	addi	r23,r7,1
    38e4:	d9c00617 	ldw	r7,24(sp)
    38e8:	01800044 	movi	r6,1
    38ec:	180b883a 	mov	r5,r3
    38f0:	2005883a 	mov	r2,r4
    38f4:	39803826 	beq	r7,r6,39d8 <_dtoa_r+0x8f4>
    38f8:	000d883a 	mov	r6,zero
    38fc:	01d00934 	movhi	r7,16420
    3900:	000c2300 	call	c230 <__muldf3>
    3904:	000d883a 	mov	r6,zero
    3908:	000f883a 	mov	r7,zero
    390c:	1009883a 	mov	r4,r2
    3910:	180b883a 	mov	r5,r3
    3914:	1025883a 	mov	r18,r2
    3918:	1827883a 	mov	r19,r3
    391c:	000bfd80 	call	bfd8 <__eqdf2>
    3920:	103f9a26 	beq	r2,zero,378c <__alt_data_end+0xfffd378c>
    3924:	d9c00617 	ldw	r7,24(sp)
    3928:	d8c00717 	ldw	r3,28(sp)
    392c:	b829883a 	mov	r20,r23
    3930:	38bfffc4 	addi	r2,r7,-1
    3934:	18ad883a 	add	r22,r3,r2
    3938:	00000a06 	br	3964 <_dtoa_r+0x880>
    393c:	000c2300 	call	c230 <__muldf3>
    3940:	000d883a 	mov	r6,zero
    3944:	000f883a 	mov	r7,zero
    3948:	1009883a 	mov	r4,r2
    394c:	180b883a 	mov	r5,r3
    3950:	1025883a 	mov	r18,r2
    3954:	1827883a 	mov	r19,r3
    3958:	b829883a 	mov	r20,r23
    395c:	000bfd80 	call	bfd8 <__eqdf2>
    3960:	103f8a26 	beq	r2,zero,378c <__alt_data_end+0xfffd378c>
    3964:	800d883a 	mov	r6,r16
    3968:	880f883a 	mov	r7,r17
    396c:	9009883a 	mov	r4,r18
    3970:	980b883a 	mov	r5,r19
    3974:	000b6080 	call	b608 <__divdf3>
    3978:	180b883a 	mov	r5,r3
    397c:	1009883a 	mov	r4,r2
    3980:	000d3980 	call	d398 <__fixdfsi>
    3984:	1009883a 	mov	r4,r2
    3988:	102b883a 	mov	r21,r2
    398c:	000d4180 	call	d418 <__floatsidf>
    3990:	800d883a 	mov	r6,r16
    3994:	880f883a 	mov	r7,r17
    3998:	1009883a 	mov	r4,r2
    399c:	180b883a 	mov	r5,r3
    39a0:	000c2300 	call	c230 <__muldf3>
    39a4:	100d883a 	mov	r6,r2
    39a8:	180f883a 	mov	r7,r3
    39ac:	9009883a 	mov	r4,r18
    39b0:	980b883a 	mov	r5,r19
    39b4:	000ca9c0 	call	ca9c <__subdf3>
    39b8:	aa000c04 	addi	r8,r21,48
    39bc:	a2000005 	stb	r8,0(r20)
    39c0:	000d883a 	mov	r6,zero
    39c4:	01d00934 	movhi	r7,16420
    39c8:	1009883a 	mov	r4,r2
    39cc:	180b883a 	mov	r5,r3
    39d0:	a5c00044 	addi	r23,r20,1
    39d4:	b53fd91e 	bne	r22,r20,393c <__alt_data_end+0xfffd393c>
    39d8:	100d883a 	mov	r6,r2
    39dc:	180f883a 	mov	r7,r3
    39e0:	1009883a 	mov	r4,r2
    39e4:	180b883a 	mov	r5,r3
    39e8:	000ad5c0 	call	ad5c <__adddf3>
    39ec:	100d883a 	mov	r6,r2
    39f0:	180f883a 	mov	r7,r3
    39f4:	8009883a 	mov	r4,r16
    39f8:	880b883a 	mov	r5,r17
    39fc:	1027883a 	mov	r19,r2
    3a00:	1825883a 	mov	r18,r3
    3a04:	000c13c0 	call	c13c <__ledf2>
    3a08:	10000816 	blt	r2,zero,3a2c <_dtoa_r+0x948>
    3a0c:	980d883a 	mov	r6,r19
    3a10:	900f883a 	mov	r7,r18
    3a14:	8009883a 	mov	r4,r16
    3a18:	880b883a 	mov	r5,r17
    3a1c:	000bfd80 	call	bfd8 <__eqdf2>
    3a20:	103f5a1e 	bne	r2,zero,378c <__alt_data_end+0xfffd378c>
    3a24:	ad40004c 	andi	r21,r21,1
    3a28:	a83f5826 	beq	r21,zero,378c <__alt_data_end+0xfffd378c>
    3a2c:	bd3fffc3 	ldbu	r20,-1(r23)
    3a30:	b8bfffc4 	addi	r2,r23,-1
    3a34:	1007883a 	mov	r3,r2
    3a38:	01400e44 	movi	r5,57
    3a3c:	d9800717 	ldw	r6,28(sp)
    3a40:	00000506 	br	3a58 <_dtoa_r+0x974>
    3a44:	18ffffc4 	addi	r3,r3,-1
    3a48:	11824726 	beq	r2,r6,4368 <_dtoa_r+0x1284>
    3a4c:	1d000003 	ldbu	r20,0(r3)
    3a50:	102f883a 	mov	r23,r2
    3a54:	10bfffc4 	addi	r2,r2,-1
    3a58:	a1003fcc 	andi	r4,r20,255
    3a5c:	2100201c 	xori	r4,r4,128
    3a60:	213fe004 	addi	r4,r4,-128
    3a64:	217ff726 	beq	r4,r5,3a44 <__alt_data_end+0xfffd3a44>
    3a68:	a2000044 	addi	r8,r20,1
    3a6c:	12000005 	stb	r8,0(r2)
    3a70:	003f4606 	br	378c <__alt_data_end+0xfffd378c>
    3a74:	d9000b17 	ldw	r4,44(sp)
    3a78:	2000c826 	beq	r4,zero,3d9c <_dtoa_r+0xcb8>
    3a7c:	d9800317 	ldw	r6,12(sp)
    3a80:	00c00044 	movi	r3,1
    3a84:	1980f90e 	bge	r3,r6,3e6c <_dtoa_r+0xd88>
    3a88:	d8800617 	ldw	r2,24(sp)
    3a8c:	d8c00a17 	ldw	r3,40(sp)
    3a90:	157fffc4 	addi	r21,r2,-1
    3a94:	1d41f316 	blt	r3,r21,4264 <_dtoa_r+0x1180>
    3a98:	1d6bc83a 	sub	r21,r3,r21
    3a9c:	d9c00617 	ldw	r7,24(sp)
    3aa0:	3802aa16 	blt	r7,zero,454c <_dtoa_r+0x1468>
    3aa4:	dd000817 	ldw	r20,32(sp)
    3aa8:	d8800617 	ldw	r2,24(sp)
    3aac:	d8c00817 	ldw	r3,32(sp)
    3ab0:	01400044 	movi	r5,1
    3ab4:	e009883a 	mov	r4,fp
    3ab8:	1887883a 	add	r3,r3,r2
    3abc:	d8c00815 	stw	r3,32(sp)
    3ac0:	b0ad883a 	add	r22,r22,r2
    3ac4:	00065ac0 	call	65ac <__i2b>
    3ac8:	1023883a 	mov	r17,r2
    3acc:	a0000826 	beq	r20,zero,3af0 <_dtoa_r+0xa0c>
    3ad0:	0580070e 	bge	zero,r22,3af0 <_dtoa_r+0xa0c>
    3ad4:	a005883a 	mov	r2,r20
    3ad8:	b500b916 	blt	r22,r20,3dc0 <_dtoa_r+0xcdc>
    3adc:	d9000817 	ldw	r4,32(sp)
    3ae0:	a0a9c83a 	sub	r20,r20,r2
    3ae4:	b0adc83a 	sub	r22,r22,r2
    3ae8:	2089c83a 	sub	r4,r4,r2
    3aec:	d9000815 	stw	r4,32(sp)
    3af0:	d9800a17 	ldw	r6,40(sp)
    3af4:	0181810e 	bge	zero,r6,40fc <_dtoa_r+0x1018>
    3af8:	d9c00b17 	ldw	r7,44(sp)
    3afc:	3800b326 	beq	r7,zero,3dcc <_dtoa_r+0xce8>
    3b00:	a800b226 	beq	r21,zero,3dcc <_dtoa_r+0xce8>
    3b04:	880b883a 	mov	r5,r17
    3b08:	a80d883a 	mov	r6,r21
    3b0c:	e009883a 	mov	r4,fp
    3b10:	00068740 	call	6874 <__pow5mult>
    3b14:	d9800917 	ldw	r6,36(sp)
    3b18:	100b883a 	mov	r5,r2
    3b1c:	e009883a 	mov	r4,fp
    3b20:	1023883a 	mov	r17,r2
    3b24:	00065e80 	call	65e8 <__multiply>
    3b28:	1021883a 	mov	r16,r2
    3b2c:	d8800a17 	ldw	r2,40(sp)
    3b30:	d9400917 	ldw	r5,36(sp)
    3b34:	e009883a 	mov	r4,fp
    3b38:	1545c83a 	sub	r2,r2,r21
    3b3c:	d8800a15 	stw	r2,40(sp)
    3b40:	00062200 	call	6220 <_Bfree>
    3b44:	d8c00a17 	ldw	r3,40(sp)
    3b48:	18009f1e 	bne	r3,zero,3dc8 <_dtoa_r+0xce4>
    3b4c:	05c00044 	movi	r23,1
    3b50:	e009883a 	mov	r4,fp
    3b54:	b80b883a 	mov	r5,r23
    3b58:	00065ac0 	call	65ac <__i2b>
    3b5c:	d9000d17 	ldw	r4,52(sp)
    3b60:	102b883a 	mov	r21,r2
    3b64:	2000ce26 	beq	r4,zero,3ea0 <_dtoa_r+0xdbc>
    3b68:	200d883a 	mov	r6,r4
    3b6c:	100b883a 	mov	r5,r2
    3b70:	e009883a 	mov	r4,fp
    3b74:	00068740 	call	6874 <__pow5mult>
    3b78:	d9800317 	ldw	r6,12(sp)
    3b7c:	102b883a 	mov	r21,r2
    3b80:	b981810e 	bge	r23,r6,4188 <_dtoa_r+0x10a4>
    3b84:	0027883a 	mov	r19,zero
    3b88:	a8800417 	ldw	r2,16(r21)
    3b8c:	05c00804 	movi	r23,32
    3b90:	10800104 	addi	r2,r2,4
    3b94:	1085883a 	add	r2,r2,r2
    3b98:	1085883a 	add	r2,r2,r2
    3b9c:	a885883a 	add	r2,r21,r2
    3ba0:	11000017 	ldw	r4,0(r2)
    3ba4:	00064940 	call	6494 <__hi0bits>
    3ba8:	b885c83a 	sub	r2,r23,r2
    3bac:	1585883a 	add	r2,r2,r22
    3bb0:	108007cc 	andi	r2,r2,31
    3bb4:	1000b326 	beq	r2,zero,3e84 <_dtoa_r+0xda0>
    3bb8:	00c00804 	movi	r3,32
    3bbc:	1887c83a 	sub	r3,r3,r2
    3bc0:	01000104 	movi	r4,4
    3bc4:	20c2cd0e 	bge	r4,r3,46fc <_dtoa_r+0x1618>
    3bc8:	00c00704 	movi	r3,28
    3bcc:	1885c83a 	sub	r2,r3,r2
    3bd0:	d8c00817 	ldw	r3,32(sp)
    3bd4:	a0a9883a 	add	r20,r20,r2
    3bd8:	b0ad883a 	add	r22,r22,r2
    3bdc:	1887883a 	add	r3,r3,r2
    3be0:	d8c00815 	stw	r3,32(sp)
    3be4:	d9800817 	ldw	r6,32(sp)
    3be8:	0180040e 	bge	zero,r6,3bfc <_dtoa_r+0xb18>
    3bec:	800b883a 	mov	r5,r16
    3bf0:	e009883a 	mov	r4,fp
    3bf4:	00069b40 	call	69b4 <__lshift>
    3bf8:	1021883a 	mov	r16,r2
    3bfc:	0580050e 	bge	zero,r22,3c14 <_dtoa_r+0xb30>
    3c00:	a80b883a 	mov	r5,r21
    3c04:	b00d883a 	mov	r6,r22
    3c08:	e009883a 	mov	r4,fp
    3c0c:	00069b40 	call	69b4 <__lshift>
    3c10:	102b883a 	mov	r21,r2
    3c14:	d9c00e17 	ldw	r7,56(sp)
    3c18:	3801211e 	bne	r7,zero,40a0 <_dtoa_r+0xfbc>
    3c1c:	d9800617 	ldw	r6,24(sp)
    3c20:	0181380e 	bge	zero,r6,4104 <_dtoa_r+0x1020>
    3c24:	d8c00b17 	ldw	r3,44(sp)
    3c28:	1800ab1e 	bne	r3,zero,3ed8 <_dtoa_r+0xdf4>
    3c2c:	dc800717 	ldw	r18,28(sp)
    3c30:	dcc00617 	ldw	r19,24(sp)
    3c34:	9029883a 	mov	r20,r18
    3c38:	00000206 	br	3c44 <_dtoa_r+0xb60>
    3c3c:	00062480 	call	6248 <__multadd>
    3c40:	1021883a 	mov	r16,r2
    3c44:	a80b883a 	mov	r5,r21
    3c48:	8009883a 	mov	r4,r16
    3c4c:	0002ebc0 	call	2ebc <quorem>
    3c50:	10800c04 	addi	r2,r2,48
    3c54:	90800005 	stb	r2,0(r18)
    3c58:	94800044 	addi	r18,r18,1
    3c5c:	9507c83a 	sub	r3,r18,r20
    3c60:	000f883a 	mov	r7,zero
    3c64:	01800284 	movi	r6,10
    3c68:	800b883a 	mov	r5,r16
    3c6c:	e009883a 	mov	r4,fp
    3c70:	1cfff216 	blt	r3,r19,3c3c <__alt_data_end+0xfffd3c3c>
    3c74:	1011883a 	mov	r8,r2
    3c78:	d8800617 	ldw	r2,24(sp)
    3c7c:	0082370e 	bge	zero,r2,455c <_dtoa_r+0x1478>
    3c80:	d9000717 	ldw	r4,28(sp)
    3c84:	0025883a 	mov	r18,zero
    3c88:	20af883a 	add	r23,r4,r2
    3c8c:	01800044 	movi	r6,1
    3c90:	800b883a 	mov	r5,r16
    3c94:	e009883a 	mov	r4,fp
    3c98:	da001715 	stw	r8,92(sp)
    3c9c:	00069b40 	call	69b4 <__lshift>
    3ca0:	a80b883a 	mov	r5,r21
    3ca4:	1009883a 	mov	r4,r2
    3ca8:	d8800915 	stw	r2,36(sp)
    3cac:	0006afc0 	call	6afc <__mcmp>
    3cb0:	da001717 	ldw	r8,92(sp)
    3cb4:	0081800e 	bge	zero,r2,42b8 <_dtoa_r+0x11d4>
    3cb8:	b93fffc3 	ldbu	r4,-1(r23)
    3cbc:	b8bfffc4 	addi	r2,r23,-1
    3cc0:	1007883a 	mov	r3,r2
    3cc4:	01800e44 	movi	r6,57
    3cc8:	d9c00717 	ldw	r7,28(sp)
    3ccc:	00000506 	br	3ce4 <_dtoa_r+0xc00>
    3cd0:	18ffffc4 	addi	r3,r3,-1
    3cd4:	11c12326 	beq	r2,r7,4164 <_dtoa_r+0x1080>
    3cd8:	19000003 	ldbu	r4,0(r3)
    3cdc:	102f883a 	mov	r23,r2
    3ce0:	10bfffc4 	addi	r2,r2,-1
    3ce4:	21403fcc 	andi	r5,r4,255
    3ce8:	2940201c 	xori	r5,r5,128
    3cec:	297fe004 	addi	r5,r5,-128
    3cf0:	29bff726 	beq	r5,r6,3cd0 <__alt_data_end+0xfffd3cd0>
    3cf4:	21000044 	addi	r4,r4,1
    3cf8:	11000005 	stb	r4,0(r2)
    3cfc:	a80b883a 	mov	r5,r21
    3d00:	e009883a 	mov	r4,fp
    3d04:	00062200 	call	6220 <_Bfree>
    3d08:	883ea026 	beq	r17,zero,378c <__alt_data_end+0xfffd378c>
    3d0c:	90000426 	beq	r18,zero,3d20 <_dtoa_r+0xc3c>
    3d10:	94400326 	beq	r18,r17,3d20 <_dtoa_r+0xc3c>
    3d14:	900b883a 	mov	r5,r18
    3d18:	e009883a 	mov	r4,fp
    3d1c:	00062200 	call	6220 <_Bfree>
    3d20:	880b883a 	mov	r5,r17
    3d24:	e009883a 	mov	r4,fp
    3d28:	00062200 	call	6220 <_Bfree>
    3d2c:	003e9706 	br	378c <__alt_data_end+0xfffd378c>
    3d30:	01800044 	movi	r6,1
    3d34:	d9800e15 	stw	r6,56(sp)
    3d38:	003d9606 	br	3394 <__alt_data_end+0xfffd3394>
    3d3c:	d8800817 	ldw	r2,32(sp)
    3d40:	d8c00517 	ldw	r3,20(sp)
    3d44:	d8000d15 	stw	zero,52(sp)
    3d48:	10c5c83a 	sub	r2,r2,r3
    3d4c:	00c9c83a 	sub	r4,zero,r3
    3d50:	d8800815 	stw	r2,32(sp)
    3d54:	d9000a15 	stw	r4,40(sp)
    3d58:	003d9706 	br	33b8 <__alt_data_end+0xfffd33b8>
    3d5c:	05adc83a 	sub	r22,zero,r22
    3d60:	dd800815 	stw	r22,32(sp)
    3d64:	002d883a 	mov	r22,zero
    3d68:	003d8e06 	br	33a4 <__alt_data_end+0xfffd33a4>
    3d6c:	d9000517 	ldw	r4,20(sp)
    3d70:	000d4180 	call	d418 <__floatsidf>
    3d74:	100d883a 	mov	r6,r2
    3d78:	180f883a 	mov	r7,r3
    3d7c:	a009883a 	mov	r4,r20
    3d80:	880b883a 	mov	r5,r17
    3d84:	000bfd80 	call	bfd8 <__eqdf2>
    3d88:	103d7126 	beq	r2,zero,3350 <__alt_data_end+0xfffd3350>
    3d8c:	d9c00517 	ldw	r7,20(sp)
    3d90:	39ffffc4 	addi	r7,r7,-1
    3d94:	d9c00515 	stw	r7,20(sp)
    3d98:	003d6d06 	br	3350 <__alt_data_end+0xfffd3350>
    3d9c:	dd400a17 	ldw	r21,40(sp)
    3da0:	dd000817 	ldw	r20,32(sp)
    3da4:	0023883a 	mov	r17,zero
    3da8:	003f4806 	br	3acc <__alt_data_end+0xfffd3acc>
    3dac:	10e3c83a 	sub	r17,r2,r3
    3db0:	9448983a 	sll	r4,r18,r17
    3db4:	003d3206 	br	3280 <__alt_data_end+0xfffd3280>
    3db8:	d8000e15 	stw	zero,56(sp)
    3dbc:	003d7506 	br	3394 <__alt_data_end+0xfffd3394>
    3dc0:	b005883a 	mov	r2,r22
    3dc4:	003f4506 	br	3adc <__alt_data_end+0xfffd3adc>
    3dc8:	dc000915 	stw	r16,36(sp)
    3dcc:	d9800a17 	ldw	r6,40(sp)
    3dd0:	d9400917 	ldw	r5,36(sp)
    3dd4:	e009883a 	mov	r4,fp
    3dd8:	00068740 	call	6874 <__pow5mult>
    3ddc:	1021883a 	mov	r16,r2
    3de0:	003f5a06 	br	3b4c <__alt_data_end+0xfffd3b4c>
    3de4:	01c00044 	movi	r7,1
    3de8:	d9c00b15 	stw	r7,44(sp)
    3dec:	d8802217 	ldw	r2,136(sp)
    3df0:	0081280e 	bge	zero,r2,4294 <_dtoa_r+0x11b0>
    3df4:	100d883a 	mov	r6,r2
    3df8:	1021883a 	mov	r16,r2
    3dfc:	d8800c15 	stw	r2,48(sp)
    3e00:	d8800615 	stw	r2,24(sp)
    3e04:	003d8806 	br	3428 <__alt_data_end+0xfffd3428>
    3e08:	d8800617 	ldw	r2,24(sp)
    3e0c:	00be9b16 	blt	zero,r2,387c <__alt_data_end+0xfffd387c>
    3e10:	10010f1e 	bne	r2,zero,4250 <_dtoa_r+0x116c>
    3e14:	880b883a 	mov	r5,r17
    3e18:	000d883a 	mov	r6,zero
    3e1c:	01d00534 	movhi	r7,16404
    3e20:	8009883a 	mov	r4,r16
    3e24:	000c2300 	call	c230 <__muldf3>
    3e28:	900d883a 	mov	r6,r18
    3e2c:	980f883a 	mov	r7,r19
    3e30:	1009883a 	mov	r4,r2
    3e34:	180b883a 	mov	r5,r3
    3e38:	000c0600 	call	c060 <__gedf2>
    3e3c:	002b883a 	mov	r21,zero
    3e40:	0023883a 	mov	r17,zero
    3e44:	1000bf16 	blt	r2,zero,4144 <_dtoa_r+0x1060>
    3e48:	d9802217 	ldw	r6,136(sp)
    3e4c:	ddc00717 	ldw	r23,28(sp)
    3e50:	018c303a 	nor	r6,zero,r6
    3e54:	d9800515 	stw	r6,20(sp)
    3e58:	a80b883a 	mov	r5,r21
    3e5c:	e009883a 	mov	r4,fp
    3e60:	00062200 	call	6220 <_Bfree>
    3e64:	883e4926 	beq	r17,zero,378c <__alt_data_end+0xfffd378c>
    3e68:	003fad06 	br	3d20 <__alt_data_end+0xfffd3d20>
    3e6c:	d9c01117 	ldw	r7,68(sp)
    3e70:	3801bc26 	beq	r7,zero,4564 <_dtoa_r+0x1480>
    3e74:	10810cc4 	addi	r2,r2,1075
    3e78:	dd400a17 	ldw	r21,40(sp)
    3e7c:	dd000817 	ldw	r20,32(sp)
    3e80:	003f0a06 	br	3aac <__alt_data_end+0xfffd3aac>
    3e84:	00800704 	movi	r2,28
    3e88:	d9000817 	ldw	r4,32(sp)
    3e8c:	a0a9883a 	add	r20,r20,r2
    3e90:	b0ad883a 	add	r22,r22,r2
    3e94:	2089883a 	add	r4,r4,r2
    3e98:	d9000815 	stw	r4,32(sp)
    3e9c:	003f5106 	br	3be4 <__alt_data_end+0xfffd3be4>
    3ea0:	d8c00317 	ldw	r3,12(sp)
    3ea4:	b8c1fc0e 	bge	r23,r3,4698 <_dtoa_r+0x15b4>
    3ea8:	0027883a 	mov	r19,zero
    3eac:	b805883a 	mov	r2,r23
    3eb0:	003f3e06 	br	3bac <__alt_data_end+0xfffd3bac>
    3eb4:	880b883a 	mov	r5,r17
    3eb8:	e009883a 	mov	r4,fp
    3ebc:	000f883a 	mov	r7,zero
    3ec0:	01800284 	movi	r6,10
    3ec4:	00062480 	call	6248 <__multadd>
    3ec8:	d9000c17 	ldw	r4,48(sp)
    3ecc:	1023883a 	mov	r17,r2
    3ed0:	0102040e 	bge	zero,r4,46e4 <_dtoa_r+0x1600>
    3ed4:	d9000615 	stw	r4,24(sp)
    3ed8:	0500050e 	bge	zero,r20,3ef0 <_dtoa_r+0xe0c>
    3edc:	880b883a 	mov	r5,r17
    3ee0:	a00d883a 	mov	r6,r20
    3ee4:	e009883a 	mov	r4,fp
    3ee8:	00069b40 	call	69b4 <__lshift>
    3eec:	1023883a 	mov	r17,r2
    3ef0:	9801241e 	bne	r19,zero,4384 <_dtoa_r+0x12a0>
    3ef4:	8829883a 	mov	r20,r17
    3ef8:	d9000617 	ldw	r4,24(sp)
    3efc:	dcc00717 	ldw	r19,28(sp)
    3f00:	9480004c 	andi	r18,r18,1
    3f04:	20bfffc4 	addi	r2,r4,-1
    3f08:	9885883a 	add	r2,r19,r2
    3f0c:	d8800415 	stw	r2,16(sp)
    3f10:	dc800615 	stw	r18,24(sp)
    3f14:	a80b883a 	mov	r5,r21
    3f18:	8009883a 	mov	r4,r16
    3f1c:	0002ebc0 	call	2ebc <quorem>
    3f20:	880b883a 	mov	r5,r17
    3f24:	8009883a 	mov	r4,r16
    3f28:	102f883a 	mov	r23,r2
    3f2c:	0006afc0 	call	6afc <__mcmp>
    3f30:	a80b883a 	mov	r5,r21
    3f34:	a00d883a 	mov	r6,r20
    3f38:	e009883a 	mov	r4,fp
    3f3c:	102d883a 	mov	r22,r2
    3f40:	0006b5c0 	call	6b5c <__mdiff>
    3f44:	1007883a 	mov	r3,r2
    3f48:	10800317 	ldw	r2,12(r2)
    3f4c:	bc800c04 	addi	r18,r23,48
    3f50:	180b883a 	mov	r5,r3
    3f54:	10004e1e 	bne	r2,zero,4090 <_dtoa_r+0xfac>
    3f58:	8009883a 	mov	r4,r16
    3f5c:	d8c01615 	stw	r3,88(sp)
    3f60:	0006afc0 	call	6afc <__mcmp>
    3f64:	d8c01617 	ldw	r3,88(sp)
    3f68:	e009883a 	mov	r4,fp
    3f6c:	d8801615 	stw	r2,88(sp)
    3f70:	180b883a 	mov	r5,r3
    3f74:	00062200 	call	6220 <_Bfree>
    3f78:	d8801617 	ldw	r2,88(sp)
    3f7c:	1000041e 	bne	r2,zero,3f90 <_dtoa_r+0xeac>
    3f80:	d9800317 	ldw	r6,12(sp)
    3f84:	3000021e 	bne	r6,zero,3f90 <_dtoa_r+0xeac>
    3f88:	d8c00617 	ldw	r3,24(sp)
    3f8c:	18003726 	beq	r3,zero,406c <_dtoa_r+0xf88>
    3f90:	b0002016 	blt	r22,zero,4014 <_dtoa_r+0xf30>
    3f94:	b000041e 	bne	r22,zero,3fa8 <_dtoa_r+0xec4>
    3f98:	d9000317 	ldw	r4,12(sp)
    3f9c:	2000021e 	bne	r4,zero,3fa8 <_dtoa_r+0xec4>
    3fa0:	d8c00617 	ldw	r3,24(sp)
    3fa4:	18001b26 	beq	r3,zero,4014 <_dtoa_r+0xf30>
    3fa8:	00810716 	blt	zero,r2,43c8 <_dtoa_r+0x12e4>
    3fac:	d8c00417 	ldw	r3,16(sp)
    3fb0:	9d800044 	addi	r22,r19,1
    3fb4:	9c800005 	stb	r18,0(r19)
    3fb8:	b02f883a 	mov	r23,r22
    3fbc:	98c10626 	beq	r19,r3,43d8 <_dtoa_r+0x12f4>
    3fc0:	800b883a 	mov	r5,r16
    3fc4:	000f883a 	mov	r7,zero
    3fc8:	01800284 	movi	r6,10
    3fcc:	e009883a 	mov	r4,fp
    3fd0:	00062480 	call	6248 <__multadd>
    3fd4:	1021883a 	mov	r16,r2
    3fd8:	000f883a 	mov	r7,zero
    3fdc:	01800284 	movi	r6,10
    3fe0:	880b883a 	mov	r5,r17
    3fe4:	e009883a 	mov	r4,fp
    3fe8:	8d002526 	beq	r17,r20,4080 <_dtoa_r+0xf9c>
    3fec:	00062480 	call	6248 <__multadd>
    3ff0:	a00b883a 	mov	r5,r20
    3ff4:	000f883a 	mov	r7,zero
    3ff8:	01800284 	movi	r6,10
    3ffc:	e009883a 	mov	r4,fp
    4000:	1023883a 	mov	r17,r2
    4004:	00062480 	call	6248 <__multadd>
    4008:	1029883a 	mov	r20,r2
    400c:	b027883a 	mov	r19,r22
    4010:	003fc006 	br	3f14 <__alt_data_end+0xfffd3f14>
    4014:	9011883a 	mov	r8,r18
    4018:	00800e0e 	bge	zero,r2,4054 <_dtoa_r+0xf70>
    401c:	800b883a 	mov	r5,r16
    4020:	01800044 	movi	r6,1
    4024:	e009883a 	mov	r4,fp
    4028:	da001715 	stw	r8,92(sp)
    402c:	00069b40 	call	69b4 <__lshift>
    4030:	a80b883a 	mov	r5,r21
    4034:	1009883a 	mov	r4,r2
    4038:	1021883a 	mov	r16,r2
    403c:	0006afc0 	call	6afc <__mcmp>
    4040:	da001717 	ldw	r8,92(sp)
    4044:	0081960e 	bge	zero,r2,46a0 <_dtoa_r+0x15bc>
    4048:	00800e44 	movi	r2,57
    404c:	40817026 	beq	r8,r2,4610 <_dtoa_r+0x152c>
    4050:	ba000c44 	addi	r8,r23,49
    4054:	8825883a 	mov	r18,r17
    4058:	9dc00044 	addi	r23,r19,1
    405c:	9a000005 	stb	r8,0(r19)
    4060:	a023883a 	mov	r17,r20
    4064:	dc000915 	stw	r16,36(sp)
    4068:	003f2406 	br	3cfc <__alt_data_end+0xfffd3cfc>
    406c:	00800e44 	movi	r2,57
    4070:	9011883a 	mov	r8,r18
    4074:	90816626 	beq	r18,r2,4610 <_dtoa_r+0x152c>
    4078:	05bff516 	blt	zero,r22,4050 <__alt_data_end+0xfffd4050>
    407c:	003ff506 	br	4054 <__alt_data_end+0xfffd4054>
    4080:	00062480 	call	6248 <__multadd>
    4084:	1023883a 	mov	r17,r2
    4088:	1029883a 	mov	r20,r2
    408c:	003fdf06 	br	400c <__alt_data_end+0xfffd400c>
    4090:	e009883a 	mov	r4,fp
    4094:	00062200 	call	6220 <_Bfree>
    4098:	00800044 	movi	r2,1
    409c:	003fbc06 	br	3f90 <__alt_data_end+0xfffd3f90>
    40a0:	a80b883a 	mov	r5,r21
    40a4:	8009883a 	mov	r4,r16
    40a8:	0006afc0 	call	6afc <__mcmp>
    40ac:	103edb0e 	bge	r2,zero,3c1c <__alt_data_end+0xfffd3c1c>
    40b0:	800b883a 	mov	r5,r16
    40b4:	000f883a 	mov	r7,zero
    40b8:	01800284 	movi	r6,10
    40bc:	e009883a 	mov	r4,fp
    40c0:	00062480 	call	6248 <__multadd>
    40c4:	1021883a 	mov	r16,r2
    40c8:	d8800517 	ldw	r2,20(sp)
    40cc:	d8c00b17 	ldw	r3,44(sp)
    40d0:	10bfffc4 	addi	r2,r2,-1
    40d4:	d8800515 	stw	r2,20(sp)
    40d8:	183f761e 	bne	r3,zero,3eb4 <__alt_data_end+0xfffd3eb4>
    40dc:	d9000c17 	ldw	r4,48(sp)
    40e0:	0101730e 	bge	zero,r4,46b0 <_dtoa_r+0x15cc>
    40e4:	d9000615 	stw	r4,24(sp)
    40e8:	003ed006 	br	3c2c <__alt_data_end+0xfffd3c2c>
    40ec:	00800084 	movi	r2,2
    40f0:	3081861e 	bne	r6,r2,470c <_dtoa_r+0x1628>
    40f4:	d8000b15 	stw	zero,44(sp)
    40f8:	003f3c06 	br	3dec <__alt_data_end+0xfffd3dec>
    40fc:	dc000917 	ldw	r16,36(sp)
    4100:	003e9206 	br	3b4c <__alt_data_end+0xfffd3b4c>
    4104:	d9c00317 	ldw	r7,12(sp)
    4108:	00800084 	movi	r2,2
    410c:	11fec50e 	bge	r2,r7,3c24 <__alt_data_end+0xfffd3c24>
    4110:	d9000617 	ldw	r4,24(sp)
    4114:	20013c1e 	bne	r4,zero,4608 <_dtoa_r+0x1524>
    4118:	a80b883a 	mov	r5,r21
    411c:	000f883a 	mov	r7,zero
    4120:	01800144 	movi	r6,5
    4124:	e009883a 	mov	r4,fp
    4128:	00062480 	call	6248 <__multadd>
    412c:	100b883a 	mov	r5,r2
    4130:	8009883a 	mov	r4,r16
    4134:	102b883a 	mov	r21,r2
    4138:	0006afc0 	call	6afc <__mcmp>
    413c:	dc000915 	stw	r16,36(sp)
    4140:	00bf410e 	bge	zero,r2,3e48 <__alt_data_end+0xfffd3e48>
    4144:	d9c00717 	ldw	r7,28(sp)
    4148:	00800c44 	movi	r2,49
    414c:	38800005 	stb	r2,0(r7)
    4150:	d8800517 	ldw	r2,20(sp)
    4154:	3dc00044 	addi	r23,r7,1
    4158:	10800044 	addi	r2,r2,1
    415c:	d8800515 	stw	r2,20(sp)
    4160:	003f3d06 	br	3e58 <__alt_data_end+0xfffd3e58>
    4164:	d9800517 	ldw	r6,20(sp)
    4168:	d9c00717 	ldw	r7,28(sp)
    416c:	00800c44 	movi	r2,49
    4170:	31800044 	addi	r6,r6,1
    4174:	d9800515 	stw	r6,20(sp)
    4178:	38800005 	stb	r2,0(r7)
    417c:	003edf06 	br	3cfc <__alt_data_end+0xfffd3cfc>
    4180:	d8000b15 	stw	zero,44(sp)
    4184:	003c9f06 	br	3404 <__alt_data_end+0xfffd3404>
    4188:	903e7e1e 	bne	r18,zero,3b84 <__alt_data_end+0xfffd3b84>
    418c:	00800434 	movhi	r2,16
    4190:	10bfffc4 	addi	r2,r2,-1
    4194:	9884703a 	and	r2,r19,r2
    4198:	1000ea1e 	bne	r2,zero,4544 <_dtoa_r+0x1460>
    419c:	9cdffc2c 	andhi	r19,r19,32752
    41a0:	9800e826 	beq	r19,zero,4544 <_dtoa_r+0x1460>
    41a4:	d9c00817 	ldw	r7,32(sp)
    41a8:	b5800044 	addi	r22,r22,1
    41ac:	04c00044 	movi	r19,1
    41b0:	39c00044 	addi	r7,r7,1
    41b4:	d9c00815 	stw	r7,32(sp)
    41b8:	d8800d17 	ldw	r2,52(sp)
    41bc:	103e721e 	bne	r2,zero,3b88 <__alt_data_end+0xfffd3b88>
    41c0:	00800044 	movi	r2,1
    41c4:	003e7906 	br	3bac <__alt_data_end+0xfffd3bac>
    41c8:	8009883a 	mov	r4,r16
    41cc:	000d4180 	call	d418 <__floatsidf>
    41d0:	d9800f17 	ldw	r6,60(sp)
    41d4:	d9c01017 	ldw	r7,64(sp)
    41d8:	1009883a 	mov	r4,r2
    41dc:	180b883a 	mov	r5,r3
    41e0:	000c2300 	call	c230 <__muldf3>
    41e4:	000d883a 	mov	r6,zero
    41e8:	01d00734 	movhi	r7,16412
    41ec:	1009883a 	mov	r4,r2
    41f0:	180b883a 	mov	r5,r3
    41f4:	000ad5c0 	call	ad5c <__adddf3>
    41f8:	047f3034 	movhi	r17,64704
    41fc:	1021883a 	mov	r16,r2
    4200:	1c63883a 	add	r17,r3,r17
    4204:	d9000f17 	ldw	r4,60(sp)
    4208:	d9401017 	ldw	r5,64(sp)
    420c:	000d883a 	mov	r6,zero
    4210:	01d00534 	movhi	r7,16404
    4214:	000ca9c0 	call	ca9c <__subdf3>
    4218:	800d883a 	mov	r6,r16
    421c:	880f883a 	mov	r7,r17
    4220:	1009883a 	mov	r4,r2
    4224:	180b883a 	mov	r5,r3
    4228:	102b883a 	mov	r21,r2
    422c:	1829883a 	mov	r20,r3
    4230:	000c0600 	call	c060 <__gedf2>
    4234:	00806c16 	blt	zero,r2,43e8 <_dtoa_r+0x1304>
    4238:	89e0003c 	xorhi	r7,r17,32768
    423c:	800d883a 	mov	r6,r16
    4240:	a809883a 	mov	r4,r21
    4244:	a00b883a 	mov	r5,r20
    4248:	000c13c0 	call	c13c <__ledf2>
    424c:	103d7e0e 	bge	r2,zero,3848 <__alt_data_end+0xfffd3848>
    4250:	002b883a 	mov	r21,zero
    4254:	0023883a 	mov	r17,zero
    4258:	003efb06 	br	3e48 <__alt_data_end+0xfffd3e48>
    425c:	d8800717 	ldw	r2,28(sp)
    4260:	003bd006 	br	31a4 <__alt_data_end+0xfffd31a4>
    4264:	d9000a17 	ldw	r4,40(sp)
    4268:	d9800d17 	ldw	r6,52(sp)
    426c:	dd400a15 	stw	r21,40(sp)
    4270:	a905c83a 	sub	r2,r21,r4
    4274:	308d883a 	add	r6,r6,r2
    4278:	d9800d15 	stw	r6,52(sp)
    427c:	002b883a 	mov	r21,zero
    4280:	003e0606 	br	3a9c <__alt_data_end+0xfffd3a9c>
    4284:	9023883a 	mov	r17,r18
    4288:	9829883a 	mov	r20,r19
    428c:	04000084 	movi	r16,2
    4290:	003c9206 	br	34dc <__alt_data_end+0xfffd34dc>
    4294:	04000044 	movi	r16,1
    4298:	dc000c15 	stw	r16,48(sp)
    429c:	dc000615 	stw	r16,24(sp)
    42a0:	dc002215 	stw	r16,136(sp)
    42a4:	e0001115 	stw	zero,68(fp)
    42a8:	000b883a 	mov	r5,zero
    42ac:	003c6906 	br	3454 <__alt_data_end+0xfffd3454>
    42b0:	3021883a 	mov	r16,r6
    42b4:	003ffb06 	br	42a4 <__alt_data_end+0xfffd42a4>
    42b8:	1000021e 	bne	r2,zero,42c4 <_dtoa_r+0x11e0>
    42bc:	4200004c 	andi	r8,r8,1
    42c0:	403e7d1e 	bne	r8,zero,3cb8 <__alt_data_end+0xfffd3cb8>
    42c4:	01000c04 	movi	r4,48
    42c8:	00000106 	br	42d0 <_dtoa_r+0x11ec>
    42cc:	102f883a 	mov	r23,r2
    42d0:	b8bfffc4 	addi	r2,r23,-1
    42d4:	10c00007 	ldb	r3,0(r2)
    42d8:	193ffc26 	beq	r3,r4,42cc <__alt_data_end+0xfffd42cc>
    42dc:	003e8706 	br	3cfc <__alt_data_end+0xfffd3cfc>
    42e0:	d8800517 	ldw	r2,20(sp)
    42e4:	00a3c83a 	sub	r17,zero,r2
    42e8:	8800a426 	beq	r17,zero,457c <_dtoa_r+0x1498>
    42ec:	888003cc 	andi	r2,r17,15
    42f0:	100490fa 	slli	r2,r2,3
    42f4:	00c00074 	movhi	r3,1
    42f8:	18dfd304 	addi	r3,r3,32588
    42fc:	1885883a 	add	r2,r3,r2
    4300:	11800017 	ldw	r6,0(r2)
    4304:	11c00117 	ldw	r7,4(r2)
    4308:	9009883a 	mov	r4,r18
    430c:	980b883a 	mov	r5,r19
    4310:	8823d13a 	srai	r17,r17,4
    4314:	000c2300 	call	c230 <__muldf3>
    4318:	d8800f15 	stw	r2,60(sp)
    431c:	d8c01015 	stw	r3,64(sp)
    4320:	8800e826 	beq	r17,zero,46c4 <_dtoa_r+0x15e0>
    4324:	05000074 	movhi	r20,1
    4328:	a51fc904 	addi	r20,r20,32548
    432c:	04000084 	movi	r16,2
    4330:	8980004c 	andi	r6,r17,1
    4334:	1009883a 	mov	r4,r2
    4338:	8823d07a 	srai	r17,r17,1
    433c:	180b883a 	mov	r5,r3
    4340:	30000426 	beq	r6,zero,4354 <_dtoa_r+0x1270>
    4344:	a1800017 	ldw	r6,0(r20)
    4348:	a1c00117 	ldw	r7,4(r20)
    434c:	84000044 	addi	r16,r16,1
    4350:	000c2300 	call	c230 <__muldf3>
    4354:	a5000204 	addi	r20,r20,8
    4358:	883ff51e 	bne	r17,zero,4330 <__alt_data_end+0xfffd4330>
    435c:	d8800f15 	stw	r2,60(sp)
    4360:	d8c01015 	stw	r3,64(sp)
    4364:	003c7606 	br	3540 <__alt_data_end+0xfffd3540>
    4368:	00c00c04 	movi	r3,48
    436c:	10c00005 	stb	r3,0(r2)
    4370:	d8c00517 	ldw	r3,20(sp)
    4374:	bd3fffc3 	ldbu	r20,-1(r23)
    4378:	18c00044 	addi	r3,r3,1
    437c:	d8c00515 	stw	r3,20(sp)
    4380:	003db906 	br	3a68 <__alt_data_end+0xfffd3a68>
    4384:	89400117 	ldw	r5,4(r17)
    4388:	e009883a 	mov	r4,fp
    438c:	00061780 	call	6178 <_Balloc>
    4390:	89800417 	ldw	r6,16(r17)
    4394:	89400304 	addi	r5,r17,12
    4398:	11000304 	addi	r4,r2,12
    439c:	31800084 	addi	r6,r6,2
    43a0:	318d883a 	add	r6,r6,r6
    43a4:	318d883a 	add	r6,r6,r6
    43a8:	1027883a 	mov	r19,r2
    43ac:	0005f080 	call	5f08 <memcpy>
    43b0:	01800044 	movi	r6,1
    43b4:	980b883a 	mov	r5,r19
    43b8:	e009883a 	mov	r4,fp
    43bc:	00069b40 	call	69b4 <__lshift>
    43c0:	1029883a 	mov	r20,r2
    43c4:	003ecc06 	br	3ef8 <__alt_data_end+0xfffd3ef8>
    43c8:	00800e44 	movi	r2,57
    43cc:	90809026 	beq	r18,r2,4610 <_dtoa_r+0x152c>
    43d0:	92000044 	addi	r8,r18,1
    43d4:	003f1f06 	br	4054 <__alt_data_end+0xfffd4054>
    43d8:	9011883a 	mov	r8,r18
    43dc:	8825883a 	mov	r18,r17
    43e0:	a023883a 	mov	r17,r20
    43e4:	003e2906 	br	3c8c <__alt_data_end+0xfffd3c8c>
    43e8:	002b883a 	mov	r21,zero
    43ec:	0023883a 	mov	r17,zero
    43f0:	003f5406 	br	4144 <__alt_data_end+0xfffd4144>
    43f4:	61bfffc4 	addi	r6,r12,-1
    43f8:	300490fa 	slli	r2,r6,3
    43fc:	00c00074 	movhi	r3,1
    4400:	18dfd304 	addi	r3,r3,32588
    4404:	1885883a 	add	r2,r3,r2
    4408:	11000017 	ldw	r4,0(r2)
    440c:	11400117 	ldw	r5,4(r2)
    4410:	d8800717 	ldw	r2,28(sp)
    4414:	880f883a 	mov	r7,r17
    4418:	d9801215 	stw	r6,72(sp)
    441c:	800d883a 	mov	r6,r16
    4420:	db001615 	stw	r12,88(sp)
    4424:	15c00044 	addi	r23,r2,1
    4428:	000c2300 	call	c230 <__muldf3>
    442c:	d9401017 	ldw	r5,64(sp)
    4430:	d9000f17 	ldw	r4,60(sp)
    4434:	d8c01515 	stw	r3,84(sp)
    4438:	d8801415 	stw	r2,80(sp)
    443c:	000d3980 	call	d398 <__fixdfsi>
    4440:	1009883a 	mov	r4,r2
    4444:	1021883a 	mov	r16,r2
    4448:	000d4180 	call	d418 <__floatsidf>
    444c:	d9000f17 	ldw	r4,60(sp)
    4450:	d9401017 	ldw	r5,64(sp)
    4454:	100d883a 	mov	r6,r2
    4458:	180f883a 	mov	r7,r3
    445c:	000ca9c0 	call	ca9c <__subdf3>
    4460:	1829883a 	mov	r20,r3
    4464:	d8c00717 	ldw	r3,28(sp)
    4468:	84000c04 	addi	r16,r16,48
    446c:	1023883a 	mov	r17,r2
    4470:	1c000005 	stb	r16,0(r3)
    4474:	db001617 	ldw	r12,88(sp)
    4478:	00800044 	movi	r2,1
    447c:	60802226 	beq	r12,r2,4508 <_dtoa_r+0x1424>
    4480:	d9c00717 	ldw	r7,28(sp)
    4484:	8805883a 	mov	r2,r17
    4488:	b82b883a 	mov	r21,r23
    448c:	3b19883a 	add	r12,r7,r12
    4490:	6023883a 	mov	r17,r12
    4494:	a007883a 	mov	r3,r20
    4498:	dc800f15 	stw	r18,60(sp)
    449c:	000d883a 	mov	r6,zero
    44a0:	01d00934 	movhi	r7,16420
    44a4:	1009883a 	mov	r4,r2
    44a8:	180b883a 	mov	r5,r3
    44ac:	000c2300 	call	c230 <__muldf3>
    44b0:	180b883a 	mov	r5,r3
    44b4:	1009883a 	mov	r4,r2
    44b8:	1829883a 	mov	r20,r3
    44bc:	1025883a 	mov	r18,r2
    44c0:	000d3980 	call	d398 <__fixdfsi>
    44c4:	1009883a 	mov	r4,r2
    44c8:	1021883a 	mov	r16,r2
    44cc:	000d4180 	call	d418 <__floatsidf>
    44d0:	100d883a 	mov	r6,r2
    44d4:	180f883a 	mov	r7,r3
    44d8:	9009883a 	mov	r4,r18
    44dc:	a00b883a 	mov	r5,r20
    44e0:	84000c04 	addi	r16,r16,48
    44e4:	000ca9c0 	call	ca9c <__subdf3>
    44e8:	ad400044 	addi	r21,r21,1
    44ec:	ac3fffc5 	stb	r16,-1(r21)
    44f0:	ac7fea1e 	bne	r21,r17,449c <__alt_data_end+0xfffd449c>
    44f4:	1023883a 	mov	r17,r2
    44f8:	d8801217 	ldw	r2,72(sp)
    44fc:	dc800f17 	ldw	r18,60(sp)
    4500:	1829883a 	mov	r20,r3
    4504:	b8af883a 	add	r23,r23,r2
    4508:	d9001417 	ldw	r4,80(sp)
    450c:	d9401517 	ldw	r5,84(sp)
    4510:	000d883a 	mov	r6,zero
    4514:	01cff834 	movhi	r7,16352
    4518:	000ad5c0 	call	ad5c <__adddf3>
    451c:	880d883a 	mov	r6,r17
    4520:	a00f883a 	mov	r7,r20
    4524:	1009883a 	mov	r4,r2
    4528:	180b883a 	mov	r5,r3
    452c:	000c13c0 	call	c13c <__ledf2>
    4530:	10003e0e 	bge	r2,zero,462c <_dtoa_r+0x1548>
    4534:	d9001317 	ldw	r4,76(sp)
    4538:	bd3fffc3 	ldbu	r20,-1(r23)
    453c:	d9000515 	stw	r4,20(sp)
    4540:	003d3b06 	br	3a30 <__alt_data_end+0xfffd3a30>
    4544:	0027883a 	mov	r19,zero
    4548:	003f1b06 	br	41b8 <__alt_data_end+0xfffd41b8>
    454c:	d8800817 	ldw	r2,32(sp)
    4550:	11e9c83a 	sub	r20,r2,r7
    4554:	0005883a 	mov	r2,zero
    4558:	003d5406 	br	3aac <__alt_data_end+0xfffd3aac>
    455c:	00800044 	movi	r2,1
    4560:	003dc706 	br	3c80 <__alt_data_end+0xfffd3c80>
    4564:	d8c00217 	ldw	r3,8(sp)
    4568:	00800d84 	movi	r2,54
    456c:	dd400a17 	ldw	r21,40(sp)
    4570:	10c5c83a 	sub	r2,r2,r3
    4574:	dd000817 	ldw	r20,32(sp)
    4578:	003d4c06 	br	3aac <__alt_data_end+0xfffd3aac>
    457c:	dc800f15 	stw	r18,60(sp)
    4580:	dcc01015 	stw	r19,64(sp)
    4584:	04000084 	movi	r16,2
    4588:	003bed06 	br	3540 <__alt_data_end+0xfffd3540>
    458c:	d9000617 	ldw	r4,24(sp)
    4590:	203f0d26 	beq	r4,zero,41c8 <__alt_data_end+0xfffd41c8>
    4594:	d9800c17 	ldw	r6,48(sp)
    4598:	01bcab0e 	bge	zero,r6,3848 <__alt_data_end+0xfffd3848>
    459c:	d9401017 	ldw	r5,64(sp)
    45a0:	d9000f17 	ldw	r4,60(sp)
    45a4:	000d883a 	mov	r6,zero
    45a8:	01d00934 	movhi	r7,16420
    45ac:	000c2300 	call	c230 <__muldf3>
    45b0:	81000044 	addi	r4,r16,1
    45b4:	d8800f15 	stw	r2,60(sp)
    45b8:	d8c01015 	stw	r3,64(sp)
    45bc:	000d4180 	call	d418 <__floatsidf>
    45c0:	d9800f17 	ldw	r6,60(sp)
    45c4:	d9c01017 	ldw	r7,64(sp)
    45c8:	1009883a 	mov	r4,r2
    45cc:	180b883a 	mov	r5,r3
    45d0:	000c2300 	call	c230 <__muldf3>
    45d4:	01d00734 	movhi	r7,16412
    45d8:	000d883a 	mov	r6,zero
    45dc:	1009883a 	mov	r4,r2
    45e0:	180b883a 	mov	r5,r3
    45e4:	000ad5c0 	call	ad5c <__adddf3>
    45e8:	d9c00517 	ldw	r7,20(sp)
    45ec:	047f3034 	movhi	r17,64704
    45f0:	1021883a 	mov	r16,r2
    45f4:	39ffffc4 	addi	r7,r7,-1
    45f8:	d9c01315 	stw	r7,76(sp)
    45fc:	1c63883a 	add	r17,r3,r17
    4600:	db000c17 	ldw	r12,48(sp)
    4604:	003bea06 	br	35b0 <__alt_data_end+0xfffd35b0>
    4608:	dc000915 	stw	r16,36(sp)
    460c:	003e0e06 	br	3e48 <__alt_data_end+0xfffd3e48>
    4610:	01000e44 	movi	r4,57
    4614:	8825883a 	mov	r18,r17
    4618:	9dc00044 	addi	r23,r19,1
    461c:	99000005 	stb	r4,0(r19)
    4620:	a023883a 	mov	r17,r20
    4624:	dc000915 	stw	r16,36(sp)
    4628:	003da406 	br	3cbc <__alt_data_end+0xfffd3cbc>
    462c:	d9801417 	ldw	r6,80(sp)
    4630:	d9c01517 	ldw	r7,84(sp)
    4634:	0009883a 	mov	r4,zero
    4638:	014ff834 	movhi	r5,16352
    463c:	000ca9c0 	call	ca9c <__subdf3>
    4640:	880d883a 	mov	r6,r17
    4644:	a00f883a 	mov	r7,r20
    4648:	1009883a 	mov	r4,r2
    464c:	180b883a 	mov	r5,r3
    4650:	000c0600 	call	c060 <__gedf2>
    4654:	00bc7c0e 	bge	zero,r2,3848 <__alt_data_end+0xfffd3848>
    4658:	01000c04 	movi	r4,48
    465c:	00000106 	br	4664 <_dtoa_r+0x1580>
    4660:	102f883a 	mov	r23,r2
    4664:	b8bfffc4 	addi	r2,r23,-1
    4668:	10c00007 	ldb	r3,0(r2)
    466c:	193ffc26 	beq	r3,r4,4660 <__alt_data_end+0xfffd4660>
    4670:	d9801317 	ldw	r6,76(sp)
    4674:	d9800515 	stw	r6,20(sp)
    4678:	003c4406 	br	378c <__alt_data_end+0xfffd378c>
    467c:	d9801317 	ldw	r6,76(sp)
    4680:	d9800515 	stw	r6,20(sp)
    4684:	003cea06 	br	3a30 <__alt_data_end+0xfffd3a30>
    4688:	dd800f17 	ldw	r22,60(sp)
    468c:	dcc01017 	ldw	r19,64(sp)
    4690:	dc801217 	ldw	r18,72(sp)
    4694:	003c6c06 	br	3848 <__alt_data_end+0xfffd3848>
    4698:	903e031e 	bne	r18,zero,3ea8 <__alt_data_end+0xfffd3ea8>
    469c:	003ebb06 	br	418c <__alt_data_end+0xfffd418c>
    46a0:	103e6c1e 	bne	r2,zero,4054 <__alt_data_end+0xfffd4054>
    46a4:	4080004c 	andi	r2,r8,1
    46a8:	103e6a26 	beq	r2,zero,4054 <__alt_data_end+0xfffd4054>
    46ac:	003e6606 	br	4048 <__alt_data_end+0xfffd4048>
    46b0:	d8c00317 	ldw	r3,12(sp)
    46b4:	00800084 	movi	r2,2
    46b8:	10c02916 	blt	r2,r3,4760 <_dtoa_r+0x167c>
    46bc:	d9000c17 	ldw	r4,48(sp)
    46c0:	003e8806 	br	40e4 <__alt_data_end+0xfffd40e4>
    46c4:	04000084 	movi	r16,2
    46c8:	003b9d06 	br	3540 <__alt_data_end+0xfffd3540>
    46cc:	d9001317 	ldw	r4,76(sp)
    46d0:	d9000515 	stw	r4,20(sp)
    46d4:	003cd606 	br	3a30 <__alt_data_end+0xfffd3a30>
    46d8:	d8801317 	ldw	r2,76(sp)
    46dc:	d8800515 	stw	r2,20(sp)
    46e0:	003c2a06 	br	378c <__alt_data_end+0xfffd378c>
    46e4:	d9800317 	ldw	r6,12(sp)
    46e8:	00800084 	movi	r2,2
    46ec:	11801516 	blt	r2,r6,4744 <_dtoa_r+0x1660>
    46f0:	d9c00c17 	ldw	r7,48(sp)
    46f4:	d9c00615 	stw	r7,24(sp)
    46f8:	003df706 	br	3ed8 <__alt_data_end+0xfffd3ed8>
    46fc:	193d3926 	beq	r3,r4,3be4 <__alt_data_end+0xfffd3be4>
    4700:	00c00f04 	movi	r3,60
    4704:	1885c83a 	sub	r2,r3,r2
    4708:	003ddf06 	br	3e88 <__alt_data_end+0xfffd3e88>
    470c:	e009883a 	mov	r4,fp
    4710:	e0001115 	stw	zero,68(fp)
    4714:	000b883a 	mov	r5,zero
    4718:	00061780 	call	6178 <_Balloc>
    471c:	d8800715 	stw	r2,28(sp)
    4720:	d8c00717 	ldw	r3,28(sp)
    4724:	00bfffc4 	movi	r2,-1
    4728:	01000044 	movi	r4,1
    472c:	d8800c15 	stw	r2,48(sp)
    4730:	e0c01015 	stw	r3,64(fp)
    4734:	d9000b15 	stw	r4,44(sp)
    4738:	d8800615 	stw	r2,24(sp)
    473c:	d8002215 	stw	zero,136(sp)
    4740:	003c4106 	br	3848 <__alt_data_end+0xfffd3848>
    4744:	d8c00c17 	ldw	r3,48(sp)
    4748:	d8c00615 	stw	r3,24(sp)
    474c:	003e7006 	br	4110 <__alt_data_end+0xfffd4110>
    4750:	04400044 	movi	r17,1
    4754:	003b2006 	br	33d8 <__alt_data_end+0xfffd33d8>
    4758:	000b883a 	mov	r5,zero
    475c:	003b3d06 	br	3454 <__alt_data_end+0xfffd3454>
    4760:	d8800c17 	ldw	r2,48(sp)
    4764:	d8800615 	stw	r2,24(sp)
    4768:	003e6906 	br	4110 <__alt_data_end+0xfffd4110>

0000476c <__sflush_r>:
    476c:	2880030b 	ldhu	r2,12(r5)
    4770:	defffb04 	addi	sp,sp,-20
    4774:	dcc00315 	stw	r19,12(sp)
    4778:	dc400115 	stw	r17,4(sp)
    477c:	dfc00415 	stw	ra,16(sp)
    4780:	dc800215 	stw	r18,8(sp)
    4784:	dc000015 	stw	r16,0(sp)
    4788:	10c0020c 	andi	r3,r2,8
    478c:	2823883a 	mov	r17,r5
    4790:	2027883a 	mov	r19,r4
    4794:	1800311e 	bne	r3,zero,485c <__sflush_r+0xf0>
    4798:	28c00117 	ldw	r3,4(r5)
    479c:	10820014 	ori	r2,r2,2048
    47a0:	2880030d 	sth	r2,12(r5)
    47a4:	00c04b0e 	bge	zero,r3,48d4 <__sflush_r+0x168>
    47a8:	8a000a17 	ldw	r8,40(r17)
    47ac:	40002326 	beq	r8,zero,483c <__sflush_r+0xd0>
    47b0:	9c000017 	ldw	r16,0(r19)
    47b4:	10c4000c 	andi	r3,r2,4096
    47b8:	98000015 	stw	zero,0(r19)
    47bc:	18004826 	beq	r3,zero,48e0 <__sflush_r+0x174>
    47c0:	89801417 	ldw	r6,80(r17)
    47c4:	10c0010c 	andi	r3,r2,4
    47c8:	18000626 	beq	r3,zero,47e4 <__sflush_r+0x78>
    47cc:	88c00117 	ldw	r3,4(r17)
    47d0:	88800c17 	ldw	r2,48(r17)
    47d4:	30cdc83a 	sub	r6,r6,r3
    47d8:	10000226 	beq	r2,zero,47e4 <__sflush_r+0x78>
    47dc:	88800f17 	ldw	r2,60(r17)
    47e0:	308dc83a 	sub	r6,r6,r2
    47e4:	89400717 	ldw	r5,28(r17)
    47e8:	000f883a 	mov	r7,zero
    47ec:	9809883a 	mov	r4,r19
    47f0:	403ee83a 	callr	r8
    47f4:	00ffffc4 	movi	r3,-1
    47f8:	10c04426 	beq	r2,r3,490c <__sflush_r+0x1a0>
    47fc:	88c0030b 	ldhu	r3,12(r17)
    4800:	89000417 	ldw	r4,16(r17)
    4804:	88000115 	stw	zero,4(r17)
    4808:	197dffcc 	andi	r5,r3,63487
    480c:	8940030d 	sth	r5,12(r17)
    4810:	89000015 	stw	r4,0(r17)
    4814:	18c4000c 	andi	r3,r3,4096
    4818:	18002c1e 	bne	r3,zero,48cc <__sflush_r+0x160>
    481c:	89400c17 	ldw	r5,48(r17)
    4820:	9c000015 	stw	r16,0(r19)
    4824:	28000526 	beq	r5,zero,483c <__sflush_r+0xd0>
    4828:	88801004 	addi	r2,r17,64
    482c:	28800226 	beq	r5,r2,4838 <__sflush_r+0xcc>
    4830:	9809883a 	mov	r4,r19
    4834:	0004ee80 	call	4ee8 <_free_r>
    4838:	88000c15 	stw	zero,48(r17)
    483c:	0005883a 	mov	r2,zero
    4840:	dfc00417 	ldw	ra,16(sp)
    4844:	dcc00317 	ldw	r19,12(sp)
    4848:	dc800217 	ldw	r18,8(sp)
    484c:	dc400117 	ldw	r17,4(sp)
    4850:	dc000017 	ldw	r16,0(sp)
    4854:	dec00504 	addi	sp,sp,20
    4858:	f800283a 	ret
    485c:	2c800417 	ldw	r18,16(r5)
    4860:	903ff626 	beq	r18,zero,483c <__alt_data_end+0xfffd483c>
    4864:	2c000017 	ldw	r16,0(r5)
    4868:	108000cc 	andi	r2,r2,3
    486c:	2c800015 	stw	r18,0(r5)
    4870:	84a1c83a 	sub	r16,r16,r18
    4874:	1000131e 	bne	r2,zero,48c4 <__sflush_r+0x158>
    4878:	28800517 	ldw	r2,20(r5)
    487c:	88800215 	stw	r2,8(r17)
    4880:	04000316 	blt	zero,r16,4890 <__sflush_r+0x124>
    4884:	003fed06 	br	483c <__alt_data_end+0xfffd483c>
    4888:	90a5883a 	add	r18,r18,r2
    488c:	043feb0e 	bge	zero,r16,483c <__alt_data_end+0xfffd483c>
    4890:	88800917 	ldw	r2,36(r17)
    4894:	89400717 	ldw	r5,28(r17)
    4898:	800f883a 	mov	r7,r16
    489c:	900d883a 	mov	r6,r18
    48a0:	9809883a 	mov	r4,r19
    48a4:	103ee83a 	callr	r2
    48a8:	80a1c83a 	sub	r16,r16,r2
    48ac:	00bff616 	blt	zero,r2,4888 <__alt_data_end+0xfffd4888>
    48b0:	88c0030b 	ldhu	r3,12(r17)
    48b4:	00bfffc4 	movi	r2,-1
    48b8:	18c01014 	ori	r3,r3,64
    48bc:	88c0030d 	sth	r3,12(r17)
    48c0:	003fdf06 	br	4840 <__alt_data_end+0xfffd4840>
    48c4:	0005883a 	mov	r2,zero
    48c8:	003fec06 	br	487c <__alt_data_end+0xfffd487c>
    48cc:	88801415 	stw	r2,80(r17)
    48d0:	003fd206 	br	481c <__alt_data_end+0xfffd481c>
    48d4:	28c00f17 	ldw	r3,60(r5)
    48d8:	00ffb316 	blt	zero,r3,47a8 <__alt_data_end+0xfffd47a8>
    48dc:	003fd706 	br	483c <__alt_data_end+0xfffd483c>
    48e0:	89400717 	ldw	r5,28(r17)
    48e4:	000d883a 	mov	r6,zero
    48e8:	01c00044 	movi	r7,1
    48ec:	9809883a 	mov	r4,r19
    48f0:	403ee83a 	callr	r8
    48f4:	100d883a 	mov	r6,r2
    48f8:	00bfffc4 	movi	r2,-1
    48fc:	30801426 	beq	r6,r2,4950 <__sflush_r+0x1e4>
    4900:	8880030b 	ldhu	r2,12(r17)
    4904:	8a000a17 	ldw	r8,40(r17)
    4908:	003fae06 	br	47c4 <__alt_data_end+0xfffd47c4>
    490c:	98c00017 	ldw	r3,0(r19)
    4910:	183fba26 	beq	r3,zero,47fc <__alt_data_end+0xfffd47fc>
    4914:	01000744 	movi	r4,29
    4918:	19000626 	beq	r3,r4,4934 <__sflush_r+0x1c8>
    491c:	01000584 	movi	r4,22
    4920:	19000426 	beq	r3,r4,4934 <__sflush_r+0x1c8>
    4924:	88c0030b 	ldhu	r3,12(r17)
    4928:	18c01014 	ori	r3,r3,64
    492c:	88c0030d 	sth	r3,12(r17)
    4930:	003fc306 	br	4840 <__alt_data_end+0xfffd4840>
    4934:	8880030b 	ldhu	r2,12(r17)
    4938:	88c00417 	ldw	r3,16(r17)
    493c:	88000115 	stw	zero,4(r17)
    4940:	10bdffcc 	andi	r2,r2,63487
    4944:	8880030d 	sth	r2,12(r17)
    4948:	88c00015 	stw	r3,0(r17)
    494c:	003fb306 	br	481c <__alt_data_end+0xfffd481c>
    4950:	98800017 	ldw	r2,0(r19)
    4954:	103fea26 	beq	r2,zero,4900 <__alt_data_end+0xfffd4900>
    4958:	00c00744 	movi	r3,29
    495c:	10c00226 	beq	r2,r3,4968 <__sflush_r+0x1fc>
    4960:	00c00584 	movi	r3,22
    4964:	10c0031e 	bne	r2,r3,4974 <__sflush_r+0x208>
    4968:	9c000015 	stw	r16,0(r19)
    496c:	0005883a 	mov	r2,zero
    4970:	003fb306 	br	4840 <__alt_data_end+0xfffd4840>
    4974:	88c0030b 	ldhu	r3,12(r17)
    4978:	3005883a 	mov	r2,r6
    497c:	18c01014 	ori	r3,r3,64
    4980:	88c0030d 	sth	r3,12(r17)
    4984:	003fae06 	br	4840 <__alt_data_end+0xfffd4840>

00004988 <_fflush_r>:
    4988:	defffd04 	addi	sp,sp,-12
    498c:	dc000115 	stw	r16,4(sp)
    4990:	dfc00215 	stw	ra,8(sp)
    4994:	2021883a 	mov	r16,r4
    4998:	20000226 	beq	r4,zero,49a4 <_fflush_r+0x1c>
    499c:	20800e17 	ldw	r2,56(r4)
    49a0:	10000c26 	beq	r2,zero,49d4 <_fflush_r+0x4c>
    49a4:	2880030f 	ldh	r2,12(r5)
    49a8:	1000051e 	bne	r2,zero,49c0 <_fflush_r+0x38>
    49ac:	0005883a 	mov	r2,zero
    49b0:	dfc00217 	ldw	ra,8(sp)
    49b4:	dc000117 	ldw	r16,4(sp)
    49b8:	dec00304 	addi	sp,sp,12
    49bc:	f800283a 	ret
    49c0:	8009883a 	mov	r4,r16
    49c4:	dfc00217 	ldw	ra,8(sp)
    49c8:	dc000117 	ldw	r16,4(sp)
    49cc:	dec00304 	addi	sp,sp,12
    49d0:	000476c1 	jmpi	476c <__sflush_r>
    49d4:	d9400015 	stw	r5,0(sp)
    49d8:	0004d740 	call	4d74 <__sinit>
    49dc:	d9400017 	ldw	r5,0(sp)
    49e0:	003ff006 	br	49a4 <__alt_data_end+0xfffd49a4>

000049e4 <fflush>:
    49e4:	20000526 	beq	r4,zero,49fc <fflush+0x18>
    49e8:	008000b4 	movhi	r2,2
    49ec:	10a74e04 	addi	r2,r2,-25288
    49f0:	200b883a 	mov	r5,r4
    49f4:	11000017 	ldw	r4,0(r2)
    49f8:	00049881 	jmpi	4988 <_fflush_r>
    49fc:	008000b4 	movhi	r2,2
    4a00:	10a74d04 	addi	r2,r2,-25292
    4a04:	11000017 	ldw	r4,0(r2)
    4a08:	01400034 	movhi	r5,0
    4a0c:	29526204 	addi	r5,r5,18824
    4a10:	00052bc1 	jmpi	52bc <_fwalk_reent>

00004a14 <__fp_unlock>:
    4a14:	0005883a 	mov	r2,zero
    4a18:	f800283a 	ret

00004a1c <_cleanup_r>:
    4a1c:	01400074 	movhi	r5,1
    4a20:	29638c04 	addi	r5,r5,-29136
    4a24:	00052bc1 	jmpi	52bc <_fwalk_reent>

00004a28 <__sinit.part.1>:
    4a28:	defff704 	addi	sp,sp,-36
    4a2c:	00c00034 	movhi	r3,0
    4a30:	dfc00815 	stw	ra,32(sp)
    4a34:	ddc00715 	stw	r23,28(sp)
    4a38:	dd800615 	stw	r22,24(sp)
    4a3c:	dd400515 	stw	r21,20(sp)
    4a40:	dd000415 	stw	r20,16(sp)
    4a44:	dcc00315 	stw	r19,12(sp)
    4a48:	dc800215 	stw	r18,8(sp)
    4a4c:	dc400115 	stw	r17,4(sp)
    4a50:	dc000015 	stw	r16,0(sp)
    4a54:	18d28704 	addi	r3,r3,18972
    4a58:	24000117 	ldw	r16,4(r4)
    4a5c:	20c00f15 	stw	r3,60(r4)
    4a60:	2080bb04 	addi	r2,r4,748
    4a64:	00c000c4 	movi	r3,3
    4a68:	20c0b915 	stw	r3,740(r4)
    4a6c:	2080ba15 	stw	r2,744(r4)
    4a70:	2000b815 	stw	zero,736(r4)
    4a74:	05c00204 	movi	r23,8
    4a78:	00800104 	movi	r2,4
    4a7c:	2025883a 	mov	r18,r4
    4a80:	b80d883a 	mov	r6,r23
    4a84:	81001704 	addi	r4,r16,92
    4a88:	000b883a 	mov	r5,zero
    4a8c:	80000015 	stw	zero,0(r16)
    4a90:	80000115 	stw	zero,4(r16)
    4a94:	80000215 	stw	zero,8(r16)
    4a98:	8080030d 	sth	r2,12(r16)
    4a9c:	80001915 	stw	zero,100(r16)
    4aa0:	8000038d 	sth	zero,14(r16)
    4aa4:	80000415 	stw	zero,16(r16)
    4aa8:	80000515 	stw	zero,20(r16)
    4aac:	80000615 	stw	zero,24(r16)
    4ab0:	00060500 	call	6050 <memset>
    4ab4:	05800034 	movhi	r22,0
    4ab8:	94400217 	ldw	r17,8(r18)
    4abc:	05400034 	movhi	r21,0
    4ac0:	05000034 	movhi	r20,0
    4ac4:	04c00034 	movhi	r19,0
    4ac8:	b59cbe04 	addi	r22,r22,29432
    4acc:	ad5cd504 	addi	r21,r21,29524
    4ad0:	a51cf404 	addi	r20,r20,29648
    4ad4:	9cdd0b04 	addi	r19,r19,29740
    4ad8:	85800815 	stw	r22,32(r16)
    4adc:	85400915 	stw	r21,36(r16)
    4ae0:	85000a15 	stw	r20,40(r16)
    4ae4:	84c00b15 	stw	r19,44(r16)
    4ae8:	84000715 	stw	r16,28(r16)
    4aec:	00800284 	movi	r2,10
    4af0:	8880030d 	sth	r2,12(r17)
    4af4:	00800044 	movi	r2,1
    4af8:	b80d883a 	mov	r6,r23
    4afc:	89001704 	addi	r4,r17,92
    4b00:	000b883a 	mov	r5,zero
    4b04:	88000015 	stw	zero,0(r17)
    4b08:	88000115 	stw	zero,4(r17)
    4b0c:	88000215 	stw	zero,8(r17)
    4b10:	88001915 	stw	zero,100(r17)
    4b14:	8880038d 	sth	r2,14(r17)
    4b18:	88000415 	stw	zero,16(r17)
    4b1c:	88000515 	stw	zero,20(r17)
    4b20:	88000615 	stw	zero,24(r17)
    4b24:	00060500 	call	6050 <memset>
    4b28:	94000317 	ldw	r16,12(r18)
    4b2c:	00800484 	movi	r2,18
    4b30:	8c400715 	stw	r17,28(r17)
    4b34:	8d800815 	stw	r22,32(r17)
    4b38:	8d400915 	stw	r21,36(r17)
    4b3c:	8d000a15 	stw	r20,40(r17)
    4b40:	8cc00b15 	stw	r19,44(r17)
    4b44:	8080030d 	sth	r2,12(r16)
    4b48:	00800084 	movi	r2,2
    4b4c:	80000015 	stw	zero,0(r16)
    4b50:	80000115 	stw	zero,4(r16)
    4b54:	80000215 	stw	zero,8(r16)
    4b58:	80001915 	stw	zero,100(r16)
    4b5c:	8080038d 	sth	r2,14(r16)
    4b60:	80000415 	stw	zero,16(r16)
    4b64:	80000515 	stw	zero,20(r16)
    4b68:	80000615 	stw	zero,24(r16)
    4b6c:	b80d883a 	mov	r6,r23
    4b70:	000b883a 	mov	r5,zero
    4b74:	81001704 	addi	r4,r16,92
    4b78:	00060500 	call	6050 <memset>
    4b7c:	00800044 	movi	r2,1
    4b80:	84000715 	stw	r16,28(r16)
    4b84:	85800815 	stw	r22,32(r16)
    4b88:	85400915 	stw	r21,36(r16)
    4b8c:	85000a15 	stw	r20,40(r16)
    4b90:	84c00b15 	stw	r19,44(r16)
    4b94:	90800e15 	stw	r2,56(r18)
    4b98:	dfc00817 	ldw	ra,32(sp)
    4b9c:	ddc00717 	ldw	r23,28(sp)
    4ba0:	dd800617 	ldw	r22,24(sp)
    4ba4:	dd400517 	ldw	r21,20(sp)
    4ba8:	dd000417 	ldw	r20,16(sp)
    4bac:	dcc00317 	ldw	r19,12(sp)
    4bb0:	dc800217 	ldw	r18,8(sp)
    4bb4:	dc400117 	ldw	r17,4(sp)
    4bb8:	dc000017 	ldw	r16,0(sp)
    4bbc:	dec00904 	addi	sp,sp,36
    4bc0:	f800283a 	ret

00004bc4 <__fp_lock>:
    4bc4:	0005883a 	mov	r2,zero
    4bc8:	f800283a 	ret

00004bcc <__sfmoreglue>:
    4bcc:	defffc04 	addi	sp,sp,-16
    4bd0:	dc800215 	stw	r18,8(sp)
    4bd4:	2825883a 	mov	r18,r5
    4bd8:	dc000015 	stw	r16,0(sp)
    4bdc:	01401a04 	movi	r5,104
    4be0:	2021883a 	mov	r16,r4
    4be4:	913fffc4 	addi	r4,r18,-1
    4be8:	dfc00315 	stw	ra,12(sp)
    4bec:	dc400115 	stw	r17,4(sp)
    4bf0:	000ad340 	call	ad34 <__mulsi3>
    4bf4:	8009883a 	mov	r4,r16
    4bf8:	11401d04 	addi	r5,r2,116
    4bfc:	1023883a 	mov	r17,r2
    4c00:	00056180 	call	5618 <_malloc_r>
    4c04:	1021883a 	mov	r16,r2
    4c08:	10000726 	beq	r2,zero,4c28 <__sfmoreglue+0x5c>
    4c0c:	11000304 	addi	r4,r2,12
    4c10:	10000015 	stw	zero,0(r2)
    4c14:	14800115 	stw	r18,4(r2)
    4c18:	11000215 	stw	r4,8(r2)
    4c1c:	89801a04 	addi	r6,r17,104
    4c20:	000b883a 	mov	r5,zero
    4c24:	00060500 	call	6050 <memset>
    4c28:	8005883a 	mov	r2,r16
    4c2c:	dfc00317 	ldw	ra,12(sp)
    4c30:	dc800217 	ldw	r18,8(sp)
    4c34:	dc400117 	ldw	r17,4(sp)
    4c38:	dc000017 	ldw	r16,0(sp)
    4c3c:	dec00404 	addi	sp,sp,16
    4c40:	f800283a 	ret

00004c44 <__sfp>:
    4c44:	defffb04 	addi	sp,sp,-20
    4c48:	dc000015 	stw	r16,0(sp)
    4c4c:	040000b4 	movhi	r16,2
    4c50:	84274d04 	addi	r16,r16,-25292
    4c54:	dcc00315 	stw	r19,12(sp)
    4c58:	2027883a 	mov	r19,r4
    4c5c:	81000017 	ldw	r4,0(r16)
    4c60:	dfc00415 	stw	ra,16(sp)
    4c64:	dc800215 	stw	r18,8(sp)
    4c68:	20800e17 	ldw	r2,56(r4)
    4c6c:	dc400115 	stw	r17,4(sp)
    4c70:	1000021e 	bne	r2,zero,4c7c <__sfp+0x38>
    4c74:	0004a280 	call	4a28 <__sinit.part.1>
    4c78:	81000017 	ldw	r4,0(r16)
    4c7c:	2480b804 	addi	r18,r4,736
    4c80:	047fffc4 	movi	r17,-1
    4c84:	91000117 	ldw	r4,4(r18)
    4c88:	94000217 	ldw	r16,8(r18)
    4c8c:	213fffc4 	addi	r4,r4,-1
    4c90:	20000a16 	blt	r4,zero,4cbc <__sfp+0x78>
    4c94:	8080030f 	ldh	r2,12(r16)
    4c98:	10000c26 	beq	r2,zero,4ccc <__sfp+0x88>
    4c9c:	80c01d04 	addi	r3,r16,116
    4ca0:	00000206 	br	4cac <__sfp+0x68>
    4ca4:	18bfe60f 	ldh	r2,-104(r3)
    4ca8:	10000826 	beq	r2,zero,4ccc <__sfp+0x88>
    4cac:	213fffc4 	addi	r4,r4,-1
    4cb0:	1c3ffd04 	addi	r16,r3,-12
    4cb4:	18c01a04 	addi	r3,r3,104
    4cb8:	247ffa1e 	bne	r4,r17,4ca4 <__alt_data_end+0xfffd4ca4>
    4cbc:	90800017 	ldw	r2,0(r18)
    4cc0:	10001d26 	beq	r2,zero,4d38 <__sfp+0xf4>
    4cc4:	1025883a 	mov	r18,r2
    4cc8:	003fee06 	br	4c84 <__alt_data_end+0xfffd4c84>
    4ccc:	00bfffc4 	movi	r2,-1
    4cd0:	8080038d 	sth	r2,14(r16)
    4cd4:	00800044 	movi	r2,1
    4cd8:	8080030d 	sth	r2,12(r16)
    4cdc:	80001915 	stw	zero,100(r16)
    4ce0:	80000015 	stw	zero,0(r16)
    4ce4:	80000215 	stw	zero,8(r16)
    4ce8:	80000115 	stw	zero,4(r16)
    4cec:	80000415 	stw	zero,16(r16)
    4cf0:	80000515 	stw	zero,20(r16)
    4cf4:	80000615 	stw	zero,24(r16)
    4cf8:	01800204 	movi	r6,8
    4cfc:	000b883a 	mov	r5,zero
    4d00:	81001704 	addi	r4,r16,92
    4d04:	00060500 	call	6050 <memset>
    4d08:	8005883a 	mov	r2,r16
    4d0c:	80000c15 	stw	zero,48(r16)
    4d10:	80000d15 	stw	zero,52(r16)
    4d14:	80001115 	stw	zero,68(r16)
    4d18:	80001215 	stw	zero,72(r16)
    4d1c:	dfc00417 	ldw	ra,16(sp)
    4d20:	dcc00317 	ldw	r19,12(sp)
    4d24:	dc800217 	ldw	r18,8(sp)
    4d28:	dc400117 	ldw	r17,4(sp)
    4d2c:	dc000017 	ldw	r16,0(sp)
    4d30:	dec00504 	addi	sp,sp,20
    4d34:	f800283a 	ret
    4d38:	01400104 	movi	r5,4
    4d3c:	9809883a 	mov	r4,r19
    4d40:	0004bcc0 	call	4bcc <__sfmoreglue>
    4d44:	90800015 	stw	r2,0(r18)
    4d48:	103fde1e 	bne	r2,zero,4cc4 <__alt_data_end+0xfffd4cc4>
    4d4c:	00800304 	movi	r2,12
    4d50:	98800015 	stw	r2,0(r19)
    4d54:	0005883a 	mov	r2,zero
    4d58:	003ff006 	br	4d1c <__alt_data_end+0xfffd4d1c>

00004d5c <_cleanup>:
    4d5c:	008000b4 	movhi	r2,2
    4d60:	10a74d04 	addi	r2,r2,-25292
    4d64:	11000017 	ldw	r4,0(r2)
    4d68:	01400074 	movhi	r5,1
    4d6c:	29638c04 	addi	r5,r5,-29136
    4d70:	00052bc1 	jmpi	52bc <_fwalk_reent>

00004d74 <__sinit>:
    4d74:	20800e17 	ldw	r2,56(r4)
    4d78:	10000126 	beq	r2,zero,4d80 <__sinit+0xc>
    4d7c:	f800283a 	ret
    4d80:	0004a281 	jmpi	4a28 <__sinit.part.1>

00004d84 <__sfp_lock_acquire>:
    4d84:	f800283a 	ret

00004d88 <__sfp_lock_release>:
    4d88:	f800283a 	ret

00004d8c <__sinit_lock_acquire>:
    4d8c:	f800283a 	ret

00004d90 <__sinit_lock_release>:
    4d90:	f800283a 	ret

00004d94 <__fp_lock_all>:
    4d94:	008000b4 	movhi	r2,2
    4d98:	10a74e04 	addi	r2,r2,-25288
    4d9c:	11000017 	ldw	r4,0(r2)
    4da0:	01400034 	movhi	r5,0
    4da4:	2952f104 	addi	r5,r5,19396
    4da8:	00051f81 	jmpi	51f8 <_fwalk>

00004dac <__fp_unlock_all>:
    4dac:	008000b4 	movhi	r2,2
    4db0:	10a74e04 	addi	r2,r2,-25288
    4db4:	11000017 	ldw	r4,0(r2)
    4db8:	01400034 	movhi	r5,0
    4dbc:	29528504 	addi	r5,r5,18964
    4dc0:	00051f81 	jmpi	51f8 <_fwalk>

00004dc4 <_malloc_trim_r>:
    4dc4:	defffb04 	addi	sp,sp,-20
    4dc8:	dcc00315 	stw	r19,12(sp)
    4dcc:	04c000b4 	movhi	r19,2
    4dd0:	dc800215 	stw	r18,8(sp)
    4dd4:	dc400115 	stw	r17,4(sp)
    4dd8:	dc000015 	stw	r16,0(sp)
    4ddc:	dfc00415 	stw	ra,16(sp)
    4de0:	2821883a 	mov	r16,r5
    4de4:	9ce1c604 	addi	r19,r19,-30952
    4de8:	2025883a 	mov	r18,r4
    4dec:	000e3500 	call	e350 <__malloc_lock>
    4df0:	98800217 	ldw	r2,8(r19)
    4df4:	14400117 	ldw	r17,4(r2)
    4df8:	00bfff04 	movi	r2,-4
    4dfc:	88a2703a 	and	r17,r17,r2
    4e00:	8c21c83a 	sub	r16,r17,r16
    4e04:	8403fbc4 	addi	r16,r16,4079
    4e08:	8020d33a 	srli	r16,r16,12
    4e0c:	0083ffc4 	movi	r2,4095
    4e10:	843fffc4 	addi	r16,r16,-1
    4e14:	8020933a 	slli	r16,r16,12
    4e18:	1400060e 	bge	r2,r16,4e34 <_malloc_trim_r+0x70>
    4e1c:	000b883a 	mov	r5,zero
    4e20:	9009883a 	mov	r4,r18
    4e24:	00072a40 	call	72a4 <_sbrk_r>
    4e28:	98c00217 	ldw	r3,8(r19)
    4e2c:	1c47883a 	add	r3,r3,r17
    4e30:	10c00a26 	beq	r2,r3,4e5c <_malloc_trim_r+0x98>
    4e34:	9009883a 	mov	r4,r18
    4e38:	000e4700 	call	e470 <__malloc_unlock>
    4e3c:	0005883a 	mov	r2,zero
    4e40:	dfc00417 	ldw	ra,16(sp)
    4e44:	dcc00317 	ldw	r19,12(sp)
    4e48:	dc800217 	ldw	r18,8(sp)
    4e4c:	dc400117 	ldw	r17,4(sp)
    4e50:	dc000017 	ldw	r16,0(sp)
    4e54:	dec00504 	addi	sp,sp,20
    4e58:	f800283a 	ret
    4e5c:	040bc83a 	sub	r5,zero,r16
    4e60:	9009883a 	mov	r4,r18
    4e64:	00072a40 	call	72a4 <_sbrk_r>
    4e68:	00ffffc4 	movi	r3,-1
    4e6c:	10c00d26 	beq	r2,r3,4ea4 <_malloc_trim_r+0xe0>
    4e70:	00c000b4 	movhi	r3,2
    4e74:	18ee8404 	addi	r3,r3,-17904
    4e78:	18800017 	ldw	r2,0(r3)
    4e7c:	99000217 	ldw	r4,8(r19)
    4e80:	8c23c83a 	sub	r17,r17,r16
    4e84:	8c400054 	ori	r17,r17,1
    4e88:	1421c83a 	sub	r16,r2,r16
    4e8c:	24400115 	stw	r17,4(r4)
    4e90:	9009883a 	mov	r4,r18
    4e94:	1c000015 	stw	r16,0(r3)
    4e98:	000e4700 	call	e470 <__malloc_unlock>
    4e9c:	00800044 	movi	r2,1
    4ea0:	003fe706 	br	4e40 <__alt_data_end+0xfffd4e40>
    4ea4:	000b883a 	mov	r5,zero
    4ea8:	9009883a 	mov	r4,r18
    4eac:	00072a40 	call	72a4 <_sbrk_r>
    4eb0:	99000217 	ldw	r4,8(r19)
    4eb4:	014003c4 	movi	r5,15
    4eb8:	1107c83a 	sub	r3,r2,r4
    4ebc:	28ffdd0e 	bge	r5,r3,4e34 <__alt_data_end+0xfffd4e34>
    4ec0:	014000b4 	movhi	r5,2
    4ec4:	29675004 	addi	r5,r5,-25280
    4ec8:	29400017 	ldw	r5,0(r5)
    4ecc:	18c00054 	ori	r3,r3,1
    4ed0:	20c00115 	stw	r3,4(r4)
    4ed4:	00c000b4 	movhi	r3,2
    4ed8:	1145c83a 	sub	r2,r2,r5
    4edc:	18ee8404 	addi	r3,r3,-17904
    4ee0:	18800015 	stw	r2,0(r3)
    4ee4:	003fd306 	br	4e34 <__alt_data_end+0xfffd4e34>

00004ee8 <_free_r>:
    4ee8:	28004126 	beq	r5,zero,4ff0 <_free_r+0x108>
    4eec:	defffd04 	addi	sp,sp,-12
    4ef0:	dc400115 	stw	r17,4(sp)
    4ef4:	dc000015 	stw	r16,0(sp)
    4ef8:	2023883a 	mov	r17,r4
    4efc:	2821883a 	mov	r16,r5
    4f00:	dfc00215 	stw	ra,8(sp)
    4f04:	000e3500 	call	e350 <__malloc_lock>
    4f08:	81ffff17 	ldw	r7,-4(r16)
    4f0c:	00bfff84 	movi	r2,-2
    4f10:	010000b4 	movhi	r4,2
    4f14:	81bffe04 	addi	r6,r16,-8
    4f18:	3884703a 	and	r2,r7,r2
    4f1c:	2121c604 	addi	r4,r4,-30952
    4f20:	308b883a 	add	r5,r6,r2
    4f24:	2a400117 	ldw	r9,4(r5)
    4f28:	22000217 	ldw	r8,8(r4)
    4f2c:	00ffff04 	movi	r3,-4
    4f30:	48c6703a 	and	r3,r9,r3
    4f34:	2a005726 	beq	r5,r8,5094 <_free_r+0x1ac>
    4f38:	28c00115 	stw	r3,4(r5)
    4f3c:	39c0004c 	andi	r7,r7,1
    4f40:	3800091e 	bne	r7,zero,4f68 <_free_r+0x80>
    4f44:	823ffe17 	ldw	r8,-8(r16)
    4f48:	22400204 	addi	r9,r4,8
    4f4c:	320dc83a 	sub	r6,r6,r8
    4f50:	31c00217 	ldw	r7,8(r6)
    4f54:	1205883a 	add	r2,r2,r8
    4f58:	3a406526 	beq	r7,r9,50f0 <_free_r+0x208>
    4f5c:	32000317 	ldw	r8,12(r6)
    4f60:	3a000315 	stw	r8,12(r7)
    4f64:	41c00215 	stw	r7,8(r8)
    4f68:	28cf883a 	add	r7,r5,r3
    4f6c:	39c00117 	ldw	r7,4(r7)
    4f70:	39c0004c 	andi	r7,r7,1
    4f74:	38003a26 	beq	r7,zero,5060 <_free_r+0x178>
    4f78:	10c00054 	ori	r3,r2,1
    4f7c:	30c00115 	stw	r3,4(r6)
    4f80:	3087883a 	add	r3,r6,r2
    4f84:	18800015 	stw	r2,0(r3)
    4f88:	00c07fc4 	movi	r3,511
    4f8c:	18801936 	bltu	r3,r2,4ff4 <_free_r+0x10c>
    4f90:	1004d0fa 	srli	r2,r2,3
    4f94:	01c00044 	movi	r7,1
    4f98:	21400117 	ldw	r5,4(r4)
    4f9c:	10c00044 	addi	r3,r2,1
    4fa0:	18c7883a 	add	r3,r3,r3
    4fa4:	1005d0ba 	srai	r2,r2,2
    4fa8:	18c7883a 	add	r3,r3,r3
    4fac:	18c7883a 	add	r3,r3,r3
    4fb0:	1907883a 	add	r3,r3,r4
    4fb4:	3884983a 	sll	r2,r7,r2
    4fb8:	19c00017 	ldw	r7,0(r3)
    4fbc:	1a3ffe04 	addi	r8,r3,-8
    4fc0:	1144b03a 	or	r2,r2,r5
    4fc4:	32000315 	stw	r8,12(r6)
    4fc8:	31c00215 	stw	r7,8(r6)
    4fcc:	20800115 	stw	r2,4(r4)
    4fd0:	19800015 	stw	r6,0(r3)
    4fd4:	39800315 	stw	r6,12(r7)
    4fd8:	8809883a 	mov	r4,r17
    4fdc:	dfc00217 	ldw	ra,8(sp)
    4fe0:	dc400117 	ldw	r17,4(sp)
    4fe4:	dc000017 	ldw	r16,0(sp)
    4fe8:	dec00304 	addi	sp,sp,12
    4fec:	000e4701 	jmpi	e470 <__malloc_unlock>
    4ff0:	f800283a 	ret
    4ff4:	100ad27a 	srli	r5,r2,9
    4ff8:	00c00104 	movi	r3,4
    4ffc:	19404a36 	bltu	r3,r5,5128 <_free_r+0x240>
    5000:	100ad1ba 	srli	r5,r2,6
    5004:	28c00e44 	addi	r3,r5,57
    5008:	18c7883a 	add	r3,r3,r3
    500c:	29400e04 	addi	r5,r5,56
    5010:	18c7883a 	add	r3,r3,r3
    5014:	18c7883a 	add	r3,r3,r3
    5018:	1909883a 	add	r4,r3,r4
    501c:	20c00017 	ldw	r3,0(r4)
    5020:	01c000b4 	movhi	r7,2
    5024:	213ffe04 	addi	r4,r4,-8
    5028:	39e1c604 	addi	r7,r7,-30952
    502c:	20c04426 	beq	r4,r3,5140 <_free_r+0x258>
    5030:	01ffff04 	movi	r7,-4
    5034:	19400117 	ldw	r5,4(r3)
    5038:	29ca703a 	and	r5,r5,r7
    503c:	1140022e 	bgeu	r2,r5,5048 <_free_r+0x160>
    5040:	18c00217 	ldw	r3,8(r3)
    5044:	20fffb1e 	bne	r4,r3,5034 <__alt_data_end+0xfffd5034>
    5048:	19000317 	ldw	r4,12(r3)
    504c:	31000315 	stw	r4,12(r6)
    5050:	30c00215 	stw	r3,8(r6)
    5054:	21800215 	stw	r6,8(r4)
    5058:	19800315 	stw	r6,12(r3)
    505c:	003fde06 	br	4fd8 <__alt_data_end+0xfffd4fd8>
    5060:	29c00217 	ldw	r7,8(r5)
    5064:	10c5883a 	add	r2,r2,r3
    5068:	00c000b4 	movhi	r3,2
    506c:	18e1c804 	addi	r3,r3,-30944
    5070:	38c03b26 	beq	r7,r3,5160 <_free_r+0x278>
    5074:	2a000317 	ldw	r8,12(r5)
    5078:	11400054 	ori	r5,r2,1
    507c:	3087883a 	add	r3,r6,r2
    5080:	3a000315 	stw	r8,12(r7)
    5084:	41c00215 	stw	r7,8(r8)
    5088:	31400115 	stw	r5,4(r6)
    508c:	18800015 	stw	r2,0(r3)
    5090:	003fbd06 	br	4f88 <__alt_data_end+0xfffd4f88>
    5094:	39c0004c 	andi	r7,r7,1
    5098:	10c5883a 	add	r2,r2,r3
    509c:	3800071e 	bne	r7,zero,50bc <_free_r+0x1d4>
    50a0:	81fffe17 	ldw	r7,-8(r16)
    50a4:	31cdc83a 	sub	r6,r6,r7
    50a8:	30c00317 	ldw	r3,12(r6)
    50ac:	31400217 	ldw	r5,8(r6)
    50b0:	11c5883a 	add	r2,r2,r7
    50b4:	28c00315 	stw	r3,12(r5)
    50b8:	19400215 	stw	r5,8(r3)
    50bc:	10c00054 	ori	r3,r2,1
    50c0:	30c00115 	stw	r3,4(r6)
    50c4:	00c000b4 	movhi	r3,2
    50c8:	18e75104 	addi	r3,r3,-25276
    50cc:	18c00017 	ldw	r3,0(r3)
    50d0:	21800215 	stw	r6,8(r4)
    50d4:	10ffc036 	bltu	r2,r3,4fd8 <__alt_data_end+0xfffd4fd8>
    50d8:	008000b4 	movhi	r2,2
    50dc:	10ae6304 	addi	r2,r2,-18036
    50e0:	11400017 	ldw	r5,0(r2)
    50e4:	8809883a 	mov	r4,r17
    50e8:	0004dc40 	call	4dc4 <_malloc_trim_r>
    50ec:	003fba06 	br	4fd8 <__alt_data_end+0xfffd4fd8>
    50f0:	28c9883a 	add	r4,r5,r3
    50f4:	21000117 	ldw	r4,4(r4)
    50f8:	2100004c 	andi	r4,r4,1
    50fc:	2000391e 	bne	r4,zero,51e4 <_free_r+0x2fc>
    5100:	29c00217 	ldw	r7,8(r5)
    5104:	29000317 	ldw	r4,12(r5)
    5108:	1885883a 	add	r2,r3,r2
    510c:	10c00054 	ori	r3,r2,1
    5110:	39000315 	stw	r4,12(r7)
    5114:	21c00215 	stw	r7,8(r4)
    5118:	30c00115 	stw	r3,4(r6)
    511c:	308d883a 	add	r6,r6,r2
    5120:	30800015 	stw	r2,0(r6)
    5124:	003fac06 	br	4fd8 <__alt_data_end+0xfffd4fd8>
    5128:	00c00504 	movi	r3,20
    512c:	19401536 	bltu	r3,r5,5184 <_free_r+0x29c>
    5130:	28c01704 	addi	r3,r5,92
    5134:	18c7883a 	add	r3,r3,r3
    5138:	294016c4 	addi	r5,r5,91
    513c:	003fb406 	br	5010 <__alt_data_end+0xfffd5010>
    5140:	280bd0ba 	srai	r5,r5,2
    5144:	00c00044 	movi	r3,1
    5148:	38800117 	ldw	r2,4(r7)
    514c:	194a983a 	sll	r5,r3,r5
    5150:	2007883a 	mov	r3,r4
    5154:	2884b03a 	or	r2,r5,r2
    5158:	38800115 	stw	r2,4(r7)
    515c:	003fbb06 	br	504c <__alt_data_end+0xfffd504c>
    5160:	21800515 	stw	r6,20(r4)
    5164:	21800415 	stw	r6,16(r4)
    5168:	10c00054 	ori	r3,r2,1
    516c:	31c00315 	stw	r7,12(r6)
    5170:	31c00215 	stw	r7,8(r6)
    5174:	30c00115 	stw	r3,4(r6)
    5178:	308d883a 	add	r6,r6,r2
    517c:	30800015 	stw	r2,0(r6)
    5180:	003f9506 	br	4fd8 <__alt_data_end+0xfffd4fd8>
    5184:	00c01504 	movi	r3,84
    5188:	19400536 	bltu	r3,r5,51a0 <_free_r+0x2b8>
    518c:	100ad33a 	srli	r5,r2,12
    5190:	28c01bc4 	addi	r3,r5,111
    5194:	18c7883a 	add	r3,r3,r3
    5198:	29401b84 	addi	r5,r5,110
    519c:	003f9c06 	br	5010 <__alt_data_end+0xfffd5010>
    51a0:	00c05504 	movi	r3,340
    51a4:	19400536 	bltu	r3,r5,51bc <_free_r+0x2d4>
    51a8:	100ad3fa 	srli	r5,r2,15
    51ac:	28c01e04 	addi	r3,r5,120
    51b0:	18c7883a 	add	r3,r3,r3
    51b4:	29401dc4 	addi	r5,r5,119
    51b8:	003f9506 	br	5010 <__alt_data_end+0xfffd5010>
    51bc:	00c15504 	movi	r3,1364
    51c0:	19400536 	bltu	r3,r5,51d8 <_free_r+0x2f0>
    51c4:	100ad4ba 	srli	r5,r2,18
    51c8:	28c01f44 	addi	r3,r5,125
    51cc:	18c7883a 	add	r3,r3,r3
    51d0:	29401f04 	addi	r5,r5,124
    51d4:	003f8e06 	br	5010 <__alt_data_end+0xfffd5010>
    51d8:	00c03f84 	movi	r3,254
    51dc:	01401f84 	movi	r5,126
    51e0:	003f8b06 	br	5010 <__alt_data_end+0xfffd5010>
    51e4:	10c00054 	ori	r3,r2,1
    51e8:	30c00115 	stw	r3,4(r6)
    51ec:	308d883a 	add	r6,r6,r2
    51f0:	30800015 	stw	r2,0(r6)
    51f4:	003f7806 	br	4fd8 <__alt_data_end+0xfffd4fd8>

000051f8 <_fwalk>:
    51f8:	defff704 	addi	sp,sp,-36
    51fc:	dd000415 	stw	r20,16(sp)
    5200:	dfc00815 	stw	ra,32(sp)
    5204:	ddc00715 	stw	r23,28(sp)
    5208:	dd800615 	stw	r22,24(sp)
    520c:	dd400515 	stw	r21,20(sp)
    5210:	dcc00315 	stw	r19,12(sp)
    5214:	dc800215 	stw	r18,8(sp)
    5218:	dc400115 	stw	r17,4(sp)
    521c:	dc000015 	stw	r16,0(sp)
    5220:	2500b804 	addi	r20,r4,736
    5224:	a0002326 	beq	r20,zero,52b4 <_fwalk+0xbc>
    5228:	282b883a 	mov	r21,r5
    522c:	002f883a 	mov	r23,zero
    5230:	05800044 	movi	r22,1
    5234:	04ffffc4 	movi	r19,-1
    5238:	a4400117 	ldw	r17,4(r20)
    523c:	a4800217 	ldw	r18,8(r20)
    5240:	8c7fffc4 	addi	r17,r17,-1
    5244:	88000d16 	blt	r17,zero,527c <_fwalk+0x84>
    5248:	94000304 	addi	r16,r18,12
    524c:	94800384 	addi	r18,r18,14
    5250:	8080000b 	ldhu	r2,0(r16)
    5254:	8c7fffc4 	addi	r17,r17,-1
    5258:	813ffd04 	addi	r4,r16,-12
    525c:	b080042e 	bgeu	r22,r2,5270 <_fwalk+0x78>
    5260:	9080000f 	ldh	r2,0(r18)
    5264:	14c00226 	beq	r2,r19,5270 <_fwalk+0x78>
    5268:	a83ee83a 	callr	r21
    526c:	b8aeb03a 	or	r23,r23,r2
    5270:	84001a04 	addi	r16,r16,104
    5274:	94801a04 	addi	r18,r18,104
    5278:	8cfff51e 	bne	r17,r19,5250 <__alt_data_end+0xfffd5250>
    527c:	a5000017 	ldw	r20,0(r20)
    5280:	a03fed1e 	bne	r20,zero,5238 <__alt_data_end+0xfffd5238>
    5284:	b805883a 	mov	r2,r23
    5288:	dfc00817 	ldw	ra,32(sp)
    528c:	ddc00717 	ldw	r23,28(sp)
    5290:	dd800617 	ldw	r22,24(sp)
    5294:	dd400517 	ldw	r21,20(sp)
    5298:	dd000417 	ldw	r20,16(sp)
    529c:	dcc00317 	ldw	r19,12(sp)
    52a0:	dc800217 	ldw	r18,8(sp)
    52a4:	dc400117 	ldw	r17,4(sp)
    52a8:	dc000017 	ldw	r16,0(sp)
    52ac:	dec00904 	addi	sp,sp,36
    52b0:	f800283a 	ret
    52b4:	002f883a 	mov	r23,zero
    52b8:	003ff206 	br	5284 <__alt_data_end+0xfffd5284>

000052bc <_fwalk_reent>:
    52bc:	defff704 	addi	sp,sp,-36
    52c0:	dd000415 	stw	r20,16(sp)
    52c4:	dfc00815 	stw	ra,32(sp)
    52c8:	ddc00715 	stw	r23,28(sp)
    52cc:	dd800615 	stw	r22,24(sp)
    52d0:	dd400515 	stw	r21,20(sp)
    52d4:	dcc00315 	stw	r19,12(sp)
    52d8:	dc800215 	stw	r18,8(sp)
    52dc:	dc400115 	stw	r17,4(sp)
    52e0:	dc000015 	stw	r16,0(sp)
    52e4:	2500b804 	addi	r20,r4,736
    52e8:	a0002326 	beq	r20,zero,5378 <_fwalk_reent+0xbc>
    52ec:	282b883a 	mov	r21,r5
    52f0:	2027883a 	mov	r19,r4
    52f4:	002f883a 	mov	r23,zero
    52f8:	05800044 	movi	r22,1
    52fc:	04bfffc4 	movi	r18,-1
    5300:	a4400117 	ldw	r17,4(r20)
    5304:	a4000217 	ldw	r16,8(r20)
    5308:	8c7fffc4 	addi	r17,r17,-1
    530c:	88000c16 	blt	r17,zero,5340 <_fwalk_reent+0x84>
    5310:	84000304 	addi	r16,r16,12
    5314:	8080000b 	ldhu	r2,0(r16)
    5318:	8c7fffc4 	addi	r17,r17,-1
    531c:	817ffd04 	addi	r5,r16,-12
    5320:	b080052e 	bgeu	r22,r2,5338 <_fwalk_reent+0x7c>
    5324:	8080008f 	ldh	r2,2(r16)
    5328:	9809883a 	mov	r4,r19
    532c:	14800226 	beq	r2,r18,5338 <_fwalk_reent+0x7c>
    5330:	a83ee83a 	callr	r21
    5334:	b8aeb03a 	or	r23,r23,r2
    5338:	84001a04 	addi	r16,r16,104
    533c:	8cbff51e 	bne	r17,r18,5314 <__alt_data_end+0xfffd5314>
    5340:	a5000017 	ldw	r20,0(r20)
    5344:	a03fee1e 	bne	r20,zero,5300 <__alt_data_end+0xfffd5300>
    5348:	b805883a 	mov	r2,r23
    534c:	dfc00817 	ldw	ra,32(sp)
    5350:	ddc00717 	ldw	r23,28(sp)
    5354:	dd800617 	ldw	r22,24(sp)
    5358:	dd400517 	ldw	r21,20(sp)
    535c:	dd000417 	ldw	r20,16(sp)
    5360:	dcc00317 	ldw	r19,12(sp)
    5364:	dc800217 	ldw	r18,8(sp)
    5368:	dc400117 	ldw	r17,4(sp)
    536c:	dc000017 	ldw	r16,0(sp)
    5370:	dec00904 	addi	sp,sp,36
    5374:	f800283a 	ret
    5378:	002f883a 	mov	r23,zero
    537c:	003ff206 	br	5348 <__alt_data_end+0xfffd5348>

00005380 <_setlocale_r>:
    5380:	30001b26 	beq	r6,zero,53f0 <_setlocale_r+0x70>
    5384:	01400074 	movhi	r5,1
    5388:	defffe04 	addi	sp,sp,-8
    538c:	295fb904 	addi	r5,r5,32484
    5390:	3009883a 	mov	r4,r6
    5394:	dc000015 	stw	r16,0(sp)
    5398:	dfc00115 	stw	ra,4(sp)
    539c:	3021883a 	mov	r16,r6
    53a0:	00074340 	call	7434 <strcmp>
    53a4:	1000061e 	bne	r2,zero,53c0 <_setlocale_r+0x40>
    53a8:	00800074 	movhi	r2,1
    53ac:	109fb804 	addi	r2,r2,32480
    53b0:	dfc00117 	ldw	ra,4(sp)
    53b4:	dc000017 	ldw	r16,0(sp)
    53b8:	dec00204 	addi	sp,sp,8
    53bc:	f800283a 	ret
    53c0:	01400074 	movhi	r5,1
    53c4:	295fb804 	addi	r5,r5,32480
    53c8:	8009883a 	mov	r4,r16
    53cc:	00074340 	call	7434 <strcmp>
    53d0:	103ff526 	beq	r2,zero,53a8 <__alt_data_end+0xfffd53a8>
    53d4:	01400074 	movhi	r5,1
    53d8:	295fa304 	addi	r5,r5,32396
    53dc:	8009883a 	mov	r4,r16
    53e0:	00074340 	call	7434 <strcmp>
    53e4:	103ff026 	beq	r2,zero,53a8 <__alt_data_end+0xfffd53a8>
    53e8:	0005883a 	mov	r2,zero
    53ec:	003ff006 	br	53b0 <__alt_data_end+0xfffd53b0>
    53f0:	00800074 	movhi	r2,1
    53f4:	109fb804 	addi	r2,r2,32480
    53f8:	f800283a 	ret

000053fc <__locale_charset>:
    53fc:	008000b4 	movhi	r2,2
    5400:	10a1b004 	addi	r2,r2,-31040
    5404:	f800283a 	ret

00005408 <__locale_mb_cur_max>:
    5408:	008000b4 	movhi	r2,2
    540c:	10a74f04 	addi	r2,r2,-25284
    5410:	10800017 	ldw	r2,0(r2)
    5414:	f800283a 	ret

00005418 <__locale_msgcharset>:
    5418:	008000b4 	movhi	r2,2
    541c:	10a1a804 	addi	r2,r2,-31072
    5420:	f800283a 	ret

00005424 <__locale_cjk_lang>:
    5424:	0005883a 	mov	r2,zero
    5428:	f800283a 	ret

0000542c <_localeconv_r>:
    542c:	008000b4 	movhi	r2,2
    5430:	10a1b804 	addi	r2,r2,-31008
    5434:	f800283a 	ret

00005438 <setlocale>:
    5438:	008000b4 	movhi	r2,2
    543c:	10a74e04 	addi	r2,r2,-25288
    5440:	280d883a 	mov	r6,r5
    5444:	200b883a 	mov	r5,r4
    5448:	11000017 	ldw	r4,0(r2)
    544c:	00053801 	jmpi	5380 <_setlocale_r>

00005450 <localeconv>:
    5450:	008000b4 	movhi	r2,2
    5454:	10a1b804 	addi	r2,r2,-31008
    5458:	f800283a 	ret

0000545c <__smakebuf_r>:
    545c:	2880030b 	ldhu	r2,12(r5)
    5460:	10c0008c 	andi	r3,r2,2
    5464:	1800411e 	bne	r3,zero,556c <__smakebuf_r+0x110>
    5468:	deffec04 	addi	sp,sp,-80
    546c:	dc000f15 	stw	r16,60(sp)
    5470:	2821883a 	mov	r16,r5
    5474:	2940038f 	ldh	r5,14(r5)
    5478:	dc401015 	stw	r17,64(sp)
    547c:	dfc01315 	stw	ra,76(sp)
    5480:	dcc01215 	stw	r19,72(sp)
    5484:	dc801115 	stw	r18,68(sp)
    5488:	2023883a 	mov	r17,r4
    548c:	28001c16 	blt	r5,zero,5500 <__smakebuf_r+0xa4>
    5490:	d80d883a 	mov	r6,sp
    5494:	000913c0 	call	913c <_fstat_r>
    5498:	10001816 	blt	r2,zero,54fc <__smakebuf_r+0xa0>
    549c:	d8800117 	ldw	r2,4(sp)
    54a0:	00e00014 	movui	r3,32768
    54a4:	10bc000c 	andi	r2,r2,61440
    54a8:	14c80020 	cmpeqi	r19,r2,8192
    54ac:	10c03726 	beq	r2,r3,558c <__smakebuf_r+0x130>
    54b0:	80c0030b 	ldhu	r3,12(r16)
    54b4:	18c20014 	ori	r3,r3,2048
    54b8:	80c0030d 	sth	r3,12(r16)
    54bc:	00c80004 	movi	r3,8192
    54c0:	10c0521e 	bne	r2,r3,560c <__smakebuf_r+0x1b0>
    54c4:	8140038f 	ldh	r5,14(r16)
    54c8:	8809883a 	mov	r4,r17
    54cc:	00096600 	call	9660 <_isatty_r>
    54d0:	10004c26 	beq	r2,zero,5604 <__smakebuf_r+0x1a8>
    54d4:	8080030b 	ldhu	r2,12(r16)
    54d8:	80c010c4 	addi	r3,r16,67
    54dc:	80c00015 	stw	r3,0(r16)
    54e0:	10800054 	ori	r2,r2,1
    54e4:	8080030d 	sth	r2,12(r16)
    54e8:	00800044 	movi	r2,1
    54ec:	80c00415 	stw	r3,16(r16)
    54f0:	80800515 	stw	r2,20(r16)
    54f4:	04810004 	movi	r18,1024
    54f8:	00000706 	br	5518 <__smakebuf_r+0xbc>
    54fc:	8080030b 	ldhu	r2,12(r16)
    5500:	10c0200c 	andi	r3,r2,128
    5504:	18001f1e 	bne	r3,zero,5584 <__smakebuf_r+0x128>
    5508:	04810004 	movi	r18,1024
    550c:	10820014 	ori	r2,r2,2048
    5510:	8080030d 	sth	r2,12(r16)
    5514:	0027883a 	mov	r19,zero
    5518:	900b883a 	mov	r5,r18
    551c:	8809883a 	mov	r4,r17
    5520:	00056180 	call	5618 <_malloc_r>
    5524:	10002c26 	beq	r2,zero,55d8 <__smakebuf_r+0x17c>
    5528:	80c0030b 	ldhu	r3,12(r16)
    552c:	01000034 	movhi	r4,0
    5530:	21128704 	addi	r4,r4,18972
    5534:	89000f15 	stw	r4,60(r17)
    5538:	18c02014 	ori	r3,r3,128
    553c:	80c0030d 	sth	r3,12(r16)
    5540:	80800015 	stw	r2,0(r16)
    5544:	80800415 	stw	r2,16(r16)
    5548:	84800515 	stw	r18,20(r16)
    554c:	98001a1e 	bne	r19,zero,55b8 <__smakebuf_r+0x15c>
    5550:	dfc01317 	ldw	ra,76(sp)
    5554:	dcc01217 	ldw	r19,72(sp)
    5558:	dc801117 	ldw	r18,68(sp)
    555c:	dc401017 	ldw	r17,64(sp)
    5560:	dc000f17 	ldw	r16,60(sp)
    5564:	dec01404 	addi	sp,sp,80
    5568:	f800283a 	ret
    556c:	288010c4 	addi	r2,r5,67
    5570:	28800015 	stw	r2,0(r5)
    5574:	28800415 	stw	r2,16(r5)
    5578:	00800044 	movi	r2,1
    557c:	28800515 	stw	r2,20(r5)
    5580:	f800283a 	ret
    5584:	04801004 	movi	r18,64
    5588:	003fe006 	br	550c <__alt_data_end+0xfffd550c>
    558c:	81000a17 	ldw	r4,40(r16)
    5590:	00c00034 	movhi	r3,0
    5594:	18dcf404 	addi	r3,r3,29648
    5598:	20ffc51e 	bne	r4,r3,54b0 <__alt_data_end+0xfffd54b0>
    559c:	8080030b 	ldhu	r2,12(r16)
    55a0:	04810004 	movi	r18,1024
    55a4:	84801315 	stw	r18,76(r16)
    55a8:	1484b03a 	or	r2,r2,r18
    55ac:	8080030d 	sth	r2,12(r16)
    55b0:	0027883a 	mov	r19,zero
    55b4:	003fd806 	br	5518 <__alt_data_end+0xfffd5518>
    55b8:	8140038f 	ldh	r5,14(r16)
    55bc:	8809883a 	mov	r4,r17
    55c0:	00096600 	call	9660 <_isatty_r>
    55c4:	103fe226 	beq	r2,zero,5550 <__alt_data_end+0xfffd5550>
    55c8:	8080030b 	ldhu	r2,12(r16)
    55cc:	10800054 	ori	r2,r2,1
    55d0:	8080030d 	sth	r2,12(r16)
    55d4:	003fde06 	br	5550 <__alt_data_end+0xfffd5550>
    55d8:	8080030b 	ldhu	r2,12(r16)
    55dc:	10c0800c 	andi	r3,r2,512
    55e0:	183fdb1e 	bne	r3,zero,5550 <__alt_data_end+0xfffd5550>
    55e4:	10800094 	ori	r2,r2,2
    55e8:	80c010c4 	addi	r3,r16,67
    55ec:	8080030d 	sth	r2,12(r16)
    55f0:	00800044 	movi	r2,1
    55f4:	80c00015 	stw	r3,0(r16)
    55f8:	80c00415 	stw	r3,16(r16)
    55fc:	80800515 	stw	r2,20(r16)
    5600:	003fd306 	br	5550 <__alt_data_end+0xfffd5550>
    5604:	04810004 	movi	r18,1024
    5608:	003fc306 	br	5518 <__alt_data_end+0xfffd5518>
    560c:	0027883a 	mov	r19,zero
    5610:	04810004 	movi	r18,1024
    5614:	003fc006 	br	5518 <__alt_data_end+0xfffd5518>

00005618 <_malloc_r>:
    5618:	defff504 	addi	sp,sp,-44
    561c:	dc800315 	stw	r18,12(sp)
    5620:	dfc00a15 	stw	ra,40(sp)
    5624:	df000915 	stw	fp,36(sp)
    5628:	ddc00815 	stw	r23,32(sp)
    562c:	dd800715 	stw	r22,28(sp)
    5630:	dd400615 	stw	r21,24(sp)
    5634:	dd000515 	stw	r20,20(sp)
    5638:	dcc00415 	stw	r19,16(sp)
    563c:	dc400215 	stw	r17,8(sp)
    5640:	dc000115 	stw	r16,4(sp)
    5644:	288002c4 	addi	r2,r5,11
    5648:	00c00584 	movi	r3,22
    564c:	2025883a 	mov	r18,r4
    5650:	18807f2e 	bgeu	r3,r2,5850 <_malloc_r+0x238>
    5654:	047ffe04 	movi	r17,-8
    5658:	1462703a 	and	r17,r2,r17
    565c:	8800a316 	blt	r17,zero,58ec <_malloc_r+0x2d4>
    5660:	8940a236 	bltu	r17,r5,58ec <_malloc_r+0x2d4>
    5664:	000e3500 	call	e350 <__malloc_lock>
    5668:	00807dc4 	movi	r2,503
    566c:	1441e92e 	bgeu	r2,r17,5e14 <_malloc_r+0x7fc>
    5670:	8804d27a 	srli	r2,r17,9
    5674:	1000a126 	beq	r2,zero,58fc <_malloc_r+0x2e4>
    5678:	00c00104 	movi	r3,4
    567c:	18811e36 	bltu	r3,r2,5af8 <_malloc_r+0x4e0>
    5680:	8804d1ba 	srli	r2,r17,6
    5684:	12000e44 	addi	r8,r2,57
    5688:	11c00e04 	addi	r7,r2,56
    568c:	4209883a 	add	r4,r8,r8
    5690:	04c000b4 	movhi	r19,2
    5694:	2109883a 	add	r4,r4,r4
    5698:	9ce1c604 	addi	r19,r19,-30952
    569c:	2109883a 	add	r4,r4,r4
    56a0:	9909883a 	add	r4,r19,r4
    56a4:	24000117 	ldw	r16,4(r4)
    56a8:	213ffe04 	addi	r4,r4,-8
    56ac:	24009726 	beq	r4,r16,590c <_malloc_r+0x2f4>
    56b0:	80800117 	ldw	r2,4(r16)
    56b4:	01bfff04 	movi	r6,-4
    56b8:	014003c4 	movi	r5,15
    56bc:	1184703a 	and	r2,r2,r6
    56c0:	1447c83a 	sub	r3,r2,r17
    56c4:	28c00716 	blt	r5,r3,56e4 <_malloc_r+0xcc>
    56c8:	1800920e 	bge	r3,zero,5914 <_malloc_r+0x2fc>
    56cc:	84000317 	ldw	r16,12(r16)
    56d0:	24008e26 	beq	r4,r16,590c <_malloc_r+0x2f4>
    56d4:	80800117 	ldw	r2,4(r16)
    56d8:	1184703a 	and	r2,r2,r6
    56dc:	1447c83a 	sub	r3,r2,r17
    56e0:	28fff90e 	bge	r5,r3,56c8 <__alt_data_end+0xfffd56c8>
    56e4:	3809883a 	mov	r4,r7
    56e8:	018000b4 	movhi	r6,2
    56ec:	9c000417 	ldw	r16,16(r19)
    56f0:	31a1c604 	addi	r6,r6,-30952
    56f4:	32000204 	addi	r8,r6,8
    56f8:	82013426 	beq	r16,r8,5bcc <_malloc_r+0x5b4>
    56fc:	80c00117 	ldw	r3,4(r16)
    5700:	00bfff04 	movi	r2,-4
    5704:	188e703a 	and	r7,r3,r2
    5708:	3c45c83a 	sub	r2,r7,r17
    570c:	00c003c4 	movi	r3,15
    5710:	18811f16 	blt	r3,r2,5b90 <_malloc_r+0x578>
    5714:	32000515 	stw	r8,20(r6)
    5718:	32000415 	stw	r8,16(r6)
    571c:	10007f0e 	bge	r2,zero,591c <_malloc_r+0x304>
    5720:	00807fc4 	movi	r2,511
    5724:	11c0fd36 	bltu	r2,r7,5b1c <_malloc_r+0x504>
    5728:	3806d0fa 	srli	r3,r7,3
    572c:	01c00044 	movi	r7,1
    5730:	30800117 	ldw	r2,4(r6)
    5734:	19400044 	addi	r5,r3,1
    5738:	294b883a 	add	r5,r5,r5
    573c:	1807d0ba 	srai	r3,r3,2
    5740:	294b883a 	add	r5,r5,r5
    5744:	294b883a 	add	r5,r5,r5
    5748:	298b883a 	add	r5,r5,r6
    574c:	38c6983a 	sll	r3,r7,r3
    5750:	29c00017 	ldw	r7,0(r5)
    5754:	2a7ffe04 	addi	r9,r5,-8
    5758:	1886b03a 	or	r3,r3,r2
    575c:	82400315 	stw	r9,12(r16)
    5760:	81c00215 	stw	r7,8(r16)
    5764:	30c00115 	stw	r3,4(r6)
    5768:	2c000015 	stw	r16,0(r5)
    576c:	3c000315 	stw	r16,12(r7)
    5770:	2005d0ba 	srai	r2,r4,2
    5774:	01400044 	movi	r5,1
    5778:	288a983a 	sll	r5,r5,r2
    577c:	19406f36 	bltu	r3,r5,593c <_malloc_r+0x324>
    5780:	28c4703a 	and	r2,r5,r3
    5784:	10000a1e 	bne	r2,zero,57b0 <_malloc_r+0x198>
    5788:	00bfff04 	movi	r2,-4
    578c:	294b883a 	add	r5,r5,r5
    5790:	2088703a 	and	r4,r4,r2
    5794:	28c4703a 	and	r2,r5,r3
    5798:	21000104 	addi	r4,r4,4
    579c:	1000041e 	bne	r2,zero,57b0 <_malloc_r+0x198>
    57a0:	294b883a 	add	r5,r5,r5
    57a4:	28c4703a 	and	r2,r5,r3
    57a8:	21000104 	addi	r4,r4,4
    57ac:	103ffc26 	beq	r2,zero,57a0 <__alt_data_end+0xfffd57a0>
    57b0:	02bfff04 	movi	r10,-4
    57b4:	024003c4 	movi	r9,15
    57b8:	21800044 	addi	r6,r4,1
    57bc:	318d883a 	add	r6,r6,r6
    57c0:	318d883a 	add	r6,r6,r6
    57c4:	318d883a 	add	r6,r6,r6
    57c8:	998d883a 	add	r6,r19,r6
    57cc:	333ffe04 	addi	r12,r6,-8
    57d0:	2017883a 	mov	r11,r4
    57d4:	31800104 	addi	r6,r6,4
    57d8:	34000017 	ldw	r16,0(r6)
    57dc:	31fffd04 	addi	r7,r6,-12
    57e0:	81c0041e 	bne	r16,r7,57f4 <_malloc_r+0x1dc>
    57e4:	0000fb06 	br	5bd4 <_malloc_r+0x5bc>
    57e8:	1801030e 	bge	r3,zero,5bf8 <_malloc_r+0x5e0>
    57ec:	84000317 	ldw	r16,12(r16)
    57f0:	81c0f826 	beq	r16,r7,5bd4 <_malloc_r+0x5bc>
    57f4:	80800117 	ldw	r2,4(r16)
    57f8:	1284703a 	and	r2,r2,r10
    57fc:	1447c83a 	sub	r3,r2,r17
    5800:	48fff90e 	bge	r9,r3,57e8 <__alt_data_end+0xfffd57e8>
    5804:	80800317 	ldw	r2,12(r16)
    5808:	81000217 	ldw	r4,8(r16)
    580c:	89400054 	ori	r5,r17,1
    5810:	81400115 	stw	r5,4(r16)
    5814:	20800315 	stw	r2,12(r4)
    5818:	11000215 	stw	r4,8(r2)
    581c:	8463883a 	add	r17,r16,r17
    5820:	9c400515 	stw	r17,20(r19)
    5824:	9c400415 	stw	r17,16(r19)
    5828:	18800054 	ori	r2,r3,1
    582c:	88800115 	stw	r2,4(r17)
    5830:	8a000315 	stw	r8,12(r17)
    5834:	8a000215 	stw	r8,8(r17)
    5838:	88e3883a 	add	r17,r17,r3
    583c:	88c00015 	stw	r3,0(r17)
    5840:	9009883a 	mov	r4,r18
    5844:	000e4700 	call	e470 <__malloc_unlock>
    5848:	80800204 	addi	r2,r16,8
    584c:	00001b06 	br	58bc <_malloc_r+0x2a4>
    5850:	04400404 	movi	r17,16
    5854:	89402536 	bltu	r17,r5,58ec <_malloc_r+0x2d4>
    5858:	000e3500 	call	e350 <__malloc_lock>
    585c:	00800184 	movi	r2,6
    5860:	01000084 	movi	r4,2
    5864:	04c000b4 	movhi	r19,2
    5868:	1085883a 	add	r2,r2,r2
    586c:	9ce1c604 	addi	r19,r19,-30952
    5870:	1085883a 	add	r2,r2,r2
    5874:	9885883a 	add	r2,r19,r2
    5878:	14000117 	ldw	r16,4(r2)
    587c:	10fffe04 	addi	r3,r2,-8
    5880:	80c0d926 	beq	r16,r3,5be8 <_malloc_r+0x5d0>
    5884:	80c00117 	ldw	r3,4(r16)
    5888:	81000317 	ldw	r4,12(r16)
    588c:	00bfff04 	movi	r2,-4
    5890:	1884703a 	and	r2,r3,r2
    5894:	81400217 	ldw	r5,8(r16)
    5898:	8085883a 	add	r2,r16,r2
    589c:	10c00117 	ldw	r3,4(r2)
    58a0:	29000315 	stw	r4,12(r5)
    58a4:	21400215 	stw	r5,8(r4)
    58a8:	18c00054 	ori	r3,r3,1
    58ac:	10c00115 	stw	r3,4(r2)
    58b0:	9009883a 	mov	r4,r18
    58b4:	000e4700 	call	e470 <__malloc_unlock>
    58b8:	80800204 	addi	r2,r16,8
    58bc:	dfc00a17 	ldw	ra,40(sp)
    58c0:	df000917 	ldw	fp,36(sp)
    58c4:	ddc00817 	ldw	r23,32(sp)
    58c8:	dd800717 	ldw	r22,28(sp)
    58cc:	dd400617 	ldw	r21,24(sp)
    58d0:	dd000517 	ldw	r20,20(sp)
    58d4:	dcc00417 	ldw	r19,16(sp)
    58d8:	dc800317 	ldw	r18,12(sp)
    58dc:	dc400217 	ldw	r17,8(sp)
    58e0:	dc000117 	ldw	r16,4(sp)
    58e4:	dec00b04 	addi	sp,sp,44
    58e8:	f800283a 	ret
    58ec:	00800304 	movi	r2,12
    58f0:	90800015 	stw	r2,0(r18)
    58f4:	0005883a 	mov	r2,zero
    58f8:	003ff006 	br	58bc <__alt_data_end+0xfffd58bc>
    58fc:	01002004 	movi	r4,128
    5900:	02001004 	movi	r8,64
    5904:	01c00fc4 	movi	r7,63
    5908:	003f6106 	br	5690 <__alt_data_end+0xfffd5690>
    590c:	4009883a 	mov	r4,r8
    5910:	003f7506 	br	56e8 <__alt_data_end+0xfffd56e8>
    5914:	81000317 	ldw	r4,12(r16)
    5918:	003fde06 	br	5894 <__alt_data_end+0xfffd5894>
    591c:	81c5883a 	add	r2,r16,r7
    5920:	11400117 	ldw	r5,4(r2)
    5924:	9009883a 	mov	r4,r18
    5928:	29400054 	ori	r5,r5,1
    592c:	11400115 	stw	r5,4(r2)
    5930:	000e4700 	call	e470 <__malloc_unlock>
    5934:	80800204 	addi	r2,r16,8
    5938:	003fe006 	br	58bc <__alt_data_end+0xfffd58bc>
    593c:	9c000217 	ldw	r16,8(r19)
    5940:	00bfff04 	movi	r2,-4
    5944:	85800117 	ldw	r22,4(r16)
    5948:	b0ac703a 	and	r22,r22,r2
    594c:	b4400336 	bltu	r22,r17,595c <_malloc_r+0x344>
    5950:	b445c83a 	sub	r2,r22,r17
    5954:	00c003c4 	movi	r3,15
    5958:	18805d16 	blt	r3,r2,5ad0 <_malloc_r+0x4b8>
    595c:	05c000b4 	movhi	r23,2
    5960:	008000b4 	movhi	r2,2
    5964:	10ae6304 	addi	r2,r2,-18036
    5968:	bde75004 	addi	r23,r23,-25280
    596c:	15400017 	ldw	r21,0(r2)
    5970:	b8c00017 	ldw	r3,0(r23)
    5974:	00bfffc4 	movi	r2,-1
    5978:	858d883a 	add	r6,r16,r22
    597c:	8d6b883a 	add	r21,r17,r21
    5980:	1880ea26 	beq	r3,r2,5d2c <_malloc_r+0x714>
    5984:	ad4403c4 	addi	r21,r21,4111
    5988:	00bc0004 	movi	r2,-4096
    598c:	a8aa703a 	and	r21,r21,r2
    5990:	a80b883a 	mov	r5,r21
    5994:	9009883a 	mov	r4,r18
    5998:	d9800015 	stw	r6,0(sp)
    599c:	00072a40 	call	72a4 <_sbrk_r>
    59a0:	1029883a 	mov	r20,r2
    59a4:	00bfffc4 	movi	r2,-1
    59a8:	d9800017 	ldw	r6,0(sp)
    59ac:	a080e826 	beq	r20,r2,5d50 <_malloc_r+0x738>
    59b0:	a180a636 	bltu	r20,r6,5c4c <_malloc_r+0x634>
    59b4:	070000b4 	movhi	fp,2
    59b8:	e72e8404 	addi	fp,fp,-17904
    59bc:	e0800017 	ldw	r2,0(fp)
    59c0:	a887883a 	add	r3,r21,r2
    59c4:	e0c00015 	stw	r3,0(fp)
    59c8:	3500e626 	beq	r6,r20,5d64 <_malloc_r+0x74c>
    59cc:	b9000017 	ldw	r4,0(r23)
    59d0:	00bfffc4 	movi	r2,-1
    59d4:	2080ee26 	beq	r4,r2,5d90 <_malloc_r+0x778>
    59d8:	a185c83a 	sub	r2,r20,r6
    59dc:	10c5883a 	add	r2,r2,r3
    59e0:	e0800015 	stw	r2,0(fp)
    59e4:	a0c001cc 	andi	r3,r20,7
    59e8:	1800bc26 	beq	r3,zero,5cdc <_malloc_r+0x6c4>
    59ec:	a0e9c83a 	sub	r20,r20,r3
    59f0:	00840204 	movi	r2,4104
    59f4:	a5000204 	addi	r20,r20,8
    59f8:	10c7c83a 	sub	r3,r2,r3
    59fc:	a545883a 	add	r2,r20,r21
    5a00:	1083ffcc 	andi	r2,r2,4095
    5a04:	18abc83a 	sub	r21,r3,r2
    5a08:	a80b883a 	mov	r5,r21
    5a0c:	9009883a 	mov	r4,r18
    5a10:	00072a40 	call	72a4 <_sbrk_r>
    5a14:	00ffffc4 	movi	r3,-1
    5a18:	10c0e126 	beq	r2,r3,5da0 <_malloc_r+0x788>
    5a1c:	1505c83a 	sub	r2,r2,r20
    5a20:	1545883a 	add	r2,r2,r21
    5a24:	10800054 	ori	r2,r2,1
    5a28:	e0c00017 	ldw	r3,0(fp)
    5a2c:	9d000215 	stw	r20,8(r19)
    5a30:	a0800115 	stw	r2,4(r20)
    5a34:	a8c7883a 	add	r3,r21,r3
    5a38:	e0c00015 	stw	r3,0(fp)
    5a3c:	84c00e26 	beq	r16,r19,5a78 <_malloc_r+0x460>
    5a40:	018003c4 	movi	r6,15
    5a44:	3580a72e 	bgeu	r6,r22,5ce4 <_malloc_r+0x6cc>
    5a48:	81400117 	ldw	r5,4(r16)
    5a4c:	013ffe04 	movi	r4,-8
    5a50:	b0bffd04 	addi	r2,r22,-12
    5a54:	1104703a 	and	r2,r2,r4
    5a58:	2900004c 	andi	r4,r5,1
    5a5c:	2088b03a 	or	r4,r4,r2
    5a60:	81000115 	stw	r4,4(r16)
    5a64:	01400144 	movi	r5,5
    5a68:	8089883a 	add	r4,r16,r2
    5a6c:	21400115 	stw	r5,4(r4)
    5a70:	21400215 	stw	r5,8(r4)
    5a74:	3080cd36 	bltu	r6,r2,5dac <_malloc_r+0x794>
    5a78:	008000b4 	movhi	r2,2
    5a7c:	10ae6204 	addi	r2,r2,-18040
    5a80:	11000017 	ldw	r4,0(r2)
    5a84:	20c0012e 	bgeu	r4,r3,5a8c <_malloc_r+0x474>
    5a88:	10c00015 	stw	r3,0(r2)
    5a8c:	008000b4 	movhi	r2,2
    5a90:	10ae6104 	addi	r2,r2,-18044
    5a94:	11000017 	ldw	r4,0(r2)
    5a98:	9c000217 	ldw	r16,8(r19)
    5a9c:	20c0012e 	bgeu	r4,r3,5aa4 <_malloc_r+0x48c>
    5aa0:	10c00015 	stw	r3,0(r2)
    5aa4:	80c00117 	ldw	r3,4(r16)
    5aa8:	00bfff04 	movi	r2,-4
    5aac:	1886703a 	and	r3,r3,r2
    5ab0:	1c45c83a 	sub	r2,r3,r17
    5ab4:	1c400236 	bltu	r3,r17,5ac0 <_malloc_r+0x4a8>
    5ab8:	00c003c4 	movi	r3,15
    5abc:	18800416 	blt	r3,r2,5ad0 <_malloc_r+0x4b8>
    5ac0:	9009883a 	mov	r4,r18
    5ac4:	000e4700 	call	e470 <__malloc_unlock>
    5ac8:	0005883a 	mov	r2,zero
    5acc:	003f7b06 	br	58bc <__alt_data_end+0xfffd58bc>
    5ad0:	88c00054 	ori	r3,r17,1
    5ad4:	80c00115 	stw	r3,4(r16)
    5ad8:	8463883a 	add	r17,r16,r17
    5adc:	10800054 	ori	r2,r2,1
    5ae0:	9c400215 	stw	r17,8(r19)
    5ae4:	88800115 	stw	r2,4(r17)
    5ae8:	9009883a 	mov	r4,r18
    5aec:	000e4700 	call	e470 <__malloc_unlock>
    5af0:	80800204 	addi	r2,r16,8
    5af4:	003f7106 	br	58bc <__alt_data_end+0xfffd58bc>
    5af8:	00c00504 	movi	r3,20
    5afc:	18804a2e 	bgeu	r3,r2,5c28 <_malloc_r+0x610>
    5b00:	00c01504 	movi	r3,84
    5b04:	18806e36 	bltu	r3,r2,5cc0 <_malloc_r+0x6a8>
    5b08:	8804d33a 	srli	r2,r17,12
    5b0c:	12001bc4 	addi	r8,r2,111
    5b10:	11c01b84 	addi	r7,r2,110
    5b14:	4209883a 	add	r4,r8,r8
    5b18:	003edd06 	br	5690 <__alt_data_end+0xfffd5690>
    5b1c:	3804d27a 	srli	r2,r7,9
    5b20:	00c00104 	movi	r3,4
    5b24:	1880442e 	bgeu	r3,r2,5c38 <_malloc_r+0x620>
    5b28:	00c00504 	movi	r3,20
    5b2c:	18808136 	bltu	r3,r2,5d34 <_malloc_r+0x71c>
    5b30:	11401704 	addi	r5,r2,92
    5b34:	10c016c4 	addi	r3,r2,91
    5b38:	294b883a 	add	r5,r5,r5
    5b3c:	294b883a 	add	r5,r5,r5
    5b40:	294b883a 	add	r5,r5,r5
    5b44:	994b883a 	add	r5,r19,r5
    5b48:	28800017 	ldw	r2,0(r5)
    5b4c:	018000b4 	movhi	r6,2
    5b50:	297ffe04 	addi	r5,r5,-8
    5b54:	31a1c604 	addi	r6,r6,-30952
    5b58:	28806526 	beq	r5,r2,5cf0 <_malloc_r+0x6d8>
    5b5c:	01bfff04 	movi	r6,-4
    5b60:	10c00117 	ldw	r3,4(r2)
    5b64:	1986703a 	and	r3,r3,r6
    5b68:	38c0022e 	bgeu	r7,r3,5b74 <_malloc_r+0x55c>
    5b6c:	10800217 	ldw	r2,8(r2)
    5b70:	28bffb1e 	bne	r5,r2,5b60 <__alt_data_end+0xfffd5b60>
    5b74:	11400317 	ldw	r5,12(r2)
    5b78:	98c00117 	ldw	r3,4(r19)
    5b7c:	81400315 	stw	r5,12(r16)
    5b80:	80800215 	stw	r2,8(r16)
    5b84:	2c000215 	stw	r16,8(r5)
    5b88:	14000315 	stw	r16,12(r2)
    5b8c:	003ef806 	br	5770 <__alt_data_end+0xfffd5770>
    5b90:	88c00054 	ori	r3,r17,1
    5b94:	80c00115 	stw	r3,4(r16)
    5b98:	8463883a 	add	r17,r16,r17
    5b9c:	34400515 	stw	r17,20(r6)
    5ba0:	34400415 	stw	r17,16(r6)
    5ba4:	10c00054 	ori	r3,r2,1
    5ba8:	8a000315 	stw	r8,12(r17)
    5bac:	8a000215 	stw	r8,8(r17)
    5bb0:	88c00115 	stw	r3,4(r17)
    5bb4:	88a3883a 	add	r17,r17,r2
    5bb8:	88800015 	stw	r2,0(r17)
    5bbc:	9009883a 	mov	r4,r18
    5bc0:	000e4700 	call	e470 <__malloc_unlock>
    5bc4:	80800204 	addi	r2,r16,8
    5bc8:	003f3c06 	br	58bc <__alt_data_end+0xfffd58bc>
    5bcc:	30c00117 	ldw	r3,4(r6)
    5bd0:	003ee706 	br	5770 <__alt_data_end+0xfffd5770>
    5bd4:	5ac00044 	addi	r11,r11,1
    5bd8:	588000cc 	andi	r2,r11,3
    5bdc:	31800204 	addi	r6,r6,8
    5be0:	103efd1e 	bne	r2,zero,57d8 <__alt_data_end+0xfffd57d8>
    5be4:	00002406 	br	5c78 <_malloc_r+0x660>
    5be8:	14000317 	ldw	r16,12(r2)
    5bec:	143f251e 	bne	r2,r16,5884 <__alt_data_end+0xfffd5884>
    5bf0:	21000084 	addi	r4,r4,2
    5bf4:	003ebc06 	br	56e8 <__alt_data_end+0xfffd56e8>
    5bf8:	8085883a 	add	r2,r16,r2
    5bfc:	10c00117 	ldw	r3,4(r2)
    5c00:	81000317 	ldw	r4,12(r16)
    5c04:	81400217 	ldw	r5,8(r16)
    5c08:	18c00054 	ori	r3,r3,1
    5c0c:	10c00115 	stw	r3,4(r2)
    5c10:	29000315 	stw	r4,12(r5)
    5c14:	21400215 	stw	r5,8(r4)
    5c18:	9009883a 	mov	r4,r18
    5c1c:	000e4700 	call	e470 <__malloc_unlock>
    5c20:	80800204 	addi	r2,r16,8
    5c24:	003f2506 	br	58bc <__alt_data_end+0xfffd58bc>
    5c28:	12001704 	addi	r8,r2,92
    5c2c:	11c016c4 	addi	r7,r2,91
    5c30:	4209883a 	add	r4,r8,r8
    5c34:	003e9606 	br	5690 <__alt_data_end+0xfffd5690>
    5c38:	3804d1ba 	srli	r2,r7,6
    5c3c:	11400e44 	addi	r5,r2,57
    5c40:	10c00e04 	addi	r3,r2,56
    5c44:	294b883a 	add	r5,r5,r5
    5c48:	003fbc06 	br	5b3c <__alt_data_end+0xfffd5b3c>
    5c4c:	84ff5926 	beq	r16,r19,59b4 <__alt_data_end+0xfffd59b4>
    5c50:	008000b4 	movhi	r2,2
    5c54:	10a1c604 	addi	r2,r2,-30952
    5c58:	14000217 	ldw	r16,8(r2)
    5c5c:	00bfff04 	movi	r2,-4
    5c60:	80c00117 	ldw	r3,4(r16)
    5c64:	1886703a 	and	r3,r3,r2
    5c68:	003f9106 	br	5ab0 <__alt_data_end+0xfffd5ab0>
    5c6c:	60800217 	ldw	r2,8(r12)
    5c70:	213fffc4 	addi	r4,r4,-1
    5c74:	1300651e 	bne	r2,r12,5e0c <_malloc_r+0x7f4>
    5c78:	208000cc 	andi	r2,r4,3
    5c7c:	633ffe04 	addi	r12,r12,-8
    5c80:	103ffa1e 	bne	r2,zero,5c6c <__alt_data_end+0xfffd5c6c>
    5c84:	98800117 	ldw	r2,4(r19)
    5c88:	0146303a 	nor	r3,zero,r5
    5c8c:	1884703a 	and	r2,r3,r2
    5c90:	98800115 	stw	r2,4(r19)
    5c94:	294b883a 	add	r5,r5,r5
    5c98:	117f2836 	bltu	r2,r5,593c <__alt_data_end+0xfffd593c>
    5c9c:	283f2726 	beq	r5,zero,593c <__alt_data_end+0xfffd593c>
    5ca0:	2886703a 	and	r3,r5,r2
    5ca4:	5809883a 	mov	r4,r11
    5ca8:	183ec31e 	bne	r3,zero,57b8 <__alt_data_end+0xfffd57b8>
    5cac:	294b883a 	add	r5,r5,r5
    5cb0:	2886703a 	and	r3,r5,r2
    5cb4:	21000104 	addi	r4,r4,4
    5cb8:	183ffc26 	beq	r3,zero,5cac <__alt_data_end+0xfffd5cac>
    5cbc:	003ebe06 	br	57b8 <__alt_data_end+0xfffd57b8>
    5cc0:	00c05504 	movi	r3,340
    5cc4:	18801236 	bltu	r3,r2,5d10 <_malloc_r+0x6f8>
    5cc8:	8804d3fa 	srli	r2,r17,15
    5ccc:	12001e04 	addi	r8,r2,120
    5cd0:	11c01dc4 	addi	r7,r2,119
    5cd4:	4209883a 	add	r4,r8,r8
    5cd8:	003e6d06 	br	5690 <__alt_data_end+0xfffd5690>
    5cdc:	00c40004 	movi	r3,4096
    5ce0:	003f4606 	br	59fc <__alt_data_end+0xfffd59fc>
    5ce4:	00800044 	movi	r2,1
    5ce8:	a0800115 	stw	r2,4(r20)
    5cec:	003f7406 	br	5ac0 <__alt_data_end+0xfffd5ac0>
    5cf0:	1805d0ba 	srai	r2,r3,2
    5cf4:	01c00044 	movi	r7,1
    5cf8:	30c00117 	ldw	r3,4(r6)
    5cfc:	388e983a 	sll	r7,r7,r2
    5d00:	2805883a 	mov	r2,r5
    5d04:	38c6b03a 	or	r3,r7,r3
    5d08:	30c00115 	stw	r3,4(r6)
    5d0c:	003f9b06 	br	5b7c <__alt_data_end+0xfffd5b7c>
    5d10:	00c15504 	movi	r3,1364
    5d14:	18801a36 	bltu	r3,r2,5d80 <_malloc_r+0x768>
    5d18:	8804d4ba 	srli	r2,r17,18
    5d1c:	12001f44 	addi	r8,r2,125
    5d20:	11c01f04 	addi	r7,r2,124
    5d24:	4209883a 	add	r4,r8,r8
    5d28:	003e5906 	br	5690 <__alt_data_end+0xfffd5690>
    5d2c:	ad400404 	addi	r21,r21,16
    5d30:	003f1706 	br	5990 <__alt_data_end+0xfffd5990>
    5d34:	00c01504 	movi	r3,84
    5d38:	18802336 	bltu	r3,r2,5dc8 <_malloc_r+0x7b0>
    5d3c:	3804d33a 	srli	r2,r7,12
    5d40:	11401bc4 	addi	r5,r2,111
    5d44:	10c01b84 	addi	r3,r2,110
    5d48:	294b883a 	add	r5,r5,r5
    5d4c:	003f7b06 	br	5b3c <__alt_data_end+0xfffd5b3c>
    5d50:	9c000217 	ldw	r16,8(r19)
    5d54:	00bfff04 	movi	r2,-4
    5d58:	80c00117 	ldw	r3,4(r16)
    5d5c:	1886703a 	and	r3,r3,r2
    5d60:	003f5306 	br	5ab0 <__alt_data_end+0xfffd5ab0>
    5d64:	3083ffcc 	andi	r2,r6,4095
    5d68:	103f181e 	bne	r2,zero,59cc <__alt_data_end+0xfffd59cc>
    5d6c:	99000217 	ldw	r4,8(r19)
    5d70:	b545883a 	add	r2,r22,r21
    5d74:	10800054 	ori	r2,r2,1
    5d78:	20800115 	stw	r2,4(r4)
    5d7c:	003f3e06 	br	5a78 <__alt_data_end+0xfffd5a78>
    5d80:	01003f84 	movi	r4,254
    5d84:	02001fc4 	movi	r8,127
    5d88:	01c01f84 	movi	r7,126
    5d8c:	003e4006 	br	5690 <__alt_data_end+0xfffd5690>
    5d90:	008000b4 	movhi	r2,2
    5d94:	10a75004 	addi	r2,r2,-25280
    5d98:	15000015 	stw	r20,0(r2)
    5d9c:	003f1106 	br	59e4 <__alt_data_end+0xfffd59e4>
    5da0:	00800044 	movi	r2,1
    5da4:	002b883a 	mov	r21,zero
    5da8:	003f1f06 	br	5a28 <__alt_data_end+0xfffd5a28>
    5dac:	81400204 	addi	r5,r16,8
    5db0:	9009883a 	mov	r4,r18
    5db4:	0004ee80 	call	4ee8 <_free_r>
    5db8:	008000b4 	movhi	r2,2
    5dbc:	10ae8404 	addi	r2,r2,-17904
    5dc0:	10c00017 	ldw	r3,0(r2)
    5dc4:	003f2c06 	br	5a78 <__alt_data_end+0xfffd5a78>
    5dc8:	00c05504 	movi	r3,340
    5dcc:	18800536 	bltu	r3,r2,5de4 <_malloc_r+0x7cc>
    5dd0:	3804d3fa 	srli	r2,r7,15
    5dd4:	11401e04 	addi	r5,r2,120
    5dd8:	10c01dc4 	addi	r3,r2,119
    5ddc:	294b883a 	add	r5,r5,r5
    5de0:	003f5606 	br	5b3c <__alt_data_end+0xfffd5b3c>
    5de4:	00c15504 	movi	r3,1364
    5de8:	18800536 	bltu	r3,r2,5e00 <_malloc_r+0x7e8>
    5dec:	3804d4ba 	srli	r2,r7,18
    5df0:	11401f44 	addi	r5,r2,125
    5df4:	10c01f04 	addi	r3,r2,124
    5df8:	294b883a 	add	r5,r5,r5
    5dfc:	003f4f06 	br	5b3c <__alt_data_end+0xfffd5b3c>
    5e00:	01403f84 	movi	r5,254
    5e04:	00c01f84 	movi	r3,126
    5e08:	003f4c06 	br	5b3c <__alt_data_end+0xfffd5b3c>
    5e0c:	98800117 	ldw	r2,4(r19)
    5e10:	003fa006 	br	5c94 <__alt_data_end+0xfffd5c94>
    5e14:	8808d0fa 	srli	r4,r17,3
    5e18:	20800044 	addi	r2,r4,1
    5e1c:	1085883a 	add	r2,r2,r2
    5e20:	003e9006 	br	5864 <__alt_data_end+0xfffd5864>

00005e24 <memchr>:
    5e24:	208000cc 	andi	r2,r4,3
    5e28:	280f883a 	mov	r7,r5
    5e2c:	10003426 	beq	r2,zero,5f00 <memchr+0xdc>
    5e30:	30bfffc4 	addi	r2,r6,-1
    5e34:	30001a26 	beq	r6,zero,5ea0 <memchr+0x7c>
    5e38:	20c00003 	ldbu	r3,0(r4)
    5e3c:	29803fcc 	andi	r6,r5,255
    5e40:	30c0051e 	bne	r6,r3,5e58 <memchr+0x34>
    5e44:	00001806 	br	5ea8 <memchr+0x84>
    5e48:	10001526 	beq	r2,zero,5ea0 <memchr+0x7c>
    5e4c:	20c00003 	ldbu	r3,0(r4)
    5e50:	10bfffc4 	addi	r2,r2,-1
    5e54:	30c01426 	beq	r6,r3,5ea8 <memchr+0x84>
    5e58:	21000044 	addi	r4,r4,1
    5e5c:	20c000cc 	andi	r3,r4,3
    5e60:	183ff91e 	bne	r3,zero,5e48 <__alt_data_end+0xfffd5e48>
    5e64:	020000c4 	movi	r8,3
    5e68:	40801136 	bltu	r8,r2,5eb0 <memchr+0x8c>
    5e6c:	10000c26 	beq	r2,zero,5ea0 <memchr+0x7c>
    5e70:	20c00003 	ldbu	r3,0(r4)
    5e74:	29403fcc 	andi	r5,r5,255
    5e78:	28c00b26 	beq	r5,r3,5ea8 <memchr+0x84>
    5e7c:	20c00044 	addi	r3,r4,1
    5e80:	39803fcc 	andi	r6,r7,255
    5e84:	2089883a 	add	r4,r4,r2
    5e88:	00000306 	br	5e98 <memchr+0x74>
    5e8c:	18c00044 	addi	r3,r3,1
    5e90:	197fffc3 	ldbu	r5,-1(r3)
    5e94:	31400526 	beq	r6,r5,5eac <memchr+0x88>
    5e98:	1805883a 	mov	r2,r3
    5e9c:	20fffb1e 	bne	r4,r3,5e8c <__alt_data_end+0xfffd5e8c>
    5ea0:	0005883a 	mov	r2,zero
    5ea4:	f800283a 	ret
    5ea8:	2005883a 	mov	r2,r4
    5eac:	f800283a 	ret
    5eb0:	28c03fcc 	andi	r3,r5,255
    5eb4:	1812923a 	slli	r9,r3,8
    5eb8:	02ffbff4 	movhi	r11,65279
    5ebc:	02a02074 	movhi	r10,32897
    5ec0:	48d2b03a 	or	r9,r9,r3
    5ec4:	4806943a 	slli	r3,r9,16
    5ec8:	5affbfc4 	addi	r11,r11,-257
    5ecc:	52a02004 	addi	r10,r10,-32640
    5ed0:	48d2b03a 	or	r9,r9,r3
    5ed4:	20c00017 	ldw	r3,0(r4)
    5ed8:	48c6f03a 	xor	r3,r9,r3
    5edc:	1acd883a 	add	r6,r3,r11
    5ee0:	00c6303a 	nor	r3,zero,r3
    5ee4:	30c6703a 	and	r3,r6,r3
    5ee8:	1a86703a 	and	r3,r3,r10
    5eec:	183fe01e 	bne	r3,zero,5e70 <__alt_data_end+0xfffd5e70>
    5ef0:	10bfff04 	addi	r2,r2,-4
    5ef4:	21000104 	addi	r4,r4,4
    5ef8:	40bff636 	bltu	r8,r2,5ed4 <__alt_data_end+0xfffd5ed4>
    5efc:	003fdb06 	br	5e6c <__alt_data_end+0xfffd5e6c>
    5f00:	3005883a 	mov	r2,r6
    5f04:	003fd706 	br	5e64 <__alt_data_end+0xfffd5e64>

00005f08 <memcpy>:
    5f08:	defffd04 	addi	sp,sp,-12
    5f0c:	dfc00215 	stw	ra,8(sp)
    5f10:	dc400115 	stw	r17,4(sp)
    5f14:	dc000015 	stw	r16,0(sp)
    5f18:	00c003c4 	movi	r3,15
    5f1c:	2005883a 	mov	r2,r4
    5f20:	1980452e 	bgeu	r3,r6,6038 <memcpy+0x130>
    5f24:	2906b03a 	or	r3,r5,r4
    5f28:	18c000cc 	andi	r3,r3,3
    5f2c:	1800441e 	bne	r3,zero,6040 <memcpy+0x138>
    5f30:	347ffc04 	addi	r17,r6,-16
    5f34:	8822d13a 	srli	r17,r17,4
    5f38:	28c00104 	addi	r3,r5,4
    5f3c:	23400104 	addi	r13,r4,4
    5f40:	8820913a 	slli	r16,r17,4
    5f44:	2b000204 	addi	r12,r5,8
    5f48:	22c00204 	addi	r11,r4,8
    5f4c:	84000504 	addi	r16,r16,20
    5f50:	2a800304 	addi	r10,r5,12
    5f54:	22400304 	addi	r9,r4,12
    5f58:	2c21883a 	add	r16,r5,r16
    5f5c:	2811883a 	mov	r8,r5
    5f60:	200f883a 	mov	r7,r4
    5f64:	41000017 	ldw	r4,0(r8)
    5f68:	1fc00017 	ldw	ra,0(r3)
    5f6c:	63c00017 	ldw	r15,0(r12)
    5f70:	39000015 	stw	r4,0(r7)
    5f74:	53800017 	ldw	r14,0(r10)
    5f78:	6fc00015 	stw	ra,0(r13)
    5f7c:	5bc00015 	stw	r15,0(r11)
    5f80:	4b800015 	stw	r14,0(r9)
    5f84:	18c00404 	addi	r3,r3,16
    5f88:	39c00404 	addi	r7,r7,16
    5f8c:	42000404 	addi	r8,r8,16
    5f90:	6b400404 	addi	r13,r13,16
    5f94:	63000404 	addi	r12,r12,16
    5f98:	5ac00404 	addi	r11,r11,16
    5f9c:	52800404 	addi	r10,r10,16
    5fa0:	4a400404 	addi	r9,r9,16
    5fa4:	1c3fef1e 	bne	r3,r16,5f64 <__alt_data_end+0xfffd5f64>
    5fa8:	89c00044 	addi	r7,r17,1
    5fac:	380e913a 	slli	r7,r7,4
    5fb0:	310003cc 	andi	r4,r6,15
    5fb4:	02c000c4 	movi	r11,3
    5fb8:	11c7883a 	add	r3,r2,r7
    5fbc:	29cb883a 	add	r5,r5,r7
    5fc0:	5900212e 	bgeu	r11,r4,6048 <memcpy+0x140>
    5fc4:	1813883a 	mov	r9,r3
    5fc8:	2811883a 	mov	r8,r5
    5fcc:	200f883a 	mov	r7,r4
    5fd0:	42800017 	ldw	r10,0(r8)
    5fd4:	4a400104 	addi	r9,r9,4
    5fd8:	39ffff04 	addi	r7,r7,-4
    5fdc:	4abfff15 	stw	r10,-4(r9)
    5fe0:	42000104 	addi	r8,r8,4
    5fe4:	59fffa36 	bltu	r11,r7,5fd0 <__alt_data_end+0xfffd5fd0>
    5fe8:	213fff04 	addi	r4,r4,-4
    5fec:	2008d0ba 	srli	r4,r4,2
    5ff0:	318000cc 	andi	r6,r6,3
    5ff4:	21000044 	addi	r4,r4,1
    5ff8:	2109883a 	add	r4,r4,r4
    5ffc:	2109883a 	add	r4,r4,r4
    6000:	1907883a 	add	r3,r3,r4
    6004:	290b883a 	add	r5,r5,r4
    6008:	30000626 	beq	r6,zero,6024 <memcpy+0x11c>
    600c:	198d883a 	add	r6,r3,r6
    6010:	29c00003 	ldbu	r7,0(r5)
    6014:	18c00044 	addi	r3,r3,1
    6018:	29400044 	addi	r5,r5,1
    601c:	19ffffc5 	stb	r7,-1(r3)
    6020:	19bffb1e 	bne	r3,r6,6010 <__alt_data_end+0xfffd6010>
    6024:	dfc00217 	ldw	ra,8(sp)
    6028:	dc400117 	ldw	r17,4(sp)
    602c:	dc000017 	ldw	r16,0(sp)
    6030:	dec00304 	addi	sp,sp,12
    6034:	f800283a 	ret
    6038:	2007883a 	mov	r3,r4
    603c:	003ff206 	br	6008 <__alt_data_end+0xfffd6008>
    6040:	2007883a 	mov	r3,r4
    6044:	003ff106 	br	600c <__alt_data_end+0xfffd600c>
    6048:	200d883a 	mov	r6,r4
    604c:	003fee06 	br	6008 <__alt_data_end+0xfffd6008>

00006050 <memset>:
    6050:	20c000cc 	andi	r3,r4,3
    6054:	2005883a 	mov	r2,r4
    6058:	18004426 	beq	r3,zero,616c <memset+0x11c>
    605c:	31ffffc4 	addi	r7,r6,-1
    6060:	30004026 	beq	r6,zero,6164 <memset+0x114>
    6064:	2813883a 	mov	r9,r5
    6068:	200d883a 	mov	r6,r4
    606c:	2007883a 	mov	r3,r4
    6070:	00000406 	br	6084 <memset+0x34>
    6074:	3a3fffc4 	addi	r8,r7,-1
    6078:	31800044 	addi	r6,r6,1
    607c:	38003926 	beq	r7,zero,6164 <memset+0x114>
    6080:	400f883a 	mov	r7,r8
    6084:	18c00044 	addi	r3,r3,1
    6088:	32400005 	stb	r9,0(r6)
    608c:	1a0000cc 	andi	r8,r3,3
    6090:	403ff81e 	bne	r8,zero,6074 <__alt_data_end+0xfffd6074>
    6094:	010000c4 	movi	r4,3
    6098:	21c02d2e 	bgeu	r4,r7,6150 <memset+0x100>
    609c:	29003fcc 	andi	r4,r5,255
    60a0:	200c923a 	slli	r6,r4,8
    60a4:	3108b03a 	or	r4,r6,r4
    60a8:	200c943a 	slli	r6,r4,16
    60ac:	218cb03a 	or	r6,r4,r6
    60b0:	010003c4 	movi	r4,15
    60b4:	21c0182e 	bgeu	r4,r7,6118 <memset+0xc8>
    60b8:	3b3ffc04 	addi	r12,r7,-16
    60bc:	6018d13a 	srli	r12,r12,4
    60c0:	1a000104 	addi	r8,r3,4
    60c4:	1ac00204 	addi	r11,r3,8
    60c8:	6008913a 	slli	r4,r12,4
    60cc:	1a800304 	addi	r10,r3,12
    60d0:	1813883a 	mov	r9,r3
    60d4:	21000504 	addi	r4,r4,20
    60d8:	1909883a 	add	r4,r3,r4
    60dc:	49800015 	stw	r6,0(r9)
    60e0:	41800015 	stw	r6,0(r8)
    60e4:	59800015 	stw	r6,0(r11)
    60e8:	51800015 	stw	r6,0(r10)
    60ec:	42000404 	addi	r8,r8,16
    60f0:	4a400404 	addi	r9,r9,16
    60f4:	5ac00404 	addi	r11,r11,16
    60f8:	52800404 	addi	r10,r10,16
    60fc:	413ff71e 	bne	r8,r4,60dc <__alt_data_end+0xfffd60dc>
    6100:	63000044 	addi	r12,r12,1
    6104:	6018913a 	slli	r12,r12,4
    6108:	39c003cc 	andi	r7,r7,15
    610c:	010000c4 	movi	r4,3
    6110:	1b07883a 	add	r3,r3,r12
    6114:	21c00e2e 	bgeu	r4,r7,6150 <memset+0x100>
    6118:	1813883a 	mov	r9,r3
    611c:	3811883a 	mov	r8,r7
    6120:	010000c4 	movi	r4,3
    6124:	49800015 	stw	r6,0(r9)
    6128:	423fff04 	addi	r8,r8,-4
    612c:	4a400104 	addi	r9,r9,4
    6130:	223ffc36 	bltu	r4,r8,6124 <__alt_data_end+0xfffd6124>
    6134:	393fff04 	addi	r4,r7,-4
    6138:	2008d0ba 	srli	r4,r4,2
    613c:	39c000cc 	andi	r7,r7,3
    6140:	21000044 	addi	r4,r4,1
    6144:	2109883a 	add	r4,r4,r4
    6148:	2109883a 	add	r4,r4,r4
    614c:	1907883a 	add	r3,r3,r4
    6150:	38000526 	beq	r7,zero,6168 <memset+0x118>
    6154:	19cf883a 	add	r7,r3,r7
    6158:	19400005 	stb	r5,0(r3)
    615c:	18c00044 	addi	r3,r3,1
    6160:	38fffd1e 	bne	r7,r3,6158 <__alt_data_end+0xfffd6158>
    6164:	f800283a 	ret
    6168:	f800283a 	ret
    616c:	2007883a 	mov	r3,r4
    6170:	300f883a 	mov	r7,r6
    6174:	003fc706 	br	6094 <__alt_data_end+0xfffd6094>

00006178 <_Balloc>:
    6178:	20801317 	ldw	r2,76(r4)
    617c:	defffc04 	addi	sp,sp,-16
    6180:	dc400115 	stw	r17,4(sp)
    6184:	dc000015 	stw	r16,0(sp)
    6188:	dfc00315 	stw	ra,12(sp)
    618c:	dc800215 	stw	r18,8(sp)
    6190:	2023883a 	mov	r17,r4
    6194:	2821883a 	mov	r16,r5
    6198:	10000f26 	beq	r2,zero,61d8 <_Balloc+0x60>
    619c:	8407883a 	add	r3,r16,r16
    61a0:	18c7883a 	add	r3,r3,r3
    61a4:	10c7883a 	add	r3,r2,r3
    61a8:	18800017 	ldw	r2,0(r3)
    61ac:	10001126 	beq	r2,zero,61f4 <_Balloc+0x7c>
    61b0:	11000017 	ldw	r4,0(r2)
    61b4:	19000015 	stw	r4,0(r3)
    61b8:	10000415 	stw	zero,16(r2)
    61bc:	10000315 	stw	zero,12(r2)
    61c0:	dfc00317 	ldw	ra,12(sp)
    61c4:	dc800217 	ldw	r18,8(sp)
    61c8:	dc400117 	ldw	r17,4(sp)
    61cc:	dc000017 	ldw	r16,0(sp)
    61d0:	dec00404 	addi	sp,sp,16
    61d4:	f800283a 	ret
    61d8:	01800844 	movi	r6,33
    61dc:	01400104 	movi	r5,4
    61e0:	0008d540 	call	8d54 <_calloc_r>
    61e4:	88801315 	stw	r2,76(r17)
    61e8:	103fec1e 	bne	r2,zero,619c <__alt_data_end+0xfffd619c>
    61ec:	0005883a 	mov	r2,zero
    61f0:	003ff306 	br	61c0 <__alt_data_end+0xfffd61c0>
    61f4:	01400044 	movi	r5,1
    61f8:	2c24983a 	sll	r18,r5,r16
    61fc:	8809883a 	mov	r4,r17
    6200:	91800144 	addi	r6,r18,5
    6204:	318d883a 	add	r6,r6,r6
    6208:	318d883a 	add	r6,r6,r6
    620c:	0008d540 	call	8d54 <_calloc_r>
    6210:	103ff626 	beq	r2,zero,61ec <__alt_data_end+0xfffd61ec>
    6214:	14000115 	stw	r16,4(r2)
    6218:	14800215 	stw	r18,8(r2)
    621c:	003fe606 	br	61b8 <__alt_data_end+0xfffd61b8>

00006220 <_Bfree>:
    6220:	28000826 	beq	r5,zero,6244 <_Bfree+0x24>
    6224:	28c00117 	ldw	r3,4(r5)
    6228:	20801317 	ldw	r2,76(r4)
    622c:	18c7883a 	add	r3,r3,r3
    6230:	18c7883a 	add	r3,r3,r3
    6234:	10c5883a 	add	r2,r2,r3
    6238:	10c00017 	ldw	r3,0(r2)
    623c:	28c00015 	stw	r3,0(r5)
    6240:	11400015 	stw	r5,0(r2)
    6244:	f800283a 	ret

00006248 <__multadd>:
    6248:	defff704 	addi	sp,sp,-36
    624c:	dc800215 	stw	r18,8(sp)
    6250:	2c800417 	ldw	r18,16(r5)
    6254:	dd800615 	stw	r22,24(sp)
    6258:	dd400515 	stw	r21,20(sp)
    625c:	dd000415 	stw	r20,16(sp)
    6260:	dcc00315 	stw	r19,12(sp)
    6264:	dc400115 	stw	r17,4(sp)
    6268:	dc000015 	stw	r16,0(sp)
    626c:	dfc00815 	stw	ra,32(sp)
    6270:	ddc00715 	stw	r23,28(sp)
    6274:	2827883a 	mov	r19,r5
    6278:	2029883a 	mov	r20,r4
    627c:	3023883a 	mov	r17,r6
    6280:	3821883a 	mov	r16,r7
    6284:	2d400504 	addi	r21,r5,20
    6288:	002d883a 	mov	r22,zero
    628c:	adc00017 	ldw	r23,0(r21)
    6290:	880b883a 	mov	r5,r17
    6294:	ad400104 	addi	r21,r21,4
    6298:	b93fffcc 	andi	r4,r23,65535
    629c:	000ad340 	call	ad34 <__mulsi3>
    62a0:	b808d43a 	srli	r4,r23,16
    62a4:	880b883a 	mov	r5,r17
    62a8:	1421883a 	add	r16,r2,r16
    62ac:	000ad340 	call	ad34 <__mulsi3>
    62b0:	800ed43a 	srli	r7,r16,16
    62b4:	80ffffcc 	andi	r3,r16,65535
    62b8:	b5800044 	addi	r22,r22,1
    62bc:	11c5883a 	add	r2,r2,r7
    62c0:	100e943a 	slli	r7,r2,16
    62c4:	1020d43a 	srli	r16,r2,16
    62c8:	38c7883a 	add	r3,r7,r3
    62cc:	a8ffff15 	stw	r3,-4(r21)
    62d0:	b4bfee16 	blt	r22,r18,628c <__alt_data_end+0xfffd628c>
    62d4:	80000926 	beq	r16,zero,62fc <__multadd+0xb4>
    62d8:	98800217 	ldw	r2,8(r19)
    62dc:	9080130e 	bge	r18,r2,632c <__multadd+0xe4>
    62e0:	90800144 	addi	r2,r18,5
    62e4:	1085883a 	add	r2,r2,r2
    62e8:	1085883a 	add	r2,r2,r2
    62ec:	9885883a 	add	r2,r19,r2
    62f0:	14000015 	stw	r16,0(r2)
    62f4:	94800044 	addi	r18,r18,1
    62f8:	9c800415 	stw	r18,16(r19)
    62fc:	9805883a 	mov	r2,r19
    6300:	dfc00817 	ldw	ra,32(sp)
    6304:	ddc00717 	ldw	r23,28(sp)
    6308:	dd800617 	ldw	r22,24(sp)
    630c:	dd400517 	ldw	r21,20(sp)
    6310:	dd000417 	ldw	r20,16(sp)
    6314:	dcc00317 	ldw	r19,12(sp)
    6318:	dc800217 	ldw	r18,8(sp)
    631c:	dc400117 	ldw	r17,4(sp)
    6320:	dc000017 	ldw	r16,0(sp)
    6324:	dec00904 	addi	sp,sp,36
    6328:	f800283a 	ret
    632c:	99400117 	ldw	r5,4(r19)
    6330:	a009883a 	mov	r4,r20
    6334:	29400044 	addi	r5,r5,1
    6338:	00061780 	call	6178 <_Balloc>
    633c:	99800417 	ldw	r6,16(r19)
    6340:	99400304 	addi	r5,r19,12
    6344:	11000304 	addi	r4,r2,12
    6348:	31800084 	addi	r6,r6,2
    634c:	318d883a 	add	r6,r6,r6
    6350:	318d883a 	add	r6,r6,r6
    6354:	1023883a 	mov	r17,r2
    6358:	0005f080 	call	5f08 <memcpy>
    635c:	98000a26 	beq	r19,zero,6388 <__multadd+0x140>
    6360:	98c00117 	ldw	r3,4(r19)
    6364:	a0801317 	ldw	r2,76(r20)
    6368:	18c7883a 	add	r3,r3,r3
    636c:	18c7883a 	add	r3,r3,r3
    6370:	10c5883a 	add	r2,r2,r3
    6374:	10c00017 	ldw	r3,0(r2)
    6378:	98c00015 	stw	r3,0(r19)
    637c:	14c00015 	stw	r19,0(r2)
    6380:	8827883a 	mov	r19,r17
    6384:	003fd606 	br	62e0 <__alt_data_end+0xfffd62e0>
    6388:	8827883a 	mov	r19,r17
    638c:	003fd406 	br	62e0 <__alt_data_end+0xfffd62e0>

00006390 <__s2b>:
    6390:	defff904 	addi	sp,sp,-28
    6394:	dc400115 	stw	r17,4(sp)
    6398:	dc000015 	stw	r16,0(sp)
    639c:	2023883a 	mov	r17,r4
    63a0:	2821883a 	mov	r16,r5
    63a4:	39000204 	addi	r4,r7,8
    63a8:	01400244 	movi	r5,9
    63ac:	dcc00315 	stw	r19,12(sp)
    63b0:	dc800215 	stw	r18,8(sp)
    63b4:	dfc00615 	stw	ra,24(sp)
    63b8:	dd400515 	stw	r21,20(sp)
    63bc:	dd000415 	stw	r20,16(sp)
    63c0:	3825883a 	mov	r18,r7
    63c4:	3027883a 	mov	r19,r6
    63c8:	00007940 	call	794 <__divsi3>
    63cc:	00c00044 	movi	r3,1
    63d0:	000b883a 	mov	r5,zero
    63d4:	1880030e 	bge	r3,r2,63e4 <__s2b+0x54>
    63d8:	18c7883a 	add	r3,r3,r3
    63dc:	29400044 	addi	r5,r5,1
    63e0:	18bffd16 	blt	r3,r2,63d8 <__alt_data_end+0xfffd63d8>
    63e4:	8809883a 	mov	r4,r17
    63e8:	00061780 	call	6178 <_Balloc>
    63ec:	d8c00717 	ldw	r3,28(sp)
    63f0:	10c00515 	stw	r3,20(r2)
    63f4:	00c00044 	movi	r3,1
    63f8:	10c00415 	stw	r3,16(r2)
    63fc:	00c00244 	movi	r3,9
    6400:	1cc0210e 	bge	r3,r19,6488 <__s2b+0xf8>
    6404:	80eb883a 	add	r21,r16,r3
    6408:	a829883a 	mov	r20,r21
    640c:	84e1883a 	add	r16,r16,r19
    6410:	a1c00007 	ldb	r7,0(r20)
    6414:	01800284 	movi	r6,10
    6418:	a5000044 	addi	r20,r20,1
    641c:	100b883a 	mov	r5,r2
    6420:	39fff404 	addi	r7,r7,-48
    6424:	8809883a 	mov	r4,r17
    6428:	00062480 	call	6248 <__multadd>
    642c:	a43ff81e 	bne	r20,r16,6410 <__alt_data_end+0xfffd6410>
    6430:	ace1883a 	add	r16,r21,r19
    6434:	843ffe04 	addi	r16,r16,-8
    6438:	9c800a0e 	bge	r19,r18,6464 <__s2b+0xd4>
    643c:	94e5c83a 	sub	r18,r18,r19
    6440:	84a5883a 	add	r18,r16,r18
    6444:	81c00007 	ldb	r7,0(r16)
    6448:	01800284 	movi	r6,10
    644c:	84000044 	addi	r16,r16,1
    6450:	100b883a 	mov	r5,r2
    6454:	39fff404 	addi	r7,r7,-48
    6458:	8809883a 	mov	r4,r17
    645c:	00062480 	call	6248 <__multadd>
    6460:	84bff81e 	bne	r16,r18,6444 <__alt_data_end+0xfffd6444>
    6464:	dfc00617 	ldw	ra,24(sp)
    6468:	dd400517 	ldw	r21,20(sp)
    646c:	dd000417 	ldw	r20,16(sp)
    6470:	dcc00317 	ldw	r19,12(sp)
    6474:	dc800217 	ldw	r18,8(sp)
    6478:	dc400117 	ldw	r17,4(sp)
    647c:	dc000017 	ldw	r16,0(sp)
    6480:	dec00704 	addi	sp,sp,28
    6484:	f800283a 	ret
    6488:	84000284 	addi	r16,r16,10
    648c:	1827883a 	mov	r19,r3
    6490:	003fe906 	br	6438 <__alt_data_end+0xfffd6438>

00006494 <__hi0bits>:
    6494:	20bfffec 	andhi	r2,r4,65535
    6498:	1000141e 	bne	r2,zero,64ec <__hi0bits+0x58>
    649c:	2008943a 	slli	r4,r4,16
    64a0:	00800404 	movi	r2,16
    64a4:	20ffc02c 	andhi	r3,r4,65280
    64a8:	1800021e 	bne	r3,zero,64b4 <__hi0bits+0x20>
    64ac:	2008923a 	slli	r4,r4,8
    64b0:	10800204 	addi	r2,r2,8
    64b4:	20fc002c 	andhi	r3,r4,61440
    64b8:	1800021e 	bne	r3,zero,64c4 <__hi0bits+0x30>
    64bc:	2008913a 	slli	r4,r4,4
    64c0:	10800104 	addi	r2,r2,4
    64c4:	20f0002c 	andhi	r3,r4,49152
    64c8:	1800031e 	bne	r3,zero,64d8 <__hi0bits+0x44>
    64cc:	2109883a 	add	r4,r4,r4
    64d0:	10800084 	addi	r2,r2,2
    64d4:	2109883a 	add	r4,r4,r4
    64d8:	20000316 	blt	r4,zero,64e8 <__hi0bits+0x54>
    64dc:	2110002c 	andhi	r4,r4,16384
    64e0:	2000041e 	bne	r4,zero,64f4 <__hi0bits+0x60>
    64e4:	00800804 	movi	r2,32
    64e8:	f800283a 	ret
    64ec:	0005883a 	mov	r2,zero
    64f0:	003fec06 	br	64a4 <__alt_data_end+0xfffd64a4>
    64f4:	10800044 	addi	r2,r2,1
    64f8:	f800283a 	ret

000064fc <__lo0bits>:
    64fc:	20c00017 	ldw	r3,0(r4)
    6500:	188001cc 	andi	r2,r3,7
    6504:	10000826 	beq	r2,zero,6528 <__lo0bits+0x2c>
    6508:	1880004c 	andi	r2,r3,1
    650c:	1000211e 	bne	r2,zero,6594 <__lo0bits+0x98>
    6510:	1880008c 	andi	r2,r3,2
    6514:	1000211e 	bne	r2,zero,659c <__lo0bits+0xa0>
    6518:	1806d0ba 	srli	r3,r3,2
    651c:	00800084 	movi	r2,2
    6520:	20c00015 	stw	r3,0(r4)
    6524:	f800283a 	ret
    6528:	18bfffcc 	andi	r2,r3,65535
    652c:	10001326 	beq	r2,zero,657c <__lo0bits+0x80>
    6530:	0005883a 	mov	r2,zero
    6534:	19403fcc 	andi	r5,r3,255
    6538:	2800021e 	bne	r5,zero,6544 <__lo0bits+0x48>
    653c:	1806d23a 	srli	r3,r3,8
    6540:	10800204 	addi	r2,r2,8
    6544:	194003cc 	andi	r5,r3,15
    6548:	2800021e 	bne	r5,zero,6554 <__lo0bits+0x58>
    654c:	1806d13a 	srli	r3,r3,4
    6550:	10800104 	addi	r2,r2,4
    6554:	194000cc 	andi	r5,r3,3
    6558:	2800021e 	bne	r5,zero,6564 <__lo0bits+0x68>
    655c:	1806d0ba 	srli	r3,r3,2
    6560:	10800084 	addi	r2,r2,2
    6564:	1940004c 	andi	r5,r3,1
    6568:	2800081e 	bne	r5,zero,658c <__lo0bits+0x90>
    656c:	1806d07a 	srli	r3,r3,1
    6570:	1800051e 	bne	r3,zero,6588 <__lo0bits+0x8c>
    6574:	00800804 	movi	r2,32
    6578:	f800283a 	ret
    657c:	1806d43a 	srli	r3,r3,16
    6580:	00800404 	movi	r2,16
    6584:	003feb06 	br	6534 <__alt_data_end+0xfffd6534>
    6588:	10800044 	addi	r2,r2,1
    658c:	20c00015 	stw	r3,0(r4)
    6590:	f800283a 	ret
    6594:	0005883a 	mov	r2,zero
    6598:	f800283a 	ret
    659c:	1806d07a 	srli	r3,r3,1
    65a0:	00800044 	movi	r2,1
    65a4:	20c00015 	stw	r3,0(r4)
    65a8:	f800283a 	ret

000065ac <__i2b>:
    65ac:	defffd04 	addi	sp,sp,-12
    65b0:	dc000015 	stw	r16,0(sp)
    65b4:	04000044 	movi	r16,1
    65b8:	dc400115 	stw	r17,4(sp)
    65bc:	2823883a 	mov	r17,r5
    65c0:	800b883a 	mov	r5,r16
    65c4:	dfc00215 	stw	ra,8(sp)
    65c8:	00061780 	call	6178 <_Balloc>
    65cc:	14400515 	stw	r17,20(r2)
    65d0:	14000415 	stw	r16,16(r2)
    65d4:	dfc00217 	ldw	ra,8(sp)
    65d8:	dc400117 	ldw	r17,4(sp)
    65dc:	dc000017 	ldw	r16,0(sp)
    65e0:	dec00304 	addi	sp,sp,12
    65e4:	f800283a 	ret

000065e8 <__multiply>:
    65e8:	deffef04 	addi	sp,sp,-68
    65ec:	dc400815 	stw	r17,32(sp)
    65f0:	dc000715 	stw	r16,28(sp)
    65f4:	34400417 	ldw	r17,16(r6)
    65f8:	2c000417 	ldw	r16,16(r5)
    65fc:	dd800d15 	stw	r22,52(sp)
    6600:	dc800915 	stw	r18,36(sp)
    6604:	dfc01015 	stw	ra,64(sp)
    6608:	df000f15 	stw	fp,60(sp)
    660c:	ddc00e15 	stw	r23,56(sp)
    6610:	dd400c15 	stw	r21,48(sp)
    6614:	dd000b15 	stw	r20,44(sp)
    6618:	dcc00a15 	stw	r19,40(sp)
    661c:	2825883a 	mov	r18,r5
    6620:	302d883a 	mov	r22,r6
    6624:	8440050e 	bge	r16,r17,663c <__multiply+0x54>
    6628:	8007883a 	mov	r3,r16
    662c:	3025883a 	mov	r18,r6
    6630:	8821883a 	mov	r16,r17
    6634:	282d883a 	mov	r22,r5
    6638:	1823883a 	mov	r17,r3
    663c:	90800217 	ldw	r2,8(r18)
    6640:	8447883a 	add	r3,r16,r17
    6644:	d8c00215 	stw	r3,8(sp)
    6648:	91400117 	ldw	r5,4(r18)
    664c:	10c0010e 	bge	r2,r3,6654 <__multiply+0x6c>
    6650:	29400044 	addi	r5,r5,1
    6654:	00061780 	call	6178 <_Balloc>
    6658:	d8c00217 	ldw	r3,8(sp)
    665c:	d8800615 	stw	r2,24(sp)
    6660:	18eb883a 	add	r21,r3,r3
    6664:	ad6b883a 	add	r21,r21,r21
    6668:	10c00504 	addi	r3,r2,20
    666c:	1d6b883a 	add	r21,r3,r21
    6670:	d8c00115 	stw	r3,4(sp)
    6674:	dd400315 	stw	r21,12(sp)
    6678:	1805883a 	mov	r2,r3
    667c:	1d40042e 	bgeu	r3,r21,6690 <__multiply+0xa8>
    6680:	d8c00317 	ldw	r3,12(sp)
    6684:	10000015 	stw	zero,0(r2)
    6688:	10800104 	addi	r2,r2,4
    668c:	10fffc36 	bltu	r2,r3,6680 <__alt_data_end+0xfffd6680>
    6690:	8c63883a 	add	r17,r17,r17
    6694:	b5800504 	addi	r22,r22,20
    6698:	8c63883a 	add	r17,r17,r17
    669c:	94800504 	addi	r18,r18,20
    66a0:	8421883a 	add	r16,r16,r16
    66a4:	b463883a 	add	r17,r22,r17
    66a8:	8421883a 	add	r16,r16,r16
    66ac:	dd800015 	stw	r22,0(sp)
    66b0:	dc800415 	stw	r18,16(sp)
    66b4:	dc400515 	stw	r17,20(sp)
    66b8:	9429883a 	add	r20,r18,r16
    66bc:	b4404f2e 	bgeu	r22,r17,67fc <__multiply+0x214>
    66c0:	d8c00017 	ldw	r3,0(sp)
    66c4:	1c800017 	ldw	r18,0(r3)
    66c8:	947fffcc 	andi	r17,r18,65535
    66cc:	88001e26 	beq	r17,zero,6748 <__multiply+0x160>
    66d0:	dd800117 	ldw	r22,4(sp)
    66d4:	dd400417 	ldw	r21,16(sp)
    66d8:	0027883a 	mov	r19,zero
    66dc:	ac800017 	ldw	r18,0(r21)
    66e0:	b4000017 	ldw	r16,0(r22)
    66e4:	880b883a 	mov	r5,r17
    66e8:	913fffcc 	andi	r4,r18,65535
    66ec:	000ad340 	call	ad34 <__mulsi3>
    66f0:	9008d43a 	srli	r4,r18,16
    66f4:	84bfffcc 	andi	r18,r16,65535
    66f8:	1485883a 	add	r2,r2,r18
    66fc:	14e5883a 	add	r18,r2,r19
    6700:	8020d43a 	srli	r16,r16,16
    6704:	9026d43a 	srli	r19,r18,16
    6708:	880b883a 	mov	r5,r17
    670c:	000ad340 	call	ad34 <__mulsi3>
    6710:	1405883a 	add	r2,r2,r16
    6714:	14e1883a 	add	r16,r2,r19
    6718:	90ffffcc 	andi	r3,r18,65535
    671c:	8024943a 	slli	r18,r16,16
    6720:	ad400104 	addi	r21,r21,4
    6724:	b005883a 	mov	r2,r22
    6728:	90c6b03a 	or	r3,r18,r3
    672c:	b0c00015 	stw	r3,0(r22)
    6730:	8026d43a 	srli	r19,r16,16
    6734:	b5800104 	addi	r22,r22,4
    6738:	ad3fe836 	bltu	r21,r20,66dc <__alt_data_end+0xfffd66dc>
    673c:	d8c00017 	ldw	r3,0(sp)
    6740:	14c00115 	stw	r19,4(r2)
    6744:	1c800017 	ldw	r18,0(r3)
    6748:	9024d43a 	srli	r18,r18,16
    674c:	90002226 	beq	r18,zero,67d8 <__multiply+0x1f0>
    6750:	d8c00117 	ldw	r3,4(sp)
    6754:	dd800417 	ldw	r22,16(sp)
    6758:	002f883a 	mov	r23,zero
    675c:	1f000017 	ldw	fp,0(r3)
    6760:	1823883a 	mov	r17,r3
    6764:	182b883a 	mov	r21,r3
    6768:	e021883a 	mov	r16,fp
    676c:	00000106 	br	6774 <__multiply+0x18c>
    6770:	982b883a 	mov	r21,r19
    6774:	b100000b 	ldhu	r4,0(r22)
    6778:	8020d43a 	srli	r16,r16,16
    677c:	900b883a 	mov	r5,r18
    6780:	000ad340 	call	ad34 <__mulsi3>
    6784:	1405883a 	add	r2,r2,r16
    6788:	15ef883a 	add	r23,r2,r23
    678c:	b804943a 	slli	r2,r23,16
    6790:	e0ffffcc 	andi	r3,fp,65535
    6794:	8c400104 	addi	r17,r17,4
    6798:	10c6b03a 	or	r3,r2,r3
    679c:	88ffff15 	stw	r3,-4(r17)
    67a0:	b5800104 	addi	r22,r22,4
    67a4:	b13fff17 	ldw	r4,-4(r22)
    67a8:	acc00104 	addi	r19,r21,4
    67ac:	900b883a 	mov	r5,r18
    67b0:	2008d43a 	srli	r4,r4,16
    67b4:	9c000017 	ldw	r16,0(r19)
    67b8:	000ad340 	call	ad34 <__mulsi3>
    67bc:	b806d43a 	srli	r3,r23,16
    67c0:	813fffcc 	andi	r4,r16,65535
    67c4:	1105883a 	add	r2,r2,r4
    67c8:	10f9883a 	add	fp,r2,r3
    67cc:	e02ed43a 	srli	r23,fp,16
    67d0:	b53fe736 	bltu	r22,r20,6770 <__alt_data_end+0xfffd6770>
    67d4:	af000115 	stw	fp,4(r21)
    67d8:	d8c00017 	ldw	r3,0(sp)
    67dc:	d9000517 	ldw	r4,20(sp)
    67e0:	18c00104 	addi	r3,r3,4
    67e4:	d8c00015 	stw	r3,0(sp)
    67e8:	d8c00117 	ldw	r3,4(sp)
    67ec:	18c00104 	addi	r3,r3,4
    67f0:	d8c00115 	stw	r3,4(sp)
    67f4:	d8c00017 	ldw	r3,0(sp)
    67f8:	193fb136 	bltu	r3,r4,66c0 <__alt_data_end+0xfffd66c0>
    67fc:	d8c00217 	ldw	r3,8(sp)
    6800:	00c00c0e 	bge	zero,r3,6834 <__multiply+0x24c>
    6804:	d8c00317 	ldw	r3,12(sp)
    6808:	18bfff17 	ldw	r2,-4(r3)
    680c:	1d7fff04 	addi	r21,r3,-4
    6810:	10000326 	beq	r2,zero,6820 <__multiply+0x238>
    6814:	00000706 	br	6834 <__multiply+0x24c>
    6818:	a8800017 	ldw	r2,0(r21)
    681c:	1000051e 	bne	r2,zero,6834 <__multiply+0x24c>
    6820:	d8c00217 	ldw	r3,8(sp)
    6824:	ad7fff04 	addi	r21,r21,-4
    6828:	18ffffc4 	addi	r3,r3,-1
    682c:	d8c00215 	stw	r3,8(sp)
    6830:	183ff91e 	bne	r3,zero,6818 <__alt_data_end+0xfffd6818>
    6834:	d8c00617 	ldw	r3,24(sp)
    6838:	d9000217 	ldw	r4,8(sp)
    683c:	1805883a 	mov	r2,r3
    6840:	19000415 	stw	r4,16(r3)
    6844:	dfc01017 	ldw	ra,64(sp)
    6848:	df000f17 	ldw	fp,60(sp)
    684c:	ddc00e17 	ldw	r23,56(sp)
    6850:	dd800d17 	ldw	r22,52(sp)
    6854:	dd400c17 	ldw	r21,48(sp)
    6858:	dd000b17 	ldw	r20,44(sp)
    685c:	dcc00a17 	ldw	r19,40(sp)
    6860:	dc800917 	ldw	r18,36(sp)
    6864:	dc400817 	ldw	r17,32(sp)
    6868:	dc000717 	ldw	r16,28(sp)
    686c:	dec01104 	addi	sp,sp,68
    6870:	f800283a 	ret

00006874 <__pow5mult>:
    6874:	defffa04 	addi	sp,sp,-24
    6878:	dcc00315 	stw	r19,12(sp)
    687c:	dc000015 	stw	r16,0(sp)
    6880:	dfc00515 	stw	ra,20(sp)
    6884:	dd000415 	stw	r20,16(sp)
    6888:	dc800215 	stw	r18,8(sp)
    688c:	dc400115 	stw	r17,4(sp)
    6890:	308000cc 	andi	r2,r6,3
    6894:	3021883a 	mov	r16,r6
    6898:	2027883a 	mov	r19,r4
    689c:	10002f1e 	bne	r2,zero,695c <__pow5mult+0xe8>
    68a0:	2825883a 	mov	r18,r5
    68a4:	8021d0ba 	srai	r16,r16,2
    68a8:	80001a26 	beq	r16,zero,6914 <__pow5mult+0xa0>
    68ac:	9c401217 	ldw	r17,72(r19)
    68b0:	8800061e 	bne	r17,zero,68cc <__pow5mult+0x58>
    68b4:	00003406 	br	6988 <__pow5mult+0x114>
    68b8:	8021d07a 	srai	r16,r16,1
    68bc:	80001526 	beq	r16,zero,6914 <__pow5mult+0xa0>
    68c0:	88800017 	ldw	r2,0(r17)
    68c4:	10001c26 	beq	r2,zero,6938 <__pow5mult+0xc4>
    68c8:	1023883a 	mov	r17,r2
    68cc:	8080004c 	andi	r2,r16,1
    68d0:	103ff926 	beq	r2,zero,68b8 <__alt_data_end+0xfffd68b8>
    68d4:	880d883a 	mov	r6,r17
    68d8:	900b883a 	mov	r5,r18
    68dc:	9809883a 	mov	r4,r19
    68e0:	00065e80 	call	65e8 <__multiply>
    68e4:	90001b26 	beq	r18,zero,6954 <__pow5mult+0xe0>
    68e8:	91000117 	ldw	r4,4(r18)
    68ec:	98c01317 	ldw	r3,76(r19)
    68f0:	8021d07a 	srai	r16,r16,1
    68f4:	2109883a 	add	r4,r4,r4
    68f8:	2109883a 	add	r4,r4,r4
    68fc:	1907883a 	add	r3,r3,r4
    6900:	19000017 	ldw	r4,0(r3)
    6904:	91000015 	stw	r4,0(r18)
    6908:	1c800015 	stw	r18,0(r3)
    690c:	1025883a 	mov	r18,r2
    6910:	803feb1e 	bne	r16,zero,68c0 <__alt_data_end+0xfffd68c0>
    6914:	9005883a 	mov	r2,r18
    6918:	dfc00517 	ldw	ra,20(sp)
    691c:	dd000417 	ldw	r20,16(sp)
    6920:	dcc00317 	ldw	r19,12(sp)
    6924:	dc800217 	ldw	r18,8(sp)
    6928:	dc400117 	ldw	r17,4(sp)
    692c:	dc000017 	ldw	r16,0(sp)
    6930:	dec00604 	addi	sp,sp,24
    6934:	f800283a 	ret
    6938:	880d883a 	mov	r6,r17
    693c:	880b883a 	mov	r5,r17
    6940:	9809883a 	mov	r4,r19
    6944:	00065e80 	call	65e8 <__multiply>
    6948:	88800015 	stw	r2,0(r17)
    694c:	10000015 	stw	zero,0(r2)
    6950:	003fdd06 	br	68c8 <__alt_data_end+0xfffd68c8>
    6954:	1025883a 	mov	r18,r2
    6958:	003fd706 	br	68b8 <__alt_data_end+0xfffd68b8>
    695c:	10bfffc4 	addi	r2,r2,-1
    6960:	1085883a 	add	r2,r2,r2
    6964:	00c00074 	movhi	r3,1
    6968:	18dfbc04 	addi	r3,r3,32496
    696c:	1085883a 	add	r2,r2,r2
    6970:	1885883a 	add	r2,r3,r2
    6974:	11800017 	ldw	r6,0(r2)
    6978:	000f883a 	mov	r7,zero
    697c:	00062480 	call	6248 <__multadd>
    6980:	1025883a 	mov	r18,r2
    6984:	003fc706 	br	68a4 <__alt_data_end+0xfffd68a4>
    6988:	05000044 	movi	r20,1
    698c:	a00b883a 	mov	r5,r20
    6990:	9809883a 	mov	r4,r19
    6994:	00061780 	call	6178 <_Balloc>
    6998:	1023883a 	mov	r17,r2
    699c:	00809c44 	movi	r2,625
    69a0:	88800515 	stw	r2,20(r17)
    69a4:	8d000415 	stw	r20,16(r17)
    69a8:	9c401215 	stw	r17,72(r19)
    69ac:	88000015 	stw	zero,0(r17)
    69b0:	003fc606 	br	68cc <__alt_data_end+0xfffd68cc>

000069b4 <__lshift>:
    69b4:	defff904 	addi	sp,sp,-28
    69b8:	dd400515 	stw	r21,20(sp)
    69bc:	dcc00315 	stw	r19,12(sp)
    69c0:	302bd17a 	srai	r21,r6,5
    69c4:	2cc00417 	ldw	r19,16(r5)
    69c8:	28800217 	ldw	r2,8(r5)
    69cc:	dd000415 	stw	r20,16(sp)
    69d0:	ace7883a 	add	r19,r21,r19
    69d4:	dc800215 	stw	r18,8(sp)
    69d8:	dc400115 	stw	r17,4(sp)
    69dc:	dc000015 	stw	r16,0(sp)
    69e0:	dfc00615 	stw	ra,24(sp)
    69e4:	9c000044 	addi	r16,r19,1
    69e8:	2823883a 	mov	r17,r5
    69ec:	3029883a 	mov	r20,r6
    69f0:	2025883a 	mov	r18,r4
    69f4:	29400117 	ldw	r5,4(r5)
    69f8:	1400030e 	bge	r2,r16,6a08 <__lshift+0x54>
    69fc:	1085883a 	add	r2,r2,r2
    6a00:	29400044 	addi	r5,r5,1
    6a04:	143ffd16 	blt	r2,r16,69fc <__alt_data_end+0xfffd69fc>
    6a08:	9009883a 	mov	r4,r18
    6a0c:	00061780 	call	6178 <_Balloc>
    6a10:	10c00504 	addi	r3,r2,20
    6a14:	0540070e 	bge	zero,r21,6a34 <__lshift+0x80>
    6a18:	ad6b883a 	add	r21,r21,r21
    6a1c:	ad6b883a 	add	r21,r21,r21
    6a20:	1809883a 	mov	r4,r3
    6a24:	1d47883a 	add	r3,r3,r21
    6a28:	20000015 	stw	zero,0(r4)
    6a2c:	21000104 	addi	r4,r4,4
    6a30:	193ffd1e 	bne	r3,r4,6a28 <__alt_data_end+0xfffd6a28>
    6a34:	8a000417 	ldw	r8,16(r17)
    6a38:	89000504 	addi	r4,r17,20
    6a3c:	a18007cc 	andi	r6,r20,31
    6a40:	4211883a 	add	r8,r8,r8
    6a44:	4211883a 	add	r8,r8,r8
    6a48:	2211883a 	add	r8,r4,r8
    6a4c:	30002326 	beq	r6,zero,6adc <__lshift+0x128>
    6a50:	02400804 	movi	r9,32
    6a54:	4993c83a 	sub	r9,r9,r6
    6a58:	000b883a 	mov	r5,zero
    6a5c:	21c00017 	ldw	r7,0(r4)
    6a60:	1815883a 	mov	r10,r3
    6a64:	18c00104 	addi	r3,r3,4
    6a68:	398e983a 	sll	r7,r7,r6
    6a6c:	21000104 	addi	r4,r4,4
    6a70:	394ab03a 	or	r5,r7,r5
    6a74:	197fff15 	stw	r5,-4(r3)
    6a78:	217fff17 	ldw	r5,-4(r4)
    6a7c:	2a4ad83a 	srl	r5,r5,r9
    6a80:	223ff636 	bltu	r4,r8,6a5c <__alt_data_end+0xfffd6a5c>
    6a84:	51400115 	stw	r5,4(r10)
    6a88:	28001a1e 	bne	r5,zero,6af4 <__lshift+0x140>
    6a8c:	843fffc4 	addi	r16,r16,-1
    6a90:	14000415 	stw	r16,16(r2)
    6a94:	88000826 	beq	r17,zero,6ab8 <__lshift+0x104>
    6a98:	89000117 	ldw	r4,4(r17)
    6a9c:	90c01317 	ldw	r3,76(r18)
    6aa0:	2109883a 	add	r4,r4,r4
    6aa4:	2109883a 	add	r4,r4,r4
    6aa8:	1907883a 	add	r3,r3,r4
    6aac:	19000017 	ldw	r4,0(r3)
    6ab0:	89000015 	stw	r4,0(r17)
    6ab4:	1c400015 	stw	r17,0(r3)
    6ab8:	dfc00617 	ldw	ra,24(sp)
    6abc:	dd400517 	ldw	r21,20(sp)
    6ac0:	dd000417 	ldw	r20,16(sp)
    6ac4:	dcc00317 	ldw	r19,12(sp)
    6ac8:	dc800217 	ldw	r18,8(sp)
    6acc:	dc400117 	ldw	r17,4(sp)
    6ad0:	dc000017 	ldw	r16,0(sp)
    6ad4:	dec00704 	addi	sp,sp,28
    6ad8:	f800283a 	ret
    6adc:	21400017 	ldw	r5,0(r4)
    6ae0:	18c00104 	addi	r3,r3,4
    6ae4:	21000104 	addi	r4,r4,4
    6ae8:	197fff15 	stw	r5,-4(r3)
    6aec:	223ffb36 	bltu	r4,r8,6adc <__alt_data_end+0xfffd6adc>
    6af0:	003fe606 	br	6a8c <__alt_data_end+0xfffd6a8c>
    6af4:	9c000084 	addi	r16,r19,2
    6af8:	003fe406 	br	6a8c <__alt_data_end+0xfffd6a8c>

00006afc <__mcmp>:
    6afc:	20800417 	ldw	r2,16(r4)
    6b00:	28c00417 	ldw	r3,16(r5)
    6b04:	10c5c83a 	sub	r2,r2,r3
    6b08:	1000111e 	bne	r2,zero,6b50 <__mcmp+0x54>
    6b0c:	18c7883a 	add	r3,r3,r3
    6b10:	18c7883a 	add	r3,r3,r3
    6b14:	21000504 	addi	r4,r4,20
    6b18:	29400504 	addi	r5,r5,20
    6b1c:	20c5883a 	add	r2,r4,r3
    6b20:	28cb883a 	add	r5,r5,r3
    6b24:	00000106 	br	6b2c <__mcmp+0x30>
    6b28:	20800a2e 	bgeu	r4,r2,6b54 <__mcmp+0x58>
    6b2c:	10bfff04 	addi	r2,r2,-4
    6b30:	297fff04 	addi	r5,r5,-4
    6b34:	11800017 	ldw	r6,0(r2)
    6b38:	28c00017 	ldw	r3,0(r5)
    6b3c:	30fffa26 	beq	r6,r3,6b28 <__alt_data_end+0xfffd6b28>
    6b40:	30c00236 	bltu	r6,r3,6b4c <__mcmp+0x50>
    6b44:	00800044 	movi	r2,1
    6b48:	f800283a 	ret
    6b4c:	00bfffc4 	movi	r2,-1
    6b50:	f800283a 	ret
    6b54:	0005883a 	mov	r2,zero
    6b58:	f800283a 	ret

00006b5c <__mdiff>:
    6b5c:	28c00417 	ldw	r3,16(r5)
    6b60:	30800417 	ldw	r2,16(r6)
    6b64:	defffa04 	addi	sp,sp,-24
    6b68:	dcc00315 	stw	r19,12(sp)
    6b6c:	dc800215 	stw	r18,8(sp)
    6b70:	dfc00515 	stw	ra,20(sp)
    6b74:	dd000415 	stw	r20,16(sp)
    6b78:	dc400115 	stw	r17,4(sp)
    6b7c:	dc000015 	stw	r16,0(sp)
    6b80:	1887c83a 	sub	r3,r3,r2
    6b84:	2825883a 	mov	r18,r5
    6b88:	3027883a 	mov	r19,r6
    6b8c:	1800141e 	bne	r3,zero,6be0 <__mdiff+0x84>
    6b90:	1085883a 	add	r2,r2,r2
    6b94:	1085883a 	add	r2,r2,r2
    6b98:	2a000504 	addi	r8,r5,20
    6b9c:	34000504 	addi	r16,r6,20
    6ba0:	4087883a 	add	r3,r8,r2
    6ba4:	8085883a 	add	r2,r16,r2
    6ba8:	00000106 	br	6bb0 <__mdiff+0x54>
    6bac:	40c0592e 	bgeu	r8,r3,6d14 <__mdiff+0x1b8>
    6bb0:	18ffff04 	addi	r3,r3,-4
    6bb4:	10bfff04 	addi	r2,r2,-4
    6bb8:	19c00017 	ldw	r7,0(r3)
    6bbc:	11400017 	ldw	r5,0(r2)
    6bc0:	397ffa26 	beq	r7,r5,6bac <__alt_data_end+0xfffd6bac>
    6bc4:	3940592e 	bgeu	r7,r5,6d2c <__mdiff+0x1d0>
    6bc8:	9005883a 	mov	r2,r18
    6bcc:	4023883a 	mov	r17,r8
    6bd0:	9825883a 	mov	r18,r19
    6bd4:	05000044 	movi	r20,1
    6bd8:	1027883a 	mov	r19,r2
    6bdc:	00000406 	br	6bf0 <__mdiff+0x94>
    6be0:	18005616 	blt	r3,zero,6d3c <__mdiff+0x1e0>
    6be4:	34400504 	addi	r17,r6,20
    6be8:	2c000504 	addi	r16,r5,20
    6bec:	0029883a 	mov	r20,zero
    6bf0:	91400117 	ldw	r5,4(r18)
    6bf4:	00061780 	call	6178 <_Balloc>
    6bf8:	92400417 	ldw	r9,16(r18)
    6bfc:	9b000417 	ldw	r12,16(r19)
    6c00:	12c00504 	addi	r11,r2,20
    6c04:	4a51883a 	add	r8,r9,r9
    6c08:	6319883a 	add	r12,r12,r12
    6c0c:	4211883a 	add	r8,r8,r8
    6c10:	6319883a 	add	r12,r12,r12
    6c14:	15000315 	stw	r20,12(r2)
    6c18:	8211883a 	add	r8,r16,r8
    6c1c:	8b19883a 	add	r12,r17,r12
    6c20:	0007883a 	mov	r3,zero
    6c24:	81400017 	ldw	r5,0(r16)
    6c28:	89c00017 	ldw	r7,0(r17)
    6c2c:	59800104 	addi	r6,r11,4
    6c30:	293fffcc 	andi	r4,r5,65535
    6c34:	20c7883a 	add	r3,r4,r3
    6c38:	393fffcc 	andi	r4,r7,65535
    6c3c:	1909c83a 	sub	r4,r3,r4
    6c40:	280ad43a 	srli	r5,r5,16
    6c44:	380ed43a 	srli	r7,r7,16
    6c48:	2007d43a 	srai	r3,r4,16
    6c4c:	213fffcc 	andi	r4,r4,65535
    6c50:	29cbc83a 	sub	r5,r5,r7
    6c54:	28c7883a 	add	r3,r5,r3
    6c58:	180a943a 	slli	r5,r3,16
    6c5c:	8c400104 	addi	r17,r17,4
    6c60:	84000104 	addi	r16,r16,4
    6c64:	2908b03a 	or	r4,r5,r4
    6c68:	59000015 	stw	r4,0(r11)
    6c6c:	1807d43a 	srai	r3,r3,16
    6c70:	3015883a 	mov	r10,r6
    6c74:	3017883a 	mov	r11,r6
    6c78:	8b3fea36 	bltu	r17,r12,6c24 <__alt_data_end+0xfffd6c24>
    6c7c:	8200162e 	bgeu	r16,r8,6cd8 <__mdiff+0x17c>
    6c80:	8017883a 	mov	r11,r16
    6c84:	59400017 	ldw	r5,0(r11)
    6c88:	31800104 	addi	r6,r6,4
    6c8c:	5ac00104 	addi	r11,r11,4
    6c90:	293fffcc 	andi	r4,r5,65535
    6c94:	20c7883a 	add	r3,r4,r3
    6c98:	280ed43a 	srli	r7,r5,16
    6c9c:	180bd43a 	srai	r5,r3,16
    6ca0:	193fffcc 	andi	r4,r3,65535
    6ca4:	3947883a 	add	r3,r7,r5
    6ca8:	180a943a 	slli	r5,r3,16
    6cac:	1807d43a 	srai	r3,r3,16
    6cb0:	2908b03a 	or	r4,r5,r4
    6cb4:	313fff15 	stw	r4,-4(r6)
    6cb8:	5a3ff236 	bltu	r11,r8,6c84 <__alt_data_end+0xfffd6c84>
    6cbc:	0406303a 	nor	r3,zero,r16
    6cc0:	1a07883a 	add	r3,r3,r8
    6cc4:	1806d0ba 	srli	r3,r3,2
    6cc8:	18c00044 	addi	r3,r3,1
    6ccc:	18c7883a 	add	r3,r3,r3
    6cd0:	18c7883a 	add	r3,r3,r3
    6cd4:	50d5883a 	add	r10,r10,r3
    6cd8:	50ffff04 	addi	r3,r10,-4
    6cdc:	2000041e 	bne	r4,zero,6cf0 <__mdiff+0x194>
    6ce0:	18ffff04 	addi	r3,r3,-4
    6ce4:	19000017 	ldw	r4,0(r3)
    6ce8:	4a7fffc4 	addi	r9,r9,-1
    6cec:	203ffc26 	beq	r4,zero,6ce0 <__alt_data_end+0xfffd6ce0>
    6cf0:	12400415 	stw	r9,16(r2)
    6cf4:	dfc00517 	ldw	ra,20(sp)
    6cf8:	dd000417 	ldw	r20,16(sp)
    6cfc:	dcc00317 	ldw	r19,12(sp)
    6d00:	dc800217 	ldw	r18,8(sp)
    6d04:	dc400117 	ldw	r17,4(sp)
    6d08:	dc000017 	ldw	r16,0(sp)
    6d0c:	dec00604 	addi	sp,sp,24
    6d10:	f800283a 	ret
    6d14:	000b883a 	mov	r5,zero
    6d18:	00061780 	call	6178 <_Balloc>
    6d1c:	00c00044 	movi	r3,1
    6d20:	10c00415 	stw	r3,16(r2)
    6d24:	10000515 	stw	zero,20(r2)
    6d28:	003ff206 	br	6cf4 <__alt_data_end+0xfffd6cf4>
    6d2c:	8023883a 	mov	r17,r16
    6d30:	0029883a 	mov	r20,zero
    6d34:	4021883a 	mov	r16,r8
    6d38:	003fad06 	br	6bf0 <__alt_data_end+0xfffd6bf0>
    6d3c:	9005883a 	mov	r2,r18
    6d40:	94400504 	addi	r17,r18,20
    6d44:	9c000504 	addi	r16,r19,20
    6d48:	9825883a 	mov	r18,r19
    6d4c:	05000044 	movi	r20,1
    6d50:	1027883a 	mov	r19,r2
    6d54:	003fa606 	br	6bf0 <__alt_data_end+0xfffd6bf0>

00006d58 <__ulp>:
    6d58:	295ffc2c 	andhi	r5,r5,32752
    6d5c:	00bf3034 	movhi	r2,64704
    6d60:	2887883a 	add	r3,r5,r2
    6d64:	00c0020e 	bge	zero,r3,6d70 <__ulp+0x18>
    6d68:	0005883a 	mov	r2,zero
    6d6c:	f800283a 	ret
    6d70:	00c7c83a 	sub	r3,zero,r3
    6d74:	1807d53a 	srai	r3,r3,20
    6d78:	008004c4 	movi	r2,19
    6d7c:	10c00b0e 	bge	r2,r3,6dac <__ulp+0x54>
    6d80:	18bffb04 	addi	r2,r3,-20
    6d84:	01000784 	movi	r4,30
    6d88:	0007883a 	mov	r3,zero
    6d8c:	20800516 	blt	r4,r2,6da4 <__ulp+0x4c>
    6d90:	010007c4 	movi	r4,31
    6d94:	2089c83a 	sub	r4,r4,r2
    6d98:	00800044 	movi	r2,1
    6d9c:	1104983a 	sll	r2,r2,r4
    6da0:	f800283a 	ret
    6da4:	00800044 	movi	r2,1
    6da8:	f800283a 	ret
    6dac:	01400234 	movhi	r5,8
    6db0:	28c7d83a 	sra	r3,r5,r3
    6db4:	0005883a 	mov	r2,zero
    6db8:	f800283a 	ret

00006dbc <__b2d>:
    6dbc:	defffa04 	addi	sp,sp,-24
    6dc0:	dc000015 	stw	r16,0(sp)
    6dc4:	24000417 	ldw	r16,16(r4)
    6dc8:	dc400115 	stw	r17,4(sp)
    6dcc:	24400504 	addi	r17,r4,20
    6dd0:	8421883a 	add	r16,r16,r16
    6dd4:	8421883a 	add	r16,r16,r16
    6dd8:	8c21883a 	add	r16,r17,r16
    6ddc:	dc800215 	stw	r18,8(sp)
    6de0:	84bfff17 	ldw	r18,-4(r16)
    6de4:	dd000415 	stw	r20,16(sp)
    6de8:	dcc00315 	stw	r19,12(sp)
    6dec:	9009883a 	mov	r4,r18
    6df0:	2829883a 	mov	r20,r5
    6df4:	dfc00515 	stw	ra,20(sp)
    6df8:	00064940 	call	6494 <__hi0bits>
    6dfc:	00c00804 	movi	r3,32
    6e00:	1889c83a 	sub	r4,r3,r2
    6e04:	a1000015 	stw	r4,0(r20)
    6e08:	01000284 	movi	r4,10
    6e0c:	84ffff04 	addi	r19,r16,-4
    6e10:	20801216 	blt	r4,r2,6e5c <__b2d+0xa0>
    6e14:	018002c4 	movi	r6,11
    6e18:	308dc83a 	sub	r6,r6,r2
    6e1c:	9186d83a 	srl	r3,r18,r6
    6e20:	18cffc34 	orhi	r3,r3,16368
    6e24:	8cc0212e 	bgeu	r17,r19,6eac <__b2d+0xf0>
    6e28:	813ffe17 	ldw	r4,-8(r16)
    6e2c:	218cd83a 	srl	r6,r4,r6
    6e30:	10800544 	addi	r2,r2,21
    6e34:	9084983a 	sll	r2,r18,r2
    6e38:	1184b03a 	or	r2,r2,r6
    6e3c:	dfc00517 	ldw	ra,20(sp)
    6e40:	dd000417 	ldw	r20,16(sp)
    6e44:	dcc00317 	ldw	r19,12(sp)
    6e48:	dc800217 	ldw	r18,8(sp)
    6e4c:	dc400117 	ldw	r17,4(sp)
    6e50:	dc000017 	ldw	r16,0(sp)
    6e54:	dec00604 	addi	sp,sp,24
    6e58:	f800283a 	ret
    6e5c:	8cc00f2e 	bgeu	r17,r19,6e9c <__b2d+0xe0>
    6e60:	117ffd44 	addi	r5,r2,-11
    6e64:	80bffe17 	ldw	r2,-8(r16)
    6e68:	28000e26 	beq	r5,zero,6ea4 <__b2d+0xe8>
    6e6c:	1949c83a 	sub	r4,r3,r5
    6e70:	9164983a 	sll	r18,r18,r5
    6e74:	1106d83a 	srl	r3,r2,r4
    6e78:	81bffe04 	addi	r6,r16,-8
    6e7c:	948ffc34 	orhi	r18,r18,16368
    6e80:	90c6b03a 	or	r3,r18,r3
    6e84:	89800e2e 	bgeu	r17,r6,6ec0 <__b2d+0x104>
    6e88:	81bffd17 	ldw	r6,-12(r16)
    6e8c:	1144983a 	sll	r2,r2,r5
    6e90:	310ad83a 	srl	r5,r6,r4
    6e94:	2884b03a 	or	r2,r5,r2
    6e98:	003fe806 	br	6e3c <__alt_data_end+0xfffd6e3c>
    6e9c:	10bffd44 	addi	r2,r2,-11
    6ea0:	1000041e 	bne	r2,zero,6eb4 <__b2d+0xf8>
    6ea4:	90cffc34 	orhi	r3,r18,16368
    6ea8:	003fe406 	br	6e3c <__alt_data_end+0xfffd6e3c>
    6eac:	000d883a 	mov	r6,zero
    6eb0:	003fdf06 	br	6e30 <__alt_data_end+0xfffd6e30>
    6eb4:	90a4983a 	sll	r18,r18,r2
    6eb8:	0005883a 	mov	r2,zero
    6ebc:	003ff906 	br	6ea4 <__alt_data_end+0xfffd6ea4>
    6ec0:	1144983a 	sll	r2,r2,r5
    6ec4:	003fdd06 	br	6e3c <__alt_data_end+0xfffd6e3c>

00006ec8 <__d2b>:
    6ec8:	defff804 	addi	sp,sp,-32
    6ecc:	dc000215 	stw	r16,8(sp)
    6ed0:	3021883a 	mov	r16,r6
    6ed4:	dc400315 	stw	r17,12(sp)
    6ed8:	8022907a 	slli	r17,r16,1
    6edc:	dd000615 	stw	r20,24(sp)
    6ee0:	2829883a 	mov	r20,r5
    6ee4:	01400044 	movi	r5,1
    6ee8:	dcc00515 	stw	r19,20(sp)
    6eec:	dc800415 	stw	r18,16(sp)
    6ef0:	dfc00715 	stw	ra,28(sp)
    6ef4:	3825883a 	mov	r18,r7
    6ef8:	8822d57a 	srli	r17,r17,21
    6efc:	00061780 	call	6178 <_Balloc>
    6f00:	1027883a 	mov	r19,r2
    6f04:	00800434 	movhi	r2,16
    6f08:	10bfffc4 	addi	r2,r2,-1
    6f0c:	808c703a 	and	r6,r16,r2
    6f10:	88000126 	beq	r17,zero,6f18 <__d2b+0x50>
    6f14:	31800434 	orhi	r6,r6,16
    6f18:	d9800015 	stw	r6,0(sp)
    6f1c:	a0002426 	beq	r20,zero,6fb0 <__d2b+0xe8>
    6f20:	d9000104 	addi	r4,sp,4
    6f24:	dd000115 	stw	r20,4(sp)
    6f28:	00064fc0 	call	64fc <__lo0bits>
    6f2c:	d8c00017 	ldw	r3,0(sp)
    6f30:	10002f1e 	bne	r2,zero,6ff0 <__d2b+0x128>
    6f34:	d9000117 	ldw	r4,4(sp)
    6f38:	99000515 	stw	r4,20(r19)
    6f3c:	1821003a 	cmpeq	r16,r3,zero
    6f40:	01000084 	movi	r4,2
    6f44:	2421c83a 	sub	r16,r4,r16
    6f48:	98c00615 	stw	r3,24(r19)
    6f4c:	9c000415 	stw	r16,16(r19)
    6f50:	88001f1e 	bne	r17,zero,6fd0 <__d2b+0x108>
    6f54:	10bef384 	addi	r2,r2,-1074
    6f58:	90800015 	stw	r2,0(r18)
    6f5c:	00900034 	movhi	r2,16384
    6f60:	10bfffc4 	addi	r2,r2,-1
    6f64:	8085883a 	add	r2,r16,r2
    6f68:	1085883a 	add	r2,r2,r2
    6f6c:	1085883a 	add	r2,r2,r2
    6f70:	9885883a 	add	r2,r19,r2
    6f74:	11000517 	ldw	r4,20(r2)
    6f78:	8020917a 	slli	r16,r16,5
    6f7c:	00064940 	call	6494 <__hi0bits>
    6f80:	d8c00817 	ldw	r3,32(sp)
    6f84:	8085c83a 	sub	r2,r16,r2
    6f88:	18800015 	stw	r2,0(r3)
    6f8c:	9805883a 	mov	r2,r19
    6f90:	dfc00717 	ldw	ra,28(sp)
    6f94:	dd000617 	ldw	r20,24(sp)
    6f98:	dcc00517 	ldw	r19,20(sp)
    6f9c:	dc800417 	ldw	r18,16(sp)
    6fa0:	dc400317 	ldw	r17,12(sp)
    6fa4:	dc000217 	ldw	r16,8(sp)
    6fa8:	dec00804 	addi	sp,sp,32
    6fac:	f800283a 	ret
    6fb0:	d809883a 	mov	r4,sp
    6fb4:	00064fc0 	call	64fc <__lo0bits>
    6fb8:	d8c00017 	ldw	r3,0(sp)
    6fbc:	04000044 	movi	r16,1
    6fc0:	9c000415 	stw	r16,16(r19)
    6fc4:	98c00515 	stw	r3,20(r19)
    6fc8:	10800804 	addi	r2,r2,32
    6fcc:	883fe126 	beq	r17,zero,6f54 <__alt_data_end+0xfffd6f54>
    6fd0:	00c00d44 	movi	r3,53
    6fd4:	8c7ef344 	addi	r17,r17,-1075
    6fd8:	88a3883a 	add	r17,r17,r2
    6fdc:	1885c83a 	sub	r2,r3,r2
    6fe0:	d8c00817 	ldw	r3,32(sp)
    6fe4:	94400015 	stw	r17,0(r18)
    6fe8:	18800015 	stw	r2,0(r3)
    6fec:	003fe706 	br	6f8c <__alt_data_end+0xfffd6f8c>
    6ff0:	01000804 	movi	r4,32
    6ff4:	2089c83a 	sub	r4,r4,r2
    6ff8:	1908983a 	sll	r4,r3,r4
    6ffc:	d9400117 	ldw	r5,4(sp)
    7000:	1886d83a 	srl	r3,r3,r2
    7004:	2148b03a 	or	r4,r4,r5
    7008:	99000515 	stw	r4,20(r19)
    700c:	d8c00015 	stw	r3,0(sp)
    7010:	003fca06 	br	6f3c <__alt_data_end+0xfffd6f3c>

00007014 <__ratio>:
    7014:	defff904 	addi	sp,sp,-28
    7018:	dc400315 	stw	r17,12(sp)
    701c:	2823883a 	mov	r17,r5
    7020:	d9400104 	addi	r5,sp,4
    7024:	dfc00615 	stw	ra,24(sp)
    7028:	dcc00515 	stw	r19,20(sp)
    702c:	dc800415 	stw	r18,16(sp)
    7030:	2027883a 	mov	r19,r4
    7034:	dc000215 	stw	r16,8(sp)
    7038:	0006dbc0 	call	6dbc <__b2d>
    703c:	d80b883a 	mov	r5,sp
    7040:	8809883a 	mov	r4,r17
    7044:	1025883a 	mov	r18,r2
    7048:	1821883a 	mov	r16,r3
    704c:	0006dbc0 	call	6dbc <__b2d>
    7050:	8a000417 	ldw	r8,16(r17)
    7054:	99000417 	ldw	r4,16(r19)
    7058:	d9400117 	ldw	r5,4(sp)
    705c:	2209c83a 	sub	r4,r4,r8
    7060:	2010917a 	slli	r8,r4,5
    7064:	d9000017 	ldw	r4,0(sp)
    7068:	2909c83a 	sub	r4,r5,r4
    706c:	4109883a 	add	r4,r8,r4
    7070:	01000e0e 	bge	zero,r4,70ac <__ratio+0x98>
    7074:	2008953a 	slli	r4,r4,20
    7078:	2421883a 	add	r16,r4,r16
    707c:	100d883a 	mov	r6,r2
    7080:	180f883a 	mov	r7,r3
    7084:	9009883a 	mov	r4,r18
    7088:	800b883a 	mov	r5,r16
    708c:	000b6080 	call	b608 <__divdf3>
    7090:	dfc00617 	ldw	ra,24(sp)
    7094:	dcc00517 	ldw	r19,20(sp)
    7098:	dc800417 	ldw	r18,16(sp)
    709c:	dc400317 	ldw	r17,12(sp)
    70a0:	dc000217 	ldw	r16,8(sp)
    70a4:	dec00704 	addi	sp,sp,28
    70a8:	f800283a 	ret
    70ac:	2008953a 	slli	r4,r4,20
    70b0:	1907c83a 	sub	r3,r3,r4
    70b4:	003ff106 	br	707c <__alt_data_end+0xfffd707c>

000070b8 <_mprec_log10>:
    70b8:	defffe04 	addi	sp,sp,-8
    70bc:	dc000015 	stw	r16,0(sp)
    70c0:	dfc00115 	stw	ra,4(sp)
    70c4:	008005c4 	movi	r2,23
    70c8:	2021883a 	mov	r16,r4
    70cc:	11000d0e 	bge	r2,r4,7104 <_mprec_log10+0x4c>
    70d0:	0005883a 	mov	r2,zero
    70d4:	00cffc34 	movhi	r3,16368
    70d8:	843fffc4 	addi	r16,r16,-1
    70dc:	000d883a 	mov	r6,zero
    70e0:	01d00934 	movhi	r7,16420
    70e4:	1009883a 	mov	r4,r2
    70e8:	180b883a 	mov	r5,r3
    70ec:	000c2300 	call	c230 <__muldf3>
    70f0:	803ff91e 	bne	r16,zero,70d8 <__alt_data_end+0xfffd70d8>
    70f4:	dfc00117 	ldw	ra,4(sp)
    70f8:	dc000017 	ldw	r16,0(sp)
    70fc:	dec00204 	addi	sp,sp,8
    7100:	f800283a 	ret
    7104:	202090fa 	slli	r16,r4,3
    7108:	00800074 	movhi	r2,1
    710c:	109fd304 	addi	r2,r2,32588
    7110:	1421883a 	add	r16,r2,r16
    7114:	80800017 	ldw	r2,0(r16)
    7118:	80c00117 	ldw	r3,4(r16)
    711c:	dfc00117 	ldw	ra,4(sp)
    7120:	dc000017 	ldw	r16,0(sp)
    7124:	dec00204 	addi	sp,sp,8
    7128:	f800283a 	ret

0000712c <__copybits>:
    712c:	297fffc4 	addi	r5,r5,-1
    7130:	280fd17a 	srai	r7,r5,5
    7134:	30c00417 	ldw	r3,16(r6)
    7138:	30800504 	addi	r2,r6,20
    713c:	39c00044 	addi	r7,r7,1
    7140:	18c7883a 	add	r3,r3,r3
    7144:	39cf883a 	add	r7,r7,r7
    7148:	18c7883a 	add	r3,r3,r3
    714c:	39cf883a 	add	r7,r7,r7
    7150:	10c7883a 	add	r3,r2,r3
    7154:	21cf883a 	add	r7,r4,r7
    7158:	10c00d2e 	bgeu	r2,r3,7190 <__copybits+0x64>
    715c:	200b883a 	mov	r5,r4
    7160:	12000017 	ldw	r8,0(r2)
    7164:	29400104 	addi	r5,r5,4
    7168:	10800104 	addi	r2,r2,4
    716c:	2a3fff15 	stw	r8,-4(r5)
    7170:	10fffb36 	bltu	r2,r3,7160 <__alt_data_end+0xfffd7160>
    7174:	1985c83a 	sub	r2,r3,r6
    7178:	10bffac4 	addi	r2,r2,-21
    717c:	1004d0ba 	srli	r2,r2,2
    7180:	10800044 	addi	r2,r2,1
    7184:	1085883a 	add	r2,r2,r2
    7188:	1085883a 	add	r2,r2,r2
    718c:	2089883a 	add	r4,r4,r2
    7190:	21c0032e 	bgeu	r4,r7,71a0 <__copybits+0x74>
    7194:	20000015 	stw	zero,0(r4)
    7198:	21000104 	addi	r4,r4,4
    719c:	21fffd36 	bltu	r4,r7,7194 <__alt_data_end+0xfffd7194>
    71a0:	f800283a 	ret

000071a4 <__any_on>:
    71a4:	20c00417 	ldw	r3,16(r4)
    71a8:	2805d17a 	srai	r2,r5,5
    71ac:	21000504 	addi	r4,r4,20
    71b0:	18800d0e 	bge	r3,r2,71e8 <__any_on+0x44>
    71b4:	18c7883a 	add	r3,r3,r3
    71b8:	18c7883a 	add	r3,r3,r3
    71bc:	20c7883a 	add	r3,r4,r3
    71c0:	20c0192e 	bgeu	r4,r3,7228 <__any_on+0x84>
    71c4:	18bfff17 	ldw	r2,-4(r3)
    71c8:	18ffff04 	addi	r3,r3,-4
    71cc:	1000041e 	bne	r2,zero,71e0 <__any_on+0x3c>
    71d0:	20c0142e 	bgeu	r4,r3,7224 <__any_on+0x80>
    71d4:	18ffff04 	addi	r3,r3,-4
    71d8:	19400017 	ldw	r5,0(r3)
    71dc:	283ffc26 	beq	r5,zero,71d0 <__alt_data_end+0xfffd71d0>
    71e0:	00800044 	movi	r2,1
    71e4:	f800283a 	ret
    71e8:	10c00a0e 	bge	r2,r3,7214 <__any_on+0x70>
    71ec:	1085883a 	add	r2,r2,r2
    71f0:	1085883a 	add	r2,r2,r2
    71f4:	294007cc 	andi	r5,r5,31
    71f8:	2087883a 	add	r3,r4,r2
    71fc:	283ff026 	beq	r5,zero,71c0 <__alt_data_end+0xfffd71c0>
    7200:	19800017 	ldw	r6,0(r3)
    7204:	3144d83a 	srl	r2,r6,r5
    7208:	114a983a 	sll	r5,r2,r5
    720c:	317ff41e 	bne	r6,r5,71e0 <__alt_data_end+0xfffd71e0>
    7210:	003feb06 	br	71c0 <__alt_data_end+0xfffd71c0>
    7214:	1085883a 	add	r2,r2,r2
    7218:	1085883a 	add	r2,r2,r2
    721c:	2087883a 	add	r3,r4,r2
    7220:	003fe706 	br	71c0 <__alt_data_end+0xfffd71c0>
    7224:	f800283a 	ret
    7228:	0005883a 	mov	r2,zero
    722c:	f800283a 	ret

00007230 <__fpclassifyd>:
    7230:	00a00034 	movhi	r2,32768
    7234:	10bfffc4 	addi	r2,r2,-1
    7238:	2884703a 	and	r2,r5,r2
    723c:	10000726 	beq	r2,zero,725c <__fpclassifyd+0x2c>
    7240:	00fffc34 	movhi	r3,65520
    7244:	019ff834 	movhi	r6,32736
    7248:	28c7883a 	add	r3,r5,r3
    724c:	31bfffc4 	addi	r6,r6,-1
    7250:	30c00536 	bltu	r6,r3,7268 <__fpclassifyd+0x38>
    7254:	00800104 	movi	r2,4
    7258:	f800283a 	ret
    725c:	2000021e 	bne	r4,zero,7268 <__fpclassifyd+0x38>
    7260:	00800084 	movi	r2,2
    7264:	f800283a 	ret
    7268:	00dffc34 	movhi	r3,32752
    726c:	019ff834 	movhi	r6,32736
    7270:	28cb883a 	add	r5,r5,r3
    7274:	31bfffc4 	addi	r6,r6,-1
    7278:	317ff62e 	bgeu	r6,r5,7254 <__alt_data_end+0xfffd7254>
    727c:	01400434 	movhi	r5,16
    7280:	297fffc4 	addi	r5,r5,-1
    7284:	28800236 	bltu	r5,r2,7290 <__fpclassifyd+0x60>
    7288:	008000c4 	movi	r2,3
    728c:	f800283a 	ret
    7290:	10c00226 	beq	r2,r3,729c <__fpclassifyd+0x6c>
    7294:	0005883a 	mov	r2,zero
    7298:	f800283a 	ret
    729c:	2005003a 	cmpeq	r2,r4,zero
    72a0:	f800283a 	ret

000072a4 <_sbrk_r>:
    72a4:	defffd04 	addi	sp,sp,-12
    72a8:	dc000015 	stw	r16,0(sp)
    72ac:	040000b4 	movhi	r16,2
    72b0:	dc400115 	stw	r17,4(sp)
    72b4:	842e6404 	addi	r16,r16,-18032
    72b8:	2023883a 	mov	r17,r4
    72bc:	2809883a 	mov	r4,r5
    72c0:	dfc00215 	stw	ra,8(sp)
    72c4:	80000015 	stw	zero,0(r16)
    72c8:	000e0400 	call	e040 <sbrk>
    72cc:	00ffffc4 	movi	r3,-1
    72d0:	10c00526 	beq	r2,r3,72e8 <_sbrk_r+0x44>
    72d4:	dfc00217 	ldw	ra,8(sp)
    72d8:	dc400117 	ldw	r17,4(sp)
    72dc:	dc000017 	ldw	r16,0(sp)
    72e0:	dec00304 	addi	sp,sp,12
    72e4:	f800283a 	ret
    72e8:	80c00017 	ldw	r3,0(r16)
    72ec:	183ff926 	beq	r3,zero,72d4 <__alt_data_end+0xfffd72d4>
    72f0:	88c00015 	stw	r3,0(r17)
    72f4:	003ff706 	br	72d4 <__alt_data_end+0xfffd72d4>

000072f8 <__sread>:
    72f8:	defffe04 	addi	sp,sp,-8
    72fc:	dc000015 	stw	r16,0(sp)
    7300:	2821883a 	mov	r16,r5
    7304:	2940038f 	ldh	r5,14(r5)
    7308:	dfc00115 	stw	ra,4(sp)
    730c:	00098700 	call	9870 <_read_r>
    7310:	10000716 	blt	r2,zero,7330 <__sread+0x38>
    7314:	80c01417 	ldw	r3,80(r16)
    7318:	1887883a 	add	r3,r3,r2
    731c:	80c01415 	stw	r3,80(r16)
    7320:	dfc00117 	ldw	ra,4(sp)
    7324:	dc000017 	ldw	r16,0(sp)
    7328:	dec00204 	addi	sp,sp,8
    732c:	f800283a 	ret
    7330:	80c0030b 	ldhu	r3,12(r16)
    7334:	18fbffcc 	andi	r3,r3,61439
    7338:	80c0030d 	sth	r3,12(r16)
    733c:	dfc00117 	ldw	ra,4(sp)
    7340:	dc000017 	ldw	r16,0(sp)
    7344:	dec00204 	addi	sp,sp,8
    7348:	f800283a 	ret

0000734c <__seofread>:
    734c:	0005883a 	mov	r2,zero
    7350:	f800283a 	ret

00007354 <__swrite>:
    7354:	2880030b 	ldhu	r2,12(r5)
    7358:	defffb04 	addi	sp,sp,-20
    735c:	dcc00315 	stw	r19,12(sp)
    7360:	dc800215 	stw	r18,8(sp)
    7364:	dc400115 	stw	r17,4(sp)
    7368:	dc000015 	stw	r16,0(sp)
    736c:	dfc00415 	stw	ra,16(sp)
    7370:	10c0400c 	andi	r3,r2,256
    7374:	2821883a 	mov	r16,r5
    7378:	2023883a 	mov	r17,r4
    737c:	3025883a 	mov	r18,r6
    7380:	3827883a 	mov	r19,r7
    7384:	18000526 	beq	r3,zero,739c <__swrite+0x48>
    7388:	2940038f 	ldh	r5,14(r5)
    738c:	01c00084 	movi	r7,2
    7390:	000d883a 	mov	r6,zero
    7394:	00096b40 	call	96b4 <_lseek_r>
    7398:	8080030b 	ldhu	r2,12(r16)
    739c:	8140038f 	ldh	r5,14(r16)
    73a0:	10bbffcc 	andi	r2,r2,61439
    73a4:	980f883a 	mov	r7,r19
    73a8:	900d883a 	mov	r6,r18
    73ac:	8809883a 	mov	r4,r17
    73b0:	8080030d 	sth	r2,12(r16)
    73b4:	dfc00417 	ldw	ra,16(sp)
    73b8:	dcc00317 	ldw	r19,12(sp)
    73bc:	dc800217 	ldw	r18,8(sp)
    73c0:	dc400117 	ldw	r17,4(sp)
    73c4:	dc000017 	ldw	r16,0(sp)
    73c8:	dec00504 	addi	sp,sp,20
    73cc:	0008ca01 	jmpi	8ca0 <_write_r>

000073d0 <__sseek>:
    73d0:	defffe04 	addi	sp,sp,-8
    73d4:	dc000015 	stw	r16,0(sp)
    73d8:	2821883a 	mov	r16,r5
    73dc:	2940038f 	ldh	r5,14(r5)
    73e0:	dfc00115 	stw	ra,4(sp)
    73e4:	00096b40 	call	96b4 <_lseek_r>
    73e8:	00ffffc4 	movi	r3,-1
    73ec:	10c00826 	beq	r2,r3,7410 <__sseek+0x40>
    73f0:	80c0030b 	ldhu	r3,12(r16)
    73f4:	80801415 	stw	r2,80(r16)
    73f8:	18c40014 	ori	r3,r3,4096
    73fc:	80c0030d 	sth	r3,12(r16)
    7400:	dfc00117 	ldw	ra,4(sp)
    7404:	dc000017 	ldw	r16,0(sp)
    7408:	dec00204 	addi	sp,sp,8
    740c:	f800283a 	ret
    7410:	80c0030b 	ldhu	r3,12(r16)
    7414:	18fbffcc 	andi	r3,r3,61439
    7418:	80c0030d 	sth	r3,12(r16)
    741c:	dfc00117 	ldw	ra,4(sp)
    7420:	dc000017 	ldw	r16,0(sp)
    7424:	dec00204 	addi	sp,sp,8
    7428:	f800283a 	ret

0000742c <__sclose>:
    742c:	2940038f 	ldh	r5,14(r5)
    7430:	0008d001 	jmpi	8d00 <_close_r>

00007434 <strcmp>:
    7434:	2144b03a 	or	r2,r4,r5
    7438:	108000cc 	andi	r2,r2,3
    743c:	1000171e 	bne	r2,zero,749c <strcmp+0x68>
    7440:	20800017 	ldw	r2,0(r4)
    7444:	28c00017 	ldw	r3,0(r5)
    7448:	10c0141e 	bne	r2,r3,749c <strcmp+0x68>
    744c:	027fbff4 	movhi	r9,65279
    7450:	4a7fbfc4 	addi	r9,r9,-257
    7454:	0086303a 	nor	r3,zero,r2
    7458:	02202074 	movhi	r8,32897
    745c:	1245883a 	add	r2,r2,r9
    7460:	42202004 	addi	r8,r8,-32640
    7464:	10c4703a 	and	r2,r2,r3
    7468:	1204703a 	and	r2,r2,r8
    746c:	10000226 	beq	r2,zero,7478 <strcmp+0x44>
    7470:	00002306 	br	7500 <strcmp+0xcc>
    7474:	1000221e 	bne	r2,zero,7500 <strcmp+0xcc>
    7478:	21000104 	addi	r4,r4,4
    747c:	20c00017 	ldw	r3,0(r4)
    7480:	29400104 	addi	r5,r5,4
    7484:	29800017 	ldw	r6,0(r5)
    7488:	1a4f883a 	add	r7,r3,r9
    748c:	00c4303a 	nor	r2,zero,r3
    7490:	3884703a 	and	r2,r7,r2
    7494:	1204703a 	and	r2,r2,r8
    7498:	19bff626 	beq	r3,r6,7474 <__alt_data_end+0xfffd7474>
    749c:	20800003 	ldbu	r2,0(r4)
    74a0:	10c03fcc 	andi	r3,r2,255
    74a4:	18c0201c 	xori	r3,r3,128
    74a8:	18ffe004 	addi	r3,r3,-128
    74ac:	18000c26 	beq	r3,zero,74e0 <strcmp+0xac>
    74b0:	29800007 	ldb	r6,0(r5)
    74b4:	19800326 	beq	r3,r6,74c4 <strcmp+0x90>
    74b8:	00001306 	br	7508 <strcmp+0xd4>
    74bc:	29800007 	ldb	r6,0(r5)
    74c0:	11800b1e 	bne	r2,r6,74f0 <strcmp+0xbc>
    74c4:	21000044 	addi	r4,r4,1
    74c8:	20c00003 	ldbu	r3,0(r4)
    74cc:	29400044 	addi	r5,r5,1
    74d0:	18803fcc 	andi	r2,r3,255
    74d4:	1080201c 	xori	r2,r2,128
    74d8:	10bfe004 	addi	r2,r2,-128
    74dc:	103ff71e 	bne	r2,zero,74bc <__alt_data_end+0xfffd74bc>
    74e0:	0007883a 	mov	r3,zero
    74e4:	28800003 	ldbu	r2,0(r5)
    74e8:	1885c83a 	sub	r2,r3,r2
    74ec:	f800283a 	ret
    74f0:	28800003 	ldbu	r2,0(r5)
    74f4:	18c03fcc 	andi	r3,r3,255
    74f8:	1885c83a 	sub	r2,r3,r2
    74fc:	f800283a 	ret
    7500:	0005883a 	mov	r2,zero
    7504:	f800283a 	ret
    7508:	10c03fcc 	andi	r3,r2,255
    750c:	003ff506 	br	74e4 <__alt_data_end+0xfffd74e4>

00007510 <strlen>:
    7510:	208000cc 	andi	r2,r4,3
    7514:	10002026 	beq	r2,zero,7598 <strlen+0x88>
    7518:	20800007 	ldb	r2,0(r4)
    751c:	10002026 	beq	r2,zero,75a0 <strlen+0x90>
    7520:	2005883a 	mov	r2,r4
    7524:	00000206 	br	7530 <strlen+0x20>
    7528:	10c00007 	ldb	r3,0(r2)
    752c:	18001826 	beq	r3,zero,7590 <strlen+0x80>
    7530:	10800044 	addi	r2,r2,1
    7534:	10c000cc 	andi	r3,r2,3
    7538:	183ffb1e 	bne	r3,zero,7528 <__alt_data_end+0xfffd7528>
    753c:	10c00017 	ldw	r3,0(r2)
    7540:	01ffbff4 	movhi	r7,65279
    7544:	39ffbfc4 	addi	r7,r7,-257
    7548:	00ca303a 	nor	r5,zero,r3
    754c:	01a02074 	movhi	r6,32897
    7550:	19c7883a 	add	r3,r3,r7
    7554:	31a02004 	addi	r6,r6,-32640
    7558:	1946703a 	and	r3,r3,r5
    755c:	1986703a 	and	r3,r3,r6
    7560:	1800091e 	bne	r3,zero,7588 <strlen+0x78>
    7564:	10800104 	addi	r2,r2,4
    7568:	10c00017 	ldw	r3,0(r2)
    756c:	19cb883a 	add	r5,r3,r7
    7570:	00c6303a 	nor	r3,zero,r3
    7574:	28c6703a 	and	r3,r5,r3
    7578:	1986703a 	and	r3,r3,r6
    757c:	183ff926 	beq	r3,zero,7564 <__alt_data_end+0xfffd7564>
    7580:	00000106 	br	7588 <strlen+0x78>
    7584:	10800044 	addi	r2,r2,1
    7588:	10c00007 	ldb	r3,0(r2)
    758c:	183ffd1e 	bne	r3,zero,7584 <__alt_data_end+0xfffd7584>
    7590:	1105c83a 	sub	r2,r2,r4
    7594:	f800283a 	ret
    7598:	2005883a 	mov	r2,r4
    759c:	003fe706 	br	753c <__alt_data_end+0xfffd753c>
    75a0:	0005883a 	mov	r2,zero
    75a4:	f800283a 	ret

000075a8 <__sprint_r.part.0>:
    75a8:	28801917 	ldw	r2,100(r5)
    75ac:	defff604 	addi	sp,sp,-40
    75b0:	dd400515 	stw	r21,20(sp)
    75b4:	dfc00915 	stw	ra,36(sp)
    75b8:	df000815 	stw	fp,32(sp)
    75bc:	ddc00715 	stw	r23,28(sp)
    75c0:	dd800615 	stw	r22,24(sp)
    75c4:	dd000415 	stw	r20,16(sp)
    75c8:	dcc00315 	stw	r19,12(sp)
    75cc:	dc800215 	stw	r18,8(sp)
    75d0:	dc400115 	stw	r17,4(sp)
    75d4:	dc000015 	stw	r16,0(sp)
    75d8:	1088000c 	andi	r2,r2,8192
    75dc:	302b883a 	mov	r21,r6
    75e0:	10002e26 	beq	r2,zero,769c <__sprint_r.part.0+0xf4>
    75e4:	30800217 	ldw	r2,8(r6)
    75e8:	35800017 	ldw	r22,0(r6)
    75ec:	10002926 	beq	r2,zero,7694 <__sprint_r.part.0+0xec>
    75f0:	2827883a 	mov	r19,r5
    75f4:	2029883a 	mov	r20,r4
    75f8:	b5c00104 	addi	r23,r22,4
    75fc:	04bfffc4 	movi	r18,-1
    7600:	bc400017 	ldw	r17,0(r23)
    7604:	b4000017 	ldw	r16,0(r22)
    7608:	0039883a 	mov	fp,zero
    760c:	8822d0ba 	srli	r17,r17,2
    7610:	8800031e 	bne	r17,zero,7620 <__sprint_r.part.0+0x78>
    7614:	00001806 	br	7678 <__sprint_r.part.0+0xd0>
    7618:	84000104 	addi	r16,r16,4
    761c:	8f001526 	beq	r17,fp,7674 <__sprint_r.part.0+0xcc>
    7620:	81400017 	ldw	r5,0(r16)
    7624:	980d883a 	mov	r6,r19
    7628:	a009883a 	mov	r4,r20
    762c:	00090980 	call	9098 <_fputwc_r>
    7630:	e7000044 	addi	fp,fp,1
    7634:	14bff81e 	bne	r2,r18,7618 <__alt_data_end+0xfffd7618>
    7638:	9005883a 	mov	r2,r18
    763c:	a8000215 	stw	zero,8(r21)
    7640:	a8000115 	stw	zero,4(r21)
    7644:	dfc00917 	ldw	ra,36(sp)
    7648:	df000817 	ldw	fp,32(sp)
    764c:	ddc00717 	ldw	r23,28(sp)
    7650:	dd800617 	ldw	r22,24(sp)
    7654:	dd400517 	ldw	r21,20(sp)
    7658:	dd000417 	ldw	r20,16(sp)
    765c:	dcc00317 	ldw	r19,12(sp)
    7660:	dc800217 	ldw	r18,8(sp)
    7664:	dc400117 	ldw	r17,4(sp)
    7668:	dc000017 	ldw	r16,0(sp)
    766c:	dec00a04 	addi	sp,sp,40
    7670:	f800283a 	ret
    7674:	a8800217 	ldw	r2,8(r21)
    7678:	8c63883a 	add	r17,r17,r17
    767c:	8c63883a 	add	r17,r17,r17
    7680:	1445c83a 	sub	r2,r2,r17
    7684:	a8800215 	stw	r2,8(r21)
    7688:	b5800204 	addi	r22,r22,8
    768c:	bdc00204 	addi	r23,r23,8
    7690:	103fdb1e 	bne	r2,zero,7600 <__alt_data_end+0xfffd7600>
    7694:	0005883a 	mov	r2,zero
    7698:	003fe806 	br	763c <__alt_data_end+0xfffd763c>
    769c:	00091980 	call	9198 <__sfvwrite_r>
    76a0:	003fe606 	br	763c <__alt_data_end+0xfffd763c>

000076a4 <__sprint_r>:
    76a4:	30c00217 	ldw	r3,8(r6)
    76a8:	18000126 	beq	r3,zero,76b0 <__sprint_r+0xc>
    76ac:	00075a81 	jmpi	75a8 <__sprint_r.part.0>
    76b0:	30000115 	stw	zero,4(r6)
    76b4:	0005883a 	mov	r2,zero
    76b8:	f800283a 	ret

000076bc <___vfiprintf_internal_r>:
    76bc:	deffca04 	addi	sp,sp,-216
    76c0:	dd403115 	stw	r21,196(sp)
    76c4:	dfc03515 	stw	ra,212(sp)
    76c8:	df003415 	stw	fp,208(sp)
    76cc:	ddc03315 	stw	r23,204(sp)
    76d0:	dd803215 	stw	r22,200(sp)
    76d4:	dd003015 	stw	r20,192(sp)
    76d8:	dcc02f15 	stw	r19,188(sp)
    76dc:	dc802e15 	stw	r18,184(sp)
    76e0:	dc402d15 	stw	r17,180(sp)
    76e4:	dc002c15 	stw	r16,176(sp)
    76e8:	d9002115 	stw	r4,132(sp)
    76ec:	d9402015 	stw	r5,128(sp)
    76f0:	d9c02215 	stw	r7,136(sp)
    76f4:	302b883a 	mov	r21,r6
    76f8:	20000226 	beq	r4,zero,7704 <___vfiprintf_internal_r+0x48>
    76fc:	20800e17 	ldw	r2,56(r4)
    7700:	1000cf26 	beq	r2,zero,7a40 <___vfiprintf_internal_r+0x384>
    7704:	d8c02017 	ldw	r3,128(sp)
    7708:	1880030b 	ldhu	r2,12(r3)
    770c:	10c8000c 	andi	r3,r2,8192
    7710:	1800071e 	bne	r3,zero,7730 <___vfiprintf_internal_r+0x74>
    7714:	d9402017 	ldw	r5,128(sp)
    7718:	00f7ffc4 	movi	r3,-8193
    771c:	10880014 	ori	r2,r2,8192
    7720:	29001917 	ldw	r4,100(r5)
    7724:	2880030d 	sth	r2,12(r5)
    7728:	20c6703a 	and	r3,r4,r3
    772c:	28c01915 	stw	r3,100(r5)
    7730:	10c0020c 	andi	r3,r2,8
    7734:	1800a526 	beq	r3,zero,79cc <___vfiprintf_internal_r+0x310>
    7738:	d9002017 	ldw	r4,128(sp)
    773c:	20c00417 	ldw	r3,16(r4)
    7740:	1800a226 	beq	r3,zero,79cc <___vfiprintf_internal_r+0x310>
    7744:	1080068c 	andi	r2,r2,26
    7748:	00c00284 	movi	r3,10
    774c:	10c0a826 	beq	r2,r3,79f0 <___vfiprintf_internal_r+0x334>
    7750:	d9001a04 	addi	r4,sp,104
    7754:	d94019c4 	addi	r5,sp,103
    7758:	048000b4 	movhi	r18,2
    775c:	2145c83a 	sub	r2,r4,r5
    7760:	94a00504 	addi	r18,r18,-32748
    7764:	d9001e15 	stw	r4,120(sp)
    7768:	d9401f15 	stw	r5,124(sp)
    776c:	dec01a15 	stw	sp,104(sp)
    7770:	d8001c15 	stw	zero,112(sp)
    7774:	d8001b15 	stw	zero,108(sp)
    7778:	d811883a 	mov	r8,sp
    777c:	d8002615 	stw	zero,152(sp)
    7780:	d8002415 	stw	zero,144(sp)
    7784:	d8802815 	stw	r2,160(sp)
    7788:	a82d883a 	mov	r22,r21
    778c:	b0800007 	ldb	r2,0(r22)
    7790:	10040d26 	beq	r2,zero,87c8 <___vfiprintf_internal_r+0x110c>
    7794:	00c00944 	movi	r3,37
    7798:	b029883a 	mov	r20,r22
    779c:	10c0021e 	bne	r2,r3,77a8 <___vfiprintf_internal_r+0xec>
    77a0:	00001606 	br	77fc <___vfiprintf_internal_r+0x140>
    77a4:	10c00326 	beq	r2,r3,77b4 <___vfiprintf_internal_r+0xf8>
    77a8:	a5000044 	addi	r20,r20,1
    77ac:	a0800007 	ldb	r2,0(r20)
    77b0:	103ffc1e 	bne	r2,zero,77a4 <__alt_data_end+0xfffd77a4>
    77b4:	a5a1c83a 	sub	r16,r20,r22
    77b8:	80001026 	beq	r16,zero,77fc <___vfiprintf_internal_r+0x140>
    77bc:	d8c01c17 	ldw	r3,112(sp)
    77c0:	d8801b17 	ldw	r2,108(sp)
    77c4:	45800015 	stw	r22,0(r8)
    77c8:	80c7883a 	add	r3,r16,r3
    77cc:	10800044 	addi	r2,r2,1
    77d0:	44000115 	stw	r16,4(r8)
    77d4:	d8c01c15 	stw	r3,112(sp)
    77d8:	d8801b15 	stw	r2,108(sp)
    77dc:	010001c4 	movi	r4,7
    77e0:	2080750e 	bge	r4,r2,79b8 <___vfiprintf_internal_r+0x2fc>
    77e4:	1803951e 	bne	r3,zero,863c <___vfiprintf_internal_r+0xf80>
    77e8:	d8c02417 	ldw	r3,144(sp)
    77ec:	d8001b15 	stw	zero,108(sp)
    77f0:	d811883a 	mov	r8,sp
    77f4:	1c07883a 	add	r3,r3,r16
    77f8:	d8c02415 	stw	r3,144(sp)
    77fc:	a0800007 	ldb	r2,0(r20)
    7800:	1002e026 	beq	r2,zero,8384 <___vfiprintf_internal_r+0xcc8>
    7804:	a5800044 	addi	r22,r20,1
    7808:	a0c00047 	ldb	r3,1(r20)
    780c:	d8001d85 	stb	zero,118(sp)
    7810:	0027883a 	mov	r19,zero
    7814:	d8002305 	stb	zero,140(sp)
    7818:	043fffc4 	movi	r16,-1
    781c:	d8002515 	stw	zero,148(sp)
    7820:	0023883a 	mov	r17,zero
    7824:	05001604 	movi	r20,88
    7828:	05400244 	movi	r21,9
    782c:	402f883a 	mov	r23,r8
    7830:	b5800044 	addi	r22,r22,1
    7834:	18bff804 	addi	r2,r3,-32
    7838:	a0827736 	bltu	r20,r2,8218 <___vfiprintf_internal_r+0xb5c>
    783c:	100490ba 	slli	r2,r2,2
    7840:	01000034 	movhi	r4,0
    7844:	211e1504 	addi	r4,r4,30804
    7848:	1105883a 	add	r2,r2,r4
    784c:	10800017 	ldw	r2,0(r2)
    7850:	1000683a 	jmp	r2
    7854:	00007f18 	cmpnei	zero,zero,508
    7858:	00008218 	cmpnei	zero,zero,520
    785c:	00008218 	cmpnei	zero,zero,520
    7860:	00007f34 	movhi	zero,508
    7864:	00008218 	cmpnei	zero,zero,520
    7868:	00008218 	cmpnei	zero,zero,520
    786c:	00008218 	cmpnei	zero,zero,520
    7870:	00008218 	cmpnei	zero,zero,520
    7874:	00008218 	cmpnei	zero,zero,520
    7878:	00008218 	cmpnei	zero,zero,520
    787c:	0000813c 	xorhi	zero,zero,516
    7880:	00008160 	cmpeqi	zero,zero,517
    7884:	00008218 	cmpnei	zero,zero,520
    7888:	00007a58 	cmpnei	zero,zero,489
    788c:	00008174 	movhi	zero,517
    7890:	00008218 	cmpnei	zero,zero,520
    7894:	00007f40 	call	7f4 <__divsi3+0x60>
    7898:	00007f4c 	andi	zero,zero,509
    789c:	00007f4c 	andi	zero,zero,509
    78a0:	00007f4c 	andi	zero,zero,509
    78a4:	00007f4c 	andi	zero,zero,509
    78a8:	00007f4c 	andi	zero,zero,509
    78ac:	00007f4c 	andi	zero,zero,509
    78b0:	00007f4c 	andi	zero,zero,509
    78b4:	00007f4c 	andi	zero,zero,509
    78b8:	00007f4c 	andi	zero,zero,509
    78bc:	00008218 	cmpnei	zero,zero,520
    78c0:	00008218 	cmpnei	zero,zero,520
    78c4:	00008218 	cmpnei	zero,zero,520
    78c8:	00008218 	cmpnei	zero,zero,520
    78cc:	00008218 	cmpnei	zero,zero,520
    78d0:	00008218 	cmpnei	zero,zero,520
    78d4:	00008218 	cmpnei	zero,zero,520
    78d8:	00008218 	cmpnei	zero,zero,520
    78dc:	00008218 	cmpnei	zero,zero,520
    78e0:	00008218 	cmpnei	zero,zero,520
    78e4:	00007f8c 	andi	zero,zero,510
    78e8:	00008218 	cmpnei	zero,zero,520
    78ec:	00008218 	cmpnei	zero,zero,520
    78f0:	00008218 	cmpnei	zero,zero,520
    78f4:	00008218 	cmpnei	zero,zero,520
    78f8:	00008218 	cmpnei	zero,zero,520
    78fc:	00008218 	cmpnei	zero,zero,520
    7900:	00008218 	cmpnei	zero,zero,520
    7904:	00008218 	cmpnei	zero,zero,520
    7908:	00008218 	cmpnei	zero,zero,520
    790c:	00008218 	cmpnei	zero,zero,520
    7910:	00007fc8 	cmpgei	zero,zero,511
    7914:	00008218 	cmpnei	zero,zero,520
    7918:	00008218 	cmpnei	zero,zero,520
    791c:	00008218 	cmpnei	zero,zero,520
    7920:	00008218 	cmpnei	zero,zero,520
    7924:	00008218 	cmpnei	zero,zero,520
    7928:	00008024 	muli	zero,zero,512
    792c:	00008218 	cmpnei	zero,zero,520
    7930:	00008218 	cmpnei	zero,zero,520
    7934:	00008098 	cmpnei	zero,zero,514
    7938:	00008218 	cmpnei	zero,zero,520
    793c:	00008218 	cmpnei	zero,zero,520
    7940:	00008218 	cmpnei	zero,zero,520
    7944:	00008218 	cmpnei	zero,zero,520
    7948:	00008218 	cmpnei	zero,zero,520
    794c:	00008218 	cmpnei	zero,zero,520
    7950:	00008218 	cmpnei	zero,zero,520
    7954:	00008218 	cmpnei	zero,zero,520
    7958:	00008218 	cmpnei	zero,zero,520
    795c:	00008218 	cmpnei	zero,zero,520
    7960:	00007e40 	call	7e4 <__divsi3+0x50>
    7964:	00007e70 	cmpltui	zero,zero,505
    7968:	00008218 	cmpnei	zero,zero,520
    796c:	00008218 	cmpnei	zero,zero,520
    7970:	00008218 	cmpnei	zero,zero,520
    7974:	000081c0 	call	81c <__modsi3+0x4>
    7978:	00007e70 	cmpltui	zero,zero,505
    797c:	00008218 	cmpnei	zero,zero,520
    7980:	00008218 	cmpnei	zero,zero,520
    7984:	00007d18 	cmpnei	zero,zero,500
    7988:	00008218 	cmpnei	zero,zero,520
    798c:	00007d2c 	andhi	zero,zero,500
    7990:	00007d64 	muli	zero,zero,501
    7994:	00007a64 	muli	zero,zero,489
    7998:	00007d0c 	andi	zero,zero,500
    799c:	00008218 	cmpnei	zero,zero,520
    79a0:	000080d8 	cmpnei	zero,zero,515
    79a4:	00008218 	cmpnei	zero,zero,520
    79a8:	00008124 	muli	zero,zero,516
    79ac:	00008218 	cmpnei	zero,zero,520
    79b0:	00008218 	cmpnei	zero,zero,520
    79b4:	00007de8 	cmpgeui	zero,zero,503
    79b8:	42000204 	addi	r8,r8,8
    79bc:	d8c02417 	ldw	r3,144(sp)
    79c0:	1c07883a 	add	r3,r3,r16
    79c4:	d8c02415 	stw	r3,144(sp)
    79c8:	003f8c06 	br	77fc <__alt_data_end+0xfffd77fc>
    79cc:	d9402017 	ldw	r5,128(sp)
    79d0:	d9002117 	ldw	r4,132(sp)
    79d4:	0002d680 	call	2d68 <__swsetup_r>
    79d8:	1003c11e 	bne	r2,zero,88e0 <___vfiprintf_internal_r+0x1224>
    79dc:	d9402017 	ldw	r5,128(sp)
    79e0:	00c00284 	movi	r3,10
    79e4:	2880030b 	ldhu	r2,12(r5)
    79e8:	1080068c 	andi	r2,r2,26
    79ec:	10ff581e 	bne	r2,r3,7750 <__alt_data_end+0xfffd7750>
    79f0:	d8c02017 	ldw	r3,128(sp)
    79f4:	1880038f 	ldh	r2,14(r3)
    79f8:	103f5516 	blt	r2,zero,7750 <__alt_data_end+0xfffd7750>
    79fc:	d9c02217 	ldw	r7,136(sp)
    7a00:	d9002117 	ldw	r4,132(sp)
    7a04:	a80d883a 	mov	r6,r21
    7a08:	180b883a 	mov	r5,r3
    7a0c:	0008be40 	call	8be4 <__sbprintf>
    7a10:	dfc03517 	ldw	ra,212(sp)
    7a14:	df003417 	ldw	fp,208(sp)
    7a18:	ddc03317 	ldw	r23,204(sp)
    7a1c:	dd803217 	ldw	r22,200(sp)
    7a20:	dd403117 	ldw	r21,196(sp)
    7a24:	dd003017 	ldw	r20,192(sp)
    7a28:	dcc02f17 	ldw	r19,188(sp)
    7a2c:	dc802e17 	ldw	r18,184(sp)
    7a30:	dc402d17 	ldw	r17,180(sp)
    7a34:	dc002c17 	ldw	r16,176(sp)
    7a38:	dec03604 	addi	sp,sp,216
    7a3c:	f800283a 	ret
    7a40:	0004d740 	call	4d74 <__sinit>
    7a44:	003f2f06 	br	7704 <__alt_data_end+0xfffd7704>
    7a48:	d8c02517 	ldw	r3,148(sp)
    7a4c:	d8802215 	stw	r2,136(sp)
    7a50:	00c7c83a 	sub	r3,zero,r3
    7a54:	d8c02515 	stw	r3,148(sp)
    7a58:	8c400114 	ori	r17,r17,4
    7a5c:	b0c00007 	ldb	r3,0(r22)
    7a60:	003f7306 	br	7830 <__alt_data_end+0xfffd7830>
    7a64:	00800c04 	movi	r2,48
    7a68:	d9402217 	ldw	r5,136(sp)
    7a6c:	d8801d05 	stb	r2,116(sp)
    7a70:	00801e04 	movi	r2,120
    7a74:	d8801d45 	stb	r2,117(sp)
    7a78:	d8001d85 	stb	zero,118(sp)
    7a7c:	b811883a 	mov	r8,r23
    7a80:	28c00104 	addi	r3,r5,4
    7a84:	2cc00017 	ldw	r19,0(r5)
    7a88:	0029883a 	mov	r20,zero
    7a8c:	88800094 	ori	r2,r17,2
    7a90:	80032516 	blt	r16,zero,8728 <___vfiprintf_internal_r+0x106c>
    7a94:	00bfdfc4 	movi	r2,-129
    7a98:	88a2703a 	and	r17,r17,r2
    7a9c:	d8c02215 	stw	r3,136(sp)
    7aa0:	8c400094 	ori	r17,r17,2
    7aa4:	98032a1e 	bne	r19,zero,8750 <___vfiprintf_internal_r+0x1094>
    7aa8:	00800074 	movhi	r2,1
    7aac:	109fa404 	addi	r2,r2,32400
    7ab0:	d8802615 	stw	r2,152(sp)
    7ab4:	002b883a 	mov	r21,zero
    7ab8:	8001741e 	bne	r16,zero,808c <___vfiprintf_internal_r+0x9d0>
    7abc:	0021883a 	mov	r16,zero
    7ac0:	0029883a 	mov	r20,zero
    7ac4:	ddc01a04 	addi	r23,sp,104
    7ac8:	8027883a 	mov	r19,r16
    7acc:	8500010e 	bge	r16,r20,7ad4 <___vfiprintf_internal_r+0x418>
    7ad0:	a027883a 	mov	r19,r20
    7ad4:	ad403fcc 	andi	r21,r21,255
    7ad8:	ad40201c 	xori	r21,r21,128
    7adc:	ad7fe004 	addi	r21,r21,-128
    7ae0:	a8000126 	beq	r21,zero,7ae8 <___vfiprintf_internal_r+0x42c>
    7ae4:	9cc00044 	addi	r19,r19,1
    7ae8:	89c0008c 	andi	r7,r17,2
    7aec:	38000126 	beq	r7,zero,7af4 <___vfiprintf_internal_r+0x438>
    7af0:	9cc00084 	addi	r19,r19,2
    7af4:	88c0210c 	andi	r3,r17,132
    7af8:	1801dd1e 	bne	r3,zero,8270 <___vfiprintf_internal_r+0xbb4>
    7afc:	d9402517 	ldw	r5,148(sp)
    7b00:	2cebc83a 	sub	r21,r5,r19
    7b04:	0541da0e 	bge	zero,r21,8270 <___vfiprintf_internal_r+0xbb4>
    7b08:	07000404 	movi	fp,16
    7b0c:	d8801c17 	ldw	r2,112(sp)
    7b10:	e543be0e 	bge	fp,r21,8a0c <___vfiprintf_internal_r+0x1350>
    7b14:	014000b4 	movhi	r5,2
    7b18:	29600904 	addi	r5,r5,-32732
    7b1c:	dc002715 	stw	r16,156(sp)
    7b20:	d9801b17 	ldw	r6,108(sp)
    7b24:	a821883a 	mov	r16,r21
    7b28:	d9402315 	stw	r5,140(sp)
    7b2c:	028001c4 	movi	r10,7
    7b30:	d9c02915 	stw	r7,164(sp)
    7b34:	182b883a 	mov	r21,r3
    7b38:	00000506 	br	7b50 <___vfiprintf_internal_r+0x494>
    7b3c:	31000084 	addi	r4,r6,2
    7b40:	42000204 	addi	r8,r8,8
    7b44:	180d883a 	mov	r6,r3
    7b48:	843ffc04 	addi	r16,r16,-16
    7b4c:	e4000f0e 	bge	fp,r16,7b8c <___vfiprintf_internal_r+0x4d0>
    7b50:	010000b4 	movhi	r4,2
    7b54:	10800404 	addi	r2,r2,16
    7b58:	30c00044 	addi	r3,r6,1
    7b5c:	21200904 	addi	r4,r4,-32732
    7b60:	41000015 	stw	r4,0(r8)
    7b64:	47000115 	stw	fp,4(r8)
    7b68:	d8801c15 	stw	r2,112(sp)
    7b6c:	d8c01b15 	stw	r3,108(sp)
    7b70:	50fff20e 	bge	r10,r3,7b3c <__alt_data_end+0xfffd7b3c>
    7b74:	1001b21e 	bne	r2,zero,8240 <___vfiprintf_internal_r+0xb84>
    7b78:	843ffc04 	addi	r16,r16,-16
    7b7c:	000d883a 	mov	r6,zero
    7b80:	01000044 	movi	r4,1
    7b84:	d811883a 	mov	r8,sp
    7b88:	e43ff116 	blt	fp,r16,7b50 <__alt_data_end+0xfffd7b50>
    7b8c:	a807883a 	mov	r3,r21
    7b90:	d9c02917 	ldw	r7,164(sp)
    7b94:	802b883a 	mov	r21,r16
    7b98:	dc002717 	ldw	r16,156(sp)
    7b9c:	d9402317 	ldw	r5,140(sp)
    7ba0:	a885883a 	add	r2,r21,r2
    7ba4:	45400115 	stw	r21,4(r8)
    7ba8:	41400015 	stw	r5,0(r8)
    7bac:	d8801c15 	stw	r2,112(sp)
    7bb0:	d9001b15 	stw	r4,108(sp)
    7bb4:	014001c4 	movi	r5,7
    7bb8:	29026216 	blt	r5,r4,8544 <___vfiprintf_internal_r+0xe88>
    7bbc:	d9801d87 	ldb	r6,118(sp)
    7bc0:	42000204 	addi	r8,r8,8
    7bc4:	21400044 	addi	r5,r4,1
    7bc8:	3001ae1e 	bne	r6,zero,8284 <___vfiprintf_internal_r+0xbc8>
    7bcc:	3801bb26 	beq	r7,zero,82bc <___vfiprintf_internal_r+0xc00>
    7bd0:	d9001d04 	addi	r4,sp,116
    7bd4:	10800084 	addi	r2,r2,2
    7bd8:	41000015 	stw	r4,0(r8)
    7bdc:	01000084 	movi	r4,2
    7be0:	41000115 	stw	r4,4(r8)
    7be4:	d8801c15 	stw	r2,112(sp)
    7be8:	d9401b15 	stw	r5,108(sp)
    7bec:	010001c4 	movi	r4,7
    7bf0:	2142680e 	bge	r4,r5,8594 <___vfiprintf_internal_r+0xed8>
    7bf4:	1002b11e 	bne	r2,zero,86bc <___vfiprintf_internal_r+0x1000>
    7bf8:	01802004 	movi	r6,128
    7bfc:	01400044 	movi	r5,1
    7c00:	0009883a 	mov	r4,zero
    7c04:	d811883a 	mov	r8,sp
    7c08:	1981ae1e 	bne	r3,r6,82c4 <___vfiprintf_internal_r+0xc08>
    7c0c:	d8c02517 	ldw	r3,148(sp)
    7c10:	1cf9c83a 	sub	fp,r3,r19
    7c14:	0701ab0e 	bge	zero,fp,82c4 <___vfiprintf_internal_r+0xc08>
    7c18:	05400404 	movi	r21,16
    7c1c:	af03a90e 	bge	r21,fp,8ac4 <___vfiprintf_internal_r+0x1408>
    7c20:	014000b4 	movhi	r5,2
    7c24:	29600504 	addi	r5,r5,-32748
    7c28:	d9402315 	stw	r5,140(sp)
    7c2c:	01c001c4 	movi	r7,7
    7c30:	00000506 	br	7c48 <___vfiprintf_internal_r+0x58c>
    7c34:	21800084 	addi	r6,r4,2
    7c38:	42000204 	addi	r8,r8,8
    7c3c:	1809883a 	mov	r4,r3
    7c40:	e73ffc04 	addi	fp,fp,-16
    7c44:	af000d0e 	bge	r21,fp,7c7c <___vfiprintf_internal_r+0x5c0>
    7c48:	10800404 	addi	r2,r2,16
    7c4c:	20c00044 	addi	r3,r4,1
    7c50:	44800015 	stw	r18,0(r8)
    7c54:	45400115 	stw	r21,4(r8)
    7c58:	d8801c15 	stw	r2,112(sp)
    7c5c:	d8c01b15 	stw	r3,108(sp)
    7c60:	38fff40e 	bge	r7,r3,7c34 <__alt_data_end+0xfffd7c34>
    7c64:	10022b1e 	bne	r2,zero,8514 <___vfiprintf_internal_r+0xe58>
    7c68:	e73ffc04 	addi	fp,fp,-16
    7c6c:	01800044 	movi	r6,1
    7c70:	0009883a 	mov	r4,zero
    7c74:	d811883a 	mov	r8,sp
    7c78:	af3ff316 	blt	r21,fp,7c48 <__alt_data_end+0xfffd7c48>
    7c7c:	d8c02317 	ldw	r3,140(sp)
    7c80:	1705883a 	add	r2,r2,fp
    7c84:	47000115 	stw	fp,4(r8)
    7c88:	40c00015 	stw	r3,0(r8)
    7c8c:	d8801c15 	stw	r2,112(sp)
    7c90:	d9801b15 	stw	r6,108(sp)
    7c94:	00c001c4 	movi	r3,7
    7c98:	19829416 	blt	r3,r6,86ec <___vfiprintf_internal_r+0x1030>
    7c9c:	8521c83a 	sub	r16,r16,r20
    7ca0:	42000204 	addi	r8,r8,8
    7ca4:	31400044 	addi	r5,r6,1
    7ca8:	3009883a 	mov	r4,r6
    7cac:	04018716 	blt	zero,r16,82cc <___vfiprintf_internal_r+0xc10>
    7cb0:	a085883a 	add	r2,r20,r2
    7cb4:	45c00015 	stw	r23,0(r8)
    7cb8:	45000115 	stw	r20,4(r8)
    7cbc:	d8801c15 	stw	r2,112(sp)
    7cc0:	d9401b15 	stw	r5,108(sp)
    7cc4:	00c001c4 	movi	r3,7
    7cc8:	1941c20e 	bge	r3,r5,83d4 <___vfiprintf_internal_r+0xd18>
    7ccc:	1002531e 	bne	r2,zero,861c <___vfiprintf_internal_r+0xf60>
    7cd0:	d8001b15 	stw	zero,108(sp)
    7cd4:	8c40010c 	andi	r17,r17,4
    7cd8:	88023226 	beq	r17,zero,85a4 <___vfiprintf_internal_r+0xee8>
    7cdc:	d9002517 	ldw	r4,148(sp)
    7ce0:	24e3c83a 	sub	r17,r4,r19
    7ce4:	04432916 	blt	zero,r17,898c <___vfiprintf_internal_r+0x12d0>
    7ce8:	d8802517 	ldw	r2,148(sp)
    7cec:	14c0010e 	bge	r2,r19,7cf4 <___vfiprintf_internal_r+0x638>
    7cf0:	9805883a 	mov	r2,r19
    7cf4:	d8c02417 	ldw	r3,144(sp)
    7cf8:	1887883a 	add	r3,r3,r2
    7cfc:	d8c02415 	stw	r3,144(sp)
    7d00:	d8001b15 	stw	zero,108(sp)
    7d04:	d811883a 	mov	r8,sp
    7d08:	003ea006 	br	778c <__alt_data_end+0xfffd778c>
    7d0c:	8c400814 	ori	r17,r17,32
    7d10:	b0c00007 	ldb	r3,0(r22)
    7d14:	003ec606 	br	7830 <__alt_data_end+0xfffd7830>
    7d18:	b0c00007 	ldb	r3,0(r22)
    7d1c:	00801b04 	movi	r2,108
    7d20:	18832026 	beq	r3,r2,89a4 <___vfiprintf_internal_r+0x12e8>
    7d24:	8c400414 	ori	r17,r17,16
    7d28:	003ec106 	br	7830 <__alt_data_end+0xfffd7830>
    7d2c:	9cc03fcc 	andi	r19,r19,255
    7d30:	b811883a 	mov	r8,r23
    7d34:	9803981e 	bne	r19,zero,8b98 <___vfiprintf_internal_r+0x14dc>
    7d38:	8880080c 	andi	r2,r17,32
    7d3c:	1002be26 	beq	r2,zero,8838 <___vfiprintf_internal_r+0x117c>
    7d40:	d9002217 	ldw	r4,136(sp)
    7d44:	d9402417 	ldw	r5,144(sp)
    7d48:	20800017 	ldw	r2,0(r4)
    7d4c:	2807d7fa 	srai	r3,r5,31
    7d50:	21000104 	addi	r4,r4,4
    7d54:	d9002215 	stw	r4,136(sp)
    7d58:	11400015 	stw	r5,0(r2)
    7d5c:	10c00115 	stw	r3,4(r2)
    7d60:	003e8a06 	br	778c <__alt_data_end+0xfffd778c>
    7d64:	9cc03fcc 	andi	r19,r19,255
    7d68:	b811883a 	mov	r8,r23
    7d6c:	9803871e 	bne	r19,zero,8b8c <___vfiprintf_internal_r+0x14d0>
    7d70:	8880080c 	andi	r2,r17,32
    7d74:	10009a26 	beq	r2,zero,7fe0 <___vfiprintf_internal_r+0x924>
    7d78:	d9002217 	ldw	r4,136(sp)
    7d7c:	d8001d85 	stb	zero,118(sp)
    7d80:	20800204 	addi	r2,r4,8
    7d84:	24c00017 	ldw	r19,0(r4)
    7d88:	25000117 	ldw	r20,4(r4)
    7d8c:	8002a416 	blt	r16,zero,8820 <___vfiprintf_internal_r+0x1164>
    7d90:	013fdfc4 	movi	r4,-129
    7d94:	9d06b03a 	or	r3,r19,r20
    7d98:	d8802215 	stw	r2,136(sp)
    7d9c:	8922703a 	and	r17,r17,r4
    7da0:	18009b26 	beq	r3,zero,8010 <___vfiprintf_internal_r+0x954>
    7da4:	002b883a 	mov	r21,zero
    7da8:	ddc01a04 	addi	r23,sp,104
    7dac:	9806d0fa 	srli	r3,r19,3
    7db0:	a008977a 	slli	r4,r20,29
    7db4:	a028d0fa 	srli	r20,r20,3
    7db8:	9cc001cc 	andi	r19,r19,7
    7dbc:	98800c04 	addi	r2,r19,48
    7dc0:	bdffffc4 	addi	r23,r23,-1
    7dc4:	20e6b03a 	or	r19,r4,r3
    7dc8:	b8800005 	stb	r2,0(r23)
    7dcc:	9d06b03a 	or	r3,r19,r20
    7dd0:	183ff61e 	bne	r3,zero,7dac <__alt_data_end+0xfffd7dac>
    7dd4:	88c0004c 	andi	r3,r17,1
    7dd8:	18021f1e 	bne	r3,zero,8658 <___vfiprintf_internal_r+0xf9c>
    7ddc:	d9401e17 	ldw	r5,120(sp)
    7de0:	2de9c83a 	sub	r20,r5,r23
    7de4:	003f3806 	br	7ac8 <__alt_data_end+0xfffd7ac8>
    7de8:	9cc03fcc 	andi	r19,r19,255
    7dec:	b811883a 	mov	r8,r23
    7df0:	98034f1e 	bne	r19,zero,8b30 <___vfiprintf_internal_r+0x1474>
    7df4:	00800074 	movhi	r2,1
    7df8:	109fa404 	addi	r2,r2,32400
    7dfc:	d8802615 	stw	r2,152(sp)
    7e00:	8880080c 	andi	r2,r17,32
    7e04:	1000ac26 	beq	r2,zero,80b8 <___vfiprintf_internal_r+0x9fc>
    7e08:	d9002217 	ldw	r4,136(sp)
    7e0c:	24c00017 	ldw	r19,0(r4)
    7e10:	25000117 	ldw	r20,4(r4)
    7e14:	21000204 	addi	r4,r4,8
    7e18:	d9002215 	stw	r4,136(sp)
    7e1c:	8880004c 	andi	r2,r17,1
    7e20:	1001e726 	beq	r2,zero,85c0 <___vfiprintf_internal_r+0xf04>
    7e24:	9d04b03a 	or	r2,r19,r20
    7e28:	10025c1e 	bne	r2,zero,879c <___vfiprintf_internal_r+0x10e0>
    7e2c:	d8001d85 	stb	zero,118(sp)
    7e30:	80024416 	blt	r16,zero,8744 <___vfiprintf_internal_r+0x1088>
    7e34:	00bfdfc4 	movi	r2,-129
    7e38:	88a2703a 	and	r17,r17,r2
    7e3c:	003f1d06 	br	7ab4 <__alt_data_end+0xfffd7ab4>
    7e40:	d8c02217 	ldw	r3,136(sp)
    7e44:	04c00044 	movi	r19,1
    7e48:	b811883a 	mov	r8,r23
    7e4c:	18800017 	ldw	r2,0(r3)
    7e50:	18c00104 	addi	r3,r3,4
    7e54:	d8001d85 	stb	zero,118(sp)
    7e58:	d8801005 	stb	r2,64(sp)
    7e5c:	d8c02215 	stw	r3,136(sp)
    7e60:	9829883a 	mov	r20,r19
    7e64:	ddc01004 	addi	r23,sp,64
    7e68:	0021883a 	mov	r16,zero
    7e6c:	003f1e06 	br	7ae8 <__alt_data_end+0xfffd7ae8>
    7e70:	9cc03fcc 	andi	r19,r19,255
    7e74:	b811883a 	mov	r8,r23
    7e78:	9803331e 	bne	r19,zero,8b48 <___vfiprintf_internal_r+0x148c>
    7e7c:	8880080c 	andi	r2,r17,32
    7e80:	10004826 	beq	r2,zero,7fa4 <___vfiprintf_internal_r+0x8e8>
    7e84:	d9002217 	ldw	r4,136(sp)
    7e88:	20800117 	ldw	r2,4(r4)
    7e8c:	24c00017 	ldw	r19,0(r4)
    7e90:	21000204 	addi	r4,r4,8
    7e94:	d9002215 	stw	r4,136(sp)
    7e98:	1029883a 	mov	r20,r2
    7e9c:	10024c16 	blt	r2,zero,87d0 <___vfiprintf_internal_r+0x1114>
    7ea0:	dd401d83 	ldbu	r21,118(sp)
    7ea4:	80007116 	blt	r16,zero,806c <___vfiprintf_internal_r+0x9b0>
    7ea8:	00ffdfc4 	movi	r3,-129
    7eac:	9d04b03a 	or	r2,r19,r20
    7eb0:	88e2703a 	and	r17,r17,r3
    7eb4:	1000d126 	beq	r2,zero,81fc <___vfiprintf_internal_r+0xb40>
    7eb8:	a0023526 	beq	r20,zero,8790 <___vfiprintf_internal_r+0x10d4>
    7ebc:	ddc01a04 	addi	r23,sp,104
    7ec0:	4039883a 	mov	fp,r8
    7ec4:	9809883a 	mov	r4,r19
    7ec8:	a00b883a 	mov	r5,r20
    7ecc:	01800284 	movi	r6,10
    7ed0:	000f883a 	mov	r7,zero
    7ed4:	000a7700 	call	a770 <__umoddi3>
    7ed8:	10800c04 	addi	r2,r2,48
    7edc:	bdffffc4 	addi	r23,r23,-1
    7ee0:	9809883a 	mov	r4,r19
    7ee4:	a00b883a 	mov	r5,r20
    7ee8:	b8800005 	stb	r2,0(r23)
    7eec:	01800284 	movi	r6,10
    7ef0:	000f883a 	mov	r7,zero
    7ef4:	000a1740 	call	a174 <__udivdi3>
    7ef8:	1027883a 	mov	r19,r2
    7efc:	10c4b03a 	or	r2,r2,r3
    7f00:	1829883a 	mov	r20,r3
    7f04:	103fef1e 	bne	r2,zero,7ec4 <__alt_data_end+0xfffd7ec4>
    7f08:	d9001e17 	ldw	r4,120(sp)
    7f0c:	e011883a 	mov	r8,fp
    7f10:	25e9c83a 	sub	r20,r4,r23
    7f14:	003eec06 	br	7ac8 <__alt_data_end+0xfffd7ac8>
    7f18:	d8802307 	ldb	r2,140(sp)
    7f1c:	1002361e 	bne	r2,zero,87f8 <___vfiprintf_internal_r+0x113c>
    7f20:	00c00804 	movi	r3,32
    7f24:	d8c02305 	stb	r3,140(sp)
    7f28:	04c00044 	movi	r19,1
    7f2c:	b0c00007 	ldb	r3,0(r22)
    7f30:	003e3f06 	br	7830 <__alt_data_end+0xfffd7830>
    7f34:	8c400054 	ori	r17,r17,1
    7f38:	b0c00007 	ldb	r3,0(r22)
    7f3c:	003e3c06 	br	7830 <__alt_data_end+0xfffd7830>
    7f40:	8c402014 	ori	r17,r17,128
    7f44:	b0c00007 	ldb	r3,0(r22)
    7f48:	003e3906 	br	7830 <__alt_data_end+0xfffd7830>
    7f4c:	dc002715 	stw	r16,156(sp)
    7f50:	d8002515 	stw	zero,148(sp)
    7f54:	1f3ff404 	addi	fp,r3,-48
    7f58:	0009883a 	mov	r4,zero
    7f5c:	b021883a 	mov	r16,r22
    7f60:	01400284 	movi	r5,10
    7f64:	000ad340 	call	ad34 <__mulsi3>
    7f68:	80c00007 	ldb	r3,0(r16)
    7f6c:	e089883a 	add	r4,fp,r2
    7f70:	b5800044 	addi	r22,r22,1
    7f74:	1f3ff404 	addi	fp,r3,-48
    7f78:	b021883a 	mov	r16,r22
    7f7c:	af3ff82e 	bgeu	r21,fp,7f60 <__alt_data_end+0xfffd7f60>
    7f80:	d9002515 	stw	r4,148(sp)
    7f84:	dc002717 	ldw	r16,156(sp)
    7f88:	003e2a06 	br	7834 <__alt_data_end+0xfffd7834>
    7f8c:	9cc03fcc 	andi	r19,r19,255
    7f90:	b811883a 	mov	r8,r23
    7f94:	9802e91e 	bne	r19,zero,8b3c <___vfiprintf_internal_r+0x1480>
    7f98:	8c400414 	ori	r17,r17,16
    7f9c:	8880080c 	andi	r2,r17,32
    7fa0:	103fb81e 	bne	r2,zero,7e84 <__alt_data_end+0xfffd7e84>
    7fa4:	8880040c 	andi	r2,r17,16
    7fa8:	10022e26 	beq	r2,zero,8864 <___vfiprintf_internal_r+0x11a8>
    7fac:	d9402217 	ldw	r5,136(sp)
    7fb0:	2cc00017 	ldw	r19,0(r5)
    7fb4:	29400104 	addi	r5,r5,4
    7fb8:	d9402215 	stw	r5,136(sp)
    7fbc:	9829d7fa 	srai	r20,r19,31
    7fc0:	a005883a 	mov	r2,r20
    7fc4:	003fb506 	br	7e9c <__alt_data_end+0xfffd7e9c>
    7fc8:	9cc03fcc 	andi	r19,r19,255
    7fcc:	b811883a 	mov	r8,r23
    7fd0:	9802fa1e 	bne	r19,zero,8bbc <___vfiprintf_internal_r+0x1500>
    7fd4:	8c400414 	ori	r17,r17,16
    7fd8:	8880080c 	andi	r2,r17,32
    7fdc:	103f661e 	bne	r2,zero,7d78 <__alt_data_end+0xfffd7d78>
    7fe0:	8880040c 	andi	r2,r17,16
    7fe4:	10020626 	beq	r2,zero,8800 <___vfiprintf_internal_r+0x1144>
    7fe8:	d9402217 	ldw	r5,136(sp)
    7fec:	d8001d85 	stb	zero,118(sp)
    7ff0:	0029883a 	mov	r20,zero
    7ff4:	28800104 	addi	r2,r5,4
    7ff8:	2cc00017 	ldw	r19,0(r5)
    7ffc:	80020816 	blt	r16,zero,8820 <___vfiprintf_internal_r+0x1164>
    8000:	00ffdfc4 	movi	r3,-129
    8004:	d8802215 	stw	r2,136(sp)
    8008:	88e2703a 	and	r17,r17,r3
    800c:	983f651e 	bne	r19,zero,7da4 <__alt_data_end+0xfffd7da4>
    8010:	002b883a 	mov	r21,zero
    8014:	8002cf26 	beq	r16,zero,8b54 <___vfiprintf_internal_r+0x1498>
    8018:	0027883a 	mov	r19,zero
    801c:	0029883a 	mov	r20,zero
    8020:	003f6106 	br	7da8 <__alt_data_end+0xfffd7da8>
    8024:	9cc03fcc 	andi	r19,r19,255
    8028:	b811883a 	mov	r8,r23
    802c:	9802e01e 	bne	r19,zero,8bb0 <___vfiprintf_internal_r+0x14f4>
    8030:	8c400414 	ori	r17,r17,16
    8034:	8880080c 	andi	r2,r17,32
    8038:	1000641e 	bne	r2,zero,81cc <___vfiprintf_internal_r+0xb10>
    803c:	8880040c 	andi	r2,r17,16
    8040:	1001c81e 	bne	r2,zero,8764 <___vfiprintf_internal_r+0x10a8>
    8044:	8880100c 	andi	r2,r17,64
    8048:	d8001d85 	stb	zero,118(sp)
    804c:	1002281e 	bne	r2,zero,88f0 <___vfiprintf_internal_r+0x1234>
    8050:	d9002217 	ldw	r4,136(sp)
    8054:	0029883a 	mov	r20,zero
    8058:	20800104 	addi	r2,r4,4
    805c:	24c00017 	ldw	r19,0(r4)
    8060:	8001c60e 	bge	r16,zero,877c <___vfiprintf_internal_r+0x10c0>
    8064:	d8802215 	stw	r2,136(sp)
    8068:	002b883a 	mov	r21,zero
    806c:	9d04b03a 	or	r2,r19,r20
    8070:	103f911e 	bne	r2,zero,7eb8 <__alt_data_end+0xfffd7eb8>
    8074:	00800044 	movi	r2,1
    8078:	10803fcc 	andi	r2,r2,255
    807c:	00c00044 	movi	r3,1
    8080:	10c05f26 	beq	r2,r3,8200 <___vfiprintf_internal_r+0xb44>
    8084:	00c00084 	movi	r3,2
    8088:	10ffe31e 	bne	r2,r3,8018 <__alt_data_end+0xfffd8018>
    808c:	0027883a 	mov	r19,zero
    8090:	0029883a 	mov	r20,zero
    8094:	00015106 	br	85dc <___vfiprintf_internal_r+0xf20>
    8098:	9cc03fcc 	andi	r19,r19,255
    809c:	b811883a 	mov	r8,r23
    80a0:	9802c01e 	bne	r19,zero,8ba4 <___vfiprintf_internal_r+0x14e8>
    80a4:	01400074 	movhi	r5,1
    80a8:	295f9f04 	addi	r5,r5,32380
    80ac:	d9402615 	stw	r5,152(sp)
    80b0:	8880080c 	andi	r2,r17,32
    80b4:	103f541e 	bne	r2,zero,7e08 <__alt_data_end+0xfffd7e08>
    80b8:	8880040c 	andi	r2,r17,16
    80bc:	1001f226 	beq	r2,zero,8888 <___vfiprintf_internal_r+0x11cc>
    80c0:	d9402217 	ldw	r5,136(sp)
    80c4:	0029883a 	mov	r20,zero
    80c8:	2cc00017 	ldw	r19,0(r5)
    80cc:	29400104 	addi	r5,r5,4
    80d0:	d9402215 	stw	r5,136(sp)
    80d4:	003f5106 	br	7e1c <__alt_data_end+0xfffd7e1c>
    80d8:	d8c02217 	ldw	r3,136(sp)
    80dc:	b811883a 	mov	r8,r23
    80e0:	d8001d85 	stb	zero,118(sp)
    80e4:	1dc00017 	ldw	r23,0(r3)
    80e8:	1f000104 	addi	fp,r3,4
    80ec:	b8025926 	beq	r23,zero,8a54 <___vfiprintf_internal_r+0x1398>
    80f0:	80023316 	blt	r16,zero,89c0 <___vfiprintf_internal_r+0x1304>
    80f4:	800d883a 	mov	r6,r16
    80f8:	000b883a 	mov	r5,zero
    80fc:	b809883a 	mov	r4,r23
    8100:	da002a15 	stw	r8,168(sp)
    8104:	0005e240 	call	5e24 <memchr>
    8108:	da002a17 	ldw	r8,168(sp)
    810c:	10026826 	beq	r2,zero,8ab0 <___vfiprintf_internal_r+0x13f4>
    8110:	15e9c83a 	sub	r20,r2,r23
    8114:	dd401d83 	ldbu	r21,118(sp)
    8118:	df002215 	stw	fp,136(sp)
    811c:	0021883a 	mov	r16,zero
    8120:	003e6906 	br	7ac8 <__alt_data_end+0xfffd7ac8>
    8124:	9cc03fcc 	andi	r19,r19,255
    8128:	b811883a 	mov	r8,r23
    812c:	983fc126 	beq	r19,zero,8034 <__alt_data_end+0xfffd8034>
    8130:	d8c02303 	ldbu	r3,140(sp)
    8134:	d8c01d85 	stb	r3,118(sp)
    8138:	003fbe06 	br	8034 <__alt_data_end+0xfffd8034>
    813c:	d9002217 	ldw	r4,136(sp)
    8140:	d9402217 	ldw	r5,136(sp)
    8144:	21000017 	ldw	r4,0(r4)
    8148:	28800104 	addi	r2,r5,4
    814c:	d9002515 	stw	r4,148(sp)
    8150:	203e3d16 	blt	r4,zero,7a48 <__alt_data_end+0xfffd7a48>
    8154:	d8802215 	stw	r2,136(sp)
    8158:	b0c00007 	ldb	r3,0(r22)
    815c:	003db406 	br	7830 <__alt_data_end+0xfffd7830>
    8160:	00c00ac4 	movi	r3,43
    8164:	d8c02305 	stb	r3,140(sp)
    8168:	04c00044 	movi	r19,1
    816c:	b0c00007 	ldb	r3,0(r22)
    8170:	003daf06 	br	7830 <__alt_data_end+0xfffd7830>
    8174:	b0c00007 	ldb	r3,0(r22)
    8178:	01000a84 	movi	r4,42
    817c:	b4000044 	addi	r16,r22,1
    8180:	19025e26 	beq	r3,r4,8afc <___vfiprintf_internal_r+0x1440>
    8184:	1f3ff404 	addi	fp,r3,-48
    8188:	0009883a 	mov	r4,zero
    818c:	af025236 	bltu	r21,fp,8ad8 <___vfiprintf_internal_r+0x141c>
    8190:	01400284 	movi	r5,10
    8194:	000ad340 	call	ad34 <__mulsi3>
    8198:	80c00007 	ldb	r3,0(r16)
    819c:	1709883a 	add	r4,r2,fp
    81a0:	85800044 	addi	r22,r16,1
    81a4:	1f3ff404 	addi	fp,r3,-48
    81a8:	b021883a 	mov	r16,r22
    81ac:	af3ff82e 	bgeu	r21,fp,8190 <__alt_data_end+0xfffd8190>
    81b0:	2021883a 	mov	r16,r4
    81b4:	203d9f0e 	bge	r4,zero,7834 <__alt_data_end+0xfffd7834>
    81b8:	043fffc4 	movi	r16,-1
    81bc:	003d9d06 	br	7834 <__alt_data_end+0xfffd7834>
    81c0:	8c401014 	ori	r17,r17,64
    81c4:	b0c00007 	ldb	r3,0(r22)
    81c8:	003d9906 	br	7830 <__alt_data_end+0xfffd7830>
    81cc:	d9002217 	ldw	r4,136(sp)
    81d0:	d8001d85 	stb	zero,118(sp)
    81d4:	20c00204 	addi	r3,r4,8
    81d8:	24c00017 	ldw	r19,0(r4)
    81dc:	25000117 	ldw	r20,4(r4)
    81e0:	8001e716 	blt	r16,zero,8980 <___vfiprintf_internal_r+0x12c4>
    81e4:	013fdfc4 	movi	r4,-129
    81e8:	9d04b03a 	or	r2,r19,r20
    81ec:	d8c02215 	stw	r3,136(sp)
    81f0:	8922703a 	and	r17,r17,r4
    81f4:	002b883a 	mov	r21,zero
    81f8:	103f2f1e 	bne	r2,zero,7eb8 <__alt_data_end+0xfffd7eb8>
    81fc:	803e2f26 	beq	r16,zero,7abc <__alt_data_end+0xfffd7abc>
    8200:	0027883a 	mov	r19,zero
    8204:	9cc00c04 	addi	r19,r19,48
    8208:	dcc019c5 	stb	r19,103(sp)
    820c:	dd002817 	ldw	r20,160(sp)
    8210:	ddc019c4 	addi	r23,sp,103
    8214:	003e2c06 	br	7ac8 <__alt_data_end+0xfffd7ac8>
    8218:	9cc03fcc 	andi	r19,r19,255
    821c:	b811883a 	mov	r8,r23
    8220:	9802571e 	bne	r19,zero,8b80 <___vfiprintf_internal_r+0x14c4>
    8224:	18005726 	beq	r3,zero,8384 <___vfiprintf_internal_r+0xcc8>
    8228:	04c00044 	movi	r19,1
    822c:	d8c01005 	stb	r3,64(sp)
    8230:	d8001d85 	stb	zero,118(sp)
    8234:	9829883a 	mov	r20,r19
    8238:	ddc01004 	addi	r23,sp,64
    823c:	003f0a06 	br	7e68 <__alt_data_end+0xfffd7e68>
    8240:	d9402017 	ldw	r5,128(sp)
    8244:	d9002117 	ldw	r4,132(sp)
    8248:	d9801a04 	addi	r6,sp,104
    824c:	da802a15 	stw	r10,168(sp)
    8250:	00075a80 	call	75a8 <__sprint_r.part.0>
    8254:	da802a17 	ldw	r10,168(sp)
    8258:	1000501e 	bne	r2,zero,839c <___vfiprintf_internal_r+0xce0>
    825c:	d9801b17 	ldw	r6,108(sp)
    8260:	d8801c17 	ldw	r2,112(sp)
    8264:	d811883a 	mov	r8,sp
    8268:	31000044 	addi	r4,r6,1
    826c:	003e3606 	br	7b48 <__alt_data_end+0xfffd7b48>
    8270:	d9001b17 	ldw	r4,108(sp)
    8274:	d8801c17 	ldw	r2,112(sp)
    8278:	21400044 	addi	r5,r4,1
    827c:	d9801d87 	ldb	r6,118(sp)
    8280:	303e5226 	beq	r6,zero,7bcc <__alt_data_end+0xfffd7bcc>
    8284:	01800044 	movi	r6,1
    8288:	d9001d84 	addi	r4,sp,118
    828c:	1185883a 	add	r2,r2,r6
    8290:	41000015 	stw	r4,0(r8)
    8294:	41800115 	stw	r6,4(r8)
    8298:	d8801c15 	stw	r2,112(sp)
    829c:	d9401b15 	stw	r5,108(sp)
    82a0:	010001c4 	movi	r4,7
    82a4:	2140b00e 	bge	r4,r5,8568 <___vfiprintf_internal_r+0xeac>
    82a8:	1000f61e 	bne	r2,zero,8684 <___vfiprintf_internal_r+0xfc8>
    82ac:	3800b31e 	bne	r7,zero,857c <___vfiprintf_internal_r+0xec0>
    82b0:	0009883a 	mov	r4,zero
    82b4:	300b883a 	mov	r5,r6
    82b8:	d811883a 	mov	r8,sp
    82bc:	01802004 	movi	r6,128
    82c0:	19be5226 	beq	r3,r6,7c0c <__alt_data_end+0xfffd7c0c>
    82c4:	8521c83a 	sub	r16,r16,r20
    82c8:	043e790e 	bge	zero,r16,7cb0 <__alt_data_end+0xfffd7cb0>
    82cc:	05400404 	movi	r21,16
    82d0:	ac01b00e 	bge	r21,r16,8994 <___vfiprintf_internal_r+0x12d8>
    82d4:	014000b4 	movhi	r5,2
    82d8:	29600504 	addi	r5,r5,-32748
    82dc:	d9402315 	stw	r5,140(sp)
    82e0:	070001c4 	movi	fp,7
    82e4:	00000506 	br	82fc <___vfiprintf_internal_r+0xc40>
    82e8:	21400084 	addi	r5,r4,2
    82ec:	42000204 	addi	r8,r8,8
    82f0:	1809883a 	mov	r4,r3
    82f4:	843ffc04 	addi	r16,r16,-16
    82f8:	ac000d0e 	bge	r21,r16,8330 <___vfiprintf_internal_r+0xc74>
    82fc:	10800404 	addi	r2,r2,16
    8300:	20c00044 	addi	r3,r4,1
    8304:	44800015 	stw	r18,0(r8)
    8308:	45400115 	stw	r21,4(r8)
    830c:	d8801c15 	stw	r2,112(sp)
    8310:	d8c01b15 	stw	r3,108(sp)
    8314:	e0fff40e 	bge	fp,r3,82e8 <__alt_data_end+0xfffd82e8>
    8318:	1000101e 	bne	r2,zero,835c <___vfiprintf_internal_r+0xca0>
    831c:	843ffc04 	addi	r16,r16,-16
    8320:	01400044 	movi	r5,1
    8324:	0009883a 	mov	r4,zero
    8328:	d811883a 	mov	r8,sp
    832c:	ac3ff316 	blt	r21,r16,82fc <__alt_data_end+0xfffd82fc>
    8330:	d8c02317 	ldw	r3,140(sp)
    8334:	1405883a 	add	r2,r2,r16
    8338:	44000115 	stw	r16,4(r8)
    833c:	40c00015 	stw	r3,0(r8)
    8340:	d8801c15 	stw	r2,112(sp)
    8344:	d9401b15 	stw	r5,108(sp)
    8348:	00c001c4 	movi	r3,7
    834c:	19401916 	blt	r3,r5,83b4 <___vfiprintf_internal_r+0xcf8>
    8350:	42000204 	addi	r8,r8,8
    8354:	29400044 	addi	r5,r5,1
    8358:	003e5506 	br	7cb0 <__alt_data_end+0xfffd7cb0>
    835c:	d9402017 	ldw	r5,128(sp)
    8360:	d9002117 	ldw	r4,132(sp)
    8364:	d9801a04 	addi	r6,sp,104
    8368:	00075a80 	call	75a8 <__sprint_r.part.0>
    836c:	10000b1e 	bne	r2,zero,839c <___vfiprintf_internal_r+0xce0>
    8370:	d9001b17 	ldw	r4,108(sp)
    8374:	d8801c17 	ldw	r2,112(sp)
    8378:	d811883a 	mov	r8,sp
    837c:	21400044 	addi	r5,r4,1
    8380:	003fdc06 	br	82f4 <__alt_data_end+0xfffd82f4>
    8384:	d8801c17 	ldw	r2,112(sp)
    8388:	10000426 	beq	r2,zero,839c <___vfiprintf_internal_r+0xce0>
    838c:	d9402017 	ldw	r5,128(sp)
    8390:	d9002117 	ldw	r4,132(sp)
    8394:	d9801a04 	addi	r6,sp,104
    8398:	00075a80 	call	75a8 <__sprint_r.part.0>
    839c:	d9402017 	ldw	r5,128(sp)
    83a0:	2880030b 	ldhu	r2,12(r5)
    83a4:	1080100c 	andi	r2,r2,64
    83a8:	10014d1e 	bne	r2,zero,88e0 <___vfiprintf_internal_r+0x1224>
    83ac:	d8802417 	ldw	r2,144(sp)
    83b0:	003d9706 	br	7a10 <__alt_data_end+0xfffd7a10>
    83b4:	1000d21e 	bne	r2,zero,8700 <___vfiprintf_internal_r+0x1044>
    83b8:	00c00044 	movi	r3,1
    83bc:	a005883a 	mov	r2,r20
    83c0:	ddc00015 	stw	r23,0(sp)
    83c4:	dd000115 	stw	r20,4(sp)
    83c8:	dd001c15 	stw	r20,112(sp)
    83cc:	d8c01b15 	stw	r3,108(sp)
    83d0:	d811883a 	mov	r8,sp
    83d4:	42000204 	addi	r8,r8,8
    83d8:	8c40010c 	andi	r17,r17,4
    83dc:	88004026 	beq	r17,zero,84e0 <___vfiprintf_internal_r+0xe24>
    83e0:	d9002517 	ldw	r4,148(sp)
    83e4:	24e3c83a 	sub	r17,r4,r19
    83e8:	04403d0e 	bge	zero,r17,84e0 <___vfiprintf_internal_r+0xe24>
    83ec:	04000404 	movi	r16,16
    83f0:	8441a90e 	bge	r16,r17,8a98 <___vfiprintf_internal_r+0x13dc>
    83f4:	00c000b4 	movhi	r3,2
    83f8:	18e00904 	addi	r3,r3,-32732
    83fc:	d9001b17 	ldw	r4,108(sp)
    8400:	d8c02315 	stw	r3,140(sp)
    8404:	050001c4 	movi	r20,7
    8408:	dd402117 	ldw	r21,132(sp)
    840c:	ddc02017 	ldw	r23,128(sp)
    8410:	00000506 	br	8428 <___vfiprintf_internal_r+0xd6c>
    8414:	21400084 	addi	r5,r4,2
    8418:	42000204 	addi	r8,r8,8
    841c:	1809883a 	mov	r4,r3
    8420:	8c7ffc04 	addi	r17,r17,-16
    8424:	84400f0e 	bge	r16,r17,8464 <___vfiprintf_internal_r+0xda8>
    8428:	014000b4 	movhi	r5,2
    842c:	10800404 	addi	r2,r2,16
    8430:	20c00044 	addi	r3,r4,1
    8434:	29600904 	addi	r5,r5,-32732
    8438:	41400015 	stw	r5,0(r8)
    843c:	44000115 	stw	r16,4(r8)
    8440:	d8801c15 	stw	r2,112(sp)
    8444:	d8c01b15 	stw	r3,108(sp)
    8448:	a0fff20e 	bge	r20,r3,8414 <__alt_data_end+0xfffd8414>
    844c:	1000141e 	bne	r2,zero,84a0 <___vfiprintf_internal_r+0xde4>
    8450:	8c7ffc04 	addi	r17,r17,-16
    8454:	01400044 	movi	r5,1
    8458:	0009883a 	mov	r4,zero
    845c:	d811883a 	mov	r8,sp
    8460:	847ff116 	blt	r16,r17,8428 <__alt_data_end+0xfffd8428>
    8464:	d8c02317 	ldw	r3,140(sp)
    8468:	1445883a 	add	r2,r2,r17
    846c:	44400115 	stw	r17,4(r8)
    8470:	40c00015 	stw	r3,0(r8)
    8474:	d8801c15 	stw	r2,112(sp)
    8478:	d9401b15 	stw	r5,108(sp)
    847c:	00c001c4 	movi	r3,7
    8480:	1940170e 	bge	r3,r5,84e0 <___vfiprintf_internal_r+0xe24>
    8484:	1000101e 	bne	r2,zero,84c8 <___vfiprintf_internal_r+0xe0c>
    8488:	d8802517 	ldw	r2,148(sp)
    848c:	14c11616 	blt	r2,r19,88e8 <___vfiprintf_internal_r+0x122c>
    8490:	d9002417 	ldw	r4,144(sp)
    8494:	2089883a 	add	r4,r4,r2
    8498:	d9002415 	stw	r4,144(sp)
    849c:	003e1806 	br	7d00 <__alt_data_end+0xfffd7d00>
    84a0:	d9801a04 	addi	r6,sp,104
    84a4:	b80b883a 	mov	r5,r23
    84a8:	a809883a 	mov	r4,r21
    84ac:	00075a80 	call	75a8 <__sprint_r.part.0>
    84b0:	103fba1e 	bne	r2,zero,839c <__alt_data_end+0xfffd839c>
    84b4:	d9001b17 	ldw	r4,108(sp)
    84b8:	d8801c17 	ldw	r2,112(sp)
    84bc:	d811883a 	mov	r8,sp
    84c0:	21400044 	addi	r5,r4,1
    84c4:	003fd606 	br	8420 <__alt_data_end+0xfffd8420>
    84c8:	d9402017 	ldw	r5,128(sp)
    84cc:	d9002117 	ldw	r4,132(sp)
    84d0:	d9801a04 	addi	r6,sp,104
    84d4:	00075a80 	call	75a8 <__sprint_r.part.0>
    84d8:	103fb01e 	bne	r2,zero,839c <__alt_data_end+0xfffd839c>
    84dc:	d8801c17 	ldw	r2,112(sp)
    84e0:	d8c02517 	ldw	r3,148(sp)
    84e4:	1cc0010e 	bge	r3,r19,84ec <___vfiprintf_internal_r+0xe30>
    84e8:	9807883a 	mov	r3,r19
    84ec:	d9002417 	ldw	r4,144(sp)
    84f0:	20c9883a 	add	r4,r4,r3
    84f4:	d9002415 	stw	r4,144(sp)
    84f8:	103e0126 	beq	r2,zero,7d00 <__alt_data_end+0xfffd7d00>
    84fc:	d9402017 	ldw	r5,128(sp)
    8500:	d9002117 	ldw	r4,132(sp)
    8504:	d9801a04 	addi	r6,sp,104
    8508:	00075a80 	call	75a8 <__sprint_r.part.0>
    850c:	103dfc26 	beq	r2,zero,7d00 <__alt_data_end+0xfffd7d00>
    8510:	003fa206 	br	839c <__alt_data_end+0xfffd839c>
    8514:	d9402017 	ldw	r5,128(sp)
    8518:	d9002117 	ldw	r4,132(sp)
    851c:	d9801a04 	addi	r6,sp,104
    8520:	d9c02b15 	stw	r7,172(sp)
    8524:	00075a80 	call	75a8 <__sprint_r.part.0>
    8528:	d9c02b17 	ldw	r7,172(sp)
    852c:	103f9b1e 	bne	r2,zero,839c <__alt_data_end+0xfffd839c>
    8530:	d9001b17 	ldw	r4,108(sp)
    8534:	d8801c17 	ldw	r2,112(sp)
    8538:	d811883a 	mov	r8,sp
    853c:	21800044 	addi	r6,r4,1
    8540:	003dbf06 	br	7c40 <__alt_data_end+0xfffd7c40>
    8544:	1000d81e 	bne	r2,zero,88a8 <___vfiprintf_internal_r+0x11ec>
    8548:	d9001d87 	ldb	r4,118(sp)
    854c:	20000a26 	beq	r4,zero,8578 <___vfiprintf_internal_r+0xebc>
    8550:	00800044 	movi	r2,1
    8554:	d9001d84 	addi	r4,sp,118
    8558:	100b883a 	mov	r5,r2
    855c:	d9000015 	stw	r4,0(sp)
    8560:	d8800115 	stw	r2,4(sp)
    8564:	d811883a 	mov	r8,sp
    8568:	2809883a 	mov	r4,r5
    856c:	42000204 	addi	r8,r8,8
    8570:	29400044 	addi	r5,r5,1
    8574:	003d9506 	br	7bcc <__alt_data_end+0xfffd7bcc>
    8578:	3800fd26 	beq	r7,zero,8970 <___vfiprintf_internal_r+0x12b4>
    857c:	00800084 	movi	r2,2
    8580:	d9001d04 	addi	r4,sp,116
    8584:	d9000015 	stw	r4,0(sp)
    8588:	d8800115 	stw	r2,4(sp)
    858c:	01400044 	movi	r5,1
    8590:	d811883a 	mov	r8,sp
    8594:	2809883a 	mov	r4,r5
    8598:	42000204 	addi	r8,r8,8
    859c:	29400044 	addi	r5,r5,1
    85a0:	003f4606 	br	82bc <__alt_data_end+0xfffd82bc>
    85a4:	d8802517 	ldw	r2,148(sp)
    85a8:	14c0010e 	bge	r2,r19,85b0 <___vfiprintf_internal_r+0xef4>
    85ac:	9805883a 	mov	r2,r19
    85b0:	d9402417 	ldw	r5,144(sp)
    85b4:	288b883a 	add	r5,r5,r2
    85b8:	d9402415 	stw	r5,144(sp)
    85bc:	003dd006 	br	7d00 <__alt_data_end+0xfffd7d00>
    85c0:	d8001d85 	stb	zero,118(sp)
    85c4:	80005d16 	blt	r16,zero,873c <___vfiprintf_internal_r+0x1080>
    85c8:	00ffdfc4 	movi	r3,-129
    85cc:	9d04b03a 	or	r2,r19,r20
    85d0:	88e2703a 	and	r17,r17,r3
    85d4:	103d3726 	beq	r2,zero,7ab4 <__alt_data_end+0xfffd7ab4>
    85d8:	002b883a 	mov	r21,zero
    85dc:	d9002617 	ldw	r4,152(sp)
    85e0:	ddc01a04 	addi	r23,sp,104
    85e4:	988003cc 	andi	r2,r19,15
    85e8:	a006973a 	slli	r3,r20,28
    85ec:	2085883a 	add	r2,r4,r2
    85f0:	9826d13a 	srli	r19,r19,4
    85f4:	10800003 	ldbu	r2,0(r2)
    85f8:	a028d13a 	srli	r20,r20,4
    85fc:	bdffffc4 	addi	r23,r23,-1
    8600:	1ce6b03a 	or	r19,r3,r19
    8604:	b8800005 	stb	r2,0(r23)
    8608:	9d04b03a 	or	r2,r19,r20
    860c:	103ff51e 	bne	r2,zero,85e4 <__alt_data_end+0xfffd85e4>
    8610:	d8801e17 	ldw	r2,120(sp)
    8614:	15e9c83a 	sub	r20,r2,r23
    8618:	003d2b06 	br	7ac8 <__alt_data_end+0xfffd7ac8>
    861c:	d9402017 	ldw	r5,128(sp)
    8620:	d9002117 	ldw	r4,132(sp)
    8624:	d9801a04 	addi	r6,sp,104
    8628:	00075a80 	call	75a8 <__sprint_r.part.0>
    862c:	103f5b1e 	bne	r2,zero,839c <__alt_data_end+0xfffd839c>
    8630:	d8801c17 	ldw	r2,112(sp)
    8634:	d811883a 	mov	r8,sp
    8638:	003f6706 	br	83d8 <__alt_data_end+0xfffd83d8>
    863c:	d9402017 	ldw	r5,128(sp)
    8640:	d9002117 	ldw	r4,132(sp)
    8644:	d9801a04 	addi	r6,sp,104
    8648:	00075a80 	call	75a8 <__sprint_r.part.0>
    864c:	103f531e 	bne	r2,zero,839c <__alt_data_end+0xfffd839c>
    8650:	d811883a 	mov	r8,sp
    8654:	003cd906 	br	79bc <__alt_data_end+0xfffd79bc>
    8658:	10803fcc 	andi	r2,r2,255
    865c:	1080201c 	xori	r2,r2,128
    8660:	10bfe004 	addi	r2,r2,-128
    8664:	00c00c04 	movi	r3,48
    8668:	10ffe926 	beq	r2,r3,8610 <__alt_data_end+0xfffd8610>
    866c:	b8ffffc5 	stb	r3,-1(r23)
    8670:	d8c01e17 	ldw	r3,120(sp)
    8674:	b8bfffc4 	addi	r2,r23,-1
    8678:	102f883a 	mov	r23,r2
    867c:	18a9c83a 	sub	r20,r3,r2
    8680:	003d1106 	br	7ac8 <__alt_data_end+0xfffd7ac8>
    8684:	d9402017 	ldw	r5,128(sp)
    8688:	d9002117 	ldw	r4,132(sp)
    868c:	d9801a04 	addi	r6,sp,104
    8690:	d8c02a15 	stw	r3,168(sp)
    8694:	d9c02b15 	stw	r7,172(sp)
    8698:	00075a80 	call	75a8 <__sprint_r.part.0>
    869c:	d8c02a17 	ldw	r3,168(sp)
    86a0:	d9c02b17 	ldw	r7,172(sp)
    86a4:	103f3d1e 	bne	r2,zero,839c <__alt_data_end+0xfffd839c>
    86a8:	d9001b17 	ldw	r4,108(sp)
    86ac:	d8801c17 	ldw	r2,112(sp)
    86b0:	d811883a 	mov	r8,sp
    86b4:	21400044 	addi	r5,r4,1
    86b8:	003d4406 	br	7bcc <__alt_data_end+0xfffd7bcc>
    86bc:	d9402017 	ldw	r5,128(sp)
    86c0:	d9002117 	ldw	r4,132(sp)
    86c4:	d9801a04 	addi	r6,sp,104
    86c8:	d8c02a15 	stw	r3,168(sp)
    86cc:	00075a80 	call	75a8 <__sprint_r.part.0>
    86d0:	d8c02a17 	ldw	r3,168(sp)
    86d4:	103f311e 	bne	r2,zero,839c <__alt_data_end+0xfffd839c>
    86d8:	d9001b17 	ldw	r4,108(sp)
    86dc:	d8801c17 	ldw	r2,112(sp)
    86e0:	d811883a 	mov	r8,sp
    86e4:	21400044 	addi	r5,r4,1
    86e8:	003ef406 	br	82bc <__alt_data_end+0xfffd82bc>
    86ec:	1000bd1e 	bne	r2,zero,89e4 <___vfiprintf_internal_r+0x1328>
    86f0:	01400044 	movi	r5,1
    86f4:	0009883a 	mov	r4,zero
    86f8:	d811883a 	mov	r8,sp
    86fc:	003ef106 	br	82c4 <__alt_data_end+0xfffd82c4>
    8700:	d9402017 	ldw	r5,128(sp)
    8704:	d9002117 	ldw	r4,132(sp)
    8708:	d9801a04 	addi	r6,sp,104
    870c:	00075a80 	call	75a8 <__sprint_r.part.0>
    8710:	103f221e 	bne	r2,zero,839c <__alt_data_end+0xfffd839c>
    8714:	d9401b17 	ldw	r5,108(sp)
    8718:	d8801c17 	ldw	r2,112(sp)
    871c:	d811883a 	mov	r8,sp
    8720:	29400044 	addi	r5,r5,1
    8724:	003d6206 	br	7cb0 <__alt_data_end+0xfffd7cb0>
    8728:	01400074 	movhi	r5,1
    872c:	295fa404 	addi	r5,r5,32400
    8730:	d9402615 	stw	r5,152(sp)
    8734:	d8c02215 	stw	r3,136(sp)
    8738:	1023883a 	mov	r17,r2
    873c:	9d04b03a 	or	r2,r19,r20
    8740:	103fa51e 	bne	r2,zero,85d8 <__alt_data_end+0xfffd85d8>
    8744:	002b883a 	mov	r21,zero
    8748:	00800084 	movi	r2,2
    874c:	003e4a06 	br	8078 <__alt_data_end+0xfffd8078>
    8750:	01400074 	movhi	r5,1
    8754:	295fa404 	addi	r5,r5,32400
    8758:	002b883a 	mov	r21,zero
    875c:	d9402615 	stw	r5,152(sp)
    8760:	003f9e06 	br	85dc <__alt_data_end+0xfffd85dc>
    8764:	d9402217 	ldw	r5,136(sp)
    8768:	d8001d85 	stb	zero,118(sp)
    876c:	0029883a 	mov	r20,zero
    8770:	28800104 	addi	r2,r5,4
    8774:	2cc00017 	ldw	r19,0(r5)
    8778:	803e3a16 	blt	r16,zero,8064 <__alt_data_end+0xfffd8064>
    877c:	00ffdfc4 	movi	r3,-129
    8780:	d8802215 	stw	r2,136(sp)
    8784:	88e2703a 	and	r17,r17,r3
    8788:	002b883a 	mov	r21,zero
    878c:	983e9b26 	beq	r19,zero,81fc <__alt_data_end+0xfffd81fc>
    8790:	00800244 	movi	r2,9
    8794:	14fdc936 	bltu	r2,r19,7ebc <__alt_data_end+0xfffd7ebc>
    8798:	003e9a06 	br	8204 <__alt_data_end+0xfffd8204>
    879c:	00800c04 	movi	r2,48
    87a0:	d8c01d45 	stb	r3,117(sp)
    87a4:	d8801d05 	stb	r2,116(sp)
    87a8:	d8001d85 	stb	zero,118(sp)
    87ac:	88c00094 	ori	r3,r17,2
    87b0:	80009c16 	blt	r16,zero,8a24 <___vfiprintf_internal_r+0x1368>
    87b4:	00bfdfc4 	movi	r2,-129
    87b8:	88a2703a 	and	r17,r17,r2
    87bc:	8c400094 	ori	r17,r17,2
    87c0:	002b883a 	mov	r21,zero
    87c4:	003f8506 	br	85dc <__alt_data_end+0xfffd85dc>
    87c8:	b029883a 	mov	r20,r22
    87cc:	003c0b06 	br	77fc <__alt_data_end+0xfffd77fc>
    87d0:	04e7c83a 	sub	r19,zero,r19
    87d4:	05400b44 	movi	r21,45
    87d8:	9804c03a 	cmpne	r2,r19,zero
    87dc:	0529c83a 	sub	r20,zero,r20
    87e0:	dd401d85 	stb	r21,118(sp)
    87e4:	a0a9c83a 	sub	r20,r20,r2
    87e8:	80009716 	blt	r16,zero,8a48 <___vfiprintf_internal_r+0x138c>
    87ec:	00bfdfc4 	movi	r2,-129
    87f0:	88a2703a 	and	r17,r17,r2
    87f4:	003db006 	br	7eb8 <__alt_data_end+0xfffd7eb8>
    87f8:	b0c00007 	ldb	r3,0(r22)
    87fc:	003c0c06 	br	7830 <__alt_data_end+0xfffd7830>
    8800:	8880100c 	andi	r2,r17,64
    8804:	d8001d85 	stb	zero,118(sp)
    8808:	1000461e 	bne	r2,zero,8924 <___vfiprintf_internal_r+0x1268>
    880c:	d9002217 	ldw	r4,136(sp)
    8810:	0029883a 	mov	r20,zero
    8814:	20800104 	addi	r2,r4,4
    8818:	24c00017 	ldw	r19,0(r4)
    881c:	803df80e 	bge	r16,zero,8000 <__alt_data_end+0xfffd8000>
    8820:	9d06b03a 	or	r3,r19,r20
    8824:	d8802215 	stw	r2,136(sp)
    8828:	183d5e1e 	bne	r3,zero,7da4 <__alt_data_end+0xfffd7da4>
    882c:	002b883a 	mov	r21,zero
    8830:	0005883a 	mov	r2,zero
    8834:	003e1006 	br	8078 <__alt_data_end+0xfffd8078>
    8838:	8880040c 	andi	r2,r17,16
    883c:	1000321e 	bne	r2,zero,8908 <___vfiprintf_internal_r+0x124c>
    8840:	8c40100c 	andi	r17,r17,64
    8844:	88008d26 	beq	r17,zero,8a7c <___vfiprintf_internal_r+0x13c0>
    8848:	d9402217 	ldw	r5,136(sp)
    884c:	d8c02417 	ldw	r3,144(sp)
    8850:	28800017 	ldw	r2,0(r5)
    8854:	29400104 	addi	r5,r5,4
    8858:	d9402215 	stw	r5,136(sp)
    885c:	10c0000d 	sth	r3,0(r2)
    8860:	003bca06 	br	778c <__alt_data_end+0xfffd778c>
    8864:	8880100c 	andi	r2,r17,64
    8868:	10003a26 	beq	r2,zero,8954 <___vfiprintf_internal_r+0x1298>
    886c:	d8802217 	ldw	r2,136(sp)
    8870:	14c0000f 	ldh	r19,0(r2)
    8874:	10800104 	addi	r2,r2,4
    8878:	d8802215 	stw	r2,136(sp)
    887c:	9829d7fa 	srai	r20,r19,31
    8880:	a005883a 	mov	r2,r20
    8884:	003d8506 	br	7e9c <__alt_data_end+0xfffd7e9c>
    8888:	8880100c 	andi	r2,r17,64
    888c:	10002b26 	beq	r2,zero,893c <___vfiprintf_internal_r+0x1280>
    8890:	d8802217 	ldw	r2,136(sp)
    8894:	0029883a 	mov	r20,zero
    8898:	14c0000b 	ldhu	r19,0(r2)
    889c:	10800104 	addi	r2,r2,4
    88a0:	d8802215 	stw	r2,136(sp)
    88a4:	003d5d06 	br	7e1c <__alt_data_end+0xfffd7e1c>
    88a8:	d9402017 	ldw	r5,128(sp)
    88ac:	d9002117 	ldw	r4,132(sp)
    88b0:	d9801a04 	addi	r6,sp,104
    88b4:	d8c02a15 	stw	r3,168(sp)
    88b8:	d9c02b15 	stw	r7,172(sp)
    88bc:	00075a80 	call	75a8 <__sprint_r.part.0>
    88c0:	d8c02a17 	ldw	r3,168(sp)
    88c4:	d9c02b17 	ldw	r7,172(sp)
    88c8:	103eb41e 	bne	r2,zero,839c <__alt_data_end+0xfffd839c>
    88cc:	d9001b17 	ldw	r4,108(sp)
    88d0:	d8801c17 	ldw	r2,112(sp)
    88d4:	d811883a 	mov	r8,sp
    88d8:	21400044 	addi	r5,r4,1
    88dc:	003e6706 	br	827c <__alt_data_end+0xfffd827c>
    88e0:	00bfffc4 	movi	r2,-1
    88e4:	003c4a06 	br	7a10 <__alt_data_end+0xfffd7a10>
    88e8:	9805883a 	mov	r2,r19
    88ec:	003ee806 	br	8490 <__alt_data_end+0xfffd8490>
    88f0:	d8c02217 	ldw	r3,136(sp)
    88f4:	0029883a 	mov	r20,zero
    88f8:	18800104 	addi	r2,r3,4
    88fc:	1cc0000b 	ldhu	r19,0(r3)
    8900:	803f9e0e 	bge	r16,zero,877c <__alt_data_end+0xfffd877c>
    8904:	003dd706 	br	8064 <__alt_data_end+0xfffd8064>
    8908:	d8c02217 	ldw	r3,136(sp)
    890c:	d9002417 	ldw	r4,144(sp)
    8910:	18800017 	ldw	r2,0(r3)
    8914:	18c00104 	addi	r3,r3,4
    8918:	d8c02215 	stw	r3,136(sp)
    891c:	11000015 	stw	r4,0(r2)
    8920:	003b9a06 	br	778c <__alt_data_end+0xfffd778c>
    8924:	d8c02217 	ldw	r3,136(sp)
    8928:	0029883a 	mov	r20,zero
    892c:	18800104 	addi	r2,r3,4
    8930:	1cc0000b 	ldhu	r19,0(r3)
    8934:	803db20e 	bge	r16,zero,8000 <__alt_data_end+0xfffd8000>
    8938:	003fb906 	br	8820 <__alt_data_end+0xfffd8820>
    893c:	d9002217 	ldw	r4,136(sp)
    8940:	0029883a 	mov	r20,zero
    8944:	24c00017 	ldw	r19,0(r4)
    8948:	21000104 	addi	r4,r4,4
    894c:	d9002215 	stw	r4,136(sp)
    8950:	003d3206 	br	7e1c <__alt_data_end+0xfffd7e1c>
    8954:	d8c02217 	ldw	r3,136(sp)
    8958:	1cc00017 	ldw	r19,0(r3)
    895c:	18c00104 	addi	r3,r3,4
    8960:	d8c02215 	stw	r3,136(sp)
    8964:	9829d7fa 	srai	r20,r19,31
    8968:	a005883a 	mov	r2,r20
    896c:	003d4b06 	br	7e9c <__alt_data_end+0xfffd7e9c>
    8970:	0009883a 	mov	r4,zero
    8974:	01400044 	movi	r5,1
    8978:	d811883a 	mov	r8,sp
    897c:	003e4f06 	br	82bc <__alt_data_end+0xfffd82bc>
    8980:	d8c02215 	stw	r3,136(sp)
    8984:	002b883a 	mov	r21,zero
    8988:	003db806 	br	806c <__alt_data_end+0xfffd806c>
    898c:	d811883a 	mov	r8,sp
    8990:	003e9606 	br	83ec <__alt_data_end+0xfffd83ec>
    8994:	010000b4 	movhi	r4,2
    8998:	21200504 	addi	r4,r4,-32748
    899c:	d9002315 	stw	r4,140(sp)
    89a0:	003e6306 	br	8330 <__alt_data_end+0xfffd8330>
    89a4:	b0c00043 	ldbu	r3,1(r22)
    89a8:	8c400814 	ori	r17,r17,32
    89ac:	b5800044 	addi	r22,r22,1
    89b0:	18c03fcc 	andi	r3,r3,255
    89b4:	18c0201c 	xori	r3,r3,128
    89b8:	18ffe004 	addi	r3,r3,-128
    89bc:	003b9c06 	br	7830 <__alt_data_end+0xfffd7830>
    89c0:	b809883a 	mov	r4,r23
    89c4:	da002a15 	stw	r8,168(sp)
    89c8:	00075100 	call	7510 <strlen>
    89cc:	1029883a 	mov	r20,r2
    89d0:	dd401d83 	ldbu	r21,118(sp)
    89d4:	df002215 	stw	fp,136(sp)
    89d8:	0021883a 	mov	r16,zero
    89dc:	da002a17 	ldw	r8,168(sp)
    89e0:	003c3906 	br	7ac8 <__alt_data_end+0xfffd7ac8>
    89e4:	d9402017 	ldw	r5,128(sp)
    89e8:	d9002117 	ldw	r4,132(sp)
    89ec:	d9801a04 	addi	r6,sp,104
    89f0:	00075a80 	call	75a8 <__sprint_r.part.0>
    89f4:	103e691e 	bne	r2,zero,839c <__alt_data_end+0xfffd839c>
    89f8:	d9001b17 	ldw	r4,108(sp)
    89fc:	d8801c17 	ldw	r2,112(sp)
    8a00:	d811883a 	mov	r8,sp
    8a04:	21400044 	addi	r5,r4,1
    8a08:	003e2e06 	br	82c4 <__alt_data_end+0xfffd82c4>
    8a0c:	010000b4 	movhi	r4,2
    8a10:	21200904 	addi	r4,r4,-32732
    8a14:	d9002315 	stw	r4,140(sp)
    8a18:	d9001b17 	ldw	r4,108(sp)
    8a1c:	21000044 	addi	r4,r4,1
    8a20:	003c5e06 	br	7b9c <__alt_data_end+0xfffd7b9c>
    8a24:	002b883a 	mov	r21,zero
    8a28:	00800084 	movi	r2,2
    8a2c:	10803fcc 	andi	r2,r2,255
    8a30:	01000044 	movi	r4,1
    8a34:	11002b26 	beq	r2,r4,8ae4 <___vfiprintf_internal_r+0x1428>
    8a38:	01000084 	movi	r4,2
    8a3c:	11002b1e 	bne	r2,r4,8aec <___vfiprintf_internal_r+0x1430>
    8a40:	1823883a 	mov	r17,r3
    8a44:	003ee506 	br	85dc <__alt_data_end+0xfffd85dc>
    8a48:	8807883a 	mov	r3,r17
    8a4c:	00800044 	movi	r2,1
    8a50:	003ff606 	br	8a2c <__alt_data_end+0xfffd8a2c>
    8a54:	00800184 	movi	r2,6
    8a58:	1400012e 	bgeu	r2,r16,8a60 <___vfiprintf_internal_r+0x13a4>
    8a5c:	1021883a 	mov	r16,r2
    8a60:	8029883a 	mov	r20,r16
    8a64:	8027883a 	mov	r19,r16
    8a68:	80002216 	blt	r16,zero,8af4 <___vfiprintf_internal_r+0x1438>
    8a6c:	05c00074 	movhi	r23,1
    8a70:	df002215 	stw	fp,136(sp)
    8a74:	bddfa904 	addi	r23,r23,32420
    8a78:	003cfb06 	br	7e68 <__alt_data_end+0xfffd7e68>
    8a7c:	d9002217 	ldw	r4,136(sp)
    8a80:	d9402417 	ldw	r5,144(sp)
    8a84:	20800017 	ldw	r2,0(r4)
    8a88:	21000104 	addi	r4,r4,4
    8a8c:	d9002215 	stw	r4,136(sp)
    8a90:	11400015 	stw	r5,0(r2)
    8a94:	003b3d06 	br	778c <__alt_data_end+0xfffd778c>
    8a98:	014000b4 	movhi	r5,2
    8a9c:	29600904 	addi	r5,r5,-32732
    8aa0:	d9402315 	stw	r5,140(sp)
    8aa4:	d9401b17 	ldw	r5,108(sp)
    8aa8:	29400044 	addi	r5,r5,1
    8aac:	003e6d06 	br	8464 <__alt_data_end+0xfffd8464>
    8ab0:	8029883a 	mov	r20,r16
    8ab4:	dd401d83 	ldbu	r21,118(sp)
    8ab8:	df002215 	stw	fp,136(sp)
    8abc:	0021883a 	mov	r16,zero
    8ac0:	003c0106 	br	7ac8 <__alt_data_end+0xfffd7ac8>
    8ac4:	00c000b4 	movhi	r3,2
    8ac8:	18e00504 	addi	r3,r3,-32748
    8acc:	d8c02315 	stw	r3,140(sp)
    8ad0:	280d883a 	mov	r6,r5
    8ad4:	003c6906 	br	7c7c <__alt_data_end+0xfffd7c7c>
    8ad8:	802d883a 	mov	r22,r16
    8adc:	0021883a 	mov	r16,zero
    8ae0:	003b5406 	br	7834 <__alt_data_end+0xfffd7834>
    8ae4:	1823883a 	mov	r17,r3
    8ae8:	003cf306 	br	7eb8 <__alt_data_end+0xfffd7eb8>
    8aec:	1823883a 	mov	r17,r3
    8af0:	003cad06 	br	7da8 <__alt_data_end+0xfffd7da8>
    8af4:	0027883a 	mov	r19,zero
    8af8:	003fdc06 	br	8a6c <__alt_data_end+0xfffd8a6c>
    8afc:	d9402217 	ldw	r5,136(sp)
    8b00:	8005883a 	mov	r2,r16
    8b04:	b0c00043 	ldbu	r3,1(r22)
    8b08:	2c000017 	ldw	r16,0(r5)
    8b0c:	29000104 	addi	r4,r5,4
    8b10:	d9002215 	stw	r4,136(sp)
    8b14:	102d883a 	mov	r22,r2
    8b18:	803fa50e 	bge	r16,zero,89b0 <__alt_data_end+0xfffd89b0>
    8b1c:	18c03fcc 	andi	r3,r3,255
    8b20:	18c0201c 	xori	r3,r3,128
    8b24:	043fffc4 	movi	r16,-1
    8b28:	18ffe004 	addi	r3,r3,-128
    8b2c:	003b4006 	br	7830 <__alt_data_end+0xfffd7830>
    8b30:	d9402303 	ldbu	r5,140(sp)
    8b34:	d9401d85 	stb	r5,118(sp)
    8b38:	003cae06 	br	7df4 <__alt_data_end+0xfffd7df4>
    8b3c:	d8c02303 	ldbu	r3,140(sp)
    8b40:	d8c01d85 	stb	r3,118(sp)
    8b44:	003d1406 	br	7f98 <__alt_data_end+0xfffd7f98>
    8b48:	d8c02303 	ldbu	r3,140(sp)
    8b4c:	d8c01d85 	stb	r3,118(sp)
    8b50:	003cca06 	br	7e7c <__alt_data_end+0xfffd7e7c>
    8b54:	8880004c 	andi	r2,r17,1
    8b58:	002b883a 	mov	r21,zero
    8b5c:	10000526 	beq	r2,zero,8b74 <___vfiprintf_internal_r+0x14b8>
    8b60:	00800c04 	movi	r2,48
    8b64:	d88019c5 	stb	r2,103(sp)
    8b68:	dd002817 	ldw	r20,160(sp)
    8b6c:	ddc019c4 	addi	r23,sp,103
    8b70:	003bd506 	br	7ac8 <__alt_data_end+0xfffd7ac8>
    8b74:	0029883a 	mov	r20,zero
    8b78:	ddc01a04 	addi	r23,sp,104
    8b7c:	003bd206 	br	7ac8 <__alt_data_end+0xfffd7ac8>
    8b80:	d9002303 	ldbu	r4,140(sp)
    8b84:	d9001d85 	stb	r4,118(sp)
    8b88:	003da606 	br	8224 <__alt_data_end+0xfffd8224>
    8b8c:	d8c02303 	ldbu	r3,140(sp)
    8b90:	d8c01d85 	stb	r3,118(sp)
    8b94:	003c7606 	br	7d70 <__alt_data_end+0xfffd7d70>
    8b98:	d8c02303 	ldbu	r3,140(sp)
    8b9c:	d8c01d85 	stb	r3,118(sp)
    8ba0:	003c6506 	br	7d38 <__alt_data_end+0xfffd7d38>
    8ba4:	d9002303 	ldbu	r4,140(sp)
    8ba8:	d9001d85 	stb	r4,118(sp)
    8bac:	003d3d06 	br	80a4 <__alt_data_end+0xfffd80a4>
    8bb0:	d8c02303 	ldbu	r3,140(sp)
    8bb4:	d8c01d85 	stb	r3,118(sp)
    8bb8:	003d1d06 	br	8030 <__alt_data_end+0xfffd8030>
    8bbc:	d8c02303 	ldbu	r3,140(sp)
    8bc0:	d8c01d85 	stb	r3,118(sp)
    8bc4:	003d0306 	br	7fd4 <__alt_data_end+0xfffd7fd4>

00008bc8 <__vfiprintf_internal>:
    8bc8:	008000b4 	movhi	r2,2
    8bcc:	10a74e04 	addi	r2,r2,-25288
    8bd0:	300f883a 	mov	r7,r6
    8bd4:	280d883a 	mov	r6,r5
    8bd8:	200b883a 	mov	r5,r4
    8bdc:	11000017 	ldw	r4,0(r2)
    8be0:	00076bc1 	jmpi	76bc <___vfiprintf_internal_r>

00008be4 <__sbprintf>:
    8be4:	2880030b 	ldhu	r2,12(r5)
    8be8:	2ac01917 	ldw	r11,100(r5)
    8bec:	2a80038b 	ldhu	r10,14(r5)
    8bf0:	2a400717 	ldw	r9,28(r5)
    8bf4:	2a000917 	ldw	r8,36(r5)
    8bf8:	defee204 	addi	sp,sp,-1144
    8bfc:	00c10004 	movi	r3,1024
    8c00:	dc011a15 	stw	r16,1128(sp)
    8c04:	10bfff4c 	andi	r2,r2,65533
    8c08:	2821883a 	mov	r16,r5
    8c0c:	d8cb883a 	add	r5,sp,r3
    8c10:	dc811c15 	stw	r18,1136(sp)
    8c14:	dc411b15 	stw	r17,1132(sp)
    8c18:	dfc11d15 	stw	ra,1140(sp)
    8c1c:	2025883a 	mov	r18,r4
    8c20:	d881030d 	sth	r2,1036(sp)
    8c24:	dac11915 	stw	r11,1124(sp)
    8c28:	da81038d 	sth	r10,1038(sp)
    8c2c:	da410715 	stw	r9,1052(sp)
    8c30:	da010915 	stw	r8,1060(sp)
    8c34:	dec10015 	stw	sp,1024(sp)
    8c38:	dec10415 	stw	sp,1040(sp)
    8c3c:	d8c10215 	stw	r3,1032(sp)
    8c40:	d8c10515 	stw	r3,1044(sp)
    8c44:	d8010615 	stw	zero,1048(sp)
    8c48:	00076bc0 	call	76bc <___vfiprintf_internal_r>
    8c4c:	1023883a 	mov	r17,r2
    8c50:	10000416 	blt	r2,zero,8c64 <__sbprintf+0x80>
    8c54:	d9410004 	addi	r5,sp,1024
    8c58:	9009883a 	mov	r4,r18
    8c5c:	00049880 	call	4988 <_fflush_r>
    8c60:	10000d1e 	bne	r2,zero,8c98 <__sbprintf+0xb4>
    8c64:	d881030b 	ldhu	r2,1036(sp)
    8c68:	1080100c 	andi	r2,r2,64
    8c6c:	10000326 	beq	r2,zero,8c7c <__sbprintf+0x98>
    8c70:	8080030b 	ldhu	r2,12(r16)
    8c74:	10801014 	ori	r2,r2,64
    8c78:	8080030d 	sth	r2,12(r16)
    8c7c:	8805883a 	mov	r2,r17
    8c80:	dfc11d17 	ldw	ra,1140(sp)
    8c84:	dc811c17 	ldw	r18,1136(sp)
    8c88:	dc411b17 	ldw	r17,1132(sp)
    8c8c:	dc011a17 	ldw	r16,1128(sp)
    8c90:	dec11e04 	addi	sp,sp,1144
    8c94:	f800283a 	ret
    8c98:	047fffc4 	movi	r17,-1
    8c9c:	003ff106 	br	8c64 <__alt_data_end+0xfffd8c64>

00008ca0 <_write_r>:
    8ca0:	defffd04 	addi	sp,sp,-12
    8ca4:	2805883a 	mov	r2,r5
    8ca8:	dc000015 	stw	r16,0(sp)
    8cac:	040000b4 	movhi	r16,2
    8cb0:	dc400115 	stw	r17,4(sp)
    8cb4:	300b883a 	mov	r5,r6
    8cb8:	842e6404 	addi	r16,r16,-18032
    8cbc:	2023883a 	mov	r17,r4
    8cc0:	380d883a 	mov	r6,r7
    8cc4:	1009883a 	mov	r4,r2
    8cc8:	dfc00215 	stw	ra,8(sp)
    8ccc:	80000015 	stw	zero,0(r16)
    8cd0:	000e12c0 	call	e12c <write>
    8cd4:	00ffffc4 	movi	r3,-1
    8cd8:	10c00526 	beq	r2,r3,8cf0 <_write_r+0x50>
    8cdc:	dfc00217 	ldw	ra,8(sp)
    8ce0:	dc400117 	ldw	r17,4(sp)
    8ce4:	dc000017 	ldw	r16,0(sp)
    8ce8:	dec00304 	addi	sp,sp,12
    8cec:	f800283a 	ret
    8cf0:	80c00017 	ldw	r3,0(r16)
    8cf4:	183ff926 	beq	r3,zero,8cdc <__alt_data_end+0xfffd8cdc>
    8cf8:	88c00015 	stw	r3,0(r17)
    8cfc:	003ff706 	br	8cdc <__alt_data_end+0xfffd8cdc>

00008d00 <_close_r>:
    8d00:	defffd04 	addi	sp,sp,-12
    8d04:	dc000015 	stw	r16,0(sp)
    8d08:	040000b4 	movhi	r16,2
    8d0c:	dc400115 	stw	r17,4(sp)
    8d10:	842e6404 	addi	r16,r16,-18032
    8d14:	2023883a 	mov	r17,r4
    8d18:	2809883a 	mov	r4,r5
    8d1c:	dfc00215 	stw	ra,8(sp)
    8d20:	80000015 	stw	zero,0(r16)
    8d24:	000d63c0 	call	d63c <close>
    8d28:	00ffffc4 	movi	r3,-1
    8d2c:	10c00526 	beq	r2,r3,8d44 <_close_r+0x44>
    8d30:	dfc00217 	ldw	ra,8(sp)
    8d34:	dc400117 	ldw	r17,4(sp)
    8d38:	dc000017 	ldw	r16,0(sp)
    8d3c:	dec00304 	addi	sp,sp,12
    8d40:	f800283a 	ret
    8d44:	80c00017 	ldw	r3,0(r16)
    8d48:	183ff926 	beq	r3,zero,8d30 <__alt_data_end+0xfffd8d30>
    8d4c:	88c00015 	stw	r3,0(r17)
    8d50:	003ff706 	br	8d30 <__alt_data_end+0xfffd8d30>

00008d54 <_calloc_r>:
    8d54:	defffe04 	addi	sp,sp,-8
    8d58:	2805883a 	mov	r2,r5
    8d5c:	dc000015 	stw	r16,0(sp)
    8d60:	300b883a 	mov	r5,r6
    8d64:	2021883a 	mov	r16,r4
    8d68:	1009883a 	mov	r4,r2
    8d6c:	dfc00115 	stw	ra,4(sp)
    8d70:	000ad340 	call	ad34 <__mulsi3>
    8d74:	100b883a 	mov	r5,r2
    8d78:	8009883a 	mov	r4,r16
    8d7c:	00056180 	call	5618 <_malloc_r>
    8d80:	10002926 	beq	r2,zero,8e28 <_calloc_r+0xd4>
    8d84:	11bfff17 	ldw	r6,-4(r2)
    8d88:	1021883a 	mov	r16,r2
    8d8c:	00bfff04 	movi	r2,-4
    8d90:	308c703a 	and	r6,r6,r2
    8d94:	00c00904 	movi	r3,36
    8d98:	308d883a 	add	r6,r6,r2
    8d9c:	19801636 	bltu	r3,r6,8df8 <_calloc_r+0xa4>
    8da0:	008004c4 	movi	r2,19
    8da4:	11800b2e 	bgeu	r2,r6,8dd4 <_calloc_r+0x80>
    8da8:	80000015 	stw	zero,0(r16)
    8dac:	80000115 	stw	zero,4(r16)
    8db0:	008006c4 	movi	r2,27
    8db4:	11801a2e 	bgeu	r2,r6,8e20 <_calloc_r+0xcc>
    8db8:	80000215 	stw	zero,8(r16)
    8dbc:	80000315 	stw	zero,12(r16)
    8dc0:	30c0151e 	bne	r6,r3,8e18 <_calloc_r+0xc4>
    8dc4:	80000415 	stw	zero,16(r16)
    8dc8:	80800604 	addi	r2,r16,24
    8dcc:	80000515 	stw	zero,20(r16)
    8dd0:	00000106 	br	8dd8 <_calloc_r+0x84>
    8dd4:	8005883a 	mov	r2,r16
    8dd8:	10000015 	stw	zero,0(r2)
    8ddc:	10000115 	stw	zero,4(r2)
    8de0:	10000215 	stw	zero,8(r2)
    8de4:	8005883a 	mov	r2,r16
    8de8:	dfc00117 	ldw	ra,4(sp)
    8dec:	dc000017 	ldw	r16,0(sp)
    8df0:	dec00204 	addi	sp,sp,8
    8df4:	f800283a 	ret
    8df8:	000b883a 	mov	r5,zero
    8dfc:	8009883a 	mov	r4,r16
    8e00:	00060500 	call	6050 <memset>
    8e04:	8005883a 	mov	r2,r16
    8e08:	dfc00117 	ldw	ra,4(sp)
    8e0c:	dc000017 	ldw	r16,0(sp)
    8e10:	dec00204 	addi	sp,sp,8
    8e14:	f800283a 	ret
    8e18:	80800404 	addi	r2,r16,16
    8e1c:	003fee06 	br	8dd8 <__alt_data_end+0xfffd8dd8>
    8e20:	80800204 	addi	r2,r16,8
    8e24:	003fec06 	br	8dd8 <__alt_data_end+0xfffd8dd8>
    8e28:	0005883a 	mov	r2,zero
    8e2c:	003fee06 	br	8de8 <__alt_data_end+0xfffd8de8>

00008e30 <_fclose_r>:
    8e30:	28003926 	beq	r5,zero,8f18 <_fclose_r+0xe8>
    8e34:	defffc04 	addi	sp,sp,-16
    8e38:	dc400115 	stw	r17,4(sp)
    8e3c:	dc000015 	stw	r16,0(sp)
    8e40:	dfc00315 	stw	ra,12(sp)
    8e44:	dc800215 	stw	r18,8(sp)
    8e48:	2023883a 	mov	r17,r4
    8e4c:	2821883a 	mov	r16,r5
    8e50:	20000226 	beq	r4,zero,8e5c <_fclose_r+0x2c>
    8e54:	20800e17 	ldw	r2,56(r4)
    8e58:	10002726 	beq	r2,zero,8ef8 <_fclose_r+0xc8>
    8e5c:	8080030f 	ldh	r2,12(r16)
    8e60:	1000071e 	bne	r2,zero,8e80 <_fclose_r+0x50>
    8e64:	0005883a 	mov	r2,zero
    8e68:	dfc00317 	ldw	ra,12(sp)
    8e6c:	dc800217 	ldw	r18,8(sp)
    8e70:	dc400117 	ldw	r17,4(sp)
    8e74:	dc000017 	ldw	r16,0(sp)
    8e78:	dec00404 	addi	sp,sp,16
    8e7c:	f800283a 	ret
    8e80:	800b883a 	mov	r5,r16
    8e84:	8809883a 	mov	r4,r17
    8e88:	000476c0 	call	476c <__sflush_r>
    8e8c:	1025883a 	mov	r18,r2
    8e90:	80800b17 	ldw	r2,44(r16)
    8e94:	10000426 	beq	r2,zero,8ea8 <_fclose_r+0x78>
    8e98:	81400717 	ldw	r5,28(r16)
    8e9c:	8809883a 	mov	r4,r17
    8ea0:	103ee83a 	callr	r2
    8ea4:	10001616 	blt	r2,zero,8f00 <_fclose_r+0xd0>
    8ea8:	8080030b 	ldhu	r2,12(r16)
    8eac:	1080200c 	andi	r2,r2,128
    8eb0:	1000151e 	bne	r2,zero,8f08 <_fclose_r+0xd8>
    8eb4:	81400c17 	ldw	r5,48(r16)
    8eb8:	28000526 	beq	r5,zero,8ed0 <_fclose_r+0xa0>
    8ebc:	80801004 	addi	r2,r16,64
    8ec0:	28800226 	beq	r5,r2,8ecc <_fclose_r+0x9c>
    8ec4:	8809883a 	mov	r4,r17
    8ec8:	0004ee80 	call	4ee8 <_free_r>
    8ecc:	80000c15 	stw	zero,48(r16)
    8ed0:	81401117 	ldw	r5,68(r16)
    8ed4:	28000326 	beq	r5,zero,8ee4 <_fclose_r+0xb4>
    8ed8:	8809883a 	mov	r4,r17
    8edc:	0004ee80 	call	4ee8 <_free_r>
    8ee0:	80001115 	stw	zero,68(r16)
    8ee4:	0004d840 	call	4d84 <__sfp_lock_acquire>
    8ee8:	8000030d 	sth	zero,12(r16)
    8eec:	0004d880 	call	4d88 <__sfp_lock_release>
    8ef0:	9005883a 	mov	r2,r18
    8ef4:	003fdc06 	br	8e68 <__alt_data_end+0xfffd8e68>
    8ef8:	0004d740 	call	4d74 <__sinit>
    8efc:	003fd706 	br	8e5c <__alt_data_end+0xfffd8e5c>
    8f00:	04bfffc4 	movi	r18,-1
    8f04:	003fe806 	br	8ea8 <__alt_data_end+0xfffd8ea8>
    8f08:	81400417 	ldw	r5,16(r16)
    8f0c:	8809883a 	mov	r4,r17
    8f10:	0004ee80 	call	4ee8 <_free_r>
    8f14:	003fe706 	br	8eb4 <__alt_data_end+0xfffd8eb4>
    8f18:	0005883a 	mov	r2,zero
    8f1c:	f800283a 	ret

00008f20 <fclose>:
    8f20:	008000b4 	movhi	r2,2
    8f24:	10a74e04 	addi	r2,r2,-25288
    8f28:	200b883a 	mov	r5,r4
    8f2c:	11000017 	ldw	r4,0(r2)
    8f30:	0008e301 	jmpi	8e30 <_fclose_r>

00008f34 <__fputwc>:
    8f34:	defff804 	addi	sp,sp,-32
    8f38:	dcc00415 	stw	r19,16(sp)
    8f3c:	dc800315 	stw	r18,12(sp)
    8f40:	dc000115 	stw	r16,4(sp)
    8f44:	dfc00715 	stw	ra,28(sp)
    8f48:	dd400615 	stw	r21,24(sp)
    8f4c:	dd000515 	stw	r20,20(sp)
    8f50:	dc400215 	stw	r17,8(sp)
    8f54:	2027883a 	mov	r19,r4
    8f58:	2825883a 	mov	r18,r5
    8f5c:	3021883a 	mov	r16,r6
    8f60:	00054080 	call	5408 <__locale_mb_cur_max>
    8f64:	00c00044 	movi	r3,1
    8f68:	10c03e26 	beq	r2,r3,9064 <__fputwc+0x130>
    8f6c:	81c01704 	addi	r7,r16,92
    8f70:	900d883a 	mov	r6,r18
    8f74:	d80b883a 	mov	r5,sp
    8f78:	9809883a 	mov	r4,r19
    8f7c:	0009f8c0 	call	9f8c <_wcrtomb_r>
    8f80:	1029883a 	mov	r20,r2
    8f84:	00bfffc4 	movi	r2,-1
    8f88:	a0802026 	beq	r20,r2,900c <__fputwc+0xd8>
    8f8c:	d9400003 	ldbu	r5,0(sp)
    8f90:	a0001c26 	beq	r20,zero,9004 <__fputwc+0xd0>
    8f94:	0023883a 	mov	r17,zero
    8f98:	05400284 	movi	r21,10
    8f9c:	00000906 	br	8fc4 <__fputwc+0x90>
    8fa0:	80800017 	ldw	r2,0(r16)
    8fa4:	11400005 	stb	r5,0(r2)
    8fa8:	80c00017 	ldw	r3,0(r16)
    8fac:	18c00044 	addi	r3,r3,1
    8fb0:	80c00015 	stw	r3,0(r16)
    8fb4:	8c400044 	addi	r17,r17,1
    8fb8:	dc45883a 	add	r2,sp,r17
    8fbc:	8d00112e 	bgeu	r17,r20,9004 <__fputwc+0xd0>
    8fc0:	11400003 	ldbu	r5,0(r2)
    8fc4:	80c00217 	ldw	r3,8(r16)
    8fc8:	18ffffc4 	addi	r3,r3,-1
    8fcc:	80c00215 	stw	r3,8(r16)
    8fd0:	183ff30e 	bge	r3,zero,8fa0 <__alt_data_end+0xfffd8fa0>
    8fd4:	80800617 	ldw	r2,24(r16)
    8fd8:	18801916 	blt	r3,r2,9040 <__fputwc+0x10c>
    8fdc:	80800017 	ldw	r2,0(r16)
    8fe0:	11400005 	stb	r5,0(r2)
    8fe4:	80800017 	ldw	r2,0(r16)
    8fe8:	10c00003 	ldbu	r3,0(r2)
    8fec:	10800044 	addi	r2,r2,1
    8ff0:	1d402326 	beq	r3,r21,9080 <__fputwc+0x14c>
    8ff4:	80800015 	stw	r2,0(r16)
    8ff8:	8c400044 	addi	r17,r17,1
    8ffc:	dc45883a 	add	r2,sp,r17
    9000:	8d3fef36 	bltu	r17,r20,8fc0 <__alt_data_end+0xfffd8fc0>
    9004:	9005883a 	mov	r2,r18
    9008:	00000406 	br	901c <__fputwc+0xe8>
    900c:	80c0030b 	ldhu	r3,12(r16)
    9010:	a005883a 	mov	r2,r20
    9014:	18c01014 	ori	r3,r3,64
    9018:	80c0030d 	sth	r3,12(r16)
    901c:	dfc00717 	ldw	ra,28(sp)
    9020:	dd400617 	ldw	r21,24(sp)
    9024:	dd000517 	ldw	r20,20(sp)
    9028:	dcc00417 	ldw	r19,16(sp)
    902c:	dc800317 	ldw	r18,12(sp)
    9030:	dc400217 	ldw	r17,8(sp)
    9034:	dc000117 	ldw	r16,4(sp)
    9038:	dec00804 	addi	sp,sp,32
    903c:	f800283a 	ret
    9040:	800d883a 	mov	r6,r16
    9044:	29403fcc 	andi	r5,r5,255
    9048:	9809883a 	mov	r4,r19
    904c:	0009e340 	call	9e34 <__swbuf_r>
    9050:	10bfffe0 	cmpeqi	r2,r2,-1
    9054:	10803fcc 	andi	r2,r2,255
    9058:	103fd626 	beq	r2,zero,8fb4 <__alt_data_end+0xfffd8fb4>
    905c:	00bfffc4 	movi	r2,-1
    9060:	003fee06 	br	901c <__alt_data_end+0xfffd901c>
    9064:	90ffffc4 	addi	r3,r18,-1
    9068:	01003f84 	movi	r4,254
    906c:	20ffbf36 	bltu	r4,r3,8f6c <__alt_data_end+0xfffd8f6c>
    9070:	900b883a 	mov	r5,r18
    9074:	dc800005 	stb	r18,0(sp)
    9078:	1029883a 	mov	r20,r2
    907c:	003fc506 	br	8f94 <__alt_data_end+0xfffd8f94>
    9080:	800d883a 	mov	r6,r16
    9084:	a80b883a 	mov	r5,r21
    9088:	9809883a 	mov	r4,r19
    908c:	0009e340 	call	9e34 <__swbuf_r>
    9090:	10bfffe0 	cmpeqi	r2,r2,-1
    9094:	003fef06 	br	9054 <__alt_data_end+0xfffd9054>

00009098 <_fputwc_r>:
    9098:	3080030b 	ldhu	r2,12(r6)
    909c:	10c8000c 	andi	r3,r2,8192
    90a0:	1800051e 	bne	r3,zero,90b8 <_fputwc_r+0x20>
    90a4:	30c01917 	ldw	r3,100(r6)
    90a8:	10880014 	ori	r2,r2,8192
    90ac:	3080030d 	sth	r2,12(r6)
    90b0:	18880014 	ori	r2,r3,8192
    90b4:	30801915 	stw	r2,100(r6)
    90b8:	0008f341 	jmpi	8f34 <__fputwc>

000090bc <fputwc>:
    90bc:	008000b4 	movhi	r2,2
    90c0:	defffc04 	addi	sp,sp,-16
    90c4:	10a74e04 	addi	r2,r2,-25288
    90c8:	dc000115 	stw	r16,4(sp)
    90cc:	14000017 	ldw	r16,0(r2)
    90d0:	dc400215 	stw	r17,8(sp)
    90d4:	dfc00315 	stw	ra,12(sp)
    90d8:	2023883a 	mov	r17,r4
    90dc:	80000226 	beq	r16,zero,90e8 <fputwc+0x2c>
    90e0:	80800e17 	ldw	r2,56(r16)
    90e4:	10001026 	beq	r2,zero,9128 <fputwc+0x6c>
    90e8:	2880030b 	ldhu	r2,12(r5)
    90ec:	10c8000c 	andi	r3,r2,8192
    90f0:	1800051e 	bne	r3,zero,9108 <fputwc+0x4c>
    90f4:	28c01917 	ldw	r3,100(r5)
    90f8:	10880014 	ori	r2,r2,8192
    90fc:	2880030d 	sth	r2,12(r5)
    9100:	18880014 	ori	r2,r3,8192
    9104:	28801915 	stw	r2,100(r5)
    9108:	280d883a 	mov	r6,r5
    910c:	8009883a 	mov	r4,r16
    9110:	880b883a 	mov	r5,r17
    9114:	dfc00317 	ldw	ra,12(sp)
    9118:	dc400217 	ldw	r17,8(sp)
    911c:	dc000117 	ldw	r16,4(sp)
    9120:	dec00404 	addi	sp,sp,16
    9124:	0008f341 	jmpi	8f34 <__fputwc>
    9128:	8009883a 	mov	r4,r16
    912c:	d9400015 	stw	r5,0(sp)
    9130:	0004d740 	call	4d74 <__sinit>
    9134:	d9400017 	ldw	r5,0(sp)
    9138:	003feb06 	br	90e8 <__alt_data_end+0xfffd90e8>

0000913c <_fstat_r>:
    913c:	defffd04 	addi	sp,sp,-12
    9140:	2805883a 	mov	r2,r5
    9144:	dc000015 	stw	r16,0(sp)
    9148:	040000b4 	movhi	r16,2
    914c:	dc400115 	stw	r17,4(sp)
    9150:	842e6404 	addi	r16,r16,-18032
    9154:	2023883a 	mov	r17,r4
    9158:	300b883a 	mov	r5,r6
    915c:	1009883a 	mov	r4,r2
    9160:	dfc00215 	stw	ra,8(sp)
    9164:	80000015 	stw	zero,0(r16)
    9168:	000d77c0 	call	d77c <fstat>
    916c:	00ffffc4 	movi	r3,-1
    9170:	10c00526 	beq	r2,r3,9188 <_fstat_r+0x4c>
    9174:	dfc00217 	ldw	ra,8(sp)
    9178:	dc400117 	ldw	r17,4(sp)
    917c:	dc000017 	ldw	r16,0(sp)
    9180:	dec00304 	addi	sp,sp,12
    9184:	f800283a 	ret
    9188:	80c00017 	ldw	r3,0(r16)
    918c:	183ff926 	beq	r3,zero,9174 <__alt_data_end+0xfffd9174>
    9190:	88c00015 	stw	r3,0(r17)
    9194:	003ff706 	br	9174 <__alt_data_end+0xfffd9174>

00009198 <__sfvwrite_r>:
    9198:	30800217 	ldw	r2,8(r6)
    919c:	10006726 	beq	r2,zero,933c <__sfvwrite_r+0x1a4>
    91a0:	28c0030b 	ldhu	r3,12(r5)
    91a4:	defff404 	addi	sp,sp,-48
    91a8:	dd400715 	stw	r21,28(sp)
    91ac:	dd000615 	stw	r20,24(sp)
    91b0:	dc000215 	stw	r16,8(sp)
    91b4:	dfc00b15 	stw	ra,44(sp)
    91b8:	df000a15 	stw	fp,40(sp)
    91bc:	ddc00915 	stw	r23,36(sp)
    91c0:	dd800815 	stw	r22,32(sp)
    91c4:	dcc00515 	stw	r19,20(sp)
    91c8:	dc800415 	stw	r18,16(sp)
    91cc:	dc400315 	stw	r17,12(sp)
    91d0:	1880020c 	andi	r2,r3,8
    91d4:	2821883a 	mov	r16,r5
    91d8:	202b883a 	mov	r21,r4
    91dc:	3029883a 	mov	r20,r6
    91e0:	10002726 	beq	r2,zero,9280 <__sfvwrite_r+0xe8>
    91e4:	28800417 	ldw	r2,16(r5)
    91e8:	10002526 	beq	r2,zero,9280 <__sfvwrite_r+0xe8>
    91ec:	1880008c 	andi	r2,r3,2
    91f0:	a4400017 	ldw	r17,0(r20)
    91f4:	10002a26 	beq	r2,zero,92a0 <__sfvwrite_r+0x108>
    91f8:	05a00034 	movhi	r22,32768
    91fc:	0027883a 	mov	r19,zero
    9200:	0025883a 	mov	r18,zero
    9204:	b5bf0004 	addi	r22,r22,-1024
    9208:	980d883a 	mov	r6,r19
    920c:	a809883a 	mov	r4,r21
    9210:	90004626 	beq	r18,zero,932c <__sfvwrite_r+0x194>
    9214:	900f883a 	mov	r7,r18
    9218:	b480022e 	bgeu	r22,r18,9224 <__sfvwrite_r+0x8c>
    921c:	01e00034 	movhi	r7,32768
    9220:	39ff0004 	addi	r7,r7,-1024
    9224:	80800917 	ldw	r2,36(r16)
    9228:	81400717 	ldw	r5,28(r16)
    922c:	103ee83a 	callr	r2
    9230:	00805a0e 	bge	zero,r2,939c <__sfvwrite_r+0x204>
    9234:	a0c00217 	ldw	r3,8(r20)
    9238:	98a7883a 	add	r19,r19,r2
    923c:	90a5c83a 	sub	r18,r18,r2
    9240:	1885c83a 	sub	r2,r3,r2
    9244:	a0800215 	stw	r2,8(r20)
    9248:	103fef1e 	bne	r2,zero,9208 <__alt_data_end+0xfffd9208>
    924c:	0005883a 	mov	r2,zero
    9250:	dfc00b17 	ldw	ra,44(sp)
    9254:	df000a17 	ldw	fp,40(sp)
    9258:	ddc00917 	ldw	r23,36(sp)
    925c:	dd800817 	ldw	r22,32(sp)
    9260:	dd400717 	ldw	r21,28(sp)
    9264:	dd000617 	ldw	r20,24(sp)
    9268:	dcc00517 	ldw	r19,20(sp)
    926c:	dc800417 	ldw	r18,16(sp)
    9270:	dc400317 	ldw	r17,12(sp)
    9274:	dc000217 	ldw	r16,8(sp)
    9278:	dec00c04 	addi	sp,sp,48
    927c:	f800283a 	ret
    9280:	800b883a 	mov	r5,r16
    9284:	a809883a 	mov	r4,r21
    9288:	0002d680 	call	2d68 <__swsetup_r>
    928c:	1000ee1e 	bne	r2,zero,9648 <__sfvwrite_r+0x4b0>
    9290:	80c0030b 	ldhu	r3,12(r16)
    9294:	a4400017 	ldw	r17,0(r20)
    9298:	1880008c 	andi	r2,r3,2
    929c:	103fd61e 	bne	r2,zero,91f8 <__alt_data_end+0xfffd91f8>
    92a0:	1880004c 	andi	r2,r3,1
    92a4:	1000421e 	bne	r2,zero,93b0 <__sfvwrite_r+0x218>
    92a8:	0039883a 	mov	fp,zero
    92ac:	0025883a 	mov	r18,zero
    92b0:	90001a26 	beq	r18,zero,931c <__sfvwrite_r+0x184>
    92b4:	1880800c 	andi	r2,r3,512
    92b8:	84c00217 	ldw	r19,8(r16)
    92bc:	10002126 	beq	r2,zero,9344 <__sfvwrite_r+0x1ac>
    92c0:	982f883a 	mov	r23,r19
    92c4:	94c09636 	bltu	r18,r19,9520 <__sfvwrite_r+0x388>
    92c8:	1881200c 	andi	r2,r3,1152
    92cc:	1000a11e 	bne	r2,zero,9554 <__sfvwrite_r+0x3bc>
    92d0:	81000017 	ldw	r4,0(r16)
    92d4:	b80d883a 	mov	r6,r23
    92d8:	e00b883a 	mov	r5,fp
    92dc:	00097140 	call	9714 <memmove>
    92e0:	80c00217 	ldw	r3,8(r16)
    92e4:	81000017 	ldw	r4,0(r16)
    92e8:	9005883a 	mov	r2,r18
    92ec:	1ce7c83a 	sub	r19,r3,r19
    92f0:	25cf883a 	add	r7,r4,r23
    92f4:	84c00215 	stw	r19,8(r16)
    92f8:	81c00015 	stw	r7,0(r16)
    92fc:	a0c00217 	ldw	r3,8(r20)
    9300:	e0b9883a 	add	fp,fp,r2
    9304:	90a5c83a 	sub	r18,r18,r2
    9308:	18a7c83a 	sub	r19,r3,r2
    930c:	a4c00215 	stw	r19,8(r20)
    9310:	983fce26 	beq	r19,zero,924c <__alt_data_end+0xfffd924c>
    9314:	80c0030b 	ldhu	r3,12(r16)
    9318:	903fe61e 	bne	r18,zero,92b4 <__alt_data_end+0xfffd92b4>
    931c:	8f000017 	ldw	fp,0(r17)
    9320:	8c800117 	ldw	r18,4(r17)
    9324:	8c400204 	addi	r17,r17,8
    9328:	003fe106 	br	92b0 <__alt_data_end+0xfffd92b0>
    932c:	8cc00017 	ldw	r19,0(r17)
    9330:	8c800117 	ldw	r18,4(r17)
    9334:	8c400204 	addi	r17,r17,8
    9338:	003fb306 	br	9208 <__alt_data_end+0xfffd9208>
    933c:	0005883a 	mov	r2,zero
    9340:	f800283a 	ret
    9344:	81000017 	ldw	r4,0(r16)
    9348:	80800417 	ldw	r2,16(r16)
    934c:	11005a36 	bltu	r2,r4,94b8 <__sfvwrite_r+0x320>
    9350:	85c00517 	ldw	r23,20(r16)
    9354:	95c05836 	bltu	r18,r23,94b8 <__sfvwrite_r+0x320>
    9358:	00a00034 	movhi	r2,32768
    935c:	10bfffc4 	addi	r2,r2,-1
    9360:	9009883a 	mov	r4,r18
    9364:	1480012e 	bgeu	r2,r18,936c <__sfvwrite_r+0x1d4>
    9368:	1009883a 	mov	r4,r2
    936c:	b80b883a 	mov	r5,r23
    9370:	00007940 	call	794 <__divsi3>
    9374:	b80b883a 	mov	r5,r23
    9378:	1009883a 	mov	r4,r2
    937c:	000ad340 	call	ad34 <__mulsi3>
    9380:	81400717 	ldw	r5,28(r16)
    9384:	80c00917 	ldw	r3,36(r16)
    9388:	100f883a 	mov	r7,r2
    938c:	e00d883a 	mov	r6,fp
    9390:	a809883a 	mov	r4,r21
    9394:	183ee83a 	callr	r3
    9398:	00bfd816 	blt	zero,r2,92fc <__alt_data_end+0xfffd92fc>
    939c:	8080030b 	ldhu	r2,12(r16)
    93a0:	10801014 	ori	r2,r2,64
    93a4:	8080030d 	sth	r2,12(r16)
    93a8:	00bfffc4 	movi	r2,-1
    93ac:	003fa806 	br	9250 <__alt_data_end+0xfffd9250>
    93b0:	0027883a 	mov	r19,zero
    93b4:	0011883a 	mov	r8,zero
    93b8:	0039883a 	mov	fp,zero
    93bc:	0025883a 	mov	r18,zero
    93c0:	90001f26 	beq	r18,zero,9440 <__sfvwrite_r+0x2a8>
    93c4:	40005a26 	beq	r8,zero,9530 <__sfvwrite_r+0x398>
    93c8:	982d883a 	mov	r22,r19
    93cc:	94c0012e 	bgeu	r18,r19,93d4 <__sfvwrite_r+0x23c>
    93d0:	902d883a 	mov	r22,r18
    93d4:	81000017 	ldw	r4,0(r16)
    93d8:	80800417 	ldw	r2,16(r16)
    93dc:	b02f883a 	mov	r23,r22
    93e0:	81c00517 	ldw	r7,20(r16)
    93e4:	1100032e 	bgeu	r2,r4,93f4 <__sfvwrite_r+0x25c>
    93e8:	80c00217 	ldw	r3,8(r16)
    93ec:	38c7883a 	add	r3,r7,r3
    93f0:	1d801816 	blt	r3,r22,9454 <__sfvwrite_r+0x2bc>
    93f4:	b1c03e16 	blt	r22,r7,94f0 <__sfvwrite_r+0x358>
    93f8:	80800917 	ldw	r2,36(r16)
    93fc:	81400717 	ldw	r5,28(r16)
    9400:	e00d883a 	mov	r6,fp
    9404:	da000115 	stw	r8,4(sp)
    9408:	a809883a 	mov	r4,r21
    940c:	103ee83a 	callr	r2
    9410:	102f883a 	mov	r23,r2
    9414:	da000117 	ldw	r8,4(sp)
    9418:	00bfe00e 	bge	zero,r2,939c <__alt_data_end+0xfffd939c>
    941c:	9de7c83a 	sub	r19,r19,r23
    9420:	98001f26 	beq	r19,zero,94a0 <__sfvwrite_r+0x308>
    9424:	a0800217 	ldw	r2,8(r20)
    9428:	e5f9883a 	add	fp,fp,r23
    942c:	95e5c83a 	sub	r18,r18,r23
    9430:	15efc83a 	sub	r23,r2,r23
    9434:	a5c00215 	stw	r23,8(r20)
    9438:	b83f8426 	beq	r23,zero,924c <__alt_data_end+0xfffd924c>
    943c:	903fe11e 	bne	r18,zero,93c4 <__alt_data_end+0xfffd93c4>
    9440:	8f000017 	ldw	fp,0(r17)
    9444:	8c800117 	ldw	r18,4(r17)
    9448:	0011883a 	mov	r8,zero
    944c:	8c400204 	addi	r17,r17,8
    9450:	003fdb06 	br	93c0 <__alt_data_end+0xfffd93c0>
    9454:	180d883a 	mov	r6,r3
    9458:	e00b883a 	mov	r5,fp
    945c:	da000115 	stw	r8,4(sp)
    9460:	d8c00015 	stw	r3,0(sp)
    9464:	00097140 	call	9714 <memmove>
    9468:	d8c00017 	ldw	r3,0(sp)
    946c:	80800017 	ldw	r2,0(r16)
    9470:	800b883a 	mov	r5,r16
    9474:	a809883a 	mov	r4,r21
    9478:	10c5883a 	add	r2,r2,r3
    947c:	80800015 	stw	r2,0(r16)
    9480:	d8c00015 	stw	r3,0(sp)
    9484:	00049880 	call	4988 <_fflush_r>
    9488:	d8c00017 	ldw	r3,0(sp)
    948c:	da000117 	ldw	r8,4(sp)
    9490:	103fc21e 	bne	r2,zero,939c <__alt_data_end+0xfffd939c>
    9494:	182f883a 	mov	r23,r3
    9498:	9de7c83a 	sub	r19,r19,r23
    949c:	983fe11e 	bne	r19,zero,9424 <__alt_data_end+0xfffd9424>
    94a0:	800b883a 	mov	r5,r16
    94a4:	a809883a 	mov	r4,r21
    94a8:	00049880 	call	4988 <_fflush_r>
    94ac:	103fbb1e 	bne	r2,zero,939c <__alt_data_end+0xfffd939c>
    94b0:	0011883a 	mov	r8,zero
    94b4:	003fdb06 	br	9424 <__alt_data_end+0xfffd9424>
    94b8:	94c0012e 	bgeu	r18,r19,94c0 <__sfvwrite_r+0x328>
    94bc:	9027883a 	mov	r19,r18
    94c0:	980d883a 	mov	r6,r19
    94c4:	e00b883a 	mov	r5,fp
    94c8:	00097140 	call	9714 <memmove>
    94cc:	80800217 	ldw	r2,8(r16)
    94d0:	80c00017 	ldw	r3,0(r16)
    94d4:	14c5c83a 	sub	r2,r2,r19
    94d8:	1cc7883a 	add	r3,r3,r19
    94dc:	80800215 	stw	r2,8(r16)
    94e0:	80c00015 	stw	r3,0(r16)
    94e4:	10004326 	beq	r2,zero,95f4 <__sfvwrite_r+0x45c>
    94e8:	9805883a 	mov	r2,r19
    94ec:	003f8306 	br	92fc <__alt_data_end+0xfffd92fc>
    94f0:	b00d883a 	mov	r6,r22
    94f4:	e00b883a 	mov	r5,fp
    94f8:	da000115 	stw	r8,4(sp)
    94fc:	00097140 	call	9714 <memmove>
    9500:	80800217 	ldw	r2,8(r16)
    9504:	80c00017 	ldw	r3,0(r16)
    9508:	da000117 	ldw	r8,4(sp)
    950c:	1585c83a 	sub	r2,r2,r22
    9510:	1dad883a 	add	r22,r3,r22
    9514:	80800215 	stw	r2,8(r16)
    9518:	85800015 	stw	r22,0(r16)
    951c:	003fbf06 	br	941c <__alt_data_end+0xfffd941c>
    9520:	81000017 	ldw	r4,0(r16)
    9524:	9027883a 	mov	r19,r18
    9528:	902f883a 	mov	r23,r18
    952c:	003f6906 	br	92d4 <__alt_data_end+0xfffd92d4>
    9530:	900d883a 	mov	r6,r18
    9534:	01400284 	movi	r5,10
    9538:	e009883a 	mov	r4,fp
    953c:	0005e240 	call	5e24 <memchr>
    9540:	10003e26 	beq	r2,zero,963c <__sfvwrite_r+0x4a4>
    9544:	10800044 	addi	r2,r2,1
    9548:	1727c83a 	sub	r19,r2,fp
    954c:	02000044 	movi	r8,1
    9550:	003f9d06 	br	93c8 <__alt_data_end+0xfffd93c8>
    9554:	80800517 	ldw	r2,20(r16)
    9558:	81400417 	ldw	r5,16(r16)
    955c:	81c00017 	ldw	r7,0(r16)
    9560:	10a7883a 	add	r19,r2,r2
    9564:	9885883a 	add	r2,r19,r2
    9568:	1026d7fa 	srli	r19,r2,31
    956c:	396dc83a 	sub	r22,r7,r5
    9570:	b1000044 	addi	r4,r22,1
    9574:	9885883a 	add	r2,r19,r2
    9578:	1027d07a 	srai	r19,r2,1
    957c:	2485883a 	add	r2,r4,r18
    9580:	980d883a 	mov	r6,r19
    9584:	9880022e 	bgeu	r19,r2,9590 <__sfvwrite_r+0x3f8>
    9588:	1027883a 	mov	r19,r2
    958c:	100d883a 	mov	r6,r2
    9590:	18c1000c 	andi	r3,r3,1024
    9594:	18001c26 	beq	r3,zero,9608 <__sfvwrite_r+0x470>
    9598:	300b883a 	mov	r5,r6
    959c:	a809883a 	mov	r4,r21
    95a0:	00056180 	call	5618 <_malloc_r>
    95a4:	102f883a 	mov	r23,r2
    95a8:	10002926 	beq	r2,zero,9650 <__sfvwrite_r+0x4b8>
    95ac:	81400417 	ldw	r5,16(r16)
    95b0:	b00d883a 	mov	r6,r22
    95b4:	1009883a 	mov	r4,r2
    95b8:	0005f080 	call	5f08 <memcpy>
    95bc:	8080030b 	ldhu	r2,12(r16)
    95c0:	00fedfc4 	movi	r3,-1153
    95c4:	10c4703a 	and	r2,r2,r3
    95c8:	10802014 	ori	r2,r2,128
    95cc:	8080030d 	sth	r2,12(r16)
    95d0:	bd89883a 	add	r4,r23,r22
    95d4:	9d8fc83a 	sub	r7,r19,r22
    95d8:	85c00415 	stw	r23,16(r16)
    95dc:	84c00515 	stw	r19,20(r16)
    95e0:	81000015 	stw	r4,0(r16)
    95e4:	9027883a 	mov	r19,r18
    95e8:	81c00215 	stw	r7,8(r16)
    95ec:	902f883a 	mov	r23,r18
    95f0:	003f3806 	br	92d4 <__alt_data_end+0xfffd92d4>
    95f4:	800b883a 	mov	r5,r16
    95f8:	a809883a 	mov	r4,r21
    95fc:	00049880 	call	4988 <_fflush_r>
    9600:	103fb926 	beq	r2,zero,94e8 <__alt_data_end+0xfffd94e8>
    9604:	003f6506 	br	939c <__alt_data_end+0xfffd939c>
    9608:	a809883a 	mov	r4,r21
    960c:	00098d00 	call	98d0 <_realloc_r>
    9610:	102f883a 	mov	r23,r2
    9614:	103fee1e 	bne	r2,zero,95d0 <__alt_data_end+0xfffd95d0>
    9618:	81400417 	ldw	r5,16(r16)
    961c:	a809883a 	mov	r4,r21
    9620:	0004ee80 	call	4ee8 <_free_r>
    9624:	8080030b 	ldhu	r2,12(r16)
    9628:	00ffdfc4 	movi	r3,-129
    962c:	1884703a 	and	r2,r3,r2
    9630:	00c00304 	movi	r3,12
    9634:	a8c00015 	stw	r3,0(r21)
    9638:	003f5906 	br	93a0 <__alt_data_end+0xfffd93a0>
    963c:	94c00044 	addi	r19,r18,1
    9640:	02000044 	movi	r8,1
    9644:	003f6006 	br	93c8 <__alt_data_end+0xfffd93c8>
    9648:	00bfffc4 	movi	r2,-1
    964c:	003f0006 	br	9250 <__alt_data_end+0xfffd9250>
    9650:	00800304 	movi	r2,12
    9654:	a8800015 	stw	r2,0(r21)
    9658:	8080030b 	ldhu	r2,12(r16)
    965c:	003f5006 	br	93a0 <__alt_data_end+0xfffd93a0>

00009660 <_isatty_r>:
    9660:	defffd04 	addi	sp,sp,-12
    9664:	dc000015 	stw	r16,0(sp)
    9668:	040000b4 	movhi	r16,2
    966c:	dc400115 	stw	r17,4(sp)
    9670:	842e6404 	addi	r16,r16,-18032
    9674:	2023883a 	mov	r17,r4
    9678:	2809883a 	mov	r4,r5
    967c:	dfc00215 	stw	ra,8(sp)
    9680:	80000015 	stw	zero,0(r16)
    9684:	000db100 	call	db10 <isatty>
    9688:	00ffffc4 	movi	r3,-1
    968c:	10c00526 	beq	r2,r3,96a4 <_isatty_r+0x44>
    9690:	dfc00217 	ldw	ra,8(sp)
    9694:	dc400117 	ldw	r17,4(sp)
    9698:	dc000017 	ldw	r16,0(sp)
    969c:	dec00304 	addi	sp,sp,12
    96a0:	f800283a 	ret
    96a4:	80c00017 	ldw	r3,0(r16)
    96a8:	183ff926 	beq	r3,zero,9690 <__alt_data_end+0xfffd9690>
    96ac:	88c00015 	stw	r3,0(r17)
    96b0:	003ff706 	br	9690 <__alt_data_end+0xfffd9690>

000096b4 <_lseek_r>:
    96b4:	defffd04 	addi	sp,sp,-12
    96b8:	2805883a 	mov	r2,r5
    96bc:	dc000015 	stw	r16,0(sp)
    96c0:	040000b4 	movhi	r16,2
    96c4:	dc400115 	stw	r17,4(sp)
    96c8:	300b883a 	mov	r5,r6
    96cc:	842e6404 	addi	r16,r16,-18032
    96d0:	2023883a 	mov	r17,r4
    96d4:	380d883a 	mov	r6,r7
    96d8:	1009883a 	mov	r4,r2
    96dc:	dfc00215 	stw	ra,8(sp)
    96e0:	80000015 	stw	zero,0(r16)
    96e4:	000dce40 	call	dce4 <lseek>
    96e8:	00ffffc4 	movi	r3,-1
    96ec:	10c00526 	beq	r2,r3,9704 <_lseek_r+0x50>
    96f0:	dfc00217 	ldw	ra,8(sp)
    96f4:	dc400117 	ldw	r17,4(sp)
    96f8:	dc000017 	ldw	r16,0(sp)
    96fc:	dec00304 	addi	sp,sp,12
    9700:	f800283a 	ret
    9704:	80c00017 	ldw	r3,0(r16)
    9708:	183ff926 	beq	r3,zero,96f0 <__alt_data_end+0xfffd96f0>
    970c:	88c00015 	stw	r3,0(r17)
    9710:	003ff706 	br	96f0 <__alt_data_end+0xfffd96f0>

00009714 <memmove>:
    9714:	2005883a 	mov	r2,r4
    9718:	29000b2e 	bgeu	r5,r4,9748 <memmove+0x34>
    971c:	298f883a 	add	r7,r5,r6
    9720:	21c0092e 	bgeu	r4,r7,9748 <memmove+0x34>
    9724:	2187883a 	add	r3,r4,r6
    9728:	198bc83a 	sub	r5,r3,r6
    972c:	30004826 	beq	r6,zero,9850 <memmove+0x13c>
    9730:	39ffffc4 	addi	r7,r7,-1
    9734:	39000003 	ldbu	r4,0(r7)
    9738:	18ffffc4 	addi	r3,r3,-1
    973c:	19000005 	stb	r4,0(r3)
    9740:	28fffb1e 	bne	r5,r3,9730 <__alt_data_end+0xfffd9730>
    9744:	f800283a 	ret
    9748:	00c003c4 	movi	r3,15
    974c:	1980412e 	bgeu	r3,r6,9854 <memmove+0x140>
    9750:	2886b03a 	or	r3,r5,r2
    9754:	18c000cc 	andi	r3,r3,3
    9758:	1800401e 	bne	r3,zero,985c <memmove+0x148>
    975c:	33fffc04 	addi	r15,r6,-16
    9760:	781ed13a 	srli	r15,r15,4
    9764:	28c00104 	addi	r3,r5,4
    9768:	13400104 	addi	r13,r2,4
    976c:	781c913a 	slli	r14,r15,4
    9770:	2b000204 	addi	r12,r5,8
    9774:	12c00204 	addi	r11,r2,8
    9778:	73800504 	addi	r14,r14,20
    977c:	2a800304 	addi	r10,r5,12
    9780:	12400304 	addi	r9,r2,12
    9784:	2b9d883a 	add	r14,r5,r14
    9788:	2811883a 	mov	r8,r5
    978c:	100f883a 	mov	r7,r2
    9790:	41000017 	ldw	r4,0(r8)
    9794:	39c00404 	addi	r7,r7,16
    9798:	18c00404 	addi	r3,r3,16
    979c:	393ffc15 	stw	r4,-16(r7)
    97a0:	193ffc17 	ldw	r4,-16(r3)
    97a4:	6b400404 	addi	r13,r13,16
    97a8:	5ac00404 	addi	r11,r11,16
    97ac:	693ffc15 	stw	r4,-16(r13)
    97b0:	61000017 	ldw	r4,0(r12)
    97b4:	4a400404 	addi	r9,r9,16
    97b8:	42000404 	addi	r8,r8,16
    97bc:	593ffc15 	stw	r4,-16(r11)
    97c0:	51000017 	ldw	r4,0(r10)
    97c4:	63000404 	addi	r12,r12,16
    97c8:	52800404 	addi	r10,r10,16
    97cc:	493ffc15 	stw	r4,-16(r9)
    97d0:	1bbfef1e 	bne	r3,r14,9790 <__alt_data_end+0xfffd9790>
    97d4:	79000044 	addi	r4,r15,1
    97d8:	2008913a 	slli	r4,r4,4
    97dc:	328003cc 	andi	r10,r6,15
    97e0:	02c000c4 	movi	r11,3
    97e4:	1107883a 	add	r3,r2,r4
    97e8:	290b883a 	add	r5,r5,r4
    97ec:	5a801e2e 	bgeu	r11,r10,9868 <memmove+0x154>
    97f0:	1813883a 	mov	r9,r3
    97f4:	2811883a 	mov	r8,r5
    97f8:	500f883a 	mov	r7,r10
    97fc:	41000017 	ldw	r4,0(r8)
    9800:	4a400104 	addi	r9,r9,4
    9804:	39ffff04 	addi	r7,r7,-4
    9808:	493fff15 	stw	r4,-4(r9)
    980c:	42000104 	addi	r8,r8,4
    9810:	59fffa36 	bltu	r11,r7,97fc <__alt_data_end+0xfffd97fc>
    9814:	513fff04 	addi	r4,r10,-4
    9818:	2008d0ba 	srli	r4,r4,2
    981c:	318000cc 	andi	r6,r6,3
    9820:	21000044 	addi	r4,r4,1
    9824:	2109883a 	add	r4,r4,r4
    9828:	2109883a 	add	r4,r4,r4
    982c:	1907883a 	add	r3,r3,r4
    9830:	290b883a 	add	r5,r5,r4
    9834:	30000b26 	beq	r6,zero,9864 <memmove+0x150>
    9838:	198d883a 	add	r6,r3,r6
    983c:	29c00003 	ldbu	r7,0(r5)
    9840:	18c00044 	addi	r3,r3,1
    9844:	29400044 	addi	r5,r5,1
    9848:	19ffffc5 	stb	r7,-1(r3)
    984c:	19bffb1e 	bne	r3,r6,983c <__alt_data_end+0xfffd983c>
    9850:	f800283a 	ret
    9854:	1007883a 	mov	r3,r2
    9858:	003ff606 	br	9834 <__alt_data_end+0xfffd9834>
    985c:	1007883a 	mov	r3,r2
    9860:	003ff506 	br	9838 <__alt_data_end+0xfffd9838>
    9864:	f800283a 	ret
    9868:	500d883a 	mov	r6,r10
    986c:	003ff106 	br	9834 <__alt_data_end+0xfffd9834>

00009870 <_read_r>:
    9870:	defffd04 	addi	sp,sp,-12
    9874:	2805883a 	mov	r2,r5
    9878:	dc000015 	stw	r16,0(sp)
    987c:	040000b4 	movhi	r16,2
    9880:	dc400115 	stw	r17,4(sp)
    9884:	300b883a 	mov	r5,r6
    9888:	842e6404 	addi	r16,r16,-18032
    988c:	2023883a 	mov	r17,r4
    9890:	380d883a 	mov	r6,r7
    9894:	1009883a 	mov	r4,r2
    9898:	dfc00215 	stw	ra,8(sp)
    989c:	80000015 	stw	zero,0(r16)
    98a0:	000deb80 	call	deb8 <read>
    98a4:	00ffffc4 	movi	r3,-1
    98a8:	10c00526 	beq	r2,r3,98c0 <_read_r+0x50>
    98ac:	dfc00217 	ldw	ra,8(sp)
    98b0:	dc400117 	ldw	r17,4(sp)
    98b4:	dc000017 	ldw	r16,0(sp)
    98b8:	dec00304 	addi	sp,sp,12
    98bc:	f800283a 	ret
    98c0:	80c00017 	ldw	r3,0(r16)
    98c4:	183ff926 	beq	r3,zero,98ac <__alt_data_end+0xfffd98ac>
    98c8:	88c00015 	stw	r3,0(r17)
    98cc:	003ff706 	br	98ac <__alt_data_end+0xfffd98ac>

000098d0 <_realloc_r>:
    98d0:	defff604 	addi	sp,sp,-40
    98d4:	dc800215 	stw	r18,8(sp)
    98d8:	dfc00915 	stw	ra,36(sp)
    98dc:	df000815 	stw	fp,32(sp)
    98e0:	ddc00715 	stw	r23,28(sp)
    98e4:	dd800615 	stw	r22,24(sp)
    98e8:	dd400515 	stw	r21,20(sp)
    98ec:	dd000415 	stw	r20,16(sp)
    98f0:	dcc00315 	stw	r19,12(sp)
    98f4:	dc400115 	stw	r17,4(sp)
    98f8:	dc000015 	stw	r16,0(sp)
    98fc:	3025883a 	mov	r18,r6
    9900:	2800b726 	beq	r5,zero,9be0 <_realloc_r+0x310>
    9904:	282b883a 	mov	r21,r5
    9908:	2029883a 	mov	r20,r4
    990c:	000e3500 	call	e350 <__malloc_lock>
    9910:	a8bfff17 	ldw	r2,-4(r21)
    9914:	043fff04 	movi	r16,-4
    9918:	90c002c4 	addi	r3,r18,11
    991c:	01000584 	movi	r4,22
    9920:	acfffe04 	addi	r19,r21,-8
    9924:	1420703a 	and	r16,r2,r16
    9928:	20c0332e 	bgeu	r4,r3,99f8 <_realloc_r+0x128>
    992c:	047ffe04 	movi	r17,-8
    9930:	1c62703a 	and	r17,r3,r17
    9934:	8807883a 	mov	r3,r17
    9938:	88005816 	blt	r17,zero,9a9c <_realloc_r+0x1cc>
    993c:	8c805736 	bltu	r17,r18,9a9c <_realloc_r+0x1cc>
    9940:	80c0300e 	bge	r16,r3,9a04 <_realloc_r+0x134>
    9944:	070000b4 	movhi	fp,2
    9948:	e721c604 	addi	fp,fp,-30952
    994c:	e1c00217 	ldw	r7,8(fp)
    9950:	9c09883a 	add	r4,r19,r16
    9954:	22000117 	ldw	r8,4(r4)
    9958:	21c06326 	beq	r4,r7,9ae8 <_realloc_r+0x218>
    995c:	017fff84 	movi	r5,-2
    9960:	414a703a 	and	r5,r8,r5
    9964:	214b883a 	add	r5,r4,r5
    9968:	29800117 	ldw	r6,4(r5)
    996c:	3180004c 	andi	r6,r6,1
    9970:	30003f26 	beq	r6,zero,9a70 <_realloc_r+0x1a0>
    9974:	1080004c 	andi	r2,r2,1
    9978:	10008326 	beq	r2,zero,9b88 <_realloc_r+0x2b8>
    997c:	900b883a 	mov	r5,r18
    9980:	a009883a 	mov	r4,r20
    9984:	00056180 	call	5618 <_malloc_r>
    9988:	1025883a 	mov	r18,r2
    998c:	10011e26 	beq	r2,zero,9e08 <_realloc_r+0x538>
    9990:	a93fff17 	ldw	r4,-4(r21)
    9994:	10fffe04 	addi	r3,r2,-8
    9998:	00bfff84 	movi	r2,-2
    999c:	2084703a 	and	r2,r4,r2
    99a0:	9885883a 	add	r2,r19,r2
    99a4:	1880ee26 	beq	r3,r2,9d60 <_realloc_r+0x490>
    99a8:	81bfff04 	addi	r6,r16,-4
    99ac:	00800904 	movi	r2,36
    99b0:	1180b836 	bltu	r2,r6,9c94 <_realloc_r+0x3c4>
    99b4:	00c004c4 	movi	r3,19
    99b8:	19809636 	bltu	r3,r6,9c14 <_realloc_r+0x344>
    99bc:	9005883a 	mov	r2,r18
    99c0:	a807883a 	mov	r3,r21
    99c4:	19000017 	ldw	r4,0(r3)
    99c8:	11000015 	stw	r4,0(r2)
    99cc:	19000117 	ldw	r4,4(r3)
    99d0:	11000115 	stw	r4,4(r2)
    99d4:	18c00217 	ldw	r3,8(r3)
    99d8:	10c00215 	stw	r3,8(r2)
    99dc:	a80b883a 	mov	r5,r21
    99e0:	a009883a 	mov	r4,r20
    99e4:	0004ee80 	call	4ee8 <_free_r>
    99e8:	a009883a 	mov	r4,r20
    99ec:	000e4700 	call	e470 <__malloc_unlock>
    99f0:	9005883a 	mov	r2,r18
    99f4:	00001206 	br	9a40 <_realloc_r+0x170>
    99f8:	00c00404 	movi	r3,16
    99fc:	1823883a 	mov	r17,r3
    9a00:	003fce06 	br	993c <__alt_data_end+0xfffd993c>
    9a04:	a825883a 	mov	r18,r21
    9a08:	8445c83a 	sub	r2,r16,r17
    9a0c:	00c003c4 	movi	r3,15
    9a10:	18802636 	bltu	r3,r2,9aac <_realloc_r+0x1dc>
    9a14:	99800117 	ldw	r6,4(r19)
    9a18:	9c07883a 	add	r3,r19,r16
    9a1c:	3180004c 	andi	r6,r6,1
    9a20:	3420b03a 	or	r16,r6,r16
    9a24:	9c000115 	stw	r16,4(r19)
    9a28:	18800117 	ldw	r2,4(r3)
    9a2c:	10800054 	ori	r2,r2,1
    9a30:	18800115 	stw	r2,4(r3)
    9a34:	a009883a 	mov	r4,r20
    9a38:	000e4700 	call	e470 <__malloc_unlock>
    9a3c:	9005883a 	mov	r2,r18
    9a40:	dfc00917 	ldw	ra,36(sp)
    9a44:	df000817 	ldw	fp,32(sp)
    9a48:	ddc00717 	ldw	r23,28(sp)
    9a4c:	dd800617 	ldw	r22,24(sp)
    9a50:	dd400517 	ldw	r21,20(sp)
    9a54:	dd000417 	ldw	r20,16(sp)
    9a58:	dcc00317 	ldw	r19,12(sp)
    9a5c:	dc800217 	ldw	r18,8(sp)
    9a60:	dc400117 	ldw	r17,4(sp)
    9a64:	dc000017 	ldw	r16,0(sp)
    9a68:	dec00a04 	addi	sp,sp,40
    9a6c:	f800283a 	ret
    9a70:	017fff04 	movi	r5,-4
    9a74:	414a703a 	and	r5,r8,r5
    9a78:	814d883a 	add	r6,r16,r5
    9a7c:	30c01f16 	blt	r6,r3,9afc <_realloc_r+0x22c>
    9a80:	20800317 	ldw	r2,12(r4)
    9a84:	20c00217 	ldw	r3,8(r4)
    9a88:	a825883a 	mov	r18,r21
    9a8c:	3021883a 	mov	r16,r6
    9a90:	18800315 	stw	r2,12(r3)
    9a94:	10c00215 	stw	r3,8(r2)
    9a98:	003fdb06 	br	9a08 <__alt_data_end+0xfffd9a08>
    9a9c:	00800304 	movi	r2,12
    9aa0:	a0800015 	stw	r2,0(r20)
    9aa4:	0005883a 	mov	r2,zero
    9aa8:	003fe506 	br	9a40 <__alt_data_end+0xfffd9a40>
    9aac:	98c00117 	ldw	r3,4(r19)
    9ab0:	9c4b883a 	add	r5,r19,r17
    9ab4:	11000054 	ori	r4,r2,1
    9ab8:	18c0004c 	andi	r3,r3,1
    9abc:	1c62b03a 	or	r17,r3,r17
    9ac0:	9c400115 	stw	r17,4(r19)
    9ac4:	29000115 	stw	r4,4(r5)
    9ac8:	2885883a 	add	r2,r5,r2
    9acc:	10c00117 	ldw	r3,4(r2)
    9ad0:	29400204 	addi	r5,r5,8
    9ad4:	a009883a 	mov	r4,r20
    9ad8:	18c00054 	ori	r3,r3,1
    9adc:	10c00115 	stw	r3,4(r2)
    9ae0:	0004ee80 	call	4ee8 <_free_r>
    9ae4:	003fd306 	br	9a34 <__alt_data_end+0xfffd9a34>
    9ae8:	017fff04 	movi	r5,-4
    9aec:	414a703a 	and	r5,r8,r5
    9af0:	89800404 	addi	r6,r17,16
    9af4:	8151883a 	add	r8,r16,r5
    9af8:	4180590e 	bge	r8,r6,9c60 <_realloc_r+0x390>
    9afc:	1080004c 	andi	r2,r2,1
    9b00:	103f9e1e 	bne	r2,zero,997c <__alt_data_end+0xfffd997c>
    9b04:	adbffe17 	ldw	r22,-8(r21)
    9b08:	00bfff04 	movi	r2,-4
    9b0c:	9dadc83a 	sub	r22,r19,r22
    9b10:	b1800117 	ldw	r6,4(r22)
    9b14:	3084703a 	and	r2,r6,r2
    9b18:	20002026 	beq	r4,zero,9b9c <_realloc_r+0x2cc>
    9b1c:	80af883a 	add	r23,r16,r2
    9b20:	b96f883a 	add	r23,r23,r5
    9b24:	21c05f26 	beq	r4,r7,9ca4 <_realloc_r+0x3d4>
    9b28:	b8c01c16 	blt	r23,r3,9b9c <_realloc_r+0x2cc>
    9b2c:	20800317 	ldw	r2,12(r4)
    9b30:	20c00217 	ldw	r3,8(r4)
    9b34:	81bfff04 	addi	r6,r16,-4
    9b38:	01000904 	movi	r4,36
    9b3c:	18800315 	stw	r2,12(r3)
    9b40:	10c00215 	stw	r3,8(r2)
    9b44:	b0c00217 	ldw	r3,8(r22)
    9b48:	b0800317 	ldw	r2,12(r22)
    9b4c:	b4800204 	addi	r18,r22,8
    9b50:	18800315 	stw	r2,12(r3)
    9b54:	10c00215 	stw	r3,8(r2)
    9b58:	21801b36 	bltu	r4,r6,9bc8 <_realloc_r+0x2f8>
    9b5c:	008004c4 	movi	r2,19
    9b60:	1180352e 	bgeu	r2,r6,9c38 <_realloc_r+0x368>
    9b64:	a8800017 	ldw	r2,0(r21)
    9b68:	b0800215 	stw	r2,8(r22)
    9b6c:	a8800117 	ldw	r2,4(r21)
    9b70:	b0800315 	stw	r2,12(r22)
    9b74:	008006c4 	movi	r2,27
    9b78:	11807f36 	bltu	r2,r6,9d78 <_realloc_r+0x4a8>
    9b7c:	b0800404 	addi	r2,r22,16
    9b80:	ad400204 	addi	r21,r21,8
    9b84:	00002d06 	br	9c3c <_realloc_r+0x36c>
    9b88:	adbffe17 	ldw	r22,-8(r21)
    9b8c:	00bfff04 	movi	r2,-4
    9b90:	9dadc83a 	sub	r22,r19,r22
    9b94:	b1000117 	ldw	r4,4(r22)
    9b98:	2084703a 	and	r2,r4,r2
    9b9c:	b03f7726 	beq	r22,zero,997c <__alt_data_end+0xfffd997c>
    9ba0:	80af883a 	add	r23,r16,r2
    9ba4:	b8ff7516 	blt	r23,r3,997c <__alt_data_end+0xfffd997c>
    9ba8:	b0800317 	ldw	r2,12(r22)
    9bac:	b0c00217 	ldw	r3,8(r22)
    9bb0:	81bfff04 	addi	r6,r16,-4
    9bb4:	01000904 	movi	r4,36
    9bb8:	18800315 	stw	r2,12(r3)
    9bbc:	10c00215 	stw	r3,8(r2)
    9bc0:	b4800204 	addi	r18,r22,8
    9bc4:	21bfe52e 	bgeu	r4,r6,9b5c <__alt_data_end+0xfffd9b5c>
    9bc8:	a80b883a 	mov	r5,r21
    9bcc:	9009883a 	mov	r4,r18
    9bd0:	00097140 	call	9714 <memmove>
    9bd4:	b821883a 	mov	r16,r23
    9bd8:	b027883a 	mov	r19,r22
    9bdc:	003f8a06 	br	9a08 <__alt_data_end+0xfffd9a08>
    9be0:	300b883a 	mov	r5,r6
    9be4:	dfc00917 	ldw	ra,36(sp)
    9be8:	df000817 	ldw	fp,32(sp)
    9bec:	ddc00717 	ldw	r23,28(sp)
    9bf0:	dd800617 	ldw	r22,24(sp)
    9bf4:	dd400517 	ldw	r21,20(sp)
    9bf8:	dd000417 	ldw	r20,16(sp)
    9bfc:	dcc00317 	ldw	r19,12(sp)
    9c00:	dc800217 	ldw	r18,8(sp)
    9c04:	dc400117 	ldw	r17,4(sp)
    9c08:	dc000017 	ldw	r16,0(sp)
    9c0c:	dec00a04 	addi	sp,sp,40
    9c10:	00056181 	jmpi	5618 <_malloc_r>
    9c14:	a8c00017 	ldw	r3,0(r21)
    9c18:	90c00015 	stw	r3,0(r18)
    9c1c:	a8c00117 	ldw	r3,4(r21)
    9c20:	90c00115 	stw	r3,4(r18)
    9c24:	00c006c4 	movi	r3,27
    9c28:	19804536 	bltu	r3,r6,9d40 <_realloc_r+0x470>
    9c2c:	90800204 	addi	r2,r18,8
    9c30:	a8c00204 	addi	r3,r21,8
    9c34:	003f6306 	br	99c4 <__alt_data_end+0xfffd99c4>
    9c38:	9005883a 	mov	r2,r18
    9c3c:	a8c00017 	ldw	r3,0(r21)
    9c40:	b821883a 	mov	r16,r23
    9c44:	b027883a 	mov	r19,r22
    9c48:	10c00015 	stw	r3,0(r2)
    9c4c:	a8c00117 	ldw	r3,4(r21)
    9c50:	10c00115 	stw	r3,4(r2)
    9c54:	a8c00217 	ldw	r3,8(r21)
    9c58:	10c00215 	stw	r3,8(r2)
    9c5c:	003f6a06 	br	9a08 <__alt_data_end+0xfffd9a08>
    9c60:	9c67883a 	add	r19,r19,r17
    9c64:	4445c83a 	sub	r2,r8,r17
    9c68:	e4c00215 	stw	r19,8(fp)
    9c6c:	10800054 	ori	r2,r2,1
    9c70:	98800115 	stw	r2,4(r19)
    9c74:	a8bfff17 	ldw	r2,-4(r21)
    9c78:	a009883a 	mov	r4,r20
    9c7c:	1080004c 	andi	r2,r2,1
    9c80:	1462b03a 	or	r17,r2,r17
    9c84:	ac7fff15 	stw	r17,-4(r21)
    9c88:	000e4700 	call	e470 <__malloc_unlock>
    9c8c:	a805883a 	mov	r2,r21
    9c90:	003f6b06 	br	9a40 <__alt_data_end+0xfffd9a40>
    9c94:	a80b883a 	mov	r5,r21
    9c98:	9009883a 	mov	r4,r18
    9c9c:	00097140 	call	9714 <memmove>
    9ca0:	003f4e06 	br	99dc <__alt_data_end+0xfffd99dc>
    9ca4:	89000404 	addi	r4,r17,16
    9ca8:	b93fbc16 	blt	r23,r4,9b9c <__alt_data_end+0xfffd9b9c>
    9cac:	b0800317 	ldw	r2,12(r22)
    9cb0:	b0c00217 	ldw	r3,8(r22)
    9cb4:	81bfff04 	addi	r6,r16,-4
    9cb8:	01000904 	movi	r4,36
    9cbc:	18800315 	stw	r2,12(r3)
    9cc0:	10c00215 	stw	r3,8(r2)
    9cc4:	b4800204 	addi	r18,r22,8
    9cc8:	21804336 	bltu	r4,r6,9dd8 <_realloc_r+0x508>
    9ccc:	008004c4 	movi	r2,19
    9cd0:	11803f2e 	bgeu	r2,r6,9dd0 <_realloc_r+0x500>
    9cd4:	a8800017 	ldw	r2,0(r21)
    9cd8:	b0800215 	stw	r2,8(r22)
    9cdc:	a8800117 	ldw	r2,4(r21)
    9ce0:	b0800315 	stw	r2,12(r22)
    9ce4:	008006c4 	movi	r2,27
    9ce8:	11803f36 	bltu	r2,r6,9de8 <_realloc_r+0x518>
    9cec:	b0800404 	addi	r2,r22,16
    9cf0:	ad400204 	addi	r21,r21,8
    9cf4:	a8c00017 	ldw	r3,0(r21)
    9cf8:	10c00015 	stw	r3,0(r2)
    9cfc:	a8c00117 	ldw	r3,4(r21)
    9d00:	10c00115 	stw	r3,4(r2)
    9d04:	a8c00217 	ldw	r3,8(r21)
    9d08:	10c00215 	stw	r3,8(r2)
    9d0c:	b447883a 	add	r3,r22,r17
    9d10:	bc45c83a 	sub	r2,r23,r17
    9d14:	e0c00215 	stw	r3,8(fp)
    9d18:	10800054 	ori	r2,r2,1
    9d1c:	18800115 	stw	r2,4(r3)
    9d20:	b0800117 	ldw	r2,4(r22)
    9d24:	a009883a 	mov	r4,r20
    9d28:	1080004c 	andi	r2,r2,1
    9d2c:	1462b03a 	or	r17,r2,r17
    9d30:	b4400115 	stw	r17,4(r22)
    9d34:	000e4700 	call	e470 <__malloc_unlock>
    9d38:	9005883a 	mov	r2,r18
    9d3c:	003f4006 	br	9a40 <__alt_data_end+0xfffd9a40>
    9d40:	a8c00217 	ldw	r3,8(r21)
    9d44:	90c00215 	stw	r3,8(r18)
    9d48:	a8c00317 	ldw	r3,12(r21)
    9d4c:	90c00315 	stw	r3,12(r18)
    9d50:	30801126 	beq	r6,r2,9d98 <_realloc_r+0x4c8>
    9d54:	90800404 	addi	r2,r18,16
    9d58:	a8c00404 	addi	r3,r21,16
    9d5c:	003f1906 	br	99c4 <__alt_data_end+0xfffd99c4>
    9d60:	90ffff17 	ldw	r3,-4(r18)
    9d64:	00bfff04 	movi	r2,-4
    9d68:	a825883a 	mov	r18,r21
    9d6c:	1884703a 	and	r2,r3,r2
    9d70:	80a1883a 	add	r16,r16,r2
    9d74:	003f2406 	br	9a08 <__alt_data_end+0xfffd9a08>
    9d78:	a8800217 	ldw	r2,8(r21)
    9d7c:	b0800415 	stw	r2,16(r22)
    9d80:	a8800317 	ldw	r2,12(r21)
    9d84:	b0800515 	stw	r2,20(r22)
    9d88:	31000a26 	beq	r6,r4,9db4 <_realloc_r+0x4e4>
    9d8c:	b0800604 	addi	r2,r22,24
    9d90:	ad400404 	addi	r21,r21,16
    9d94:	003fa906 	br	9c3c <__alt_data_end+0xfffd9c3c>
    9d98:	a9000417 	ldw	r4,16(r21)
    9d9c:	90800604 	addi	r2,r18,24
    9da0:	a8c00604 	addi	r3,r21,24
    9da4:	91000415 	stw	r4,16(r18)
    9da8:	a9000517 	ldw	r4,20(r21)
    9dac:	91000515 	stw	r4,20(r18)
    9db0:	003f0406 	br	99c4 <__alt_data_end+0xfffd99c4>
    9db4:	a8c00417 	ldw	r3,16(r21)
    9db8:	ad400604 	addi	r21,r21,24
    9dbc:	b0800804 	addi	r2,r22,32
    9dc0:	b0c00615 	stw	r3,24(r22)
    9dc4:	a8ffff17 	ldw	r3,-4(r21)
    9dc8:	b0c00715 	stw	r3,28(r22)
    9dcc:	003f9b06 	br	9c3c <__alt_data_end+0xfffd9c3c>
    9dd0:	9005883a 	mov	r2,r18
    9dd4:	003fc706 	br	9cf4 <__alt_data_end+0xfffd9cf4>
    9dd8:	a80b883a 	mov	r5,r21
    9ddc:	9009883a 	mov	r4,r18
    9de0:	00097140 	call	9714 <memmove>
    9de4:	003fc906 	br	9d0c <__alt_data_end+0xfffd9d0c>
    9de8:	a8800217 	ldw	r2,8(r21)
    9dec:	b0800415 	stw	r2,16(r22)
    9df0:	a8800317 	ldw	r2,12(r21)
    9df4:	b0800515 	stw	r2,20(r22)
    9df8:	31000726 	beq	r6,r4,9e18 <_realloc_r+0x548>
    9dfc:	b0800604 	addi	r2,r22,24
    9e00:	ad400404 	addi	r21,r21,16
    9e04:	003fbb06 	br	9cf4 <__alt_data_end+0xfffd9cf4>
    9e08:	a009883a 	mov	r4,r20
    9e0c:	000e4700 	call	e470 <__malloc_unlock>
    9e10:	0005883a 	mov	r2,zero
    9e14:	003f0a06 	br	9a40 <__alt_data_end+0xfffd9a40>
    9e18:	a8c00417 	ldw	r3,16(r21)
    9e1c:	ad400604 	addi	r21,r21,24
    9e20:	b0800804 	addi	r2,r22,32
    9e24:	b0c00615 	stw	r3,24(r22)
    9e28:	a8ffff17 	ldw	r3,-4(r21)
    9e2c:	b0c00715 	stw	r3,28(r22)
    9e30:	003fb006 	br	9cf4 <__alt_data_end+0xfffd9cf4>

00009e34 <__swbuf_r>:
    9e34:	defffb04 	addi	sp,sp,-20
    9e38:	dcc00315 	stw	r19,12(sp)
    9e3c:	dc800215 	stw	r18,8(sp)
    9e40:	dc000015 	stw	r16,0(sp)
    9e44:	dfc00415 	stw	ra,16(sp)
    9e48:	dc400115 	stw	r17,4(sp)
    9e4c:	2025883a 	mov	r18,r4
    9e50:	2827883a 	mov	r19,r5
    9e54:	3021883a 	mov	r16,r6
    9e58:	20000226 	beq	r4,zero,9e64 <__swbuf_r+0x30>
    9e5c:	20800e17 	ldw	r2,56(r4)
    9e60:	10004226 	beq	r2,zero,9f6c <__swbuf_r+0x138>
    9e64:	80800617 	ldw	r2,24(r16)
    9e68:	8100030b 	ldhu	r4,12(r16)
    9e6c:	80800215 	stw	r2,8(r16)
    9e70:	2080020c 	andi	r2,r4,8
    9e74:	10003626 	beq	r2,zero,9f50 <__swbuf_r+0x11c>
    9e78:	80c00417 	ldw	r3,16(r16)
    9e7c:	18003426 	beq	r3,zero,9f50 <__swbuf_r+0x11c>
    9e80:	2088000c 	andi	r2,r4,8192
    9e84:	9c403fcc 	andi	r17,r19,255
    9e88:	10001a26 	beq	r2,zero,9ef4 <__swbuf_r+0xc0>
    9e8c:	80800017 	ldw	r2,0(r16)
    9e90:	81000517 	ldw	r4,20(r16)
    9e94:	10c7c83a 	sub	r3,r2,r3
    9e98:	1900200e 	bge	r3,r4,9f1c <__swbuf_r+0xe8>
    9e9c:	18c00044 	addi	r3,r3,1
    9ea0:	81000217 	ldw	r4,8(r16)
    9ea4:	11400044 	addi	r5,r2,1
    9ea8:	81400015 	stw	r5,0(r16)
    9eac:	213fffc4 	addi	r4,r4,-1
    9eb0:	81000215 	stw	r4,8(r16)
    9eb4:	14c00005 	stb	r19,0(r2)
    9eb8:	80800517 	ldw	r2,20(r16)
    9ebc:	10c01e26 	beq	r2,r3,9f38 <__swbuf_r+0x104>
    9ec0:	8080030b 	ldhu	r2,12(r16)
    9ec4:	1080004c 	andi	r2,r2,1
    9ec8:	10000226 	beq	r2,zero,9ed4 <__swbuf_r+0xa0>
    9ecc:	00800284 	movi	r2,10
    9ed0:	88801926 	beq	r17,r2,9f38 <__swbuf_r+0x104>
    9ed4:	8805883a 	mov	r2,r17
    9ed8:	dfc00417 	ldw	ra,16(sp)
    9edc:	dcc00317 	ldw	r19,12(sp)
    9ee0:	dc800217 	ldw	r18,8(sp)
    9ee4:	dc400117 	ldw	r17,4(sp)
    9ee8:	dc000017 	ldw	r16,0(sp)
    9eec:	dec00504 	addi	sp,sp,20
    9ef0:	f800283a 	ret
    9ef4:	81401917 	ldw	r5,100(r16)
    9ef8:	00b7ffc4 	movi	r2,-8193
    9efc:	21080014 	ori	r4,r4,8192
    9f00:	2884703a 	and	r2,r5,r2
    9f04:	80801915 	stw	r2,100(r16)
    9f08:	80800017 	ldw	r2,0(r16)
    9f0c:	8100030d 	sth	r4,12(r16)
    9f10:	81000517 	ldw	r4,20(r16)
    9f14:	10c7c83a 	sub	r3,r2,r3
    9f18:	193fe016 	blt	r3,r4,9e9c <__alt_data_end+0xfffd9e9c>
    9f1c:	800b883a 	mov	r5,r16
    9f20:	9009883a 	mov	r4,r18
    9f24:	00049880 	call	4988 <_fflush_r>
    9f28:	1000071e 	bne	r2,zero,9f48 <__swbuf_r+0x114>
    9f2c:	80800017 	ldw	r2,0(r16)
    9f30:	00c00044 	movi	r3,1
    9f34:	003fda06 	br	9ea0 <__alt_data_end+0xfffd9ea0>
    9f38:	800b883a 	mov	r5,r16
    9f3c:	9009883a 	mov	r4,r18
    9f40:	00049880 	call	4988 <_fflush_r>
    9f44:	103fe326 	beq	r2,zero,9ed4 <__alt_data_end+0xfffd9ed4>
    9f48:	00bfffc4 	movi	r2,-1
    9f4c:	003fe206 	br	9ed8 <__alt_data_end+0xfffd9ed8>
    9f50:	800b883a 	mov	r5,r16
    9f54:	9009883a 	mov	r4,r18
    9f58:	0002d680 	call	2d68 <__swsetup_r>
    9f5c:	103ffa1e 	bne	r2,zero,9f48 <__alt_data_end+0xfffd9f48>
    9f60:	8100030b 	ldhu	r4,12(r16)
    9f64:	80c00417 	ldw	r3,16(r16)
    9f68:	003fc506 	br	9e80 <__alt_data_end+0xfffd9e80>
    9f6c:	0004d740 	call	4d74 <__sinit>
    9f70:	003fbc06 	br	9e64 <__alt_data_end+0xfffd9e64>

00009f74 <__swbuf>:
    9f74:	008000b4 	movhi	r2,2
    9f78:	10a74e04 	addi	r2,r2,-25288
    9f7c:	280d883a 	mov	r6,r5
    9f80:	200b883a 	mov	r5,r4
    9f84:	11000017 	ldw	r4,0(r2)
    9f88:	0009e341 	jmpi	9e34 <__swbuf_r>

00009f8c <_wcrtomb_r>:
    9f8c:	defff604 	addi	sp,sp,-40
    9f90:	008000b4 	movhi	r2,2
    9f94:	dc800815 	stw	r18,32(sp)
    9f98:	dc400715 	stw	r17,28(sp)
    9f9c:	dc000615 	stw	r16,24(sp)
    9fa0:	10a75204 	addi	r2,r2,-25272
    9fa4:	dfc00915 	stw	ra,36(sp)
    9fa8:	2021883a 	mov	r16,r4
    9fac:	3823883a 	mov	r17,r7
    9fb0:	14800017 	ldw	r18,0(r2)
    9fb4:	28001426 	beq	r5,zero,a008 <_wcrtomb_r+0x7c>
    9fb8:	d9400415 	stw	r5,16(sp)
    9fbc:	d9800515 	stw	r6,20(sp)
    9fc0:	00053fc0 	call	53fc <__locale_charset>
    9fc4:	d9800517 	ldw	r6,20(sp)
    9fc8:	d9400417 	ldw	r5,16(sp)
    9fcc:	100f883a 	mov	r7,r2
    9fd0:	dc400015 	stw	r17,0(sp)
    9fd4:	8009883a 	mov	r4,r16
    9fd8:	903ee83a 	callr	r18
    9fdc:	00ffffc4 	movi	r3,-1
    9fe0:	10c0031e 	bne	r2,r3,9ff0 <_wcrtomb_r+0x64>
    9fe4:	88000015 	stw	zero,0(r17)
    9fe8:	00c02284 	movi	r3,138
    9fec:	80c00015 	stw	r3,0(r16)
    9ff0:	dfc00917 	ldw	ra,36(sp)
    9ff4:	dc800817 	ldw	r18,32(sp)
    9ff8:	dc400717 	ldw	r17,28(sp)
    9ffc:	dc000617 	ldw	r16,24(sp)
    a000:	dec00a04 	addi	sp,sp,40
    a004:	f800283a 	ret
    a008:	00053fc0 	call	53fc <__locale_charset>
    a00c:	100f883a 	mov	r7,r2
    a010:	dc400015 	stw	r17,0(sp)
    a014:	000d883a 	mov	r6,zero
    a018:	d9400104 	addi	r5,sp,4
    a01c:	8009883a 	mov	r4,r16
    a020:	903ee83a 	callr	r18
    a024:	003fed06 	br	9fdc <__alt_data_end+0xfffd9fdc>

0000a028 <wcrtomb>:
    a028:	defff604 	addi	sp,sp,-40
    a02c:	008000b4 	movhi	r2,2
    a030:	dc800615 	stw	r18,24(sp)
    a034:	dc400515 	stw	r17,20(sp)
    a038:	10a74e04 	addi	r2,r2,-25288
    a03c:	dfc00915 	stw	ra,36(sp)
    a040:	dd000815 	stw	r20,32(sp)
    a044:	dcc00715 	stw	r19,28(sp)
    a048:	dc000415 	stw	r16,16(sp)
    a04c:	3025883a 	mov	r18,r6
    a050:	14400017 	ldw	r17,0(r2)
    a054:	20001926 	beq	r4,zero,a0bc <wcrtomb+0x94>
    a058:	008000b4 	movhi	r2,2
    a05c:	10a75204 	addi	r2,r2,-25272
    a060:	15000017 	ldw	r20,0(r2)
    a064:	2021883a 	mov	r16,r4
    a068:	2827883a 	mov	r19,r5
    a06c:	00053fc0 	call	53fc <__locale_charset>
    a070:	100f883a 	mov	r7,r2
    a074:	dc800015 	stw	r18,0(sp)
    a078:	980d883a 	mov	r6,r19
    a07c:	800b883a 	mov	r5,r16
    a080:	8809883a 	mov	r4,r17
    a084:	a03ee83a 	callr	r20
    a088:	00ffffc4 	movi	r3,-1
    a08c:	10c0031e 	bne	r2,r3,a09c <wcrtomb+0x74>
    a090:	90000015 	stw	zero,0(r18)
    a094:	00c02284 	movi	r3,138
    a098:	88c00015 	stw	r3,0(r17)
    a09c:	dfc00917 	ldw	ra,36(sp)
    a0a0:	dd000817 	ldw	r20,32(sp)
    a0a4:	dcc00717 	ldw	r19,28(sp)
    a0a8:	dc800617 	ldw	r18,24(sp)
    a0ac:	dc400517 	ldw	r17,20(sp)
    a0b0:	dc000417 	ldw	r16,16(sp)
    a0b4:	dec00a04 	addi	sp,sp,40
    a0b8:	f800283a 	ret
    a0bc:	008000b4 	movhi	r2,2
    a0c0:	10a75204 	addi	r2,r2,-25272
    a0c4:	14000017 	ldw	r16,0(r2)
    a0c8:	00053fc0 	call	53fc <__locale_charset>
    a0cc:	100f883a 	mov	r7,r2
    a0d0:	dc800015 	stw	r18,0(sp)
    a0d4:	000d883a 	mov	r6,zero
    a0d8:	d9400104 	addi	r5,sp,4
    a0dc:	8809883a 	mov	r4,r17
    a0e0:	803ee83a 	callr	r16
    a0e4:	003fe806 	br	a088 <__alt_data_end+0xfffda088>

0000a0e8 <__ascii_wctomb>:
    a0e8:	28000526 	beq	r5,zero,a100 <__ascii_wctomb+0x18>
    a0ec:	00803fc4 	movi	r2,255
    a0f0:	11800536 	bltu	r2,r6,a108 <__ascii_wctomb+0x20>
    a0f4:	29800005 	stb	r6,0(r5)
    a0f8:	00800044 	movi	r2,1
    a0fc:	f800283a 	ret
    a100:	0005883a 	mov	r2,zero
    a104:	f800283a 	ret
    a108:	00802284 	movi	r2,138
    a10c:	20800015 	stw	r2,0(r4)
    a110:	00bfffc4 	movi	r2,-1
    a114:	f800283a 	ret

0000a118 <_wctomb_r>:
    a118:	008000b4 	movhi	r2,2
    a11c:	defff904 	addi	sp,sp,-28
    a120:	10a75204 	addi	r2,r2,-25272
    a124:	dfc00615 	stw	ra,24(sp)
    a128:	dc400515 	stw	r17,20(sp)
    a12c:	dc000415 	stw	r16,16(sp)
    a130:	3823883a 	mov	r17,r7
    a134:	14000017 	ldw	r16,0(r2)
    a138:	d9000115 	stw	r4,4(sp)
    a13c:	d9400215 	stw	r5,8(sp)
    a140:	d9800315 	stw	r6,12(sp)
    a144:	00053fc0 	call	53fc <__locale_charset>
    a148:	d9800317 	ldw	r6,12(sp)
    a14c:	d9400217 	ldw	r5,8(sp)
    a150:	d9000117 	ldw	r4,4(sp)
    a154:	100f883a 	mov	r7,r2
    a158:	dc400015 	stw	r17,0(sp)
    a15c:	803ee83a 	callr	r16
    a160:	dfc00617 	ldw	ra,24(sp)
    a164:	dc400517 	ldw	r17,20(sp)
    a168:	dc000417 	ldw	r16,16(sp)
    a16c:	dec00704 	addi	sp,sp,28
    a170:	f800283a 	ret

0000a174 <__udivdi3>:
    a174:	defff404 	addi	sp,sp,-48
    a178:	dcc00515 	stw	r19,20(sp)
    a17c:	dc000215 	stw	r16,8(sp)
    a180:	dfc00b15 	stw	ra,44(sp)
    a184:	df000a15 	stw	fp,40(sp)
    a188:	ddc00915 	stw	r23,36(sp)
    a18c:	dd800815 	stw	r22,32(sp)
    a190:	dd400715 	stw	r21,28(sp)
    a194:	dd000615 	stw	r20,24(sp)
    a198:	dc800415 	stw	r18,16(sp)
    a19c:	dc400315 	stw	r17,12(sp)
    a1a0:	2027883a 	mov	r19,r4
    a1a4:	2821883a 	mov	r16,r5
    a1a8:	3800461e 	bne	r7,zero,a2c4 <__udivdi3+0x150>
    a1ac:	3023883a 	mov	r17,r6
    a1b0:	2025883a 	mov	r18,r4
    a1b4:	2980572e 	bgeu	r5,r6,a314 <__udivdi3+0x1a0>
    a1b8:	00bfffd4 	movui	r2,65535
    a1bc:	282d883a 	mov	r22,r5
    a1c0:	1180b236 	bltu	r2,r6,a48c <__udivdi3+0x318>
    a1c4:	00803fc4 	movi	r2,255
    a1c8:	1185803a 	cmpltu	r2,r2,r6
    a1cc:	100490fa 	slli	r2,r2,3
    a1d0:	3086d83a 	srl	r3,r6,r2
    a1d4:	010000b4 	movhi	r4,2
    a1d8:	21200d04 	addi	r4,r4,-32716
    a1dc:	20c7883a 	add	r3,r4,r3
    a1e0:	18c00003 	ldbu	r3,0(r3)
    a1e4:	1885883a 	add	r2,r3,r2
    a1e8:	00c00804 	movi	r3,32
    a1ec:	1887c83a 	sub	r3,r3,r2
    a1f0:	18000526 	beq	r3,zero,a208 <__udivdi3+0x94>
    a1f4:	80e0983a 	sll	r16,r16,r3
    a1f8:	9884d83a 	srl	r2,r19,r2
    a1fc:	30e2983a 	sll	r17,r6,r3
    a200:	98e4983a 	sll	r18,r19,r3
    a204:	142cb03a 	or	r22,r2,r16
    a208:	882ad43a 	srli	r21,r17,16
    a20c:	b009883a 	mov	r4,r22
    a210:	8d3fffcc 	andi	r20,r17,65535
    a214:	a80b883a 	mov	r5,r21
    a218:	00008f00 	call	8f0 <__umodsi3>
    a21c:	b009883a 	mov	r4,r22
    a220:	a80b883a 	mov	r5,r21
    a224:	1027883a 	mov	r19,r2
    a228:	000088c0 	call	88c <__udivsi3>
    a22c:	100b883a 	mov	r5,r2
    a230:	a009883a 	mov	r4,r20
    a234:	102d883a 	mov	r22,r2
    a238:	000ad340 	call	ad34 <__mulsi3>
    a23c:	9826943a 	slli	r19,r19,16
    a240:	9006d43a 	srli	r3,r18,16
    a244:	1cc6b03a 	or	r3,r3,r19
    a248:	1880052e 	bgeu	r3,r2,a260 <__udivdi3+0xec>
    a24c:	1c47883a 	add	r3,r3,r17
    a250:	b13fffc4 	addi	r4,r22,-1
    a254:	1c400136 	bltu	r3,r17,a25c <__udivdi3+0xe8>
    a258:	18814236 	bltu	r3,r2,a764 <__udivdi3+0x5f0>
    a25c:	202d883a 	mov	r22,r4
    a260:	18a1c83a 	sub	r16,r3,r2
    a264:	8009883a 	mov	r4,r16
    a268:	a80b883a 	mov	r5,r21
    a26c:	00008f00 	call	8f0 <__umodsi3>
    a270:	1027883a 	mov	r19,r2
    a274:	8009883a 	mov	r4,r16
    a278:	a80b883a 	mov	r5,r21
    a27c:	9826943a 	slli	r19,r19,16
    a280:	000088c0 	call	88c <__udivsi3>
    a284:	100b883a 	mov	r5,r2
    a288:	a009883a 	mov	r4,r20
    a28c:	94bfffcc 	andi	r18,r18,65535
    a290:	1021883a 	mov	r16,r2
    a294:	94e4b03a 	or	r18,r18,r19
    a298:	000ad340 	call	ad34 <__mulsi3>
    a29c:	9080052e 	bgeu	r18,r2,a2b4 <__udivdi3+0x140>
    a2a0:	8ca5883a 	add	r18,r17,r18
    a2a4:	80ffffc4 	addi	r3,r16,-1
    a2a8:	94410c36 	bltu	r18,r17,a6dc <__udivdi3+0x568>
    a2ac:	90810b2e 	bgeu	r18,r2,a6dc <__udivdi3+0x568>
    a2b0:	843fff84 	addi	r16,r16,-2
    a2b4:	b004943a 	slli	r2,r22,16
    a2b8:	0007883a 	mov	r3,zero
    a2bc:	1404b03a 	or	r2,r2,r16
    a2c0:	00005e06 	br	a43c <__udivdi3+0x2c8>
    a2c4:	29c05b36 	bltu	r5,r7,a434 <__udivdi3+0x2c0>
    a2c8:	00bfffd4 	movui	r2,65535
    a2cc:	11c0672e 	bgeu	r2,r7,a46c <__udivdi3+0x2f8>
    a2d0:	00804034 	movhi	r2,256
    a2d4:	10bfffc4 	addi	r2,r2,-1
    a2d8:	11c10a36 	bltu	r2,r7,a704 <__udivdi3+0x590>
    a2dc:	00800404 	movi	r2,16
    a2e0:	3886d83a 	srl	r3,r7,r2
    a2e4:	010000b4 	movhi	r4,2
    a2e8:	21200d04 	addi	r4,r4,-32716
    a2ec:	20c7883a 	add	r3,r4,r3
    a2f0:	18c00003 	ldbu	r3,0(r3)
    a2f4:	05c00804 	movi	r23,32
    a2f8:	1885883a 	add	r2,r3,r2
    a2fc:	b8afc83a 	sub	r23,r23,r2
    a300:	b800671e 	bne	r23,zero,a4a0 <__udivdi3+0x32c>
    a304:	3c010536 	bltu	r7,r16,a71c <__udivdi3+0x5a8>
    a308:	9985403a 	cmpgeu	r2,r19,r6
    a30c:	0007883a 	mov	r3,zero
    a310:	00004a06 	br	a43c <__udivdi3+0x2c8>
    a314:	3000041e 	bne	r6,zero,a328 <__udivdi3+0x1b4>
    a318:	000b883a 	mov	r5,zero
    a31c:	01000044 	movi	r4,1
    a320:	000088c0 	call	88c <__udivsi3>
    a324:	1023883a 	mov	r17,r2
    a328:	00bfffd4 	movui	r2,65535
    a32c:	1440532e 	bgeu	r2,r17,a47c <__udivdi3+0x308>
    a330:	00804034 	movhi	r2,256
    a334:	10bfffc4 	addi	r2,r2,-1
    a338:	1440f436 	bltu	r2,r17,a70c <__udivdi3+0x598>
    a33c:	00800404 	movi	r2,16
    a340:	8886d83a 	srl	r3,r17,r2
    a344:	010000b4 	movhi	r4,2
    a348:	21200d04 	addi	r4,r4,-32716
    a34c:	20c7883a 	add	r3,r4,r3
    a350:	18c00003 	ldbu	r3,0(r3)
    a354:	1885883a 	add	r2,r3,r2
    a358:	00c00804 	movi	r3,32
    a35c:	1887c83a 	sub	r3,r3,r2
    a360:	1800a51e 	bne	r3,zero,a5f8 <__udivdi3+0x484>
    a364:	882ad43a 	srli	r21,r17,16
    a368:	8461c83a 	sub	r16,r16,r17
    a36c:	8d3fffcc 	andi	r20,r17,65535
    a370:	00c00044 	movi	r3,1
    a374:	a80b883a 	mov	r5,r21
    a378:	8009883a 	mov	r4,r16
    a37c:	d8c00115 	stw	r3,4(sp)
    a380:	00008f00 	call	8f0 <__umodsi3>
    a384:	a80b883a 	mov	r5,r21
    a388:	8009883a 	mov	r4,r16
    a38c:	1027883a 	mov	r19,r2
    a390:	000088c0 	call	88c <__udivsi3>
    a394:	a00b883a 	mov	r5,r20
    a398:	1009883a 	mov	r4,r2
    a39c:	102d883a 	mov	r22,r2
    a3a0:	000ad340 	call	ad34 <__mulsi3>
    a3a4:	9826943a 	slli	r19,r19,16
    a3a8:	900ed43a 	srli	r7,r18,16
    a3ac:	d8c00117 	ldw	r3,4(sp)
    a3b0:	3cceb03a 	or	r7,r7,r19
    a3b4:	3880052e 	bgeu	r7,r2,a3cc <__udivdi3+0x258>
    a3b8:	3c4f883a 	add	r7,r7,r17
    a3bc:	b13fffc4 	addi	r4,r22,-1
    a3c0:	3c400136 	bltu	r7,r17,a3c8 <__udivdi3+0x254>
    a3c4:	3880e436 	bltu	r7,r2,a758 <__udivdi3+0x5e4>
    a3c8:	202d883a 	mov	r22,r4
    a3cc:	38a1c83a 	sub	r16,r7,r2
    a3d0:	8009883a 	mov	r4,r16
    a3d4:	a80b883a 	mov	r5,r21
    a3d8:	d8c00115 	stw	r3,4(sp)
    a3dc:	00008f00 	call	8f0 <__umodsi3>
    a3e0:	1027883a 	mov	r19,r2
    a3e4:	8009883a 	mov	r4,r16
    a3e8:	a80b883a 	mov	r5,r21
    a3ec:	9826943a 	slli	r19,r19,16
    a3f0:	000088c0 	call	88c <__udivsi3>
    a3f4:	a00b883a 	mov	r5,r20
    a3f8:	1009883a 	mov	r4,r2
    a3fc:	94bfffcc 	andi	r18,r18,65535
    a400:	1021883a 	mov	r16,r2
    a404:	94e4b03a 	or	r18,r18,r19
    a408:	000ad340 	call	ad34 <__mulsi3>
    a40c:	d8c00117 	ldw	r3,4(sp)
    a410:	9080052e 	bgeu	r18,r2,a428 <__udivdi3+0x2b4>
    a414:	8ca5883a 	add	r18,r17,r18
    a418:	813fffc4 	addi	r4,r16,-1
    a41c:	9440ad36 	bltu	r18,r17,a6d4 <__udivdi3+0x560>
    a420:	9080ac2e 	bgeu	r18,r2,a6d4 <__udivdi3+0x560>
    a424:	843fff84 	addi	r16,r16,-2
    a428:	b004943a 	slli	r2,r22,16
    a42c:	1404b03a 	or	r2,r2,r16
    a430:	00000206 	br	a43c <__udivdi3+0x2c8>
    a434:	0007883a 	mov	r3,zero
    a438:	0005883a 	mov	r2,zero
    a43c:	dfc00b17 	ldw	ra,44(sp)
    a440:	df000a17 	ldw	fp,40(sp)
    a444:	ddc00917 	ldw	r23,36(sp)
    a448:	dd800817 	ldw	r22,32(sp)
    a44c:	dd400717 	ldw	r21,28(sp)
    a450:	dd000617 	ldw	r20,24(sp)
    a454:	dcc00517 	ldw	r19,20(sp)
    a458:	dc800417 	ldw	r18,16(sp)
    a45c:	dc400317 	ldw	r17,12(sp)
    a460:	dc000217 	ldw	r16,8(sp)
    a464:	dec00c04 	addi	sp,sp,48
    a468:	f800283a 	ret
    a46c:	00803fc4 	movi	r2,255
    a470:	11c5803a 	cmpltu	r2,r2,r7
    a474:	100490fa 	slli	r2,r2,3
    a478:	003f9906 	br	a2e0 <__alt_data_end+0xfffda2e0>
    a47c:	00803fc4 	movi	r2,255
    a480:	1445803a 	cmpltu	r2,r2,r17
    a484:	100490fa 	slli	r2,r2,3
    a488:	003fad06 	br	a340 <__alt_data_end+0xfffda340>
    a48c:	00804034 	movhi	r2,256
    a490:	10bfffc4 	addi	r2,r2,-1
    a494:	11809f36 	bltu	r2,r6,a714 <__udivdi3+0x5a0>
    a498:	00800404 	movi	r2,16
    a49c:	003f4c06 	br	a1d0 <__alt_data_end+0xfffda1d0>
    a4a0:	3dce983a 	sll	r7,r7,r23
    a4a4:	30b8d83a 	srl	fp,r6,r2
    a4a8:	80a2d83a 	srl	r17,r16,r2
    a4ac:	35cc983a 	sll	r6,r6,r23
    a4b0:	3f38b03a 	or	fp,r7,fp
    a4b4:	e024d43a 	srli	r18,fp,16
    a4b8:	9884d83a 	srl	r2,r19,r2
    a4bc:	85e0983a 	sll	r16,r16,r23
    a4c0:	8809883a 	mov	r4,r17
    a4c4:	900b883a 	mov	r5,r18
    a4c8:	d9800015 	stw	r6,0(sp)
    a4cc:	1420b03a 	or	r16,r2,r16
    a4d0:	00008f00 	call	8f0 <__umodsi3>
    a4d4:	900b883a 	mov	r5,r18
    a4d8:	8809883a 	mov	r4,r17
    a4dc:	1029883a 	mov	r20,r2
    a4e0:	e5bfffcc 	andi	r22,fp,65535
    a4e4:	000088c0 	call	88c <__udivsi3>
    a4e8:	100b883a 	mov	r5,r2
    a4ec:	b009883a 	mov	r4,r22
    a4f0:	102b883a 	mov	r21,r2
    a4f4:	000ad340 	call	ad34 <__mulsi3>
    a4f8:	a028943a 	slli	r20,r20,16
    a4fc:	8006d43a 	srli	r3,r16,16
    a500:	1d06b03a 	or	r3,r3,r20
    a504:	1880042e 	bgeu	r3,r2,a518 <__udivdi3+0x3a4>
    a508:	1f07883a 	add	r3,r3,fp
    a50c:	a93fffc4 	addi	r4,r21,-1
    a510:	1f00892e 	bgeu	r3,fp,a738 <__udivdi3+0x5c4>
    a514:	202b883a 	mov	r21,r4
    a518:	18a3c83a 	sub	r17,r3,r2
    a51c:	8809883a 	mov	r4,r17
    a520:	900b883a 	mov	r5,r18
    a524:	00008f00 	call	8f0 <__umodsi3>
    a528:	1029883a 	mov	r20,r2
    a52c:	8809883a 	mov	r4,r17
    a530:	900b883a 	mov	r5,r18
    a534:	a028943a 	slli	r20,r20,16
    a538:	000088c0 	call	88c <__udivsi3>
    a53c:	100b883a 	mov	r5,r2
    a540:	b009883a 	mov	r4,r22
    a544:	843fffcc 	andi	r16,r16,65535
    a548:	1023883a 	mov	r17,r2
    a54c:	8520b03a 	or	r16,r16,r20
    a550:	000ad340 	call	ad34 <__mulsi3>
    a554:	8080042e 	bgeu	r16,r2,a568 <__udivdi3+0x3f4>
    a558:	8721883a 	add	r16,r16,fp
    a55c:	88ffffc4 	addi	r3,r17,-1
    a560:	8700712e 	bgeu	r16,fp,a728 <__udivdi3+0x5b4>
    a564:	1823883a 	mov	r17,r3
    a568:	a80e943a 	slli	r7,r21,16
    a56c:	d8c00017 	ldw	r3,0(sp)
    a570:	80a1c83a 	sub	r16,r16,r2
    a574:	3c64b03a 	or	r18,r7,r17
    a578:	1d3fffcc 	andi	r20,r3,65535
    a57c:	9022d43a 	srli	r17,r18,16
    a580:	95bfffcc 	andi	r22,r18,65535
    a584:	a00b883a 	mov	r5,r20
    a588:	b009883a 	mov	r4,r22
    a58c:	182ad43a 	srli	r21,r3,16
    a590:	000ad340 	call	ad34 <__mulsi3>
    a594:	a00b883a 	mov	r5,r20
    a598:	8809883a 	mov	r4,r17
    a59c:	1039883a 	mov	fp,r2
    a5a0:	000ad340 	call	ad34 <__mulsi3>
    a5a4:	8809883a 	mov	r4,r17
    a5a8:	a80b883a 	mov	r5,r21
    a5ac:	1029883a 	mov	r20,r2
    a5b0:	000ad340 	call	ad34 <__mulsi3>
    a5b4:	a80b883a 	mov	r5,r21
    a5b8:	b009883a 	mov	r4,r22
    a5bc:	1023883a 	mov	r17,r2
    a5c0:	000ad340 	call	ad34 <__mulsi3>
    a5c4:	e006d43a 	srli	r3,fp,16
    a5c8:	1505883a 	add	r2,r2,r20
    a5cc:	1887883a 	add	r3,r3,r2
    a5d0:	1d00022e 	bgeu	r3,r20,a5dc <__udivdi3+0x468>
    a5d4:	00800074 	movhi	r2,1
    a5d8:	88a3883a 	add	r17,r17,r2
    a5dc:	1804d43a 	srli	r2,r3,16
    a5e0:	1463883a 	add	r17,r2,r17
    a5e4:	84404436 	bltu	r16,r17,a6f8 <__udivdi3+0x584>
    a5e8:	84403e26 	beq	r16,r17,a6e4 <__udivdi3+0x570>
    a5ec:	9005883a 	mov	r2,r18
    a5f0:	0007883a 	mov	r3,zero
    a5f4:	003f9106 	br	a43c <__alt_data_end+0xfffda43c>
    a5f8:	88e2983a 	sll	r17,r17,r3
    a5fc:	80aed83a 	srl	r23,r16,r2
    a600:	80e0983a 	sll	r16,r16,r3
    a604:	882ad43a 	srli	r21,r17,16
    a608:	9884d83a 	srl	r2,r19,r2
    a60c:	b809883a 	mov	r4,r23
    a610:	a80b883a 	mov	r5,r21
    a614:	98e4983a 	sll	r18,r19,r3
    a618:	142cb03a 	or	r22,r2,r16
    a61c:	00008f00 	call	8f0 <__umodsi3>
    a620:	b809883a 	mov	r4,r23
    a624:	a80b883a 	mov	r5,r21
    a628:	1027883a 	mov	r19,r2
    a62c:	8d3fffcc 	andi	r20,r17,65535
    a630:	000088c0 	call	88c <__udivsi3>
    a634:	a009883a 	mov	r4,r20
    a638:	100b883a 	mov	r5,r2
    a63c:	102f883a 	mov	r23,r2
    a640:	000ad340 	call	ad34 <__mulsi3>
    a644:	9826943a 	slli	r19,r19,16
    a648:	b008d43a 	srli	r4,r22,16
    a64c:	24c8b03a 	or	r4,r4,r19
    a650:	2080062e 	bgeu	r4,r2,a66c <__udivdi3+0x4f8>
    a654:	2449883a 	add	r4,r4,r17
    a658:	b8ffffc4 	addi	r3,r23,-1
    a65c:	24403c36 	bltu	r4,r17,a750 <__udivdi3+0x5dc>
    a660:	20803b2e 	bgeu	r4,r2,a750 <__udivdi3+0x5dc>
    a664:	bdffff84 	addi	r23,r23,-2
    a668:	2449883a 	add	r4,r4,r17
    a66c:	20a1c83a 	sub	r16,r4,r2
    a670:	a80b883a 	mov	r5,r21
    a674:	8009883a 	mov	r4,r16
    a678:	00008f00 	call	8f0 <__umodsi3>
    a67c:	a80b883a 	mov	r5,r21
    a680:	8009883a 	mov	r4,r16
    a684:	1027883a 	mov	r19,r2
    a688:	000088c0 	call	88c <__udivsi3>
    a68c:	a009883a 	mov	r4,r20
    a690:	100b883a 	mov	r5,r2
    a694:	9826943a 	slli	r19,r19,16
    a698:	1039883a 	mov	fp,r2
    a69c:	000ad340 	call	ad34 <__mulsi3>
    a6a0:	b13fffcc 	andi	r4,r22,65535
    a6a4:	24c8b03a 	or	r4,r4,r19
    a6a8:	2080062e 	bgeu	r4,r2,a6c4 <__udivdi3+0x550>
    a6ac:	2449883a 	add	r4,r4,r17
    a6b0:	e0ffffc4 	addi	r3,fp,-1
    a6b4:	24402436 	bltu	r4,r17,a748 <__udivdi3+0x5d4>
    a6b8:	2080232e 	bgeu	r4,r2,a748 <__udivdi3+0x5d4>
    a6bc:	e73fff84 	addi	fp,fp,-2
    a6c0:	2449883a 	add	r4,r4,r17
    a6c4:	b82e943a 	slli	r23,r23,16
    a6c8:	20a1c83a 	sub	r16,r4,r2
    a6cc:	bf06b03a 	or	r3,r23,fp
    a6d0:	003f2806 	br	a374 <__alt_data_end+0xfffda374>
    a6d4:	2021883a 	mov	r16,r4
    a6d8:	003f5306 	br	a428 <__alt_data_end+0xfffda428>
    a6dc:	1821883a 	mov	r16,r3
    a6e0:	003ef406 	br	a2b4 <__alt_data_end+0xfffda2b4>
    a6e4:	1806943a 	slli	r3,r3,16
    a6e8:	9de6983a 	sll	r19,r19,r23
    a6ec:	e73fffcc 	andi	fp,fp,65535
    a6f0:	1f07883a 	add	r3,r3,fp
    a6f4:	98ffbd2e 	bgeu	r19,r3,a5ec <__alt_data_end+0xfffda5ec>
    a6f8:	90bfffc4 	addi	r2,r18,-1
    a6fc:	0007883a 	mov	r3,zero
    a700:	003f4e06 	br	a43c <__alt_data_end+0xfffda43c>
    a704:	00800604 	movi	r2,24
    a708:	003ef506 	br	a2e0 <__alt_data_end+0xfffda2e0>
    a70c:	00800604 	movi	r2,24
    a710:	003f0b06 	br	a340 <__alt_data_end+0xfffda340>
    a714:	00800604 	movi	r2,24
    a718:	003ead06 	br	a1d0 <__alt_data_end+0xfffda1d0>
    a71c:	0007883a 	mov	r3,zero
    a720:	00800044 	movi	r2,1
    a724:	003f4506 	br	a43c <__alt_data_end+0xfffda43c>
    a728:	80bf8e2e 	bgeu	r16,r2,a564 <__alt_data_end+0xfffda564>
    a72c:	8c7fff84 	addi	r17,r17,-2
    a730:	8721883a 	add	r16,r16,fp
    a734:	003f8c06 	br	a568 <__alt_data_end+0xfffda568>
    a738:	18bf762e 	bgeu	r3,r2,a514 <__alt_data_end+0xfffda514>
    a73c:	ad7fff84 	addi	r21,r21,-2
    a740:	1f07883a 	add	r3,r3,fp
    a744:	003f7406 	br	a518 <__alt_data_end+0xfffda518>
    a748:	1839883a 	mov	fp,r3
    a74c:	003fdd06 	br	a6c4 <__alt_data_end+0xfffda6c4>
    a750:	182f883a 	mov	r23,r3
    a754:	003fc506 	br	a66c <__alt_data_end+0xfffda66c>
    a758:	b5bfff84 	addi	r22,r22,-2
    a75c:	3c4f883a 	add	r7,r7,r17
    a760:	003f1a06 	br	a3cc <__alt_data_end+0xfffda3cc>
    a764:	b5bfff84 	addi	r22,r22,-2
    a768:	1c47883a 	add	r3,r3,r17
    a76c:	003ebc06 	br	a260 <__alt_data_end+0xfffda260>

0000a770 <__umoddi3>:
    a770:	defff304 	addi	sp,sp,-52
    a774:	df000b15 	stw	fp,44(sp)
    a778:	dc400415 	stw	r17,16(sp)
    a77c:	dc000315 	stw	r16,12(sp)
    a780:	dfc00c15 	stw	ra,48(sp)
    a784:	ddc00a15 	stw	r23,40(sp)
    a788:	dd800915 	stw	r22,36(sp)
    a78c:	dd400815 	stw	r21,32(sp)
    a790:	dd000715 	stw	r20,28(sp)
    a794:	dcc00615 	stw	r19,24(sp)
    a798:	dc800515 	stw	r18,20(sp)
    a79c:	2021883a 	mov	r16,r4
    a7a0:	2823883a 	mov	r17,r5
    a7a4:	2839883a 	mov	fp,r5
    a7a8:	3800401e 	bne	r7,zero,a8ac <__umoddi3+0x13c>
    a7ac:	3027883a 	mov	r19,r6
    a7b0:	2029883a 	mov	r20,r4
    a7b4:	2980552e 	bgeu	r5,r6,a90c <__umoddi3+0x19c>
    a7b8:	00bfffd4 	movui	r2,65535
    a7bc:	1180a236 	bltu	r2,r6,aa48 <__umoddi3+0x2d8>
    a7c0:	01003fc4 	movi	r4,255
    a7c4:	2189803a 	cmpltu	r4,r4,r6
    a7c8:	200890fa 	slli	r4,r4,3
    a7cc:	3104d83a 	srl	r2,r6,r4
    a7d0:	00c000b4 	movhi	r3,2
    a7d4:	18e00d04 	addi	r3,r3,-32716
    a7d8:	1885883a 	add	r2,r3,r2
    a7dc:	10c00003 	ldbu	r3,0(r2)
    a7e0:	00800804 	movi	r2,32
    a7e4:	1909883a 	add	r4,r3,r4
    a7e8:	1125c83a 	sub	r18,r2,r4
    a7ec:	90000526 	beq	r18,zero,a804 <__umoddi3+0x94>
    a7f0:	8ca2983a 	sll	r17,r17,r18
    a7f4:	8108d83a 	srl	r4,r16,r4
    a7f8:	34a6983a 	sll	r19,r6,r18
    a7fc:	84a8983a 	sll	r20,r16,r18
    a800:	2478b03a 	or	fp,r4,r17
    a804:	982cd43a 	srli	r22,r19,16
    a808:	e009883a 	mov	r4,fp
    a80c:	9dffffcc 	andi	r23,r19,65535
    a810:	b00b883a 	mov	r5,r22
    a814:	00008f00 	call	8f0 <__umodsi3>
    a818:	b00b883a 	mov	r5,r22
    a81c:	e009883a 	mov	r4,fp
    a820:	102b883a 	mov	r21,r2
    a824:	000088c0 	call	88c <__udivsi3>
    a828:	100b883a 	mov	r5,r2
    a82c:	b809883a 	mov	r4,r23
    a830:	000ad340 	call	ad34 <__mulsi3>
    a834:	a82a943a 	slli	r21,r21,16
    a838:	a006d43a 	srli	r3,r20,16
    a83c:	1d46b03a 	or	r3,r3,r21
    a840:	1880032e 	bgeu	r3,r2,a850 <__umoddi3+0xe0>
    a844:	1cc7883a 	add	r3,r3,r19
    a848:	1cc00136 	bltu	r3,r19,a850 <__umoddi3+0xe0>
    a84c:	18813136 	bltu	r3,r2,ad14 <__umoddi3+0x5a4>
    a850:	18a1c83a 	sub	r16,r3,r2
    a854:	b00b883a 	mov	r5,r22
    a858:	8009883a 	mov	r4,r16
    a85c:	00008f00 	call	8f0 <__umodsi3>
    a860:	b00b883a 	mov	r5,r22
    a864:	8009883a 	mov	r4,r16
    a868:	1023883a 	mov	r17,r2
    a86c:	000088c0 	call	88c <__udivsi3>
    a870:	100b883a 	mov	r5,r2
    a874:	b809883a 	mov	r4,r23
    a878:	8822943a 	slli	r17,r17,16
    a87c:	000ad340 	call	ad34 <__mulsi3>
    a880:	a0ffffcc 	andi	r3,r20,65535
    a884:	1c46b03a 	or	r3,r3,r17
    a888:	1880042e 	bgeu	r3,r2,a89c <__umoddi3+0x12c>
    a88c:	1cc7883a 	add	r3,r3,r19
    a890:	1cc00236 	bltu	r3,r19,a89c <__umoddi3+0x12c>
    a894:	1880012e 	bgeu	r3,r2,a89c <__umoddi3+0x12c>
    a898:	1cc7883a 	add	r3,r3,r19
    a89c:	1885c83a 	sub	r2,r3,r2
    a8a0:	1484d83a 	srl	r2,r2,r18
    a8a4:	0007883a 	mov	r3,zero
    a8a8:	00005306 	br	a9f8 <__umoddi3+0x288>
    a8ac:	29c05036 	bltu	r5,r7,a9f0 <__umoddi3+0x280>
    a8b0:	00bfffd4 	movui	r2,65535
    a8b4:	11c05c2e 	bgeu	r2,r7,aa28 <__umoddi3+0x2b8>
    a8b8:	00804034 	movhi	r2,256
    a8bc:	10bfffc4 	addi	r2,r2,-1
    a8c0:	11c10636 	bltu	r2,r7,acdc <__umoddi3+0x56c>
    a8c4:	01000404 	movi	r4,16
    a8c8:	3904d83a 	srl	r2,r7,r4
    a8cc:	00c000b4 	movhi	r3,2
    a8d0:	18e00d04 	addi	r3,r3,-32716
    a8d4:	1885883a 	add	r2,r3,r2
    a8d8:	14c00003 	ldbu	r19,0(r2)
    a8dc:	00c00804 	movi	r3,32
    a8e0:	9927883a 	add	r19,r19,r4
    a8e4:	1ce9c83a 	sub	r20,r3,r19
    a8e8:	a0005c1e 	bne	r20,zero,aa5c <__umoddi3+0x2ec>
    a8ec:	3c400136 	bltu	r7,r17,a8f4 <__umoddi3+0x184>
    a8f0:	81810a36 	bltu	r16,r6,ad1c <__umoddi3+0x5ac>
    a8f4:	8185c83a 	sub	r2,r16,r6
    a8f8:	89e3c83a 	sub	r17,r17,r7
    a8fc:	8089803a 	cmpltu	r4,r16,r2
    a900:	8939c83a 	sub	fp,r17,r4
    a904:	e007883a 	mov	r3,fp
    a908:	00003b06 	br	a9f8 <__umoddi3+0x288>
    a90c:	3000041e 	bne	r6,zero,a920 <__umoddi3+0x1b0>
    a910:	000b883a 	mov	r5,zero
    a914:	01000044 	movi	r4,1
    a918:	000088c0 	call	88c <__udivsi3>
    a91c:	1027883a 	mov	r19,r2
    a920:	00bfffd4 	movui	r2,65535
    a924:	14c0442e 	bgeu	r2,r19,aa38 <__umoddi3+0x2c8>
    a928:	00804034 	movhi	r2,256
    a92c:	10bfffc4 	addi	r2,r2,-1
    a930:	14c0ec36 	bltu	r2,r19,ace4 <__umoddi3+0x574>
    a934:	00800404 	movi	r2,16
    a938:	9886d83a 	srl	r3,r19,r2
    a93c:	010000b4 	movhi	r4,2
    a940:	21200d04 	addi	r4,r4,-32716
    a944:	20c7883a 	add	r3,r4,r3
    a948:	18c00003 	ldbu	r3,0(r3)
    a94c:	1887883a 	add	r3,r3,r2
    a950:	00800804 	movi	r2,32
    a954:	10e5c83a 	sub	r18,r2,r3
    a958:	9000ab1e 	bne	r18,zero,ac08 <__umoddi3+0x498>
    a95c:	982cd43a 	srli	r22,r19,16
    a960:	8ce3c83a 	sub	r17,r17,r19
    a964:	9dffffcc 	andi	r23,r19,65535
    a968:	b00b883a 	mov	r5,r22
    a96c:	8809883a 	mov	r4,r17
    a970:	00008f00 	call	8f0 <__umodsi3>
    a974:	b00b883a 	mov	r5,r22
    a978:	8809883a 	mov	r4,r17
    a97c:	102b883a 	mov	r21,r2
    a980:	000088c0 	call	88c <__udivsi3>
    a984:	b80b883a 	mov	r5,r23
    a988:	1009883a 	mov	r4,r2
    a98c:	000ad340 	call	ad34 <__mulsi3>
    a990:	a82a943a 	slli	r21,r21,16
    a994:	a006d43a 	srli	r3,r20,16
    a998:	1d46b03a 	or	r3,r3,r21
    a99c:	1880042e 	bgeu	r3,r2,a9b0 <__umoddi3+0x240>
    a9a0:	1cc7883a 	add	r3,r3,r19
    a9a4:	1cc00236 	bltu	r3,r19,a9b0 <__umoddi3+0x240>
    a9a8:	1880012e 	bgeu	r3,r2,a9b0 <__umoddi3+0x240>
    a9ac:	1cc7883a 	add	r3,r3,r19
    a9b0:	18a1c83a 	sub	r16,r3,r2
    a9b4:	b00b883a 	mov	r5,r22
    a9b8:	8009883a 	mov	r4,r16
    a9bc:	00008f00 	call	8f0 <__umodsi3>
    a9c0:	1023883a 	mov	r17,r2
    a9c4:	b00b883a 	mov	r5,r22
    a9c8:	8009883a 	mov	r4,r16
    a9cc:	000088c0 	call	88c <__udivsi3>
    a9d0:	8822943a 	slli	r17,r17,16
    a9d4:	b80b883a 	mov	r5,r23
    a9d8:	1009883a 	mov	r4,r2
    a9dc:	000ad340 	call	ad34 <__mulsi3>
    a9e0:	a53fffcc 	andi	r20,r20,65535
    a9e4:	a446b03a 	or	r3,r20,r17
    a9e8:	18bfac2e 	bgeu	r3,r2,a89c <__alt_data_end+0xfffda89c>
    a9ec:	003fa706 	br	a88c <__alt_data_end+0xfffda88c>
    a9f0:	2005883a 	mov	r2,r4
    a9f4:	2807883a 	mov	r3,r5
    a9f8:	dfc00c17 	ldw	ra,48(sp)
    a9fc:	df000b17 	ldw	fp,44(sp)
    aa00:	ddc00a17 	ldw	r23,40(sp)
    aa04:	dd800917 	ldw	r22,36(sp)
    aa08:	dd400817 	ldw	r21,32(sp)
    aa0c:	dd000717 	ldw	r20,28(sp)
    aa10:	dcc00617 	ldw	r19,24(sp)
    aa14:	dc800517 	ldw	r18,20(sp)
    aa18:	dc400417 	ldw	r17,16(sp)
    aa1c:	dc000317 	ldw	r16,12(sp)
    aa20:	dec00d04 	addi	sp,sp,52
    aa24:	f800283a 	ret
    aa28:	04c03fc4 	movi	r19,255
    aa2c:	99c9803a 	cmpltu	r4,r19,r7
    aa30:	200890fa 	slli	r4,r4,3
    aa34:	003fa406 	br	a8c8 <__alt_data_end+0xfffda8c8>
    aa38:	00803fc4 	movi	r2,255
    aa3c:	14c5803a 	cmpltu	r2,r2,r19
    aa40:	100490fa 	slli	r2,r2,3
    aa44:	003fbc06 	br	a938 <__alt_data_end+0xfffda938>
    aa48:	00804034 	movhi	r2,256
    aa4c:	10bfffc4 	addi	r2,r2,-1
    aa50:	1180a636 	bltu	r2,r6,acec <__umoddi3+0x57c>
    aa54:	01000404 	movi	r4,16
    aa58:	003f5c06 	br	a7cc <__alt_data_end+0xfffda7cc>
    aa5c:	3d0e983a 	sll	r7,r7,r20
    aa60:	34ead83a 	srl	r21,r6,r19
    aa64:	8cc6d83a 	srl	r3,r17,r19
    aa68:	8d10983a 	sll	r8,r17,r20
    aa6c:	3d6ab03a 	or	r21,r7,r21
    aa70:	a82cd43a 	srli	r22,r21,16
    aa74:	84e2d83a 	srl	r17,r16,r19
    aa78:	1809883a 	mov	r4,r3
    aa7c:	b00b883a 	mov	r5,r22
    aa80:	8a22b03a 	or	r17,r17,r8
    aa84:	3524983a 	sll	r18,r6,r20
    aa88:	dc400015 	stw	r17,0(sp)
    aa8c:	d8c00115 	stw	r3,4(sp)
    aa90:	00008f00 	call	8f0 <__umodsi3>
    aa94:	d8c00117 	ldw	r3,4(sp)
    aa98:	b00b883a 	mov	r5,r22
    aa9c:	1039883a 	mov	fp,r2
    aaa0:	1809883a 	mov	r4,r3
    aaa4:	000088c0 	call	88c <__udivsi3>
    aaa8:	adffffcc 	andi	r23,r21,65535
    aaac:	100b883a 	mov	r5,r2
    aab0:	b809883a 	mov	r4,r23
    aab4:	1023883a 	mov	r17,r2
    aab8:	000ad340 	call	ad34 <__mulsi3>
    aabc:	d9400017 	ldw	r5,0(sp)
    aac0:	e008943a 	slli	r4,fp,16
    aac4:	8520983a 	sll	r16,r16,r20
    aac8:	2806d43a 	srli	r3,r5,16
    aacc:	1906b03a 	or	r3,r3,r4
    aad0:	1880042e 	bgeu	r3,r2,aae4 <__umoddi3+0x374>
    aad4:	1d47883a 	add	r3,r3,r21
    aad8:	893fffc4 	addi	r4,r17,-1
    aadc:	1d40892e 	bgeu	r3,r21,ad04 <__umoddi3+0x594>
    aae0:	2023883a 	mov	r17,r4
    aae4:	18b9c83a 	sub	fp,r3,r2
    aae8:	b00b883a 	mov	r5,r22
    aaec:	e009883a 	mov	r4,fp
    aaf0:	00008f00 	call	8f0 <__umodsi3>
    aaf4:	b00b883a 	mov	r5,r22
    aaf8:	e009883a 	mov	r4,fp
    aafc:	d8800215 	stw	r2,8(sp)
    ab00:	000088c0 	call	88c <__udivsi3>
    ab04:	100b883a 	mov	r5,r2
    ab08:	b809883a 	mov	r4,r23
    ab0c:	102d883a 	mov	r22,r2
    ab10:	000ad340 	call	ad34 <__mulsi3>
    ab14:	d9800217 	ldw	r6,8(sp)
    ab18:	d8c00017 	ldw	r3,0(sp)
    ab1c:	300c943a 	slli	r6,r6,16
    ab20:	1a3fffcc 	andi	r8,r3,65535
    ab24:	4190b03a 	or	r8,r8,r6
    ab28:	4080042e 	bgeu	r8,r2,ab3c <__umoddi3+0x3cc>
    ab2c:	4551883a 	add	r8,r8,r21
    ab30:	b0ffffc4 	addi	r3,r22,-1
    ab34:	45406f2e 	bgeu	r8,r21,acf4 <__umoddi3+0x584>
    ab38:	182d883a 	mov	r22,r3
    ab3c:	880e943a 	slli	r7,r17,16
    ab40:	9006d43a 	srli	r3,r18,16
    ab44:	91bfffcc 	andi	r6,r18,65535
    ab48:	3dacb03a 	or	r22,r7,r22
    ab4c:	b02ed43a 	srli	r23,r22,16
    ab50:	b5bfffcc 	andi	r22,r22,65535
    ab54:	300b883a 	mov	r5,r6
    ab58:	b009883a 	mov	r4,r22
    ab5c:	40a3c83a 	sub	r17,r8,r2
    ab60:	d8c00115 	stw	r3,4(sp)
    ab64:	d9800215 	stw	r6,8(sp)
    ab68:	000ad340 	call	ad34 <__mulsi3>
    ab6c:	d9800217 	ldw	r6,8(sp)
    ab70:	b809883a 	mov	r4,r23
    ab74:	1039883a 	mov	fp,r2
    ab78:	300b883a 	mov	r5,r6
    ab7c:	000ad340 	call	ad34 <__mulsi3>
    ab80:	d8c00117 	ldw	r3,4(sp)
    ab84:	b809883a 	mov	r4,r23
    ab88:	d8800215 	stw	r2,8(sp)
    ab8c:	180b883a 	mov	r5,r3
    ab90:	000ad340 	call	ad34 <__mulsi3>
    ab94:	d8c00117 	ldw	r3,4(sp)
    ab98:	b009883a 	mov	r4,r22
    ab9c:	102f883a 	mov	r23,r2
    aba0:	180b883a 	mov	r5,r3
    aba4:	000ad340 	call	ad34 <__mulsi3>
    aba8:	d9800217 	ldw	r6,8(sp)
    abac:	e006d43a 	srli	r3,fp,16
    abb0:	1185883a 	add	r2,r2,r6
    abb4:	1885883a 	add	r2,r3,r2
    abb8:	1180022e 	bgeu	r2,r6,abc4 <__umoddi3+0x454>
    abbc:	00c00074 	movhi	r3,1
    abc0:	b8ef883a 	add	r23,r23,r3
    abc4:	1006d43a 	srli	r3,r2,16
    abc8:	1004943a 	slli	r2,r2,16
    abcc:	e73fffcc 	andi	fp,fp,65535
    abd0:	1dc7883a 	add	r3,r3,r23
    abd4:	1739883a 	add	fp,r2,fp
    abd8:	88c03a36 	bltu	r17,r3,acc4 <__umoddi3+0x554>
    abdc:	88c05126 	beq	r17,r3,ad24 <__umoddi3+0x5b4>
    abe0:	88c9c83a 	sub	r4,r17,r3
    abe4:	e00f883a 	mov	r7,fp
    abe8:	81cfc83a 	sub	r7,r16,r7
    abec:	81c7803a 	cmpltu	r3,r16,r7
    abf0:	20c7c83a 	sub	r3,r4,r3
    abf4:	1cc4983a 	sll	r2,r3,r19
    abf8:	3d0ed83a 	srl	r7,r7,r20
    abfc:	1d06d83a 	srl	r3,r3,r20
    ac00:	11c4b03a 	or	r2,r2,r7
    ac04:	003f7c06 	br	a9f8 <__alt_data_end+0xfffda9f8>
    ac08:	9ca6983a 	sll	r19,r19,r18
    ac0c:	88f8d83a 	srl	fp,r17,r3
    ac10:	80c4d83a 	srl	r2,r16,r3
    ac14:	982cd43a 	srli	r22,r19,16
    ac18:	8ca2983a 	sll	r17,r17,r18
    ac1c:	e009883a 	mov	r4,fp
    ac20:	b00b883a 	mov	r5,r22
    ac24:	146ab03a 	or	r21,r2,r17
    ac28:	00008f00 	call	8f0 <__umodsi3>
    ac2c:	b00b883a 	mov	r5,r22
    ac30:	e009883a 	mov	r4,fp
    ac34:	1029883a 	mov	r20,r2
    ac38:	9dffffcc 	andi	r23,r19,65535
    ac3c:	000088c0 	call	88c <__udivsi3>
    ac40:	b809883a 	mov	r4,r23
    ac44:	100b883a 	mov	r5,r2
    ac48:	000ad340 	call	ad34 <__mulsi3>
    ac4c:	a008943a 	slli	r4,r20,16
    ac50:	a806d43a 	srli	r3,r21,16
    ac54:	84a8983a 	sll	r20,r16,r18
    ac58:	1906b03a 	or	r3,r3,r4
    ac5c:	1880042e 	bgeu	r3,r2,ac70 <__umoddi3+0x500>
    ac60:	1cc7883a 	add	r3,r3,r19
    ac64:	1cc00236 	bltu	r3,r19,ac70 <__umoddi3+0x500>
    ac68:	1880012e 	bgeu	r3,r2,ac70 <__umoddi3+0x500>
    ac6c:	1cc7883a 	add	r3,r3,r19
    ac70:	18a3c83a 	sub	r17,r3,r2
    ac74:	b00b883a 	mov	r5,r22
    ac78:	8809883a 	mov	r4,r17
    ac7c:	00008f00 	call	8f0 <__umodsi3>
    ac80:	b00b883a 	mov	r5,r22
    ac84:	8809883a 	mov	r4,r17
    ac88:	1021883a 	mov	r16,r2
    ac8c:	000088c0 	call	88c <__udivsi3>
    ac90:	100b883a 	mov	r5,r2
    ac94:	b809883a 	mov	r4,r23
    ac98:	8020943a 	slli	r16,r16,16
    ac9c:	000ad340 	call	ad34 <__mulsi3>
    aca0:	a8ffffcc 	andi	r3,r21,65535
    aca4:	1c06b03a 	or	r3,r3,r16
    aca8:	1880042e 	bgeu	r3,r2,acbc <__umoddi3+0x54c>
    acac:	1cc7883a 	add	r3,r3,r19
    acb0:	1cc00236 	bltu	r3,r19,acbc <__umoddi3+0x54c>
    acb4:	1880012e 	bgeu	r3,r2,acbc <__umoddi3+0x54c>
    acb8:	1cc7883a 	add	r3,r3,r19
    acbc:	18a3c83a 	sub	r17,r3,r2
    acc0:	003f2906 	br	a968 <__alt_data_end+0xfffda968>
    acc4:	e48fc83a 	sub	r7,fp,r18
    acc8:	1d49c83a 	sub	r4,r3,r21
    accc:	e1f9803a 	cmpltu	fp,fp,r7
    acd0:	2739c83a 	sub	fp,r4,fp
    acd4:	8f09c83a 	sub	r4,r17,fp
    acd8:	003fc306 	br	abe8 <__alt_data_end+0xfffdabe8>
    acdc:	01000604 	movi	r4,24
    ace0:	003ef906 	br	a8c8 <__alt_data_end+0xfffda8c8>
    ace4:	00800604 	movi	r2,24
    ace8:	003f1306 	br	a938 <__alt_data_end+0xfffda938>
    acec:	01000604 	movi	r4,24
    acf0:	003eb606 	br	a7cc <__alt_data_end+0xfffda7cc>
    acf4:	40bf902e 	bgeu	r8,r2,ab38 <__alt_data_end+0xfffdab38>
    acf8:	b5bfff84 	addi	r22,r22,-2
    acfc:	4551883a 	add	r8,r8,r21
    ad00:	003f8e06 	br	ab3c <__alt_data_end+0xfffdab3c>
    ad04:	18bf762e 	bgeu	r3,r2,aae0 <__alt_data_end+0xfffdaae0>
    ad08:	8c7fff84 	addi	r17,r17,-2
    ad0c:	1d47883a 	add	r3,r3,r21
    ad10:	003f7406 	br	aae4 <__alt_data_end+0xfffdaae4>
    ad14:	1cc7883a 	add	r3,r3,r19
    ad18:	003ecd06 	br	a850 <__alt_data_end+0xfffda850>
    ad1c:	8005883a 	mov	r2,r16
    ad20:	003ef806 	br	a904 <__alt_data_end+0xfffda904>
    ad24:	873fe736 	bltu	r16,fp,acc4 <__alt_data_end+0xfffdacc4>
    ad28:	e00f883a 	mov	r7,fp
    ad2c:	0009883a 	mov	r4,zero
    ad30:	003fad06 	br	abe8 <__alt_data_end+0xfffdabe8>

0000ad34 <__mulsi3>:
    ad34:	0005883a 	mov	r2,zero
    ad38:	20000726 	beq	r4,zero,ad58 <__mulsi3+0x24>
    ad3c:	20c0004c 	andi	r3,r4,1
    ad40:	2008d07a 	srli	r4,r4,1
    ad44:	18000126 	beq	r3,zero,ad4c <__mulsi3+0x18>
    ad48:	1145883a 	add	r2,r2,r5
    ad4c:	294b883a 	add	r5,r5,r5
    ad50:	203ffa1e 	bne	r4,zero,ad3c <__alt_data_end+0xfffdad3c>
    ad54:	f800283a 	ret
    ad58:	f800283a 	ret

0000ad5c <__adddf3>:
    ad5c:	02c00434 	movhi	r11,16
    ad60:	5affffc4 	addi	r11,r11,-1
    ad64:	2806d7fa 	srli	r3,r5,31
    ad68:	2ad4703a 	and	r10,r5,r11
    ad6c:	3ad2703a 	and	r9,r7,r11
    ad70:	3804d53a 	srli	r2,r7,20
    ad74:	3018d77a 	srli	r12,r6,29
    ad78:	280ad53a 	srli	r5,r5,20
    ad7c:	501490fa 	slli	r10,r10,3
    ad80:	2010d77a 	srli	r8,r4,29
    ad84:	481290fa 	slli	r9,r9,3
    ad88:	380ed7fa 	srli	r7,r7,31
    ad8c:	defffb04 	addi	sp,sp,-20
    ad90:	dc800215 	stw	r18,8(sp)
    ad94:	dc400115 	stw	r17,4(sp)
    ad98:	dc000015 	stw	r16,0(sp)
    ad9c:	dfc00415 	stw	ra,16(sp)
    ada0:	dcc00315 	stw	r19,12(sp)
    ada4:	1c803fcc 	andi	r18,r3,255
    ada8:	2c01ffcc 	andi	r16,r5,2047
    adac:	5210b03a 	or	r8,r10,r8
    adb0:	202290fa 	slli	r17,r4,3
    adb4:	1081ffcc 	andi	r2,r2,2047
    adb8:	4b12b03a 	or	r9,r9,r12
    adbc:	300c90fa 	slli	r6,r6,3
    adc0:	91c07526 	beq	r18,r7,af98 <__adddf3+0x23c>
    adc4:	8087c83a 	sub	r3,r16,r2
    adc8:	00c0ab0e 	bge	zero,r3,b078 <__adddf3+0x31c>
    adcc:	10002a1e 	bne	r2,zero,ae78 <__adddf3+0x11c>
    add0:	4984b03a 	or	r2,r9,r6
    add4:	1000961e 	bne	r2,zero,b030 <__adddf3+0x2d4>
    add8:	888001cc 	andi	r2,r17,7
    addc:	10000726 	beq	r2,zero,adfc <__adddf3+0xa0>
    ade0:	888003cc 	andi	r2,r17,15
    ade4:	00c00104 	movi	r3,4
    ade8:	10c00426 	beq	r2,r3,adfc <__adddf3+0xa0>
    adec:	88c7883a 	add	r3,r17,r3
    adf0:	1c63803a 	cmpltu	r17,r3,r17
    adf4:	4451883a 	add	r8,r8,r17
    adf8:	1823883a 	mov	r17,r3
    adfc:	4080202c 	andhi	r2,r8,128
    ae00:	10005926 	beq	r2,zero,af68 <__adddf3+0x20c>
    ae04:	84000044 	addi	r16,r16,1
    ae08:	0081ffc4 	movi	r2,2047
    ae0c:	8080ba26 	beq	r16,r2,b0f8 <__adddf3+0x39c>
    ae10:	00bfe034 	movhi	r2,65408
    ae14:	10bfffc4 	addi	r2,r2,-1
    ae18:	4090703a 	and	r8,r8,r2
    ae1c:	4004977a 	slli	r2,r8,29
    ae20:	4010927a 	slli	r8,r8,9
    ae24:	8822d0fa 	srli	r17,r17,3
    ae28:	8401ffcc 	andi	r16,r16,2047
    ae2c:	4010d33a 	srli	r8,r8,12
    ae30:	9007883a 	mov	r3,r18
    ae34:	1444b03a 	or	r2,r2,r17
    ae38:	8401ffcc 	andi	r16,r16,2047
    ae3c:	8020953a 	slli	r16,r16,20
    ae40:	18c03fcc 	andi	r3,r3,255
    ae44:	01000434 	movhi	r4,16
    ae48:	213fffc4 	addi	r4,r4,-1
    ae4c:	180697fa 	slli	r3,r3,31
    ae50:	4110703a 	and	r8,r8,r4
    ae54:	4410b03a 	or	r8,r8,r16
    ae58:	40c6b03a 	or	r3,r8,r3
    ae5c:	dfc00417 	ldw	ra,16(sp)
    ae60:	dcc00317 	ldw	r19,12(sp)
    ae64:	dc800217 	ldw	r18,8(sp)
    ae68:	dc400117 	ldw	r17,4(sp)
    ae6c:	dc000017 	ldw	r16,0(sp)
    ae70:	dec00504 	addi	sp,sp,20
    ae74:	f800283a 	ret
    ae78:	0081ffc4 	movi	r2,2047
    ae7c:	80bfd626 	beq	r16,r2,add8 <__alt_data_end+0xfffdadd8>
    ae80:	4a402034 	orhi	r9,r9,128
    ae84:	00800e04 	movi	r2,56
    ae88:	10c09f16 	blt	r2,r3,b108 <__adddf3+0x3ac>
    ae8c:	008007c4 	movi	r2,31
    ae90:	10c0c216 	blt	r2,r3,b19c <__adddf3+0x440>
    ae94:	00800804 	movi	r2,32
    ae98:	10c5c83a 	sub	r2,r2,r3
    ae9c:	488a983a 	sll	r5,r9,r2
    aea0:	30c8d83a 	srl	r4,r6,r3
    aea4:	3084983a 	sll	r2,r6,r2
    aea8:	48c6d83a 	srl	r3,r9,r3
    aeac:	290cb03a 	or	r6,r5,r4
    aeb0:	1004c03a 	cmpne	r2,r2,zero
    aeb4:	308cb03a 	or	r6,r6,r2
    aeb8:	898dc83a 	sub	r6,r17,r6
    aebc:	89a3803a 	cmpltu	r17,r17,r6
    aec0:	40d1c83a 	sub	r8,r8,r3
    aec4:	4451c83a 	sub	r8,r8,r17
    aec8:	3023883a 	mov	r17,r6
    aecc:	4080202c 	andhi	r2,r8,128
    aed0:	10002326 	beq	r2,zero,af60 <__adddf3+0x204>
    aed4:	04c02034 	movhi	r19,128
    aed8:	9cffffc4 	addi	r19,r19,-1
    aedc:	44e6703a 	and	r19,r8,r19
    aee0:	98007626 	beq	r19,zero,b0bc <__adddf3+0x360>
    aee4:	9809883a 	mov	r4,r19
    aee8:	000d59c0 	call	d59c <__clzsi2>
    aeec:	10fffe04 	addi	r3,r2,-8
    aef0:	010007c4 	movi	r4,31
    aef4:	20c07716 	blt	r4,r3,b0d4 <__adddf3+0x378>
    aef8:	00800804 	movi	r2,32
    aefc:	10c5c83a 	sub	r2,r2,r3
    af00:	8884d83a 	srl	r2,r17,r2
    af04:	98d0983a 	sll	r8,r19,r3
    af08:	88e2983a 	sll	r17,r17,r3
    af0c:	1204b03a 	or	r2,r2,r8
    af10:	1c007416 	blt	r3,r16,b0e4 <__adddf3+0x388>
    af14:	1c21c83a 	sub	r16,r3,r16
    af18:	82000044 	addi	r8,r16,1
    af1c:	00c007c4 	movi	r3,31
    af20:	1a009116 	blt	r3,r8,b168 <__adddf3+0x40c>
    af24:	00c00804 	movi	r3,32
    af28:	1a07c83a 	sub	r3,r3,r8
    af2c:	8a08d83a 	srl	r4,r17,r8
    af30:	88e2983a 	sll	r17,r17,r3
    af34:	10c6983a 	sll	r3,r2,r3
    af38:	1210d83a 	srl	r8,r2,r8
    af3c:	8804c03a 	cmpne	r2,r17,zero
    af40:	1906b03a 	or	r3,r3,r4
    af44:	18a2b03a 	or	r17,r3,r2
    af48:	0021883a 	mov	r16,zero
    af4c:	003fa206 	br	add8 <__alt_data_end+0xfffdadd8>
    af50:	1890b03a 	or	r8,r3,r2
    af54:	40017d26 	beq	r8,zero,b54c <__adddf3+0x7f0>
    af58:	1011883a 	mov	r8,r2
    af5c:	1823883a 	mov	r17,r3
    af60:	888001cc 	andi	r2,r17,7
    af64:	103f9e1e 	bne	r2,zero,ade0 <__alt_data_end+0xfffdade0>
    af68:	4004977a 	slli	r2,r8,29
    af6c:	8822d0fa 	srli	r17,r17,3
    af70:	4010d0fa 	srli	r8,r8,3
    af74:	9007883a 	mov	r3,r18
    af78:	1444b03a 	or	r2,r2,r17
    af7c:	0101ffc4 	movi	r4,2047
    af80:	81002426 	beq	r16,r4,b014 <__adddf3+0x2b8>
    af84:	8120703a 	and	r16,r16,r4
    af88:	01000434 	movhi	r4,16
    af8c:	213fffc4 	addi	r4,r4,-1
    af90:	4110703a 	and	r8,r8,r4
    af94:	003fa806 	br	ae38 <__alt_data_end+0xfffdae38>
    af98:	8089c83a 	sub	r4,r16,r2
    af9c:	01005e0e 	bge	zero,r4,b118 <__adddf3+0x3bc>
    afa0:	10002b26 	beq	r2,zero,b050 <__adddf3+0x2f4>
    afa4:	0081ffc4 	movi	r2,2047
    afa8:	80bf8b26 	beq	r16,r2,add8 <__alt_data_end+0xfffdadd8>
    afac:	4a402034 	orhi	r9,r9,128
    afb0:	00800e04 	movi	r2,56
    afb4:	1100a40e 	bge	r2,r4,b248 <__adddf3+0x4ec>
    afb8:	498cb03a 	or	r6,r9,r6
    afbc:	300ac03a 	cmpne	r5,r6,zero
    afc0:	0013883a 	mov	r9,zero
    afc4:	2c4b883a 	add	r5,r5,r17
    afc8:	2c63803a 	cmpltu	r17,r5,r17
    afcc:	4a11883a 	add	r8,r9,r8
    afd0:	8a11883a 	add	r8,r17,r8
    afd4:	2823883a 	mov	r17,r5
    afd8:	4080202c 	andhi	r2,r8,128
    afdc:	103fe026 	beq	r2,zero,af60 <__alt_data_end+0xfffdaf60>
    afe0:	84000044 	addi	r16,r16,1
    afe4:	0081ffc4 	movi	r2,2047
    afe8:	8080d226 	beq	r16,r2,b334 <__adddf3+0x5d8>
    afec:	00bfe034 	movhi	r2,65408
    aff0:	10bfffc4 	addi	r2,r2,-1
    aff4:	4090703a 	and	r8,r8,r2
    aff8:	880ad07a 	srli	r5,r17,1
    affc:	400897fa 	slli	r4,r8,31
    b000:	88c0004c 	andi	r3,r17,1
    b004:	28e2b03a 	or	r17,r5,r3
    b008:	4010d07a 	srli	r8,r8,1
    b00c:	2462b03a 	or	r17,r4,r17
    b010:	003f7106 	br	add8 <__alt_data_end+0xfffdadd8>
    b014:	4088b03a 	or	r4,r8,r2
    b018:	20014526 	beq	r4,zero,b530 <__adddf3+0x7d4>
    b01c:	01000434 	movhi	r4,16
    b020:	42000234 	orhi	r8,r8,8
    b024:	213fffc4 	addi	r4,r4,-1
    b028:	4110703a 	and	r8,r8,r4
    b02c:	003f8206 	br	ae38 <__alt_data_end+0xfffdae38>
    b030:	18ffffc4 	addi	r3,r3,-1
    b034:	1800491e 	bne	r3,zero,b15c <__adddf3+0x400>
    b038:	898bc83a 	sub	r5,r17,r6
    b03c:	8963803a 	cmpltu	r17,r17,r5
    b040:	4251c83a 	sub	r8,r8,r9
    b044:	4451c83a 	sub	r8,r8,r17
    b048:	2823883a 	mov	r17,r5
    b04c:	003f9f06 	br	aecc <__alt_data_end+0xfffdaecc>
    b050:	4984b03a 	or	r2,r9,r6
    b054:	103f6026 	beq	r2,zero,add8 <__alt_data_end+0xfffdadd8>
    b058:	213fffc4 	addi	r4,r4,-1
    b05c:	2000931e 	bne	r4,zero,b2ac <__adddf3+0x550>
    b060:	898d883a 	add	r6,r17,r6
    b064:	3463803a 	cmpltu	r17,r6,r17
    b068:	4251883a 	add	r8,r8,r9
    b06c:	8a11883a 	add	r8,r17,r8
    b070:	3023883a 	mov	r17,r6
    b074:	003fd806 	br	afd8 <__alt_data_end+0xfffdafd8>
    b078:	1800541e 	bne	r3,zero,b1cc <__adddf3+0x470>
    b07c:	80800044 	addi	r2,r16,1
    b080:	1081ffcc 	andi	r2,r2,2047
    b084:	00c00044 	movi	r3,1
    b088:	1880a00e 	bge	r3,r2,b30c <__adddf3+0x5b0>
    b08c:	8989c83a 	sub	r4,r17,r6
    b090:	8905803a 	cmpltu	r2,r17,r4
    b094:	4267c83a 	sub	r19,r8,r9
    b098:	98a7c83a 	sub	r19,r19,r2
    b09c:	9880202c 	andhi	r2,r19,128
    b0a0:	10006326 	beq	r2,zero,b230 <__adddf3+0x4d4>
    b0a4:	3463c83a 	sub	r17,r6,r17
    b0a8:	4a07c83a 	sub	r3,r9,r8
    b0ac:	344d803a 	cmpltu	r6,r6,r17
    b0b0:	19a7c83a 	sub	r19,r3,r6
    b0b4:	3825883a 	mov	r18,r7
    b0b8:	983f8a1e 	bne	r19,zero,aee4 <__alt_data_end+0xfffdaee4>
    b0bc:	8809883a 	mov	r4,r17
    b0c0:	000d59c0 	call	d59c <__clzsi2>
    b0c4:	10800804 	addi	r2,r2,32
    b0c8:	10fffe04 	addi	r3,r2,-8
    b0cc:	010007c4 	movi	r4,31
    b0d0:	20ff890e 	bge	r4,r3,aef8 <__alt_data_end+0xfffdaef8>
    b0d4:	10bff604 	addi	r2,r2,-40
    b0d8:	8884983a 	sll	r2,r17,r2
    b0dc:	0023883a 	mov	r17,zero
    b0e0:	1c3f8c0e 	bge	r3,r16,af14 <__alt_data_end+0xfffdaf14>
    b0e4:	023fe034 	movhi	r8,65408
    b0e8:	423fffc4 	addi	r8,r8,-1
    b0ec:	80e1c83a 	sub	r16,r16,r3
    b0f0:	1210703a 	and	r8,r2,r8
    b0f4:	003f3806 	br	add8 <__alt_data_end+0xfffdadd8>
    b0f8:	9007883a 	mov	r3,r18
    b0fc:	0011883a 	mov	r8,zero
    b100:	0005883a 	mov	r2,zero
    b104:	003f4c06 	br	ae38 <__alt_data_end+0xfffdae38>
    b108:	498cb03a 	or	r6,r9,r6
    b10c:	300cc03a 	cmpne	r6,r6,zero
    b110:	0007883a 	mov	r3,zero
    b114:	003f6806 	br	aeb8 <__alt_data_end+0xfffdaeb8>
    b118:	20009c1e 	bne	r4,zero,b38c <__adddf3+0x630>
    b11c:	80800044 	addi	r2,r16,1
    b120:	1141ffcc 	andi	r5,r2,2047
    b124:	01000044 	movi	r4,1
    b128:	2140670e 	bge	r4,r5,b2c8 <__adddf3+0x56c>
    b12c:	0101ffc4 	movi	r4,2047
    b130:	11007f26 	beq	r2,r4,b330 <__adddf3+0x5d4>
    b134:	898d883a 	add	r6,r17,r6
    b138:	4247883a 	add	r3,r8,r9
    b13c:	3451803a 	cmpltu	r8,r6,r17
    b140:	40d1883a 	add	r8,r8,r3
    b144:	402297fa 	slli	r17,r8,31
    b148:	300cd07a 	srli	r6,r6,1
    b14c:	4010d07a 	srli	r8,r8,1
    b150:	1021883a 	mov	r16,r2
    b154:	89a2b03a 	or	r17,r17,r6
    b158:	003f1f06 	br	add8 <__alt_data_end+0xfffdadd8>
    b15c:	0081ffc4 	movi	r2,2047
    b160:	80bf481e 	bne	r16,r2,ae84 <__alt_data_end+0xfffdae84>
    b164:	003f1c06 	br	add8 <__alt_data_end+0xfffdadd8>
    b168:	843ff844 	addi	r16,r16,-31
    b16c:	01000804 	movi	r4,32
    b170:	1406d83a 	srl	r3,r2,r16
    b174:	41005026 	beq	r8,r4,b2b8 <__adddf3+0x55c>
    b178:	01001004 	movi	r4,64
    b17c:	2211c83a 	sub	r8,r4,r8
    b180:	1204983a 	sll	r2,r2,r8
    b184:	88a2b03a 	or	r17,r17,r2
    b188:	8822c03a 	cmpne	r17,r17,zero
    b18c:	1c62b03a 	or	r17,r3,r17
    b190:	0011883a 	mov	r8,zero
    b194:	0021883a 	mov	r16,zero
    b198:	003f7106 	br	af60 <__alt_data_end+0xfffdaf60>
    b19c:	193ff804 	addi	r4,r3,-32
    b1a0:	00800804 	movi	r2,32
    b1a4:	4908d83a 	srl	r4,r9,r4
    b1a8:	18804526 	beq	r3,r2,b2c0 <__adddf3+0x564>
    b1ac:	00801004 	movi	r2,64
    b1b0:	10c5c83a 	sub	r2,r2,r3
    b1b4:	4886983a 	sll	r3,r9,r2
    b1b8:	198cb03a 	or	r6,r3,r6
    b1bc:	300cc03a 	cmpne	r6,r6,zero
    b1c0:	218cb03a 	or	r6,r4,r6
    b1c4:	0007883a 	mov	r3,zero
    b1c8:	003f3b06 	br	aeb8 <__alt_data_end+0xfffdaeb8>
    b1cc:	80002a26 	beq	r16,zero,b278 <__adddf3+0x51c>
    b1d0:	0101ffc4 	movi	r4,2047
    b1d4:	11006826 	beq	r2,r4,b378 <__adddf3+0x61c>
    b1d8:	00c7c83a 	sub	r3,zero,r3
    b1dc:	42002034 	orhi	r8,r8,128
    b1e0:	01000e04 	movi	r4,56
    b1e4:	20c07c16 	blt	r4,r3,b3d8 <__adddf3+0x67c>
    b1e8:	010007c4 	movi	r4,31
    b1ec:	20c0da16 	blt	r4,r3,b558 <__adddf3+0x7fc>
    b1f0:	01000804 	movi	r4,32
    b1f4:	20c9c83a 	sub	r4,r4,r3
    b1f8:	4114983a 	sll	r10,r8,r4
    b1fc:	88cad83a 	srl	r5,r17,r3
    b200:	8908983a 	sll	r4,r17,r4
    b204:	40c6d83a 	srl	r3,r8,r3
    b208:	5162b03a 	or	r17,r10,r5
    b20c:	2008c03a 	cmpne	r4,r4,zero
    b210:	8922b03a 	or	r17,r17,r4
    b214:	3463c83a 	sub	r17,r6,r17
    b218:	48c7c83a 	sub	r3,r9,r3
    b21c:	344d803a 	cmpltu	r6,r6,r17
    b220:	1991c83a 	sub	r8,r3,r6
    b224:	1021883a 	mov	r16,r2
    b228:	3825883a 	mov	r18,r7
    b22c:	003f2706 	br	aecc <__alt_data_end+0xfffdaecc>
    b230:	24d0b03a 	or	r8,r4,r19
    b234:	40001b1e 	bne	r8,zero,b2a4 <__adddf3+0x548>
    b238:	0005883a 	mov	r2,zero
    b23c:	0007883a 	mov	r3,zero
    b240:	0021883a 	mov	r16,zero
    b244:	003f4d06 	br	af7c <__alt_data_end+0xfffdaf7c>
    b248:	008007c4 	movi	r2,31
    b24c:	11003c16 	blt	r2,r4,b340 <__adddf3+0x5e4>
    b250:	00800804 	movi	r2,32
    b254:	1105c83a 	sub	r2,r2,r4
    b258:	488e983a 	sll	r7,r9,r2
    b25c:	310ad83a 	srl	r5,r6,r4
    b260:	3084983a 	sll	r2,r6,r2
    b264:	4912d83a 	srl	r9,r9,r4
    b268:	394ab03a 	or	r5,r7,r5
    b26c:	1004c03a 	cmpne	r2,r2,zero
    b270:	288ab03a 	or	r5,r5,r2
    b274:	003f5306 	br	afc4 <__alt_data_end+0xfffdafc4>
    b278:	4448b03a 	or	r4,r8,r17
    b27c:	20003e26 	beq	r4,zero,b378 <__adddf3+0x61c>
    b280:	00c6303a 	nor	r3,zero,r3
    b284:	18003a1e 	bne	r3,zero,b370 <__adddf3+0x614>
    b288:	3463c83a 	sub	r17,r6,r17
    b28c:	4a07c83a 	sub	r3,r9,r8
    b290:	344d803a 	cmpltu	r6,r6,r17
    b294:	1991c83a 	sub	r8,r3,r6
    b298:	1021883a 	mov	r16,r2
    b29c:	3825883a 	mov	r18,r7
    b2a0:	003f0a06 	br	aecc <__alt_data_end+0xfffdaecc>
    b2a4:	2023883a 	mov	r17,r4
    b2a8:	003f0d06 	br	aee0 <__alt_data_end+0xfffdaee0>
    b2ac:	0081ffc4 	movi	r2,2047
    b2b0:	80bf3f1e 	bne	r16,r2,afb0 <__alt_data_end+0xfffdafb0>
    b2b4:	003ec806 	br	add8 <__alt_data_end+0xfffdadd8>
    b2b8:	0005883a 	mov	r2,zero
    b2bc:	003fb106 	br	b184 <__alt_data_end+0xfffdb184>
    b2c0:	0007883a 	mov	r3,zero
    b2c4:	003fbc06 	br	b1b8 <__alt_data_end+0xfffdb1b8>
    b2c8:	4444b03a 	or	r2,r8,r17
    b2cc:	8000871e 	bne	r16,zero,b4ec <__adddf3+0x790>
    b2d0:	1000ba26 	beq	r2,zero,b5bc <__adddf3+0x860>
    b2d4:	4984b03a 	or	r2,r9,r6
    b2d8:	103ebf26 	beq	r2,zero,add8 <__alt_data_end+0xfffdadd8>
    b2dc:	8985883a 	add	r2,r17,r6
    b2e0:	4247883a 	add	r3,r8,r9
    b2e4:	1451803a 	cmpltu	r8,r2,r17
    b2e8:	40d1883a 	add	r8,r8,r3
    b2ec:	40c0202c 	andhi	r3,r8,128
    b2f0:	1023883a 	mov	r17,r2
    b2f4:	183f1a26 	beq	r3,zero,af60 <__alt_data_end+0xfffdaf60>
    b2f8:	00bfe034 	movhi	r2,65408
    b2fc:	10bfffc4 	addi	r2,r2,-1
    b300:	2021883a 	mov	r16,r4
    b304:	4090703a 	and	r8,r8,r2
    b308:	003eb306 	br	add8 <__alt_data_end+0xfffdadd8>
    b30c:	4444b03a 	or	r2,r8,r17
    b310:	8000291e 	bne	r16,zero,b3b8 <__adddf3+0x65c>
    b314:	10004b1e 	bne	r2,zero,b444 <__adddf3+0x6e8>
    b318:	4990b03a 	or	r8,r9,r6
    b31c:	40008b26 	beq	r8,zero,b54c <__adddf3+0x7f0>
    b320:	4811883a 	mov	r8,r9
    b324:	3023883a 	mov	r17,r6
    b328:	3825883a 	mov	r18,r7
    b32c:	003eaa06 	br	add8 <__alt_data_end+0xfffdadd8>
    b330:	1021883a 	mov	r16,r2
    b334:	0011883a 	mov	r8,zero
    b338:	0005883a 	mov	r2,zero
    b33c:	003f0f06 	br	af7c <__alt_data_end+0xfffdaf7c>
    b340:	217ff804 	addi	r5,r4,-32
    b344:	00800804 	movi	r2,32
    b348:	494ad83a 	srl	r5,r9,r5
    b34c:	20807d26 	beq	r4,r2,b544 <__adddf3+0x7e8>
    b350:	00801004 	movi	r2,64
    b354:	1109c83a 	sub	r4,r2,r4
    b358:	4912983a 	sll	r9,r9,r4
    b35c:	498cb03a 	or	r6,r9,r6
    b360:	300cc03a 	cmpne	r6,r6,zero
    b364:	298ab03a 	or	r5,r5,r6
    b368:	0013883a 	mov	r9,zero
    b36c:	003f1506 	br	afc4 <__alt_data_end+0xfffdafc4>
    b370:	0101ffc4 	movi	r4,2047
    b374:	113f9a1e 	bne	r2,r4,b1e0 <__alt_data_end+0xfffdb1e0>
    b378:	4811883a 	mov	r8,r9
    b37c:	3023883a 	mov	r17,r6
    b380:	1021883a 	mov	r16,r2
    b384:	3825883a 	mov	r18,r7
    b388:	003e9306 	br	add8 <__alt_data_end+0xfffdadd8>
    b38c:	8000161e 	bne	r16,zero,b3e8 <__adddf3+0x68c>
    b390:	444ab03a 	or	r5,r8,r17
    b394:	28005126 	beq	r5,zero,b4dc <__adddf3+0x780>
    b398:	0108303a 	nor	r4,zero,r4
    b39c:	20004d1e 	bne	r4,zero,b4d4 <__adddf3+0x778>
    b3a0:	89a3883a 	add	r17,r17,r6
    b3a4:	4253883a 	add	r9,r8,r9
    b3a8:	898d803a 	cmpltu	r6,r17,r6
    b3ac:	3251883a 	add	r8,r6,r9
    b3b0:	1021883a 	mov	r16,r2
    b3b4:	003f0806 	br	afd8 <__alt_data_end+0xfffdafd8>
    b3b8:	1000301e 	bne	r2,zero,b47c <__adddf3+0x720>
    b3bc:	4984b03a 	or	r2,r9,r6
    b3c0:	10007126 	beq	r2,zero,b588 <__adddf3+0x82c>
    b3c4:	4811883a 	mov	r8,r9
    b3c8:	3023883a 	mov	r17,r6
    b3cc:	3825883a 	mov	r18,r7
    b3d0:	0401ffc4 	movi	r16,2047
    b3d4:	003e8006 	br	add8 <__alt_data_end+0xfffdadd8>
    b3d8:	4462b03a 	or	r17,r8,r17
    b3dc:	8822c03a 	cmpne	r17,r17,zero
    b3e0:	0007883a 	mov	r3,zero
    b3e4:	003f8b06 	br	b214 <__alt_data_end+0xfffdb214>
    b3e8:	0141ffc4 	movi	r5,2047
    b3ec:	11403b26 	beq	r2,r5,b4dc <__adddf3+0x780>
    b3f0:	0109c83a 	sub	r4,zero,r4
    b3f4:	42002034 	orhi	r8,r8,128
    b3f8:	01400e04 	movi	r5,56
    b3fc:	29006716 	blt	r5,r4,b59c <__adddf3+0x840>
    b400:	014007c4 	movi	r5,31
    b404:	29007016 	blt	r5,r4,b5c8 <__adddf3+0x86c>
    b408:	01400804 	movi	r5,32
    b40c:	290bc83a 	sub	r5,r5,r4
    b410:	4154983a 	sll	r10,r8,r5
    b414:	890ed83a 	srl	r7,r17,r4
    b418:	894a983a 	sll	r5,r17,r5
    b41c:	4108d83a 	srl	r4,r8,r4
    b420:	51e2b03a 	or	r17,r10,r7
    b424:	280ac03a 	cmpne	r5,r5,zero
    b428:	8962b03a 	or	r17,r17,r5
    b42c:	89a3883a 	add	r17,r17,r6
    b430:	2253883a 	add	r9,r4,r9
    b434:	898d803a 	cmpltu	r6,r17,r6
    b438:	3251883a 	add	r8,r6,r9
    b43c:	1021883a 	mov	r16,r2
    b440:	003ee506 	br	afd8 <__alt_data_end+0xfffdafd8>
    b444:	4984b03a 	or	r2,r9,r6
    b448:	103e6326 	beq	r2,zero,add8 <__alt_data_end+0xfffdadd8>
    b44c:	8987c83a 	sub	r3,r17,r6
    b450:	88c9803a 	cmpltu	r4,r17,r3
    b454:	4245c83a 	sub	r2,r8,r9
    b458:	1105c83a 	sub	r2,r2,r4
    b45c:	1100202c 	andhi	r4,r2,128
    b460:	203ebb26 	beq	r4,zero,af50 <__alt_data_end+0xfffdaf50>
    b464:	3463c83a 	sub	r17,r6,r17
    b468:	4a07c83a 	sub	r3,r9,r8
    b46c:	344d803a 	cmpltu	r6,r6,r17
    b470:	1991c83a 	sub	r8,r3,r6
    b474:	3825883a 	mov	r18,r7
    b478:	003e5706 	br	add8 <__alt_data_end+0xfffdadd8>
    b47c:	4984b03a 	or	r2,r9,r6
    b480:	10002e26 	beq	r2,zero,b53c <__adddf3+0x7e0>
    b484:	4004d0fa 	srli	r2,r8,3
    b488:	8822d0fa 	srli	r17,r17,3
    b48c:	4010977a 	slli	r8,r8,29
    b490:	10c0022c 	andhi	r3,r2,8
    b494:	4462b03a 	or	r17,r8,r17
    b498:	18000826 	beq	r3,zero,b4bc <__adddf3+0x760>
    b49c:	4808d0fa 	srli	r4,r9,3
    b4a0:	20c0022c 	andhi	r3,r4,8
    b4a4:	1800051e 	bne	r3,zero,b4bc <__adddf3+0x760>
    b4a8:	300cd0fa 	srli	r6,r6,3
    b4ac:	4806977a 	slli	r3,r9,29
    b4b0:	2005883a 	mov	r2,r4
    b4b4:	3825883a 	mov	r18,r7
    b4b8:	19a2b03a 	or	r17,r3,r6
    b4bc:	8810d77a 	srli	r8,r17,29
    b4c0:	100490fa 	slli	r2,r2,3
    b4c4:	882290fa 	slli	r17,r17,3
    b4c8:	0401ffc4 	movi	r16,2047
    b4cc:	4090b03a 	or	r8,r8,r2
    b4d0:	003e4106 	br	add8 <__alt_data_end+0xfffdadd8>
    b4d4:	0141ffc4 	movi	r5,2047
    b4d8:	117fc71e 	bne	r2,r5,b3f8 <__alt_data_end+0xfffdb3f8>
    b4dc:	4811883a 	mov	r8,r9
    b4e0:	3023883a 	mov	r17,r6
    b4e4:	1021883a 	mov	r16,r2
    b4e8:	003e3b06 	br	add8 <__alt_data_end+0xfffdadd8>
    b4ec:	10002f26 	beq	r2,zero,b5ac <__adddf3+0x850>
    b4f0:	4984b03a 	or	r2,r9,r6
    b4f4:	10001126 	beq	r2,zero,b53c <__adddf3+0x7e0>
    b4f8:	4004d0fa 	srli	r2,r8,3
    b4fc:	8822d0fa 	srli	r17,r17,3
    b500:	4010977a 	slli	r8,r8,29
    b504:	10c0022c 	andhi	r3,r2,8
    b508:	4462b03a 	or	r17,r8,r17
    b50c:	183feb26 	beq	r3,zero,b4bc <__alt_data_end+0xfffdb4bc>
    b510:	4808d0fa 	srli	r4,r9,3
    b514:	20c0022c 	andhi	r3,r4,8
    b518:	183fe81e 	bne	r3,zero,b4bc <__alt_data_end+0xfffdb4bc>
    b51c:	300cd0fa 	srli	r6,r6,3
    b520:	4806977a 	slli	r3,r9,29
    b524:	2005883a 	mov	r2,r4
    b528:	19a2b03a 	or	r17,r3,r6
    b52c:	003fe306 	br	b4bc <__alt_data_end+0xfffdb4bc>
    b530:	0011883a 	mov	r8,zero
    b534:	0005883a 	mov	r2,zero
    b538:	003e3f06 	br	ae38 <__alt_data_end+0xfffdae38>
    b53c:	0401ffc4 	movi	r16,2047
    b540:	003e2506 	br	add8 <__alt_data_end+0xfffdadd8>
    b544:	0013883a 	mov	r9,zero
    b548:	003f8406 	br	b35c <__alt_data_end+0xfffdb35c>
    b54c:	0005883a 	mov	r2,zero
    b550:	0007883a 	mov	r3,zero
    b554:	003e8906 	br	af7c <__alt_data_end+0xfffdaf7c>
    b558:	197ff804 	addi	r5,r3,-32
    b55c:	01000804 	movi	r4,32
    b560:	414ad83a 	srl	r5,r8,r5
    b564:	19002426 	beq	r3,r4,b5f8 <__adddf3+0x89c>
    b568:	01001004 	movi	r4,64
    b56c:	20c7c83a 	sub	r3,r4,r3
    b570:	40c6983a 	sll	r3,r8,r3
    b574:	1c46b03a 	or	r3,r3,r17
    b578:	1806c03a 	cmpne	r3,r3,zero
    b57c:	28e2b03a 	or	r17,r5,r3
    b580:	0007883a 	mov	r3,zero
    b584:	003f2306 	br	b214 <__alt_data_end+0xfffdb214>
    b588:	0007883a 	mov	r3,zero
    b58c:	5811883a 	mov	r8,r11
    b590:	00bfffc4 	movi	r2,-1
    b594:	0401ffc4 	movi	r16,2047
    b598:	003e7806 	br	af7c <__alt_data_end+0xfffdaf7c>
    b59c:	4462b03a 	or	r17,r8,r17
    b5a0:	8822c03a 	cmpne	r17,r17,zero
    b5a4:	0009883a 	mov	r4,zero
    b5a8:	003fa006 	br	b42c <__alt_data_end+0xfffdb42c>
    b5ac:	4811883a 	mov	r8,r9
    b5b0:	3023883a 	mov	r17,r6
    b5b4:	0401ffc4 	movi	r16,2047
    b5b8:	003e0706 	br	add8 <__alt_data_end+0xfffdadd8>
    b5bc:	4811883a 	mov	r8,r9
    b5c0:	3023883a 	mov	r17,r6
    b5c4:	003e0406 	br	add8 <__alt_data_end+0xfffdadd8>
    b5c8:	21fff804 	addi	r7,r4,-32
    b5cc:	01400804 	movi	r5,32
    b5d0:	41ced83a 	srl	r7,r8,r7
    b5d4:	21400a26 	beq	r4,r5,b600 <__adddf3+0x8a4>
    b5d8:	01401004 	movi	r5,64
    b5dc:	2909c83a 	sub	r4,r5,r4
    b5e0:	4108983a 	sll	r4,r8,r4
    b5e4:	2448b03a 	or	r4,r4,r17
    b5e8:	2008c03a 	cmpne	r4,r4,zero
    b5ec:	3922b03a 	or	r17,r7,r4
    b5f0:	0009883a 	mov	r4,zero
    b5f4:	003f8d06 	br	b42c <__alt_data_end+0xfffdb42c>
    b5f8:	0007883a 	mov	r3,zero
    b5fc:	003fdd06 	br	b574 <__alt_data_end+0xfffdb574>
    b600:	0009883a 	mov	r4,zero
    b604:	003ff706 	br	b5e4 <__alt_data_end+0xfffdb5e4>

0000b608 <__divdf3>:
    b608:	defff004 	addi	sp,sp,-64
    b60c:	dc800815 	stw	r18,32(sp)
    b610:	2824d53a 	srli	r18,r5,20
    b614:	dd800c15 	stw	r22,48(sp)
    b618:	282cd7fa 	srli	r22,r5,31
    b61c:	dc000615 	stw	r16,24(sp)
    b620:	04000434 	movhi	r16,16
    b624:	843fffc4 	addi	r16,r16,-1
    b628:	dfc00f15 	stw	ra,60(sp)
    b62c:	df000e15 	stw	fp,56(sp)
    b630:	ddc00d15 	stw	r23,52(sp)
    b634:	dd400b15 	stw	r21,44(sp)
    b638:	dd000a15 	stw	r20,40(sp)
    b63c:	dcc00915 	stw	r19,36(sp)
    b640:	dc400715 	stw	r17,28(sp)
    b644:	9481ffcc 	andi	r18,r18,2047
    b648:	2c20703a 	and	r16,r5,r16
    b64c:	b2003fcc 	andi	r8,r22,255
    b650:	90006126 	beq	r18,zero,b7d8 <__divdf3+0x1d0>
    b654:	0081ffc4 	movi	r2,2047
    b658:	202b883a 	mov	r21,r4
    b65c:	90803726 	beq	r18,r2,b73c <__divdf3+0x134>
    b660:	80800434 	orhi	r2,r16,16
    b664:	100490fa 	slli	r2,r2,3
    b668:	2020d77a 	srli	r16,r4,29
    b66c:	202a90fa 	slli	r21,r4,3
    b670:	94bf0044 	addi	r18,r18,-1023
    b674:	80a0b03a 	or	r16,r16,r2
    b678:	0013883a 	mov	r9,zero
    b67c:	000b883a 	mov	r5,zero
    b680:	3806d53a 	srli	r3,r7,20
    b684:	382ed7fa 	srli	r23,r7,31
    b688:	04400434 	movhi	r17,16
    b68c:	8c7fffc4 	addi	r17,r17,-1
    b690:	18c1ffcc 	andi	r3,r3,2047
    b694:	3029883a 	mov	r20,r6
    b698:	3c62703a 	and	r17,r7,r17
    b69c:	bf003fcc 	andi	fp,r23,255
    b6a0:	18006e26 	beq	r3,zero,b85c <__divdf3+0x254>
    b6a4:	0081ffc4 	movi	r2,2047
    b6a8:	18806626 	beq	r3,r2,b844 <__divdf3+0x23c>
    b6ac:	88800434 	orhi	r2,r17,16
    b6b0:	100490fa 	slli	r2,r2,3
    b6b4:	3022d77a 	srli	r17,r6,29
    b6b8:	302890fa 	slli	r20,r6,3
    b6bc:	18ff0044 	addi	r3,r3,-1023
    b6c0:	88a2b03a 	or	r17,r17,r2
    b6c4:	000f883a 	mov	r7,zero
    b6c8:	b5e6f03a 	xor	r19,r22,r23
    b6cc:	3a4cb03a 	or	r6,r7,r9
    b6d0:	008003c4 	movi	r2,15
    b6d4:	9809883a 	mov	r4,r19
    b6d8:	90c7c83a 	sub	r3,r18,r3
    b6dc:	9cc03fcc 	andi	r19,r19,255
    b6e0:	11809636 	bltu	r2,r6,b93c <__divdf3+0x334>
    b6e4:	300c90ba 	slli	r6,r6,2
    b6e8:	00800074 	movhi	r2,1
    b6ec:	10adbf04 	addi	r2,r2,-18692
    b6f0:	308d883a 	add	r6,r6,r2
    b6f4:	30800017 	ldw	r2,0(r6)
    b6f8:	1000683a 	jmp	r2
    b6fc:	0000b93c 	xorhi	zero,zero,740
    b700:	0000b774 	movhi	zero,733
    b704:	0000b92c 	andhi	zero,zero,740
    b708:	0000b768 	cmpgeui	zero,zero,733
    b70c:	0000b92c 	andhi	zero,zero,740
    b710:	0000b900 	call	b90 <___vfprintf_internal_r+0x1dc>
    b714:	0000b92c 	andhi	zero,zero,740
    b718:	0000b768 	cmpgeui	zero,zero,733
    b71c:	0000b774 	movhi	zero,733
    b720:	0000b774 	movhi	zero,733
    b724:	0000b900 	call	b90 <___vfprintf_internal_r+0x1dc>
    b728:	0000b768 	cmpgeui	zero,zero,733
    b72c:	0000b758 	cmpnei	zero,zero,733
    b730:	0000b758 	cmpnei	zero,zero,733
    b734:	0000b758 	cmpnei	zero,zero,733
    b738:	0000bcc4 	movi	zero,755
    b73c:	2404b03a 	or	r2,r4,r16
    b740:	10006c1e 	bne	r2,zero,b8f4 <__divdf3+0x2ec>
    b744:	02400204 	movi	r9,8
    b748:	0021883a 	mov	r16,zero
    b74c:	002b883a 	mov	r21,zero
    b750:	01400084 	movi	r5,2
    b754:	003fca06 	br	b680 <__alt_data_end+0xfffdb680>
    b758:	8023883a 	mov	r17,r16
    b75c:	a829883a 	mov	r20,r21
    b760:	4039883a 	mov	fp,r8
    b764:	280f883a 	mov	r7,r5
    b768:	00800084 	movi	r2,2
    b76c:	3881601e 	bne	r7,r2,bcf0 <__divdf3+0x6e8>
    b770:	e027883a 	mov	r19,fp
    b774:	9900004c 	andi	r4,r19,1
    b778:	0081ffc4 	movi	r2,2047
    b77c:	0021883a 	mov	r16,zero
    b780:	002b883a 	mov	r21,zero
    b784:	1004953a 	slli	r2,r2,20
    b788:	20c03fcc 	andi	r3,r4,255
    b78c:	01400434 	movhi	r5,16
    b790:	297fffc4 	addi	r5,r5,-1
    b794:	180697fa 	slli	r3,r3,31
    b798:	8160703a 	and	r16,r16,r5
    b79c:	80a0b03a 	or	r16,r16,r2
    b7a0:	80c6b03a 	or	r3,r16,r3
    b7a4:	a805883a 	mov	r2,r21
    b7a8:	dfc00f17 	ldw	ra,60(sp)
    b7ac:	df000e17 	ldw	fp,56(sp)
    b7b0:	ddc00d17 	ldw	r23,52(sp)
    b7b4:	dd800c17 	ldw	r22,48(sp)
    b7b8:	dd400b17 	ldw	r21,44(sp)
    b7bc:	dd000a17 	ldw	r20,40(sp)
    b7c0:	dcc00917 	ldw	r19,36(sp)
    b7c4:	dc800817 	ldw	r18,32(sp)
    b7c8:	dc400717 	ldw	r17,28(sp)
    b7cc:	dc000617 	ldw	r16,24(sp)
    b7d0:	dec01004 	addi	sp,sp,64
    b7d4:	f800283a 	ret
    b7d8:	2404b03a 	or	r2,r4,r16
    b7dc:	2023883a 	mov	r17,r4
    b7e0:	10003f26 	beq	r2,zero,b8e0 <__divdf3+0x2d8>
    b7e4:	80015e26 	beq	r16,zero,bd60 <__divdf3+0x758>
    b7e8:	8009883a 	mov	r4,r16
    b7ec:	d9800215 	stw	r6,8(sp)
    b7f0:	d9c00515 	stw	r7,20(sp)
    b7f4:	da000415 	stw	r8,16(sp)
    b7f8:	000d59c0 	call	d59c <__clzsi2>
    b7fc:	d9800217 	ldw	r6,8(sp)
    b800:	d9c00517 	ldw	r7,20(sp)
    b804:	da000417 	ldw	r8,16(sp)
    b808:	113ffd44 	addi	r4,r2,-11
    b80c:	00c00704 	movi	r3,28
    b810:	19014f16 	blt	r3,r4,bd50 <__divdf3+0x748>
    b814:	00c00744 	movi	r3,29
    b818:	157ffe04 	addi	r21,r2,-8
    b81c:	1907c83a 	sub	r3,r3,r4
    b820:	8560983a 	sll	r16,r16,r21
    b824:	88c6d83a 	srl	r3,r17,r3
    b828:	8d6a983a 	sll	r21,r17,r21
    b82c:	1c20b03a 	or	r16,r3,r16
    b830:	1080fcc4 	addi	r2,r2,1011
    b834:	00a5c83a 	sub	r18,zero,r2
    b838:	0013883a 	mov	r9,zero
    b83c:	000b883a 	mov	r5,zero
    b840:	003f8f06 	br	b680 <__alt_data_end+0xfffdb680>
    b844:	3444b03a 	or	r2,r6,r17
    b848:	1000231e 	bne	r2,zero,b8d8 <__divdf3+0x2d0>
    b84c:	0023883a 	mov	r17,zero
    b850:	0029883a 	mov	r20,zero
    b854:	01c00084 	movi	r7,2
    b858:	003f9b06 	br	b6c8 <__alt_data_end+0xfffdb6c8>
    b85c:	3444b03a 	or	r2,r6,r17
    b860:	10001926 	beq	r2,zero,b8c8 <__divdf3+0x2c0>
    b864:	88014b26 	beq	r17,zero,bd94 <__divdf3+0x78c>
    b868:	8809883a 	mov	r4,r17
    b86c:	d9400115 	stw	r5,4(sp)
    b870:	d9800215 	stw	r6,8(sp)
    b874:	da000415 	stw	r8,16(sp)
    b878:	da400315 	stw	r9,12(sp)
    b87c:	000d59c0 	call	d59c <__clzsi2>
    b880:	d9400117 	ldw	r5,4(sp)
    b884:	d9800217 	ldw	r6,8(sp)
    b888:	da000417 	ldw	r8,16(sp)
    b88c:	da400317 	ldw	r9,12(sp)
    b890:	113ffd44 	addi	r4,r2,-11
    b894:	00c00704 	movi	r3,28
    b898:	19013a16 	blt	r3,r4,bd84 <__divdf3+0x77c>
    b89c:	00c00744 	movi	r3,29
    b8a0:	153ffe04 	addi	r20,r2,-8
    b8a4:	1907c83a 	sub	r3,r3,r4
    b8a8:	8d22983a 	sll	r17,r17,r20
    b8ac:	30c6d83a 	srl	r3,r6,r3
    b8b0:	3528983a 	sll	r20,r6,r20
    b8b4:	1c62b03a 	or	r17,r3,r17
    b8b8:	1080fcc4 	addi	r2,r2,1011
    b8bc:	0087c83a 	sub	r3,zero,r2
    b8c0:	000f883a 	mov	r7,zero
    b8c4:	003f8006 	br	b6c8 <__alt_data_end+0xfffdb6c8>
    b8c8:	0023883a 	mov	r17,zero
    b8cc:	0029883a 	mov	r20,zero
    b8d0:	01c00044 	movi	r7,1
    b8d4:	003f7c06 	br	b6c8 <__alt_data_end+0xfffdb6c8>
    b8d8:	01c000c4 	movi	r7,3
    b8dc:	003f7a06 	br	b6c8 <__alt_data_end+0xfffdb6c8>
    b8e0:	02400104 	movi	r9,4
    b8e4:	0021883a 	mov	r16,zero
    b8e8:	002b883a 	mov	r21,zero
    b8ec:	01400044 	movi	r5,1
    b8f0:	003f6306 	br	b680 <__alt_data_end+0xfffdb680>
    b8f4:	02400304 	movi	r9,12
    b8f8:	014000c4 	movi	r5,3
    b8fc:	003f6006 	br	b680 <__alt_data_end+0xfffdb680>
    b900:	04000434 	movhi	r16,16
    b904:	0009883a 	mov	r4,zero
    b908:	843fffc4 	addi	r16,r16,-1
    b90c:	057fffc4 	movi	r21,-1
    b910:	0081ffc4 	movi	r2,2047
    b914:	003f9b06 	br	b784 <__alt_data_end+0xfffdb784>
    b918:	00c00044 	movi	r3,1
    b91c:	1887c83a 	sub	r3,r3,r2
    b920:	01000e04 	movi	r4,56
    b924:	20c1530e 	bge	r4,r3,be74 <__divdf3+0x86c>
    b928:	9900004c 	andi	r4,r19,1
    b92c:	0005883a 	mov	r2,zero
    b930:	0021883a 	mov	r16,zero
    b934:	002b883a 	mov	r21,zero
    b938:	003f9206 	br	b784 <__alt_data_end+0xfffdb784>
    b93c:	8c012e36 	bltu	r17,r16,bdf8 <__divdf3+0x7f0>
    b940:	84412c26 	beq	r16,r17,bdf4 <__divdf3+0x7ec>
    b944:	a82f883a 	mov	r23,r21
    b948:	18ffffc4 	addi	r3,r3,-1
    b94c:	002b883a 	mov	r21,zero
    b950:	a004d63a 	srli	r2,r20,24
    b954:	8822923a 	slli	r17,r17,8
    b958:	a028923a 	slli	r20,r20,8
    b95c:	8009883a 	mov	r4,r16
    b960:	88acb03a 	or	r22,r17,r2
    b964:	dd000015 	stw	r20,0(sp)
    b968:	b028d43a 	srli	r20,r22,16
    b96c:	d8c00215 	stw	r3,8(sp)
    b970:	b4bfffcc 	andi	r18,r22,65535
    b974:	a00b883a 	mov	r5,r20
    b978:	000088c0 	call	88c <__udivsi3>
    b97c:	100b883a 	mov	r5,r2
    b980:	9009883a 	mov	r4,r18
    b984:	1023883a 	mov	r17,r2
    b988:	000ad340 	call	ad34 <__mulsi3>
    b98c:	8009883a 	mov	r4,r16
    b990:	a00b883a 	mov	r5,r20
    b994:	1039883a 	mov	fp,r2
    b998:	00008f00 	call	8f0 <__umodsi3>
    b99c:	1004943a 	slli	r2,r2,16
    b9a0:	b808d43a 	srli	r4,r23,16
    b9a4:	d8c00217 	ldw	r3,8(sp)
    b9a8:	2084b03a 	or	r2,r4,r2
    b9ac:	1700062e 	bgeu	r2,fp,b9c8 <__divdf3+0x3c0>
    b9b0:	1585883a 	add	r2,r2,r22
    b9b4:	893fffc4 	addi	r4,r17,-1
    b9b8:	15811d36 	bltu	r2,r22,be30 <__divdf3+0x828>
    b9bc:	17011c2e 	bgeu	r2,fp,be30 <__divdf3+0x828>
    b9c0:	8c7fff84 	addi	r17,r17,-2
    b9c4:	1585883a 	add	r2,r2,r22
    b9c8:	1739c83a 	sub	fp,r2,fp
    b9cc:	a00b883a 	mov	r5,r20
    b9d0:	e009883a 	mov	r4,fp
    b9d4:	d8c00215 	stw	r3,8(sp)
    b9d8:	000088c0 	call	88c <__udivsi3>
    b9dc:	100b883a 	mov	r5,r2
    b9e0:	9009883a 	mov	r4,r18
    b9e4:	1021883a 	mov	r16,r2
    b9e8:	000ad340 	call	ad34 <__mulsi3>
    b9ec:	a00b883a 	mov	r5,r20
    b9f0:	e009883a 	mov	r4,fp
    b9f4:	d8800415 	stw	r2,16(sp)
    b9f8:	00008f00 	call	8f0 <__umodsi3>
    b9fc:	1004943a 	slli	r2,r2,16
    ba00:	da000417 	ldw	r8,16(sp)
    ba04:	bdffffcc 	andi	r23,r23,65535
    ba08:	b884b03a 	or	r2,r23,r2
    ba0c:	d8c00217 	ldw	r3,8(sp)
    ba10:	1200062e 	bgeu	r2,r8,ba2c <__divdf3+0x424>
    ba14:	1585883a 	add	r2,r2,r22
    ba18:	813fffc4 	addi	r4,r16,-1
    ba1c:	15810236 	bltu	r2,r22,be28 <__divdf3+0x820>
    ba20:	1201012e 	bgeu	r2,r8,be28 <__divdf3+0x820>
    ba24:	843fff84 	addi	r16,r16,-2
    ba28:	1585883a 	add	r2,r2,r22
    ba2c:	8822943a 	slli	r17,r17,16
    ba30:	d9800017 	ldw	r6,0(sp)
    ba34:	1211c83a 	sub	r8,r2,r8
    ba38:	8c22b03a 	or	r17,r17,r16
    ba3c:	373fffcc 	andi	fp,r6,65535
    ba40:	8abfffcc 	andi	r10,r17,65535
    ba44:	8820d43a 	srli	r16,r17,16
    ba48:	5009883a 	mov	r4,r10
    ba4c:	e00b883a 	mov	r5,fp
    ba50:	302ed43a 	srli	r23,r6,16
    ba54:	d8c00215 	stw	r3,8(sp)
    ba58:	da000415 	stw	r8,16(sp)
    ba5c:	da800115 	stw	r10,4(sp)
    ba60:	000ad340 	call	ad34 <__mulsi3>
    ba64:	800b883a 	mov	r5,r16
    ba68:	e009883a 	mov	r4,fp
    ba6c:	d8800515 	stw	r2,20(sp)
    ba70:	000ad340 	call	ad34 <__mulsi3>
    ba74:	8009883a 	mov	r4,r16
    ba78:	b80b883a 	mov	r5,r23
    ba7c:	d8800315 	stw	r2,12(sp)
    ba80:	000ad340 	call	ad34 <__mulsi3>
    ba84:	da800117 	ldw	r10,4(sp)
    ba88:	b80b883a 	mov	r5,r23
    ba8c:	1021883a 	mov	r16,r2
    ba90:	5009883a 	mov	r4,r10
    ba94:	000ad340 	call	ad34 <__mulsi3>
    ba98:	d9c00517 	ldw	r7,20(sp)
    ba9c:	da400317 	ldw	r9,12(sp)
    baa0:	d8c00217 	ldw	r3,8(sp)
    baa4:	3808d43a 	srli	r4,r7,16
    baa8:	1245883a 	add	r2,r2,r9
    baac:	da000417 	ldw	r8,16(sp)
    bab0:	2085883a 	add	r2,r4,r2
    bab4:	1240022e 	bgeu	r2,r9,bac0 <__divdf3+0x4b8>
    bab8:	01000074 	movhi	r4,1
    babc:	8121883a 	add	r16,r16,r4
    bac0:	1008d43a 	srli	r4,r2,16
    bac4:	1004943a 	slli	r2,r2,16
    bac8:	39ffffcc 	andi	r7,r7,65535
    bacc:	2409883a 	add	r4,r4,r16
    bad0:	11c5883a 	add	r2,r2,r7
    bad4:	4100bb36 	bltu	r8,r4,bdc4 <__divdf3+0x7bc>
    bad8:	4100d726 	beq	r8,r4,be38 <__divdf3+0x830>
    badc:	4109c83a 	sub	r4,r8,r4
    bae0:	a8a1c83a 	sub	r16,r21,r2
    bae4:	ac2b803a 	cmpltu	r21,r21,r16
    bae8:	256bc83a 	sub	r21,r4,r21
    baec:	b540d926 	beq	r22,r21,be54 <__divdf3+0x84c>
    baf0:	a00b883a 	mov	r5,r20
    baf4:	a809883a 	mov	r4,r21
    baf8:	d8c00215 	stw	r3,8(sp)
    bafc:	000088c0 	call	88c <__udivsi3>
    bb00:	100b883a 	mov	r5,r2
    bb04:	9009883a 	mov	r4,r18
    bb08:	d8800515 	stw	r2,20(sp)
    bb0c:	000ad340 	call	ad34 <__mulsi3>
    bb10:	a809883a 	mov	r4,r21
    bb14:	a00b883a 	mov	r5,r20
    bb18:	d8800415 	stw	r2,16(sp)
    bb1c:	00008f00 	call	8f0 <__umodsi3>
    bb20:	1004943a 	slli	r2,r2,16
    bb24:	8008d43a 	srli	r4,r16,16
    bb28:	da000417 	ldw	r8,16(sp)
    bb2c:	d8c00217 	ldw	r3,8(sp)
    bb30:	2084b03a 	or	r2,r4,r2
    bb34:	d9c00517 	ldw	r7,20(sp)
    bb38:	1200062e 	bgeu	r2,r8,bb54 <__divdf3+0x54c>
    bb3c:	1585883a 	add	r2,r2,r22
    bb40:	393fffc4 	addi	r4,r7,-1
    bb44:	1580c536 	bltu	r2,r22,be5c <__divdf3+0x854>
    bb48:	1200c42e 	bgeu	r2,r8,be5c <__divdf3+0x854>
    bb4c:	39ffff84 	addi	r7,r7,-2
    bb50:	1585883a 	add	r2,r2,r22
    bb54:	122bc83a 	sub	r21,r2,r8
    bb58:	a00b883a 	mov	r5,r20
    bb5c:	a809883a 	mov	r4,r21
    bb60:	d8c00215 	stw	r3,8(sp)
    bb64:	d9c00515 	stw	r7,20(sp)
    bb68:	000088c0 	call	88c <__udivsi3>
    bb6c:	9009883a 	mov	r4,r18
    bb70:	100b883a 	mov	r5,r2
    bb74:	d8800415 	stw	r2,16(sp)
    bb78:	000ad340 	call	ad34 <__mulsi3>
    bb7c:	a809883a 	mov	r4,r21
    bb80:	a00b883a 	mov	r5,r20
    bb84:	1025883a 	mov	r18,r2
    bb88:	00008f00 	call	8f0 <__umodsi3>
    bb8c:	1004943a 	slli	r2,r2,16
    bb90:	813fffcc 	andi	r4,r16,65535
    bb94:	d8c00217 	ldw	r3,8(sp)
    bb98:	20a0b03a 	or	r16,r4,r2
    bb9c:	d9c00517 	ldw	r7,20(sp)
    bba0:	da000417 	ldw	r8,16(sp)
    bba4:	8480062e 	bgeu	r16,r18,bbc0 <__divdf3+0x5b8>
    bba8:	85a1883a 	add	r16,r16,r22
    bbac:	40bfffc4 	addi	r2,r8,-1
    bbb0:	8580ac36 	bltu	r16,r22,be64 <__divdf3+0x85c>
    bbb4:	8480ab2e 	bgeu	r16,r18,be64 <__divdf3+0x85c>
    bbb8:	423fff84 	addi	r8,r8,-2
    bbbc:	85a1883a 	add	r16,r16,r22
    bbc0:	3804943a 	slli	r2,r7,16
    bbc4:	84a1c83a 	sub	r16,r16,r18
    bbc8:	e009883a 	mov	r4,fp
    bbcc:	1228b03a 	or	r20,r2,r8
    bbd0:	a1ffffcc 	andi	r7,r20,65535
    bbd4:	a024d43a 	srli	r18,r20,16
    bbd8:	380b883a 	mov	r5,r7
    bbdc:	d8c00215 	stw	r3,8(sp)
    bbe0:	d9c00515 	stw	r7,20(sp)
    bbe4:	000ad340 	call	ad34 <__mulsi3>
    bbe8:	900b883a 	mov	r5,r18
    bbec:	e009883a 	mov	r4,fp
    bbf0:	102b883a 	mov	r21,r2
    bbf4:	000ad340 	call	ad34 <__mulsi3>
    bbf8:	900b883a 	mov	r5,r18
    bbfc:	b809883a 	mov	r4,r23
    bc00:	1039883a 	mov	fp,r2
    bc04:	000ad340 	call	ad34 <__mulsi3>
    bc08:	d9c00517 	ldw	r7,20(sp)
    bc0c:	b80b883a 	mov	r5,r23
    bc10:	1025883a 	mov	r18,r2
    bc14:	3809883a 	mov	r4,r7
    bc18:	000ad340 	call	ad34 <__mulsi3>
    bc1c:	a808d43a 	srli	r4,r21,16
    bc20:	1705883a 	add	r2,r2,fp
    bc24:	d8c00217 	ldw	r3,8(sp)
    bc28:	2085883a 	add	r2,r4,r2
    bc2c:	1700022e 	bgeu	r2,fp,bc38 <__divdf3+0x630>
    bc30:	01000074 	movhi	r4,1
    bc34:	9125883a 	add	r18,r18,r4
    bc38:	1008d43a 	srli	r4,r2,16
    bc3c:	1004943a 	slli	r2,r2,16
    bc40:	ad7fffcc 	andi	r21,r21,65535
    bc44:	2489883a 	add	r4,r4,r18
    bc48:	1545883a 	add	r2,r2,r21
    bc4c:	81003836 	bltu	r16,r4,bd30 <__divdf3+0x728>
    bc50:	81003626 	beq	r16,r4,bd2c <__divdf3+0x724>
    bc54:	a5000054 	ori	r20,r20,1
    bc58:	1880ffc4 	addi	r2,r3,1023
    bc5c:	00bf2e0e 	bge	zero,r2,b918 <__alt_data_end+0xfffdb918>
    bc60:	a10001cc 	andi	r4,r20,7
    bc64:	20000726 	beq	r4,zero,bc84 <__divdf3+0x67c>
    bc68:	a10003cc 	andi	r4,r20,15
    bc6c:	01400104 	movi	r5,4
    bc70:	21400426 	beq	r4,r5,bc84 <__divdf3+0x67c>
    bc74:	a149883a 	add	r4,r20,r5
    bc78:	2529803a 	cmpltu	r20,r4,r20
    bc7c:	8d23883a 	add	r17,r17,r20
    bc80:	2029883a 	mov	r20,r4
    bc84:	8900402c 	andhi	r4,r17,256
    bc88:	20000426 	beq	r4,zero,bc9c <__divdf3+0x694>
    bc8c:	18810004 	addi	r2,r3,1024
    bc90:	00ffc034 	movhi	r3,65280
    bc94:	18ffffc4 	addi	r3,r3,-1
    bc98:	88e2703a 	and	r17,r17,r3
    bc9c:	00c1ff84 	movi	r3,2046
    bca0:	18beb416 	blt	r3,r2,b774 <__alt_data_end+0xfffdb774>
    bca4:	a028d0fa 	srli	r20,r20,3
    bca8:	882a977a 	slli	r21,r17,29
    bcac:	8820927a 	slli	r16,r17,9
    bcb0:	1081ffcc 	andi	r2,r2,2047
    bcb4:	ad2ab03a 	or	r21,r21,r20
    bcb8:	8020d33a 	srli	r16,r16,12
    bcbc:	9900004c 	andi	r4,r19,1
    bcc0:	003eb006 	br	b784 <__alt_data_end+0xfffdb784>
    bcc4:	8080022c 	andhi	r2,r16,8
    bcc8:	10001226 	beq	r2,zero,bd14 <__divdf3+0x70c>
    bccc:	8880022c 	andhi	r2,r17,8
    bcd0:	1000101e 	bne	r2,zero,bd14 <__divdf3+0x70c>
    bcd4:	00800434 	movhi	r2,16
    bcd8:	8c000234 	orhi	r16,r17,8
    bcdc:	10bfffc4 	addi	r2,r2,-1
    bce0:	b809883a 	mov	r4,r23
    bce4:	80a0703a 	and	r16,r16,r2
    bce8:	a02b883a 	mov	r21,r20
    bcec:	003f0806 	br	b910 <__alt_data_end+0xfffdb910>
    bcf0:	008000c4 	movi	r2,3
    bcf4:	3880b126 	beq	r7,r2,bfbc <__divdf3+0x9b4>
    bcf8:	00800044 	movi	r2,1
    bcfc:	38805b1e 	bne	r7,r2,be6c <__divdf3+0x864>
    bd00:	e009883a 	mov	r4,fp
    bd04:	0005883a 	mov	r2,zero
    bd08:	0021883a 	mov	r16,zero
    bd0c:	002b883a 	mov	r21,zero
    bd10:	003e9c06 	br	b784 <__alt_data_end+0xfffdb784>
    bd14:	00800434 	movhi	r2,16
    bd18:	84000234 	orhi	r16,r16,8
    bd1c:	10bfffc4 	addi	r2,r2,-1
    bd20:	b009883a 	mov	r4,r22
    bd24:	80a0703a 	and	r16,r16,r2
    bd28:	003ef906 	br	b910 <__alt_data_end+0xfffdb910>
    bd2c:	103fca26 	beq	r2,zero,bc58 <__alt_data_end+0xfffdbc58>
    bd30:	b421883a 	add	r16,r22,r16
    bd34:	a17fffc4 	addi	r5,r20,-1
    bd38:	8580422e 	bgeu	r16,r22,be44 <__divdf3+0x83c>
    bd3c:	2829883a 	mov	r20,r5
    bd40:	813fc41e 	bne	r16,r4,bc54 <__alt_data_end+0xfffdbc54>
    bd44:	d9800017 	ldw	r6,0(sp)
    bd48:	30bfc21e 	bne	r6,r2,bc54 <__alt_data_end+0xfffdbc54>
    bd4c:	003fc206 	br	bc58 <__alt_data_end+0xfffdbc58>
    bd50:	143ff604 	addi	r16,r2,-40
    bd54:	8c20983a 	sll	r16,r17,r16
    bd58:	002b883a 	mov	r21,zero
    bd5c:	003eb406 	br	b830 <__alt_data_end+0xfffdb830>
    bd60:	d9800215 	stw	r6,8(sp)
    bd64:	d9c00515 	stw	r7,20(sp)
    bd68:	da000415 	stw	r8,16(sp)
    bd6c:	000d59c0 	call	d59c <__clzsi2>
    bd70:	10800804 	addi	r2,r2,32
    bd74:	da000417 	ldw	r8,16(sp)
    bd78:	d9c00517 	ldw	r7,20(sp)
    bd7c:	d9800217 	ldw	r6,8(sp)
    bd80:	003ea106 	br	b808 <__alt_data_end+0xfffdb808>
    bd84:	147ff604 	addi	r17,r2,-40
    bd88:	3462983a 	sll	r17,r6,r17
    bd8c:	0029883a 	mov	r20,zero
    bd90:	003ec906 	br	b8b8 <__alt_data_end+0xfffdb8b8>
    bd94:	3009883a 	mov	r4,r6
    bd98:	d9400115 	stw	r5,4(sp)
    bd9c:	d9800215 	stw	r6,8(sp)
    bda0:	da000415 	stw	r8,16(sp)
    bda4:	da400315 	stw	r9,12(sp)
    bda8:	000d59c0 	call	d59c <__clzsi2>
    bdac:	10800804 	addi	r2,r2,32
    bdb0:	da400317 	ldw	r9,12(sp)
    bdb4:	da000417 	ldw	r8,16(sp)
    bdb8:	d9800217 	ldw	r6,8(sp)
    bdbc:	d9400117 	ldw	r5,4(sp)
    bdc0:	003eb306 	br	b890 <__alt_data_end+0xfffdb890>
    bdc4:	d9800017 	ldw	r6,0(sp)
    bdc8:	a9ab883a 	add	r21,r21,r6
    bdcc:	a98b803a 	cmpltu	r5,r21,r6
    bdd0:	2d8b883a 	add	r5,r5,r22
    bdd4:	2a11883a 	add	r8,r5,r8
    bdd8:	897fffc4 	addi	r5,r17,-1
    bddc:	b2000c2e 	bgeu	r22,r8,be10 <__divdf3+0x808>
    bde0:	41003f36 	bltu	r8,r4,bee0 <__divdf3+0x8d8>
    bde4:	22006c26 	beq	r4,r8,bf98 <__divdf3+0x990>
    bde8:	4109c83a 	sub	r4,r8,r4
    bdec:	2823883a 	mov	r17,r5
    bdf0:	003f3b06 	br	bae0 <__alt_data_end+0xfffdbae0>
    bdf4:	ad3ed336 	bltu	r21,r20,b944 <__alt_data_end+0xfffdb944>
    bdf8:	a804d07a 	srli	r2,r21,1
    bdfc:	802e97fa 	slli	r23,r16,31
    be00:	a82a97fa 	slli	r21,r21,31
    be04:	8020d07a 	srli	r16,r16,1
    be08:	b8aeb03a 	or	r23,r23,r2
    be0c:	003ed006 	br	b950 <__alt_data_end+0xfffdb950>
    be10:	b23ff51e 	bne	r22,r8,bde8 <__alt_data_end+0xfffdbde8>
    be14:	d9800017 	ldw	r6,0(sp)
    be18:	a9bff12e 	bgeu	r21,r6,bde0 <__alt_data_end+0xfffdbde0>
    be1c:	b109c83a 	sub	r4,r22,r4
    be20:	2823883a 	mov	r17,r5
    be24:	003f2e06 	br	bae0 <__alt_data_end+0xfffdbae0>
    be28:	2021883a 	mov	r16,r4
    be2c:	003eff06 	br	ba2c <__alt_data_end+0xfffdba2c>
    be30:	2023883a 	mov	r17,r4
    be34:	003ee406 	br	b9c8 <__alt_data_end+0xfffdb9c8>
    be38:	a8bfe236 	bltu	r21,r2,bdc4 <__alt_data_end+0xfffdbdc4>
    be3c:	0009883a 	mov	r4,zero
    be40:	003f2706 	br	bae0 <__alt_data_end+0xfffdbae0>
    be44:	81002d36 	bltu	r16,r4,befc <__divdf3+0x8f4>
    be48:	24005626 	beq	r4,r16,bfa4 <__divdf3+0x99c>
    be4c:	2829883a 	mov	r20,r5
    be50:	003f8006 	br	bc54 <__alt_data_end+0xfffdbc54>
    be54:	053fffc4 	movi	r20,-1
    be58:	003f7f06 	br	bc58 <__alt_data_end+0xfffdbc58>
    be5c:	200f883a 	mov	r7,r4
    be60:	003f3c06 	br	bb54 <__alt_data_end+0xfffdbb54>
    be64:	1011883a 	mov	r8,r2
    be68:	003f5506 	br	bbc0 <__alt_data_end+0xfffdbbc0>
    be6c:	e027883a 	mov	r19,fp
    be70:	003f7906 	br	bc58 <__alt_data_end+0xfffdbc58>
    be74:	010007c4 	movi	r4,31
    be78:	20c02816 	blt	r4,r3,bf1c <__divdf3+0x914>
    be7c:	00800804 	movi	r2,32
    be80:	10c5c83a 	sub	r2,r2,r3
    be84:	888a983a 	sll	r5,r17,r2
    be88:	a0c8d83a 	srl	r4,r20,r3
    be8c:	a084983a 	sll	r2,r20,r2
    be90:	88e2d83a 	srl	r17,r17,r3
    be94:	2906b03a 	or	r3,r5,r4
    be98:	1004c03a 	cmpne	r2,r2,zero
    be9c:	1886b03a 	or	r3,r3,r2
    bea0:	188001cc 	andi	r2,r3,7
    bea4:	10000726 	beq	r2,zero,bec4 <__divdf3+0x8bc>
    bea8:	188003cc 	andi	r2,r3,15
    beac:	01000104 	movi	r4,4
    beb0:	11000426 	beq	r2,r4,bec4 <__divdf3+0x8bc>
    beb4:	1805883a 	mov	r2,r3
    beb8:	10c00104 	addi	r3,r2,4
    bebc:	1885803a 	cmpltu	r2,r3,r2
    bec0:	88a3883a 	add	r17,r17,r2
    bec4:	8880202c 	andhi	r2,r17,128
    bec8:	10002926 	beq	r2,zero,bf70 <__divdf3+0x968>
    becc:	9900004c 	andi	r4,r19,1
    bed0:	00800044 	movi	r2,1
    bed4:	0021883a 	mov	r16,zero
    bed8:	002b883a 	mov	r21,zero
    bedc:	003e2906 	br	b784 <__alt_data_end+0xfffdb784>
    bee0:	d9800017 	ldw	r6,0(sp)
    bee4:	8c7fff84 	addi	r17,r17,-2
    bee8:	a9ab883a 	add	r21,r21,r6
    beec:	a98b803a 	cmpltu	r5,r21,r6
    bef0:	2d8b883a 	add	r5,r5,r22
    bef4:	2a11883a 	add	r8,r5,r8
    bef8:	003ef806 	br	badc <__alt_data_end+0xfffdbadc>
    befc:	d9800017 	ldw	r6,0(sp)
    bf00:	318f883a 	add	r7,r6,r6
    bf04:	398b803a 	cmpltu	r5,r7,r6
    bf08:	2d8d883a 	add	r6,r5,r22
    bf0c:	81a1883a 	add	r16,r16,r6
    bf10:	a17fff84 	addi	r5,r20,-2
    bf14:	d9c00015 	stw	r7,0(sp)
    bf18:	003f8806 	br	bd3c <__alt_data_end+0xfffdbd3c>
    bf1c:	013ff844 	movi	r4,-31
    bf20:	2085c83a 	sub	r2,r4,r2
    bf24:	8888d83a 	srl	r4,r17,r2
    bf28:	00800804 	movi	r2,32
    bf2c:	18802126 	beq	r3,r2,bfb4 <__divdf3+0x9ac>
    bf30:	04001004 	movi	r16,64
    bf34:	80c7c83a 	sub	r3,r16,r3
    bf38:	88e0983a 	sll	r16,r17,r3
    bf3c:	8504b03a 	or	r2,r16,r20
    bf40:	1004c03a 	cmpne	r2,r2,zero
    bf44:	2084b03a 	or	r2,r4,r2
    bf48:	144001cc 	andi	r17,r2,7
    bf4c:	88000d1e 	bne	r17,zero,bf84 <__divdf3+0x97c>
    bf50:	0021883a 	mov	r16,zero
    bf54:	102ad0fa 	srli	r21,r2,3
    bf58:	9900004c 	andi	r4,r19,1
    bf5c:	0005883a 	mov	r2,zero
    bf60:	ac6ab03a 	or	r21,r21,r17
    bf64:	003e0706 	br	b784 <__alt_data_end+0xfffdb784>
    bf68:	1007883a 	mov	r3,r2
    bf6c:	0023883a 	mov	r17,zero
    bf70:	8820927a 	slli	r16,r17,9
    bf74:	1805883a 	mov	r2,r3
    bf78:	8822977a 	slli	r17,r17,29
    bf7c:	8020d33a 	srli	r16,r16,12
    bf80:	003ff406 	br	bf54 <__alt_data_end+0xfffdbf54>
    bf84:	10c003cc 	andi	r3,r2,15
    bf88:	01000104 	movi	r4,4
    bf8c:	193ff626 	beq	r3,r4,bf68 <__alt_data_end+0xfffdbf68>
    bf90:	0023883a 	mov	r17,zero
    bf94:	003fc806 	br	beb8 <__alt_data_end+0xfffdbeb8>
    bf98:	a8bfd136 	bltu	r21,r2,bee0 <__alt_data_end+0xfffdbee0>
    bf9c:	2823883a 	mov	r17,r5
    bfa0:	003fa606 	br	be3c <__alt_data_end+0xfffdbe3c>
    bfa4:	d9800017 	ldw	r6,0(sp)
    bfa8:	30bfd436 	bltu	r6,r2,befc <__alt_data_end+0xfffdbefc>
    bfac:	2829883a 	mov	r20,r5
    bfb0:	003f6406 	br	bd44 <__alt_data_end+0xfffdbd44>
    bfb4:	0021883a 	mov	r16,zero
    bfb8:	003fe006 	br	bf3c <__alt_data_end+0xfffdbf3c>
    bfbc:	00800434 	movhi	r2,16
    bfc0:	8c000234 	orhi	r16,r17,8
    bfc4:	10bfffc4 	addi	r2,r2,-1
    bfc8:	e009883a 	mov	r4,fp
    bfcc:	80a0703a 	and	r16,r16,r2
    bfd0:	a02b883a 	mov	r21,r20
    bfd4:	003e4e06 	br	b910 <__alt_data_end+0xfffdb910>

0000bfd8 <__eqdf2>:
    bfd8:	2804d53a 	srli	r2,r5,20
    bfdc:	3806d53a 	srli	r3,r7,20
    bfe0:	02000434 	movhi	r8,16
    bfe4:	423fffc4 	addi	r8,r8,-1
    bfe8:	1081ffcc 	andi	r2,r2,2047
    bfec:	0281ffc4 	movi	r10,2047
    bff0:	2a12703a 	and	r9,r5,r8
    bff4:	18c1ffcc 	andi	r3,r3,2047
    bff8:	3a10703a 	and	r8,r7,r8
    bffc:	280ad7fa 	srli	r5,r5,31
    c000:	380ed7fa 	srli	r7,r7,31
    c004:	12801026 	beq	r2,r10,c048 <__eqdf2+0x70>
    c008:	0281ffc4 	movi	r10,2047
    c00c:	1a800a26 	beq	r3,r10,c038 <__eqdf2+0x60>
    c010:	10c00226 	beq	r2,r3,c01c <__eqdf2+0x44>
    c014:	00800044 	movi	r2,1
    c018:	f800283a 	ret
    c01c:	4a3ffd1e 	bne	r9,r8,c014 <__alt_data_end+0xfffdc014>
    c020:	21bffc1e 	bne	r4,r6,c014 <__alt_data_end+0xfffdc014>
    c024:	29c00c26 	beq	r5,r7,c058 <__eqdf2+0x80>
    c028:	103ffa1e 	bne	r2,zero,c014 <__alt_data_end+0xfffdc014>
    c02c:	2244b03a 	or	r2,r4,r9
    c030:	1004c03a 	cmpne	r2,r2,zero
    c034:	f800283a 	ret
    c038:	3214b03a 	or	r10,r6,r8
    c03c:	503ff426 	beq	r10,zero,c010 <__alt_data_end+0xfffdc010>
    c040:	00800044 	movi	r2,1
    c044:	f800283a 	ret
    c048:	2254b03a 	or	r10,r4,r9
    c04c:	503fee26 	beq	r10,zero,c008 <__alt_data_end+0xfffdc008>
    c050:	00800044 	movi	r2,1
    c054:	f800283a 	ret
    c058:	0005883a 	mov	r2,zero
    c05c:	f800283a 	ret

0000c060 <__gedf2>:
    c060:	2804d53a 	srli	r2,r5,20
    c064:	3806d53a 	srli	r3,r7,20
    c068:	02000434 	movhi	r8,16
    c06c:	423fffc4 	addi	r8,r8,-1
    c070:	1081ffcc 	andi	r2,r2,2047
    c074:	0241ffc4 	movi	r9,2047
    c078:	2a14703a 	and	r10,r5,r8
    c07c:	18c1ffcc 	andi	r3,r3,2047
    c080:	3a10703a 	and	r8,r7,r8
    c084:	280ad7fa 	srli	r5,r5,31
    c088:	380ed7fa 	srli	r7,r7,31
    c08c:	12401d26 	beq	r2,r9,c104 <__gedf2+0xa4>
    c090:	0241ffc4 	movi	r9,2047
    c094:	1a401226 	beq	r3,r9,c0e0 <__gedf2+0x80>
    c098:	1000081e 	bne	r2,zero,c0bc <__gedf2+0x5c>
    c09c:	2296b03a 	or	r11,r4,r10
    c0a0:	5813003a 	cmpeq	r9,r11,zero
    c0a4:	1800091e 	bne	r3,zero,c0cc <__gedf2+0x6c>
    c0a8:	3218b03a 	or	r12,r6,r8
    c0ac:	6000071e 	bne	r12,zero,c0cc <__gedf2+0x6c>
    c0b0:	0005883a 	mov	r2,zero
    c0b4:	5800101e 	bne	r11,zero,c0f8 <__gedf2+0x98>
    c0b8:	f800283a 	ret
    c0bc:	18000c1e 	bne	r3,zero,c0f0 <__gedf2+0x90>
    c0c0:	3212b03a 	or	r9,r6,r8
    c0c4:	48000c26 	beq	r9,zero,c0f8 <__gedf2+0x98>
    c0c8:	0013883a 	mov	r9,zero
    c0cc:	39c03fcc 	andi	r7,r7,255
    c0d0:	48000826 	beq	r9,zero,c0f4 <__gedf2+0x94>
    c0d4:	38000926 	beq	r7,zero,c0fc <__gedf2+0x9c>
    c0d8:	00800044 	movi	r2,1
    c0dc:	f800283a 	ret
    c0e0:	3212b03a 	or	r9,r6,r8
    c0e4:	483fec26 	beq	r9,zero,c098 <__alt_data_end+0xfffdc098>
    c0e8:	00bfff84 	movi	r2,-2
    c0ec:	f800283a 	ret
    c0f0:	39c03fcc 	andi	r7,r7,255
    c0f4:	29c00626 	beq	r5,r7,c110 <__gedf2+0xb0>
    c0f8:	283ff726 	beq	r5,zero,c0d8 <__alt_data_end+0xfffdc0d8>
    c0fc:	00bfffc4 	movi	r2,-1
    c100:	f800283a 	ret
    c104:	2292b03a 	or	r9,r4,r10
    c108:	483fe126 	beq	r9,zero,c090 <__alt_data_end+0xfffdc090>
    c10c:	003ff606 	br	c0e8 <__alt_data_end+0xfffdc0e8>
    c110:	18bff916 	blt	r3,r2,c0f8 <__alt_data_end+0xfffdc0f8>
    c114:	10c00316 	blt	r2,r3,c124 <__gedf2+0xc4>
    c118:	42bff736 	bltu	r8,r10,c0f8 <__alt_data_end+0xfffdc0f8>
    c11c:	52000326 	beq	r10,r8,c12c <__gedf2+0xcc>
    c120:	5200042e 	bgeu	r10,r8,c134 <__gedf2+0xd4>
    c124:	283fec1e 	bne	r5,zero,c0d8 <__alt_data_end+0xfffdc0d8>
    c128:	003ff406 	br	c0fc <__alt_data_end+0xfffdc0fc>
    c12c:	313ff236 	bltu	r6,r4,c0f8 <__alt_data_end+0xfffdc0f8>
    c130:	21bffc36 	bltu	r4,r6,c124 <__alt_data_end+0xfffdc124>
    c134:	0005883a 	mov	r2,zero
    c138:	f800283a 	ret

0000c13c <__ledf2>:
    c13c:	2804d53a 	srli	r2,r5,20
    c140:	3810d53a 	srli	r8,r7,20
    c144:	00c00434 	movhi	r3,16
    c148:	18ffffc4 	addi	r3,r3,-1
    c14c:	1081ffcc 	andi	r2,r2,2047
    c150:	0241ffc4 	movi	r9,2047
    c154:	28d4703a 	and	r10,r5,r3
    c158:	4201ffcc 	andi	r8,r8,2047
    c15c:	38c6703a 	and	r3,r7,r3
    c160:	280ad7fa 	srli	r5,r5,31
    c164:	380ed7fa 	srli	r7,r7,31
    c168:	12401f26 	beq	r2,r9,c1e8 <__ledf2+0xac>
    c16c:	0241ffc4 	movi	r9,2047
    c170:	42401426 	beq	r8,r9,c1c4 <__ledf2+0x88>
    c174:	1000091e 	bne	r2,zero,c19c <__ledf2+0x60>
    c178:	2296b03a 	or	r11,r4,r10
    c17c:	5813003a 	cmpeq	r9,r11,zero
    c180:	29403fcc 	andi	r5,r5,255
    c184:	40000a1e 	bne	r8,zero,c1b0 <__ledf2+0x74>
    c188:	30d8b03a 	or	r12,r6,r3
    c18c:	6000081e 	bne	r12,zero,c1b0 <__ledf2+0x74>
    c190:	0005883a 	mov	r2,zero
    c194:	5800111e 	bne	r11,zero,c1dc <__ledf2+0xa0>
    c198:	f800283a 	ret
    c19c:	29403fcc 	andi	r5,r5,255
    c1a0:	40000c1e 	bne	r8,zero,c1d4 <__ledf2+0x98>
    c1a4:	30d2b03a 	or	r9,r6,r3
    c1a8:	48000c26 	beq	r9,zero,c1dc <__ledf2+0xa0>
    c1ac:	0013883a 	mov	r9,zero
    c1b0:	39c03fcc 	andi	r7,r7,255
    c1b4:	48000826 	beq	r9,zero,c1d8 <__ledf2+0x9c>
    c1b8:	38001126 	beq	r7,zero,c200 <__ledf2+0xc4>
    c1bc:	00800044 	movi	r2,1
    c1c0:	f800283a 	ret
    c1c4:	30d2b03a 	or	r9,r6,r3
    c1c8:	483fea26 	beq	r9,zero,c174 <__alt_data_end+0xfffdc174>
    c1cc:	00800084 	movi	r2,2
    c1d0:	f800283a 	ret
    c1d4:	39c03fcc 	andi	r7,r7,255
    c1d8:	39400726 	beq	r7,r5,c1f8 <__ledf2+0xbc>
    c1dc:	2800081e 	bne	r5,zero,c200 <__ledf2+0xc4>
    c1e0:	00800044 	movi	r2,1
    c1e4:	f800283a 	ret
    c1e8:	2292b03a 	or	r9,r4,r10
    c1ec:	483fdf26 	beq	r9,zero,c16c <__alt_data_end+0xfffdc16c>
    c1f0:	00800084 	movi	r2,2
    c1f4:	f800283a 	ret
    c1f8:	4080030e 	bge	r8,r2,c208 <__ledf2+0xcc>
    c1fc:	383fef26 	beq	r7,zero,c1bc <__alt_data_end+0xfffdc1bc>
    c200:	00bfffc4 	movi	r2,-1
    c204:	f800283a 	ret
    c208:	123feb16 	blt	r2,r8,c1b8 <__alt_data_end+0xfffdc1b8>
    c20c:	1abff336 	bltu	r3,r10,c1dc <__alt_data_end+0xfffdc1dc>
    c210:	50c00326 	beq	r10,r3,c220 <__ledf2+0xe4>
    c214:	50c0042e 	bgeu	r10,r3,c228 <__ledf2+0xec>
    c218:	283fe81e 	bne	r5,zero,c1bc <__alt_data_end+0xfffdc1bc>
    c21c:	003ff806 	br	c200 <__alt_data_end+0xfffdc200>
    c220:	313fee36 	bltu	r6,r4,c1dc <__alt_data_end+0xfffdc1dc>
    c224:	21bffc36 	bltu	r4,r6,c218 <__alt_data_end+0xfffdc218>
    c228:	0005883a 	mov	r2,zero
    c22c:	f800283a 	ret

0000c230 <__muldf3>:
    c230:	deffee04 	addi	sp,sp,-72
    c234:	dd000c15 	stw	r20,48(sp)
    c238:	2828d53a 	srli	r20,r5,20
    c23c:	ddc00f15 	stw	r23,60(sp)
    c240:	282ed7fa 	srli	r23,r5,31
    c244:	dc000815 	stw	r16,32(sp)
    c248:	04000434 	movhi	r16,16
    c24c:	dcc00b15 	stw	r19,44(sp)
    c250:	843fffc4 	addi	r16,r16,-1
    c254:	dfc01115 	stw	ra,68(sp)
    c258:	df001015 	stw	fp,64(sp)
    c25c:	dd800e15 	stw	r22,56(sp)
    c260:	dd400d15 	stw	r21,52(sp)
    c264:	dc800a15 	stw	r18,40(sp)
    c268:	dc400915 	stw	r17,36(sp)
    c26c:	a501ffcc 	andi	r20,r20,2047
    c270:	2c20703a 	and	r16,r5,r16
    c274:	b827883a 	mov	r19,r23
    c278:	ba403fcc 	andi	r9,r23,255
    c27c:	a0006026 	beq	r20,zero,c400 <__muldf3+0x1d0>
    c280:	0081ffc4 	movi	r2,2047
    c284:	202d883a 	mov	r22,r4
    c288:	a0803626 	beq	r20,r2,c364 <__muldf3+0x134>
    c28c:	84000434 	orhi	r16,r16,16
    c290:	200ad77a 	srli	r5,r4,29
    c294:	800490fa 	slli	r2,r16,3
    c298:	202c90fa 	slli	r22,r4,3
    c29c:	a53f0044 	addi	r20,r20,-1023
    c2a0:	28a0b03a 	or	r16,r5,r2
    c2a4:	002b883a 	mov	r21,zero
    c2a8:	000b883a 	mov	r5,zero
    c2ac:	3804d53a 	srli	r2,r7,20
    c2b0:	3838d7fa 	srli	fp,r7,31
    c2b4:	04400434 	movhi	r17,16
    c2b8:	8c7fffc4 	addi	r17,r17,-1
    c2bc:	1081ffcc 	andi	r2,r2,2047
    c2c0:	3025883a 	mov	r18,r6
    c2c4:	3c62703a 	and	r17,r7,r17
    c2c8:	e2803fcc 	andi	r10,fp,255
    c2cc:	10006d26 	beq	r2,zero,c484 <__muldf3+0x254>
    c2d0:	00c1ffc4 	movi	r3,2047
    c2d4:	10c06526 	beq	r2,r3,c46c <__muldf3+0x23c>
    c2d8:	8c400434 	orhi	r17,r17,16
    c2dc:	300ed77a 	srli	r7,r6,29
    c2e0:	880690fa 	slli	r3,r17,3
    c2e4:	302490fa 	slli	r18,r6,3
    c2e8:	10bf0044 	addi	r2,r2,-1023
    c2ec:	38e2b03a 	or	r17,r7,r3
    c2f0:	000f883a 	mov	r7,zero
    c2f4:	a087883a 	add	r3,r20,r2
    c2f8:	010003c4 	movi	r4,15
    c2fc:	3d44b03a 	or	r2,r7,r21
    c300:	e5ccf03a 	xor	r6,fp,r23
    c304:	1a000044 	addi	r8,r3,1
    c308:	20809b36 	bltu	r4,r2,c578 <__muldf3+0x348>
    c30c:	100490ba 	slli	r2,r2,2
    c310:	01000074 	movhi	r4,1
    c314:	2130c904 	addi	r4,r4,-15580
    c318:	1105883a 	add	r2,r2,r4
    c31c:	10800017 	ldw	r2,0(r2)
    c320:	1000683a 	jmp	r2
    c324:	0000c578 	rdprs	zero,zero,789
    c328:	0000c384 	movi	zero,782
    c32c:	0000c384 	movi	zero,782
    c330:	0000c380 	call	c38 <___vfprintf_internal_r+0x284>
    c334:	0000c554 	movui	zero,789
    c338:	0000c554 	movui	zero,789
    c33c:	0000c53c 	xorhi	zero,zero,788
    c340:	0000c380 	call	c38 <___vfprintf_internal_r+0x284>
    c344:	0000c554 	movui	zero,789
    c348:	0000c53c 	xorhi	zero,zero,788
    c34c:	0000c554 	movui	zero,789
    c350:	0000c380 	call	c38 <___vfprintf_internal_r+0x284>
    c354:	0000c564 	muli	zero,zero,789
    c358:	0000c564 	muli	zero,zero,789
    c35c:	0000c564 	muli	zero,zero,789
    c360:	0000c8c4 	movi	zero,803
    c364:	2404b03a 	or	r2,r4,r16
    c368:	1000711e 	bne	r2,zero,c530 <__muldf3+0x300>
    c36c:	05400204 	movi	r21,8
    c370:	0021883a 	mov	r16,zero
    c374:	002d883a 	mov	r22,zero
    c378:	01400084 	movi	r5,2
    c37c:	003fcb06 	br	c2ac <__alt_data_end+0xfffdc2ac>
    c380:	500d883a 	mov	r6,r10
    c384:	00800084 	movi	r2,2
    c388:	38805926 	beq	r7,r2,c4f0 <__muldf3+0x2c0>
    c38c:	008000c4 	movi	r2,3
    c390:	3881bb26 	beq	r7,r2,ca80 <__muldf3+0x850>
    c394:	00800044 	movi	r2,1
    c398:	3881961e 	bne	r7,r2,c9f4 <__muldf3+0x7c4>
    c39c:	3027883a 	mov	r19,r6
    c3a0:	0005883a 	mov	r2,zero
    c3a4:	0021883a 	mov	r16,zero
    c3a8:	002d883a 	mov	r22,zero
    c3ac:	1004953a 	slli	r2,r2,20
    c3b0:	98c03fcc 	andi	r3,r19,255
    c3b4:	04400434 	movhi	r17,16
    c3b8:	8c7fffc4 	addi	r17,r17,-1
    c3bc:	180697fa 	slli	r3,r3,31
    c3c0:	8460703a 	and	r16,r16,r17
    c3c4:	80a0b03a 	or	r16,r16,r2
    c3c8:	80c6b03a 	or	r3,r16,r3
    c3cc:	b005883a 	mov	r2,r22
    c3d0:	dfc01117 	ldw	ra,68(sp)
    c3d4:	df001017 	ldw	fp,64(sp)
    c3d8:	ddc00f17 	ldw	r23,60(sp)
    c3dc:	dd800e17 	ldw	r22,56(sp)
    c3e0:	dd400d17 	ldw	r21,52(sp)
    c3e4:	dd000c17 	ldw	r20,48(sp)
    c3e8:	dcc00b17 	ldw	r19,44(sp)
    c3ec:	dc800a17 	ldw	r18,40(sp)
    c3f0:	dc400917 	ldw	r17,36(sp)
    c3f4:	dc000817 	ldw	r16,32(sp)
    c3f8:	dec01204 	addi	sp,sp,72
    c3fc:	f800283a 	ret
    c400:	2404b03a 	or	r2,r4,r16
    c404:	202b883a 	mov	r21,r4
    c408:	10004426 	beq	r2,zero,c51c <__muldf3+0x2ec>
    c40c:	80015126 	beq	r16,zero,c954 <__muldf3+0x724>
    c410:	8009883a 	mov	r4,r16
    c414:	d9800715 	stw	r6,28(sp)
    c418:	d9c00215 	stw	r7,8(sp)
    c41c:	da400415 	stw	r9,16(sp)
    c420:	000d59c0 	call	d59c <__clzsi2>
    c424:	d9800717 	ldw	r6,28(sp)
    c428:	d9c00217 	ldw	r7,8(sp)
    c42c:	da400417 	ldw	r9,16(sp)
    c430:	113ffd44 	addi	r4,r2,-11
    c434:	00c00704 	movi	r3,28
    c438:	19014216 	blt	r3,r4,c944 <__muldf3+0x714>
    c43c:	00c00744 	movi	r3,29
    c440:	15bffe04 	addi	r22,r2,-8
    c444:	1907c83a 	sub	r3,r3,r4
    c448:	85a0983a 	sll	r16,r16,r22
    c44c:	a8c6d83a 	srl	r3,r21,r3
    c450:	adac983a 	sll	r22,r21,r22
    c454:	1c20b03a 	or	r16,r3,r16
    c458:	1080fcc4 	addi	r2,r2,1011
    c45c:	00a9c83a 	sub	r20,zero,r2
    c460:	002b883a 	mov	r21,zero
    c464:	000b883a 	mov	r5,zero
    c468:	003f9006 	br	c2ac <__alt_data_end+0xfffdc2ac>
    c46c:	3446b03a 	or	r3,r6,r17
    c470:	1800281e 	bne	r3,zero,c514 <__muldf3+0x2e4>
    c474:	0023883a 	mov	r17,zero
    c478:	0025883a 	mov	r18,zero
    c47c:	01c00084 	movi	r7,2
    c480:	003f9c06 	br	c2f4 <__alt_data_end+0xfffdc2f4>
    c484:	3446b03a 	or	r3,r6,r17
    c488:	18001e26 	beq	r3,zero,c504 <__muldf3+0x2d4>
    c48c:	88012126 	beq	r17,zero,c914 <__muldf3+0x6e4>
    c490:	8809883a 	mov	r4,r17
    c494:	d9400215 	stw	r5,8(sp)
    c498:	d9800715 	stw	r6,28(sp)
    c49c:	da400415 	stw	r9,16(sp)
    c4a0:	da800315 	stw	r10,12(sp)
    c4a4:	000d59c0 	call	d59c <__clzsi2>
    c4a8:	d9400217 	ldw	r5,8(sp)
    c4ac:	d9800717 	ldw	r6,28(sp)
    c4b0:	da400417 	ldw	r9,16(sp)
    c4b4:	da800317 	ldw	r10,12(sp)
    c4b8:	113ffd44 	addi	r4,r2,-11
    c4bc:	00c00704 	movi	r3,28
    c4c0:	19011016 	blt	r3,r4,c904 <__muldf3+0x6d4>
    c4c4:	00c00744 	movi	r3,29
    c4c8:	14bffe04 	addi	r18,r2,-8
    c4cc:	1907c83a 	sub	r3,r3,r4
    c4d0:	8ca2983a 	sll	r17,r17,r18
    c4d4:	30c6d83a 	srl	r3,r6,r3
    c4d8:	34a4983a 	sll	r18,r6,r18
    c4dc:	1c62b03a 	or	r17,r3,r17
    c4e0:	1080fcc4 	addi	r2,r2,1011
    c4e4:	0085c83a 	sub	r2,zero,r2
    c4e8:	000f883a 	mov	r7,zero
    c4ec:	003f8106 	br	c2f4 <__alt_data_end+0xfffdc2f4>
    c4f0:	3027883a 	mov	r19,r6
    c4f4:	0081ffc4 	movi	r2,2047
    c4f8:	0021883a 	mov	r16,zero
    c4fc:	002d883a 	mov	r22,zero
    c500:	003faa06 	br	c3ac <__alt_data_end+0xfffdc3ac>
    c504:	0023883a 	mov	r17,zero
    c508:	0025883a 	mov	r18,zero
    c50c:	01c00044 	movi	r7,1
    c510:	003f7806 	br	c2f4 <__alt_data_end+0xfffdc2f4>
    c514:	01c000c4 	movi	r7,3
    c518:	003f7606 	br	c2f4 <__alt_data_end+0xfffdc2f4>
    c51c:	05400104 	movi	r21,4
    c520:	0021883a 	mov	r16,zero
    c524:	002d883a 	mov	r22,zero
    c528:	01400044 	movi	r5,1
    c52c:	003f5f06 	br	c2ac <__alt_data_end+0xfffdc2ac>
    c530:	05400304 	movi	r21,12
    c534:	014000c4 	movi	r5,3
    c538:	003f5c06 	br	c2ac <__alt_data_end+0xfffdc2ac>
    c53c:	04000434 	movhi	r16,16
    c540:	0027883a 	mov	r19,zero
    c544:	843fffc4 	addi	r16,r16,-1
    c548:	05bfffc4 	movi	r22,-1
    c54c:	0081ffc4 	movi	r2,2047
    c550:	003f9606 	br	c3ac <__alt_data_end+0xfffdc3ac>
    c554:	8023883a 	mov	r17,r16
    c558:	b025883a 	mov	r18,r22
    c55c:	280f883a 	mov	r7,r5
    c560:	003f8806 	br	c384 <__alt_data_end+0xfffdc384>
    c564:	8023883a 	mov	r17,r16
    c568:	b025883a 	mov	r18,r22
    c56c:	480d883a 	mov	r6,r9
    c570:	280f883a 	mov	r7,r5
    c574:	003f8306 	br	c384 <__alt_data_end+0xfffdc384>
    c578:	b026d43a 	srli	r19,r22,16
    c57c:	902ed43a 	srli	r23,r18,16
    c580:	b5bfffcc 	andi	r22,r22,65535
    c584:	94bfffcc 	andi	r18,r18,65535
    c588:	b00b883a 	mov	r5,r22
    c58c:	9009883a 	mov	r4,r18
    c590:	d8c00515 	stw	r3,20(sp)
    c594:	d9800715 	stw	r6,28(sp)
    c598:	da000615 	stw	r8,24(sp)
    c59c:	000ad340 	call	ad34 <__mulsi3>
    c5a0:	980b883a 	mov	r5,r19
    c5a4:	9009883a 	mov	r4,r18
    c5a8:	1029883a 	mov	r20,r2
    c5ac:	000ad340 	call	ad34 <__mulsi3>
    c5b0:	b80b883a 	mov	r5,r23
    c5b4:	9809883a 	mov	r4,r19
    c5b8:	102b883a 	mov	r21,r2
    c5bc:	000ad340 	call	ad34 <__mulsi3>
    c5c0:	b809883a 	mov	r4,r23
    c5c4:	b00b883a 	mov	r5,r22
    c5c8:	1039883a 	mov	fp,r2
    c5cc:	000ad340 	call	ad34 <__mulsi3>
    c5d0:	a008d43a 	srli	r4,r20,16
    c5d4:	1545883a 	add	r2,r2,r21
    c5d8:	d8c00517 	ldw	r3,20(sp)
    c5dc:	2085883a 	add	r2,r4,r2
    c5e0:	d9800717 	ldw	r6,28(sp)
    c5e4:	da000617 	ldw	r8,24(sp)
    c5e8:	1540022e 	bgeu	r2,r21,c5f4 <__muldf3+0x3c4>
    c5ec:	01000074 	movhi	r4,1
    c5f0:	e139883a 	add	fp,fp,r4
    c5f4:	100e943a 	slli	r7,r2,16
    c5f8:	1004d43a 	srli	r2,r2,16
    c5fc:	882ad43a 	srli	r21,r17,16
    c600:	a53fffcc 	andi	r20,r20,65535
    c604:	8c7fffcc 	andi	r17,r17,65535
    c608:	3d29883a 	add	r20,r7,r20
    c60c:	b00b883a 	mov	r5,r22
    c610:	8809883a 	mov	r4,r17
    c614:	d8c00515 	stw	r3,20(sp)
    c618:	d9800715 	stw	r6,28(sp)
    c61c:	da000615 	stw	r8,24(sp)
    c620:	dd000115 	stw	r20,4(sp)
    c624:	d8800015 	stw	r2,0(sp)
    c628:	000ad340 	call	ad34 <__mulsi3>
    c62c:	980b883a 	mov	r5,r19
    c630:	8809883a 	mov	r4,r17
    c634:	d8800215 	stw	r2,8(sp)
    c638:	000ad340 	call	ad34 <__mulsi3>
    c63c:	9809883a 	mov	r4,r19
    c640:	a80b883a 	mov	r5,r21
    c644:	1029883a 	mov	r20,r2
    c648:	000ad340 	call	ad34 <__mulsi3>
    c64c:	b00b883a 	mov	r5,r22
    c650:	a809883a 	mov	r4,r21
    c654:	d8800415 	stw	r2,16(sp)
    c658:	000ad340 	call	ad34 <__mulsi3>
    c65c:	d9c00217 	ldw	r7,8(sp)
    c660:	1505883a 	add	r2,r2,r20
    c664:	d8c00517 	ldw	r3,20(sp)
    c668:	3826d43a 	srli	r19,r7,16
    c66c:	d9800717 	ldw	r6,28(sp)
    c670:	da000617 	ldw	r8,24(sp)
    c674:	9885883a 	add	r2,r19,r2
    c678:	da400417 	ldw	r9,16(sp)
    c67c:	1500022e 	bgeu	r2,r20,c688 <__muldf3+0x458>
    c680:	01000074 	movhi	r4,1
    c684:	4913883a 	add	r9,r9,r4
    c688:	1028d43a 	srli	r20,r2,16
    c68c:	1004943a 	slli	r2,r2,16
    c690:	802cd43a 	srli	r22,r16,16
    c694:	843fffcc 	andi	r16,r16,65535
    c698:	3cffffcc 	andi	r19,r7,65535
    c69c:	9009883a 	mov	r4,r18
    c6a0:	800b883a 	mov	r5,r16
    c6a4:	a269883a 	add	r20,r20,r9
    c6a8:	d8c00515 	stw	r3,20(sp)
    c6ac:	d9800715 	stw	r6,28(sp)
    c6b0:	da000615 	stw	r8,24(sp)
    c6b4:	14e7883a 	add	r19,r2,r19
    c6b8:	000ad340 	call	ad34 <__mulsi3>
    c6bc:	9009883a 	mov	r4,r18
    c6c0:	b00b883a 	mov	r5,r22
    c6c4:	d8800315 	stw	r2,12(sp)
    c6c8:	000ad340 	call	ad34 <__mulsi3>
    c6cc:	b809883a 	mov	r4,r23
    c6d0:	b00b883a 	mov	r5,r22
    c6d4:	d8800215 	stw	r2,8(sp)
    c6d8:	000ad340 	call	ad34 <__mulsi3>
    c6dc:	b80b883a 	mov	r5,r23
    c6e0:	8009883a 	mov	r4,r16
    c6e4:	d8800415 	stw	r2,16(sp)
    c6e8:	000ad340 	call	ad34 <__mulsi3>
    c6ec:	da800317 	ldw	r10,12(sp)
    c6f0:	d9c00217 	ldw	r7,8(sp)
    c6f4:	d9000017 	ldw	r4,0(sp)
    c6f8:	502ed43a 	srli	r23,r10,16
    c6fc:	11c5883a 	add	r2,r2,r7
    c700:	24e5883a 	add	r18,r4,r19
    c704:	b885883a 	add	r2,r23,r2
    c708:	d8c00517 	ldw	r3,20(sp)
    c70c:	d9800717 	ldw	r6,28(sp)
    c710:	da000617 	ldw	r8,24(sp)
    c714:	da400417 	ldw	r9,16(sp)
    c718:	11c0022e 	bgeu	r2,r7,c724 <__muldf3+0x4f4>
    c71c:	01000074 	movhi	r4,1
    c720:	4913883a 	add	r9,r9,r4
    c724:	100ed43a 	srli	r7,r2,16
    c728:	1004943a 	slli	r2,r2,16
    c72c:	55ffffcc 	andi	r23,r10,65535
    c730:	3a53883a 	add	r9,r7,r9
    c734:	8809883a 	mov	r4,r17
    c738:	800b883a 	mov	r5,r16
    c73c:	d8c00515 	stw	r3,20(sp)
    c740:	d9800715 	stw	r6,28(sp)
    c744:	da000615 	stw	r8,24(sp)
    c748:	da400415 	stw	r9,16(sp)
    c74c:	15ef883a 	add	r23,r2,r23
    c750:	000ad340 	call	ad34 <__mulsi3>
    c754:	8809883a 	mov	r4,r17
    c758:	b00b883a 	mov	r5,r22
    c75c:	d8800215 	stw	r2,8(sp)
    c760:	000ad340 	call	ad34 <__mulsi3>
    c764:	b00b883a 	mov	r5,r22
    c768:	a809883a 	mov	r4,r21
    c76c:	d8800315 	stw	r2,12(sp)
    c770:	000ad340 	call	ad34 <__mulsi3>
    c774:	8009883a 	mov	r4,r16
    c778:	a80b883a 	mov	r5,r21
    c77c:	1023883a 	mov	r17,r2
    c780:	000ad340 	call	ad34 <__mulsi3>
    c784:	d9c00217 	ldw	r7,8(sp)
    c788:	da800317 	ldw	r10,12(sp)
    c78c:	d8c00517 	ldw	r3,20(sp)
    c790:	3808d43a 	srli	r4,r7,16
    c794:	1285883a 	add	r2,r2,r10
    c798:	d9800717 	ldw	r6,28(sp)
    c79c:	2085883a 	add	r2,r4,r2
    c7a0:	da000617 	ldw	r8,24(sp)
    c7a4:	da400417 	ldw	r9,16(sp)
    c7a8:	1280022e 	bgeu	r2,r10,c7b4 <__muldf3+0x584>
    c7ac:	01000074 	movhi	r4,1
    c7b0:	8923883a 	add	r17,r17,r4
    c7b4:	1008943a 	slli	r4,r2,16
    c7b8:	39ffffcc 	andi	r7,r7,65535
    c7bc:	e4b9883a 	add	fp,fp,r18
    c7c0:	21cf883a 	add	r7,r4,r7
    c7c4:	e4e7803a 	cmpltu	r19,fp,r19
    c7c8:	3d0f883a 	add	r7,r7,r20
    c7cc:	bf39883a 	add	fp,r23,fp
    c7d0:	99c9883a 	add	r4,r19,r7
    c7d4:	e5ef803a 	cmpltu	r23,fp,r23
    c7d8:	490b883a 	add	r5,r9,r4
    c7dc:	1004d43a 	srli	r2,r2,16
    c7e0:	b965883a 	add	r18,r23,r5
    c7e4:	24c9803a 	cmpltu	r4,r4,r19
    c7e8:	3d29803a 	cmpltu	r20,r7,r20
    c7ec:	a128b03a 	or	r20,r20,r4
    c7f0:	95ef803a 	cmpltu	r23,r18,r23
    c7f4:	2a53803a 	cmpltu	r9,r5,r9
    c7f8:	a0a9883a 	add	r20,r20,r2
    c7fc:	4deeb03a 	or	r23,r9,r23
    c800:	a5ef883a 	add	r23,r20,r23
    c804:	bc63883a 	add	r17,r23,r17
    c808:	e004927a 	slli	r2,fp,9
    c80c:	d9000117 	ldw	r4,4(sp)
    c810:	882e927a 	slli	r23,r17,9
    c814:	9022d5fa 	srli	r17,r18,23
    c818:	e038d5fa 	srli	fp,fp,23
    c81c:	1104b03a 	or	r2,r2,r4
    c820:	9024927a 	slli	r18,r18,9
    c824:	1004c03a 	cmpne	r2,r2,zero
    c828:	bc62b03a 	or	r17,r23,r17
    c82c:	1738b03a 	or	fp,r2,fp
    c830:	8880402c 	andhi	r2,r17,256
    c834:	e4a4b03a 	or	r18,fp,r18
    c838:	10000726 	beq	r2,zero,c858 <__muldf3+0x628>
    c83c:	9006d07a 	srli	r3,r18,1
    c840:	880497fa 	slli	r2,r17,31
    c844:	9480004c 	andi	r18,r18,1
    c848:	8822d07a 	srli	r17,r17,1
    c84c:	1ca4b03a 	or	r18,r3,r18
    c850:	14a4b03a 	or	r18,r2,r18
    c854:	4007883a 	mov	r3,r8
    c858:	1880ffc4 	addi	r2,r3,1023
    c85c:	0080460e 	bge	zero,r2,c978 <__muldf3+0x748>
    c860:	910001cc 	andi	r4,r18,7
    c864:	20000726 	beq	r4,zero,c884 <__muldf3+0x654>
    c868:	910003cc 	andi	r4,r18,15
    c86c:	01400104 	movi	r5,4
    c870:	21400426 	beq	r4,r5,c884 <__muldf3+0x654>
    c874:	9149883a 	add	r4,r18,r5
    c878:	24a5803a 	cmpltu	r18,r4,r18
    c87c:	8ca3883a 	add	r17,r17,r18
    c880:	2025883a 	mov	r18,r4
    c884:	8900402c 	andhi	r4,r17,256
    c888:	20000426 	beq	r4,zero,c89c <__muldf3+0x66c>
    c88c:	18810004 	addi	r2,r3,1024
    c890:	00ffc034 	movhi	r3,65280
    c894:	18ffffc4 	addi	r3,r3,-1
    c898:	88e2703a 	and	r17,r17,r3
    c89c:	00c1ff84 	movi	r3,2046
    c8a0:	18bf1316 	blt	r3,r2,c4f0 <__alt_data_end+0xfffdc4f0>
    c8a4:	882c977a 	slli	r22,r17,29
    c8a8:	9024d0fa 	srli	r18,r18,3
    c8ac:	8822927a 	slli	r17,r17,9
    c8b0:	1081ffcc 	andi	r2,r2,2047
    c8b4:	b4acb03a 	or	r22,r22,r18
    c8b8:	8820d33a 	srli	r16,r17,12
    c8bc:	3027883a 	mov	r19,r6
    c8c0:	003eba06 	br	c3ac <__alt_data_end+0xfffdc3ac>
    c8c4:	8080022c 	andhi	r2,r16,8
    c8c8:	10000926 	beq	r2,zero,c8f0 <__muldf3+0x6c0>
    c8cc:	8880022c 	andhi	r2,r17,8
    c8d0:	1000071e 	bne	r2,zero,c8f0 <__muldf3+0x6c0>
    c8d4:	00800434 	movhi	r2,16
    c8d8:	8c000234 	orhi	r16,r17,8
    c8dc:	10bfffc4 	addi	r2,r2,-1
    c8e0:	e027883a 	mov	r19,fp
    c8e4:	80a0703a 	and	r16,r16,r2
    c8e8:	902d883a 	mov	r22,r18
    c8ec:	003f1706 	br	c54c <__alt_data_end+0xfffdc54c>
    c8f0:	00800434 	movhi	r2,16
    c8f4:	84000234 	orhi	r16,r16,8
    c8f8:	10bfffc4 	addi	r2,r2,-1
    c8fc:	80a0703a 	and	r16,r16,r2
    c900:	003f1206 	br	c54c <__alt_data_end+0xfffdc54c>
    c904:	147ff604 	addi	r17,r2,-40
    c908:	3462983a 	sll	r17,r6,r17
    c90c:	0025883a 	mov	r18,zero
    c910:	003ef306 	br	c4e0 <__alt_data_end+0xfffdc4e0>
    c914:	3009883a 	mov	r4,r6
    c918:	d9400215 	stw	r5,8(sp)
    c91c:	d9800715 	stw	r6,28(sp)
    c920:	da400415 	stw	r9,16(sp)
    c924:	da800315 	stw	r10,12(sp)
    c928:	000d59c0 	call	d59c <__clzsi2>
    c92c:	10800804 	addi	r2,r2,32
    c930:	da800317 	ldw	r10,12(sp)
    c934:	da400417 	ldw	r9,16(sp)
    c938:	d9800717 	ldw	r6,28(sp)
    c93c:	d9400217 	ldw	r5,8(sp)
    c940:	003edd06 	br	c4b8 <__alt_data_end+0xfffdc4b8>
    c944:	143ff604 	addi	r16,r2,-40
    c948:	ac20983a 	sll	r16,r21,r16
    c94c:	002d883a 	mov	r22,zero
    c950:	003ec106 	br	c458 <__alt_data_end+0xfffdc458>
    c954:	d9800715 	stw	r6,28(sp)
    c958:	d9c00215 	stw	r7,8(sp)
    c95c:	da400415 	stw	r9,16(sp)
    c960:	000d59c0 	call	d59c <__clzsi2>
    c964:	10800804 	addi	r2,r2,32
    c968:	da400417 	ldw	r9,16(sp)
    c96c:	d9c00217 	ldw	r7,8(sp)
    c970:	d9800717 	ldw	r6,28(sp)
    c974:	003eae06 	br	c430 <__alt_data_end+0xfffdc430>
    c978:	00c00044 	movi	r3,1
    c97c:	1887c83a 	sub	r3,r3,r2
    c980:	01000e04 	movi	r4,56
    c984:	20fe8516 	blt	r4,r3,c39c <__alt_data_end+0xfffdc39c>
    c988:	010007c4 	movi	r4,31
    c98c:	20c01b16 	blt	r4,r3,c9fc <__muldf3+0x7cc>
    c990:	00800804 	movi	r2,32
    c994:	10c5c83a 	sub	r2,r2,r3
    c998:	888a983a 	sll	r5,r17,r2
    c99c:	90c8d83a 	srl	r4,r18,r3
    c9a0:	9084983a 	sll	r2,r18,r2
    c9a4:	88e2d83a 	srl	r17,r17,r3
    c9a8:	2906b03a 	or	r3,r5,r4
    c9ac:	1004c03a 	cmpne	r2,r2,zero
    c9b0:	1886b03a 	or	r3,r3,r2
    c9b4:	188001cc 	andi	r2,r3,7
    c9b8:	10000726 	beq	r2,zero,c9d8 <__muldf3+0x7a8>
    c9bc:	188003cc 	andi	r2,r3,15
    c9c0:	01000104 	movi	r4,4
    c9c4:	11000426 	beq	r2,r4,c9d8 <__muldf3+0x7a8>
    c9c8:	1805883a 	mov	r2,r3
    c9cc:	10c00104 	addi	r3,r2,4
    c9d0:	1885803a 	cmpltu	r2,r3,r2
    c9d4:	88a3883a 	add	r17,r17,r2
    c9d8:	8880202c 	andhi	r2,r17,128
    c9dc:	10001c26 	beq	r2,zero,ca50 <__muldf3+0x820>
    c9e0:	3027883a 	mov	r19,r6
    c9e4:	00800044 	movi	r2,1
    c9e8:	0021883a 	mov	r16,zero
    c9ec:	002d883a 	mov	r22,zero
    c9f0:	003e6e06 	br	c3ac <__alt_data_end+0xfffdc3ac>
    c9f4:	4007883a 	mov	r3,r8
    c9f8:	003f9706 	br	c858 <__alt_data_end+0xfffdc858>
    c9fc:	017ff844 	movi	r5,-31
    ca00:	2885c83a 	sub	r2,r5,r2
    ca04:	888ad83a 	srl	r5,r17,r2
    ca08:	00800804 	movi	r2,32
    ca0c:	18801a26 	beq	r3,r2,ca78 <__muldf3+0x848>
    ca10:	01001004 	movi	r4,64
    ca14:	20c7c83a 	sub	r3,r4,r3
    ca18:	88e2983a 	sll	r17,r17,r3
    ca1c:	8ca4b03a 	or	r18,r17,r18
    ca20:	9004c03a 	cmpne	r2,r18,zero
    ca24:	2884b03a 	or	r2,r5,r2
    ca28:	144001cc 	andi	r17,r2,7
    ca2c:	88000d1e 	bne	r17,zero,ca64 <__muldf3+0x834>
    ca30:	0021883a 	mov	r16,zero
    ca34:	102cd0fa 	srli	r22,r2,3
    ca38:	3027883a 	mov	r19,r6
    ca3c:	0005883a 	mov	r2,zero
    ca40:	b46cb03a 	or	r22,r22,r17
    ca44:	003e5906 	br	c3ac <__alt_data_end+0xfffdc3ac>
    ca48:	1007883a 	mov	r3,r2
    ca4c:	0023883a 	mov	r17,zero
    ca50:	8820927a 	slli	r16,r17,9
    ca54:	1805883a 	mov	r2,r3
    ca58:	8822977a 	slli	r17,r17,29
    ca5c:	8020d33a 	srli	r16,r16,12
    ca60:	003ff406 	br	ca34 <__alt_data_end+0xfffdca34>
    ca64:	10c003cc 	andi	r3,r2,15
    ca68:	01000104 	movi	r4,4
    ca6c:	193ff626 	beq	r3,r4,ca48 <__alt_data_end+0xfffdca48>
    ca70:	0023883a 	mov	r17,zero
    ca74:	003fd506 	br	c9cc <__alt_data_end+0xfffdc9cc>
    ca78:	0023883a 	mov	r17,zero
    ca7c:	003fe706 	br	ca1c <__alt_data_end+0xfffdca1c>
    ca80:	00800434 	movhi	r2,16
    ca84:	8c000234 	orhi	r16,r17,8
    ca88:	10bfffc4 	addi	r2,r2,-1
    ca8c:	3027883a 	mov	r19,r6
    ca90:	80a0703a 	and	r16,r16,r2
    ca94:	902d883a 	mov	r22,r18
    ca98:	003eac06 	br	c54c <__alt_data_end+0xfffdc54c>

0000ca9c <__subdf3>:
    ca9c:	02000434 	movhi	r8,16
    caa0:	423fffc4 	addi	r8,r8,-1
    caa4:	defffb04 	addi	sp,sp,-20
    caa8:	2a14703a 	and	r10,r5,r8
    caac:	3812d53a 	srli	r9,r7,20
    cab0:	3a10703a 	and	r8,r7,r8
    cab4:	2006d77a 	srli	r3,r4,29
    cab8:	3004d77a 	srli	r2,r6,29
    cabc:	dc000015 	stw	r16,0(sp)
    cac0:	501490fa 	slli	r10,r10,3
    cac4:	2820d53a 	srli	r16,r5,20
    cac8:	401090fa 	slli	r8,r8,3
    cacc:	dc800215 	stw	r18,8(sp)
    cad0:	dc400115 	stw	r17,4(sp)
    cad4:	dfc00415 	stw	ra,16(sp)
    cad8:	202290fa 	slli	r17,r4,3
    cadc:	dcc00315 	stw	r19,12(sp)
    cae0:	4a41ffcc 	andi	r9,r9,2047
    cae4:	0101ffc4 	movi	r4,2047
    cae8:	2824d7fa 	srli	r18,r5,31
    caec:	8401ffcc 	andi	r16,r16,2047
    caf0:	50c6b03a 	or	r3,r10,r3
    caf4:	380ed7fa 	srli	r7,r7,31
    caf8:	408ab03a 	or	r5,r8,r2
    cafc:	300c90fa 	slli	r6,r6,3
    cb00:	49009626 	beq	r9,r4,cd5c <__subdf3+0x2c0>
    cb04:	39c0005c 	xori	r7,r7,1
    cb08:	8245c83a 	sub	r2,r16,r9
    cb0c:	3c807426 	beq	r7,r18,cce0 <__subdf3+0x244>
    cb10:	0080af0e 	bge	zero,r2,cdd0 <__subdf3+0x334>
    cb14:	48002a1e 	bne	r9,zero,cbc0 <__subdf3+0x124>
    cb18:	2988b03a 	or	r4,r5,r6
    cb1c:	20009a1e 	bne	r4,zero,cd88 <__subdf3+0x2ec>
    cb20:	888001cc 	andi	r2,r17,7
    cb24:	10000726 	beq	r2,zero,cb44 <__subdf3+0xa8>
    cb28:	888003cc 	andi	r2,r17,15
    cb2c:	01000104 	movi	r4,4
    cb30:	11000426 	beq	r2,r4,cb44 <__subdf3+0xa8>
    cb34:	890b883a 	add	r5,r17,r4
    cb38:	2c63803a 	cmpltu	r17,r5,r17
    cb3c:	1c47883a 	add	r3,r3,r17
    cb40:	2823883a 	mov	r17,r5
    cb44:	1880202c 	andhi	r2,r3,128
    cb48:	10005926 	beq	r2,zero,ccb0 <__subdf3+0x214>
    cb4c:	84000044 	addi	r16,r16,1
    cb50:	0081ffc4 	movi	r2,2047
    cb54:	8080be26 	beq	r16,r2,ce50 <__subdf3+0x3b4>
    cb58:	017fe034 	movhi	r5,65408
    cb5c:	297fffc4 	addi	r5,r5,-1
    cb60:	1946703a 	and	r3,r3,r5
    cb64:	1804977a 	slli	r2,r3,29
    cb68:	1806927a 	slli	r3,r3,9
    cb6c:	8822d0fa 	srli	r17,r17,3
    cb70:	8401ffcc 	andi	r16,r16,2047
    cb74:	180ad33a 	srli	r5,r3,12
    cb78:	9100004c 	andi	r4,r18,1
    cb7c:	1444b03a 	or	r2,r2,r17
    cb80:	80c1ffcc 	andi	r3,r16,2047
    cb84:	1820953a 	slli	r16,r3,20
    cb88:	20c03fcc 	andi	r3,r4,255
    cb8c:	180897fa 	slli	r4,r3,31
    cb90:	00c00434 	movhi	r3,16
    cb94:	18ffffc4 	addi	r3,r3,-1
    cb98:	28c6703a 	and	r3,r5,r3
    cb9c:	1c06b03a 	or	r3,r3,r16
    cba0:	1906b03a 	or	r3,r3,r4
    cba4:	dfc00417 	ldw	ra,16(sp)
    cba8:	dcc00317 	ldw	r19,12(sp)
    cbac:	dc800217 	ldw	r18,8(sp)
    cbb0:	dc400117 	ldw	r17,4(sp)
    cbb4:	dc000017 	ldw	r16,0(sp)
    cbb8:	dec00504 	addi	sp,sp,20
    cbbc:	f800283a 	ret
    cbc0:	0101ffc4 	movi	r4,2047
    cbc4:	813fd626 	beq	r16,r4,cb20 <__alt_data_end+0xfffdcb20>
    cbc8:	29402034 	orhi	r5,r5,128
    cbcc:	01000e04 	movi	r4,56
    cbd0:	2080a316 	blt	r4,r2,ce60 <__subdf3+0x3c4>
    cbd4:	010007c4 	movi	r4,31
    cbd8:	2080c616 	blt	r4,r2,cef4 <__subdf3+0x458>
    cbdc:	01000804 	movi	r4,32
    cbe0:	2089c83a 	sub	r4,r4,r2
    cbe4:	2910983a 	sll	r8,r5,r4
    cbe8:	308ed83a 	srl	r7,r6,r2
    cbec:	3108983a 	sll	r4,r6,r4
    cbf0:	2884d83a 	srl	r2,r5,r2
    cbf4:	41ccb03a 	or	r6,r8,r7
    cbf8:	2008c03a 	cmpne	r4,r4,zero
    cbfc:	310cb03a 	or	r6,r6,r4
    cc00:	898dc83a 	sub	r6,r17,r6
    cc04:	89a3803a 	cmpltu	r17,r17,r6
    cc08:	1887c83a 	sub	r3,r3,r2
    cc0c:	1c47c83a 	sub	r3,r3,r17
    cc10:	3023883a 	mov	r17,r6
    cc14:	1880202c 	andhi	r2,r3,128
    cc18:	10002326 	beq	r2,zero,cca8 <__subdf3+0x20c>
    cc1c:	04c02034 	movhi	r19,128
    cc20:	9cffffc4 	addi	r19,r19,-1
    cc24:	1ce6703a 	and	r19,r3,r19
    cc28:	98007a26 	beq	r19,zero,ce14 <__subdf3+0x378>
    cc2c:	9809883a 	mov	r4,r19
    cc30:	000d59c0 	call	d59c <__clzsi2>
    cc34:	113ffe04 	addi	r4,r2,-8
    cc38:	00c007c4 	movi	r3,31
    cc3c:	19007b16 	blt	r3,r4,ce2c <__subdf3+0x390>
    cc40:	00800804 	movi	r2,32
    cc44:	1105c83a 	sub	r2,r2,r4
    cc48:	8884d83a 	srl	r2,r17,r2
    cc4c:	9906983a 	sll	r3,r19,r4
    cc50:	8922983a 	sll	r17,r17,r4
    cc54:	10c4b03a 	or	r2,r2,r3
    cc58:	24007816 	blt	r4,r16,ce3c <__subdf3+0x3a0>
    cc5c:	2421c83a 	sub	r16,r4,r16
    cc60:	80c00044 	addi	r3,r16,1
    cc64:	010007c4 	movi	r4,31
    cc68:	20c09516 	blt	r4,r3,cec0 <__subdf3+0x424>
    cc6c:	01400804 	movi	r5,32
    cc70:	28cbc83a 	sub	r5,r5,r3
    cc74:	88c8d83a 	srl	r4,r17,r3
    cc78:	8962983a 	sll	r17,r17,r5
    cc7c:	114a983a 	sll	r5,r2,r5
    cc80:	10c6d83a 	srl	r3,r2,r3
    cc84:	8804c03a 	cmpne	r2,r17,zero
    cc88:	290ab03a 	or	r5,r5,r4
    cc8c:	28a2b03a 	or	r17,r5,r2
    cc90:	0021883a 	mov	r16,zero
    cc94:	003fa206 	br	cb20 <__alt_data_end+0xfffdcb20>
    cc98:	2090b03a 	or	r8,r4,r2
    cc9c:	40018e26 	beq	r8,zero,d2d8 <__subdf3+0x83c>
    cca0:	1007883a 	mov	r3,r2
    cca4:	2023883a 	mov	r17,r4
    cca8:	888001cc 	andi	r2,r17,7
    ccac:	103f9e1e 	bne	r2,zero,cb28 <__alt_data_end+0xfffdcb28>
    ccb0:	1804977a 	slli	r2,r3,29
    ccb4:	8822d0fa 	srli	r17,r17,3
    ccb8:	1810d0fa 	srli	r8,r3,3
    ccbc:	9100004c 	andi	r4,r18,1
    ccc0:	1444b03a 	or	r2,r2,r17
    ccc4:	00c1ffc4 	movi	r3,2047
    ccc8:	80c02826 	beq	r16,r3,cd6c <__subdf3+0x2d0>
    cccc:	01400434 	movhi	r5,16
    ccd0:	297fffc4 	addi	r5,r5,-1
    ccd4:	80e0703a 	and	r16,r16,r3
    ccd8:	414a703a 	and	r5,r8,r5
    ccdc:	003fa806 	br	cb80 <__alt_data_end+0xfffdcb80>
    cce0:	0080630e 	bge	zero,r2,ce70 <__subdf3+0x3d4>
    cce4:	48003026 	beq	r9,zero,cda8 <__subdf3+0x30c>
    cce8:	0101ffc4 	movi	r4,2047
    ccec:	813f8c26 	beq	r16,r4,cb20 <__alt_data_end+0xfffdcb20>
    ccf0:	29402034 	orhi	r5,r5,128
    ccf4:	01000e04 	movi	r4,56
    ccf8:	2080a90e 	bge	r4,r2,cfa0 <__subdf3+0x504>
    ccfc:	298cb03a 	or	r6,r5,r6
    cd00:	3012c03a 	cmpne	r9,r6,zero
    cd04:	0005883a 	mov	r2,zero
    cd08:	4c53883a 	add	r9,r9,r17
    cd0c:	4c63803a 	cmpltu	r17,r9,r17
    cd10:	10c7883a 	add	r3,r2,r3
    cd14:	88c7883a 	add	r3,r17,r3
    cd18:	4823883a 	mov	r17,r9
    cd1c:	1880202c 	andhi	r2,r3,128
    cd20:	1000d026 	beq	r2,zero,d064 <__subdf3+0x5c8>
    cd24:	84000044 	addi	r16,r16,1
    cd28:	0081ffc4 	movi	r2,2047
    cd2c:	8080fe26 	beq	r16,r2,d128 <__subdf3+0x68c>
    cd30:	00bfe034 	movhi	r2,65408
    cd34:	10bfffc4 	addi	r2,r2,-1
    cd38:	1886703a 	and	r3,r3,r2
    cd3c:	880ad07a 	srli	r5,r17,1
    cd40:	180497fa 	slli	r2,r3,31
    cd44:	8900004c 	andi	r4,r17,1
    cd48:	2922b03a 	or	r17,r5,r4
    cd4c:	1806d07a 	srli	r3,r3,1
    cd50:	1462b03a 	or	r17,r2,r17
    cd54:	3825883a 	mov	r18,r7
    cd58:	003f7106 	br	cb20 <__alt_data_end+0xfffdcb20>
    cd5c:	2984b03a 	or	r2,r5,r6
    cd60:	103f6826 	beq	r2,zero,cb04 <__alt_data_end+0xfffdcb04>
    cd64:	39c03fcc 	andi	r7,r7,255
    cd68:	003f6706 	br	cb08 <__alt_data_end+0xfffdcb08>
    cd6c:	4086b03a 	or	r3,r8,r2
    cd70:	18015226 	beq	r3,zero,d2bc <__subdf3+0x820>
    cd74:	00c00434 	movhi	r3,16
    cd78:	41400234 	orhi	r5,r8,8
    cd7c:	18ffffc4 	addi	r3,r3,-1
    cd80:	28ca703a 	and	r5,r5,r3
    cd84:	003f7e06 	br	cb80 <__alt_data_end+0xfffdcb80>
    cd88:	10bfffc4 	addi	r2,r2,-1
    cd8c:	1000491e 	bne	r2,zero,ceb4 <__subdf3+0x418>
    cd90:	898fc83a 	sub	r7,r17,r6
    cd94:	89e3803a 	cmpltu	r17,r17,r7
    cd98:	1947c83a 	sub	r3,r3,r5
    cd9c:	1c47c83a 	sub	r3,r3,r17
    cda0:	3823883a 	mov	r17,r7
    cda4:	003f9b06 	br	cc14 <__alt_data_end+0xfffdcc14>
    cda8:	2988b03a 	or	r4,r5,r6
    cdac:	203f5c26 	beq	r4,zero,cb20 <__alt_data_end+0xfffdcb20>
    cdb0:	10bfffc4 	addi	r2,r2,-1
    cdb4:	1000931e 	bne	r2,zero,d004 <__subdf3+0x568>
    cdb8:	898d883a 	add	r6,r17,r6
    cdbc:	3463803a 	cmpltu	r17,r6,r17
    cdc0:	1947883a 	add	r3,r3,r5
    cdc4:	88c7883a 	add	r3,r17,r3
    cdc8:	3023883a 	mov	r17,r6
    cdcc:	003fd306 	br	cd1c <__alt_data_end+0xfffdcd1c>
    cdd0:	1000541e 	bne	r2,zero,cf24 <__subdf3+0x488>
    cdd4:	80800044 	addi	r2,r16,1
    cdd8:	1081ffcc 	andi	r2,r2,2047
    cddc:	01000044 	movi	r4,1
    cde0:	2080a20e 	bge	r4,r2,d06c <__subdf3+0x5d0>
    cde4:	8989c83a 	sub	r4,r17,r6
    cde8:	8905803a 	cmpltu	r2,r17,r4
    cdec:	1967c83a 	sub	r19,r3,r5
    cdf0:	98a7c83a 	sub	r19,r19,r2
    cdf4:	9880202c 	andhi	r2,r19,128
    cdf8:	10006326 	beq	r2,zero,cf88 <__subdf3+0x4ec>
    cdfc:	3463c83a 	sub	r17,r6,r17
    ce00:	28c7c83a 	sub	r3,r5,r3
    ce04:	344d803a 	cmpltu	r6,r6,r17
    ce08:	19a7c83a 	sub	r19,r3,r6
    ce0c:	3825883a 	mov	r18,r7
    ce10:	983f861e 	bne	r19,zero,cc2c <__alt_data_end+0xfffdcc2c>
    ce14:	8809883a 	mov	r4,r17
    ce18:	000d59c0 	call	d59c <__clzsi2>
    ce1c:	10800804 	addi	r2,r2,32
    ce20:	113ffe04 	addi	r4,r2,-8
    ce24:	00c007c4 	movi	r3,31
    ce28:	193f850e 	bge	r3,r4,cc40 <__alt_data_end+0xfffdcc40>
    ce2c:	10bff604 	addi	r2,r2,-40
    ce30:	8884983a 	sll	r2,r17,r2
    ce34:	0023883a 	mov	r17,zero
    ce38:	243f880e 	bge	r4,r16,cc5c <__alt_data_end+0xfffdcc5c>
    ce3c:	00ffe034 	movhi	r3,65408
    ce40:	18ffffc4 	addi	r3,r3,-1
    ce44:	8121c83a 	sub	r16,r16,r4
    ce48:	10c6703a 	and	r3,r2,r3
    ce4c:	003f3406 	br	cb20 <__alt_data_end+0xfffdcb20>
    ce50:	9100004c 	andi	r4,r18,1
    ce54:	000b883a 	mov	r5,zero
    ce58:	0005883a 	mov	r2,zero
    ce5c:	003f4806 	br	cb80 <__alt_data_end+0xfffdcb80>
    ce60:	298cb03a 	or	r6,r5,r6
    ce64:	300cc03a 	cmpne	r6,r6,zero
    ce68:	0005883a 	mov	r2,zero
    ce6c:	003f6406 	br	cc00 <__alt_data_end+0xfffdcc00>
    ce70:	10009a1e 	bne	r2,zero,d0dc <__subdf3+0x640>
    ce74:	82400044 	addi	r9,r16,1
    ce78:	4881ffcc 	andi	r2,r9,2047
    ce7c:	02800044 	movi	r10,1
    ce80:	5080670e 	bge	r10,r2,d020 <__subdf3+0x584>
    ce84:	0081ffc4 	movi	r2,2047
    ce88:	4880af26 	beq	r9,r2,d148 <__subdf3+0x6ac>
    ce8c:	898d883a 	add	r6,r17,r6
    ce90:	1945883a 	add	r2,r3,r5
    ce94:	3447803a 	cmpltu	r3,r6,r17
    ce98:	1887883a 	add	r3,r3,r2
    ce9c:	182297fa 	slli	r17,r3,31
    cea0:	300cd07a 	srli	r6,r6,1
    cea4:	1806d07a 	srli	r3,r3,1
    cea8:	4821883a 	mov	r16,r9
    ceac:	89a2b03a 	or	r17,r17,r6
    ceb0:	003f1b06 	br	cb20 <__alt_data_end+0xfffdcb20>
    ceb4:	0101ffc4 	movi	r4,2047
    ceb8:	813f441e 	bne	r16,r4,cbcc <__alt_data_end+0xfffdcbcc>
    cebc:	003f1806 	br	cb20 <__alt_data_end+0xfffdcb20>
    cec0:	843ff844 	addi	r16,r16,-31
    cec4:	01400804 	movi	r5,32
    cec8:	1408d83a 	srl	r4,r2,r16
    cecc:	19405026 	beq	r3,r5,d010 <__subdf3+0x574>
    ced0:	01401004 	movi	r5,64
    ced4:	28c7c83a 	sub	r3,r5,r3
    ced8:	10c4983a 	sll	r2,r2,r3
    cedc:	88a2b03a 	or	r17,r17,r2
    cee0:	8822c03a 	cmpne	r17,r17,zero
    cee4:	2462b03a 	or	r17,r4,r17
    cee8:	0007883a 	mov	r3,zero
    ceec:	0021883a 	mov	r16,zero
    cef0:	003f6d06 	br	cca8 <__alt_data_end+0xfffdcca8>
    cef4:	11fff804 	addi	r7,r2,-32
    cef8:	01000804 	movi	r4,32
    cefc:	29ced83a 	srl	r7,r5,r7
    cf00:	11004526 	beq	r2,r4,d018 <__subdf3+0x57c>
    cf04:	01001004 	movi	r4,64
    cf08:	2089c83a 	sub	r4,r4,r2
    cf0c:	2904983a 	sll	r2,r5,r4
    cf10:	118cb03a 	or	r6,r2,r6
    cf14:	300cc03a 	cmpne	r6,r6,zero
    cf18:	398cb03a 	or	r6,r7,r6
    cf1c:	0005883a 	mov	r2,zero
    cf20:	003f3706 	br	cc00 <__alt_data_end+0xfffdcc00>
    cf24:	80002a26 	beq	r16,zero,cfd0 <__subdf3+0x534>
    cf28:	0101ffc4 	movi	r4,2047
    cf2c:	49006626 	beq	r9,r4,d0c8 <__subdf3+0x62c>
    cf30:	0085c83a 	sub	r2,zero,r2
    cf34:	18c02034 	orhi	r3,r3,128
    cf38:	01000e04 	movi	r4,56
    cf3c:	20807e16 	blt	r4,r2,d138 <__subdf3+0x69c>
    cf40:	010007c4 	movi	r4,31
    cf44:	2080e716 	blt	r4,r2,d2e4 <__subdf3+0x848>
    cf48:	01000804 	movi	r4,32
    cf4c:	2089c83a 	sub	r4,r4,r2
    cf50:	1914983a 	sll	r10,r3,r4
    cf54:	8890d83a 	srl	r8,r17,r2
    cf58:	8908983a 	sll	r4,r17,r4
    cf5c:	1884d83a 	srl	r2,r3,r2
    cf60:	5222b03a 	or	r17,r10,r8
    cf64:	2006c03a 	cmpne	r3,r4,zero
    cf68:	88e2b03a 	or	r17,r17,r3
    cf6c:	3463c83a 	sub	r17,r6,r17
    cf70:	2885c83a 	sub	r2,r5,r2
    cf74:	344d803a 	cmpltu	r6,r6,r17
    cf78:	1187c83a 	sub	r3,r2,r6
    cf7c:	4821883a 	mov	r16,r9
    cf80:	3825883a 	mov	r18,r7
    cf84:	003f2306 	br	cc14 <__alt_data_end+0xfffdcc14>
    cf88:	24d0b03a 	or	r8,r4,r19
    cf8c:	40001b1e 	bne	r8,zero,cffc <__subdf3+0x560>
    cf90:	0005883a 	mov	r2,zero
    cf94:	0009883a 	mov	r4,zero
    cf98:	0021883a 	mov	r16,zero
    cf9c:	003f4906 	br	ccc4 <__alt_data_end+0xfffdccc4>
    cfa0:	010007c4 	movi	r4,31
    cfa4:	20803a16 	blt	r4,r2,d090 <__subdf3+0x5f4>
    cfa8:	01000804 	movi	r4,32
    cfac:	2089c83a 	sub	r4,r4,r2
    cfb0:	2912983a 	sll	r9,r5,r4
    cfb4:	3090d83a 	srl	r8,r6,r2
    cfb8:	3108983a 	sll	r4,r6,r4
    cfbc:	2884d83a 	srl	r2,r5,r2
    cfc0:	4a12b03a 	or	r9,r9,r8
    cfc4:	2008c03a 	cmpne	r4,r4,zero
    cfc8:	4912b03a 	or	r9,r9,r4
    cfcc:	003f4e06 	br	cd08 <__alt_data_end+0xfffdcd08>
    cfd0:	1c48b03a 	or	r4,r3,r17
    cfd4:	20003c26 	beq	r4,zero,d0c8 <__subdf3+0x62c>
    cfd8:	0084303a 	nor	r2,zero,r2
    cfdc:	1000381e 	bne	r2,zero,d0c0 <__subdf3+0x624>
    cfe0:	3463c83a 	sub	r17,r6,r17
    cfe4:	28c5c83a 	sub	r2,r5,r3
    cfe8:	344d803a 	cmpltu	r6,r6,r17
    cfec:	1187c83a 	sub	r3,r2,r6
    cff0:	4821883a 	mov	r16,r9
    cff4:	3825883a 	mov	r18,r7
    cff8:	003f0606 	br	cc14 <__alt_data_end+0xfffdcc14>
    cffc:	2023883a 	mov	r17,r4
    d000:	003f0906 	br	cc28 <__alt_data_end+0xfffdcc28>
    d004:	0101ffc4 	movi	r4,2047
    d008:	813f3a1e 	bne	r16,r4,ccf4 <__alt_data_end+0xfffdccf4>
    d00c:	003ec406 	br	cb20 <__alt_data_end+0xfffdcb20>
    d010:	0005883a 	mov	r2,zero
    d014:	003fb106 	br	cedc <__alt_data_end+0xfffdcedc>
    d018:	0005883a 	mov	r2,zero
    d01c:	003fbc06 	br	cf10 <__alt_data_end+0xfffdcf10>
    d020:	1c44b03a 	or	r2,r3,r17
    d024:	80008e1e 	bne	r16,zero,d260 <__subdf3+0x7c4>
    d028:	1000c826 	beq	r2,zero,d34c <__subdf3+0x8b0>
    d02c:	2984b03a 	or	r2,r5,r6
    d030:	103ebb26 	beq	r2,zero,cb20 <__alt_data_end+0xfffdcb20>
    d034:	8989883a 	add	r4,r17,r6
    d038:	1945883a 	add	r2,r3,r5
    d03c:	2447803a 	cmpltu	r3,r4,r17
    d040:	1887883a 	add	r3,r3,r2
    d044:	1880202c 	andhi	r2,r3,128
    d048:	2023883a 	mov	r17,r4
    d04c:	103f1626 	beq	r2,zero,cca8 <__alt_data_end+0xfffdcca8>
    d050:	00bfe034 	movhi	r2,65408
    d054:	10bfffc4 	addi	r2,r2,-1
    d058:	5021883a 	mov	r16,r10
    d05c:	1886703a 	and	r3,r3,r2
    d060:	003eaf06 	br	cb20 <__alt_data_end+0xfffdcb20>
    d064:	3825883a 	mov	r18,r7
    d068:	003f0f06 	br	cca8 <__alt_data_end+0xfffdcca8>
    d06c:	1c44b03a 	or	r2,r3,r17
    d070:	8000251e 	bne	r16,zero,d108 <__subdf3+0x66c>
    d074:	1000661e 	bne	r2,zero,d210 <__subdf3+0x774>
    d078:	2990b03a 	or	r8,r5,r6
    d07c:	40009626 	beq	r8,zero,d2d8 <__subdf3+0x83c>
    d080:	2807883a 	mov	r3,r5
    d084:	3023883a 	mov	r17,r6
    d088:	3825883a 	mov	r18,r7
    d08c:	003ea406 	br	cb20 <__alt_data_end+0xfffdcb20>
    d090:	127ff804 	addi	r9,r2,-32
    d094:	01000804 	movi	r4,32
    d098:	2a52d83a 	srl	r9,r5,r9
    d09c:	11008c26 	beq	r2,r4,d2d0 <__subdf3+0x834>
    d0a0:	01001004 	movi	r4,64
    d0a4:	2085c83a 	sub	r2,r4,r2
    d0a8:	2884983a 	sll	r2,r5,r2
    d0ac:	118cb03a 	or	r6,r2,r6
    d0b0:	300cc03a 	cmpne	r6,r6,zero
    d0b4:	4992b03a 	or	r9,r9,r6
    d0b8:	0005883a 	mov	r2,zero
    d0bc:	003f1206 	br	cd08 <__alt_data_end+0xfffdcd08>
    d0c0:	0101ffc4 	movi	r4,2047
    d0c4:	493f9c1e 	bne	r9,r4,cf38 <__alt_data_end+0xfffdcf38>
    d0c8:	2807883a 	mov	r3,r5
    d0cc:	3023883a 	mov	r17,r6
    d0d0:	4821883a 	mov	r16,r9
    d0d4:	3825883a 	mov	r18,r7
    d0d8:	003e9106 	br	cb20 <__alt_data_end+0xfffdcb20>
    d0dc:	80001f1e 	bne	r16,zero,d15c <__subdf3+0x6c0>
    d0e0:	1c48b03a 	or	r4,r3,r17
    d0e4:	20005a26 	beq	r4,zero,d250 <__subdf3+0x7b4>
    d0e8:	0084303a 	nor	r2,zero,r2
    d0ec:	1000561e 	bne	r2,zero,d248 <__subdf3+0x7ac>
    d0f0:	89a3883a 	add	r17,r17,r6
    d0f4:	1945883a 	add	r2,r3,r5
    d0f8:	898d803a 	cmpltu	r6,r17,r6
    d0fc:	3087883a 	add	r3,r6,r2
    d100:	4821883a 	mov	r16,r9
    d104:	003f0506 	br	cd1c <__alt_data_end+0xfffdcd1c>
    d108:	10002b1e 	bne	r2,zero,d1b8 <__subdf3+0x71c>
    d10c:	2984b03a 	or	r2,r5,r6
    d110:	10008026 	beq	r2,zero,d314 <__subdf3+0x878>
    d114:	2807883a 	mov	r3,r5
    d118:	3023883a 	mov	r17,r6
    d11c:	3825883a 	mov	r18,r7
    d120:	0401ffc4 	movi	r16,2047
    d124:	003e7e06 	br	cb20 <__alt_data_end+0xfffdcb20>
    d128:	3809883a 	mov	r4,r7
    d12c:	0011883a 	mov	r8,zero
    d130:	0005883a 	mov	r2,zero
    d134:	003ee306 	br	ccc4 <__alt_data_end+0xfffdccc4>
    d138:	1c62b03a 	or	r17,r3,r17
    d13c:	8822c03a 	cmpne	r17,r17,zero
    d140:	0005883a 	mov	r2,zero
    d144:	003f8906 	br	cf6c <__alt_data_end+0xfffdcf6c>
    d148:	3809883a 	mov	r4,r7
    d14c:	4821883a 	mov	r16,r9
    d150:	0011883a 	mov	r8,zero
    d154:	0005883a 	mov	r2,zero
    d158:	003eda06 	br	ccc4 <__alt_data_end+0xfffdccc4>
    d15c:	0101ffc4 	movi	r4,2047
    d160:	49003b26 	beq	r9,r4,d250 <__subdf3+0x7b4>
    d164:	0085c83a 	sub	r2,zero,r2
    d168:	18c02034 	orhi	r3,r3,128
    d16c:	01000e04 	movi	r4,56
    d170:	20806e16 	blt	r4,r2,d32c <__subdf3+0x890>
    d174:	010007c4 	movi	r4,31
    d178:	20807716 	blt	r4,r2,d358 <__subdf3+0x8bc>
    d17c:	01000804 	movi	r4,32
    d180:	2089c83a 	sub	r4,r4,r2
    d184:	1914983a 	sll	r10,r3,r4
    d188:	8890d83a 	srl	r8,r17,r2
    d18c:	8908983a 	sll	r4,r17,r4
    d190:	1884d83a 	srl	r2,r3,r2
    d194:	5222b03a 	or	r17,r10,r8
    d198:	2006c03a 	cmpne	r3,r4,zero
    d19c:	88e2b03a 	or	r17,r17,r3
    d1a0:	89a3883a 	add	r17,r17,r6
    d1a4:	1145883a 	add	r2,r2,r5
    d1a8:	898d803a 	cmpltu	r6,r17,r6
    d1ac:	3087883a 	add	r3,r6,r2
    d1b0:	4821883a 	mov	r16,r9
    d1b4:	003ed906 	br	cd1c <__alt_data_end+0xfffdcd1c>
    d1b8:	2984b03a 	or	r2,r5,r6
    d1bc:	10004226 	beq	r2,zero,d2c8 <__subdf3+0x82c>
    d1c0:	1808d0fa 	srli	r4,r3,3
    d1c4:	8822d0fa 	srli	r17,r17,3
    d1c8:	1806977a 	slli	r3,r3,29
    d1cc:	2080022c 	andhi	r2,r4,8
    d1d0:	1c62b03a 	or	r17,r3,r17
    d1d4:	10000826 	beq	r2,zero,d1f8 <__subdf3+0x75c>
    d1d8:	2812d0fa 	srli	r9,r5,3
    d1dc:	4880022c 	andhi	r2,r9,8
    d1e0:	1000051e 	bne	r2,zero,d1f8 <__subdf3+0x75c>
    d1e4:	300cd0fa 	srli	r6,r6,3
    d1e8:	2804977a 	slli	r2,r5,29
    d1ec:	4809883a 	mov	r4,r9
    d1f0:	3825883a 	mov	r18,r7
    d1f4:	11a2b03a 	or	r17,r2,r6
    d1f8:	8806d77a 	srli	r3,r17,29
    d1fc:	200890fa 	slli	r4,r4,3
    d200:	882290fa 	slli	r17,r17,3
    d204:	0401ffc4 	movi	r16,2047
    d208:	1906b03a 	or	r3,r3,r4
    d20c:	003e4406 	br	cb20 <__alt_data_end+0xfffdcb20>
    d210:	2984b03a 	or	r2,r5,r6
    d214:	103e4226 	beq	r2,zero,cb20 <__alt_data_end+0xfffdcb20>
    d218:	8989c83a 	sub	r4,r17,r6
    d21c:	8911803a 	cmpltu	r8,r17,r4
    d220:	1945c83a 	sub	r2,r3,r5
    d224:	1205c83a 	sub	r2,r2,r8
    d228:	1200202c 	andhi	r8,r2,128
    d22c:	403e9a26 	beq	r8,zero,cc98 <__alt_data_end+0xfffdcc98>
    d230:	3463c83a 	sub	r17,r6,r17
    d234:	28c5c83a 	sub	r2,r5,r3
    d238:	344d803a 	cmpltu	r6,r6,r17
    d23c:	1187c83a 	sub	r3,r2,r6
    d240:	3825883a 	mov	r18,r7
    d244:	003e3606 	br	cb20 <__alt_data_end+0xfffdcb20>
    d248:	0101ffc4 	movi	r4,2047
    d24c:	493fc71e 	bne	r9,r4,d16c <__alt_data_end+0xfffdd16c>
    d250:	2807883a 	mov	r3,r5
    d254:	3023883a 	mov	r17,r6
    d258:	4821883a 	mov	r16,r9
    d25c:	003e3006 	br	cb20 <__alt_data_end+0xfffdcb20>
    d260:	10003626 	beq	r2,zero,d33c <__subdf3+0x8a0>
    d264:	2984b03a 	or	r2,r5,r6
    d268:	10001726 	beq	r2,zero,d2c8 <__subdf3+0x82c>
    d26c:	1808d0fa 	srli	r4,r3,3
    d270:	8822d0fa 	srli	r17,r17,3
    d274:	1806977a 	slli	r3,r3,29
    d278:	2080022c 	andhi	r2,r4,8
    d27c:	1c62b03a 	or	r17,r3,r17
    d280:	10000726 	beq	r2,zero,d2a0 <__subdf3+0x804>
    d284:	2812d0fa 	srli	r9,r5,3
    d288:	4880022c 	andhi	r2,r9,8
    d28c:	1000041e 	bne	r2,zero,d2a0 <__subdf3+0x804>
    d290:	300cd0fa 	srli	r6,r6,3
    d294:	2804977a 	slli	r2,r5,29
    d298:	4809883a 	mov	r4,r9
    d29c:	11a2b03a 	or	r17,r2,r6
    d2a0:	8806d77a 	srli	r3,r17,29
    d2a4:	200890fa 	slli	r4,r4,3
    d2a8:	882290fa 	slli	r17,r17,3
    d2ac:	3825883a 	mov	r18,r7
    d2b0:	1906b03a 	or	r3,r3,r4
    d2b4:	0401ffc4 	movi	r16,2047
    d2b8:	003e1906 	br	cb20 <__alt_data_end+0xfffdcb20>
    d2bc:	000b883a 	mov	r5,zero
    d2c0:	0005883a 	mov	r2,zero
    d2c4:	003e2e06 	br	cb80 <__alt_data_end+0xfffdcb80>
    d2c8:	0401ffc4 	movi	r16,2047
    d2cc:	003e1406 	br	cb20 <__alt_data_end+0xfffdcb20>
    d2d0:	0005883a 	mov	r2,zero
    d2d4:	003f7506 	br	d0ac <__alt_data_end+0xfffdd0ac>
    d2d8:	0005883a 	mov	r2,zero
    d2dc:	0009883a 	mov	r4,zero
    d2e0:	003e7806 	br	ccc4 <__alt_data_end+0xfffdccc4>
    d2e4:	123ff804 	addi	r8,r2,-32
    d2e8:	01000804 	movi	r4,32
    d2ec:	1a10d83a 	srl	r8,r3,r8
    d2f0:	11002526 	beq	r2,r4,d388 <__subdf3+0x8ec>
    d2f4:	01001004 	movi	r4,64
    d2f8:	2085c83a 	sub	r2,r4,r2
    d2fc:	1884983a 	sll	r2,r3,r2
    d300:	1444b03a 	or	r2,r2,r17
    d304:	1004c03a 	cmpne	r2,r2,zero
    d308:	40a2b03a 	or	r17,r8,r2
    d30c:	0005883a 	mov	r2,zero
    d310:	003f1606 	br	cf6c <__alt_data_end+0xfffdcf6c>
    d314:	02000434 	movhi	r8,16
    d318:	0009883a 	mov	r4,zero
    d31c:	423fffc4 	addi	r8,r8,-1
    d320:	00bfffc4 	movi	r2,-1
    d324:	0401ffc4 	movi	r16,2047
    d328:	003e6606 	br	ccc4 <__alt_data_end+0xfffdccc4>
    d32c:	1c62b03a 	or	r17,r3,r17
    d330:	8822c03a 	cmpne	r17,r17,zero
    d334:	0005883a 	mov	r2,zero
    d338:	003f9906 	br	d1a0 <__alt_data_end+0xfffdd1a0>
    d33c:	2807883a 	mov	r3,r5
    d340:	3023883a 	mov	r17,r6
    d344:	0401ffc4 	movi	r16,2047
    d348:	003df506 	br	cb20 <__alt_data_end+0xfffdcb20>
    d34c:	2807883a 	mov	r3,r5
    d350:	3023883a 	mov	r17,r6
    d354:	003df206 	br	cb20 <__alt_data_end+0xfffdcb20>
    d358:	123ff804 	addi	r8,r2,-32
    d35c:	01000804 	movi	r4,32
    d360:	1a10d83a 	srl	r8,r3,r8
    d364:	11000a26 	beq	r2,r4,d390 <__subdf3+0x8f4>
    d368:	01001004 	movi	r4,64
    d36c:	2085c83a 	sub	r2,r4,r2
    d370:	1884983a 	sll	r2,r3,r2
    d374:	1444b03a 	or	r2,r2,r17
    d378:	1004c03a 	cmpne	r2,r2,zero
    d37c:	40a2b03a 	or	r17,r8,r2
    d380:	0005883a 	mov	r2,zero
    d384:	003f8606 	br	d1a0 <__alt_data_end+0xfffdd1a0>
    d388:	0005883a 	mov	r2,zero
    d38c:	003fdc06 	br	d300 <__alt_data_end+0xfffdd300>
    d390:	0005883a 	mov	r2,zero
    d394:	003ff706 	br	d374 <__alt_data_end+0xfffdd374>

0000d398 <__fixdfsi>:
    d398:	280cd53a 	srli	r6,r5,20
    d39c:	00c00434 	movhi	r3,16
    d3a0:	18ffffc4 	addi	r3,r3,-1
    d3a4:	3181ffcc 	andi	r6,r6,2047
    d3a8:	01c0ff84 	movi	r7,1022
    d3ac:	28c6703a 	and	r3,r5,r3
    d3b0:	280ad7fa 	srli	r5,r5,31
    d3b4:	3980120e 	bge	r7,r6,d400 <__fixdfsi+0x68>
    d3b8:	00810744 	movi	r2,1053
    d3bc:	11800c16 	blt	r2,r6,d3f0 <__fixdfsi+0x58>
    d3c0:	00810cc4 	movi	r2,1075
    d3c4:	1185c83a 	sub	r2,r2,r6
    d3c8:	01c007c4 	movi	r7,31
    d3cc:	18c00434 	orhi	r3,r3,16
    d3d0:	38800d16 	blt	r7,r2,d408 <__fixdfsi+0x70>
    d3d4:	31befb44 	addi	r6,r6,-1043
    d3d8:	2084d83a 	srl	r2,r4,r2
    d3dc:	1986983a 	sll	r3,r3,r6
    d3e0:	1884b03a 	or	r2,r3,r2
    d3e4:	28000726 	beq	r5,zero,d404 <__fixdfsi+0x6c>
    d3e8:	0085c83a 	sub	r2,zero,r2
    d3ec:	f800283a 	ret
    d3f0:	00a00034 	movhi	r2,32768
    d3f4:	10bfffc4 	addi	r2,r2,-1
    d3f8:	2885883a 	add	r2,r5,r2
    d3fc:	f800283a 	ret
    d400:	0005883a 	mov	r2,zero
    d404:	f800283a 	ret
    d408:	008104c4 	movi	r2,1043
    d40c:	1185c83a 	sub	r2,r2,r6
    d410:	1884d83a 	srl	r2,r3,r2
    d414:	003ff306 	br	d3e4 <__alt_data_end+0xfffdd3e4>

0000d418 <__floatsidf>:
    d418:	defffd04 	addi	sp,sp,-12
    d41c:	dfc00215 	stw	ra,8(sp)
    d420:	dc400115 	stw	r17,4(sp)
    d424:	dc000015 	stw	r16,0(sp)
    d428:	20002b26 	beq	r4,zero,d4d8 <__floatsidf+0xc0>
    d42c:	2023883a 	mov	r17,r4
    d430:	2020d7fa 	srli	r16,r4,31
    d434:	20002d16 	blt	r4,zero,d4ec <__floatsidf+0xd4>
    d438:	8809883a 	mov	r4,r17
    d43c:	000d59c0 	call	d59c <__clzsi2>
    d440:	01410784 	movi	r5,1054
    d444:	288bc83a 	sub	r5,r5,r2
    d448:	01010cc4 	movi	r4,1075
    d44c:	2149c83a 	sub	r4,r4,r5
    d450:	00c007c4 	movi	r3,31
    d454:	1900160e 	bge	r3,r4,d4b0 <__floatsidf+0x98>
    d458:	00c104c4 	movi	r3,1043
    d45c:	1947c83a 	sub	r3,r3,r5
    d460:	88c6983a 	sll	r3,r17,r3
    d464:	00800434 	movhi	r2,16
    d468:	10bfffc4 	addi	r2,r2,-1
    d46c:	1886703a 	and	r3,r3,r2
    d470:	2941ffcc 	andi	r5,r5,2047
    d474:	800d883a 	mov	r6,r16
    d478:	0005883a 	mov	r2,zero
    d47c:	280a953a 	slli	r5,r5,20
    d480:	31803fcc 	andi	r6,r6,255
    d484:	01000434 	movhi	r4,16
    d488:	300c97fa 	slli	r6,r6,31
    d48c:	213fffc4 	addi	r4,r4,-1
    d490:	1906703a 	and	r3,r3,r4
    d494:	1946b03a 	or	r3,r3,r5
    d498:	1986b03a 	or	r3,r3,r6
    d49c:	dfc00217 	ldw	ra,8(sp)
    d4a0:	dc400117 	ldw	r17,4(sp)
    d4a4:	dc000017 	ldw	r16,0(sp)
    d4a8:	dec00304 	addi	sp,sp,12
    d4ac:	f800283a 	ret
    d4b0:	00c002c4 	movi	r3,11
    d4b4:	1887c83a 	sub	r3,r3,r2
    d4b8:	88c6d83a 	srl	r3,r17,r3
    d4bc:	8904983a 	sll	r2,r17,r4
    d4c0:	01000434 	movhi	r4,16
    d4c4:	213fffc4 	addi	r4,r4,-1
    d4c8:	2941ffcc 	andi	r5,r5,2047
    d4cc:	1906703a 	and	r3,r3,r4
    d4d0:	800d883a 	mov	r6,r16
    d4d4:	003fe906 	br	d47c <__alt_data_end+0xfffdd47c>
    d4d8:	000d883a 	mov	r6,zero
    d4dc:	000b883a 	mov	r5,zero
    d4e0:	0007883a 	mov	r3,zero
    d4e4:	0005883a 	mov	r2,zero
    d4e8:	003fe406 	br	d47c <__alt_data_end+0xfffdd47c>
    d4ec:	0123c83a 	sub	r17,zero,r4
    d4f0:	003fd106 	br	d438 <__alt_data_end+0xfffdd438>

0000d4f4 <__floatunsidf>:
    d4f4:	defffe04 	addi	sp,sp,-8
    d4f8:	dc000015 	stw	r16,0(sp)
    d4fc:	dfc00115 	stw	ra,4(sp)
    d500:	2021883a 	mov	r16,r4
    d504:	20002226 	beq	r4,zero,d590 <__floatunsidf+0x9c>
    d508:	000d59c0 	call	d59c <__clzsi2>
    d50c:	01010784 	movi	r4,1054
    d510:	2089c83a 	sub	r4,r4,r2
    d514:	01810cc4 	movi	r6,1075
    d518:	310dc83a 	sub	r6,r6,r4
    d51c:	00c007c4 	movi	r3,31
    d520:	1980120e 	bge	r3,r6,d56c <__floatunsidf+0x78>
    d524:	00c104c4 	movi	r3,1043
    d528:	1907c83a 	sub	r3,r3,r4
    d52c:	80ca983a 	sll	r5,r16,r3
    d530:	00800434 	movhi	r2,16
    d534:	10bfffc4 	addi	r2,r2,-1
    d538:	2101ffcc 	andi	r4,r4,2047
    d53c:	0021883a 	mov	r16,zero
    d540:	288a703a 	and	r5,r5,r2
    d544:	2008953a 	slli	r4,r4,20
    d548:	00c00434 	movhi	r3,16
    d54c:	18ffffc4 	addi	r3,r3,-1
    d550:	28c6703a 	and	r3,r5,r3
    d554:	8005883a 	mov	r2,r16
    d558:	1906b03a 	or	r3,r3,r4
    d55c:	dfc00117 	ldw	ra,4(sp)
    d560:	dc000017 	ldw	r16,0(sp)
    d564:	dec00204 	addi	sp,sp,8
    d568:	f800283a 	ret
    d56c:	00c002c4 	movi	r3,11
    d570:	188bc83a 	sub	r5,r3,r2
    d574:	814ad83a 	srl	r5,r16,r5
    d578:	00c00434 	movhi	r3,16
    d57c:	18ffffc4 	addi	r3,r3,-1
    d580:	81a0983a 	sll	r16,r16,r6
    d584:	2101ffcc 	andi	r4,r4,2047
    d588:	28ca703a 	and	r5,r5,r3
    d58c:	003fed06 	br	d544 <__alt_data_end+0xfffdd544>
    d590:	0009883a 	mov	r4,zero
    d594:	000b883a 	mov	r5,zero
    d598:	003fea06 	br	d544 <__alt_data_end+0xfffdd544>

0000d59c <__clzsi2>:
    d59c:	00bfffd4 	movui	r2,65535
    d5a0:	11000536 	bltu	r2,r4,d5b8 <__clzsi2+0x1c>
    d5a4:	00803fc4 	movi	r2,255
    d5a8:	11000f36 	bltu	r2,r4,d5e8 <__clzsi2+0x4c>
    d5ac:	00800804 	movi	r2,32
    d5b0:	0007883a 	mov	r3,zero
    d5b4:	00000506 	br	d5cc <__clzsi2+0x30>
    d5b8:	00804034 	movhi	r2,256
    d5bc:	10bfffc4 	addi	r2,r2,-1
    d5c0:	11000c2e 	bgeu	r2,r4,d5f4 <__clzsi2+0x58>
    d5c4:	00800204 	movi	r2,8
    d5c8:	00c00604 	movi	r3,24
    d5cc:	20c8d83a 	srl	r4,r4,r3
    d5d0:	00c000b4 	movhi	r3,2
    d5d4:	18e00d04 	addi	r3,r3,-32716
    d5d8:	1909883a 	add	r4,r3,r4
    d5dc:	20c00003 	ldbu	r3,0(r4)
    d5e0:	10c5c83a 	sub	r2,r2,r3
    d5e4:	f800283a 	ret
    d5e8:	00800604 	movi	r2,24
    d5ec:	00c00204 	movi	r3,8
    d5f0:	003ff606 	br	d5cc <__alt_data_end+0xfffdd5cc>
    d5f4:	00800404 	movi	r2,16
    d5f8:	1007883a 	mov	r3,r2
    d5fc:	003ff306 	br	d5cc <__alt_data_end+0xfffdd5cc>

0000d600 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    d600:	defffe04 	addi	sp,sp,-8
    d604:	dfc00115 	stw	ra,4(sp)
    d608:	df000015 	stw	fp,0(sp)
    d60c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    d610:	d0a00b17 	ldw	r2,-32724(gp)
    d614:	10000326 	beq	r2,zero,d624 <alt_get_errno+0x24>
    d618:	d0a00b17 	ldw	r2,-32724(gp)
    d61c:	103ee83a 	callr	r2
    d620:	00000106 	br	d628 <alt_get_errno+0x28>
    d624:	d0a71704 	addi	r2,gp,-25508
}
    d628:	e037883a 	mov	sp,fp
    d62c:	dfc00117 	ldw	ra,4(sp)
    d630:	df000017 	ldw	fp,0(sp)
    d634:	dec00204 	addi	sp,sp,8
    d638:	f800283a 	ret

0000d63c <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
    d63c:	defffb04 	addi	sp,sp,-20
    d640:	dfc00415 	stw	ra,16(sp)
    d644:	df000315 	stw	fp,12(sp)
    d648:	df000304 	addi	fp,sp,12
    d64c:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
    d650:	e0bfff17 	ldw	r2,-4(fp)
    d654:	10000816 	blt	r2,zero,d678 <close+0x3c>
    d658:	01400304 	movi	r5,12
    d65c:	e13fff17 	ldw	r4,-4(fp)
    d660:	000ad340 	call	ad34 <__mulsi3>
    d664:	1007883a 	mov	r3,r2
    d668:	008000b4 	movhi	r2,2
    d66c:	10a2d204 	addi	r2,r2,-29880
    d670:	1885883a 	add	r2,r3,r2
    d674:	00000106 	br	d67c <close+0x40>
    d678:	0005883a 	mov	r2,zero
    d67c:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
    d680:	e0bffd17 	ldw	r2,-12(fp)
    d684:	10001926 	beq	r2,zero,d6ec <close+0xb0>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
    d688:	e0bffd17 	ldw	r2,-12(fp)
    d68c:	10800017 	ldw	r2,0(r2)
    d690:	10800417 	ldw	r2,16(r2)
    d694:	10000626 	beq	r2,zero,d6b0 <close+0x74>
    d698:	e0bffd17 	ldw	r2,-12(fp)
    d69c:	10800017 	ldw	r2,0(r2)
    d6a0:	10800417 	ldw	r2,16(r2)
    d6a4:	e13ffd17 	ldw	r4,-12(fp)
    d6a8:	103ee83a 	callr	r2
    d6ac:	00000106 	br	d6b4 <close+0x78>
    d6b0:	0005883a 	mov	r2,zero
    d6b4:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
    d6b8:	e13fff17 	ldw	r4,-4(fp)
    d6bc:	000dfbc0 	call	dfbc <alt_release_fd>
    if (rval < 0)
    d6c0:	e0bffe17 	ldw	r2,-8(fp)
    d6c4:	1000070e 	bge	r2,zero,d6e4 <close+0xa8>
    {
      ALT_ERRNO = -rval;
    d6c8:	000d6000 	call	d600 <alt_get_errno>
    d6cc:	1007883a 	mov	r3,r2
    d6d0:	e0bffe17 	ldw	r2,-8(fp)
    d6d4:	0085c83a 	sub	r2,zero,r2
    d6d8:	18800015 	stw	r2,0(r3)
      return -1;
    d6dc:	00bfffc4 	movi	r2,-1
    d6e0:	00000706 	br	d700 <close+0xc4>
    }
    return 0;
    d6e4:	0005883a 	mov	r2,zero
    d6e8:	00000506 	br	d700 <close+0xc4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
    d6ec:	000d6000 	call	d600 <alt_get_errno>
    d6f0:	1007883a 	mov	r3,r2
    d6f4:	00801444 	movi	r2,81
    d6f8:	18800015 	stw	r2,0(r3)
    return -1;
    d6fc:	00bfffc4 	movi	r2,-1
  }
}
    d700:	e037883a 	mov	sp,fp
    d704:	dfc00117 	ldw	ra,4(sp)
    d708:	df000017 	ldw	fp,0(sp)
    d70c:	dec00204 	addi	sp,sp,8
    d710:	f800283a 	ret

0000d714 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
    d714:	defffc04 	addi	sp,sp,-16
    d718:	df000315 	stw	fp,12(sp)
    d71c:	df000304 	addi	fp,sp,12
    d720:	e13ffd15 	stw	r4,-12(fp)
    d724:	e17ffe15 	stw	r5,-8(fp)
    d728:	e1bfff15 	stw	r6,-4(fp)
  return len;
    d72c:	e0bfff17 	ldw	r2,-4(fp)
}
    d730:	e037883a 	mov	sp,fp
    d734:	df000017 	ldw	fp,0(sp)
    d738:	dec00104 	addi	sp,sp,4
    d73c:	f800283a 	ret

0000d740 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    d740:	defffe04 	addi	sp,sp,-8
    d744:	dfc00115 	stw	ra,4(sp)
    d748:	df000015 	stw	fp,0(sp)
    d74c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    d750:	d0a00b17 	ldw	r2,-32724(gp)
    d754:	10000326 	beq	r2,zero,d764 <alt_get_errno+0x24>
    d758:	d0a00b17 	ldw	r2,-32724(gp)
    d75c:	103ee83a 	callr	r2
    d760:	00000106 	br	d768 <alt_get_errno+0x28>
    d764:	d0a71704 	addi	r2,gp,-25508
}
    d768:	e037883a 	mov	sp,fp
    d76c:	dfc00117 	ldw	ra,4(sp)
    d770:	df000017 	ldw	fp,0(sp)
    d774:	dec00204 	addi	sp,sp,8
    d778:	f800283a 	ret

0000d77c <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
    d77c:	defffb04 	addi	sp,sp,-20
    d780:	dfc00415 	stw	ra,16(sp)
    d784:	df000315 	stw	fp,12(sp)
    d788:	df000304 	addi	fp,sp,12
    d78c:	e13ffe15 	stw	r4,-8(fp)
    d790:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    d794:	e0bffe17 	ldw	r2,-8(fp)
    d798:	10000816 	blt	r2,zero,d7bc <fstat+0x40>
    d79c:	01400304 	movi	r5,12
    d7a0:	e13ffe17 	ldw	r4,-8(fp)
    d7a4:	000ad340 	call	ad34 <__mulsi3>
    d7a8:	1007883a 	mov	r3,r2
    d7ac:	008000b4 	movhi	r2,2
    d7b0:	10a2d204 	addi	r2,r2,-29880
    d7b4:	1885883a 	add	r2,r3,r2
    d7b8:	00000106 	br	d7c0 <fstat+0x44>
    d7bc:	0005883a 	mov	r2,zero
    d7c0:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
    d7c4:	e0bffd17 	ldw	r2,-12(fp)
    d7c8:	10001026 	beq	r2,zero,d80c <fstat+0x90>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
    d7cc:	e0bffd17 	ldw	r2,-12(fp)
    d7d0:	10800017 	ldw	r2,0(r2)
    d7d4:	10800817 	ldw	r2,32(r2)
    d7d8:	10000726 	beq	r2,zero,d7f8 <fstat+0x7c>
    {
      return fd->dev->fstat(fd, st);
    d7dc:	e0bffd17 	ldw	r2,-12(fp)
    d7e0:	10800017 	ldw	r2,0(r2)
    d7e4:	10800817 	ldw	r2,32(r2)
    d7e8:	e17fff17 	ldw	r5,-4(fp)
    d7ec:	e13ffd17 	ldw	r4,-12(fp)
    d7f0:	103ee83a 	callr	r2
    d7f4:	00000a06 	br	d820 <fstat+0xa4>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
    d7f8:	e0bfff17 	ldw	r2,-4(fp)
    d7fc:	00c80004 	movi	r3,8192
    d800:	10c00115 	stw	r3,4(r2)
      return 0;
    d804:	0005883a 	mov	r2,zero
    d808:	00000506 	br	d820 <fstat+0xa4>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
    d80c:	000d7400 	call	d740 <alt_get_errno>
    d810:	1007883a 	mov	r3,r2
    d814:	00801444 	movi	r2,81
    d818:	18800015 	stw	r2,0(r3)
    return -1;
    d81c:	00bfffc4 	movi	r2,-1
  }
}
    d820:	e037883a 	mov	sp,fp
    d824:	dfc00117 	ldw	ra,4(sp)
    d828:	df000017 	ldw	fp,0(sp)
    d82c:	dec00204 	addi	sp,sp,8
    d830:	f800283a 	ret

0000d834 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
    d834:	defff904 	addi	sp,sp,-28
    d838:	dfc00615 	stw	ra,24(sp)
    d83c:	df000515 	stw	fp,20(sp)
    d840:	df000504 	addi	fp,sp,20
    d844:	e13ffc15 	stw	r4,-16(fp)
    d848:	e17ffd15 	stw	r5,-12(fp)
    d84c:	e1bffe15 	stw	r6,-8(fp)
    d850:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
    d854:	e0800217 	ldw	r2,8(fp)
    d858:	d8800015 	stw	r2,0(sp)
    d85c:	e1ffff17 	ldw	r7,-4(fp)
    d860:	e1bffe17 	ldw	r6,-8(fp)
    d864:	e17ffd17 	ldw	r5,-12(fp)
    d868:	e13ffc17 	ldw	r4,-16(fp)
    d86c:	000d9e40 	call	d9e4 <alt_iic_isr_register>
}  
    d870:	e037883a 	mov	sp,fp
    d874:	dfc00117 	ldw	ra,4(sp)
    d878:	df000017 	ldw	fp,0(sp)
    d87c:	dec00204 	addi	sp,sp,8
    d880:	f800283a 	ret

0000d884 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
    d884:	defff904 	addi	sp,sp,-28
    d888:	df000615 	stw	fp,24(sp)
    d88c:	df000604 	addi	fp,sp,24
    d890:	e13ffe15 	stw	r4,-8(fp)
    d894:	e17fff15 	stw	r5,-4(fp)
    d898:	e0bfff17 	ldw	r2,-4(fp)
    d89c:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    d8a0:	0005303a 	rdctl	r2,status
    d8a4:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    d8a8:	e0fffb17 	ldw	r3,-20(fp)
    d8ac:	00bfff84 	movi	r2,-2
    d8b0:	1884703a 	and	r2,r3,r2
    d8b4:	1001703a 	wrctl	status,r2
  
  return context;
    d8b8:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
    d8bc:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
    d8c0:	00c00044 	movi	r3,1
    d8c4:	e0bffa17 	ldw	r2,-24(fp)
    d8c8:	1884983a 	sll	r2,r3,r2
    d8cc:	1007883a 	mov	r3,r2
    d8d0:	d0a71917 	ldw	r2,-25500(gp)
    d8d4:	1884b03a 	or	r2,r3,r2
    d8d8:	d0a71915 	stw	r2,-25500(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
    d8dc:	d0a71917 	ldw	r2,-25500(gp)
    d8e0:	100170fa 	wrctl	ienable,r2
    d8e4:	e0bffc17 	ldw	r2,-16(fp)
    d8e8:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    d8ec:	e0bffd17 	ldw	r2,-12(fp)
    d8f0:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
    d8f4:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
    d8f8:	0001883a 	nop
}
    d8fc:	e037883a 	mov	sp,fp
    d900:	df000017 	ldw	fp,0(sp)
    d904:	dec00104 	addi	sp,sp,4
    d908:	f800283a 	ret

0000d90c <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
    d90c:	defff904 	addi	sp,sp,-28
    d910:	df000615 	stw	fp,24(sp)
    d914:	df000604 	addi	fp,sp,24
    d918:	e13ffe15 	stw	r4,-8(fp)
    d91c:	e17fff15 	stw	r5,-4(fp)
    d920:	e0bfff17 	ldw	r2,-4(fp)
    d924:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    d928:	0005303a 	rdctl	r2,status
    d92c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    d930:	e0fffb17 	ldw	r3,-20(fp)
    d934:	00bfff84 	movi	r2,-2
    d938:	1884703a 	and	r2,r3,r2
    d93c:	1001703a 	wrctl	status,r2
  
  return context;
    d940:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
    d944:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
    d948:	00c00044 	movi	r3,1
    d94c:	e0bffa17 	ldw	r2,-24(fp)
    d950:	1884983a 	sll	r2,r3,r2
    d954:	0084303a 	nor	r2,zero,r2
    d958:	1007883a 	mov	r3,r2
    d95c:	d0a71917 	ldw	r2,-25500(gp)
    d960:	1884703a 	and	r2,r3,r2
    d964:	d0a71915 	stw	r2,-25500(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
    d968:	d0a71917 	ldw	r2,-25500(gp)
    d96c:	100170fa 	wrctl	ienable,r2
    d970:	e0bffc17 	ldw	r2,-16(fp)
    d974:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    d978:	e0bffd17 	ldw	r2,-12(fp)
    d97c:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
    d980:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
    d984:	0001883a 	nop
}
    d988:	e037883a 	mov	sp,fp
    d98c:	df000017 	ldw	fp,0(sp)
    d990:	dec00104 	addi	sp,sp,4
    d994:	f800283a 	ret

0000d998 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
    d998:	defffc04 	addi	sp,sp,-16
    d99c:	df000315 	stw	fp,12(sp)
    d9a0:	df000304 	addi	fp,sp,12
    d9a4:	e13ffe15 	stw	r4,-8(fp)
    d9a8:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
    d9ac:	000530fa 	rdctl	r2,ienable
    d9b0:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
    d9b4:	00c00044 	movi	r3,1
    d9b8:	e0bfff17 	ldw	r2,-4(fp)
    d9bc:	1884983a 	sll	r2,r3,r2
    d9c0:	1007883a 	mov	r3,r2
    d9c4:	e0bffd17 	ldw	r2,-12(fp)
    d9c8:	1884703a 	and	r2,r3,r2
    d9cc:	1004c03a 	cmpne	r2,r2,zero
    d9d0:	10803fcc 	andi	r2,r2,255
}
    d9d4:	e037883a 	mov	sp,fp
    d9d8:	df000017 	ldw	fp,0(sp)
    d9dc:	dec00104 	addi	sp,sp,4
    d9e0:	f800283a 	ret

0000d9e4 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
    d9e4:	defff504 	addi	sp,sp,-44
    d9e8:	dfc00a15 	stw	ra,40(sp)
    d9ec:	df000915 	stw	fp,36(sp)
    d9f0:	df000904 	addi	fp,sp,36
    d9f4:	e13ffc15 	stw	r4,-16(fp)
    d9f8:	e17ffd15 	stw	r5,-12(fp)
    d9fc:	e1bffe15 	stw	r6,-8(fp)
    da00:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
    da04:	00bffa84 	movi	r2,-22
    da08:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
    da0c:	e0bffd17 	ldw	r2,-12(fp)
    da10:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
    da14:	e0bff817 	ldw	r2,-32(fp)
    da18:	10800808 	cmpgei	r2,r2,32
    da1c:	1000271e 	bne	r2,zero,dabc <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    da20:	0005303a 	rdctl	r2,status
    da24:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    da28:	e0fffb17 	ldw	r3,-20(fp)
    da2c:	00bfff84 	movi	r2,-2
    da30:	1884703a 	and	r2,r3,r2
    da34:	1001703a 	wrctl	status,r2
  
  return context;
    da38:	e0bffb17 	ldw	r2,-20(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
    da3c:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = isr;
    da40:	008000b4 	movhi	r2,2
    da44:	10b28e04 	addi	r2,r2,-13768
    da48:	e0fff817 	ldw	r3,-32(fp)
    da4c:	180690fa 	slli	r3,r3,3
    da50:	10c5883a 	add	r2,r2,r3
    da54:	e0fffe17 	ldw	r3,-8(fp)
    da58:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
    da5c:	008000b4 	movhi	r2,2
    da60:	10b28e04 	addi	r2,r2,-13768
    da64:	e0fff817 	ldw	r3,-32(fp)
    da68:	180690fa 	slli	r3,r3,3
    da6c:	10c5883a 	add	r2,r2,r3
    da70:	10800104 	addi	r2,r2,4
    da74:	e0ffff17 	ldw	r3,-4(fp)
    da78:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
    da7c:	e0bffe17 	ldw	r2,-8(fp)
    da80:	10000526 	beq	r2,zero,da98 <alt_iic_isr_register+0xb4>
    da84:	e0bff817 	ldw	r2,-32(fp)
    da88:	100b883a 	mov	r5,r2
    da8c:	e13ffc17 	ldw	r4,-16(fp)
    da90:	000d8840 	call	d884 <alt_ic_irq_enable>
    da94:	00000406 	br	daa8 <alt_iic_isr_register+0xc4>
    da98:	e0bff817 	ldw	r2,-32(fp)
    da9c:	100b883a 	mov	r5,r2
    daa0:	e13ffc17 	ldw	r4,-16(fp)
    daa4:	000d90c0 	call	d90c <alt_ic_irq_disable>
    daa8:	e0bff715 	stw	r2,-36(fp)
    daac:	e0bffa17 	ldw	r2,-24(fp)
    dab0:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    dab4:	e0bff917 	ldw	r2,-28(fp)
    dab8:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
    dabc:	e0bff717 	ldw	r2,-36(fp)
}
    dac0:	e037883a 	mov	sp,fp
    dac4:	dfc00117 	ldw	ra,4(sp)
    dac8:	df000017 	ldw	fp,0(sp)
    dacc:	dec00204 	addi	sp,sp,8
    dad0:	f800283a 	ret

0000dad4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    dad4:	defffe04 	addi	sp,sp,-8
    dad8:	dfc00115 	stw	ra,4(sp)
    dadc:	df000015 	stw	fp,0(sp)
    dae0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    dae4:	d0a00b17 	ldw	r2,-32724(gp)
    dae8:	10000326 	beq	r2,zero,daf8 <alt_get_errno+0x24>
    daec:	d0a00b17 	ldw	r2,-32724(gp)
    daf0:	103ee83a 	callr	r2
    daf4:	00000106 	br	dafc <alt_get_errno+0x28>
    daf8:	d0a71704 	addi	r2,gp,-25508
}
    dafc:	e037883a 	mov	sp,fp
    db00:	dfc00117 	ldw	ra,4(sp)
    db04:	df000017 	ldw	fp,0(sp)
    db08:	dec00204 	addi	sp,sp,8
    db0c:	f800283a 	ret

0000db10 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
    db10:	deffed04 	addi	sp,sp,-76
    db14:	dfc01215 	stw	ra,72(sp)
    db18:	df001115 	stw	fp,68(sp)
    db1c:	df001104 	addi	fp,sp,68
    db20:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    db24:	e0bfff17 	ldw	r2,-4(fp)
    db28:	10000816 	blt	r2,zero,db4c <isatty+0x3c>
    db2c:	01400304 	movi	r5,12
    db30:	e13fff17 	ldw	r4,-4(fp)
    db34:	000ad340 	call	ad34 <__mulsi3>
    db38:	1007883a 	mov	r3,r2
    db3c:	008000b4 	movhi	r2,2
    db40:	10a2d204 	addi	r2,r2,-29880
    db44:	1885883a 	add	r2,r3,r2
    db48:	00000106 	br	db50 <isatty+0x40>
    db4c:	0005883a 	mov	r2,zero
    db50:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
    db54:	e0bfef17 	ldw	r2,-68(fp)
    db58:	10000e26 	beq	r2,zero,db94 <isatty+0x84>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
    db5c:	e0bfef17 	ldw	r2,-68(fp)
    db60:	10800017 	ldw	r2,0(r2)
    db64:	10800817 	ldw	r2,32(r2)
    db68:	1000021e 	bne	r2,zero,db74 <isatty+0x64>
    {
      return 1;
    db6c:	00800044 	movi	r2,1
    db70:	00000d06 	br	dba8 <isatty+0x98>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
    db74:	e0bff004 	addi	r2,fp,-64
    db78:	100b883a 	mov	r5,r2
    db7c:	e13fff17 	ldw	r4,-4(fp)
    db80:	000d77c0 	call	d77c <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
    db84:	e0bff117 	ldw	r2,-60(fp)
    db88:	10880020 	cmpeqi	r2,r2,8192
    db8c:	10803fcc 	andi	r2,r2,255
    db90:	00000506 	br	dba8 <isatty+0x98>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
    db94:	000dad40 	call	dad4 <alt_get_errno>
    db98:	1007883a 	mov	r3,r2
    db9c:	00801444 	movi	r2,81
    dba0:	18800015 	stw	r2,0(r3)
    return 0;
    dba4:	0005883a 	mov	r2,zero
  }
}
    dba8:	e037883a 	mov	sp,fp
    dbac:	dfc00117 	ldw	ra,4(sp)
    dbb0:	df000017 	ldw	fp,0(sp)
    dbb4:	dec00204 	addi	sp,sp,8
    dbb8:	f800283a 	ret

0000dbbc <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
    dbbc:	defffc04 	addi	sp,sp,-16
    dbc0:	df000315 	stw	fp,12(sp)
    dbc4:	df000304 	addi	fp,sp,12
    dbc8:	e13ffd15 	stw	r4,-12(fp)
    dbcc:	e17ffe15 	stw	r5,-8(fp)
    dbd0:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
    dbd4:	e0fffe17 	ldw	r3,-8(fp)
    dbd8:	e0bffd17 	ldw	r2,-12(fp)
    dbdc:	18800c26 	beq	r3,r2,dc10 <alt_load_section+0x54>
  {
    while( to != end )
    dbe0:	00000806 	br	dc04 <alt_load_section+0x48>
    {
      *to++ = *from++;
    dbe4:	e0bffe17 	ldw	r2,-8(fp)
    dbe8:	10c00104 	addi	r3,r2,4
    dbec:	e0fffe15 	stw	r3,-8(fp)
    dbf0:	e0fffd17 	ldw	r3,-12(fp)
    dbf4:	19000104 	addi	r4,r3,4
    dbf8:	e13ffd15 	stw	r4,-12(fp)
    dbfc:	18c00017 	ldw	r3,0(r3)
    dc00:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
    dc04:	e0fffe17 	ldw	r3,-8(fp)
    dc08:	e0bfff17 	ldw	r2,-4(fp)
    dc0c:	18bff51e 	bne	r3,r2,dbe4 <__alt_data_end+0xfffddbe4>
    {
      *to++ = *from++;
    }
  }
}
    dc10:	0001883a 	nop
    dc14:	e037883a 	mov	sp,fp
    dc18:	df000017 	ldw	fp,0(sp)
    dc1c:	dec00104 	addi	sp,sp,4
    dc20:	f800283a 	ret

0000dc24 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
    dc24:	defffe04 	addi	sp,sp,-8
    dc28:	dfc00115 	stw	ra,4(sp)
    dc2c:	df000015 	stw	fp,0(sp)
    dc30:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
    dc34:	018000b4 	movhi	r6,2
    dc38:	31a77c04 	addi	r6,r6,-25104
    dc3c:	014000b4 	movhi	r5,2
    dc40:	29609f04 	addi	r5,r5,-32132
    dc44:	010000b4 	movhi	r4,2
    dc48:	21277c04 	addi	r4,r4,-25104
    dc4c:	000dbbc0 	call	dbbc <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
    dc50:	01800034 	movhi	r6,0
    dc54:	31807004 	addi	r6,r6,448
    dc58:	01400034 	movhi	r5,0
    dc5c:	29400804 	addi	r5,r5,32
    dc60:	01000034 	movhi	r4,0
    dc64:	21000804 	addi	r4,r4,32
    dc68:	000dbbc0 	call	dbbc <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
    dc6c:	018000b4 	movhi	r6,2
    dc70:	31a09f04 	addi	r6,r6,-32132
    dc74:	01400074 	movhi	r5,1
    dc78:	295f9504 	addi	r5,r5,32340
    dc7c:	01000074 	movhi	r4,1
    dc80:	211f9504 	addi	r4,r4,32340
    dc84:	000dbbc0 	call	dbbc <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
    dc88:	0016d500 	call	16d50 <alt_dcache_flush_all>
  alt_icache_flush_all();
    dc8c:	0016f100 	call	16f10 <alt_icache_flush_all>
}
    dc90:	0001883a 	nop
    dc94:	e037883a 	mov	sp,fp
    dc98:	dfc00117 	ldw	ra,4(sp)
    dc9c:	df000017 	ldw	fp,0(sp)
    dca0:	dec00204 	addi	sp,sp,8
    dca4:	f800283a 	ret

0000dca8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    dca8:	defffe04 	addi	sp,sp,-8
    dcac:	dfc00115 	stw	ra,4(sp)
    dcb0:	df000015 	stw	fp,0(sp)
    dcb4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    dcb8:	d0a00b17 	ldw	r2,-32724(gp)
    dcbc:	10000326 	beq	r2,zero,dccc <alt_get_errno+0x24>
    dcc0:	d0a00b17 	ldw	r2,-32724(gp)
    dcc4:	103ee83a 	callr	r2
    dcc8:	00000106 	br	dcd0 <alt_get_errno+0x28>
    dccc:	d0a71704 	addi	r2,gp,-25508
}
    dcd0:	e037883a 	mov	sp,fp
    dcd4:	dfc00117 	ldw	ra,4(sp)
    dcd8:	df000017 	ldw	fp,0(sp)
    dcdc:	dec00204 	addi	sp,sp,8
    dce0:	f800283a 	ret

0000dce4 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
    dce4:	defff904 	addi	sp,sp,-28
    dce8:	dfc00615 	stw	ra,24(sp)
    dcec:	df000515 	stw	fp,20(sp)
    dcf0:	df000504 	addi	fp,sp,20
    dcf4:	e13ffd15 	stw	r4,-12(fp)
    dcf8:	e17ffe15 	stw	r5,-8(fp)
    dcfc:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
    dd00:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    dd04:	e0bffd17 	ldw	r2,-12(fp)
    dd08:	10000816 	blt	r2,zero,dd2c <lseek+0x48>
    dd0c:	01400304 	movi	r5,12
    dd10:	e13ffd17 	ldw	r4,-12(fp)
    dd14:	000ad340 	call	ad34 <__mulsi3>
    dd18:	1007883a 	mov	r3,r2
    dd1c:	008000b4 	movhi	r2,2
    dd20:	10a2d204 	addi	r2,r2,-29880
    dd24:	1885883a 	add	r2,r3,r2
    dd28:	00000106 	br	dd30 <lseek+0x4c>
    dd2c:	0005883a 	mov	r2,zero
    dd30:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
    dd34:	e0bffc17 	ldw	r2,-16(fp)
    dd38:	10001026 	beq	r2,zero,dd7c <lseek+0x98>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
    dd3c:	e0bffc17 	ldw	r2,-16(fp)
    dd40:	10800017 	ldw	r2,0(r2)
    dd44:	10800717 	ldw	r2,28(r2)
    dd48:	10000926 	beq	r2,zero,dd70 <lseek+0x8c>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
    dd4c:	e0bffc17 	ldw	r2,-16(fp)
    dd50:	10800017 	ldw	r2,0(r2)
    dd54:	10800717 	ldw	r2,28(r2)
    dd58:	e1bfff17 	ldw	r6,-4(fp)
    dd5c:	e17ffe17 	ldw	r5,-8(fp)
    dd60:	e13ffc17 	ldw	r4,-16(fp)
    dd64:	103ee83a 	callr	r2
    dd68:	e0bffb15 	stw	r2,-20(fp)
    dd6c:	00000506 	br	dd84 <lseek+0xa0>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
    dd70:	00bfde84 	movi	r2,-134
    dd74:	e0bffb15 	stw	r2,-20(fp)
    dd78:	00000206 	br	dd84 <lseek+0xa0>
    }
  }
  else  
  {
    rc = -EBADFD;
    dd7c:	00bfebc4 	movi	r2,-81
    dd80:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
    dd84:	e0bffb17 	ldw	r2,-20(fp)
    dd88:	1000070e 	bge	r2,zero,dda8 <lseek+0xc4>
  {
    ALT_ERRNO = -rc;
    dd8c:	000dca80 	call	dca8 <alt_get_errno>
    dd90:	1007883a 	mov	r3,r2
    dd94:	e0bffb17 	ldw	r2,-20(fp)
    dd98:	0085c83a 	sub	r2,zero,r2
    dd9c:	18800015 	stw	r2,0(r3)
    rc = -1;
    dda0:	00bfffc4 	movi	r2,-1
    dda4:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
    dda8:	e0bffb17 	ldw	r2,-20(fp)
}
    ddac:	e037883a 	mov	sp,fp
    ddb0:	dfc00117 	ldw	ra,4(sp)
    ddb4:	df000017 	ldw	fp,0(sp)
    ddb8:	dec00204 	addi	sp,sp,8
    ddbc:	f800283a 	ret

0000ddc0 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    ddc0:	defff904 	addi	sp,sp,-28
    ddc4:	dfc00615 	stw	ra,24(sp)
    ddc8:	df000515 	stw	fp,20(sp)
    ddcc:	df000504 	addi	fp,sp,20
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    ddd0:	0009883a 	mov	r4,zero
    ddd4:	0015d680 	call	15d68 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
    ddd8:	000edac0 	call	edac <OSInit>
    dddc:	01000044 	movi	r4,1
    dde0:	00137080 	call	13708 <OSSemCreate>
    dde4:	d0a71e15 	stw	r2,-25480(gp)
    dde8:	01000044 	movi	r4,1
    ddec:	00137080 	call	13708 <OSSemCreate>
    ddf0:	d0a72015 	stw	r2,-25472(gp)
    ddf4:	d0a71804 	addi	r2,gp,-25504
    ddf8:	e0bffc15 	stw	r2,-16(fp)
    ddfc:	00800044 	movi	r2,1
    de00:	e0bffd0d 	sth	r2,-12(fp)
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sem_create (OS_EVENT** sem, 
              INT16U value)
{
  *sem = OSSemCreate (value);
    de04:	e0bffd0b 	ldhu	r2,-12(fp)
    de08:	1009883a 	mov	r4,r2
    de0c:	00137080 	call	13708 <OSSemCreate>
    de10:	1007883a 	mov	r3,r2
    de14:	e0bffc17 	ldw	r2,-16(fp)
    de18:	10c00015 	stw	r3,0(r2)
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
    de1c:	0015da00 	call	15da0 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
    de20:	018000b4 	movhi	r6,2
    de24:	31a05004 	addi	r6,r6,-32448
    de28:	014000b4 	movhi	r5,2
    de2c:	29605004 	addi	r5,r5,-32448
    de30:	010000b4 	movhi	r4,2
    de34:	21205004 	addi	r4,r4,-32448
    de38:	00170140 	call	17014 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
    de3c:	0016e500 	call	16e50 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
    de40:	01000074 	movhi	r4,1
    de44:	211bac04 	addi	r4,r4,28336
    de48:	0017ac00 	call	17ac0 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
    de4c:	d0a71a17 	ldw	r2,-25496(gp)
    de50:	d0e71b17 	ldw	r3,-25492(gp)
    de54:	d1271c17 	ldw	r4,-25488(gp)
    de58:	200d883a 	mov	r6,r4
    de5c:	180b883a 	mov	r5,r3
    de60:	1009883a 	mov	r4,r2
    de64:	00006e80 	call	6e8 <main>
    de68:	e0bffb15 	stw	r2,-20(fp)
  close(STDOUT_FILENO);
    de6c:	01000044 	movi	r4,1
    de70:	000d63c0 	call	d63c <close>
  exit (result);
    de74:	e13ffb17 	ldw	r4,-20(fp)
    de78:	0017ad40 	call	17ad4 <exit>

0000de7c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    de7c:	defffe04 	addi	sp,sp,-8
    de80:	dfc00115 	stw	ra,4(sp)
    de84:	df000015 	stw	fp,0(sp)
    de88:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    de8c:	d0a00b17 	ldw	r2,-32724(gp)
    de90:	10000326 	beq	r2,zero,dea0 <alt_get_errno+0x24>
    de94:	d0a00b17 	ldw	r2,-32724(gp)
    de98:	103ee83a 	callr	r2
    de9c:	00000106 	br	dea4 <alt_get_errno+0x28>
    dea0:	d0a71704 	addi	r2,gp,-25508
}
    dea4:	e037883a 	mov	sp,fp
    dea8:	dfc00117 	ldw	ra,4(sp)
    deac:	df000017 	ldw	fp,0(sp)
    deb0:	dec00204 	addi	sp,sp,8
    deb4:	f800283a 	ret

0000deb8 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
    deb8:	defff904 	addi	sp,sp,-28
    debc:	dfc00615 	stw	ra,24(sp)
    dec0:	df000515 	stw	fp,20(sp)
    dec4:	df000504 	addi	fp,sp,20
    dec8:	e13ffd15 	stw	r4,-12(fp)
    decc:	e17ffe15 	stw	r5,-8(fp)
    ded0:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    ded4:	e0bffd17 	ldw	r2,-12(fp)
    ded8:	10000816 	blt	r2,zero,defc <read+0x44>
    dedc:	01400304 	movi	r5,12
    dee0:	e13ffd17 	ldw	r4,-12(fp)
    dee4:	000ad340 	call	ad34 <__mulsi3>
    dee8:	1007883a 	mov	r3,r2
    deec:	008000b4 	movhi	r2,2
    def0:	10a2d204 	addi	r2,r2,-29880
    def4:	1885883a 	add	r2,r3,r2
    def8:	00000106 	br	df00 <read+0x48>
    defc:	0005883a 	mov	r2,zero
    df00:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
    df04:	e0bffb17 	ldw	r2,-20(fp)
    df08:	10002226 	beq	r2,zero,df94 <read+0xdc>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
    df0c:	e0bffb17 	ldw	r2,-20(fp)
    df10:	10800217 	ldw	r2,8(r2)
    df14:	108000cc 	andi	r2,r2,3
    df18:	10800060 	cmpeqi	r2,r2,1
    df1c:	1000181e 	bne	r2,zero,df80 <read+0xc8>
        (fd->dev->read))
    df20:	e0bffb17 	ldw	r2,-20(fp)
    df24:	10800017 	ldw	r2,0(r2)
    df28:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
    df2c:	10001426 	beq	r2,zero,df80 <read+0xc8>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
    df30:	e0bffb17 	ldw	r2,-20(fp)
    df34:	10800017 	ldw	r2,0(r2)
    df38:	10800517 	ldw	r2,20(r2)
    df3c:	e0ffff17 	ldw	r3,-4(fp)
    df40:	180d883a 	mov	r6,r3
    df44:	e17ffe17 	ldw	r5,-8(fp)
    df48:	e13ffb17 	ldw	r4,-20(fp)
    df4c:	103ee83a 	callr	r2
    df50:	e0bffc15 	stw	r2,-16(fp)
    df54:	e0bffc17 	ldw	r2,-16(fp)
    df58:	1000070e 	bge	r2,zero,df78 <read+0xc0>
        {
          ALT_ERRNO = -rval;
    df5c:	000de7c0 	call	de7c <alt_get_errno>
    df60:	1007883a 	mov	r3,r2
    df64:	e0bffc17 	ldw	r2,-16(fp)
    df68:	0085c83a 	sub	r2,zero,r2
    df6c:	18800015 	stw	r2,0(r3)
          return -1;
    df70:	00bfffc4 	movi	r2,-1
    df74:	00000c06 	br	dfa8 <read+0xf0>
        }
        return rval;
    df78:	e0bffc17 	ldw	r2,-16(fp)
    df7c:	00000a06 	br	dfa8 <read+0xf0>
      }
      else
      {
        ALT_ERRNO = EACCES;
    df80:	000de7c0 	call	de7c <alt_get_errno>
    df84:	1007883a 	mov	r3,r2
    df88:	00800344 	movi	r2,13
    df8c:	18800015 	stw	r2,0(r3)
    df90:	00000406 	br	dfa4 <read+0xec>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
    df94:	000de7c0 	call	de7c <alt_get_errno>
    df98:	1007883a 	mov	r3,r2
    df9c:	00801444 	movi	r2,81
    dfa0:	18800015 	stw	r2,0(r3)
  }
  return -1;
    dfa4:	00bfffc4 	movi	r2,-1
}
    dfa8:	e037883a 	mov	sp,fp
    dfac:	dfc00117 	ldw	ra,4(sp)
    dfb0:	df000017 	ldw	fp,0(sp)
    dfb4:	dec00204 	addi	sp,sp,8
    dfb8:	f800283a 	ret

0000dfbc <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
    dfbc:	defffc04 	addi	sp,sp,-16
    dfc0:	dfc00315 	stw	ra,12(sp)
    dfc4:	df000215 	stw	fp,8(sp)
    dfc8:	dc000115 	stw	r16,4(sp)
    dfcc:	df000204 	addi	fp,sp,8
    dfd0:	e13ffe15 	stw	r4,-8(fp)
  if (fd > 2)
    dfd4:	e0bffe17 	ldw	r2,-8(fp)
    dfd8:	108000d0 	cmplti	r2,r2,3
    dfdc:	1000111e 	bne	r2,zero,e024 <alt_release_fd+0x68>
  {
    alt_fd_list[fd].fd_flags = 0;
    dfe0:	040000b4 	movhi	r16,2
    dfe4:	8422d204 	addi	r16,r16,-29880
    dfe8:	e0bffe17 	ldw	r2,-8(fp)
    dfec:	01400304 	movi	r5,12
    dff0:	1009883a 	mov	r4,r2
    dff4:	000ad340 	call	ad34 <__mulsi3>
    dff8:	8085883a 	add	r2,r16,r2
    dffc:	10800204 	addi	r2,r2,8
    e000:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
    e004:	040000b4 	movhi	r16,2
    e008:	8422d204 	addi	r16,r16,-29880
    e00c:	e0bffe17 	ldw	r2,-8(fp)
    e010:	01400304 	movi	r5,12
    e014:	1009883a 	mov	r4,r2
    e018:	000ad340 	call	ad34 <__mulsi3>
    e01c:	8085883a 	add	r2,r16,r2
    e020:	10000015 	stw	zero,0(r2)
  }
}
    e024:	0001883a 	nop
    e028:	e6ffff04 	addi	sp,fp,-4
    e02c:	dfc00217 	ldw	ra,8(sp)
    e030:	df000117 	ldw	fp,4(sp)
    e034:	dc000017 	ldw	r16,0(sp)
    e038:	dec00304 	addi	sp,sp,12
    e03c:	f800283a 	ret

0000e040 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
    e040:	defff904 	addi	sp,sp,-28
    e044:	df000615 	stw	fp,24(sp)
    e048:	df000604 	addi	fp,sp,24
    e04c:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    e050:	0005303a 	rdctl	r2,status
    e054:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    e058:	e0fffe17 	ldw	r3,-8(fp)
    e05c:	00bfff84 	movi	r2,-2
    e060:	1884703a 	and	r2,r3,r2
    e064:	1001703a 	wrctl	status,r2
  
  return context;
    e068:	e0bffe17 	ldw	r2,-8(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
    e06c:	e0bffb15 	stw	r2,-20(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
    e070:	d0a00d17 	ldw	r2,-32716(gp)
    e074:	10c000c4 	addi	r3,r2,3
    e078:	00bfff04 	movi	r2,-4
    e07c:	1884703a 	and	r2,r3,r2
    e080:	d0a00d15 	stw	r2,-32716(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
    e084:	d0e00d17 	ldw	r3,-32716(gp)
    e088:	e0bfff17 	ldw	r2,-4(fp)
    e08c:	1887883a 	add	r3,r3,r2
    e090:	008000f4 	movhi	r2,3
    e094:	10800004 	addi	r2,r2,0
    e098:	10c0062e 	bgeu	r2,r3,e0b4 <sbrk+0x74>
    e09c:	e0bffb17 	ldw	r2,-20(fp)
    e0a0:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    e0a4:	e0bffa17 	ldw	r2,-24(fp)
    e0a8:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
    e0ac:	00bfffc4 	movi	r2,-1
    e0b0:	00000b06 	br	e0e0 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
    e0b4:	d0a00d17 	ldw	r2,-32716(gp)
    e0b8:	e0bffd15 	stw	r2,-12(fp)
  heap_end += incr; 
    e0bc:	d0e00d17 	ldw	r3,-32716(gp)
    e0c0:	e0bfff17 	ldw	r2,-4(fp)
    e0c4:	1885883a 	add	r2,r3,r2
    e0c8:	d0a00d15 	stw	r2,-32716(gp)
    e0cc:	e0bffb17 	ldw	r2,-20(fp)
    e0d0:	e0bffc15 	stw	r2,-16(fp)
    e0d4:	e0bffc17 	ldw	r2,-16(fp)
    e0d8:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
    e0dc:	e0bffd17 	ldw	r2,-12(fp)
} 
    e0e0:	e037883a 	mov	sp,fp
    e0e4:	df000017 	ldw	fp,0(sp)
    e0e8:	dec00104 	addi	sp,sp,4
    e0ec:	f800283a 	ret

0000e0f0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    e0f0:	defffe04 	addi	sp,sp,-8
    e0f4:	dfc00115 	stw	ra,4(sp)
    e0f8:	df000015 	stw	fp,0(sp)
    e0fc:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    e100:	d0a00b17 	ldw	r2,-32724(gp)
    e104:	10000326 	beq	r2,zero,e114 <alt_get_errno+0x24>
    e108:	d0a00b17 	ldw	r2,-32724(gp)
    e10c:	103ee83a 	callr	r2
    e110:	00000106 	br	e118 <alt_get_errno+0x28>
    e114:	d0a71704 	addi	r2,gp,-25508
}
    e118:	e037883a 	mov	sp,fp
    e11c:	dfc00117 	ldw	ra,4(sp)
    e120:	df000017 	ldw	fp,0(sp)
    e124:	dec00204 	addi	sp,sp,8
    e128:	f800283a 	ret

0000e12c <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
    e12c:	defff904 	addi	sp,sp,-28
    e130:	dfc00615 	stw	ra,24(sp)
    e134:	df000515 	stw	fp,20(sp)
    e138:	df000504 	addi	fp,sp,20
    e13c:	e13ffd15 	stw	r4,-12(fp)
    e140:	e17ffe15 	stw	r5,-8(fp)
    e144:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    e148:	e0bffd17 	ldw	r2,-12(fp)
    e14c:	10000816 	blt	r2,zero,e170 <write+0x44>
    e150:	01400304 	movi	r5,12
    e154:	e13ffd17 	ldw	r4,-12(fp)
    e158:	000ad340 	call	ad34 <__mulsi3>
    e15c:	1007883a 	mov	r3,r2
    e160:	008000b4 	movhi	r2,2
    e164:	10a2d204 	addi	r2,r2,-29880
    e168:	1885883a 	add	r2,r3,r2
    e16c:	00000106 	br	e174 <write+0x48>
    e170:	0005883a 	mov	r2,zero
    e174:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
    e178:	e0bffb17 	ldw	r2,-20(fp)
    e17c:	10002126 	beq	r2,zero,e204 <write+0xd8>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
    e180:	e0bffb17 	ldw	r2,-20(fp)
    e184:	10800217 	ldw	r2,8(r2)
    e188:	108000cc 	andi	r2,r2,3
    e18c:	10001826 	beq	r2,zero,e1f0 <write+0xc4>
    e190:	e0bffb17 	ldw	r2,-20(fp)
    e194:	10800017 	ldw	r2,0(r2)
    e198:	10800617 	ldw	r2,24(r2)
    e19c:	10001426 	beq	r2,zero,e1f0 <write+0xc4>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
    e1a0:	e0bffb17 	ldw	r2,-20(fp)
    e1a4:	10800017 	ldw	r2,0(r2)
    e1a8:	10800617 	ldw	r2,24(r2)
    e1ac:	e0ffff17 	ldw	r3,-4(fp)
    e1b0:	180d883a 	mov	r6,r3
    e1b4:	e17ffe17 	ldw	r5,-8(fp)
    e1b8:	e13ffb17 	ldw	r4,-20(fp)
    e1bc:	103ee83a 	callr	r2
    e1c0:	e0bffc15 	stw	r2,-16(fp)
    e1c4:	e0bffc17 	ldw	r2,-16(fp)
    e1c8:	1000070e 	bge	r2,zero,e1e8 <write+0xbc>
      {
        ALT_ERRNO = -rval;
    e1cc:	000e0f00 	call	e0f0 <alt_get_errno>
    e1d0:	1007883a 	mov	r3,r2
    e1d4:	e0bffc17 	ldw	r2,-16(fp)
    e1d8:	0085c83a 	sub	r2,zero,r2
    e1dc:	18800015 	stw	r2,0(r3)
        return -1;
    e1e0:	00bfffc4 	movi	r2,-1
    e1e4:	00000c06 	br	e218 <write+0xec>
      }
      return rval;
    e1e8:	e0bffc17 	ldw	r2,-16(fp)
    e1ec:	00000a06 	br	e218 <write+0xec>
    }
    else
    {
      ALT_ERRNO = EACCES;
    e1f0:	000e0f00 	call	e0f0 <alt_get_errno>
    e1f4:	1007883a 	mov	r3,r2
    e1f8:	00800344 	movi	r2,13
    e1fc:	18800015 	stw	r2,0(r3)
    e200:	00000406 	br	e214 <write+0xe8>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
    e204:	000e0f00 	call	e0f0 <alt_get_errno>
    e208:	1007883a 	mov	r3,r2
    e20c:	00801444 	movi	r2,81
    e210:	18800015 	stw	r2,0(r3)
  }
  return -1;
    e214:	00bfffc4 	movi	r2,-1
}
    e218:	e037883a 	mov	sp,fp
    e21c:	dfc00117 	ldw	ra,4(sp)
    e220:	df000017 	ldw	fp,0(sp)
    e224:	dec00204 	addi	sp,sp,8
    e228:	f800283a 	ret

0000e22c <__env_lock>:
/*
 *
 */

void __env_lock ( struct _reent *_r )
{
    e22c:	deffdf04 	addi	sp,sp,-132
    e230:	dfc02015 	stw	ra,128(sp)
    e234:	df001f15 	stw	fp,124(sp)
    e238:	df001f04 	addi	fp,sp,124
    e23c:	e13fff15 	stw	r4,-4(fp)
  INT8U err;
  int id;

  /* use our priority as a task id */

  err = OSTaskQuery( OS_PRIO_SELF, &tcb );
    e240:	e0bfe204 	addi	r2,fp,-120
    e244:	100b883a 	mov	r5,r2
    e248:	01003fc4 	movi	r4,255
    e24c:	00156900 	call	15690 <OSTaskQuery>
    e250:	e0bffe85 	stb	r2,-6(fp)
  if (err != OS_NO_ERR)
    e254:	e0bffe83 	ldbu	r2,-6(fp)
    e258:	10803fcc 	andi	r2,r2,255
    e25c:	10001e1e 	bne	r2,zero,e2d8 <__env_lock+0xac>
    return;

  id = tcb.OSTCBPrio;
    e260:	e0bfee83 	ldbu	r2,-70(fp)
    e264:	10803fcc 	andi	r2,r2,255
    e268:	e0bfe115 	stw	r2,-124(fp)
   
  /* see if we own the environment already */

  OSSemQuery( alt_envsem, &semdata );
    e26c:	d0a71e17 	ldw	r2,-25480(gp)
    e270:	e0fffd04 	addi	r3,fp,-12
    e274:	180b883a 	mov	r5,r3
    e278:	1009883a 	mov	r4,r2
    e27c:	0013ea80 	call	13ea8 <OSSemQuery>
  if( semdata.OSEventGrp && id == lockid ) 
    e280:	e0bffe43 	ldbu	r2,-7(fp)
    e284:	10803fcc 	andi	r2,r2,255
    e288:	10000726 	beq	r2,zero,e2a8 <__env_lock+0x7c>
    e28c:	d0a00e17 	ldw	r2,-32712(gp)
    e290:	e0ffe117 	ldw	r3,-124(fp)
    e294:	1880041e 	bne	r3,r2,e2a8 <__env_lock+0x7c>
  {
    /* we do; just count the recursion */

    locks++;
    e298:	d0a71d17 	ldw	r2,-25484(gp)
    e29c:	10800044 	addi	r2,r2,1
    e2a0:	d0a71d15 	stw	r2,-25484(gp)
    e2a4:	00000a06 	br	e2d0 <__env_lock+0xa4>
  }
  else 
  {
    /* wait on the other task to yield, then claim ownership */

    OSSemPend( alt_envsem, 0, &err );
    e2a8:	d0a71e17 	ldw	r2,-25480(gp)
    e2ac:	e0fffe84 	addi	r3,fp,-6
    e2b0:	180d883a 	mov	r6,r3
    e2b4:	000b883a 	mov	r5,zero
    e2b8:	1009883a 	mov	r4,r2
    e2bc:	0013a200 	call	13a20 <OSSemPend>
    locks  = 1;
    e2c0:	00800044 	movi	r2,1
    e2c4:	d0a71d15 	stw	r2,-25484(gp)
    lockid = id;
    e2c8:	e0bfe117 	ldw	r2,-124(fp)
    e2cc:	d0a00e15 	stw	r2,-32712(gp)
  }

#endif /* OS_THREAD_SAFE_NEWLIB */
  return;
    e2d0:	0001883a 	nop
    e2d4:	00000106 	br	e2dc <__env_lock+0xb0>

  /* use our priority as a task id */

  err = OSTaskQuery( OS_PRIO_SELF, &tcb );
  if (err != OS_NO_ERR)
    return;
    e2d8:	0001883a 	nop
    lockid = id;
  }

#endif /* OS_THREAD_SAFE_NEWLIB */
  return;
}
    e2dc:	e037883a 	mov	sp,fp
    e2e0:	dfc00117 	ldw	ra,4(sp)
    e2e4:	df000017 	ldw	fp,0(sp)
    e2e8:	dec00204 	addi	sp,sp,8
    e2ec:	f800283a 	ret

0000e2f0 <__env_unlock>:
/*
 *
 */

void __env_unlock ( struct _reent *_r )
{
    e2f0:	defffd04 	addi	sp,sp,-12
    e2f4:	dfc00215 	stw	ra,8(sp)
    e2f8:	df000115 	stw	fp,4(sp)
    e2fc:	df000104 	addi	fp,sp,4
    e300:	e13fff15 	stw	r4,-4(fp)
#if OS_THREAD_SAFE_NEWLIB
  if (locks == 0)
    e304:	d0a71d17 	ldw	r2,-25484(gp)
    e308:	10000b26 	beq	r2,zero,e338 <__env_unlock+0x48>
   /* 
    * release the environment once the number of locks == the number 
    * of unlocks 
    */

  if( (--locks) == 0 ) 
    e30c:	d0a71d17 	ldw	r2,-25484(gp)
    e310:	10bfffc4 	addi	r2,r2,-1
    e314:	d0a71d15 	stw	r2,-25484(gp)
    e318:	d0a71d17 	ldw	r2,-25484(gp)
    e31c:	1000071e 	bne	r2,zero,e33c <__env_unlock+0x4c>
  {
    lockid = -1;
    e320:	00bfffc4 	movi	r2,-1
    e324:	d0a00e15 	stw	r2,-32712(gp)
    OSSemPost( alt_envsem );
    e328:	d0a71e17 	ldw	r2,-25480(gp)
    e32c:	1009883a 	mov	r4,r2
    e330:	0013d980 	call	13d98 <OSSemPost>
    e334:	00000106 	br	e33c <__env_unlock+0x4c>

void __env_unlock ( struct _reent *_r )
{
#if OS_THREAD_SAFE_NEWLIB
  if (locks == 0)
    return;
    e338:	0001883a 	nop
  {
    lockid = -1;
    OSSemPost( alt_envsem );
  }
#endif /* OS_THREAD_SAFE_NEWLIB */
}
    e33c:	e037883a 	mov	sp,fp
    e340:	dfc00117 	ldw	ra,4(sp)
    e344:	df000017 	ldw	fp,0(sp)
    e348:	dec00204 	addi	sp,sp,8
    e34c:	f800283a 	ret

0000e350 <__malloc_lock>:
/*
 *
 */

void __malloc_lock ( struct _reent *_r )
{
    e350:	deffdb04 	addi	sp,sp,-148
    e354:	dfc02415 	stw	ra,144(sp)
    e358:	df002315 	stw	fp,140(sp)
    e35c:	df002304 	addi	fp,sp,140
    e360:	e13fff15 	stw	r4,-4(fp)
  OS_TCB tcb;
  OS_SEM_DATA semdata;
  INT8U err;
  int id;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    e364:	e03fdd15 	stw	zero,-140(fp)
#endif  
  
  if (OSRunning != OS_TRUE)
    e368:	d0a72143 	ldbu	r2,-25467(gp)
    e36c:	10803fcc 	andi	r2,r2,255
    e370:	10800060 	cmpeqi	r2,r2,1
    e374:	10003626 	beq	r2,zero,e450 <__malloc_lock+0x100>
      return;

  /* use our priority as a task id */

  err = OSTaskQuery( OS_PRIO_SELF, &tcb );
    e378:	e0bfe204 	addi	r2,fp,-120
    e37c:	100b883a 	mov	r5,r2
    e380:	01003fc4 	movi	r4,255
    e384:	00156900 	call	15690 <OSTaskQuery>
    e388:	e0bffe85 	stb	r2,-6(fp)
  if (err != OS_NO_ERR)
    e38c:	e0bffe83 	ldbu	r2,-6(fp)
    e390:	10803fcc 	andi	r2,r2,255
    e394:	1000301e 	bne	r2,zero,e458 <__malloc_lock+0x108>
    return;

  id = tcb.OSTCBPrio;
    e398:	e0bfee83 	ldbu	r2,-70(fp)
    e39c:	10803fcc 	andi	r2,r2,255
    e3a0:	e0bfde15 	stw	r2,-136(fp)
   
  /* see if we own the heap already */

  OSSemQuery( alt_heapsem, &semdata );
    e3a4:	d0a72017 	ldw	r2,-25472(gp)
    e3a8:	e0fffd04 	addi	r3,fp,-12
    e3ac:	180b883a 	mov	r5,r3
    e3b0:	1009883a 	mov	r4,r2
    e3b4:	0013ea80 	call	13ea8 <OSSemQuery>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    e3b8:	0005303a 	rdctl	r2,status
    e3bc:	e0bfe115 	stw	r2,-124(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    e3c0:	e0ffe117 	ldw	r3,-124(fp)
    e3c4:	00bfff84 	movi	r2,-2
    e3c8:	1884703a 	and	r2,r3,r2
    e3cc:	1001703a 	wrctl	status,r2
  
  return context;
    e3d0:	e0bfe117 	ldw	r2,-124(fp)
  
  OS_ENTER_CRITICAL();
    e3d4:	e0bfdd15 	stw	r2,-140(fp)

  if( !semdata.OSCnt && id == lockid ) 
    e3d8:	e0bffd0b 	ldhu	r2,-12(fp)
    e3dc:	10bfffcc 	andi	r2,r2,65535
    e3e0:	10000b1e 	bne	r2,zero,e410 <__malloc_lock+0xc0>
    e3e4:	d0a00f17 	ldw	r2,-32708(gp)
    e3e8:	e0ffde17 	ldw	r3,-136(fp)
    e3ec:	1880081e 	bne	r3,r2,e410 <__malloc_lock+0xc0>
  {
    /* we do; just count the recursion */
    locks++;
    e3f0:	d0a71f17 	ldw	r2,-25476(gp)
    e3f4:	10800044 	addi	r2,r2,1
    e3f8:	d0a71f15 	stw	r2,-25476(gp)
    e3fc:	e0bfdd17 	ldw	r2,-140(fp)
    e400:	e0bfdf15 	stw	r2,-132(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    e404:	e0bfdf17 	ldw	r2,-132(fp)
    e408:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    e40c:	00000e06 	br	e448 <__malloc_lock+0xf8>
    e410:	e0bfdd17 	ldw	r2,-140(fp)
    e414:	e0bfe015 	stw	r2,-128(fp)
    e418:	e0bfe017 	ldw	r2,-128(fp)
    e41c:	1001703a 	wrctl	status,r2
  else 
  {
    /* wait on the other task to yield the heap, then claim ownership of it */
    OS_EXIT_CRITICAL();

    OSSemPend( alt_heapsem, 0, &err );
    e420:	d0a72017 	ldw	r2,-25472(gp)
    e424:	e0fffe84 	addi	r3,fp,-6
    e428:	180d883a 	mov	r6,r3
    e42c:	000b883a 	mov	r5,zero
    e430:	1009883a 	mov	r4,r2
    e434:	0013a200 	call	13a20 <OSSemPend>
    locks  = 1;
    e438:	00800044 	movi	r2,1
    e43c:	d0a71f15 	stw	r2,-25476(gp)
    lockid = id;
    e440:	e0bfde17 	ldw	r2,-136(fp)
    e444:	d0a00f15 	stw	r2,-32708(gp)
  }

#endif /* OS_THREAD_SAFE_NEWLIB */
  return;
    e448:	0001883a 	nop
    e44c:	00000306 	br	e45c <__malloc_lock+0x10c>
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
#endif  
  
  if (OSRunning != OS_TRUE)
      return;
    e450:	0001883a 	nop
    e454:	00000106 	br	e45c <__malloc_lock+0x10c>

  /* use our priority as a task id */

  err = OSTaskQuery( OS_PRIO_SELF, &tcb );
  if (err != OS_NO_ERR)
    return;
    e458:	0001883a 	nop
    lockid = id;
  }

#endif /* OS_THREAD_SAFE_NEWLIB */
  return;
}
    e45c:	e037883a 	mov	sp,fp
    e460:	dfc00117 	ldw	ra,4(sp)
    e464:	df000017 	ldw	fp,0(sp)
    e468:	dec00204 	addi	sp,sp,8
    e46c:	f800283a 	ret

0000e470 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
    e470:	defff804 	addi	sp,sp,-32
    e474:	dfc00715 	stw	ra,28(sp)
    e478:	df000615 	stw	fp,24(sp)
    e47c:	df000604 	addi	fp,sp,24
    e480:	e13fff15 	stw	r4,-4(fp)
#if OS_THREAD_SAFE_NEWLIB

#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    e484:	e03ffa15 	stw	zero,-24(fp)
#endif 

  if (OSRunning != OS_TRUE)
    e488:	d0a72143 	ldbu	r2,-25467(gp)
    e48c:	10803fcc 	andi	r2,r2,255
    e490:	10800060 	cmpeqi	r2,r2,1
    e494:	10002326 	beq	r2,zero,e524 <__malloc_unlock+0xb4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    e498:	0005303a 	rdctl	r2,status
    e49c:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    e4a0:	e0fffe17 	ldw	r3,-8(fp)
    e4a4:	00bfff84 	movi	r2,-2
    e4a8:	1884703a 	and	r2,r3,r2
    e4ac:	1001703a 	wrctl	status,r2
  
  return context;
    e4b0:	e0bffe17 	ldw	r2,-8(fp)
      return;

  OS_ENTER_CRITICAL();
    e4b4:	e0bffa15 	stw	r2,-24(fp)
  if (locks == 0)
    e4b8:	d0a71f17 	ldw	r2,-25476(gp)
    e4bc:	1000051e 	bne	r2,zero,e4d4 <__malloc_unlock+0x64>
    e4c0:	e0bffa17 	ldw	r2,-24(fp)
    e4c4:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    e4c8:	e0bffb17 	ldw	r2,-20(fp)
    e4cc:	1001703a 	wrctl	status,r2
  {
      OS_EXIT_CRITICAL();
      return;
    e4d0:	00001506 	br	e528 <__malloc_unlock+0xb8>
  }

  /* release the heap once the number of locks == the number of unlocks */
  if( (--locks) == 0 ) 
    e4d4:	d0a71f17 	ldw	r2,-25476(gp)
    e4d8:	10bfffc4 	addi	r2,r2,-1
    e4dc:	d0a71f15 	stw	r2,-25476(gp)
    e4e0:	d0a71f17 	ldw	r2,-25476(gp)
    e4e4:	10000a1e 	bne	r2,zero,e510 <__malloc_unlock+0xa0>
  {
    lockid = -1;
    e4e8:	00bfffc4 	movi	r2,-1
    e4ec:	d0a00f15 	stw	r2,-32708(gp)
    e4f0:	e0bffa17 	ldw	r2,-24(fp)
    e4f4:	e0bffc15 	stw	r2,-16(fp)
    e4f8:	e0bffc17 	ldw	r2,-16(fp)
    e4fc:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OSSemPost( alt_heapsem );
    e500:	d0a72017 	ldw	r2,-25472(gp)
    e504:	1009883a 	mov	r4,r2
    e508:	0013d980 	call	13d98 <OSSemPost>
    e50c:	00000606 	br	e528 <__malloc_unlock+0xb8>
    e510:	e0bffa17 	ldw	r2,-24(fp)
    e514:	e0bffd15 	stw	r2,-12(fp)
    e518:	e0bffd17 	ldw	r2,-12(fp)
    e51c:	1001703a 	wrctl	status,r2
    e520:	00000106 	br	e528 <__malloc_unlock+0xb8>
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
#endif 

  if (OSRunning != OS_TRUE)
      return;
    e524:	0001883a 	nop
  {
      OS_EXIT_CRITICAL();
  }
  
#endif /* OS_THREAD_SAFE_NEWLIB */
}
    e528:	e037883a 	mov	sp,fp
    e52c:	dfc00117 	ldw	ra,4(sp)
    e530:	df000017 	ldw	fp,0(sp)
    e534:	dec00204 	addi	sp,sp,8
    e538:	f800283a 	ret

0000e53c <OSEventNameGet>:
*********************************************************************************************************
*/

#if (OS_EVENT_EN) && (OS_EVENT_NAME_SIZE > 1)
INT8U  OSEventNameGet (OS_EVENT *pevent, INT8U *pname, INT8U *perr)
{
    e53c:	defff704 	addi	sp,sp,-36
    e540:	dfc00815 	stw	ra,32(sp)
    e544:	df000715 	stw	fp,28(sp)
    e548:	df000704 	addi	fp,sp,28
    e54c:	e13ffd15 	stw	r4,-12(fp)
    e550:	e17ffe15 	stw	r5,-8(fp)
    e554:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    e558:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
    e55c:	e0bfff17 	ldw	r2,-4(fp)
    e560:	1000021e 	bne	r2,zero,e56c <OSEventNameGet+0x30>
        return (0);
    e564:	0005883a 	mov	r2,zero
    e568:	00003706 	br	e648 <OSEventNameGet+0x10c>
    }
    if (pevent == (OS_EVENT *)0) {               /* Is 'pevent' a NULL pointer?                        */
    e56c:	e0bffd17 	ldw	r2,-12(fp)
    e570:	1000051e 	bne	r2,zero,e588 <OSEventNameGet+0x4c>
        *perr = OS_ERR_PEVENT_NULL;
    e574:	e0bfff17 	ldw	r2,-4(fp)
    e578:	00c00104 	movi	r3,4
    e57c:	10c00005 	stb	r3,0(r2)
        return (0);
    e580:	0005883a 	mov	r2,zero
    e584:	00003006 	br	e648 <OSEventNameGet+0x10c>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
    e588:	e0bffe17 	ldw	r2,-8(fp)
    e58c:	1000051e 	bne	r2,zero,e5a4 <OSEventNameGet+0x68>
        *perr = OS_ERR_PNAME_NULL;
    e590:	e0bfff17 	ldw	r2,-4(fp)
    e594:	00c00304 	movi	r3,12
    e598:	10c00005 	stb	r3,0(r2)
        return (0);
    e59c:	0005883a 	mov	r2,zero
    e5a0:	00002906 	br	e648 <OSEventNameGet+0x10c>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
    e5a4:	d0a72f03 	ldbu	r2,-25412(gp)
    e5a8:	10803fcc 	andi	r2,r2,255
    e5ac:	10000526 	beq	r2,zero,e5c4 <OSEventNameGet+0x88>
        *perr  = OS_ERR_NAME_GET_ISR;
    e5b0:	e0bfff17 	ldw	r2,-4(fp)
    e5b4:	00c00444 	movi	r3,17
    e5b8:	10c00005 	stb	r3,0(r2)
        return (0);
    e5bc:	0005883a 	mov	r2,zero
    e5c0:	00002106 	br	e648 <OSEventNameGet+0x10c>
    }
    switch (pevent->OSEventType) {
    e5c4:	e0bffd17 	ldw	r2,-12(fp)
    e5c8:	10800003 	ldbu	r2,0(r2)
    e5cc:	10803fcc 	andi	r2,r2,255
    e5d0:	10bfffc4 	addi	r2,r2,-1
    e5d4:	10800128 	cmpgeui	r2,r2,4
    e5d8:	10000526 	beq	r2,zero,e5f0 <OSEventNameGet+0xb4>
        case OS_EVENT_TYPE_MBOX:
        case OS_EVENT_TYPE_Q:
             break;

        default:
             *perr = OS_ERR_EVENT_TYPE;
    e5dc:	e0bfff17 	ldw	r2,-4(fp)
    e5e0:	00c00044 	movi	r3,1
    e5e4:	10c00005 	stb	r3,0(r2)
             return (0);
    e5e8:	0005883a 	mov	r2,zero
    e5ec:	00001606 	br	e648 <OSEventNameGet+0x10c>
    switch (pevent->OSEventType) {
        case OS_EVENT_TYPE_SEM:
        case OS_EVENT_TYPE_MUTEX:
        case OS_EVENT_TYPE_MBOX:
        case OS_EVENT_TYPE_Q:
             break;
    e5f0:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    e5f4:	0005303a 	rdctl	r2,status
    e5f8:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    e5fc:	e0fffb17 	ldw	r3,-20(fp)
    e600:	00bfff84 	movi	r2,-2
    e604:	1884703a 	and	r2,r3,r2
    e608:	1001703a 	wrctl	status,r2
  
  return context;
    e60c:	e0bffb17 	ldw	r2,-20(fp)

        default:
             *perr = OS_ERR_EVENT_TYPE;
             return (0);
    }
    OS_ENTER_CRITICAL();
    e610:	e0bff915 	stw	r2,-28(fp)
    len   = OS_StrCopy(pname, pevent->OSEventName);   /* Copy name from OS_EVENT                       */
    e614:	e0bffd17 	ldw	r2,-12(fp)
    e618:	10800384 	addi	r2,r2,14
    e61c:	100b883a 	mov	r5,r2
    e620:	e13ffe17 	ldw	r4,-8(fp)
    e624:	000ffc00 	call	ffc0 <OS_StrCopy>
    e628:	e0bffa05 	stb	r2,-24(fp)
    e62c:	e0bff917 	ldw	r2,-28(fp)
    e630:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    e634:	e0bffc17 	ldw	r2,-16(fp)
    e638:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
    e63c:	e0bfff17 	ldw	r2,-4(fp)
    e640:	10000005 	stb	zero,0(r2)
    return (len);
    e644:	e0bffa03 	ldbu	r2,-24(fp)
}
    e648:	e037883a 	mov	sp,fp
    e64c:	dfc00117 	ldw	ra,4(sp)
    e650:	df000017 	ldw	fp,0(sp)
    e654:	dec00204 	addi	sp,sp,8
    e658:	f800283a 	ret

0000e65c <OSEventNameSet>:
*********************************************************************************************************
*/

#if (OS_EVENT_EN) && (OS_EVENT_NAME_SIZE > 1)
void  OSEventNameSet (OS_EVENT *pevent, INT8U *pname, INT8U *perr)
{
    e65c:	defff604 	addi	sp,sp,-40
    e660:	dfc00915 	stw	ra,36(sp)
    e664:	df000815 	stw	fp,32(sp)
    e668:	df000804 	addi	fp,sp,32
    e66c:	e13ffd15 	stw	r4,-12(fp)
    e670:	e17ffe15 	stw	r5,-8(fp)
    e674:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    e678:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
    e67c:	e0bfff17 	ldw	r2,-4(fp)
    e680:	10004026 	beq	r2,zero,e784 <OSEventNameSet+0x128>
        return;
    }
    if (pevent == (OS_EVENT *)0) {               /* Is 'pevent' a NULL pointer?                        */
    e684:	e0bffd17 	ldw	r2,-12(fp)
    e688:	1000041e 	bne	r2,zero,e69c <OSEventNameSet+0x40>
        *perr = OS_ERR_PEVENT_NULL;
    e68c:	e0bfff17 	ldw	r2,-4(fp)
    e690:	00c00104 	movi	r3,4
    e694:	10c00005 	stb	r3,0(r2)
        return;
    e698:	00003b06 	br	e788 <OSEventNameSet+0x12c>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
    e69c:	e0bffe17 	ldw	r2,-8(fp)
    e6a0:	1000041e 	bne	r2,zero,e6b4 <OSEventNameSet+0x58>
        *perr = OS_ERR_PNAME_NULL;
    e6a4:	e0bfff17 	ldw	r2,-4(fp)
    e6a8:	00c00304 	movi	r3,12
    e6ac:	10c00005 	stb	r3,0(r2)
        return;
    e6b0:	00003506 	br	e788 <OSEventNameSet+0x12c>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
    e6b4:	d0a72f03 	ldbu	r2,-25412(gp)
    e6b8:	10803fcc 	andi	r2,r2,255
    e6bc:	10000426 	beq	r2,zero,e6d0 <OSEventNameSet+0x74>
        *perr = OS_ERR_NAME_SET_ISR;
    e6c0:	e0bfff17 	ldw	r2,-4(fp)
    e6c4:	00c00484 	movi	r3,18
    e6c8:	10c00005 	stb	r3,0(r2)
        return;
    e6cc:	00002e06 	br	e788 <OSEventNameSet+0x12c>
    }
    switch (pevent->OSEventType) {
    e6d0:	e0bffd17 	ldw	r2,-12(fp)
    e6d4:	10800003 	ldbu	r2,0(r2)
    e6d8:	10803fcc 	andi	r2,r2,255
    e6dc:	10bfffc4 	addi	r2,r2,-1
    e6e0:	10800128 	cmpgeui	r2,r2,4
    e6e4:	10000426 	beq	r2,zero,e6f8 <OSEventNameSet+0x9c>
        case OS_EVENT_TYPE_MBOX:
        case OS_EVENT_TYPE_Q:
             break;

        default:
             *perr = OS_ERR_EVENT_TYPE;
    e6e8:	e0bfff17 	ldw	r2,-4(fp)
    e6ec:	00c00044 	movi	r3,1
    e6f0:	10c00005 	stb	r3,0(r2)
             return;
    e6f4:	00002406 	br	e788 <OSEventNameSet+0x12c>
    switch (pevent->OSEventType) {
        case OS_EVENT_TYPE_SEM:
        case OS_EVENT_TYPE_MUTEX:
        case OS_EVENT_TYPE_MBOX:
        case OS_EVENT_TYPE_Q:
             break;
    e6f8:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    e6fc:	0005303a 	rdctl	r2,status
    e700:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    e704:	e0fffc17 	ldw	r3,-16(fp)
    e708:	00bfff84 	movi	r2,-2
    e70c:	1884703a 	and	r2,r3,r2
    e710:	1001703a 	wrctl	status,r2
  
  return context;
    e714:	e0bffc17 	ldw	r2,-16(fp)

        default:
             *perr = OS_ERR_EVENT_TYPE;
             return;
    }
    OS_ENTER_CRITICAL();
    e718:	e0bff815 	stw	r2,-32(fp)
    len = OS_StrLen(pname);                           /* Can we fit the string in the storage area?    */
    e71c:	e13ffe17 	ldw	r4,-8(fp)
    e720:	00100340 	call	10034 <OS_StrLen>
    e724:	e0bffa05 	stb	r2,-24(fp)
    if (len > (OS_EVENT_NAME_SIZE - 1)) {             /* No                                            */
    e728:	e0bffa03 	ldbu	r2,-24(fp)
    e72c:	10800830 	cmpltui	r2,r2,32
    e730:	1000081e 	bne	r2,zero,e754 <OSEventNameSet+0xf8>
    e734:	e0bff817 	ldw	r2,-32(fp)
    e738:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    e73c:	e0bff917 	ldw	r2,-28(fp)
    e740:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_EVENT_NAME_TOO_LONG;
    e744:	e0bfff17 	ldw	r2,-4(fp)
    e748:	00c002c4 	movi	r3,11
    e74c:	10c00005 	stb	r3,0(r2)
        return;
    e750:	00000d06 	br	e788 <OSEventNameSet+0x12c>
    }
    (void)OS_StrCopy(pevent->OSEventName, pname);     /* Yes, copy name to the event control block     */
    e754:	e0bffd17 	ldw	r2,-12(fp)
    e758:	10800384 	addi	r2,r2,14
    e75c:	e17ffe17 	ldw	r5,-8(fp)
    e760:	1009883a 	mov	r4,r2
    e764:	000ffc00 	call	ffc0 <OS_StrCopy>
    e768:	e0bff817 	ldw	r2,-32(fp)
    e76c:	e0bffb15 	stw	r2,-20(fp)
    e770:	e0bffb17 	ldw	r2,-20(fp)
    e774:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
    e778:	e0bfff17 	ldw	r2,-4(fp)
    e77c:	10000005 	stb	zero,0(r2)
    e780:	00000106 	br	e788 <OSEventNameSet+0x12c>



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
        return;
    e784:	0001883a 	nop
        return;
    }
    (void)OS_StrCopy(pevent->OSEventName, pname);     /* Yes, copy name to the event control block     */
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
}
    e788:	e037883a 	mov	sp,fp
    e78c:	dfc00117 	ldw	ra,4(sp)
    e790:	df000017 	ldw	fp,0(sp)
    e794:	dec00204 	addi	sp,sp,8
    e798:	f800283a 	ret

0000e79c <OSEventPendMulti>:
*********************************************************************************************************
*/
/*$PAGE*/
#if ((OS_EVENT_EN) && (OS_EVENT_MULTI_EN > 0))
INT16U  OSEventPendMulti (OS_EVENT **pevents_pend, OS_EVENT **pevents_rdy, void **pmsgs_rdy, INT16U timeout, INT8U *perr)
{
    e79c:	deffed04 	addi	sp,sp,-76
    e7a0:	dfc01215 	stw	ra,72(sp)
    e7a4:	df001115 	stw	fp,68(sp)
    e7a8:	df001104 	addi	fp,sp,68
    e7ac:	e13ffc15 	stw	r4,-16(fp)
    e7b0:	e17ffd15 	stw	r5,-12(fp)
    e7b4:	e1bffe15 	stw	r6,-8(fp)
    e7b8:	3805883a 	mov	r2,r7
    e7bc:	e0bfff0d 	sth	r2,-4(fp)
#endif
    BOOLEAN     events_rdy;
    INT16U      events_rdy_nbr;
    INT8U       events_stat;
#if (OS_CRITICAL_METHOD == 3)                           /* Allocate storage for CPU status register    */
    OS_CPU_SR   cpu_sr = 0;
    e7c0:	e03ff315 	stw	zero,-52(fp)
#endif



#if (OS_ARG_CHK_EN > 0)
    if (perr == (INT8U *)0) {                           /* Validate 'perr'                             */
    e7c4:	e0800217 	ldw	r2,8(fp)
    e7c8:	1000021e 	bne	r2,zero,e7d4 <OSEventPendMulti+0x38>
        return (0);
    e7cc:	0005883a 	mov	r2,zero
    e7d0:	00017106 	br	ed98 <OSEventPendMulti+0x5fc>
    }
    if (pevents_pend == (OS_EVENT **)0) {               /* Validate 'pevents_pend'                     */
    e7d4:	e0bffc17 	ldw	r2,-16(fp)
    e7d8:	1000051e 	bne	r2,zero,e7f0 <OSEventPendMulti+0x54>
       *perr =  OS_ERR_PEVENT_NULL;
    e7dc:	e0800217 	ldw	r2,8(fp)
    e7e0:	00c00104 	movi	r3,4
    e7e4:	10c00005 	stb	r3,0(r2)
        return (0);
    e7e8:	0005883a 	mov	r2,zero
    e7ec:	00016a06 	br	ed98 <OSEventPendMulti+0x5fc>
    }
    if (pevents_rdy  == (OS_EVENT **)0) {               /* Validate 'pevents_rdy'                      */
    e7f0:	e0bffd17 	ldw	r2,-12(fp)
    e7f4:	1000051e 	bne	r2,zero,e80c <OSEventPendMulti+0x70>
       *perr =  OS_ERR_PEVENT_NULL;
    e7f8:	e0800217 	ldw	r2,8(fp)
    e7fc:	00c00104 	movi	r3,4
    e800:	10c00005 	stb	r3,0(r2)
        return (0);
    e804:	0005883a 	mov	r2,zero
    e808:	00016306 	br	ed98 <OSEventPendMulti+0x5fc>
    }
    if (pmsgs_rdy == (void **)0) {                      /* Validate 'pmsgs_rdy'                        */
    e80c:	e0bffe17 	ldw	r2,-8(fp)
    e810:	1000051e 	bne	r2,zero,e828 <OSEventPendMulti+0x8c>
       *perr =  OS_ERR_PEVENT_NULL;
    e814:	e0800217 	ldw	r2,8(fp)
    e818:	00c00104 	movi	r3,4
    e81c:	10c00005 	stb	r3,0(r2)
        return (0);
    e820:	0005883a 	mov	r2,zero
    e824:	00015c06 	br	ed98 <OSEventPendMulti+0x5fc>
    }
#endif

   *pevents_rdy = (OS_EVENT *)0;                        /* Init array to NULL in case of errors        */
    e828:	e0bffd17 	ldw	r2,-12(fp)
    e82c:	10000015 	stw	zero,0(r2)

    pevents     =  pevents_pend;
    e830:	e0bffc17 	ldw	r2,-16(fp)
    e834:	e0bfef15 	stw	r2,-68(fp)
    pevent      = *pevents;
    e838:	e0bfef17 	ldw	r2,-68(fp)
    e83c:	10800017 	ldw	r2,0(r2)
    e840:	e0bff015 	stw	r2,-64(fp)
    while  (pevent != (OS_EVENT *)0) {
    e844:	00001906 	br	e8ac <OSEventPendMulti+0x110>
        switch (pevent->OSEventType) {                  /* Validate event block types                  */
    e848:	e0bff017 	ldw	r2,-64(fp)
    e84c:	10800003 	ldbu	r2,0(r2)
    e850:	10803fcc 	andi	r2,r2,255
    e854:	10c000a0 	cmpeqi	r3,r2,2
    e858:	1800091e 	bne	r3,zero,e880 <OSEventPendMulti+0xe4>
    e85c:	10c000e0 	cmpeqi	r3,r2,3
    e860:	1800091e 	bne	r3,zero,e888 <OSEventPendMulti+0xec>
    e864:	10800060 	cmpeqi	r2,r2,1
    e868:	1000091e 	bne	r2,zero,e890 <OSEventPendMulti+0xf4>
#endif

            case OS_EVENT_TYPE_MUTEX:                                            
            case OS_EVENT_TYPE_FLAG:
            default:           
                *perr = OS_ERR_EVENT_TYPE;
    e86c:	e0800217 	ldw	r2,8(fp)
    e870:	00c00044 	movi	r3,1
    e874:	10c00005 	stb	r3,0(r2)
                 return (0);
    e878:	0005883a 	mov	r2,zero
    e87c:	00014606 	br	ed98 <OSEventPendMulti+0x5fc>
            case OS_EVENT_TYPE_MBOX:
                 break;
#endif
#if ((OS_Q_EN   > 0) && (OS_MAX_QS > 0))
            case OS_EVENT_TYPE_Q:
                 break;
    e880:	0001883a 	nop
    e884:	00000306 	br	e894 <OSEventPendMulti+0xf8>
    pevent      = *pevents;
    while  (pevent != (OS_EVENT *)0) {
        switch (pevent->OSEventType) {                  /* Validate event block types                  */
#if (OS_SEM_EN  > 0)
            case OS_EVENT_TYPE_SEM:
                 break;
    e888:	0001883a 	nop
    e88c:	00000106 	br	e894 <OSEventPendMulti+0xf8>
#endif
#if (OS_MBOX_EN > 0)
            case OS_EVENT_TYPE_MBOX:
                 break;
    e890:	0001883a 	nop
            case OS_EVENT_TYPE_FLAG:
            default:           
                *perr = OS_ERR_EVENT_TYPE;
                 return (0);
        }
        pevents++;
    e894:	e0bfef17 	ldw	r2,-68(fp)
    e898:	10800104 	addi	r2,r2,4
    e89c:	e0bfef15 	stw	r2,-68(fp)
        pevent = *pevents;
    e8a0:	e0bfef17 	ldw	r2,-68(fp)
    e8a4:	10800017 	ldw	r2,0(r2)
    e8a8:	e0bff015 	stw	r2,-64(fp)

   *pevents_rdy = (OS_EVENT *)0;                        /* Init array to NULL in case of errors        */

    pevents     =  pevents_pend;
    pevent      = *pevents;
    while  (pevent != (OS_EVENT *)0) {
    e8ac:	e0bff017 	ldw	r2,-64(fp)
    e8b0:	103fe51e 	bne	r2,zero,e848 <__alt_data_end+0xfffde848>
        }
        pevents++;
        pevent = *pevents;
    }

    if (OSIntNesting  > 0) {                            /* See if called from ISR ...                  */
    e8b4:	d0a72f03 	ldbu	r2,-25412(gp)
    e8b8:	10803fcc 	andi	r2,r2,255
    e8bc:	10000526 	beq	r2,zero,e8d4 <OSEventPendMulti+0x138>
       *perr =  OS_ERR_PEND_ISR;                        /* ... can't PEND from an ISR                  */
    e8c0:	e0800217 	ldw	r2,8(fp)
    e8c4:	00c00084 	movi	r3,2
    e8c8:	10c00005 	stb	r3,0(r2)
        return (0);
    e8cc:	0005883a 	mov	r2,zero
    e8d0:	00013106 	br	ed98 <OSEventPendMulti+0x5fc>
    }
    if (OSLockNesting > 0) {                            /* See if called with scheduler locked ...     */
    e8d4:	d0a72103 	ldbu	r2,-25468(gp)
    e8d8:	10803fcc 	andi	r2,r2,255
    e8dc:	10000526 	beq	r2,zero,e8f4 <OSEventPendMulti+0x158>
       *perr =  OS_ERR_PEND_LOCKED;                     /* ... can't PEND when locked                  */
    e8e0:	e0800217 	ldw	r2,8(fp)
    e8e4:	00c00344 	movi	r3,13
    e8e8:	10c00005 	stb	r3,0(r2)
        return (0);
    e8ec:	0005883a 	mov	r2,zero
    e8f0:	00012906 	br	ed98 <OSEventPendMulti+0x5fc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    e8f4:	0005303a 	rdctl	r2,status
    e8f8:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    e8fc:	e0fffb17 	ldw	r3,-20(fp)
    e900:	00bfff84 	movi	r2,-2
    e904:	1884703a 	and	r2,r3,r2
    e908:	1001703a 	wrctl	status,r2
  
  return context;
    e90c:	e0bffb17 	ldw	r2,-20(fp)
    }

/*$PAGE*/
    OS_ENTER_CRITICAL();
    e910:	e0bff315 	stw	r2,-52(fp)
    events_rdy     =  OS_FALSE;
    e914:	e03ff105 	stb	zero,-60(fp)
    events_rdy_nbr =  0;
    e918:	e03ff18d 	sth	zero,-58(fp)
    events_stat    =  OS_STAT_RDY;
    e91c:	e03ff205 	stb	zero,-56(fp)
    pevents        =  pevents_pend;
    e920:	e0bffc17 	ldw	r2,-16(fp)
    e924:	e0bfef15 	stw	r2,-68(fp)
    pevent         = *pevents;
    e928:	e0bfef17 	ldw	r2,-68(fp)
    e92c:	10800017 	ldw	r2,0(r2)
    e930:	e0bff015 	stw	r2,-64(fp)
    while (pevent != (OS_EVENT *)0) {                   /* See if any events already available         */
    e934:	00008106 	br	eb3c <OSEventPendMulti+0x3a0>
        switch (pevent->OSEventType) {
    e938:	e0bff017 	ldw	r2,-64(fp)
    e93c:	10800003 	ldbu	r2,0(r2)
    e940:	10803fcc 	andi	r2,r2,255
    e944:	10c000a0 	cmpeqi	r3,r2,2
    e948:	18003c1e 	bne	r3,zero,ea3c <OSEventPendMulti+0x2a0>
    e94c:	10c000e0 	cmpeqi	r3,r2,3
    e950:	1800031e 	bne	r3,zero,e960 <OSEventPendMulti+0x1c4>
    e954:	10800060 	cmpeqi	r2,r2,1
    e958:	10001e1e 	bne	r2,zero,e9d4 <OSEventPendMulti+0x238>
    e95c:	00006606 	br	eaf8 <OSEventPendMulti+0x35c>
#if (OS_SEM_EN > 0)
            case OS_EVENT_TYPE_SEM:
                 if (pevent->OSEventCnt > 0) {          /* If semaphore count > 0, resource available; */
    e960:	e0bff017 	ldw	r2,-64(fp)
    e964:	1080020b 	ldhu	r2,8(r2)
    e968:	10bfffcc 	andi	r2,r2,65535
    e96c:	10001526 	beq	r2,zero,e9c4 <OSEventPendMulti+0x228>
                     pevent->OSEventCnt--;              /* ... decrement semaphore,                ... */
    e970:	e0bff017 	ldw	r2,-64(fp)
    e974:	1080020b 	ldhu	r2,8(r2)
    e978:	10bfffc4 	addi	r2,r2,-1
    e97c:	1007883a 	mov	r3,r2
    e980:	e0bff017 	ldw	r2,-64(fp)
    e984:	10c0020d 	sth	r3,8(r2)
                    *pevents_rdy++ =  pevent;           /* ... and return available semaphore event    */
    e988:	e0bffd17 	ldw	r2,-12(fp)
    e98c:	10c00104 	addi	r3,r2,4
    e990:	e0fffd15 	stw	r3,-12(fp)
    e994:	e0fff017 	ldw	r3,-64(fp)
    e998:	10c00015 	stw	r3,0(r2)
                      events_rdy   =  OS_TRUE;
    e99c:	00800044 	movi	r2,1
    e9a0:	e0bff105 	stb	r2,-60(fp)
                    *pmsgs_rdy++   = (void *)0;         /* NO message returned  for semaphores         */
    e9a4:	e0bffe17 	ldw	r2,-8(fp)
    e9a8:	10c00104 	addi	r3,r2,4
    e9ac:	e0fffe15 	stw	r3,-8(fp)
    e9b0:	10000015 	stw	zero,0(r2)
                      events_rdy_nbr++;
    e9b4:	e0bff18b 	ldhu	r2,-58(fp)
    e9b8:	10800044 	addi	r2,r2,1
    e9bc:	e0bff18d 	sth	r2,-58(fp)

                 } else {
                      events_stat |=  OS_STAT_SEM;      /* Configure multi-pend for semaphore events   */
                 }
                 break;
    e9c0:	00005806 	br	eb24 <OSEventPendMulti+0x388>
                      events_rdy   =  OS_TRUE;
                    *pmsgs_rdy++   = (void *)0;         /* NO message returned  for semaphores         */
                      events_rdy_nbr++;

                 } else {
                      events_stat |=  OS_STAT_SEM;      /* Configure multi-pend for semaphore events   */
    e9c4:	e0bff203 	ldbu	r2,-56(fp)
    e9c8:	10800054 	ori	r2,r2,1
    e9cc:	e0bff205 	stb	r2,-56(fp)
                 }
                 break;
    e9d0:	00005406 	br	eb24 <OSEventPendMulti+0x388>
#endif

#if (OS_MBOX_EN > 0)
            case OS_EVENT_TYPE_MBOX:
                 if (pevent->OSEventPtr != (void *)0) { /* If mailbox NOT empty;                   ... */
    e9d4:	e0bff017 	ldw	r2,-64(fp)
    e9d8:	10800117 	ldw	r2,4(r2)
    e9dc:	10001326 	beq	r2,zero,ea2c <OSEventPendMulti+0x290>
                                                        /* ... return available message,           ... */
                    *pmsgs_rdy++         = (void *)pevent->OSEventPtr;
    e9e0:	e0bffe17 	ldw	r2,-8(fp)
    e9e4:	10c00104 	addi	r3,r2,4
    e9e8:	e0fffe15 	stw	r3,-8(fp)
    e9ec:	e0fff017 	ldw	r3,-64(fp)
    e9f0:	18c00117 	ldw	r3,4(r3)
    e9f4:	10c00015 	stw	r3,0(r2)
                     pevent->OSEventPtr  = (void *)0;
    e9f8:	e0bff017 	ldw	r2,-64(fp)
    e9fc:	10000115 	stw	zero,4(r2)
                    *pevents_rdy++       =  pevent;     /* ... and return available mailbox event      */
    ea00:	e0bffd17 	ldw	r2,-12(fp)
    ea04:	10c00104 	addi	r3,r2,4
    ea08:	e0fffd15 	stw	r3,-12(fp)
    ea0c:	e0fff017 	ldw	r3,-64(fp)
    ea10:	10c00015 	stw	r3,0(r2)
                      events_rdy         =  OS_TRUE;
    ea14:	00800044 	movi	r2,1
    ea18:	e0bff105 	stb	r2,-60(fp)
                      events_rdy_nbr++;
    ea1c:	e0bff18b 	ldhu	r2,-58(fp)
    ea20:	10800044 	addi	r2,r2,1
    ea24:	e0bff18d 	sth	r2,-58(fp)

                 } else {
                      events_stat |= OS_STAT_MBOX;      /* Configure multi-pend for mailbox events     */
                 }
                 break;
    ea28:	00003e06 	br	eb24 <OSEventPendMulti+0x388>
                    *pevents_rdy++       =  pevent;     /* ... and return available mailbox event      */
                      events_rdy         =  OS_TRUE;
                      events_rdy_nbr++;

                 } else {
                      events_stat |= OS_STAT_MBOX;      /* Configure multi-pend for mailbox events     */
    ea2c:	e0bff203 	ldbu	r2,-56(fp)
    ea30:	10800094 	ori	r2,r2,2
    ea34:	e0bff205 	stb	r2,-56(fp)
                 }
                 break;
    ea38:	00003a06 	br	eb24 <OSEventPendMulti+0x388>
#endif

#if ((OS_Q_EN > 0) && (OS_MAX_QS > 0))
            case OS_EVENT_TYPE_Q:
                 pq = (OS_Q *)pevent->OSEventPtr;
    ea3c:	e0bff017 	ldw	r2,-64(fp)
    ea40:	10800117 	ldw	r2,4(r2)
    ea44:	e0bff515 	stw	r2,-44(fp)
                 if (pq->OSQEntries > 0) {              /* If queue NOT empty;                     ... */
    ea48:	e0bff517 	ldw	r2,-44(fp)
    ea4c:	1080058b 	ldhu	r2,22(r2)
    ea50:	10bfffcc 	andi	r2,r2,65535
    ea54:	10002426 	beq	r2,zero,eae8 <OSEventPendMulti+0x34c>
                                                        /* ... return available message,           ... */
                    *pmsgs_rdy++ = (void *)*pq->OSQOut++;
    ea58:	e0bffe17 	ldw	r2,-8(fp)
    ea5c:	10c00104 	addi	r3,r2,4
    ea60:	e0fffe15 	stw	r3,-8(fp)
    ea64:	e0fff517 	ldw	r3,-44(fp)
    ea68:	18c00417 	ldw	r3,16(r3)
    ea6c:	19400104 	addi	r5,r3,4
    ea70:	e13ff517 	ldw	r4,-44(fp)
    ea74:	21400415 	stw	r5,16(r4)
    ea78:	18c00017 	ldw	r3,0(r3)
    ea7c:	10c00015 	stw	r3,0(r2)
                     if (pq->OSQOut == pq->OSQEnd) {    /* If OUT ptr at queue end, ...                */
    ea80:	e0bff517 	ldw	r2,-44(fp)
    ea84:	10c00417 	ldw	r3,16(r2)
    ea88:	e0bff517 	ldw	r2,-44(fp)
    ea8c:	10800217 	ldw	r2,8(r2)
    ea90:	1880041e 	bne	r3,r2,eaa4 <OSEventPendMulti+0x308>
                         pq->OSQOut  = pq->OSQStart;    /* ... wrap   to queue start                   */
    ea94:	e0bff517 	ldw	r2,-44(fp)
    ea98:	10c00117 	ldw	r3,4(r2)
    ea9c:	e0bff517 	ldw	r2,-44(fp)
    eaa0:	10c00415 	stw	r3,16(r2)
                     }
                     pq->OSQEntries--;                  /* Update number of queue entries              */
    eaa4:	e0bff517 	ldw	r2,-44(fp)
    eaa8:	1080058b 	ldhu	r2,22(r2)
    eaac:	10bfffc4 	addi	r2,r2,-1
    eab0:	1007883a 	mov	r3,r2
    eab4:	e0bff517 	ldw	r2,-44(fp)
    eab8:	10c0058d 	sth	r3,22(r2)
                    *pevents_rdy++ = pevent;            /* ... and return available queue event        */
    eabc:	e0bffd17 	ldw	r2,-12(fp)
    eac0:	10c00104 	addi	r3,r2,4
    eac4:	e0fffd15 	stw	r3,-12(fp)
    eac8:	e0fff017 	ldw	r3,-64(fp)
    eacc:	10c00015 	stw	r3,0(r2)
                      events_rdy   = OS_TRUE;
    ead0:	00800044 	movi	r2,1
    ead4:	e0bff105 	stb	r2,-60(fp)
                      events_rdy_nbr++;
    ead8:	e0bff18b 	ldhu	r2,-58(fp)
    eadc:	10800044 	addi	r2,r2,1
    eae0:	e0bff18d 	sth	r2,-58(fp)

                 } else {
                      events_stat |= OS_STAT_Q;         /* Configure multi-pend for queue events       */
                 }
                 break;
    eae4:	00000f06 	br	eb24 <OSEventPendMulti+0x388>
                    *pevents_rdy++ = pevent;            /* ... and return available queue event        */
                      events_rdy   = OS_TRUE;
                      events_rdy_nbr++;

                 } else {
                      events_stat |= OS_STAT_Q;         /* Configure multi-pend for queue events       */
    eae8:	e0bff203 	ldbu	r2,-56(fp)
    eaec:	10800114 	ori	r2,r2,4
    eaf0:	e0bff205 	stb	r2,-56(fp)
                 }
                 break;
    eaf4:	00000b06 	br	eb24 <OSEventPendMulti+0x388>
    eaf8:	e0bff317 	ldw	r2,-52(fp)
    eafc:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    eb00:	e0bff417 	ldw	r2,-48(fp)
    eb04:	1001703a 	wrctl	status,r2

            case OS_EVENT_TYPE_MUTEX:                                            
            case OS_EVENT_TYPE_FLAG:
            default:           
                 OS_EXIT_CRITICAL();
                *pevents_rdy = (OS_EVENT *)0;           /* NULL terminate return event array           */
    eb08:	e0bffd17 	ldw	r2,-12(fp)
    eb0c:	10000015 	stw	zero,0(r2)
                *perr        =  OS_ERR_EVENT_TYPE;
    eb10:	e0800217 	ldw	r2,8(fp)
    eb14:	00c00044 	movi	r3,1
    eb18:	10c00005 	stb	r3,0(r2)
                 return (events_rdy_nbr);
    eb1c:	e0bff18b 	ldhu	r2,-58(fp)
    eb20:	00009d06 	br	ed98 <OSEventPendMulti+0x5fc>
        }
        pevents++;
    eb24:	e0bfef17 	ldw	r2,-68(fp)
    eb28:	10800104 	addi	r2,r2,4
    eb2c:	e0bfef15 	stw	r2,-68(fp)
        pevent = *pevents;
    eb30:	e0bfef17 	ldw	r2,-68(fp)
    eb34:	10800017 	ldw	r2,0(r2)
    eb38:	e0bff015 	stw	r2,-64(fp)
    events_rdy     =  OS_FALSE;
    events_rdy_nbr =  0;
    events_stat    =  OS_STAT_RDY;
    pevents        =  pevents_pend;
    pevent         = *pevents;
    while (pevent != (OS_EVENT *)0) {                   /* See if any events already available         */
    eb3c:	e0bff017 	ldw	r2,-64(fp)
    eb40:	103f7d1e 	bne	r2,zero,e938 <__alt_data_end+0xfffde938>
        }
        pevents++;
        pevent = *pevents;
    }

    if ( events_rdy == OS_TRUE) {                       /* Return any events already available         */
    eb44:	e0bff103 	ldbu	r2,-60(fp)
    eb48:	10800058 	cmpnei	r2,r2,1
    eb4c:	10000a1e 	bne	r2,zero,eb78 <OSEventPendMulti+0x3dc>
       *pevents_rdy = (OS_EVENT *)0;                    /* NULL terminate return event array           */
    eb50:	e0bffd17 	ldw	r2,-12(fp)
    eb54:	10000015 	stw	zero,0(r2)
    eb58:	e0bff317 	ldw	r2,-52(fp)
    eb5c:	e0bff615 	stw	r2,-40(fp)
    eb60:	e0bff617 	ldw	r2,-40(fp)
    eb64:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
       *perr        =  OS_ERR_NONE;
    eb68:	e0800217 	ldw	r2,8(fp)
    eb6c:	10000005 	stb	zero,0(r2)
        return (events_rdy_nbr);
    eb70:	e0bff18b 	ldhu	r2,-58(fp)
    eb74:	00008806 	br	ed98 <OSEventPendMulti+0x5fc>
    }
/*$PAGE*/
                                                        /* Otherwise, must wait until any event occurs */
    OSTCBCur->OSTCBStat     |= events_stat  |           /* Resource not available, ...                 */
    eb78:	d0a73017 	ldw	r2,-25408(gp)
    eb7c:	d0e73017 	ldw	r3,-25408(gp)
    eb80:	19000c03 	ldbu	r4,48(r3)
    eb84:	e0fff203 	ldbu	r3,-56(fp)
    eb88:	20c6b03a 	or	r3,r4,r3
    eb8c:	1809883a 	mov	r4,r3
    eb90:	00ffe004 	movi	r3,-128
    eb94:	20c6b03a 	or	r3,r4,r3
    eb98:	10c00c05 	stb	r3,48(r2)
                               OS_STAT_MULTI;           /* ... pend on multiple events                 */
    OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
    eb9c:	d0a73017 	ldw	r2,-25408(gp)
    eba0:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly       = timeout;                 /* Store pend timeout in TCB                   */
    eba4:	d0a73017 	ldw	r2,-25408(gp)
    eba8:	e0ffff0b 	ldhu	r3,-4(fp)
    ebac:	10c00b8d 	sth	r3,46(r2)
    OS_EventTaskWaitMulti(pevents_pend);                /* Suspend task until events or timeout occurs */
    ebb0:	e13ffc17 	ldw	r4,-16(fp)
    ebb4:	000f6d80 	call	f6d8 <OS_EventTaskWaitMulti>
    ebb8:	e0bff317 	ldw	r2,-52(fp)
    ebbc:	e0bff915 	stw	r2,-28(fp)
    ebc0:	e0bff917 	ldw	r2,-28(fp)
    ebc4:	1001703a 	wrctl	status,r2

    OS_EXIT_CRITICAL();
    OS_Sched();                                         /* Find next highest priority task ready       */
    ebc8:	000fe7c0 	call	fe7c <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    ebcc:	0005303a 	rdctl	r2,status
    ebd0:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    ebd4:	e0fff717 	ldw	r3,-36(fp)
    ebd8:	00bfff84 	movi	r2,-2
    ebdc:	1884703a 	and	r2,r3,r2
    ebe0:	1001703a 	wrctl	status,r2
  
  return context;
    ebe4:	e0bff717 	ldw	r2,-36(fp)
    OS_ENTER_CRITICAL();
    ebe8:	e0bff315 	stw	r2,-52(fp)

    switch (OSTCBCur->OSTCBStatPend) {                  /* Handle event posted, aborted, or timed-out  */
    ebec:	d0a73017 	ldw	r2,-25408(gp)
    ebf0:	10800c43 	ldbu	r2,49(r2)
    ebf4:	10803fcc 	andi	r2,r2,255
    ebf8:	10000226 	beq	r2,zero,ec04 <OSEventPendMulti+0x468>
    ebfc:	108000a0 	cmpeqi	r2,r2,2
    ec00:	10001826 	beq	r2,zero,ec64 <OSEventPendMulti+0x4c8>
        case OS_STAT_PEND_OK:
        case OS_STAT_PEND_ABORT:
             pevent = OSTCBCur->OSTCBEventPtr;
    ec04:	d0a73017 	ldw	r2,-25408(gp)
    ec08:	10800717 	ldw	r2,28(r2)
    ec0c:	e0bff015 	stw	r2,-64(fp)
             if (pevent != (OS_EVENT *)0) {             /* If task event ptr != NULL, ...              */
    ec10:	e0bff017 	ldw	r2,-64(fp)
    ec14:	10000b26 	beq	r2,zero,ec44 <OSEventPendMulti+0x4a8>
                *pevents_rdy++ =  pevent;               /* ... return available event ...              */
    ec18:	e0bffd17 	ldw	r2,-12(fp)
    ec1c:	10c00104 	addi	r3,r2,4
    ec20:	e0fffd15 	stw	r3,-12(fp)
    ec24:	e0fff017 	ldw	r3,-64(fp)
    ec28:	10c00015 	stw	r3,0(r2)
                *pevents_rdy   = (OS_EVENT *)0;         /* ... & NULL terminate return event array     */
    ec2c:	e0bffd17 	ldw	r2,-12(fp)
    ec30:	10000015 	stw	zero,0(r2)
                  events_rdy_nbr++;
    ec34:	e0bff18b 	ldhu	r2,-58(fp)
    ec38:	10800044 	addi	r2,r2,1
    ec3c:	e0bff18d 	sth	r2,-58(fp)

             } else {                                   /* Else NO event available, handle as timeout  */
                 OSTCBCur->OSTCBStatPend = OS_STAT_PEND_TO;
                 OS_EventTaskRemoveMulti(OSTCBCur, pevents_pend);
             }
			 break;
    ec40:	00000d06 	br	ec78 <OSEventPendMulti+0x4dc>
                *pevents_rdy++ =  pevent;               /* ... return available event ...              */
                *pevents_rdy   = (OS_EVENT *)0;         /* ... & NULL terminate return event array     */
                  events_rdy_nbr++;

             } else {                                   /* Else NO event available, handle as timeout  */
                 OSTCBCur->OSTCBStatPend = OS_STAT_PEND_TO;
    ec44:	d0a73017 	ldw	r2,-25408(gp)
    ec48:	00c00044 	movi	r3,1
    ec4c:	10c00c45 	stb	r3,49(r2)
                 OS_EventTaskRemoveMulti(OSTCBCur, pevents_pend);
    ec50:	d0a73017 	ldw	r2,-25408(gp)
    ec54:	e17ffc17 	ldw	r5,-16(fp)
    ec58:	1009883a 	mov	r4,r2
    ec5c:	000f8e00 	call	f8e0 <OS_EventTaskRemoveMulti>
             }
			 break;
    ec60:	00000506 	br	ec78 <OSEventPendMulti+0x4dc>

        case OS_STAT_PEND_TO:
        default:                                        /* ... remove task from events' wait lists     */
             OS_EventTaskRemoveMulti(OSTCBCur, pevents_pend);
    ec64:	d0a73017 	ldw	r2,-25408(gp)
    ec68:	e17ffc17 	ldw	r5,-16(fp)
    ec6c:	1009883a 	mov	r4,r2
    ec70:	000f8e00 	call	f8e0 <OS_EventTaskRemoveMulti>
             break;
    ec74:	0001883a 	nop
    }

    switch (OSTCBCur->OSTCBStatPend) {
    ec78:	d0a73017 	ldw	r2,-25408(gp)
    ec7c:	10800c43 	ldbu	r2,49(r2)
    ec80:	10803fcc 	andi	r2,r2,255
    ec84:	10000326 	beq	r2,zero,ec94 <OSEventPendMulti+0x4f8>
    ec88:	108000a0 	cmpeqi	r2,r2,2
    ec8c:	1000231e 	bne	r2,zero,ed1c <OSEventPendMulti+0x580>
    ec90:	00002a06 	br	ed3c <OSEventPendMulti+0x5a0>
        case OS_STAT_PEND_OK:
             switch (pevent->OSEventType) {             /* Return event's message                      */
    ec94:	e0bff017 	ldw	r2,-64(fp)
    ec98:	10800003 	ldbu	r2,0(r2)
    ec9c:	10803fcc 	andi	r2,r2,255
    eca0:	0080100e 	bge	zero,r2,ece4 <OSEventPendMulti+0x548>
    eca4:	10c000d0 	cmplti	r3,r2,3
    eca8:	1800071e 	bne	r3,zero,ecc8 <OSEventPendMulti+0x52c>
    ecac:	108000e0 	cmpeqi	r2,r2,3
    ecb0:	10000c26 	beq	r2,zero,ece4 <OSEventPendMulti+0x548>
#if (OS_SEM_EN > 0)
                 case OS_EVENT_TYPE_SEM:
                     *pmsgs_rdy++ = (void *)0;          /* NO message returned for semaphores          */
    ecb4:	e0bffe17 	ldw	r2,-8(fp)
    ecb8:	10c00104 	addi	r3,r2,4
    ecbc:	e0fffe15 	stw	r3,-8(fp)
    ecc0:	10000015 	stw	zero,0(r2)
                      break;
    ecc4:	00001206 	br	ed10 <OSEventPendMulti+0x574>

#if ((OS_MBOX_EN > 0) ||                 \
    ((OS_Q_EN    > 0) && (OS_MAX_QS > 0)))
                 case OS_EVENT_TYPE_MBOX:
                 case OS_EVENT_TYPE_Q:
                     *pmsgs_rdy++ = (void *)OSTCBCur->OSTCBMsg;     /* Return received message         */
    ecc8:	e0bffe17 	ldw	r2,-8(fp)
    eccc:	10c00104 	addi	r3,r2,4
    ecd0:	e0fffe15 	stw	r3,-8(fp)
    ecd4:	d0e73017 	ldw	r3,-25408(gp)
    ecd8:	18c00917 	ldw	r3,36(r3)
    ecdc:	10c00015 	stw	r3,0(r2)
                      break;
    ece0:	00000b06 	br	ed10 <OSEventPendMulti+0x574>
    ece4:	e0bff317 	ldw	r2,-52(fp)
    ece8:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    ecec:	e0bff817 	ldw	r2,-32(fp)
    ecf0:	1001703a 	wrctl	status,r2

                 case OS_EVENT_TYPE_MUTEX:                                       
                 case OS_EVENT_TYPE_FLAG:
                 default:           
                      OS_EXIT_CRITICAL();
                     *pevents_rdy = (OS_EVENT *)0;      /* NULL terminate return event array           */
    ecf4:	e0bffd17 	ldw	r2,-12(fp)
    ecf8:	10000015 	stw	zero,0(r2)
                     *perr        =  OS_ERR_EVENT_TYPE;
    ecfc:	e0800217 	ldw	r2,8(fp)
    ed00:	00c00044 	movi	r3,1
    ed04:	10c00005 	stb	r3,0(r2)
                      return (events_rdy_nbr);
    ed08:	e0bff18b 	ldhu	r2,-58(fp)
    ed0c:	00002206 	br	ed98 <OSEventPendMulti+0x5fc>
             }
            *perr = OS_ERR_NONE;
    ed10:	e0800217 	ldw	r2,8(fp)
    ed14:	10000005 	stb	zero,0(r2)
             break;
    ed18:	00001006 	br	ed5c <OSEventPendMulti+0x5c0>

        case OS_STAT_PEND_ABORT:
            *pmsgs_rdy++ = (void *)0;                   /* NO message returned for abort               */
    ed1c:	e0bffe17 	ldw	r2,-8(fp)
    ed20:	10c00104 	addi	r3,r2,4
    ed24:	e0fffe15 	stw	r3,-8(fp)
    ed28:	10000015 	stw	zero,0(r2)
            *perr        =  OS_ERR_PEND_ABORT;          /* Indicate that event  aborted                */
    ed2c:	e0800217 	ldw	r2,8(fp)
    ed30:	00c00384 	movi	r3,14
    ed34:	10c00005 	stb	r3,0(r2)
             break;
    ed38:	00000806 	br	ed5c <OSEventPendMulti+0x5c0>
                                                        
        case OS_STAT_PEND_TO:                                                
        default:        
            *pmsgs_rdy++ = (void *)0;                   /* NO message returned for timeout             */
    ed3c:	e0bffe17 	ldw	r2,-8(fp)
    ed40:	10c00104 	addi	r3,r2,4
    ed44:	e0fffe15 	stw	r3,-8(fp)
    ed48:	10000015 	stw	zero,0(r2)
            *perr        =  OS_ERR_TIMEOUT;             /* Indicate that events timed out              */
    ed4c:	e0800217 	ldw	r2,8(fp)
    ed50:	00c00284 	movi	r3,10
    ed54:	10c00005 	stb	r3,0(r2)
             break;
    ed58:	0001883a 	nop
    }

    OSTCBCur->OSTCBStat          =  OS_STAT_RDY;        /* Set   task  status to ready                 */
    ed5c:	d0a73017 	ldw	r2,-25408(gp)
    ed60:	10000c05 	stb	zero,48(r2)
    OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;    /* Clear pend  status                          */
    ed64:	d0a73017 	ldw	r2,-25408(gp)
    ed68:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;      /* Clear event pointers                        */
    ed6c:	d0a73017 	ldw	r2,-25408(gp)
    ed70:	10000715 	stw	zero,28(r2)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
    ed74:	d0a73017 	ldw	r2,-25408(gp)
    ed78:	10000815 	stw	zero,32(r2)
    OSTCBCur->OSTCBMsg           = (void      *)0;      /* Clear task  message                         */
    ed7c:	d0a73017 	ldw	r2,-25408(gp)
    ed80:	10000915 	stw	zero,36(r2)
    ed84:	e0bff317 	ldw	r2,-52(fp)
    ed88:	e0bffa15 	stw	r2,-24(fp)
    ed8c:	e0bffa17 	ldw	r2,-24(fp)
    ed90:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();

    return (events_rdy_nbr);
    ed94:	e0bff18b 	ldhu	r2,-58(fp)
}
    ed98:	e037883a 	mov	sp,fp
    ed9c:	dfc00117 	ldw	ra,4(sp)
    eda0:	df000017 	ldw	fp,0(sp)
    eda4:	dec00204 	addi	sp,sp,8
    eda8:	f800283a 	ret

0000edac <OSInit>:
* Returns    : none
*********************************************************************************************************
*/

void  OSInit (void)
{
    edac:	defffe04 	addi	sp,sp,-8
    edb0:	dfc00115 	stw	ra,4(sp)
    edb4:	df000015 	stw	fp,0(sp)
    edb8:	d839883a 	mov	fp,sp
    OSInitHookBegin();                                           /* Call port specific initialization code   */
    edbc:	00177b00 	call	177b0 <OSInitHookBegin>

    OS_InitMisc();                                               /* Initialize miscellaneous variables       */
    edc0:	000fb280 	call	fb28 <OS_InitMisc>

    OS_InitRdyList();                                            /* Initialize the Ready List                */
    edc4:	000fb700 	call	fb70 <OS_InitRdyList>

    OS_InitTCBList();                                            /* Initialize the free list of OS_TCBs      */
    edc8:	000fcdc0 	call	fcdc <OS_InitTCBList>

    OS_InitEventList();                                          /* Initialize the free list of OS_EVENTs    */
    edcc:	000fa480 	call	fa48 <OS_InitEventList>

#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0)
    OS_FlagInit();                                               /* Initialize the event flag structures     */
    edd0:	0011b7c0 	call	11b7c <OS_FlagInit>
#endif

#if (OS_MEM_EN > 0) && (OS_MAX_MEM_PART > 0)
    OS_MemInit();                                                /* Initialize the memory manager            */
    edd4:	001247c0 	call	1247c <OS_MemInit>
#endif

#if (OS_Q_EN > 0) && (OS_MAX_QS > 0)
    OS_QInit();                                                  /* Initialize the message queue structures  */
    edd8:	00135b00 	call	135b0 <OS_QInit>
#endif

    OS_InitTaskIdle();                                           /* Create the Idle Task                     */
    eddc:	000fbdc0 	call	fbdc <OS_InitTaskIdle>
#if OS_TASK_STAT_EN > 0
    OS_InitTaskStat();                                           /* Create the Statistic Task                */
    ede0:	000fc5c0 	call	fc5c <OS_InitTaskStat>

#if OS_TMR_EN > 0
    OSTmr_Init();                                                /* Initialize the Timer Manager             */
#endif

    OSInitHookEnd();                                             /* Call port specific init. code            */
    ede4:	00177d00 	call	177d0 <OSInitHookEnd>

#if OS_DEBUG_EN > 0
    OSDebugInit();
    ede8:	00105500 	call	10550 <OSDebugInit>
#endif
}
    edec:	0001883a 	nop
    edf0:	e037883a 	mov	sp,fp
    edf4:	dfc00117 	ldw	ra,4(sp)
    edf8:	df000017 	ldw	fp,0(sp)
    edfc:	dec00204 	addi	sp,sp,8
    ee00:	f800283a 	ret

0000ee04 <OSIntEnter>:
*              5) You are allowed to nest interrupts up to 255 levels deep.
*********************************************************************************************************
*/

void  OSIntEnter (void)
{
    ee04:	deffff04 	addi	sp,sp,-4
    ee08:	df000015 	stw	fp,0(sp)
    ee0c:	d839883a 	mov	fp,sp
    if (OSRunning == OS_TRUE) {
    ee10:	d0a72143 	ldbu	r2,-25467(gp)
    ee14:	10803fcc 	andi	r2,r2,255
    ee18:	10800058 	cmpnei	r2,r2,1
    ee1c:	1000071e 	bne	r2,zero,ee3c <OSIntEnter+0x38>
        if (OSIntNesting < 255u) {
    ee20:	d0a72f03 	ldbu	r2,-25412(gp)
    ee24:	10803fcc 	andi	r2,r2,255
    ee28:	10803fe0 	cmpeqi	r2,r2,255
    ee2c:	1000031e 	bne	r2,zero,ee3c <OSIntEnter+0x38>
            OSIntNesting++;                      /* Increment ISR nesting level                        */
    ee30:	d0a72f03 	ldbu	r2,-25412(gp)
    ee34:	10800044 	addi	r2,r2,1
    ee38:	d0a72f05 	stb	r2,-25412(gp)
        }
    }
}
    ee3c:	0001883a 	nop
    ee40:	e037883a 	mov	sp,fp
    ee44:	df000017 	ldw	fp,0(sp)
    ee48:	dec00104 	addi	sp,sp,4
    ee4c:	f800283a 	ret

0000ee50 <OSIntExit>:
*              2) Rescheduling is prevented when the scheduler is locked (see OS_SchedLock())
*********************************************************************************************************
*/

void  OSIntExit (void)
{
    ee50:	defffb04 	addi	sp,sp,-20
    ee54:	dfc00415 	stw	ra,16(sp)
    ee58:	df000315 	stw	fp,12(sp)
    ee5c:	df000304 	addi	fp,sp,12
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
    ee60:	e03ffd15 	stw	zero,-12(fp)
#endif



    if (OSRunning == OS_TRUE) {
    ee64:	d0a72143 	ldbu	r2,-25467(gp)
    ee68:	10803fcc 	andi	r2,r2,255
    ee6c:	10800058 	cmpnei	r2,r2,1
    ee70:	10002f1e 	bne	r2,zero,ef30 <OSIntExit+0xe0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    ee74:	0005303a 	rdctl	r2,status
    ee78:	e0bfff15 	stw	r2,-4(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    ee7c:	e0ffff17 	ldw	r3,-4(fp)
    ee80:	00bfff84 	movi	r2,-2
    ee84:	1884703a 	and	r2,r3,r2
    ee88:	1001703a 	wrctl	status,r2
  
  return context;
    ee8c:	e0bfff17 	ldw	r2,-4(fp)
        OS_ENTER_CRITICAL();
    ee90:	e0bffd15 	stw	r2,-12(fp)
        if (OSIntNesting > 0) {                            /* Prevent OSIntNesting from wrapping       */
    ee94:	d0a72f03 	ldbu	r2,-25412(gp)
    ee98:	10803fcc 	andi	r2,r2,255
    ee9c:	10000326 	beq	r2,zero,eeac <OSIntExit+0x5c>
            OSIntNesting--;
    eea0:	d0a72f03 	ldbu	r2,-25412(gp)
    eea4:	10bfffc4 	addi	r2,r2,-1
    eea8:	d0a72f05 	stb	r2,-25412(gp)
        }
        if (OSIntNesting == 0) {                           /* Reschedule only if all ISRs complete ... */
    eeac:	d0a72f03 	ldbu	r2,-25412(gp)
    eeb0:	10803fcc 	andi	r2,r2,255
    eeb4:	10001a1e 	bne	r2,zero,ef20 <OSIntExit+0xd0>
            if (OSLockNesting == 0) {                      /* ... and not locked.                      */
    eeb8:	d0a72103 	ldbu	r2,-25468(gp)
    eebc:	10803fcc 	andi	r2,r2,255
    eec0:	1000171e 	bne	r2,zero,ef20 <OSIntExit+0xd0>
                OS_SchedNew();
    eec4:	000ff4c0 	call	ff4c <OS_SchedNew>
                if (OSPrioHighRdy != OSPrioCur) {          /* No Ctx Sw if current task is highest rdy */
    eec8:	d0e72303 	ldbu	r3,-25460(gp)
    eecc:	d0a72343 	ldbu	r2,-25459(gp)
    eed0:	18c03fcc 	andi	r3,r3,255
    eed4:	10803fcc 	andi	r2,r2,255
    eed8:	18801126 	beq	r3,r2,ef20 <OSIntExit+0xd0>
                    OSTCBHighRdy  = OSTCBPrioTbl[OSPrioHighRdy];
    eedc:	d0a72303 	ldbu	r2,-25460(gp)
    eee0:	10c03fcc 	andi	r3,r2,255
    eee4:	008000b4 	movhi	r2,2
    eee8:	10bf4204 	addi	r2,r2,-760
    eeec:	18c7883a 	add	r3,r3,r3
    eef0:	18c7883a 	add	r3,r3,r3
    eef4:	10c5883a 	add	r2,r2,r3
    eef8:	10800017 	ldw	r2,0(r2)
    eefc:	d0a72b15 	stw	r2,-25428(gp)
#if OS_TASK_PROFILE_EN > 0
                    OSTCBHighRdy->OSTCBCtxSwCtr++;         /* Inc. # of context switches to this task  */
    ef00:	d0a72b17 	ldw	r2,-25428(gp)
    ef04:	10c00e17 	ldw	r3,56(r2)
    ef08:	18c00044 	addi	r3,r3,1
    ef0c:	10c00e15 	stw	r3,56(r2)
#endif
                    OSCtxSwCtr++;                          /* Keep track of the number of ctx switches */
    ef10:	d0a72617 	ldw	r2,-25448(gp)
    ef14:	10800044 	addi	r2,r2,1
    ef18:	d0a72615 	stw	r2,-25448(gp)
                    OSIntCtxSw();                          /* Perform interrupt level ctx switch       */
    ef1c:	00174dc0 	call	174dc <OSCtxSw>
    ef20:	e0bffd17 	ldw	r2,-12(fp)
    ef24:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    ef28:	e0bffe17 	ldw	r2,-8(fp)
    ef2c:	1001703a 	wrctl	status,r2
                }
            }
        }
        OS_EXIT_CRITICAL();
    }
}
    ef30:	0001883a 	nop
    ef34:	e037883a 	mov	sp,fp
    ef38:	dfc00117 	ldw	ra,4(sp)
    ef3c:	df000017 	ldw	fp,0(sp)
    ef40:	dec00204 	addi	sp,sp,8
    ef44:	f800283a 	ret

0000ef48 <OSSchedLock>:
*********************************************************************************************************
*/

#if OS_SCHED_LOCK_EN > 0
void  OSSchedLock (void)
{
    ef48:	defffc04 	addi	sp,sp,-16
    ef4c:	df000315 	stw	fp,12(sp)
    ef50:	df000304 	addi	fp,sp,12
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    ef54:	e03ffd15 	stw	zero,-12(fp)
#endif



    if (OSRunning == OS_TRUE) {                  /* Make sure multitasking is running                  */
    ef58:	d0a72143 	ldbu	r2,-25467(gp)
    ef5c:	10803fcc 	andi	r2,r2,255
    ef60:	10800058 	cmpnei	r2,r2,1
    ef64:	1000161e 	bne	r2,zero,efc0 <OSSchedLock+0x78>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    ef68:	0005303a 	rdctl	r2,status
    ef6c:	e0bfff15 	stw	r2,-4(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    ef70:	e0ffff17 	ldw	r3,-4(fp)
    ef74:	00bfff84 	movi	r2,-2
    ef78:	1884703a 	and	r2,r3,r2
    ef7c:	1001703a 	wrctl	status,r2
  
  return context;
    ef80:	e0bfff17 	ldw	r2,-4(fp)
        OS_ENTER_CRITICAL();
    ef84:	e0bffd15 	stw	r2,-12(fp)
        if (OSIntNesting == 0) {                 /* Can't call from an ISR                             */
    ef88:	d0a72f03 	ldbu	r2,-25412(gp)
    ef8c:	10803fcc 	andi	r2,r2,255
    ef90:	1000071e 	bne	r2,zero,efb0 <OSSchedLock+0x68>
            if (OSLockNesting < 255u) {          /* Prevent OSLockNesting from wrapping back to 0      */
    ef94:	d0a72103 	ldbu	r2,-25468(gp)
    ef98:	10803fcc 	andi	r2,r2,255
    ef9c:	10803fe0 	cmpeqi	r2,r2,255
    efa0:	1000031e 	bne	r2,zero,efb0 <OSSchedLock+0x68>
                OSLockNesting++;                 /* Increment lock nesting level                       */
    efa4:	d0a72103 	ldbu	r2,-25468(gp)
    efa8:	10800044 	addi	r2,r2,1
    efac:	d0a72105 	stb	r2,-25468(gp)
    efb0:	e0bffd17 	ldw	r2,-12(fp)
    efb4:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    efb8:	e0bffe17 	ldw	r2,-8(fp)
    efbc:	1001703a 	wrctl	status,r2
            }
        }
        OS_EXIT_CRITICAL();
    }
}
    efc0:	0001883a 	nop
    efc4:	e037883a 	mov	sp,fp
    efc8:	df000017 	ldw	fp,0(sp)
    efcc:	dec00104 	addi	sp,sp,4
    efd0:	f800283a 	ret

0000efd4 <OSSchedUnlock>:
*********************************************************************************************************
*/

#if OS_SCHED_LOCK_EN > 0
void  OSSchedUnlock (void)
{
    efd4:	defff804 	addi	sp,sp,-32
    efd8:	dfc00715 	stw	ra,28(sp)
    efdc:	df000615 	stw	fp,24(sp)
    efe0:	df000604 	addi	fp,sp,24
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
    efe4:	e03ffa15 	stw	zero,-24(fp)
#endif



    if (OSRunning == OS_TRUE) {                            /* Make sure multitasking is running        */
    efe8:	d0a72143 	ldbu	r2,-25467(gp)
    efec:	10803fcc 	andi	r2,r2,255
    eff0:	10800058 	cmpnei	r2,r2,1
    eff4:	1000281e 	bne	r2,zero,f098 <OSSchedUnlock+0xc4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    eff8:	0005303a 	rdctl	r2,status
    effc:	e0bfff15 	stw	r2,-4(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    f000:	e0ffff17 	ldw	r3,-4(fp)
    f004:	00bfff84 	movi	r2,-2
    f008:	1884703a 	and	r2,r3,r2
    f00c:	1001703a 	wrctl	status,r2
  
  return context;
    f010:	e0bfff17 	ldw	r2,-4(fp)
        OS_ENTER_CRITICAL();
    f014:	e0bffa15 	stw	r2,-24(fp)
        if (OSLockNesting > 0) {                           /* Do not decrement if already 0            */
    f018:	d0a72103 	ldbu	r2,-25468(gp)
    f01c:	10803fcc 	andi	r2,r2,255
    f020:	10001926 	beq	r2,zero,f088 <OSSchedUnlock+0xb4>
            OSLockNesting--;                               /* Decrement lock nesting level             */
    f024:	d0a72103 	ldbu	r2,-25468(gp)
    f028:	10bfffc4 	addi	r2,r2,-1
    f02c:	d0a72105 	stb	r2,-25468(gp)
            if (OSLockNesting == 0) {                      /* See if scheduler is enabled and ...      */
    f030:	d0a72103 	ldbu	r2,-25468(gp)
    f034:	10803fcc 	andi	r2,r2,255
    f038:	10000e1e 	bne	r2,zero,f074 <OSSchedUnlock+0xa0>
                if (OSIntNesting == 0) {                   /* ... not in an ISR                        */
    f03c:	d0a72f03 	ldbu	r2,-25412(gp)
    f040:	10803fcc 	andi	r2,r2,255
    f044:	1000061e 	bne	r2,zero,f060 <OSSchedUnlock+0x8c>
    f048:	e0bffa17 	ldw	r2,-24(fp)
    f04c:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    f050:	e0bffb17 	ldw	r2,-20(fp)
    f054:	1001703a 	wrctl	status,r2
                    OS_EXIT_CRITICAL();
                    OS_Sched();                            /* See if a HPT is ready                    */
    f058:	000fe7c0 	call	fe7c <OS_Sched>
            }
        } else {
            OS_EXIT_CRITICAL();
        }
    }
}
    f05c:	00000e06 	br	f098 <OSSchedUnlock+0xc4>
    f060:	e0bffa17 	ldw	r2,-24(fp)
    f064:	e0bffc15 	stw	r2,-16(fp)
    f068:	e0bffc17 	ldw	r2,-16(fp)
    f06c:	1001703a 	wrctl	status,r2
    f070:	00000906 	br	f098 <OSSchedUnlock+0xc4>
    f074:	e0bffa17 	ldw	r2,-24(fp)
    f078:	e0bffd15 	stw	r2,-12(fp)
    f07c:	e0bffd17 	ldw	r2,-12(fp)
    f080:	1001703a 	wrctl	status,r2
    f084:	00000406 	br	f098 <OSSchedUnlock+0xc4>
    f088:	e0bffa17 	ldw	r2,-24(fp)
    f08c:	e0bffe15 	stw	r2,-8(fp)
    f090:	e0bffe17 	ldw	r2,-8(fp)
    f094:	1001703a 	wrctl	status,r2
    f098:	0001883a 	nop
    f09c:	e037883a 	mov	sp,fp
    f0a0:	dfc00117 	ldw	ra,4(sp)
    f0a4:	df000017 	ldw	fp,0(sp)
    f0a8:	dec00204 	addi	sp,sp,8
    f0ac:	f800283a 	ret

0000f0b0 <OSStart>:
*                 d_ Execute the task.
*********************************************************************************************************
*/

void  OSStart (void)
{
    f0b0:	defffe04 	addi	sp,sp,-8
    f0b4:	dfc00115 	stw	ra,4(sp)
    f0b8:	df000015 	stw	fp,0(sp)
    f0bc:	d839883a 	mov	fp,sp
    if (OSRunning == OS_FALSE) {
    f0c0:	d0a72143 	ldbu	r2,-25467(gp)
    f0c4:	10803fcc 	andi	r2,r2,255
    f0c8:	10000f1e 	bne	r2,zero,f108 <OSStart+0x58>
        OS_SchedNew();                               /* Find highest priority's task priority number   */
    f0cc:	000ff4c0 	call	ff4c <OS_SchedNew>
        OSPrioCur     = OSPrioHighRdy;
    f0d0:	d0a72303 	ldbu	r2,-25460(gp)
    f0d4:	d0a72345 	stb	r2,-25459(gp)
        OSTCBHighRdy  = OSTCBPrioTbl[OSPrioHighRdy]; /* Point to highest priority task ready to run    */
    f0d8:	d0a72303 	ldbu	r2,-25460(gp)
    f0dc:	10c03fcc 	andi	r3,r2,255
    f0e0:	008000b4 	movhi	r2,2
    f0e4:	10bf4204 	addi	r2,r2,-760
    f0e8:	18c7883a 	add	r3,r3,r3
    f0ec:	18c7883a 	add	r3,r3,r3
    f0f0:	10c5883a 	add	r2,r2,r3
    f0f4:	10800017 	ldw	r2,0(r2)
    f0f8:	d0a72b15 	stw	r2,-25428(gp)
        OSTCBCur      = OSTCBHighRdy;
    f0fc:	d0a72b17 	ldw	r2,-25428(gp)
    f100:	d0a73015 	stw	r2,-25408(gp)
        OSStartHighRdy();                            /* Execute target specific code to start task     */
    f104:	00175680 	call	17568 <OSStartHighRdy>
    }
}
    f108:	0001883a 	nop
    f10c:	e037883a 	mov	sp,fp
    f110:	dfc00117 	ldw	ra,4(sp)
    f114:	df000017 	ldw	fp,0(sp)
    f118:	dec00204 	addi	sp,sp,8
    f11c:	f800283a 	ret

0000f120 <OSStatInit>:
*********************************************************************************************************
*/

#if OS_TASK_STAT_EN > 0
void  OSStatInit (void)
{
    f120:	defff904 	addi	sp,sp,-28
    f124:	dfc00615 	stw	ra,24(sp)
    f128:	df000515 	stw	fp,20(sp)
    f12c:	df000504 	addi	fp,sp,20
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    f130:	e03ffb15 	stw	zero,-20(fp)
#endif



    OSTimeDly(2);                                /* Synchronize with clock tick                        */
    f134:	01000084 	movi	r4,2
    f138:	00158240 	call	15824 <OSTimeDly>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    f13c:	0005303a 	rdctl	r2,status
    f140:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    f144:	e0fffc17 	ldw	r3,-16(fp)
    f148:	00bfff84 	movi	r2,-2
    f14c:	1884703a 	and	r2,r3,r2
    f150:	1001703a 	wrctl	status,r2
  
  return context;
    f154:	e0bffc17 	ldw	r2,-16(fp)
    OS_ENTER_CRITICAL();
    f158:	e0bffb15 	stw	r2,-20(fp)
    OSIdleCtr    = 0L;                           /* Clear idle counter                                 */
    f15c:	d0272215 	stw	zero,-25464(gp)
    f160:	e0bffb17 	ldw	r2,-20(fp)
    f164:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    f168:	e0bffd17 	ldw	r2,-12(fp)
    f16c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OSTimeDly(OS_TICKS_PER_SEC / 10);            /* Determine MAX. idle counter value for 1/10 second  */
    f170:	01001904 	movi	r4,100
    f174:	00158240 	call	15824 <OSTimeDly>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    f178:	0005303a 	rdctl	r2,status
    f17c:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    f180:	e0fffe17 	ldw	r3,-8(fp)
    f184:	00bfff84 	movi	r2,-2
    f188:	1884703a 	and	r2,r3,r2
    f18c:	1001703a 	wrctl	status,r2
  
  return context;
    f190:	e0bffe17 	ldw	r2,-8(fp)
    OS_ENTER_CRITICAL();
    f194:	e0bffb15 	stw	r2,-20(fp)
    OSIdleCtrMax = OSIdleCtr;                    /* Store maximum idle counter count in 1/10 second    */
    f198:	d0a72217 	ldw	r2,-25464(gp)
    f19c:	d0a72715 	stw	r2,-25444(gp)
    OSStatRdy    = OS_TRUE;
    f1a0:	00800044 	movi	r2,1
    f1a4:	d0a73305 	stb	r2,-25396(gp)
    f1a8:	e0bffb17 	ldw	r2,-20(fp)
    f1ac:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    f1b0:	e0bfff17 	ldw	r2,-4(fp)
    f1b4:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
}
    f1b8:	0001883a 	nop
    f1bc:	e037883a 	mov	sp,fp
    f1c0:	dfc00117 	ldw	ra,4(sp)
    f1c4:	df000017 	ldw	fp,0(sp)
    f1c8:	dec00204 	addi	sp,sp,8
    f1cc:	f800283a 	ret

0000f1d0 <OSTimeTick>:
* Returns    : none
*********************************************************************************************************
*/

void  OSTimeTick (void)
{
    f1d0:	defff704 	addi	sp,sp,-36
    f1d4:	dfc00815 	stw	ra,32(sp)
    f1d8:	df000715 	stw	fp,28(sp)
    f1dc:	df000704 	addi	fp,sp,28
    OS_TCB    *ptcb;
#if OS_TICK_STEP_EN > 0
    BOOLEAN    step;
#endif
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
    f1e0:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_TIME_TICK_HOOK_EN > 0
    OSTimeTickHook();                                      /* Call user definable hook                     */
    f1e4:	00177900 	call	17790 <OSTimeTickHook>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    f1e8:	0005303a 	rdctl	r2,status
    f1ec:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    f1f0:	e0fffd17 	ldw	r3,-12(fp)
    f1f4:	00bfff84 	movi	r2,-2
    f1f8:	1884703a 	and	r2,r3,r2
    f1fc:	1001703a 	wrctl	status,r2
  
  return context;
    f200:	e0bffd17 	ldw	r2,-12(fp)
#endif
#if OS_TIME_GET_SET_EN > 0
    OS_ENTER_CRITICAL();                                   /* Update the 32-bit tick counter               */
    f204:	e0bffb15 	stw	r2,-20(fp)
    OSTime++;
    f208:	d0a73117 	ldw	r2,-25404(gp)
    f20c:	10800044 	addi	r2,r2,1
    f210:	d0a73115 	stw	r2,-25404(gp)
    f214:	e0bffb17 	ldw	r2,-20(fp)
    f218:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    f21c:	e0bfff17 	ldw	r2,-4(fp)
    f220:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
#endif
    if (OSRunning == OS_TRUE) {
    f224:	d0a72143 	ldbu	r2,-25467(gp)
    f228:	10803fcc 	andi	r2,r2,255
    f22c:	10800058 	cmpnei	r2,r2,1
    f230:	10006a1e 	bne	r2,zero,f3dc <OSTimeTick+0x20c>
#if OS_TICK_STEP_EN > 0
        switch (OSTickStepState) {                         /* Determine whether we need to process a tick  */
    f234:	d0a72503 	ldbu	r2,-25452(gp)
    f238:	10803fcc 	andi	r2,r2,255
    f23c:	10c00060 	cmpeqi	r3,r2,1
    f240:	1800061e 	bne	r3,zero,f25c <OSTimeTick+0x8c>
    f244:	10c000a0 	cmpeqi	r3,r2,2
    f248:	1800061e 	bne	r3,zero,f264 <OSTimeTick+0x94>
    f24c:	10000a1e 	bne	r2,zero,f278 <OSTimeTick+0xa8>
            case OS_TICK_STEP_DIS:                         /* Yes, stepping is disabled                    */
                 step = OS_TRUE;
    f250:	00800044 	movi	r2,1
    f254:	e0bffa05 	stb	r2,-24(fp)
                 break;
    f258:	00000b06 	br	f288 <OSTimeTick+0xb8>

            case OS_TICK_STEP_WAIT:                        /* No,  waiting for uC/OS-View to set ...       */
                 step = OS_FALSE;                          /*      .. OSTickStepState to OS_TICK_STEP_ONCE */
    f25c:	e03ffa05 	stb	zero,-24(fp)
                 break;
    f260:	00000906 	br	f288 <OSTimeTick+0xb8>

            case OS_TICK_STEP_ONCE:                        /* Yes, process tick once and wait for next ... */
                 step            = OS_TRUE;                /*      ... step command from uC/OS-View        */
    f264:	00800044 	movi	r2,1
    f268:	e0bffa05 	stb	r2,-24(fp)
                 OSTickStepState = OS_TICK_STEP_WAIT;
    f26c:	00800044 	movi	r2,1
    f270:	d0a72505 	stb	r2,-25452(gp)
                 break;
    f274:	00000406 	br	f288 <OSTimeTick+0xb8>

            default:                                       /* Invalid case, correct situation              */
                 step            = OS_TRUE;
    f278:	00800044 	movi	r2,1
    f27c:	e0bffa05 	stb	r2,-24(fp)
                 OSTickStepState = OS_TICK_STEP_DIS;
    f280:	d0272505 	stb	zero,-25452(gp)
                 break;
    f284:	0001883a 	nop
        }
        if (step == OS_FALSE) {                            /* Return if waiting for step command           */
    f288:	e0bffa03 	ldbu	r2,-24(fp)
    f28c:	10005226 	beq	r2,zero,f3d8 <OSTimeTick+0x208>
            return;
        }
#endif
        ptcb = OSTCBList;                                  /* Point at first TCB in TCB list               */
    f290:	d0a72417 	ldw	r2,-25456(gp)
    f294:	e0bff915 	stw	r2,-28(fp)
        while (ptcb->OSTCBPrio != OS_TASK_IDLE_PRIO) {     /* Go through all TCBs in TCB list              */
    f298:	00004906 	br	f3c0 <OSTimeTick+0x1f0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    f29c:	0005303a 	rdctl	r2,status
    f2a0:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    f2a4:	e0fffc17 	ldw	r3,-16(fp)
    f2a8:	00bfff84 	movi	r2,-2
    f2ac:	1884703a 	and	r2,r3,r2
    f2b0:	1001703a 	wrctl	status,r2
  
  return context;
    f2b4:	e0bffc17 	ldw	r2,-16(fp)
            OS_ENTER_CRITICAL();
    f2b8:	e0bffb15 	stw	r2,-20(fp)
            if (ptcb->OSTCBDly != 0) {                     /* No, Delayed or waiting for event with TO     */
    f2bc:	e0bff917 	ldw	r2,-28(fp)
    f2c0:	10800b8b 	ldhu	r2,46(r2)
    f2c4:	10bfffcc 	andi	r2,r2,65535
    f2c8:	10003626 	beq	r2,zero,f3a4 <OSTimeTick+0x1d4>
                if (--ptcb->OSTCBDly == 0) {               /* Decrement nbr of ticks to end of delay       */
    f2cc:	e0bff917 	ldw	r2,-28(fp)
    f2d0:	10800b8b 	ldhu	r2,46(r2)
    f2d4:	10bfffc4 	addi	r2,r2,-1
    f2d8:	1007883a 	mov	r3,r2
    f2dc:	e0bff917 	ldw	r2,-28(fp)
    f2e0:	10c00b8d 	sth	r3,46(r2)
    f2e4:	e0bff917 	ldw	r2,-28(fp)
    f2e8:	10800b8b 	ldhu	r2,46(r2)
    f2ec:	10bfffcc 	andi	r2,r2,65535
    f2f0:	10002c1e 	bne	r2,zero,f3a4 <OSTimeTick+0x1d4>
                                                           /* Check for timeout                            */
                    if ((ptcb->OSTCBStat & OS_STAT_PEND_ANY) != OS_STAT_RDY) {
    f2f4:	e0bff917 	ldw	r2,-28(fp)
    f2f8:	10800c03 	ldbu	r2,48(r2)
    f2fc:	10803fcc 	andi	r2,r2,255
    f300:	10800dcc 	andi	r2,r2,55
    f304:	10000b26 	beq	r2,zero,f334 <OSTimeTick+0x164>
                        ptcb->OSTCBStat  &= ~(INT8U)OS_STAT_PEND_ANY;          /* Yes, Clear status flag   */
    f308:	e0bff917 	ldw	r2,-28(fp)
    f30c:	10c00c03 	ldbu	r3,48(r2)
    f310:	00bff204 	movi	r2,-56
    f314:	1884703a 	and	r2,r3,r2
    f318:	1007883a 	mov	r3,r2
    f31c:	e0bff917 	ldw	r2,-28(fp)
    f320:	10c00c05 	stb	r3,48(r2)
                        ptcb->OSTCBStatPend = OS_STAT_PEND_TO;                 /* Indicate PEND timeout    */
    f324:	e0bff917 	ldw	r2,-28(fp)
    f328:	00c00044 	movi	r3,1
    f32c:	10c00c45 	stb	r3,49(r2)
    f330:	00000206 	br	f33c <OSTimeTick+0x16c>
                    } else {
                        ptcb->OSTCBStatPend = OS_STAT_PEND_OK;
    f334:	e0bff917 	ldw	r2,-28(fp)
    f338:	10000c45 	stb	zero,49(r2)
                    }

                    if ((ptcb->OSTCBStat & OS_STAT_SUSPEND) == OS_STAT_RDY) {  /* Is task suspended?       */
    f33c:	e0bff917 	ldw	r2,-28(fp)
    f340:	10800c03 	ldbu	r2,48(r2)
    f344:	10803fcc 	andi	r2,r2,255
    f348:	1080020c 	andi	r2,r2,8
    f34c:	1000151e 	bne	r2,zero,f3a4 <OSTimeTick+0x1d4>
                        OSRdyGrp               |= ptcb->OSTCBBitY;             /* No,  Make ready          */
    f350:	e0bff917 	ldw	r2,-28(fp)
    f354:	10c00d83 	ldbu	r3,54(r2)
    f358:	d0a72d03 	ldbu	r2,-25420(gp)
    f35c:	1884b03a 	or	r2,r3,r2
    f360:	d0a72d05 	stb	r2,-25420(gp)
                        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
    f364:	e0bff917 	ldw	r2,-28(fp)
    f368:	10800d03 	ldbu	r2,52(r2)
    f36c:	10c03fcc 	andi	r3,r2,255
    f370:	e0bff917 	ldw	r2,-28(fp)
    f374:	10800d03 	ldbu	r2,52(r2)
    f378:	11003fcc 	andi	r4,r2,255
    f37c:	d0a72d44 	addi	r2,gp,-25419
    f380:	2085883a 	add	r2,r4,r2
    f384:	11000003 	ldbu	r4,0(r2)
    f388:	e0bff917 	ldw	r2,-28(fp)
    f38c:	10800d43 	ldbu	r2,53(r2)
    f390:	2084b03a 	or	r2,r4,r2
    f394:	1009883a 	mov	r4,r2
    f398:	d0a72d44 	addi	r2,gp,-25419
    f39c:	1885883a 	add	r2,r3,r2
    f3a0:	11000005 	stb	r4,0(r2)
                    }
                }
            }
            ptcb = ptcb->OSTCBNext;                        /* Point at next TCB in TCB list                */
    f3a4:	e0bff917 	ldw	r2,-28(fp)
    f3a8:	10800517 	ldw	r2,20(r2)
    f3ac:	e0bff915 	stw	r2,-28(fp)
    f3b0:	e0bffb17 	ldw	r2,-20(fp)
    f3b4:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    f3b8:	e0bffe17 	ldw	r2,-8(fp)
    f3bc:	1001703a 	wrctl	status,r2
        if (step == OS_FALSE) {                            /* Return if waiting for step command           */
            return;
        }
#endif
        ptcb = OSTCBList;                                  /* Point at first TCB in TCB list               */
        while (ptcb->OSTCBPrio != OS_TASK_IDLE_PRIO) {     /* Go through all TCBs in TCB list              */
    f3c0:	e0bff917 	ldw	r2,-28(fp)
    f3c4:	10800c83 	ldbu	r2,50(r2)
    f3c8:	10803fcc 	andi	r2,r2,255
    f3cc:	10800518 	cmpnei	r2,r2,20
    f3d0:	103fb21e 	bne	r2,zero,f29c <__alt_data_end+0xfffdf29c>
    f3d4:	00000106 	br	f3dc <OSTimeTick+0x20c>
                 step            = OS_TRUE;
                 OSTickStepState = OS_TICK_STEP_DIS;
                 break;
        }
        if (step == OS_FALSE) {                            /* Return if waiting for step command           */
            return;
    f3d8:	0001883a 	nop
            }
            ptcb = ptcb->OSTCBNext;                        /* Point at next TCB in TCB list                */
            OS_EXIT_CRITICAL();
        }
    }
}
    f3dc:	e037883a 	mov	sp,fp
    f3e0:	dfc00117 	ldw	ra,4(sp)
    f3e4:	df000017 	ldw	fp,0(sp)
    f3e8:	dec00204 	addi	sp,sp,8
    f3ec:	f800283a 	ret

0000f3f0 <OSVersion>:
* Returns    : the version number of uC/OS-II multiplied by 100.
*********************************************************************************************************
*/

INT16U  OSVersion (void)
{
    f3f0:	deffff04 	addi	sp,sp,-4
    f3f4:	df000015 	stw	fp,0(sp)
    f3f8:	d839883a 	mov	fp,sp
    return (OS_VERSION);
    f3fc:	00804784 	movi	r2,286
}
    f400:	e037883a 	mov	sp,fp
    f404:	df000017 	ldw	fp,0(sp)
    f408:	dec00104 	addi	sp,sp,4
    f40c:	f800283a 	ret

0000f410 <OS_Dummy>:
*********************************************************************************************************
*/

#if OS_TASK_DEL_EN > 0
void  OS_Dummy (void)
{
    f410:	deffff04 	addi	sp,sp,-4
    f414:	df000015 	stw	fp,0(sp)
    f418:	d839883a 	mov	fp,sp
}
    f41c:	0001883a 	nop
    f420:	e037883a 	mov	sp,fp
    f424:	df000017 	ldw	fp,0(sp)
    f428:	dec00104 	addi	sp,sp,4
    f42c:	f800283a 	ret

0000f430 <OS_EventTaskRdy>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
INT8U  OS_EventTaskRdy (OS_EVENT *pevent, void *pmsg, INT8U msk, INT8U pend_stat)
{
    f430:	defff804 	addi	sp,sp,-32
    f434:	dfc00715 	stw	ra,28(sp)
    f438:	df000615 	stw	fp,24(sp)
    f43c:	df000604 	addi	fp,sp,24
    f440:	e13ffc15 	stw	r4,-16(fp)
    f444:	e17ffd15 	stw	r5,-12(fp)
    f448:	3007883a 	mov	r3,r6
    f44c:	3805883a 	mov	r2,r7
    f450:	e0fffe05 	stb	r3,-8(fp)
    f454:	e0bfff05 	stb	r2,-4(fp)
    INT16U  *ptbl;
#endif


#if OS_LOWEST_PRIO <= 63
    y    = OSUnMapTbl[pevent->OSEventGrp];              /* Find HPT waiting for message                */
    f458:	e0bffc17 	ldw	r2,-16(fp)
    f45c:	10800283 	ldbu	r2,10(r2)
    f460:	10c03fcc 	andi	r3,r2,255
    f464:	008000b4 	movhi	r2,2
    f468:	10a05304 	addi	r2,r2,-32436
    f46c:	10c5883a 	add	r2,r2,r3
    f470:	10800003 	ldbu	r2,0(r2)
    f474:	e0bffa05 	stb	r2,-24(fp)
    x    = OSUnMapTbl[pevent->OSEventTbl[y]];
    f478:	e0bffa03 	ldbu	r2,-24(fp)
    f47c:	e0fffc17 	ldw	r3,-16(fp)
    f480:	1885883a 	add	r2,r3,r2
    f484:	108002c4 	addi	r2,r2,11
    f488:	10800003 	ldbu	r2,0(r2)
    f48c:	10c03fcc 	andi	r3,r2,255
    f490:	008000b4 	movhi	r2,2
    f494:	10a05304 	addi	r2,r2,-32436
    f498:	10c5883a 	add	r2,r2,r3
    f49c:	10800003 	ldbu	r2,0(r2)
    f4a0:	e0bffa45 	stb	r2,-23(fp)
    prio = (INT8U)((y << 3) + x);                       /* Find priority of task getting the msg       */
    f4a4:	e0bffa03 	ldbu	r2,-24(fp)
    f4a8:	100490fa 	slli	r2,r2,3
    f4ac:	1007883a 	mov	r3,r2
    f4b0:	e0bffa43 	ldbu	r2,-23(fp)
    f4b4:	1885883a 	add	r2,r3,r2
    f4b8:	e0bffa85 	stb	r2,-22(fp)
        x = OSUnMapTbl[(*ptbl >> 8) & 0xFF] + 8;
    }
    prio = (INT8U)((y << 4) + x);                       /* Find priority of task getting the msg       */
#endif

    ptcb                  =  OSTCBPrioTbl[prio];        /* Point to this task's OS_TCB                 */
    f4bc:	e0fffa83 	ldbu	r3,-22(fp)
    f4c0:	008000b4 	movhi	r2,2
    f4c4:	10bf4204 	addi	r2,r2,-760
    f4c8:	18c7883a 	add	r3,r3,r3
    f4cc:	18c7883a 	add	r3,r3,r3
    f4d0:	10c5883a 	add	r2,r2,r3
    f4d4:	10800017 	ldw	r2,0(r2)
    f4d8:	e0bffb15 	stw	r2,-20(fp)
    ptcb->OSTCBDly        =  0;                         /* Prevent OSTimeTick() from readying task     */
    f4dc:	e0bffb17 	ldw	r2,-20(fp)
    f4e0:	10000b8d 	sth	zero,46(r2)
#if ((OS_Q_EN > 0) && (OS_MAX_QS > 0)) || (OS_MBOX_EN > 0)
    ptcb->OSTCBMsg        =  pmsg;                      /* Send message directly to waiting task       */
    f4e4:	e0bffb17 	ldw	r2,-20(fp)
    f4e8:	e0fffd17 	ldw	r3,-12(fp)
    f4ec:	10c00915 	stw	r3,36(r2)
#else
    pmsg                  =  pmsg;                      /* Prevent compiler warning if not used        */
#endif
    ptcb->OSTCBStat      &= ~msk;                       /* Clear bit associated with event type        */
    f4f0:	e0bffb17 	ldw	r2,-20(fp)
    f4f4:	10800c03 	ldbu	r2,48(r2)
    f4f8:	1007883a 	mov	r3,r2
    f4fc:	e0bffe03 	ldbu	r2,-8(fp)
    f500:	0084303a 	nor	r2,zero,r2
    f504:	1884703a 	and	r2,r3,r2
    f508:	1007883a 	mov	r3,r2
    f50c:	e0bffb17 	ldw	r2,-20(fp)
    f510:	10c00c05 	stb	r3,48(r2)
    ptcb->OSTCBStatPend   =  pend_stat;                 /* Set pend status of post or abort            */
    f514:	e0bffb17 	ldw	r2,-20(fp)
    f518:	e0ffff03 	ldbu	r3,-4(fp)
    f51c:	10c00c45 	stb	r3,49(r2)
                                                        /* See if task is ready (could be susp'd)      */
    if ((ptcb->OSTCBStat &   OS_STAT_SUSPEND) == OS_STAT_RDY) {
    f520:	e0bffb17 	ldw	r2,-20(fp)
    f524:	10800c03 	ldbu	r2,48(r2)
    f528:	10803fcc 	andi	r2,r2,255
    f52c:	1080020c 	andi	r2,r2,8
    f530:	1000111e 	bne	r2,zero,f578 <OS_EventTaskRdy+0x148>
        OSRdyGrp         |=  ptcb->OSTCBBitY;           /* Put task in the ready to run list           */
    f534:	e0bffb17 	ldw	r2,-20(fp)
    f538:	10c00d83 	ldbu	r3,54(r2)
    f53c:	d0a72d03 	ldbu	r2,-25420(gp)
    f540:	1884b03a 	or	r2,r3,r2
    f544:	d0a72d05 	stb	r2,-25420(gp)
        OSRdyTbl[y]      |=  ptcb->OSTCBBitX;
    f548:	e0fffa03 	ldbu	r3,-24(fp)
    f54c:	e13ffa03 	ldbu	r4,-24(fp)
    f550:	d0a72d44 	addi	r2,gp,-25419
    f554:	2085883a 	add	r2,r4,r2
    f558:	11000003 	ldbu	r4,0(r2)
    f55c:	e0bffb17 	ldw	r2,-20(fp)
    f560:	10800d43 	ldbu	r2,53(r2)
    f564:	2084b03a 	or	r2,r4,r2
    f568:	1009883a 	mov	r4,r2
    f56c:	d0a72d44 	addi	r2,gp,-25419
    f570:	1885883a 	add	r2,r3,r2
    f574:	11000005 	stb	r4,0(r2)
    }

    OS_EventTaskRemove(ptcb, pevent);                   /* Remove this task from event   wait list     */
    f578:	e17ffc17 	ldw	r5,-16(fp)
    f57c:	e13ffb17 	ldw	r4,-20(fp)
    f580:	000f8280 	call	f828 <OS_EventTaskRemove>
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {   /* Remove this task from events' wait lists    */
    f584:	e0bffb17 	ldw	r2,-20(fp)
    f588:	10800817 	ldw	r2,32(r2)
    f58c:	10000826 	beq	r2,zero,f5b0 <OS_EventTaskRdy+0x180>
        OS_EventTaskRemoveMulti(ptcb, ptcb->OSTCBEventMultiPtr);
    f590:	e0bffb17 	ldw	r2,-20(fp)
    f594:	10800817 	ldw	r2,32(r2)
    f598:	100b883a 	mov	r5,r2
    f59c:	e13ffb17 	ldw	r4,-20(fp)
    f5a0:	000f8e00 	call	f8e0 <OS_EventTaskRemoveMulti>
        ptcb->OSTCBEventPtr       = (OS_EVENT  *)pevent;/* Return event as first multi-pend event ready*/
    f5a4:	e0bffb17 	ldw	r2,-20(fp)
    f5a8:	e0fffc17 	ldw	r3,-16(fp)
    f5ac:	10c00715 	stw	r3,28(r2)
    }
#endif

    return (prio);
    f5b0:	e0bffa83 	ldbu	r2,-22(fp)
}
    f5b4:	e037883a 	mov	sp,fp
    f5b8:	dfc00117 	ldw	ra,4(sp)
    f5bc:	df000017 	ldw	fp,0(sp)
    f5c0:	dec00204 	addi	sp,sp,8
    f5c4:	f800283a 	ret

0000f5c8 <OS_EventTaskWait>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
void  OS_EventTaskWait (OS_EVENT *pevent)
{
    f5c8:	defffd04 	addi	sp,sp,-12
    f5cc:	df000215 	stw	fp,8(sp)
    f5d0:	df000204 	addi	fp,sp,8
    f5d4:	e13fff15 	stw	r4,-4(fp)
    INT8U  y;


    OSTCBCur->OSTCBEventPtr               = pevent;                 /* Store ptr to ECB in TCB         */
    f5d8:	d0a73017 	ldw	r2,-25408(gp)
    f5dc:	e0ffff17 	ldw	r3,-4(fp)
    f5e0:	10c00715 	stw	r3,28(r2)

    pevent->OSEventTbl[OSTCBCur->OSTCBY] |= OSTCBCur->OSTCBBitX;    /* Put task in waiting list        */
    f5e4:	d0a73017 	ldw	r2,-25408(gp)
    f5e8:	10800d03 	ldbu	r2,52(r2)
    f5ec:	10803fcc 	andi	r2,r2,255
    f5f0:	d0e73017 	ldw	r3,-25408(gp)
    f5f4:	18c00d03 	ldbu	r3,52(r3)
    f5f8:	18c03fcc 	andi	r3,r3,255
    f5fc:	e13fff17 	ldw	r4,-4(fp)
    f600:	20c7883a 	add	r3,r4,r3
    f604:	18c002c4 	addi	r3,r3,11
    f608:	19000003 	ldbu	r4,0(r3)
    f60c:	d0e73017 	ldw	r3,-25408(gp)
    f610:	18c00d43 	ldbu	r3,53(r3)
    f614:	20c6b03a 	or	r3,r4,r3
    f618:	1809883a 	mov	r4,r3
    f61c:	e0ffff17 	ldw	r3,-4(fp)
    f620:	1885883a 	add	r2,r3,r2
    f624:	108002c4 	addi	r2,r2,11
    f628:	11000005 	stb	r4,0(r2)
    pevent->OSEventGrp                   |= OSTCBCur->OSTCBBitY;
    f62c:	e0bfff17 	ldw	r2,-4(fp)
    f630:	10c00283 	ldbu	r3,10(r2)
    f634:	d0a73017 	ldw	r2,-25408(gp)
    f638:	10800d83 	ldbu	r2,54(r2)
    f63c:	1884b03a 	or	r2,r3,r2
    f640:	1007883a 	mov	r3,r2
    f644:	e0bfff17 	ldw	r2,-4(fp)
    f648:	10c00285 	stb	r3,10(r2)

    y             =  OSTCBCur->OSTCBY;            /* Task no longer ready                              */
    f64c:	d0a73017 	ldw	r2,-25408(gp)
    f650:	10800d03 	ldbu	r2,52(r2)
    f654:	e0bffe05 	stb	r2,-8(fp)
    OSRdyTbl[y]  &= ~OSTCBCur->OSTCBBitX;
    f658:	e0fffe03 	ldbu	r3,-8(fp)
    f65c:	e13ffe03 	ldbu	r4,-8(fp)
    f660:	d0a72d44 	addi	r2,gp,-25419
    f664:	2085883a 	add	r2,r4,r2
    f668:	10800003 	ldbu	r2,0(r2)
    f66c:	1009883a 	mov	r4,r2
    f670:	d0a73017 	ldw	r2,-25408(gp)
    f674:	10800d43 	ldbu	r2,53(r2)
    f678:	0084303a 	nor	r2,zero,r2
    f67c:	2084703a 	and	r2,r4,r2
    f680:	1009883a 	mov	r4,r2
    f684:	d0a72d44 	addi	r2,gp,-25419
    f688:	1885883a 	add	r2,r3,r2
    f68c:	11000005 	stb	r4,0(r2)
    if (OSRdyTbl[y] == 0) {
    f690:	e0fffe03 	ldbu	r3,-8(fp)
    f694:	d0a72d44 	addi	r2,gp,-25419
    f698:	1885883a 	add	r2,r3,r2
    f69c:	10800003 	ldbu	r2,0(r2)
    f6a0:	10803fcc 	andi	r2,r2,255
    f6a4:	1000071e 	bne	r2,zero,f6c4 <OS_EventTaskWait+0xfc>
        OSRdyGrp &= ~OSTCBCur->OSTCBBitY;         /* Clear event grp bit if this was only task pending */
    f6a8:	d0a73017 	ldw	r2,-25408(gp)
    f6ac:	10800d83 	ldbu	r2,54(r2)
    f6b0:	0084303a 	nor	r2,zero,r2
    f6b4:	1007883a 	mov	r3,r2
    f6b8:	d0a72d03 	ldbu	r2,-25420(gp)
    f6bc:	1884703a 	and	r2,r3,r2
    f6c0:	d0a72d05 	stb	r2,-25420(gp)
    }
}
    f6c4:	0001883a 	nop
    f6c8:	e037883a 	mov	sp,fp
    f6cc:	df000017 	ldw	fp,0(sp)
    f6d0:	dec00104 	addi	sp,sp,4
    f6d4:	f800283a 	ret

0000f6d8 <OS_EventTaskWaitMulti>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if ((OS_EVENT_EN) && (OS_EVENT_MULTI_EN > 0))
void  OS_EventTaskWaitMulti (OS_EVENT **pevents_wait)
{
    f6d8:	defffb04 	addi	sp,sp,-20
    f6dc:	df000415 	stw	fp,16(sp)
    f6e0:	df000404 	addi	fp,sp,16
    f6e4:	e13fff15 	stw	r4,-4(fp)
    OS_EVENT **pevents;
    OS_EVENT  *pevent;
    INT8U      y;


    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;
    f6e8:	d0a73017 	ldw	r2,-25408(gp)
    f6ec:	10000715 	stw	zero,28(r2)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)pevents_wait;       /* Store ptr to ECBs in TCB        */
    f6f0:	d0a73017 	ldw	r2,-25408(gp)
    f6f4:	e0ffff17 	ldw	r3,-4(fp)
    f6f8:	10c00815 	stw	r3,32(r2)

    pevents =  pevents_wait;
    f6fc:	e0bfff17 	ldw	r2,-4(fp)
    f700:	e0bffc15 	stw	r2,-16(fp)
    pevent  = *pevents;
    f704:	e0bffc17 	ldw	r2,-16(fp)
    f708:	10800017 	ldw	r2,0(r2)
    f70c:	e0bffd15 	stw	r2,-12(fp)
    while (pevent != (OS_EVENT *)0) {                               /* Put task in waiting lists       */
    f710:	00002006 	br	f794 <OS_EventTaskWaitMulti+0xbc>
        pevent->OSEventTbl[OSTCBCur->OSTCBY] |= OSTCBCur->OSTCBBitX;
    f714:	d0a73017 	ldw	r2,-25408(gp)
    f718:	10800d03 	ldbu	r2,52(r2)
    f71c:	10803fcc 	andi	r2,r2,255
    f720:	d0e73017 	ldw	r3,-25408(gp)
    f724:	18c00d03 	ldbu	r3,52(r3)
    f728:	18c03fcc 	andi	r3,r3,255
    f72c:	e13ffd17 	ldw	r4,-12(fp)
    f730:	20c7883a 	add	r3,r4,r3
    f734:	18c002c4 	addi	r3,r3,11
    f738:	19000003 	ldbu	r4,0(r3)
    f73c:	d0e73017 	ldw	r3,-25408(gp)
    f740:	18c00d43 	ldbu	r3,53(r3)
    f744:	20c6b03a 	or	r3,r4,r3
    f748:	1809883a 	mov	r4,r3
    f74c:	e0fffd17 	ldw	r3,-12(fp)
    f750:	1885883a 	add	r2,r3,r2
    f754:	108002c4 	addi	r2,r2,11
    f758:	11000005 	stb	r4,0(r2)
        pevent->OSEventGrp                   |= OSTCBCur->OSTCBBitY;
    f75c:	e0bffd17 	ldw	r2,-12(fp)
    f760:	10c00283 	ldbu	r3,10(r2)
    f764:	d0a73017 	ldw	r2,-25408(gp)
    f768:	10800d83 	ldbu	r2,54(r2)
    f76c:	1884b03a 	or	r2,r3,r2
    f770:	1007883a 	mov	r3,r2
    f774:	e0bffd17 	ldw	r2,-12(fp)
    f778:	10c00285 	stb	r3,10(r2)
        pevents++;
    f77c:	e0bffc17 	ldw	r2,-16(fp)
    f780:	10800104 	addi	r2,r2,4
    f784:	e0bffc15 	stw	r2,-16(fp)
        pevent = *pevents;
    f788:	e0bffc17 	ldw	r2,-16(fp)
    f78c:	10800017 	ldw	r2,0(r2)
    f790:	e0bffd15 	stw	r2,-12(fp)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)pevents_wait;       /* Store ptr to ECBs in TCB        */

    pevents =  pevents_wait;
    pevent  = *pevents;
    while (pevent != (OS_EVENT *)0) {                               /* Put task in waiting lists       */
    f794:	e0bffd17 	ldw	r2,-12(fp)
    f798:	103fde1e 	bne	r2,zero,f714 <__alt_data_end+0xfffdf714>
        pevent->OSEventGrp                   |= OSTCBCur->OSTCBBitY;
        pevents++;
        pevent = *pevents;
    }

    y             =  OSTCBCur->OSTCBY;            /* Task no longer ready                              */
    f79c:	d0a73017 	ldw	r2,-25408(gp)
    f7a0:	10800d03 	ldbu	r2,52(r2)
    f7a4:	e0bffe05 	stb	r2,-8(fp)
    OSRdyTbl[y]  &= ~OSTCBCur->OSTCBBitX;
    f7a8:	e0fffe03 	ldbu	r3,-8(fp)
    f7ac:	e13ffe03 	ldbu	r4,-8(fp)
    f7b0:	d0a72d44 	addi	r2,gp,-25419
    f7b4:	2085883a 	add	r2,r4,r2
    f7b8:	10800003 	ldbu	r2,0(r2)
    f7bc:	1009883a 	mov	r4,r2
    f7c0:	d0a73017 	ldw	r2,-25408(gp)
    f7c4:	10800d43 	ldbu	r2,53(r2)
    f7c8:	0084303a 	nor	r2,zero,r2
    f7cc:	2084703a 	and	r2,r4,r2
    f7d0:	1009883a 	mov	r4,r2
    f7d4:	d0a72d44 	addi	r2,gp,-25419
    f7d8:	1885883a 	add	r2,r3,r2
    f7dc:	11000005 	stb	r4,0(r2)
    if (OSRdyTbl[y] == 0) {
    f7e0:	e0fffe03 	ldbu	r3,-8(fp)
    f7e4:	d0a72d44 	addi	r2,gp,-25419
    f7e8:	1885883a 	add	r2,r3,r2
    f7ec:	10800003 	ldbu	r2,0(r2)
    f7f0:	10803fcc 	andi	r2,r2,255
    f7f4:	1000071e 	bne	r2,zero,f814 <OS_EventTaskWaitMulti+0x13c>
        OSRdyGrp &= ~OSTCBCur->OSTCBBitY;         /* Clear event grp bit if this was only task pending */
    f7f8:	d0a73017 	ldw	r2,-25408(gp)
    f7fc:	10800d83 	ldbu	r2,54(r2)
    f800:	0084303a 	nor	r2,zero,r2
    f804:	1007883a 	mov	r3,r2
    f808:	d0a72d03 	ldbu	r2,-25420(gp)
    f80c:	1884703a 	and	r2,r3,r2
    f810:	d0a72d05 	stb	r2,-25420(gp)
    }
}
    f814:	0001883a 	nop
    f818:	e037883a 	mov	sp,fp
    f81c:	df000017 	ldw	fp,0(sp)
    f820:	dec00104 	addi	sp,sp,4
    f824:	f800283a 	ret

0000f828 <OS_EventTaskRemove>:
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
void  OS_EventTaskRemove (OS_TCB   *ptcb,
                          OS_EVENT *pevent)
{
    f828:	defffc04 	addi	sp,sp,-16
    f82c:	df000315 	stw	fp,12(sp)
    f830:	df000304 	addi	fp,sp,12
    f834:	e13ffe15 	stw	r4,-8(fp)
    f838:	e17fff15 	stw	r5,-4(fp)
    INT8U  y;


    y                       =  ptcb->OSTCBY;
    f83c:	e0bffe17 	ldw	r2,-8(fp)
    f840:	10800d03 	ldbu	r2,52(r2)
    f844:	e0bffd05 	stb	r2,-12(fp)
    pevent->OSEventTbl[y]  &= ~ptcb->OSTCBBitX;         /* Remove task from wait list                  */
    f848:	e0bffd03 	ldbu	r2,-12(fp)
    f84c:	e0fffd03 	ldbu	r3,-12(fp)
    f850:	e13fff17 	ldw	r4,-4(fp)
    f854:	20c7883a 	add	r3,r4,r3
    f858:	18c002c4 	addi	r3,r3,11
    f85c:	18c00003 	ldbu	r3,0(r3)
    f860:	1809883a 	mov	r4,r3
    f864:	e0fffe17 	ldw	r3,-8(fp)
    f868:	18c00d43 	ldbu	r3,53(r3)
    f86c:	00c6303a 	nor	r3,zero,r3
    f870:	20c6703a 	and	r3,r4,r3
    f874:	1809883a 	mov	r4,r3
    f878:	e0ffff17 	ldw	r3,-4(fp)
    f87c:	1885883a 	add	r2,r3,r2
    f880:	108002c4 	addi	r2,r2,11
    f884:	11000005 	stb	r4,0(r2)
    if (pevent->OSEventTbl[y] == 0) {
    f888:	e0bffd03 	ldbu	r2,-12(fp)
    f88c:	e0ffff17 	ldw	r3,-4(fp)
    f890:	1885883a 	add	r2,r3,r2
    f894:	108002c4 	addi	r2,r2,11
    f898:	10800003 	ldbu	r2,0(r2)
    f89c:	10803fcc 	andi	r2,r2,255
    f8a0:	10000a1e 	bne	r2,zero,f8cc <OS_EventTaskRemove+0xa4>
        pevent->OSEventGrp &= ~ptcb->OSTCBBitY;
    f8a4:	e0bfff17 	ldw	r2,-4(fp)
    f8a8:	10800283 	ldbu	r2,10(r2)
    f8ac:	1007883a 	mov	r3,r2
    f8b0:	e0bffe17 	ldw	r2,-8(fp)
    f8b4:	10800d83 	ldbu	r2,54(r2)
    f8b8:	0084303a 	nor	r2,zero,r2
    f8bc:	1884703a 	and	r2,r3,r2
    f8c0:	1007883a 	mov	r3,r2
    f8c4:	e0bfff17 	ldw	r2,-4(fp)
    f8c8:	10c00285 	stb	r3,10(r2)
    }
}
    f8cc:	0001883a 	nop
    f8d0:	e037883a 	mov	sp,fp
    f8d4:	df000017 	ldw	fp,0(sp)
    f8d8:	dec00104 	addi	sp,sp,4
    f8dc:	f800283a 	ret

0000f8e0 <OS_EventTaskRemoveMulti>:
*********************************************************************************************************
*/
#if ((OS_EVENT_EN) && (OS_EVENT_MULTI_EN > 0))
void  OS_EventTaskRemoveMulti (OS_TCB    *ptcb,
                               OS_EVENT **pevents_multi)
{
    f8e0:	defffa04 	addi	sp,sp,-24
    f8e4:	df000515 	stw	fp,20(sp)
    f8e8:	df000504 	addi	fp,sp,20
    f8ec:	e13ffe15 	stw	r4,-8(fp)
    f8f0:	e17fff15 	stw	r5,-4(fp)
    INT16U     bity;
    INT16U     bitx;
#endif


    y       =  ptcb->OSTCBY;
    f8f4:	e0bffe17 	ldw	r2,-8(fp)
    f8f8:	10800d03 	ldbu	r2,52(r2)
    f8fc:	e0bffd05 	stb	r2,-12(fp)
    bity    =  ptcb->OSTCBBitY;
    f900:	e0bffe17 	ldw	r2,-8(fp)
    f904:	10800d83 	ldbu	r2,54(r2)
    f908:	e0bffd45 	stb	r2,-11(fp)
    bitx    =  ptcb->OSTCBBitX;
    f90c:	e0bffe17 	ldw	r2,-8(fp)
    f910:	10800d43 	ldbu	r2,53(r2)
    f914:	e0bffd85 	stb	r2,-10(fp)
    pevents =  pevents_multi;
    f918:	e0bfff17 	ldw	r2,-4(fp)
    f91c:	e0bffb15 	stw	r2,-20(fp)
    pevent  = *pevents;
    f920:	e0bffb17 	ldw	r2,-20(fp)
    f924:	10800017 	ldw	r2,0(r2)
    f928:	e0bffc15 	stw	r2,-16(fp)
    while (pevent != (OS_EVENT *)0) {                   /* Remove task from all events' wait lists     */
    f92c:	00002506 	br	f9c4 <OS_EventTaskRemoveMulti+0xe4>
        pevent->OSEventTbl[y]  &= ~bitx;
    f930:	e0bffd03 	ldbu	r2,-12(fp)
    f934:	e0fffd03 	ldbu	r3,-12(fp)
    f938:	e13ffc17 	ldw	r4,-16(fp)
    f93c:	20c7883a 	add	r3,r4,r3
    f940:	18c002c4 	addi	r3,r3,11
    f944:	18c00003 	ldbu	r3,0(r3)
    f948:	1809883a 	mov	r4,r3
    f94c:	e0fffd83 	ldbu	r3,-10(fp)
    f950:	00c6303a 	nor	r3,zero,r3
    f954:	20c6703a 	and	r3,r4,r3
    f958:	1809883a 	mov	r4,r3
    f95c:	e0fffc17 	ldw	r3,-16(fp)
    f960:	1885883a 	add	r2,r3,r2
    f964:	108002c4 	addi	r2,r2,11
    f968:	11000005 	stb	r4,0(r2)
        if (pevent->OSEventTbl[y] == 0) {
    f96c:	e0bffd03 	ldbu	r2,-12(fp)
    f970:	e0fffc17 	ldw	r3,-16(fp)
    f974:	1885883a 	add	r2,r3,r2
    f978:	108002c4 	addi	r2,r2,11
    f97c:	10800003 	ldbu	r2,0(r2)
    f980:	10803fcc 	andi	r2,r2,255
    f984:	1000091e 	bne	r2,zero,f9ac <OS_EventTaskRemoveMulti+0xcc>
            pevent->OSEventGrp &= ~bity;
    f988:	e0bffc17 	ldw	r2,-16(fp)
    f98c:	10800283 	ldbu	r2,10(r2)
    f990:	1007883a 	mov	r3,r2
    f994:	e0bffd43 	ldbu	r2,-11(fp)
    f998:	0084303a 	nor	r2,zero,r2
    f99c:	1884703a 	and	r2,r3,r2
    f9a0:	1007883a 	mov	r3,r2
    f9a4:	e0bffc17 	ldw	r2,-16(fp)
    f9a8:	10c00285 	stb	r3,10(r2)
        }
        pevents++;
    f9ac:	e0bffb17 	ldw	r2,-20(fp)
    f9b0:	10800104 	addi	r2,r2,4
    f9b4:	e0bffb15 	stw	r2,-20(fp)
        pevent = *pevents;
    f9b8:	e0bffb17 	ldw	r2,-20(fp)
    f9bc:	10800017 	ldw	r2,0(r2)
    f9c0:	e0bffc15 	stw	r2,-16(fp)
    y       =  ptcb->OSTCBY;
    bity    =  ptcb->OSTCBBitY;
    bitx    =  ptcb->OSTCBBitX;
    pevents =  pevents_multi;
    pevent  = *pevents;
    while (pevent != (OS_EVENT *)0) {                   /* Remove task from all events' wait lists     */
    f9c4:	e0bffc17 	ldw	r2,-16(fp)
    f9c8:	103fd91e 	bne	r2,zero,f930 <__alt_data_end+0xfffdf930>
            pevent->OSEventGrp &= ~bity;
        }
        pevents++;
        pevent = *pevents;
    }
}
    f9cc:	0001883a 	nop
    f9d0:	e037883a 	mov	sp,fp
    f9d4:	df000017 	ldw	fp,0(sp)
    f9d8:	dec00104 	addi	sp,sp,4
    f9dc:	f800283a 	ret

0000f9e0 <OS_EventWaitListInit>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
void  OS_EventWaitListInit (OS_EVENT *pevent)
{
    f9e0:	defffc04 	addi	sp,sp,-16
    f9e4:	df000315 	stw	fp,12(sp)
    f9e8:	df000304 	addi	fp,sp,12
    f9ec:	e13fff15 	stw	r4,-4(fp)
    INT16U *ptbl;
#endif
    INT8U   i;


    pevent->OSEventGrp = 0;                      /* No task waiting on event                           */
    f9f0:	e0bfff17 	ldw	r2,-4(fp)
    f9f4:	10000285 	stb	zero,10(r2)
    ptbl               = &pevent->OSEventTbl[0];
    f9f8:	e0bfff17 	ldw	r2,-4(fp)
    f9fc:	108002c4 	addi	r2,r2,11
    fa00:	e0bffd15 	stw	r2,-12(fp)

    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
    fa04:	e03ffe05 	stb	zero,-8(fp)
    fa08:	00000706 	br	fa28 <OS_EventWaitListInit+0x48>
        *ptbl++ = 0;
    fa0c:	e0bffd17 	ldw	r2,-12(fp)
    fa10:	10c00044 	addi	r3,r2,1
    fa14:	e0fffd15 	stw	r3,-12(fp)
    fa18:	10000005 	stb	zero,0(r2)


    pevent->OSEventGrp = 0;                      /* No task waiting on event                           */
    ptbl               = &pevent->OSEventTbl[0];

    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
    fa1c:	e0bffe03 	ldbu	r2,-8(fp)
    fa20:	10800044 	addi	r2,r2,1
    fa24:	e0bffe05 	stb	r2,-8(fp)
    fa28:	e0bffe03 	ldbu	r2,-8(fp)
    fa2c:	108000f0 	cmpltui	r2,r2,3
    fa30:	103ff61e 	bne	r2,zero,fa0c <__alt_data_end+0xfffdfa0c>
        *ptbl++ = 0;
    }
}
    fa34:	0001883a 	nop
    fa38:	e037883a 	mov	sp,fp
    fa3c:	df000017 	ldw	fp,0(sp)
    fa40:	dec00104 	addi	sp,sp,4
    fa44:	f800283a 	ret

0000fa48 <OS_InitEventList>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitEventList (void)
{
    fa48:	defffb04 	addi	sp,sp,-20
    fa4c:	dfc00415 	stw	ra,16(sp)
    fa50:	df000315 	stw	fp,12(sp)
    fa54:	df000304 	addi	fp,sp,12
    INT16U     i;
    OS_EVENT  *pevent1;
    OS_EVENT  *pevent2;


    OS_MemClr((INT8U *)&OSEventTbl[0], sizeof(OSEventTbl)); /* Clear the event table                   */
    fa58:	0142d004 	movi	r5,2880
    fa5c:	010000b4 	movhi	r4,2
    fa60:	213b2e04 	addi	r4,r4,-4936
    fa64:	000fdc00 	call	fdc0 <OS_MemClr>
    pevent1 = &OSEventTbl[0];
    fa68:	008000b4 	movhi	r2,2
    fa6c:	10bb2e04 	addi	r2,r2,-4936
    fa70:	e0bffe15 	stw	r2,-8(fp)
    pevent2 = &OSEventTbl[1];
    fa74:	008000b4 	movhi	r2,2
    fa78:	10bb3a04 	addi	r2,r2,-4888
    fa7c:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < (OS_MAX_EVENTS - 1); i++) {             /* Init. list of free EVENT control blocks */
    fa80:	e03ffd0d 	sth	zero,-12(fp)
    fa84:	00001306 	br	fad4 <OS_InitEventList+0x8c>
        pevent1->OSEventType    = OS_EVENT_TYPE_UNUSED;
    fa88:	e0bffe17 	ldw	r2,-8(fp)
    fa8c:	10000005 	stb	zero,0(r2)
        pevent1->OSEventPtr     = pevent2;
    fa90:	e0bffe17 	ldw	r2,-8(fp)
    fa94:	e0ffff17 	ldw	r3,-4(fp)
    fa98:	10c00115 	stw	r3,4(r2)
#if OS_EVENT_NAME_SIZE > 1
        pevent1->OSEventName[0] = '?';                      /* Unknown name                            */
    fa9c:	e0bffe17 	ldw	r2,-8(fp)
    faa0:	00c00fc4 	movi	r3,63
    faa4:	10c00385 	stb	r3,14(r2)
        pevent1->OSEventName[1] = OS_ASCII_NUL;
    faa8:	e0bffe17 	ldw	r2,-8(fp)
    faac:	100003c5 	stb	zero,15(r2)
#endif
        pevent1++;
    fab0:	e0bffe17 	ldw	r2,-8(fp)
    fab4:	10800c04 	addi	r2,r2,48
    fab8:	e0bffe15 	stw	r2,-8(fp)
        pevent2++;
    fabc:	e0bfff17 	ldw	r2,-4(fp)
    fac0:	10800c04 	addi	r2,r2,48
    fac4:	e0bfff15 	stw	r2,-4(fp)


    OS_MemClr((INT8U *)&OSEventTbl[0], sizeof(OSEventTbl)); /* Clear the event table                   */
    pevent1 = &OSEventTbl[0];
    pevent2 = &OSEventTbl[1];
    for (i = 0; i < (OS_MAX_EVENTS - 1); i++) {             /* Init. list of free EVENT control blocks */
    fac8:	e0bffd0b 	ldhu	r2,-12(fp)
    facc:	10800044 	addi	r2,r2,1
    fad0:	e0bffd0d 	sth	r2,-12(fp)
    fad4:	e0bffd0b 	ldhu	r2,-12(fp)
    fad8:	10800ef0 	cmpltui	r2,r2,59
    fadc:	103fea1e 	bne	r2,zero,fa88 <__alt_data_end+0xfffdfa88>
        pevent1->OSEventName[1] = OS_ASCII_NUL;
#endif
        pevent1++;
        pevent2++;
    }
    pevent1->OSEventType            = OS_EVENT_TYPE_UNUSED;
    fae0:	e0bffe17 	ldw	r2,-8(fp)
    fae4:	10000005 	stb	zero,0(r2)
    pevent1->OSEventPtr             = (OS_EVENT *)0;
    fae8:	e0bffe17 	ldw	r2,-8(fp)
    faec:	10000115 	stw	zero,4(r2)
#if OS_EVENT_NAME_SIZE > 1
    pevent1->OSEventName[0]         = '?';
    faf0:	e0bffe17 	ldw	r2,-8(fp)
    faf4:	00c00fc4 	movi	r3,63
    faf8:	10c00385 	stb	r3,14(r2)
    pevent1->OSEventName[1]         = OS_ASCII_NUL;
    fafc:	e0bffe17 	ldw	r2,-8(fp)
    fb00:	100003c5 	stb	zero,15(r2)
#endif
    OSEventFreeList                 = &OSEventTbl[0];
    fb04:	008000b4 	movhi	r2,2
    fb08:	10bb2e04 	addi	r2,r2,-4936
    fb0c:	d0a72e15 	stw	r2,-25416(gp)
    OSEventFreeList->OSEventName[0] = '?';                  /* Unknown name                            */
    OSEventFreeList->OSEventName[1] = OS_ASCII_NUL;
#endif
#endif
#endif
}
    fb10:	0001883a 	nop
    fb14:	e037883a 	mov	sp,fp
    fb18:	dfc00117 	ldw	ra,4(sp)
    fb1c:	df000017 	ldw	fp,0(sp)
    fb20:	dec00204 	addi	sp,sp,8
    fb24:	f800283a 	ret

0000fb28 <OS_InitMisc>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitMisc (void)
{
    fb28:	deffff04 	addi	sp,sp,-4
    fb2c:	df000015 	stw	fp,0(sp)
    fb30:	d839883a 	mov	fp,sp
#if OS_TIME_GET_SET_EN > 0
    OSTime        = 0L;                                    /* Clear the 32-bit system clock            */
    fb34:	d0273115 	stw	zero,-25404(gp)
#endif

    OSIntNesting  = 0;                                     /* Clear the interrupt nesting counter      */
    fb38:	d0272f05 	stb	zero,-25412(gp)
    OSLockNesting = 0;                                     /* Clear the scheduling lock counter        */
    fb3c:	d0272105 	stb	zero,-25468(gp)

    OSTaskCtr     = 0;                                     /* Clear the number of tasks                */
    fb40:	d0272945 	stb	zero,-25435(gp)

    OSRunning     = OS_FALSE;                              /* Indicate that multitasking not started   */
    fb44:	d0272145 	stb	zero,-25467(gp)

    OSCtxSwCtr    = 0;                                     /* Clear the context switch counter         */
    fb48:	d0272615 	stw	zero,-25448(gp)
    OSIdleCtr     = 0L;                                    /* Clear the 32-bit idle counter            */
    fb4c:	d0272215 	stw	zero,-25464(gp)

#if OS_TASK_STAT_EN > 0
    OSIdleCtrRun  = 0L;
    fb50:	d0273415 	stw	zero,-25392(gp)
    OSIdleCtrMax  = 0L;
    fb54:	d0272715 	stw	zero,-25444(gp)
    OSStatRdy     = OS_FALSE;                              /* Statistic task is not ready              */
    fb58:	d0273305 	stb	zero,-25396(gp)
#endif
}
    fb5c:	0001883a 	nop
    fb60:	e037883a 	mov	sp,fp
    fb64:	df000017 	ldw	fp,0(sp)
    fb68:	dec00104 	addi	sp,sp,4
    fb6c:	f800283a 	ret

0000fb70 <OS_InitRdyList>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitRdyList (void)
{
    fb70:	defffd04 	addi	sp,sp,-12
    fb74:	df000215 	stw	fp,8(sp)
    fb78:	df000204 	addi	fp,sp,8
#else
    INT16U  *prdytbl;
#endif


    OSRdyGrp      = 0;                                     /* Clear the ready list                     */
    fb7c:	d0272d05 	stb	zero,-25420(gp)
    prdytbl       = &OSRdyTbl[0];
    fb80:	d0a72d44 	addi	r2,gp,-25419
    fb84:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < OS_RDY_TBL_SIZE; i++) {
    fb88:	e03ffe05 	stb	zero,-8(fp)
    fb8c:	00000706 	br	fbac <OS_InitRdyList+0x3c>
        *prdytbl++ = 0;
    fb90:	e0bfff17 	ldw	r2,-4(fp)
    fb94:	10c00044 	addi	r3,r2,1
    fb98:	e0ffff15 	stw	r3,-4(fp)
    fb9c:	10000005 	stb	zero,0(r2)
#endif


    OSRdyGrp      = 0;                                     /* Clear the ready list                     */
    prdytbl       = &OSRdyTbl[0];
    for (i = 0; i < OS_RDY_TBL_SIZE; i++) {
    fba0:	e0bffe03 	ldbu	r2,-8(fp)
    fba4:	10800044 	addi	r2,r2,1
    fba8:	e0bffe05 	stb	r2,-8(fp)
    fbac:	e0bffe03 	ldbu	r2,-8(fp)
    fbb0:	108000f0 	cmpltui	r2,r2,3
    fbb4:	103ff61e 	bne	r2,zero,fb90 <__alt_data_end+0xfffdfb90>
        *prdytbl++ = 0;
    }

    OSPrioCur     = 0;
    fbb8:	d0272345 	stb	zero,-25459(gp)
    OSPrioHighRdy = 0;
    fbbc:	d0272305 	stb	zero,-25460(gp)

    OSTCBHighRdy  = (OS_TCB *)0;
    fbc0:	d0272b15 	stw	zero,-25428(gp)
    OSTCBCur      = (OS_TCB *)0;
    fbc4:	d0273015 	stw	zero,-25408(gp)
}
    fbc8:	0001883a 	nop
    fbcc:	e037883a 	mov	sp,fp
    fbd0:	df000017 	ldw	fp,0(sp)
    fbd4:	dec00104 	addi	sp,sp,4
    fbd8:	f800283a 	ret

0000fbdc <OS_InitTaskIdle>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitTaskIdle (void)
{
    fbdc:	defff804 	addi	sp,sp,-32
    fbe0:	dfc00715 	stw	ra,28(sp)
    fbe4:	df000615 	stw	fp,24(sp)
    fbe8:	df000604 	addi	fp,sp,24
#endif


#if OS_TASK_CREATE_EXT_EN > 0
    #if OS_STK_GROWTH == 1
    (void)OSTaskCreateExt(OS_TaskIdle,
    fbec:	008000c4 	movi	r2,3
    fbf0:	d8800415 	stw	r2,16(sp)
    fbf4:	d8000315 	stw	zero,12(sp)
    fbf8:	00808004 	movi	r2,512
    fbfc:	d8800215 	stw	r2,8(sp)
    fc00:	008000b4 	movhi	r2,2
    fc04:	10b92e04 	addi	r2,r2,-6984
    fc08:	d8800115 	stw	r2,4(sp)
    fc0c:	00bfffd4 	movui	r2,65535
    fc10:	d8800015 	stw	r2,0(sp)
    fc14:	01c00504 	movi	r7,20
    fc18:	018000b4 	movhi	r6,2
    fc1c:	31bb2d04 	addi	r6,r6,-4940
    fc20:	000b883a 	mov	r5,zero
    fc24:	01000074 	movhi	r4,1
    fc28:	21002204 	addi	r4,r4,136
    fc2c:	00147540 	call	14754 <OSTaskCreateExt>
                       OS_TASK_IDLE_PRIO);
    #endif
#endif

#if OS_TASK_NAME_SIZE > 14
    OSTaskNameSet(OS_TASK_IDLE_PRIO, (INT8U *)"uC/OS-II Idle", &err);
    fc30:	e1bfff04 	addi	r6,fp,-4
    fc34:	014000b4 	movhi	r5,2
    fc38:	29609304 	addi	r5,r5,-32180
    fc3c:	01000504 	movi	r4,20
    fc40:	0014f640 	call	14f64 <OSTaskNameSet>
#else
#if OS_TASK_NAME_SIZE > 7
    OSTaskNameSet(OS_TASK_IDLE_PRIO, (INT8U *)"OS-Idle", &err);
#endif
#endif
}
    fc44:	0001883a 	nop
    fc48:	e037883a 	mov	sp,fp
    fc4c:	dfc00117 	ldw	ra,4(sp)
    fc50:	df000017 	ldw	fp,0(sp)
    fc54:	dec00204 	addi	sp,sp,8
    fc58:	f800283a 	ret

0000fc5c <OS_InitTaskStat>:
*********************************************************************************************************
*/

#if OS_TASK_STAT_EN > 0
static  void  OS_InitTaskStat (void)
{
    fc5c:	defff804 	addi	sp,sp,-32
    fc60:	dfc00715 	stw	ra,28(sp)
    fc64:	df000615 	stw	fp,24(sp)
    fc68:	df000604 	addi	fp,sp,24
#endif


#if OS_TASK_CREATE_EXT_EN > 0
    #if OS_STK_GROWTH == 1
    (void)OSTaskCreateExt(OS_TaskStat,
    fc6c:	008000c4 	movi	r2,3
    fc70:	d8800415 	stw	r2,16(sp)
    fc74:	d8000315 	stw	zero,12(sp)
    fc78:	00808004 	movi	r2,512
    fc7c:	d8800215 	stw	r2,8(sp)
    fc80:	008000b4 	movhi	r2,2
    fc84:	10b6b604 	addi	r2,r2,-9512
    fc88:	d8800115 	stw	r2,4(sp)
    fc8c:	00bfff94 	movui	r2,65534
    fc90:	d8800015 	stw	r2,0(sp)
    fc94:	01c004c4 	movi	r7,19
    fc98:	018000b4 	movhi	r6,2
    fc9c:	31b8b504 	addi	r6,r6,-7468
    fca0:	000b883a 	mov	r5,zero
    fca4:	01000074 	movhi	r4,1
    fca8:	21003904 	addi	r4,r4,228
    fcac:	00147540 	call	14754 <OSTaskCreateExt>
                       OS_TASK_STAT_PRIO);                             /* One higher than the idle task  */
    #endif
#endif

#if OS_TASK_NAME_SIZE > 14
    OSTaskNameSet(OS_TASK_STAT_PRIO, (INT8U *)"uC/OS-II Stat", &err);
    fcb0:	e1bfff04 	addi	r6,fp,-4
    fcb4:	014000b4 	movhi	r5,2
    fcb8:	29609704 	addi	r5,r5,-32164
    fcbc:	010004c4 	movi	r4,19
    fcc0:	0014f640 	call	14f64 <OSTaskNameSet>
#else
#if OS_TASK_NAME_SIZE > 7
    OSTaskNameSet(OS_TASK_STAT_PRIO, (INT8U *)"OS-Stat", &err);
#endif
#endif
}
    fcc4:	0001883a 	nop
    fcc8:	e037883a 	mov	sp,fp
    fccc:	dfc00117 	ldw	ra,4(sp)
    fcd0:	df000017 	ldw	fp,0(sp)
    fcd4:	dec00204 	addi	sp,sp,8
    fcd8:	f800283a 	ret

0000fcdc <OS_InitTCBList>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitTCBList (void)
{
    fcdc:	defffb04 	addi	sp,sp,-20
    fce0:	dfc00415 	stw	ra,16(sp)
    fce4:	df000315 	stw	fp,12(sp)
    fce8:	df000304 	addi	fp,sp,12
    INT8U    i;
    OS_TCB  *ptcb1;
    OS_TCB  *ptcb2;


    OS_MemClr((INT8U *)&OSTCBTbl[0],     sizeof(OSTCBTbl));      /* Clear all the TCBs                 */
    fcec:	01414404 	movi	r5,1296
    fcf0:	010000b4 	movhi	r4,2
    fcf4:	213dfe04 	addi	r4,r4,-2056
    fcf8:	000fdc00 	call	fdc0 <OS_MemClr>
    OS_MemClr((INT8U *)&OSTCBPrioTbl[0], sizeof(OSTCBPrioTbl));  /* Clear the priority table           */
    fcfc:	01401504 	movi	r5,84
    fd00:	010000b4 	movhi	r4,2
    fd04:	213f4204 	addi	r4,r4,-760
    fd08:	000fdc00 	call	fdc0 <OS_MemClr>
    ptcb1 = &OSTCBTbl[0];
    fd0c:	008000b4 	movhi	r2,2
    fd10:	10bdfe04 	addi	r2,r2,-2056
    fd14:	e0bffe15 	stw	r2,-8(fp)
    ptcb2 = &OSTCBTbl[1];
    fd18:	008000b4 	movhi	r2,2
    fd1c:	10be1904 	addi	r2,r2,-1948
    fd20:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < (OS_MAX_TASKS + OS_N_SYS_TASKS - 1); i++) {  /* Init. list of free TCBs            */
    fd24:	e03ffd05 	stb	zero,-12(fp)
    fd28:	00001106 	br	fd70 <OS_InitTCBList+0x94>
        ptcb1->OSTCBNext = ptcb2;
    fd2c:	e0bffe17 	ldw	r2,-8(fp)
    fd30:	e0ffff17 	ldw	r3,-4(fp)
    fd34:	10c00515 	stw	r3,20(r2)
#if OS_TASK_NAME_SIZE > 1
        ptcb1->OSTCBTaskName[0] = '?';                           /* Unknown name                       */
    fd38:	e0bffe17 	ldw	r2,-8(fp)
    fd3c:	00c00fc4 	movi	r3,63
    fd40:	10c01305 	stb	r3,76(r2)
        ptcb1->OSTCBTaskName[1] = OS_ASCII_NUL;
    fd44:	e0bffe17 	ldw	r2,-8(fp)
    fd48:	10001345 	stb	zero,77(r2)
#endif
        ptcb1++;
    fd4c:	e0bffe17 	ldw	r2,-8(fp)
    fd50:	10801b04 	addi	r2,r2,108
    fd54:	e0bffe15 	stw	r2,-8(fp)
        ptcb2++;
    fd58:	e0bfff17 	ldw	r2,-4(fp)
    fd5c:	10801b04 	addi	r2,r2,108
    fd60:	e0bfff15 	stw	r2,-4(fp)

    OS_MemClr((INT8U *)&OSTCBTbl[0],     sizeof(OSTCBTbl));      /* Clear all the TCBs                 */
    OS_MemClr((INT8U *)&OSTCBPrioTbl[0], sizeof(OSTCBPrioTbl));  /* Clear the priority table           */
    ptcb1 = &OSTCBTbl[0];
    ptcb2 = &OSTCBTbl[1];
    for (i = 0; i < (OS_MAX_TASKS + OS_N_SYS_TASKS - 1); i++) {  /* Init. list of free TCBs            */
    fd64:	e0bffd03 	ldbu	r2,-12(fp)
    fd68:	10800044 	addi	r2,r2,1
    fd6c:	e0bffd05 	stb	r2,-12(fp)
    fd70:	e0bffd03 	ldbu	r2,-12(fp)
    fd74:	108002f0 	cmpltui	r2,r2,11
    fd78:	103fec1e 	bne	r2,zero,fd2c <__alt_data_end+0xfffdfd2c>
        ptcb1->OSTCBTaskName[1] = OS_ASCII_NUL;
#endif
        ptcb1++;
        ptcb2++;
    }
    ptcb1->OSTCBNext = (OS_TCB *)0;                              /* Last OS_TCB                        */
    fd7c:	e0bffe17 	ldw	r2,-8(fp)
    fd80:	10000515 	stw	zero,20(r2)
#if OS_TASK_NAME_SIZE > 1
    ptcb1->OSTCBTaskName[0] = '?';                               /* Unknown name                       */
    fd84:	e0bffe17 	ldw	r2,-8(fp)
    fd88:	00c00fc4 	movi	r3,63
    fd8c:	10c01305 	stb	r3,76(r2)
    ptcb1->OSTCBTaskName[1] = OS_ASCII_NUL;
    fd90:	e0bffe17 	ldw	r2,-8(fp)
    fd94:	10001345 	stb	zero,77(r2)
#endif
    OSTCBList               = (OS_TCB *)0;                       /* TCB lists initializations          */
    fd98:	d0272415 	stw	zero,-25456(gp)
    OSTCBFreeList           = &OSTCBTbl[0];
    fd9c:	008000b4 	movhi	r2,2
    fda0:	10bdfe04 	addi	r2,r2,-2056
    fda4:	d0a72815 	stw	r2,-25440(gp)
}
    fda8:	0001883a 	nop
    fdac:	e037883a 	mov	sp,fp
    fdb0:	dfc00117 	ldw	ra,4(sp)
    fdb4:	df000017 	ldw	fp,0(sp)
    fdb8:	dec00204 	addi	sp,sp,8
    fdbc:	f800283a 	ret

0000fdc0 <OS_MemClr>:
*                 of the alignment of the destination.
*********************************************************************************************************
*/

void  OS_MemClr (INT8U *pdest, INT16U size)
{
    fdc0:	defffd04 	addi	sp,sp,-12
    fdc4:	df000215 	stw	fp,8(sp)
    fdc8:	df000204 	addi	fp,sp,8
    fdcc:	e13ffe15 	stw	r4,-8(fp)
    fdd0:	2805883a 	mov	r2,r5
    fdd4:	e0bfff0d 	sth	r2,-4(fp)
    while (size > 0) {
    fdd8:	00000706 	br	fdf8 <OS_MemClr+0x38>
        *pdest++ = (INT8U)0;
    fddc:	e0bffe17 	ldw	r2,-8(fp)
    fde0:	10c00044 	addi	r3,r2,1
    fde4:	e0fffe15 	stw	r3,-8(fp)
    fde8:	10000005 	stb	zero,0(r2)
        size--;
    fdec:	e0bfff0b 	ldhu	r2,-4(fp)
    fdf0:	10bfffc4 	addi	r2,r2,-1
    fdf4:	e0bfff0d 	sth	r2,-4(fp)
*********************************************************************************************************
*/

void  OS_MemClr (INT8U *pdest, INT16U size)
{
    while (size > 0) {
    fdf8:	e0bfff0b 	ldhu	r2,-4(fp)
    fdfc:	103ff71e 	bne	r2,zero,fddc <__alt_data_end+0xfffdfddc>
        *pdest++ = (INT8U)0;
        size--;
    }
}
    fe00:	0001883a 	nop
    fe04:	e037883a 	mov	sp,fp
    fe08:	df000017 	ldw	fp,0(sp)
    fe0c:	dec00104 	addi	sp,sp,4
    fe10:	f800283a 	ret

0000fe14 <OS_MemCopy>:
*                 of the alignment of the source and destination.
*********************************************************************************************************
*/

void  OS_MemCopy (INT8U *pdest, INT8U *psrc, INT16U size)
{
    fe14:	defffc04 	addi	sp,sp,-16
    fe18:	df000315 	stw	fp,12(sp)
    fe1c:	df000304 	addi	fp,sp,12
    fe20:	e13ffd15 	stw	r4,-12(fp)
    fe24:	e17ffe15 	stw	r5,-8(fp)
    fe28:	3005883a 	mov	r2,r6
    fe2c:	e0bfff0d 	sth	r2,-4(fp)
    while (size > 0) {
    fe30:	00000b06 	br	fe60 <OS_MemCopy+0x4c>
        *pdest++ = *psrc++;
    fe34:	e0bffd17 	ldw	r2,-12(fp)
    fe38:	10c00044 	addi	r3,r2,1
    fe3c:	e0fffd15 	stw	r3,-12(fp)
    fe40:	e0fffe17 	ldw	r3,-8(fp)
    fe44:	19000044 	addi	r4,r3,1
    fe48:	e13ffe15 	stw	r4,-8(fp)
    fe4c:	18c00003 	ldbu	r3,0(r3)
    fe50:	10c00005 	stb	r3,0(r2)
        size--;
    fe54:	e0bfff0b 	ldhu	r2,-4(fp)
    fe58:	10bfffc4 	addi	r2,r2,-1
    fe5c:	e0bfff0d 	sth	r2,-4(fp)
*********************************************************************************************************
*/

void  OS_MemCopy (INT8U *pdest, INT8U *psrc, INT16U size)
{
    while (size > 0) {
    fe60:	e0bfff0b 	ldhu	r2,-4(fp)
    fe64:	103ff31e 	bne	r2,zero,fe34 <__alt_data_end+0xfffdfe34>
        *pdest++ = *psrc++;
        size--;
    }
}
    fe68:	0001883a 	nop
    fe6c:	e037883a 	mov	sp,fp
    fe70:	df000017 	ldw	fp,0(sp)
    fe74:	dec00104 	addi	sp,sp,4
    fe78:	f800283a 	ret

0000fe7c <OS_Sched>:
*              2) Rescheduling is prevented when the scheduler is locked (see OS_SchedLock())
*********************************************************************************************************
*/

void  OS_Sched (void)
{
    fe7c:	defffb04 	addi	sp,sp,-20
    fe80:	dfc00415 	stw	ra,16(sp)
    fe84:	df000315 	stw	fp,12(sp)
    fe88:	df000304 	addi	fp,sp,12
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
    fe8c:	e03ffd15 	stw	zero,-12(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    fe90:	0005303a 	rdctl	r2,status
    fe94:	e0bfff15 	stw	r2,-4(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    fe98:	e0ffff17 	ldw	r3,-4(fp)
    fe9c:	00bfff84 	movi	r2,-2
    fea0:	1884703a 	and	r2,r3,r2
    fea4:	1001703a 	wrctl	status,r2
  
  return context;
    fea8:	e0bfff17 	ldw	r2,-4(fp)
#endif



    OS_ENTER_CRITICAL();
    feac:	e0bffd15 	stw	r2,-12(fp)
    if (OSIntNesting == 0) {                           /* Schedule only if all ISRs done and ...       */
    feb0:	d0a72f03 	ldbu	r2,-25412(gp)
    feb4:	10803fcc 	andi	r2,r2,255
    feb8:	10001a1e 	bne	r2,zero,ff24 <OS_Sched+0xa8>
        if (OSLockNesting == 0) {                      /* ... scheduler is not locked                  */
    febc:	d0a72103 	ldbu	r2,-25468(gp)
    fec0:	10803fcc 	andi	r2,r2,255
    fec4:	1000171e 	bne	r2,zero,ff24 <OS_Sched+0xa8>
            OS_SchedNew();
    fec8:	000ff4c0 	call	ff4c <OS_SchedNew>
            if (OSPrioHighRdy != OSPrioCur) {          /* No Ctx Sw if current task is highest rdy     */
    fecc:	d0e72303 	ldbu	r3,-25460(gp)
    fed0:	d0a72343 	ldbu	r2,-25459(gp)
    fed4:	18c03fcc 	andi	r3,r3,255
    fed8:	10803fcc 	andi	r2,r2,255
    fedc:	18801126 	beq	r3,r2,ff24 <OS_Sched+0xa8>
                OSTCBHighRdy = OSTCBPrioTbl[OSPrioHighRdy];
    fee0:	d0a72303 	ldbu	r2,-25460(gp)
    fee4:	10c03fcc 	andi	r3,r2,255
    fee8:	008000b4 	movhi	r2,2
    feec:	10bf4204 	addi	r2,r2,-760
    fef0:	18c7883a 	add	r3,r3,r3
    fef4:	18c7883a 	add	r3,r3,r3
    fef8:	10c5883a 	add	r2,r2,r3
    fefc:	10800017 	ldw	r2,0(r2)
    ff00:	d0a72b15 	stw	r2,-25428(gp)
#if OS_TASK_PROFILE_EN > 0
                OSTCBHighRdy->OSTCBCtxSwCtr++;         /* Inc. # of context switches to this task      */
    ff04:	d0a72b17 	ldw	r2,-25428(gp)
    ff08:	10c00e17 	ldw	r3,56(r2)
    ff0c:	18c00044 	addi	r3,r3,1
    ff10:	10c00e15 	stw	r3,56(r2)
#endif
                OSCtxSwCtr++;                          /* Increment context switch counter             */
    ff14:	d0a72617 	ldw	r2,-25448(gp)
    ff18:	10800044 	addi	r2,r2,1
    ff1c:	d0a72615 	stw	r2,-25448(gp)
                OS_TASK_SW();                          /* Perform a context switch                     */
    ff20:	00174dc0 	call	174dc <OSCtxSw>
    ff24:	e0bffd17 	ldw	r2,-12(fp)
    ff28:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    ff2c:	e0bffe17 	ldw	r2,-8(fp)
    ff30:	1001703a 	wrctl	status,r2
            }
        }
    }
    OS_EXIT_CRITICAL();
}
    ff34:	0001883a 	nop
    ff38:	e037883a 	mov	sp,fp
    ff3c:	dfc00117 	ldw	ra,4(sp)
    ff40:	df000017 	ldw	fp,0(sp)
    ff44:	dec00204 	addi	sp,sp,8
    ff48:	f800283a 	ret

0000ff4c <OS_SchedNew>:
*              2) Interrupts are assumed to be disabled when this function is called.
*********************************************************************************************************
*/

static  void  OS_SchedNew (void)
{
    ff4c:	defffe04 	addi	sp,sp,-8
    ff50:	df000115 	stw	fp,4(sp)
    ff54:	df000104 	addi	fp,sp,4
#if OS_LOWEST_PRIO <= 63                         /* See if we support up to 64 tasks                   */
    INT8U   y;


    y             = OSUnMapTbl[OSRdyGrp];
    ff58:	d0a72d03 	ldbu	r2,-25420(gp)
    ff5c:	10c03fcc 	andi	r3,r2,255
    ff60:	008000b4 	movhi	r2,2
    ff64:	10a05304 	addi	r2,r2,-32436
    ff68:	10c5883a 	add	r2,r2,r3
    ff6c:	10800003 	ldbu	r2,0(r2)
    ff70:	e0bfff05 	stb	r2,-4(fp)
    OSPrioHighRdy = (INT8U)((y << 3) + OSUnMapTbl[OSRdyTbl[y]]);
    ff74:	e0bfff03 	ldbu	r2,-4(fp)
    ff78:	100490fa 	slli	r2,r2,3
    ff7c:	1009883a 	mov	r4,r2
    ff80:	e0ffff03 	ldbu	r3,-4(fp)
    ff84:	d0a72d44 	addi	r2,gp,-25419
    ff88:	1885883a 	add	r2,r3,r2
    ff8c:	10800003 	ldbu	r2,0(r2)
    ff90:	10c03fcc 	andi	r3,r2,255
    ff94:	008000b4 	movhi	r2,2
    ff98:	10a05304 	addi	r2,r2,-32436
    ff9c:	10c5883a 	add	r2,r2,r3
    ffa0:	10800003 	ldbu	r2,0(r2)
    ffa4:	2085883a 	add	r2,r4,r2
    ffa8:	d0a72305 	stb	r2,-25460(gp)
        OSPrioHighRdy = (INT8U)((y << 4) + OSUnMapTbl[(*ptbl & 0xFF)]);
    } else {
        OSPrioHighRdy = (INT8U)((y << 4) + OSUnMapTbl[(*ptbl >> 8) & 0xFF] + 8);
    }
#endif
}
    ffac:	0001883a 	nop
    ffb0:	e037883a 	mov	sp,fp
    ffb4:	df000017 	ldw	fp,0(sp)
    ffb8:	dec00104 	addi	sp,sp,4
    ffbc:	f800283a 	ret

0000ffc0 <OS_StrCopy>:
*********************************************************************************************************
*/

#if (OS_EVENT_NAME_SIZE > 1) || (OS_FLAG_NAME_SIZE > 1) || (OS_MEM_NAME_SIZE > 1) || (OS_TASK_NAME_SIZE > 1) || (OS_TMR_CFG_NAME_SIZE > 1)
INT8U  OS_StrCopy (INT8U *pdest, INT8U *psrc)
{
    ffc0:	defffc04 	addi	sp,sp,-16
    ffc4:	df000315 	stw	fp,12(sp)
    ffc8:	df000304 	addi	fp,sp,12
    ffcc:	e13ffe15 	stw	r4,-8(fp)
    ffd0:	e17fff15 	stw	r5,-4(fp)
    INT8U  len;


    len = 0;
    ffd4:	e03ffd05 	stb	zero,-12(fp)
    while (*psrc != OS_ASCII_NUL) {
    ffd8:	00000b06 	br	10008 <OS_StrCopy+0x48>
        *pdest++ = *psrc++;
    ffdc:	e0bffe17 	ldw	r2,-8(fp)
    ffe0:	10c00044 	addi	r3,r2,1
    ffe4:	e0fffe15 	stw	r3,-8(fp)
    ffe8:	e0ffff17 	ldw	r3,-4(fp)
    ffec:	19000044 	addi	r4,r3,1
    fff0:	e13fff15 	stw	r4,-4(fp)
    fff4:	18c00003 	ldbu	r3,0(r3)
    fff8:	10c00005 	stb	r3,0(r2)
        len++;
    fffc:	e0bffd03 	ldbu	r2,-12(fp)
   10000:	10800044 	addi	r2,r2,1
   10004:	e0bffd05 	stb	r2,-12(fp)
{
    INT8U  len;


    len = 0;
    while (*psrc != OS_ASCII_NUL) {
   10008:	e0bfff17 	ldw	r2,-4(fp)
   1000c:	10800003 	ldbu	r2,0(r2)
   10010:	10803fcc 	andi	r2,r2,255
   10014:	103ff11e 	bne	r2,zero,ffdc <__alt_data_end+0xfffdffdc>
        *pdest++ = *psrc++;
        len++;
    }
    *pdest = OS_ASCII_NUL;
   10018:	e0bffe17 	ldw	r2,-8(fp)
   1001c:	10000005 	stb	zero,0(r2)
    return (len);
   10020:	e0bffd03 	ldbu	r2,-12(fp)
}
   10024:	e037883a 	mov	sp,fp
   10028:	df000017 	ldw	fp,0(sp)
   1002c:	dec00104 	addi	sp,sp,4
   10030:	f800283a 	ret

00010034 <OS_StrLen>:
*********************************************************************************************************
*/

#if (OS_EVENT_NAME_SIZE > 1) || (OS_FLAG_NAME_SIZE > 1) || (OS_MEM_NAME_SIZE > 1) || (OS_TASK_NAME_SIZE > 1) || (OS_TMR_CFG_NAME_SIZE > 1)
INT8U  OS_StrLen (INT8U *psrc)
{
   10034:	defffd04 	addi	sp,sp,-12
   10038:	df000215 	stw	fp,8(sp)
   1003c:	df000204 	addi	fp,sp,8
   10040:	e13fff15 	stw	r4,-4(fp)
    INT8U  len;


    len = 0;
   10044:	e03ffe05 	stb	zero,-8(fp)
    while (*psrc != OS_ASCII_NUL) {
   10048:	00000606 	br	10064 <OS_StrLen+0x30>
        psrc++;
   1004c:	e0bfff17 	ldw	r2,-4(fp)
   10050:	10800044 	addi	r2,r2,1
   10054:	e0bfff15 	stw	r2,-4(fp)
        len++;
   10058:	e0bffe03 	ldbu	r2,-8(fp)
   1005c:	10800044 	addi	r2,r2,1
   10060:	e0bffe05 	stb	r2,-8(fp)
{
    INT8U  len;


    len = 0;
    while (*psrc != OS_ASCII_NUL) {
   10064:	e0bfff17 	ldw	r2,-4(fp)
   10068:	10800003 	ldbu	r2,0(r2)
   1006c:	10803fcc 	andi	r2,r2,255
   10070:	103ff61e 	bne	r2,zero,1004c <__alt_data_end+0xfffe004c>
        psrc++;
        len++;
    }
    return (len);
   10074:	e0bffe03 	ldbu	r2,-8(fp)
}
   10078:	e037883a 	mov	sp,fp
   1007c:	df000017 	ldw	fp,0(sp)
   10080:	dec00104 	addi	sp,sp,4
   10084:	f800283a 	ret

00010088 <OS_TaskIdle>:
*                 power.
*********************************************************************************************************
*/

void  OS_TaskIdle (void *p_arg)
{
   10088:	defffa04 	addi	sp,sp,-24
   1008c:	dfc00515 	stw	ra,20(sp)
   10090:	df000415 	stw	fp,16(sp)
   10094:	df000404 	addi	fp,sp,16
   10098:	e13fff15 	stw	r4,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   1009c:	e03ffc15 	stw	zero,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   100a0:	0005303a 	rdctl	r2,status
   100a4:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   100a8:	e0fffd17 	ldw	r3,-12(fp)
   100ac:	00bfff84 	movi	r2,-2
   100b0:	1884703a 	and	r2,r3,r2
   100b4:	1001703a 	wrctl	status,r2
  
  return context;
   100b8:	e0bffd17 	ldw	r2,-12(fp)



    (void)p_arg;                                 /* Prevent compiler warning for not using 'p_arg'     */
    for (;;) {
        OS_ENTER_CRITICAL();
   100bc:	e0bffc15 	stw	r2,-16(fp)
        OSIdleCtr++;
   100c0:	d0a72217 	ldw	r2,-25464(gp)
   100c4:	10800044 	addi	r2,r2,1
   100c8:	d0a72215 	stw	r2,-25464(gp)
   100cc:	e0bffc17 	ldw	r2,-16(fp)
   100d0:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   100d4:	e0bffe17 	ldw	r2,-8(fp)
   100d8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OSTaskIdleHook();                        /* Call user definable HOOK                           */
   100dc:	00177f00 	call	177f0 <OSTaskIdleHook>
    }
   100e0:	003fef06 	br	100a0 <__alt_data_end+0xfffe00a0>

000100e4 <OS_TaskStat>:
*********************************************************************************************************
*/

#if OS_TASK_STAT_EN > 0
void  OS_TaskStat (void *p_arg)
{
   100e4:	defffa04 	addi	sp,sp,-24
   100e8:	dfc00515 	stw	ra,20(sp)
   100ec:	df000415 	stw	fp,16(sp)
   100f0:	df000404 	addi	fp,sp,16
   100f4:	e13fff15 	stw	r4,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   100f8:	e03ffc15 	stw	zero,-16(fp)
#endif



    (void)p_arg;                                 /* Prevent compiler warning for not using 'p_arg'     */
    while (OSStatRdy == OS_FALSE) {
   100fc:	00000206 	br	10108 <OS_TaskStat+0x24>
        OSTimeDly(2 * OS_TICKS_PER_SEC / 10);    /* Wait until statistic task is ready                 */
   10100:	01003204 	movi	r4,200
   10104:	00158240 	call	15824 <OSTimeDly>
#endif



    (void)p_arg;                                 /* Prevent compiler warning for not using 'p_arg'     */
    while (OSStatRdy == OS_FALSE) {
   10108:	d0a73303 	ldbu	r2,-25396(gp)
   1010c:	10803fcc 	andi	r2,r2,255
   10110:	103ffb26 	beq	r2,zero,10100 <__alt_data_end+0xfffe0100>
        OSTimeDly(2 * OS_TICKS_PER_SEC / 10);    /* Wait until statistic task is ready                 */
    }
    OSIdleCtrMax /= 100L;
   10114:	d0a72717 	ldw	r2,-25444(gp)
   10118:	01401904 	movi	r5,100
   1011c:	1009883a 	mov	r4,r2
   10120:	000088c0 	call	88c <__udivsi3>
   10124:	d0a72715 	stw	r2,-25444(gp)
    if (OSIdleCtrMax == 0L) {
   10128:	d0a72717 	ldw	r2,-25444(gp)
   1012c:	1000031e 	bne	r2,zero,1013c <OS_TaskStat+0x58>
        OSCPUUsage = 0;
   10130:	d0272905 	stb	zero,-25436(gp)
        (void)OSTaskSuspend(OS_PRIO_SELF);
   10134:	01003fc4 	movi	r4,255
   10138:	00154ac0 	call	154ac <OSTaskSuspend>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1013c:	0005303a 	rdctl	r2,status
   10140:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   10144:	e0fffd17 	ldw	r3,-12(fp)
   10148:	00bfff84 	movi	r2,-2
   1014c:	1884703a 	and	r2,r3,r2
   10150:	1001703a 	wrctl	status,r2
  
  return context;
   10154:	e0bffd17 	ldw	r2,-12(fp)
    }
    for (;;) {
        OS_ENTER_CRITICAL();
   10158:	e0bffc15 	stw	r2,-16(fp)
        OSIdleCtrRun = OSIdleCtr;                /* Obtain the of the idle counter for the past second */
   1015c:	d0a72217 	ldw	r2,-25464(gp)
   10160:	d0a73415 	stw	r2,-25392(gp)
        OSIdleCtr    = 0L;                       /* Reset the idle counter for the next second         */
   10164:	d0272215 	stw	zero,-25464(gp)
   10168:	e0bffc17 	ldw	r2,-16(fp)
   1016c:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   10170:	e0bffe17 	ldw	r2,-8(fp)
   10174:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OSCPUUsage   = (INT8U)(100L - OSIdleCtrRun / OSIdleCtrMax);
   10178:	d0a73417 	ldw	r2,-25392(gp)
   1017c:	d0e72717 	ldw	r3,-25444(gp)
   10180:	180b883a 	mov	r5,r3
   10184:	1009883a 	mov	r4,r2
   10188:	000088c0 	call	88c <__udivsi3>
   1018c:	1007883a 	mov	r3,r2
   10190:	00801904 	movi	r2,100
   10194:	10c5c83a 	sub	r2,r2,r3
   10198:	d0a72905 	stb	r2,-25436(gp)
        OSTaskStatHook();                        /* Invoke user definable hook                         */
   1019c:	00177700 	call	17770 <OSTaskStatHook>
#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
        OS_TaskStatStkChk();                     /* Check the stacks for each task                     */
   101a0:	00101b00 	call	101b0 <OS_TaskStatStkChk>
#endif
        OSTimeDly(OS_TICKS_PER_SEC / 10);        /* Accumulate OSIdleCtr for the next 1/10 second      */
   101a4:	01001904 	movi	r4,100
   101a8:	00158240 	call	15824 <OSTimeDly>
    }
   101ac:	003fe306 	br	1013c <__alt_data_end+0xfffe013c>

000101b0 <OS_TaskStatStkChk>:
*********************************************************************************************************
*/

#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
void  OS_TaskStatStkChk (void)
{
   101b0:	defffa04 	addi	sp,sp,-24
   101b4:	dfc00515 	stw	ra,20(sp)
   101b8:	df000415 	stw	fp,16(sp)
   101bc:	df000404 	addi	fp,sp,16
    OS_STK_DATA  stk_data;
    INT8U        err;
    INT8U        prio;


    for (prio = 0; prio <= OS_TASK_IDLE_PRIO; prio++) {
   101c0:	e03ffc05 	stb	zero,-16(fp)
   101c4:	00002406 	br	10258 <OS_TaskStatStkChk+0xa8>
        err = OSTaskStkChk(prio, &stk_data);
   101c8:	e0bffc03 	ldbu	r2,-16(fp)
   101cc:	e0fffe04 	addi	r3,fp,-8
   101d0:	180b883a 	mov	r5,r3
   101d4:	1009883a 	mov	r4,r2
   101d8:	00152ec0 	call	152ec <OSTaskStkChk>
   101dc:	e0bffc45 	stb	r2,-15(fp)
        if (err == OS_ERR_NONE) {
   101e0:	e0bffc43 	ldbu	r2,-15(fp)
   101e4:	1000191e 	bne	r2,zero,1024c <OS_TaskStatStkChk+0x9c>
            ptcb = OSTCBPrioTbl[prio];
   101e8:	e0fffc03 	ldbu	r3,-16(fp)
   101ec:	008000b4 	movhi	r2,2
   101f0:	10bf4204 	addi	r2,r2,-760
   101f4:	18c7883a 	add	r3,r3,r3
   101f8:	18c7883a 	add	r3,r3,r3
   101fc:	10c5883a 	add	r2,r2,r3
   10200:	10800017 	ldw	r2,0(r2)
   10204:	e0bffd15 	stw	r2,-12(fp)
            if (ptcb != (OS_TCB *)0) {                               /* Make sure task 'ptcb' is ...   */
   10208:	e0bffd17 	ldw	r2,-12(fp)
   1020c:	10000f26 	beq	r2,zero,1024c <OS_TaskStatStkChk+0x9c>
                if (ptcb != OS_TCB_RESERVED) {                       /* ... still valid.               */
   10210:	e0bffd17 	ldw	r2,-12(fp)
   10214:	10800060 	cmpeqi	r2,r2,1
   10218:	10000c1e 	bne	r2,zero,1024c <OS_TaskStatStkChk+0x9c>
#if OS_TASK_PROFILE_EN > 0
                    #if OS_STK_GROWTH == 1
                    ptcb->OSTCBStkBase = ptcb->OSTCBStkBottom + ptcb->OSTCBStkSize;
   1021c:	e0bffd17 	ldw	r2,-12(fp)
   10220:	10c00217 	ldw	r3,8(r2)
   10224:	e0bffd17 	ldw	r2,-12(fp)
   10228:	10800317 	ldw	r2,12(r2)
   1022c:	1085883a 	add	r2,r2,r2
   10230:	1085883a 	add	r2,r2,r2
   10234:	1887883a 	add	r3,r3,r2
   10238:	e0bffd17 	ldw	r2,-12(fp)
   1023c:	10c01115 	stw	r3,68(r2)
                    #else
                    ptcb->OSTCBStkBase = ptcb->OSTCBStkBottom - ptcb->OSTCBStkSize;
                    #endif
                    ptcb->OSTCBStkUsed = stk_data.OSUsed;            /* Store the number of bytes used */
   10240:	e0ffff17 	ldw	r3,-4(fp)
   10244:	e0bffd17 	ldw	r2,-12(fp)
   10248:	10c01215 	stw	r3,72(r2)
    OS_STK_DATA  stk_data;
    INT8U        err;
    INT8U        prio;


    for (prio = 0; prio <= OS_TASK_IDLE_PRIO; prio++) {
   1024c:	e0bffc03 	ldbu	r2,-16(fp)
   10250:	10800044 	addi	r2,r2,1
   10254:	e0bffc05 	stb	r2,-16(fp)
   10258:	e0bffc03 	ldbu	r2,-16(fp)
   1025c:	10800570 	cmpltui	r2,r2,21
   10260:	103fd91e 	bne	r2,zero,101c8 <__alt_data_end+0xfffe01c8>
#endif
                }
            }
        }
    }
}
   10264:	0001883a 	nop
   10268:	e037883a 	mov	sp,fp
   1026c:	dfc00117 	ldw	ra,4(sp)
   10270:	df000017 	ldw	fp,0(sp)
   10274:	dec00204 	addi	sp,sp,8
   10278:	f800283a 	ret

0001027c <OS_TCBInit>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

INT8U  OS_TCBInit (INT8U prio, OS_STK *ptos, OS_STK *pbos, INT16U id, INT32U stk_size, void *pext, INT16U opt)
{
   1027c:	defff204 	addi	sp,sp,-56
   10280:	dfc00d15 	stw	ra,52(sp)
   10284:	df000c15 	stw	fp,48(sp)
   10288:	df000c04 	addi	fp,sp,48
   1028c:	e17ffc15 	stw	r5,-16(fp)
   10290:	e1bffd15 	stw	r6,-12(fp)
   10294:	3807883a 	mov	r3,r7
   10298:	e0800417 	ldw	r2,16(fp)
   1029c:	e13ffb05 	stb	r4,-20(fp)
   102a0:	e0fffe0d 	sth	r3,-8(fp)
   102a4:	e0bfff0d 	sth	r2,-4(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
   102a8:	e03ff415 	stw	zero,-48(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   102ac:	0005303a 	rdctl	r2,status
   102b0:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   102b4:	e0fffa17 	ldw	r3,-24(fp)
   102b8:	00bfff84 	movi	r2,-2
   102bc:	1884703a 	and	r2,r3,r2
   102c0:	1001703a 	wrctl	status,r2
  
  return context;
   102c4:	e0bffa17 	ldw	r2,-24(fp)
#endif



    OS_ENTER_CRITICAL();
   102c8:	e0bff415 	stw	r2,-48(fp)
    ptcb = OSTCBFreeList;                                  /* Get a free TCB from the free TCB list    */
   102cc:	d0a72817 	ldw	r2,-25440(gp)
   102d0:	e0bff615 	stw	r2,-40(fp)
    if (ptcb != (OS_TCB *)0) {
   102d4:	e0bff617 	ldw	r2,-40(fp)
   102d8:	10009326 	beq	r2,zero,10528 <OS_TCBInit+0x2ac>
        OSTCBFreeList            = ptcb->OSTCBNext;        /* Update pointer to free TCB list          */
   102dc:	e0bff617 	ldw	r2,-40(fp)
   102e0:	10800517 	ldw	r2,20(r2)
   102e4:	d0a72815 	stw	r2,-25440(gp)
   102e8:	e0bff417 	ldw	r2,-48(fp)
   102ec:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   102f0:	e0bff817 	ldw	r2,-32(fp)
   102f4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        ptcb->OSTCBStkPtr        = ptos;                   /* Load Stack pointer in TCB                */
   102f8:	e0bff617 	ldw	r2,-40(fp)
   102fc:	e0fffc17 	ldw	r3,-16(fp)
   10300:	10c00015 	stw	r3,0(r2)
        ptcb->OSTCBPrio          = prio;                   /* Load task priority into TCB              */
   10304:	e0bff617 	ldw	r2,-40(fp)
   10308:	e0fffb03 	ldbu	r3,-20(fp)
   1030c:	10c00c85 	stb	r3,50(r2)
        ptcb->OSTCBStat          = OS_STAT_RDY;            /* Task is ready to run                     */
   10310:	e0bff617 	ldw	r2,-40(fp)
   10314:	10000c05 	stb	zero,48(r2)
        ptcb->OSTCBStatPend      = OS_STAT_PEND_OK;        /* Clear pend status                        */
   10318:	e0bff617 	ldw	r2,-40(fp)
   1031c:	10000c45 	stb	zero,49(r2)
        ptcb->OSTCBDly           = 0;                      /* Task is not delayed                      */
   10320:	e0bff617 	ldw	r2,-40(fp)
   10324:	10000b8d 	sth	zero,46(r2)

#if OS_TASK_CREATE_EXT_EN > 0
        ptcb->OSTCBExtPtr        = pext;                   /* Store pointer to TCB extension           */
   10328:	e0bff617 	ldw	r2,-40(fp)
   1032c:	e0c00317 	ldw	r3,12(fp)
   10330:	10c00115 	stw	r3,4(r2)
        ptcb->OSTCBStkSize       = stk_size;               /* Store stack size                         */
   10334:	e0bff617 	ldw	r2,-40(fp)
   10338:	e0c00217 	ldw	r3,8(fp)
   1033c:	10c00315 	stw	r3,12(r2)
        ptcb->OSTCBStkBottom     = pbos;                   /* Store pointer to bottom of stack         */
   10340:	e0bff617 	ldw	r2,-40(fp)
   10344:	e0fffd17 	ldw	r3,-12(fp)
   10348:	10c00215 	stw	r3,8(r2)
        ptcb->OSTCBOpt           = opt;                    /* Store task options                       */
   1034c:	e0bff617 	ldw	r2,-40(fp)
   10350:	e0ffff0b 	ldhu	r3,-4(fp)
   10354:	10c0040d 	sth	r3,16(r2)
        ptcb->OSTCBId            = id;                     /* Store task ID                            */
   10358:	e0bff617 	ldw	r2,-40(fp)
   1035c:	e0fffe0b 	ldhu	r3,-8(fp)
   10360:	10c0048d 	sth	r3,18(r2)
        opt                      = opt;
        id                       = id;
#endif

#if OS_TASK_DEL_EN > 0
        ptcb->OSTCBDelReq        = OS_ERR_NONE;
   10364:	e0bff617 	ldw	r2,-40(fp)
   10368:	10000dc5 	stb	zero,55(r2)
#endif

#if OS_LOWEST_PRIO <= 63
        ptcb->OSTCBY             = (INT8U)(prio >> 3);          /* Pre-compute X, Y, BitX and BitY     */
   1036c:	e0bffb03 	ldbu	r2,-20(fp)
   10370:	1004d0fa 	srli	r2,r2,3
   10374:	1007883a 	mov	r3,r2
   10378:	e0bff617 	ldw	r2,-40(fp)
   1037c:	10c00d05 	stb	r3,52(r2)
        ptcb->OSTCBX             = (INT8U)(prio & 0x07);
   10380:	e0bffb03 	ldbu	r2,-20(fp)
   10384:	108001cc 	andi	r2,r2,7
   10388:	1007883a 	mov	r3,r2
   1038c:	e0bff617 	ldw	r2,-40(fp)
   10390:	10c00cc5 	stb	r3,51(r2)
        ptcb->OSTCBBitY          = (INT8U)(1 << ptcb->OSTCBY);
   10394:	e0bff617 	ldw	r2,-40(fp)
   10398:	10800d03 	ldbu	r2,52(r2)
   1039c:	10803fcc 	andi	r2,r2,255
   103a0:	00c00044 	movi	r3,1
   103a4:	1884983a 	sll	r2,r3,r2
   103a8:	1007883a 	mov	r3,r2
   103ac:	e0bff617 	ldw	r2,-40(fp)
   103b0:	10c00d85 	stb	r3,54(r2)
        ptcb->OSTCBBitX          = (INT8U)(1 << ptcb->OSTCBX);
   103b4:	e0bff617 	ldw	r2,-40(fp)
   103b8:	10800cc3 	ldbu	r2,51(r2)
   103bc:	10803fcc 	andi	r2,r2,255
   103c0:	00c00044 	movi	r3,1
   103c4:	1884983a 	sll	r2,r3,r2
   103c8:	1007883a 	mov	r3,r2
   103cc:	e0bff617 	ldw	r2,-40(fp)
   103d0:	10c00d45 	stb	r3,53(r2)
        ptcb->OSTCBBitY          = (INT16U)(1 << ptcb->OSTCBY);
        ptcb->OSTCBBitX          = (INT16U)(1 << ptcb->OSTCBX);
#endif

#if (OS_EVENT_EN)
        ptcb->OSTCBEventPtr      = (OS_EVENT  *)0;         /* Task is not pending on an  event         */
   103d4:	e0bff617 	ldw	r2,-40(fp)
   103d8:	10000715 	stw	zero,28(r2)
#if (OS_EVENT_MULTI_EN > 0)
        ptcb->OSTCBEventMultiPtr = (OS_EVENT **)0;         /* Task is not pending on any events        */
   103dc:	e0bff617 	ldw	r2,-40(fp)
   103e0:	10000815 	stw	zero,32(r2)
#endif
#endif

#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0) && (OS_TASK_DEL_EN > 0)
        ptcb->OSTCBFlagNode  = (OS_FLAG_NODE *)0;          /* Task is not pending on an event flag     */
   103e4:	e0bff617 	ldw	r2,-40(fp)
   103e8:	10000a15 	stw	zero,40(r2)
#endif

#if (OS_MBOX_EN > 0) || ((OS_Q_EN > 0) && (OS_MAX_QS > 0))
        ptcb->OSTCBMsg       = (void *)0;                  /* No message received                      */
   103ec:	e0bff617 	ldw	r2,-40(fp)
   103f0:	10000915 	stw	zero,36(r2)
#endif

#if OS_TASK_PROFILE_EN > 0
        ptcb->OSTCBCtxSwCtr    = 0L;                       /* Initialize profiling variables           */
   103f4:	e0bff617 	ldw	r2,-40(fp)
   103f8:	10000e15 	stw	zero,56(r2)
        ptcb->OSTCBCyclesStart = 0L;
   103fc:	e0bff617 	ldw	r2,-40(fp)
   10400:	10001015 	stw	zero,64(r2)
        ptcb->OSTCBCyclesTot   = 0L;
   10404:	e0bff617 	ldw	r2,-40(fp)
   10408:	10000f15 	stw	zero,60(r2)
        ptcb->OSTCBStkBase     = (OS_STK *)0;
   1040c:	e0bff617 	ldw	r2,-40(fp)
   10410:	10001115 	stw	zero,68(r2)
        ptcb->OSTCBStkUsed     = 0L;
   10414:	e0bff617 	ldw	r2,-40(fp)
   10418:	10001215 	stw	zero,72(r2)
#endif

#if OS_TASK_NAME_SIZE > 1
        ptcb->OSTCBTaskName[0] = '?';                      /* Unknown name at task creation            */
   1041c:	e0bff617 	ldw	r2,-40(fp)
   10420:	00c00fc4 	movi	r3,63
   10424:	10c01305 	stb	r3,76(r2)
        ptcb->OSTCBTaskName[1] = OS_ASCII_NUL;
   10428:	e0bff617 	ldw	r2,-40(fp)
   1042c:	10001345 	stb	zero,77(r2)
#endif

        OSTCBInitHook(ptcb);
   10430:	e13ff617 	ldw	r4,-40(fp)
   10434:	00178100 	call	17810 <OSTCBInitHook>

        OSTaskCreateHook(ptcb);                            /* Call user defined hook                   */
   10438:	e13ff617 	ldw	r4,-40(fp)
   1043c:	00177080 	call	17708 <OSTaskCreateHook>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   10440:	0005303a 	rdctl	r2,status
   10444:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   10448:	e0fff517 	ldw	r3,-44(fp)
   1044c:	00bfff84 	movi	r2,-2
   10450:	1884703a 	and	r2,r3,r2
   10454:	1001703a 	wrctl	status,r2
  
  return context;
   10458:	e0bff517 	ldw	r2,-44(fp)

        OS_ENTER_CRITICAL();
   1045c:	e0bff415 	stw	r2,-48(fp)
        OSTCBPrioTbl[prio] = ptcb;
   10460:	e0fffb03 	ldbu	r3,-20(fp)
   10464:	008000b4 	movhi	r2,2
   10468:	10bf4204 	addi	r2,r2,-760
   1046c:	18c7883a 	add	r3,r3,r3
   10470:	18c7883a 	add	r3,r3,r3
   10474:	10c5883a 	add	r2,r2,r3
   10478:	e0fff617 	ldw	r3,-40(fp)
   1047c:	10c00015 	stw	r3,0(r2)
        ptcb->OSTCBNext    = OSTCBList;                    /* Link into TCB chain                      */
   10480:	d0e72417 	ldw	r3,-25456(gp)
   10484:	e0bff617 	ldw	r2,-40(fp)
   10488:	10c00515 	stw	r3,20(r2)
        ptcb->OSTCBPrev    = (OS_TCB *)0;
   1048c:	e0bff617 	ldw	r2,-40(fp)
   10490:	10000615 	stw	zero,24(r2)
        if (OSTCBList != (OS_TCB *)0) {
   10494:	d0a72417 	ldw	r2,-25456(gp)
   10498:	10000326 	beq	r2,zero,104a8 <OS_TCBInit+0x22c>
            OSTCBList->OSTCBPrev = ptcb;
   1049c:	d0a72417 	ldw	r2,-25456(gp)
   104a0:	e0fff617 	ldw	r3,-40(fp)
   104a4:	10c00615 	stw	r3,24(r2)
        }
        OSTCBList               = ptcb;
   104a8:	e0bff617 	ldw	r2,-40(fp)
   104ac:	d0a72415 	stw	r2,-25456(gp)
        OSRdyGrp               |= ptcb->OSTCBBitY;         /* Make task ready to run                   */
   104b0:	e0bff617 	ldw	r2,-40(fp)
   104b4:	10c00d83 	ldbu	r3,54(r2)
   104b8:	d0a72d03 	ldbu	r2,-25420(gp)
   104bc:	1884b03a 	or	r2,r3,r2
   104c0:	d0a72d05 	stb	r2,-25420(gp)
        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
   104c4:	e0bff617 	ldw	r2,-40(fp)
   104c8:	10800d03 	ldbu	r2,52(r2)
   104cc:	10c03fcc 	andi	r3,r2,255
   104d0:	e0bff617 	ldw	r2,-40(fp)
   104d4:	10800d03 	ldbu	r2,52(r2)
   104d8:	11003fcc 	andi	r4,r2,255
   104dc:	d0a72d44 	addi	r2,gp,-25419
   104e0:	2085883a 	add	r2,r4,r2
   104e4:	11000003 	ldbu	r4,0(r2)
   104e8:	e0bff617 	ldw	r2,-40(fp)
   104ec:	10800d43 	ldbu	r2,53(r2)
   104f0:	2084b03a 	or	r2,r4,r2
   104f4:	1009883a 	mov	r4,r2
   104f8:	d0a72d44 	addi	r2,gp,-25419
   104fc:	1885883a 	add	r2,r3,r2
   10500:	11000005 	stb	r4,0(r2)
        OSTaskCtr++;                                       /* Increment the #tasks counter             */
   10504:	d0a72943 	ldbu	r2,-25435(gp)
   10508:	10800044 	addi	r2,r2,1
   1050c:	d0a72945 	stb	r2,-25435(gp)
   10510:	e0bff417 	ldw	r2,-48(fp)
   10514:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   10518:	e0bff717 	ldw	r2,-36(fp)
   1051c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_NONE);
   10520:	0005883a 	mov	r2,zero
   10524:	00000506 	br	1053c <OS_TCBInit+0x2c0>
   10528:	e0bff417 	ldw	r2,-48(fp)
   1052c:	e0bff915 	stw	r2,-28(fp)
   10530:	e0bff917 	ldw	r2,-28(fp)
   10534:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_TASK_NO_MORE_TCB);
   10538:	00801084 	movi	r2,66
}
   1053c:	e037883a 	mov	sp,fp
   10540:	dfc00117 	ldw	ra,4(sp)
   10544:	df000017 	ldw	fp,0(sp)
   10548:	dec00204 	addi	sp,sp,8
   1054c:	f800283a 	ret

00010550 <OSDebugInit>:
*********************************************************************************************************
*/

#if OS_DEBUG_EN > 0
void  OSDebugInit (void)
{
   10550:	defffe04 	addi	sp,sp,-8
   10554:	df000115 	stw	fp,4(sp)
   10558:	df000104 	addi	fp,sp,4
    void  *ptemp;

    
    ptemp = (void *)&OSDebugEn;
   1055c:	d0a01004 	addi	r2,gp,-32704
   10560:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSEndiannessTest;
   10564:	d0a01104 	addi	r2,gp,-32700
   10568:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSEventMax;
   1056c:	d0a01284 	addi	r2,gp,-32694
   10570:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventNameSize;
   10574:	d0a01304 	addi	r2,gp,-32692
   10578:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventEn;
   1057c:	d0a01204 	addi	r2,gp,-32696
   10580:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventSize;
   10584:	d0a01384 	addi	r2,gp,-32690
   10588:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventTblSize;
   1058c:	d0a01404 	addi	r2,gp,-32688
   10590:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventMultiEn;
   10594:	d0a01484 	addi	r2,gp,-32686
   10598:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSFlagEn;
   1059c:	d0a01504 	addi	r2,gp,-32684
   105a0:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagGrpSize;
   105a4:	d0a01584 	addi	r2,gp,-32682
   105a8:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagNodeSize;
   105ac:	d0a01604 	addi	r2,gp,-32680
   105b0:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagWidth;
   105b4:	d0a01684 	addi	r2,gp,-32678
   105b8:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagMax;
   105bc:	d0a01704 	addi	r2,gp,-32676
   105c0:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagNameSize;
   105c4:	d0a01784 	addi	r2,gp,-32674
   105c8:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSLowestPrio;
   105cc:	d0a01804 	addi	r2,gp,-32672
   105d0:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSMboxEn;
   105d4:	d0a01884 	addi	r2,gp,-32670
   105d8:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSMemEn;
   105dc:	d0a01904 	addi	r2,gp,-32668
   105e0:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemMax;
   105e4:	d0a01984 	addi	r2,gp,-32666
   105e8:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemNameSize;
   105ec:	d0a01a04 	addi	r2,gp,-32664
   105f0:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemSize;
   105f4:	d0a01a84 	addi	r2,gp,-32662
   105f8:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemTblSize;
   105fc:	d0a01b04 	addi	r2,gp,-32660
   10600:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSMutexEn;
   10604:	d0a01b84 	addi	r2,gp,-32658
   10608:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSPtrSize;
   1060c:	d0a01c04 	addi	r2,gp,-32656
   10610:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSQEn;
   10614:	d0a01c84 	addi	r2,gp,-32654
   10618:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSQMax;
   1061c:	d0a01d04 	addi	r2,gp,-32652
   10620:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSQSize;
   10624:	d0a01d84 	addi	r2,gp,-32650
   10628:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSRdyTblSize;
   1062c:	d0a01e04 	addi	r2,gp,-32648
   10630:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSSemEn;
   10634:	d0a01e84 	addi	r2,gp,-32646
   10638:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSStkWidth;
   1063c:	d0a01f04 	addi	r2,gp,-32644
   10640:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTaskCreateEn;
   10644:	d0a01f84 	addi	r2,gp,-32642
   10648:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskCreateExtEn;
   1064c:	d0a02004 	addi	r2,gp,-32640
   10650:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskDelEn;
   10654:	d0a02084 	addi	r2,gp,-32638
   10658:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskIdleStkSize;
   1065c:	d0a02104 	addi	r2,gp,-32636
   10660:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskProfileEn;
   10664:	d0a02184 	addi	r2,gp,-32634
   10668:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskMax;
   1066c:	d0a02204 	addi	r2,gp,-32632
   10670:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskNameSize;
   10674:	d0a02284 	addi	r2,gp,-32630
   10678:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskStatEn;
   1067c:	d0a02304 	addi	r2,gp,-32628
   10680:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskStatStkSize;
   10684:	d0a02384 	addi	r2,gp,-32626
   10688:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskStatStkChkEn;
   1068c:	d0a02404 	addi	r2,gp,-32624
   10690:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskSwHookEn;
   10694:	d0a02484 	addi	r2,gp,-32622
   10698:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTCBPrioTblMax;
   1069c:	d0a02504 	addi	r2,gp,-32620
   106a0:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTCBSize;
   106a4:	d0a02584 	addi	r2,gp,-32618
   106a8:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTicksPerSec;
   106ac:	d0a02604 	addi	r2,gp,-32616
   106b0:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTimeTickHookEn;
   106b4:	d0a02684 	addi	r2,gp,-32614
   106b8:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTmrWheelSize;
    ptemp = (void *)&OSTmrWheelTblSize;
#endif

    ptemp = (void *)&OSVersionNbr;
   106bc:	d0a02704 	addi	r2,gp,-32612
   106c0:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSDataSize;
   106c4:	d0a02c04 	addi	r2,gp,-32592
   106c8:	e0bfff15 	stw	r2,-4(fp)

    ptemp = ptemp;                             /* Prevent compiler warning for 'ptemp' not being used! */
}
   106cc:	0001883a 	nop
   106d0:	e037883a 	mov	sp,fp
   106d4:	df000017 	ldw	fp,0(sp)
   106d8:	dec00104 	addi	sp,sp,4
   106dc:	f800283a 	ret

000106e0 <OSFlagAccept>:
*********************************************************************************************************
*/

#if OS_FLAG_ACCEPT_EN > 0
OS_FLAGS  OSFlagAccept (OS_FLAG_GRP *pgrp, OS_FLAGS flags, INT8U wait_type, INT8U *perr)
{
   106e0:	defff204 	addi	sp,sp,-56
   106e4:	df000d15 	stw	fp,52(sp)
   106e8:	df000d04 	addi	fp,sp,52
   106ec:	e13ffc15 	stw	r4,-16(fp)
   106f0:	2807883a 	mov	r3,r5
   106f4:	3005883a 	mov	r2,r6
   106f8:	e1ffff15 	stw	r7,-4(fp)
   106fc:	e0fffd0d 	sth	r3,-12(fp)
   10700:	e0bffe05 	stb	r2,-8(fp)
    OS_FLAGS      flags_rdy;
    INT8U         result;
    BOOLEAN       consume;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
   10704:	e03ff415 	stw	zero,-48(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
   10708:	e0bfff17 	ldw	r2,-4(fp)
   1070c:	1000021e 	bne	r2,zero,10718 <OSFlagAccept+0x38>
        return ((OS_FLAGS)0);
   10710:	0005883a 	mov	r2,zero
   10714:	0000b006 	br	109d8 <OSFlagAccept+0x2f8>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                        /* Validate 'pgrp'                          */
   10718:	e0bffc17 	ldw	r2,-16(fp)
   1071c:	1000051e 	bne	r2,zero,10734 <OSFlagAccept+0x54>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
   10720:	e0bfff17 	ldw	r2,-4(fp)
   10724:	00c01b84 	movi	r3,110
   10728:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
   1072c:	0005883a 	mov	r2,zero
   10730:	0000a906 	br	109d8 <OSFlagAccept+0x2f8>
    }
#endif
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {          /* Validate event block type                */
   10734:	e0bffc17 	ldw	r2,-16(fp)
   10738:	10800003 	ldbu	r2,0(r2)
   1073c:	10803fcc 	andi	r2,r2,255
   10740:	10800160 	cmpeqi	r2,r2,5
   10744:	1000051e 	bne	r2,zero,1075c <OSFlagAccept+0x7c>
        *perr = OS_ERR_EVENT_TYPE;
   10748:	e0bfff17 	ldw	r2,-4(fp)
   1074c:	00c00044 	movi	r3,1
   10750:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
   10754:	0005883a 	mov	r2,zero
   10758:	00009f06 	br	109d8 <OSFlagAccept+0x2f8>
    }
    result = (INT8U)(wait_type & OS_FLAG_CONSUME);
   1075c:	e0fffe03 	ldbu	r3,-8(fp)
   10760:	00bfe004 	movi	r2,-128
   10764:	1884703a 	and	r2,r3,r2
   10768:	e0bff505 	stb	r2,-44(fp)
    if (result != (INT8U)0) {                              /* See if we need to consume the flags      */
   1076c:	e0bff503 	ldbu	r2,-44(fp)
   10770:	10000626 	beq	r2,zero,1078c <OSFlagAccept+0xac>
        wait_type &= ~OS_FLAG_CONSUME;
   10774:	e0bffe03 	ldbu	r2,-8(fp)
   10778:	10801fcc 	andi	r2,r2,127
   1077c:	e0bffe05 	stb	r2,-8(fp)
        consume    = OS_TRUE;
   10780:	00800044 	movi	r2,1
   10784:	e0bff385 	stb	r2,-50(fp)
   10788:	00000106 	br	10790 <OSFlagAccept+0xb0>
    } else {
        consume    = OS_FALSE;
   1078c:	e03ff385 	stb	zero,-50(fp)
    }
/*$PAGE*/
    *perr = OS_ERR_NONE;                                   /* Assume NO error until proven otherwise.  */
   10790:	e0bfff17 	ldw	r2,-4(fp)
   10794:	10000005 	stb	zero,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   10798:	0005303a 	rdctl	r2,status
   1079c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   107a0:	e0fffb17 	ldw	r3,-20(fp)
   107a4:	00bfff84 	movi	r2,-2
   107a8:	1884703a 	and	r2,r3,r2
   107ac:	1001703a 	wrctl	status,r2
  
  return context;
   107b0:	e0bffb17 	ldw	r2,-20(fp)
    OS_ENTER_CRITICAL();
   107b4:	e0bff415 	stw	r2,-48(fp)
    switch (wait_type) {
   107b8:	e0bffe03 	ldbu	r2,-8(fp)
   107bc:	10c00060 	cmpeqi	r3,r2,1
   107c0:	18005f1e 	bne	r3,zero,10940 <OSFlagAccept+0x260>
   107c4:	10c00088 	cmpgei	r3,r2,2
   107c8:	1800021e 	bne	r3,zero,107d4 <OSFlagAccept+0xf4>
   107cc:	10003f26 	beq	r2,zero,108cc <OSFlagAccept+0x1ec>
   107d0:	00007706 	br	109b0 <OSFlagAccept+0x2d0>
   107d4:	10c000a0 	cmpeqi	r3,r2,2
   107d8:	1800031e 	bne	r3,zero,107e8 <OSFlagAccept+0x108>
   107dc:	108000e0 	cmpeqi	r2,r2,3
   107e0:	10001e1e 	bne	r2,zero,1085c <OSFlagAccept+0x17c>
   107e4:	00007206 	br	109b0 <OSFlagAccept+0x2d0>
        case OS_FLAG_WAIT_SET_ALL:                         /* See if all required flags are set        */
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);     /* Extract only the bits we want   */
   107e8:	e0bffc17 	ldw	r2,-16(fp)
   107ec:	10c0020b 	ldhu	r3,8(r2)
   107f0:	e0bffd0b 	ldhu	r2,-12(fp)
   107f4:	1884703a 	and	r2,r3,r2
   107f8:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
   107fc:	e0fff30b 	ldhu	r3,-52(fp)
   10800:	e0bffd0b 	ldhu	r2,-12(fp)
   10804:	18800d1e 	bne	r3,r2,1083c <OSFlagAccept+0x15c>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
   10808:	e0bff383 	ldbu	r2,-50(fp)
   1080c:	10800058 	cmpnei	r2,r2,1
   10810:	10000d1e 	bne	r2,zero,10848 <OSFlagAccept+0x168>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we wanted      */
   10814:	e0bffc17 	ldw	r2,-16(fp)
   10818:	1080020b 	ldhu	r2,8(r2)
   1081c:	1007883a 	mov	r3,r2
   10820:	e0bff30b 	ldhu	r2,-52(fp)
   10824:	0084303a 	nor	r2,zero,r2
   10828:	1884703a 	and	r2,r3,r2
   1082c:	1007883a 	mov	r3,r2
   10830:	e0bffc17 	ldw	r2,-16(fp)
   10834:	10c0020d 	sth	r3,8(r2)
   10838:	00000306 	br	10848 <OSFlagAccept+0x168>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
   1083c:	e0bfff17 	ldw	r2,-4(fp)
   10840:	00c01c04 	movi	r3,112
   10844:	10c00005 	stb	r3,0(r2)
   10848:	e0bff417 	ldw	r2,-48(fp)
   1084c:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   10850:	e0bff617 	ldw	r2,-40(fp)
   10854:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
   10858:	00005e06 	br	109d4 <OSFlagAccept+0x2f4>

        case OS_FLAG_WAIT_SET_ANY:
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);     /* Extract only the bits we want   */
   1085c:	e0bffc17 	ldw	r2,-16(fp)
   10860:	10c0020b 	ldhu	r3,8(r2)
   10864:	e0bffd0b 	ldhu	r2,-12(fp)
   10868:	1884703a 	and	r2,r3,r2
   1086c:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag set                      */
   10870:	e0bff30b 	ldhu	r2,-52(fp)
   10874:	10000d26 	beq	r2,zero,108ac <OSFlagAccept+0x1cc>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
   10878:	e0bff383 	ldbu	r2,-50(fp)
   1087c:	10800058 	cmpnei	r2,r2,1
   10880:	10000d1e 	bne	r2,zero,108b8 <OSFlagAccept+0x1d8>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we got         */
   10884:	e0bffc17 	ldw	r2,-16(fp)
   10888:	1080020b 	ldhu	r2,8(r2)
   1088c:	1007883a 	mov	r3,r2
   10890:	e0bff30b 	ldhu	r2,-52(fp)
   10894:	0084303a 	nor	r2,zero,r2
   10898:	1884703a 	and	r2,r3,r2
   1089c:	1007883a 	mov	r3,r2
   108a0:	e0bffc17 	ldw	r2,-16(fp)
   108a4:	10c0020d 	sth	r3,8(r2)
   108a8:	00000306 	br	108b8 <OSFlagAccept+0x1d8>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
   108ac:	e0bfff17 	ldw	r2,-4(fp)
   108b0:	00c01c04 	movi	r3,112
   108b4:	10c00005 	stb	r3,0(r2)
   108b8:	e0bff417 	ldw	r2,-48(fp)
   108bc:	e0bff715 	stw	r2,-36(fp)
   108c0:	e0bff717 	ldw	r2,-36(fp)
   108c4:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
   108c8:	00004206 	br	109d4 <OSFlagAccept+0x2f4>

#if OS_FLAG_WAIT_CLR_EN > 0
        case OS_FLAG_WAIT_CLR_ALL:                         /* See if all required flags are cleared    */
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags);  /* Extract only the bits we want     */
   108cc:	e0bffc17 	ldw	r2,-16(fp)
   108d0:	1080020b 	ldhu	r2,8(r2)
   108d4:	0084303a 	nor	r2,zero,r2
   108d8:	1007883a 	mov	r3,r2
   108dc:	e0bffd0b 	ldhu	r2,-12(fp)
   108e0:	1884703a 	and	r2,r3,r2
   108e4:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
   108e8:	e0fff30b 	ldhu	r3,-52(fp)
   108ec:	e0bffd0b 	ldhu	r2,-12(fp)
   108f0:	18800b1e 	bne	r3,r2,10920 <OSFlagAccept+0x240>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
   108f4:	e0bff383 	ldbu	r2,-50(fp)
   108f8:	10800058 	cmpnei	r2,r2,1
   108fc:	10000b1e 	bne	r2,zero,1092c <OSFlagAccept+0x24c>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we wanted        */
   10900:	e0bffc17 	ldw	r2,-16(fp)
   10904:	10c0020b 	ldhu	r3,8(r2)
   10908:	e0bff30b 	ldhu	r2,-52(fp)
   1090c:	1884b03a 	or	r2,r3,r2
   10910:	1007883a 	mov	r3,r2
   10914:	e0bffc17 	ldw	r2,-16(fp)
   10918:	10c0020d 	sth	r3,8(r2)
   1091c:	00000306 	br	1092c <OSFlagAccept+0x24c>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
   10920:	e0bfff17 	ldw	r2,-4(fp)
   10924:	00c01c04 	movi	r3,112
   10928:	10c00005 	stb	r3,0(r2)
   1092c:	e0bff417 	ldw	r2,-48(fp)
   10930:	e0bff815 	stw	r2,-32(fp)
   10934:	e0bff817 	ldw	r2,-32(fp)
   10938:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
   1093c:	00002506 	br	109d4 <OSFlagAccept+0x2f4>

        case OS_FLAG_WAIT_CLR_ANY:
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags); /* Extract only the bits we want      */
   10940:	e0bffc17 	ldw	r2,-16(fp)
   10944:	1080020b 	ldhu	r2,8(r2)
   10948:	0084303a 	nor	r2,zero,r2
   1094c:	1007883a 	mov	r3,r2
   10950:	e0bffd0b 	ldhu	r2,-12(fp)
   10954:	1884703a 	and	r2,r3,r2
   10958:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag cleared                  */
   1095c:	e0bff30b 	ldhu	r2,-52(fp)
   10960:	10000b26 	beq	r2,zero,10990 <OSFlagAccept+0x2b0>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
   10964:	e0bff383 	ldbu	r2,-50(fp)
   10968:	10800058 	cmpnei	r2,r2,1
   1096c:	10000b1e 	bne	r2,zero,1099c <OSFlagAccept+0x2bc>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we got           */
   10970:	e0bffc17 	ldw	r2,-16(fp)
   10974:	10c0020b 	ldhu	r3,8(r2)
   10978:	e0bff30b 	ldhu	r2,-52(fp)
   1097c:	1884b03a 	or	r2,r3,r2
   10980:	1007883a 	mov	r3,r2
   10984:	e0bffc17 	ldw	r2,-16(fp)
   10988:	10c0020d 	sth	r3,8(r2)
   1098c:	00000306 	br	1099c <OSFlagAccept+0x2bc>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
   10990:	e0bfff17 	ldw	r2,-4(fp)
   10994:	00c01c04 	movi	r3,112
   10998:	10c00005 	stb	r3,0(r2)
   1099c:	e0bff417 	ldw	r2,-48(fp)
   109a0:	e0bff915 	stw	r2,-28(fp)
   109a4:	e0bff917 	ldw	r2,-28(fp)
   109a8:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
   109ac:	00000906 	br	109d4 <OSFlagAccept+0x2f4>
   109b0:	e0bff417 	ldw	r2,-48(fp)
   109b4:	e0bffa15 	stw	r2,-24(fp)
   109b8:	e0bffa17 	ldw	r2,-24(fp)
   109bc:	1001703a 	wrctl	status,r2
#endif

        default:
             OS_EXIT_CRITICAL();
             flags_rdy = (OS_FLAGS)0;
   109c0:	e03ff30d 	sth	zero,-52(fp)
             *perr     = OS_ERR_FLAG_WAIT_TYPE;
   109c4:	e0bfff17 	ldw	r2,-4(fp)
   109c8:	00c01bc4 	movi	r3,111
   109cc:	10c00005 	stb	r3,0(r2)
             break;
   109d0:	0001883a 	nop
    }
    return (flags_rdy);
   109d4:	e0bff30b 	ldhu	r2,-52(fp)
}
   109d8:	e037883a 	mov	sp,fp
   109dc:	df000017 	ldw	fp,0(sp)
   109e0:	dec00104 	addi	sp,sp,4
   109e4:	f800283a 	ret

000109e8 <OSFlagCreate>:
* Called from: Task ONLY
*********************************************************************************************************
*/

OS_FLAG_GRP  *OSFlagCreate (OS_FLAGS flags, INT8U *perr)
{
   109e8:	defff804 	addi	sp,sp,-32
   109ec:	df000715 	stw	fp,28(sp)
   109f0:	df000704 	addi	fp,sp,28
   109f4:	2005883a 	mov	r2,r4
   109f8:	e17fff15 	stw	r5,-4(fp)
   109fc:	e0bffe0d 	sth	r2,-8(fp)
    OS_FLAG_GRP *pgrp;
#if OS_CRITICAL_METHOD == 3                         /* Allocate storage for CPU status register        */
    OS_CPU_SR    cpu_sr = 0;
   10a00:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                       /* Validate 'perr'                                 */
   10a04:	e0bfff17 	ldw	r2,-4(fp)
   10a08:	1000021e 	bne	r2,zero,10a14 <OSFlagCreate+0x2c>
        return ((OS_FLAG_GRP *)0);
   10a0c:	0005883a 	mov	r2,zero
   10a10:	00003306 	br	10ae0 <OSFlagCreate+0xf8>
    }
#endif
    if (OSIntNesting > 0) {                         /* See if called from ISR ...                      */
   10a14:	d0a72f03 	ldbu	r2,-25412(gp)
   10a18:	10803fcc 	andi	r2,r2,255
   10a1c:	10000526 	beq	r2,zero,10a34 <OSFlagCreate+0x4c>
        *perr = OS_ERR_CREATE_ISR;                  /* ... can't CREATE from an ISR                    */
   10a20:	e0bfff17 	ldw	r2,-4(fp)
   10a24:	00c00404 	movi	r3,16
   10a28:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAG_GRP *)0);
   10a2c:	0005883a 	mov	r2,zero
   10a30:	00002b06 	br	10ae0 <OSFlagCreate+0xf8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   10a34:	0005303a 	rdctl	r2,status
   10a38:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   10a3c:	e0fffd17 	ldw	r3,-12(fp)
   10a40:	00bfff84 	movi	r2,-2
   10a44:	1884703a 	and	r2,r3,r2
   10a48:	1001703a 	wrctl	status,r2
  
  return context;
   10a4c:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
   10a50:	e0bff915 	stw	r2,-28(fp)
    pgrp = OSFlagFreeList;                          /* Get next free event flag                        */
   10a54:	d0a73217 	ldw	r2,-25400(gp)
   10a58:	e0bffb15 	stw	r2,-20(fp)
    if (pgrp != (OS_FLAG_GRP *)0) {                 /* See if we have event flag groups available      */
   10a5c:	e0bffb17 	ldw	r2,-20(fp)
   10a60:	10001726 	beq	r2,zero,10ac0 <OSFlagCreate+0xd8>
                                                    /* Adjust free list                                */
        OSFlagFreeList       = (OS_FLAG_GRP *)OSFlagFreeList->OSFlagWaitList;
   10a64:	d0a73217 	ldw	r2,-25400(gp)
   10a68:	10800117 	ldw	r2,4(r2)
   10a6c:	d0a73215 	stw	r2,-25400(gp)
        pgrp->OSFlagType     = OS_EVENT_TYPE_FLAG;  /* Set to event flag group type                    */
   10a70:	e0bffb17 	ldw	r2,-20(fp)
   10a74:	00c00144 	movi	r3,5
   10a78:	10c00005 	stb	r3,0(r2)
        pgrp->OSFlagFlags    = flags;               /* Set to desired initial value                    */
   10a7c:	e0bffb17 	ldw	r2,-20(fp)
   10a80:	e0fffe0b 	ldhu	r3,-8(fp)
   10a84:	10c0020d 	sth	r3,8(r2)
        pgrp->OSFlagWaitList = (void *)0;           /* Clear list of tasks waiting on flags            */
   10a88:	e0bffb17 	ldw	r2,-20(fp)
   10a8c:	10000115 	stw	zero,4(r2)
#if OS_FLAG_NAME_SIZE > 1
        pgrp->OSFlagName[0]  = '?';
   10a90:	e0bffb17 	ldw	r2,-20(fp)
   10a94:	00c00fc4 	movi	r3,63
   10a98:	10c00285 	stb	r3,10(r2)
        pgrp->OSFlagName[1]  = OS_ASCII_NUL;
   10a9c:	e0bffb17 	ldw	r2,-20(fp)
   10aa0:	100002c5 	stb	zero,11(r2)
   10aa4:	e0bff917 	ldw	r2,-28(fp)
   10aa8:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   10aac:	e0bffa17 	ldw	r2,-24(fp)
   10ab0:	1001703a 	wrctl	status,r2
#endif
        OS_EXIT_CRITICAL();
        *perr                = OS_ERR_NONE;
   10ab4:	e0bfff17 	ldw	r2,-4(fp)
   10ab8:	10000005 	stb	zero,0(r2)
   10abc:	00000706 	br	10adc <OSFlagCreate+0xf4>
   10ac0:	e0bff917 	ldw	r2,-28(fp)
   10ac4:	e0bffc15 	stw	r2,-16(fp)
   10ac8:	e0bffc17 	ldw	r2,-16(fp)
   10acc:	1001703a 	wrctl	status,r2
    } else {
        OS_EXIT_CRITICAL();
        *perr                = OS_ERR_FLAG_GRP_DEPLETED;
   10ad0:	e0bfff17 	ldw	r2,-4(fp)
   10ad4:	00c01c84 	movi	r3,114
   10ad8:	10c00005 	stb	r3,0(r2)
    }
    return (pgrp);                                  /* Return pointer to event flag group              */
   10adc:	e0bffb17 	ldw	r2,-20(fp)
}
   10ae0:	e037883a 	mov	sp,fp
   10ae4:	df000017 	ldw	fp,0(sp)
   10ae8:	dec00104 	addi	sp,sp,4
   10aec:	f800283a 	ret

00010af0 <OSFlagDel>:
*********************************************************************************************************
*/

#if OS_FLAG_DEL_EN > 0
OS_FLAG_GRP  *OSFlagDel (OS_FLAG_GRP *pgrp, INT8U opt, INT8U *perr)
{
   10af0:	defff204 	addi	sp,sp,-56
   10af4:	dfc00d15 	stw	ra,52(sp)
   10af8:	df000c15 	stw	fp,48(sp)
   10afc:	df000c04 	addi	fp,sp,48
   10b00:	e13ffd15 	stw	r4,-12(fp)
   10b04:	2805883a 	mov	r2,r5
   10b08:	e1bfff15 	stw	r6,-4(fp)
   10b0c:	e0bffe05 	stb	r2,-8(fp)
    BOOLEAN       tasks_waiting;
    OS_FLAG_NODE *pnode;
    OS_FLAG_GRP  *pgrp_return;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
   10b10:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
   10b14:	e0bfff17 	ldw	r2,-4(fp)
   10b18:	1000021e 	bne	r2,zero,10b24 <OSFlagDel+0x34>
        return (pgrp);
   10b1c:	e0bffd17 	ldw	r2,-12(fp)
   10b20:	00008006 	br	10d24 <OSFlagDel+0x234>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                        /* Validate 'pgrp'                          */
   10b24:	e0bffd17 	ldw	r2,-12(fp)
   10b28:	1000051e 	bne	r2,zero,10b40 <OSFlagDel+0x50>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
   10b2c:	e0bfff17 	ldw	r2,-4(fp)
   10b30:	00c01b84 	movi	r3,110
   10b34:	10c00005 	stb	r3,0(r2)
        return (pgrp);
   10b38:	e0bffd17 	ldw	r2,-12(fp)
   10b3c:	00007906 	br	10d24 <OSFlagDel+0x234>
    }
#endif
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
   10b40:	d0a72f03 	ldbu	r2,-25412(gp)
   10b44:	10803fcc 	andi	r2,r2,255
   10b48:	10000526 	beq	r2,zero,10b60 <OSFlagDel+0x70>
        *perr = OS_ERR_DEL_ISR;                            /* ... can't DELETE from an ISR             */
   10b4c:	e0bfff17 	ldw	r2,-4(fp)
   10b50:	00c003c4 	movi	r3,15
   10b54:	10c00005 	stb	r3,0(r2)
        return (pgrp);
   10b58:	e0bffd17 	ldw	r2,-12(fp)
   10b5c:	00007106 	br	10d24 <OSFlagDel+0x234>
    }
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {          /* Validate event group type                */
   10b60:	e0bffd17 	ldw	r2,-12(fp)
   10b64:	10800003 	ldbu	r2,0(r2)
   10b68:	10803fcc 	andi	r2,r2,255
   10b6c:	10800160 	cmpeqi	r2,r2,5
   10b70:	1000051e 	bne	r2,zero,10b88 <OSFlagDel+0x98>
        *perr = OS_ERR_EVENT_TYPE;
   10b74:	e0bfff17 	ldw	r2,-4(fp)
   10b78:	00c00044 	movi	r3,1
   10b7c:	10c00005 	stb	r3,0(r2)
        return (pgrp);
   10b80:	e0bffd17 	ldw	r2,-12(fp)
   10b84:	00006706 	br	10d24 <OSFlagDel+0x234>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   10b88:	0005303a 	rdctl	r2,status
   10b8c:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   10b90:	e0fffc17 	ldw	r3,-16(fp)
   10b94:	00bfff84 	movi	r2,-2
   10b98:	1884703a 	and	r2,r3,r2
   10b9c:	1001703a 	wrctl	status,r2
  
  return context;
   10ba0:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
   10ba4:	e0bff715 	stw	r2,-36(fp)
    if (pgrp->OSFlagWaitList != (void *)0) {               /* See if any tasks waiting on event flags  */
   10ba8:	e0bffd17 	ldw	r2,-12(fp)
   10bac:	10800117 	ldw	r2,4(r2)
   10bb0:	10000326 	beq	r2,zero,10bc0 <OSFlagDel+0xd0>
        tasks_waiting = OS_TRUE;                           /* Yes                                      */
   10bb4:	00800044 	movi	r2,1
   10bb8:	e0bff405 	stb	r2,-48(fp)
   10bbc:	00000106 	br	10bc4 <OSFlagDel+0xd4>
    } else {
        tasks_waiting = OS_FALSE;                          /* No                                       */
   10bc0:	e03ff405 	stb	zero,-48(fp)
    }
    switch (opt) {
   10bc4:	e0bffe03 	ldbu	r2,-8(fp)
   10bc8:	10000326 	beq	r2,zero,10bd8 <OSFlagDel+0xe8>
   10bcc:	10800060 	cmpeqi	r2,r2,1
   10bd0:	1000231e 	bne	r2,zero,10c60 <OSFlagDel+0x170>
   10bd4:	00004806 	br	10cf8 <OSFlagDel+0x208>
        case OS_DEL_NO_PEND:                               /* Delete group if no task waiting          */
             if (tasks_waiting == OS_FALSE) {
   10bd8:	e0bff403 	ldbu	r2,-48(fp)
   10bdc:	1000161e 	bne	r2,zero,10c38 <OSFlagDel+0x148>
#if OS_FLAG_NAME_SIZE > 1
                 pgrp->OSFlagName[0]  = '?';               /* Unknown name                             */
   10be0:	e0bffd17 	ldw	r2,-12(fp)
   10be4:	00c00fc4 	movi	r3,63
   10be8:	10c00285 	stb	r3,10(r2)
                 pgrp->OSFlagName[1]  = OS_ASCII_NUL;
   10bec:	e0bffd17 	ldw	r2,-12(fp)
   10bf0:	100002c5 	stb	zero,11(r2)
#endif
                 pgrp->OSFlagType     = OS_EVENT_TYPE_UNUSED;
   10bf4:	e0bffd17 	ldw	r2,-12(fp)
   10bf8:	10000005 	stb	zero,0(r2)
                 pgrp->OSFlagWaitList = (void *)OSFlagFreeList; /* Return group to free list           */
   10bfc:	d0e73217 	ldw	r3,-25400(gp)
   10c00:	e0bffd17 	ldw	r2,-12(fp)
   10c04:	10c00115 	stw	r3,4(r2)
                 pgrp->OSFlagFlags    = (OS_FLAGS)0;
   10c08:	e0bffd17 	ldw	r2,-12(fp)
   10c0c:	1000020d 	sth	zero,8(r2)
                 OSFlagFreeList       = pgrp;
   10c10:	e0bffd17 	ldw	r2,-12(fp)
   10c14:	d0a73215 	stw	r2,-25400(gp)
   10c18:	e0bff717 	ldw	r2,-36(fp)
   10c1c:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   10c20:	e0bff817 	ldw	r2,-32(fp)
   10c24:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                = OS_ERR_NONE;
   10c28:	e0bfff17 	ldw	r2,-4(fp)
   10c2c:	10000005 	stb	zero,0(r2)
                 pgrp_return          = (OS_FLAG_GRP *)0;  /* Event Flag Group has been deleted        */
   10c30:	e03ff615 	stw	zero,-40(fp)
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                = OS_ERR_TASK_WAITING;
                 pgrp_return          = pgrp;
             }
             break;
   10c34:	00003a06 	br	10d20 <OSFlagDel+0x230>
   10c38:	e0bff717 	ldw	r2,-36(fp)
   10c3c:	e0bff915 	stw	r2,-28(fp)
   10c40:	e0bff917 	ldw	r2,-28(fp)
   10c44:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                = OS_ERR_NONE;
                 pgrp_return          = (OS_FLAG_GRP *)0;  /* Event Flag Group has been deleted        */
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                = OS_ERR_TASK_WAITING;
   10c48:	e0bfff17 	ldw	r2,-4(fp)
   10c4c:	00c01244 	movi	r3,73
   10c50:	10c00005 	stb	r3,0(r2)
                 pgrp_return          = pgrp;
   10c54:	e0bffd17 	ldw	r2,-12(fp)
   10c58:	e0bff615 	stw	r2,-40(fp)
             }
             break;
   10c5c:	00003006 	br	10d20 <OSFlagDel+0x230>

        case OS_DEL_ALWAYS:                                /* Always delete the event flag group       */
             pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
   10c60:	e0bffd17 	ldw	r2,-12(fp)
   10c64:	10800117 	ldw	r2,4(r2)
   10c68:	e0bff515 	stw	r2,-44(fp)
             while (pnode != (OS_FLAG_NODE *)0) {          /* Ready ALL tasks waiting for flags        */
   10c6c:	00000606 	br	10c88 <OSFlagDel+0x198>
                 (void)OS_FlagTaskRdy(pnode, (OS_FLAGS)0);
   10c70:	000b883a 	mov	r5,zero
   10c74:	e13ff517 	ldw	r4,-44(fp)
   10c78:	0011c5c0 	call	11c5c <OS_FlagTaskRdy>
                 pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext;
   10c7c:	e0bff517 	ldw	r2,-44(fp)
   10c80:	10800017 	ldw	r2,0(r2)
   10c84:	e0bff515 	stw	r2,-44(fp)
             }
             break;

        case OS_DEL_ALWAYS:                                /* Always delete the event flag group       */
             pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
             while (pnode != (OS_FLAG_NODE *)0) {          /* Ready ALL tasks waiting for flags        */
   10c88:	e0bff517 	ldw	r2,-44(fp)
   10c8c:	103ff81e 	bne	r2,zero,10c70 <__alt_data_end+0xfffe0c70>
                 (void)OS_FlagTaskRdy(pnode, (OS_FLAGS)0);
                 pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext;
             }
#if OS_FLAG_NAME_SIZE > 1
             pgrp->OSFlagName[0]  = '?';                   /* Unknown name                             */
   10c90:	e0bffd17 	ldw	r2,-12(fp)
   10c94:	00c00fc4 	movi	r3,63
   10c98:	10c00285 	stb	r3,10(r2)
             pgrp->OSFlagName[1]  = OS_ASCII_NUL;
   10c9c:	e0bffd17 	ldw	r2,-12(fp)
   10ca0:	100002c5 	stb	zero,11(r2)
#endif
             pgrp->OSFlagType     = OS_EVENT_TYPE_UNUSED;
   10ca4:	e0bffd17 	ldw	r2,-12(fp)
   10ca8:	10000005 	stb	zero,0(r2)
             pgrp->OSFlagWaitList = (void *)OSFlagFreeList;/* Return group to free list                */
   10cac:	d0e73217 	ldw	r3,-25400(gp)
   10cb0:	e0bffd17 	ldw	r2,-12(fp)
   10cb4:	10c00115 	stw	r3,4(r2)
             pgrp->OSFlagFlags    = (OS_FLAGS)0;
   10cb8:	e0bffd17 	ldw	r2,-12(fp)
   10cbc:	1000020d 	sth	zero,8(r2)
             OSFlagFreeList       = pgrp;
   10cc0:	e0bffd17 	ldw	r2,-12(fp)
   10cc4:	d0a73215 	stw	r2,-25400(gp)
   10cc8:	e0bff717 	ldw	r2,-36(fp)
   10ccc:	e0bffa15 	stw	r2,-24(fp)
   10cd0:	e0bffa17 	ldw	r2,-24(fp)
   10cd4:	1001703a 	wrctl	status,r2
             OS_EXIT_CRITICAL();
             if (tasks_waiting == OS_TRUE) {               /* Reschedule only if task(s) were waiting  */
   10cd8:	e0bff403 	ldbu	r2,-48(fp)
   10cdc:	10800058 	cmpnei	r2,r2,1
   10ce0:	1000011e 	bne	r2,zero,10ce8 <OSFlagDel+0x1f8>
                 OS_Sched();                               /* Find highest priority task ready to run  */
   10ce4:	000fe7c0 	call	fe7c <OS_Sched>
             }
             *perr = OS_ERR_NONE;
   10ce8:	e0bfff17 	ldw	r2,-4(fp)
   10cec:	10000005 	stb	zero,0(r2)
             pgrp_return          = (OS_FLAG_GRP *)0;      /* Event Flag Group has been deleted        */
   10cf0:	e03ff615 	stw	zero,-40(fp)
             break;
   10cf4:	00000a06 	br	10d20 <OSFlagDel+0x230>
   10cf8:	e0bff717 	ldw	r2,-36(fp)
   10cfc:	e0bffb15 	stw	r2,-20(fp)
   10d00:	e0bffb17 	ldw	r2,-20(fp)
   10d04:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();
             *perr                = OS_ERR_INVALID_OPT;
   10d08:	e0bfff17 	ldw	r2,-4(fp)
   10d0c:	00c001c4 	movi	r3,7
   10d10:	10c00005 	stb	r3,0(r2)
             pgrp_return          = pgrp;
   10d14:	e0bffd17 	ldw	r2,-12(fp)
   10d18:	e0bff615 	stw	r2,-40(fp)
             break;
   10d1c:	0001883a 	nop
    }
    return (pgrp_return);
   10d20:	e0bff617 	ldw	r2,-40(fp)
}
   10d24:	e037883a 	mov	sp,fp
   10d28:	dfc00117 	ldw	ra,4(sp)
   10d2c:	df000017 	ldw	fp,0(sp)
   10d30:	dec00204 	addi	sp,sp,8
   10d34:	f800283a 	ret

00010d38 <OSFlagNameGet>:
*********************************************************************************************************
*/

#if OS_FLAG_NAME_SIZE > 1
INT8U  OSFlagNameGet (OS_FLAG_GRP *pgrp, INT8U *pname, INT8U *perr)
{
   10d38:	defff604 	addi	sp,sp,-40
   10d3c:	dfc00915 	stw	ra,36(sp)
   10d40:	df000815 	stw	fp,32(sp)
   10d44:	df000804 	addi	fp,sp,32
   10d48:	e13ffd15 	stw	r4,-12(fp)
   10d4c:	e17ffe15 	stw	r5,-8(fp)
   10d50:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   10d54:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
   10d58:	e0bfff17 	ldw	r2,-4(fp)
   10d5c:	1000021e 	bne	r2,zero,10d68 <OSFlagNameGet+0x30>
        return (0);
   10d60:	0005883a 	mov	r2,zero
   10d64:	00003906 	br	10e4c <OSFlagNameGet+0x114>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {              /* Is 'pgrp' a NULL pointer?                          */
   10d68:	e0bffd17 	ldw	r2,-12(fp)
   10d6c:	1000051e 	bne	r2,zero,10d84 <OSFlagNameGet+0x4c>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
   10d70:	e0bfff17 	ldw	r2,-4(fp)
   10d74:	00c01b84 	movi	r3,110
   10d78:	10c00005 	stb	r3,0(r2)
        return (0);
   10d7c:	0005883a 	mov	r2,zero
   10d80:	00003206 	br	10e4c <OSFlagNameGet+0x114>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
   10d84:	e0bffe17 	ldw	r2,-8(fp)
   10d88:	1000051e 	bne	r2,zero,10da0 <OSFlagNameGet+0x68>
        *perr = OS_ERR_PNAME_NULL;
   10d8c:	e0bfff17 	ldw	r2,-4(fp)
   10d90:	00c00304 	movi	r3,12
   10d94:	10c00005 	stb	r3,0(r2)
        return (0);
   10d98:	0005883a 	mov	r2,zero
   10d9c:	00002b06 	br	10e4c <OSFlagNameGet+0x114>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
   10da0:	d0a72f03 	ldbu	r2,-25412(gp)
   10da4:	10803fcc 	andi	r2,r2,255
   10da8:	10000526 	beq	r2,zero,10dc0 <OSFlagNameGet+0x88>
        *perr = OS_ERR_NAME_GET_ISR;
   10dac:	e0bfff17 	ldw	r2,-4(fp)
   10db0:	00c00444 	movi	r3,17
   10db4:	10c00005 	stb	r3,0(r2)
        return (0);
   10db8:	0005883a 	mov	r2,zero
   10dbc:	00002306 	br	10e4c <OSFlagNameGet+0x114>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   10dc0:	0005303a 	rdctl	r2,status
   10dc4:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   10dc8:	e0fffc17 	ldw	r3,-16(fp)
   10dcc:	00bfff84 	movi	r2,-2
   10dd0:	1884703a 	and	r2,r3,r2
   10dd4:	1001703a 	wrctl	status,r2
  
  return context;
   10dd8:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
   10ddc:	e0bff815 	stw	r2,-32(fp)
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {
   10de0:	e0bffd17 	ldw	r2,-12(fp)
   10de4:	10800003 	ldbu	r2,0(r2)
   10de8:	10803fcc 	andi	r2,r2,255
   10dec:	10800160 	cmpeqi	r2,r2,5
   10df0:	1000091e 	bne	r2,zero,10e18 <OSFlagNameGet+0xe0>
   10df4:	e0bff817 	ldw	r2,-32(fp)
   10df8:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   10dfc:	e0bff917 	ldw	r2,-28(fp)
   10e00:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_EVENT_TYPE;
   10e04:	e0bfff17 	ldw	r2,-4(fp)
   10e08:	00c00044 	movi	r3,1
   10e0c:	10c00005 	stb	r3,0(r2)
        return (0);
   10e10:	0005883a 	mov	r2,zero
   10e14:	00000d06 	br	10e4c <OSFlagNameGet+0x114>
    }
    len   = OS_StrCopy(pname, pgrp->OSFlagName); /* Copy name from OS_FLAG_GRP                         */
   10e18:	e0bffd17 	ldw	r2,-12(fp)
   10e1c:	10800284 	addi	r2,r2,10
   10e20:	100b883a 	mov	r5,r2
   10e24:	e13ffe17 	ldw	r4,-8(fp)
   10e28:	000ffc00 	call	ffc0 <OS_StrCopy>
   10e2c:	e0bffb05 	stb	r2,-20(fp)
   10e30:	e0bff817 	ldw	r2,-32(fp)
   10e34:	e0bffa15 	stw	r2,-24(fp)
   10e38:	e0bffa17 	ldw	r2,-24(fp)
   10e3c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   10e40:	e0bfff17 	ldw	r2,-4(fp)
   10e44:	10000005 	stb	zero,0(r2)
    return (len);
   10e48:	e0bffb03 	ldbu	r2,-20(fp)
}
   10e4c:	e037883a 	mov	sp,fp
   10e50:	dfc00117 	ldw	ra,4(sp)
   10e54:	df000017 	ldw	fp,0(sp)
   10e58:	dec00204 	addi	sp,sp,8
   10e5c:	f800283a 	ret

00010e60 <OSFlagNameSet>:
*********************************************************************************************************
*/

#if OS_FLAG_NAME_SIZE > 1
void  OSFlagNameSet (OS_FLAG_GRP *pgrp, INT8U *pname, INT8U *perr)
{
   10e60:	defff504 	addi	sp,sp,-44
   10e64:	dfc00a15 	stw	ra,40(sp)
   10e68:	df000915 	stw	fp,36(sp)
   10e6c:	df000904 	addi	fp,sp,36
   10e70:	e13ffd15 	stw	r4,-12(fp)
   10e74:	e17ffe15 	stw	r5,-8(fp)
   10e78:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   10e7c:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
   10e80:	e0bfff17 	ldw	r2,-4(fp)
   10e84:	10004326 	beq	r2,zero,10f94 <OSFlagNameSet+0x134>
        return;
    }
    if (pgrp == (OS_FLAG_GRP *)0) {              /* Is 'pgrp' a NULL pointer?                          */
   10e88:	e0bffd17 	ldw	r2,-12(fp)
   10e8c:	1000041e 	bne	r2,zero,10ea0 <OSFlagNameSet+0x40>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
   10e90:	e0bfff17 	ldw	r2,-4(fp)
   10e94:	00c01b84 	movi	r3,110
   10e98:	10c00005 	stb	r3,0(r2)
        return;
   10e9c:	00003e06 	br	10f98 <OSFlagNameSet+0x138>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
   10ea0:	e0bffe17 	ldw	r2,-8(fp)
   10ea4:	1000041e 	bne	r2,zero,10eb8 <OSFlagNameSet+0x58>
        *perr = OS_ERR_PNAME_NULL;
   10ea8:	e0bfff17 	ldw	r2,-4(fp)
   10eac:	00c00304 	movi	r3,12
   10eb0:	10c00005 	stb	r3,0(r2)
        return;
   10eb4:	00003806 	br	10f98 <OSFlagNameSet+0x138>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
   10eb8:	d0a72f03 	ldbu	r2,-25412(gp)
   10ebc:	10803fcc 	andi	r2,r2,255
   10ec0:	10000426 	beq	r2,zero,10ed4 <OSFlagNameSet+0x74>
        *perr = OS_ERR_NAME_SET_ISR;
   10ec4:	e0bfff17 	ldw	r2,-4(fp)
   10ec8:	00c00484 	movi	r3,18
   10ecc:	10c00005 	stb	r3,0(r2)
        return;
   10ed0:	00003106 	br	10f98 <OSFlagNameSet+0x138>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   10ed4:	0005303a 	rdctl	r2,status
   10ed8:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   10edc:	e0fffc17 	ldw	r3,-16(fp)
   10ee0:	00bfff84 	movi	r2,-2
   10ee4:	1884703a 	and	r2,r3,r2
   10ee8:	1001703a 	wrctl	status,r2
  
  return context;
   10eec:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
   10ef0:	e0bff715 	stw	r2,-36(fp)
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {
   10ef4:	e0bffd17 	ldw	r2,-12(fp)
   10ef8:	10800003 	ldbu	r2,0(r2)
   10efc:	10803fcc 	andi	r2,r2,255
   10f00:	10800160 	cmpeqi	r2,r2,5
   10f04:	1000081e 	bne	r2,zero,10f28 <OSFlagNameSet+0xc8>
   10f08:	e0bff717 	ldw	r2,-36(fp)
   10f0c:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   10f10:	e0bff817 	ldw	r2,-32(fp)
   10f14:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_EVENT_TYPE;
   10f18:	e0bfff17 	ldw	r2,-4(fp)
   10f1c:	00c00044 	movi	r3,1
   10f20:	10c00005 	stb	r3,0(r2)
        return;
   10f24:	00001c06 	br	10f98 <OSFlagNameSet+0x138>
    }
    len = OS_StrLen(pname);                      /* Can we fit the string in the storage area?         */
   10f28:	e13ffe17 	ldw	r4,-8(fp)
   10f2c:	00100340 	call	10034 <OS_StrLen>
   10f30:	e0bffa05 	stb	r2,-24(fp)
    if (len > (OS_FLAG_NAME_SIZE - 1)) {         /* No                                                 */
   10f34:	e0bffa03 	ldbu	r2,-24(fp)
   10f38:	10800830 	cmpltui	r2,r2,32
   10f3c:	1000081e 	bne	r2,zero,10f60 <OSFlagNameSet+0x100>
   10f40:	e0bff717 	ldw	r2,-36(fp)
   10f44:	e0bff915 	stw	r2,-28(fp)
   10f48:	e0bff917 	ldw	r2,-28(fp)
   10f4c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_FLAG_NAME_TOO_LONG;
   10f50:	e0bfff17 	ldw	r2,-4(fp)
   10f54:	00c01cc4 	movi	r3,115
   10f58:	10c00005 	stb	r3,0(r2)
        return;
   10f5c:	00000e06 	br	10f98 <OSFlagNameSet+0x138>
    }
    (void)OS_StrCopy(pgrp->OSFlagName, pname);   /* Yes, copy name from OS_FLAG_GRP                    */
   10f60:	e0bffd17 	ldw	r2,-12(fp)
   10f64:	10800284 	addi	r2,r2,10
   10f68:	e17ffe17 	ldw	r5,-8(fp)
   10f6c:	1009883a 	mov	r4,r2
   10f70:	000ffc00 	call	ffc0 <OS_StrCopy>
   10f74:	e0bff717 	ldw	r2,-36(fp)
   10f78:	e0bffb15 	stw	r2,-20(fp)
   10f7c:	e0bffb17 	ldw	r2,-20(fp)
   10f80:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   10f84:	e0bfff17 	ldw	r2,-4(fp)
   10f88:	10000005 	stb	zero,0(r2)
    return;
   10f8c:	0001883a 	nop
   10f90:	00000106 	br	10f98 <OSFlagNameSet+0x138>



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
        return;
   10f94:	0001883a 	nop
    }
    (void)OS_StrCopy(pgrp->OSFlagName, pname);   /* Yes, copy name from OS_FLAG_GRP                    */
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
    return;
}
   10f98:	e037883a 	mov	sp,fp
   10f9c:	dfc00117 	ldw	ra,4(sp)
   10fa0:	df000017 	ldw	fp,0(sp)
   10fa4:	dec00204 	addi	sp,sp,8
   10fa8:	f800283a 	ret

00010fac <OSFlagPend>:
*                 event flags.
*********************************************************************************************************
*/

OS_FLAGS  OSFlagPend (OS_FLAG_GRP *pgrp, OS_FLAGS flags, INT8U wait_type, INT16U timeout, INT8U *perr)
{
   10fac:	deffe104 	addi	sp,sp,-124
   10fb0:	dfc01e15 	stw	ra,120(sp)
   10fb4:	df001d15 	stw	fp,116(sp)
   10fb8:	df001d04 	addi	fp,sp,116
   10fbc:	e13ffc15 	stw	r4,-16(fp)
   10fc0:	2809883a 	mov	r4,r5
   10fc4:	3007883a 	mov	r3,r6
   10fc8:	3805883a 	mov	r2,r7
   10fcc:	e13ffd0d 	sth	r4,-12(fp)
   10fd0:	e0fffe05 	stb	r3,-8(fp)
   10fd4:	e0bfff0d 	sth	r2,-4(fp)
    OS_FLAGS      flags_rdy;
    INT8U         result;
    INT8U         pend_stat;
    BOOLEAN       consume;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
   10fd8:	e03fe515 	stw	zero,-108(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
   10fdc:	e0800217 	ldw	r2,8(fp)
   10fe0:	1000021e 	bne	r2,zero,10fec <OSFlagPend+0x40>
        return ((OS_FLAGS)0);
   10fe4:	0005883a 	mov	r2,zero
   10fe8:	00015906 	br	11550 <OSFlagPend+0x5a4>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                        /* Validate 'pgrp'                          */
   10fec:	e0bffc17 	ldw	r2,-16(fp)
   10ff0:	1000051e 	bne	r2,zero,11008 <OSFlagPend+0x5c>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
   10ff4:	e0800217 	ldw	r2,8(fp)
   10ff8:	00c01b84 	movi	r3,110
   10ffc:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
   11000:	0005883a 	mov	r2,zero
   11004:	00015206 	br	11550 <OSFlagPend+0x5a4>
    }
#endif
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
   11008:	d0a72f03 	ldbu	r2,-25412(gp)
   1100c:	10803fcc 	andi	r2,r2,255
   11010:	10000526 	beq	r2,zero,11028 <OSFlagPend+0x7c>
        *perr = OS_ERR_PEND_ISR;                           /* ... can't PEND from an ISR               */
   11014:	e0800217 	ldw	r2,8(fp)
   11018:	00c00084 	movi	r3,2
   1101c:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
   11020:	0005883a 	mov	r2,zero
   11024:	00014a06 	br	11550 <OSFlagPend+0x5a4>
    }
    if (OSLockNesting > 0) {                               /* See if called with scheduler locked ...  */
   11028:	d0a72103 	ldbu	r2,-25468(gp)
   1102c:	10803fcc 	andi	r2,r2,255
   11030:	10000526 	beq	r2,zero,11048 <OSFlagPend+0x9c>
        *perr = OS_ERR_PEND_LOCKED;                        /* ... can't PEND when locked               */
   11034:	e0800217 	ldw	r2,8(fp)
   11038:	00c00344 	movi	r3,13
   1103c:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
   11040:	0005883a 	mov	r2,zero
   11044:	00014206 	br	11550 <OSFlagPend+0x5a4>
    }
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {          /* Validate event block type                */
   11048:	e0bffc17 	ldw	r2,-16(fp)
   1104c:	10800003 	ldbu	r2,0(r2)
   11050:	10803fcc 	andi	r2,r2,255
   11054:	10800160 	cmpeqi	r2,r2,5
   11058:	1000051e 	bne	r2,zero,11070 <OSFlagPend+0xc4>
        *perr = OS_ERR_EVENT_TYPE;
   1105c:	e0800217 	ldw	r2,8(fp)
   11060:	00c00044 	movi	r3,1
   11064:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
   11068:	0005883a 	mov	r2,zero
   1106c:	00013806 	br	11550 <OSFlagPend+0x5a4>
    }
    result = (INT8U)(wait_type & OS_FLAG_CONSUME);
   11070:	e0fffe03 	ldbu	r3,-8(fp)
   11074:	00bfe004 	movi	r2,-128
   11078:	1884703a 	and	r2,r3,r2
   1107c:	e0bfe605 	stb	r2,-104(fp)
    if (result != (INT8U)0) {                             /* See if we need to consume the flags      */
   11080:	e0bfe603 	ldbu	r2,-104(fp)
   11084:	10000626 	beq	r2,zero,110a0 <OSFlagPend+0xf4>
        wait_type &= ~(INT8U)OS_FLAG_CONSUME;
   11088:	e0bffe03 	ldbu	r2,-8(fp)
   1108c:	10801fcc 	andi	r2,r2,127
   11090:	e0bffe05 	stb	r2,-8(fp)
        consume    = OS_TRUE;
   11094:	00800044 	movi	r2,1
   11098:	e0bfe405 	stb	r2,-112(fp)
   1109c:	00000106 	br	110a4 <OSFlagPend+0xf8>
    } else {
        consume    = OS_FALSE;
   110a0:	e03fe405 	stb	zero,-112(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   110a4:	0005303a 	rdctl	r2,status
   110a8:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   110ac:	e0fff617 	ldw	r3,-40(fp)
   110b0:	00bfff84 	movi	r2,-2
   110b4:	1884703a 	and	r2,r3,r2
   110b8:	1001703a 	wrctl	status,r2
  
  return context;
   110bc:	e0bff617 	ldw	r2,-40(fp)
    }
/*$PAGE*/
    OS_ENTER_CRITICAL();
   110c0:	e0bfe515 	stw	r2,-108(fp)
    switch (wait_type) {
   110c4:	e0bffe03 	ldbu	r2,-8(fp)
   110c8:	10c00060 	cmpeqi	r3,r2,1
   110cc:	1800921e 	bne	r3,zero,11318 <OSFlagPend+0x36c>
   110d0:	10c00088 	cmpgei	r3,r2,2
   110d4:	1800021e 	bne	r3,zero,110e0 <OSFlagPend+0x134>
   110d8:	10006126 	beq	r2,zero,11260 <OSFlagPend+0x2b4>
   110dc:	0000bb06 	br	113cc <OSFlagPend+0x420>
   110e0:	10c000a0 	cmpeqi	r3,r2,2
   110e4:	1800031e 	bne	r3,zero,110f4 <OSFlagPend+0x148>
   110e8:	108000e0 	cmpeqi	r2,r2,3
   110ec:	10002f1e 	bne	r2,zero,111ac <OSFlagPend+0x200>
   110f0:	0000b606 	br	113cc <OSFlagPend+0x420>
        case OS_FLAG_WAIT_SET_ALL:                         /* See if all required flags are set        */
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);   /* Extract only the bits we want     */
   110f4:	e0bffc17 	ldw	r2,-16(fp)
   110f8:	10c0020b 	ldhu	r3,8(r2)
   110fc:	e0bffd0b 	ldhu	r2,-12(fp)
   11100:	1884703a 	and	r2,r3,r2
   11104:	e0bfe80d 	sth	r2,-96(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
   11108:	e0ffe80b 	ldhu	r3,-96(fp)
   1110c:	e0bffd0b 	ldhu	r2,-12(fp)
   11110:	1880171e 	bne	r3,r2,11170 <OSFlagPend+0x1c4>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
   11114:	e0bfe403 	ldbu	r2,-112(fp)
   11118:	10800058 	cmpnei	r2,r2,1
   1111c:	1000091e 	bne	r2,zero,11144 <OSFlagPend+0x198>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we wanted      */
   11120:	e0bffc17 	ldw	r2,-16(fp)
   11124:	1080020b 	ldhu	r2,8(r2)
   11128:	1007883a 	mov	r3,r2
   1112c:	e0bfe80b 	ldhu	r2,-96(fp)
   11130:	0084303a 	nor	r2,zero,r2
   11134:	1884703a 	and	r2,r3,r2
   11138:	1007883a 	mov	r3,r2
   1113c:	e0bffc17 	ldw	r2,-16(fp)
   11140:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
   11144:	d0a73017 	ldw	r2,-25408(gp)
   11148:	e0ffe80b 	ldhu	r3,-96(fp)
   1114c:	10c00b0d 	sth	r3,44(r2)
   11150:	e0bfe517 	ldw	r2,-108(fp)
   11154:	e0bfe715 	stw	r2,-100(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   11158:	e0bfe717 	ldw	r2,-100(fp)
   1115c:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
   11160:	e0800217 	ldw	r2,8(fp)
   11164:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
   11168:	e0bfe80b 	ldhu	r2,-96(fp)
   1116c:	0000f806 	br	11550 <OSFlagPend+0x5a4>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
   11170:	e13ffd0b 	ldhu	r4,-12(fp)
   11174:	e17ffe03 	ldbu	r5,-8(fp)
   11178:	e0bfff0b 	ldhu	r2,-4(fp)
   1117c:	e0fff704 	addi	r3,fp,-36
   11180:	d8800015 	stw	r2,0(sp)
   11184:	280f883a 	mov	r7,r5
   11188:	200d883a 	mov	r6,r4
   1118c:	180b883a 	mov	r5,r3
   11190:	e13ffc17 	ldw	r4,-16(fp)
   11194:	0011a1c0 	call	11a1c <OS_FlagBlock>
   11198:	e0bfe517 	ldw	r2,-108(fp)
   1119c:	e0bfe915 	stw	r2,-92(fp)
   111a0:	e0bfe917 	ldw	r2,-92(fp)
   111a4:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
   111a8:	00009206 	br	113f4 <OSFlagPend+0x448>

        case OS_FLAG_WAIT_SET_ANY:
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);    /* Extract only the bits we want    */
   111ac:	e0bffc17 	ldw	r2,-16(fp)
   111b0:	10c0020b 	ldhu	r3,8(r2)
   111b4:	e0bffd0b 	ldhu	r2,-12(fp)
   111b8:	1884703a 	and	r2,r3,r2
   111bc:	e0bfe80d 	sth	r2,-96(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag set                      */
   111c0:	e0bfe80b 	ldhu	r2,-96(fp)
   111c4:	10001726 	beq	r2,zero,11224 <OSFlagPend+0x278>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
   111c8:	e0bfe403 	ldbu	r2,-112(fp)
   111cc:	10800058 	cmpnei	r2,r2,1
   111d0:	1000091e 	bne	r2,zero,111f8 <OSFlagPend+0x24c>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we got         */
   111d4:	e0bffc17 	ldw	r2,-16(fp)
   111d8:	1080020b 	ldhu	r2,8(r2)
   111dc:	1007883a 	mov	r3,r2
   111e0:	e0bfe80b 	ldhu	r2,-96(fp)
   111e4:	0084303a 	nor	r2,zero,r2
   111e8:	1884703a 	and	r2,r3,r2
   111ec:	1007883a 	mov	r3,r2
   111f0:	e0bffc17 	ldw	r2,-16(fp)
   111f4:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
   111f8:	d0a73017 	ldw	r2,-25408(gp)
   111fc:	e0ffe80b 	ldhu	r3,-96(fp)
   11200:	10c00b0d 	sth	r3,44(r2)
   11204:	e0bfe517 	ldw	r2,-108(fp)
   11208:	e0bfea15 	stw	r2,-88(fp)
   1120c:	e0bfea17 	ldw	r2,-88(fp)
   11210:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
   11214:	e0800217 	ldw	r2,8(fp)
   11218:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
   1121c:	e0bfe80b 	ldhu	r2,-96(fp)
   11220:	0000cb06 	br	11550 <OSFlagPend+0x5a4>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
   11224:	e13ffd0b 	ldhu	r4,-12(fp)
   11228:	e17ffe03 	ldbu	r5,-8(fp)
   1122c:	e0bfff0b 	ldhu	r2,-4(fp)
   11230:	e0fff704 	addi	r3,fp,-36
   11234:	d8800015 	stw	r2,0(sp)
   11238:	280f883a 	mov	r7,r5
   1123c:	200d883a 	mov	r6,r4
   11240:	180b883a 	mov	r5,r3
   11244:	e13ffc17 	ldw	r4,-16(fp)
   11248:	0011a1c0 	call	11a1c <OS_FlagBlock>
   1124c:	e0bfe517 	ldw	r2,-108(fp)
   11250:	e0bfeb15 	stw	r2,-84(fp)
   11254:	e0bfeb17 	ldw	r2,-84(fp)
   11258:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
   1125c:	00006506 	br	113f4 <OSFlagPend+0x448>

#if OS_FLAG_WAIT_CLR_EN > 0
        case OS_FLAG_WAIT_CLR_ALL:                         /* See if all required flags are cleared    */
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags);  /* Extract only the bits we want     */
   11260:	e0bffc17 	ldw	r2,-16(fp)
   11264:	1080020b 	ldhu	r2,8(r2)
   11268:	0084303a 	nor	r2,zero,r2
   1126c:	1007883a 	mov	r3,r2
   11270:	e0bffd0b 	ldhu	r2,-12(fp)
   11274:	1884703a 	and	r2,r3,r2
   11278:	e0bfe80d 	sth	r2,-96(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
   1127c:	e0ffe80b 	ldhu	r3,-96(fp)
   11280:	e0bffd0b 	ldhu	r2,-12(fp)
   11284:	1880151e 	bne	r3,r2,112dc <OSFlagPend+0x330>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
   11288:	e0bfe403 	ldbu	r2,-112(fp)
   1128c:	10800058 	cmpnei	r2,r2,1
   11290:	1000071e 	bne	r2,zero,112b0 <OSFlagPend+0x304>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we wanted        */
   11294:	e0bffc17 	ldw	r2,-16(fp)
   11298:	10c0020b 	ldhu	r3,8(r2)
   1129c:	e0bfe80b 	ldhu	r2,-96(fp)
   112a0:	1884b03a 	or	r2,r3,r2
   112a4:	1007883a 	mov	r3,r2
   112a8:	e0bffc17 	ldw	r2,-16(fp)
   112ac:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
   112b0:	d0a73017 	ldw	r2,-25408(gp)
   112b4:	e0ffe80b 	ldhu	r3,-96(fp)
   112b8:	10c00b0d 	sth	r3,44(r2)
   112bc:	e0bfe517 	ldw	r2,-108(fp)
   112c0:	e0bfec15 	stw	r2,-80(fp)
   112c4:	e0bfec17 	ldw	r2,-80(fp)
   112c8:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
   112cc:	e0800217 	ldw	r2,8(fp)
   112d0:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
   112d4:	e0bfe80b 	ldhu	r2,-96(fp)
   112d8:	00009d06 	br	11550 <OSFlagPend+0x5a4>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
   112dc:	e13ffd0b 	ldhu	r4,-12(fp)
   112e0:	e17ffe03 	ldbu	r5,-8(fp)
   112e4:	e0bfff0b 	ldhu	r2,-4(fp)
   112e8:	e0fff704 	addi	r3,fp,-36
   112ec:	d8800015 	stw	r2,0(sp)
   112f0:	280f883a 	mov	r7,r5
   112f4:	200d883a 	mov	r6,r4
   112f8:	180b883a 	mov	r5,r3
   112fc:	e13ffc17 	ldw	r4,-16(fp)
   11300:	0011a1c0 	call	11a1c <OS_FlagBlock>
   11304:	e0bfe517 	ldw	r2,-108(fp)
   11308:	e0bfed15 	stw	r2,-76(fp)
   1130c:	e0bfed17 	ldw	r2,-76(fp)
   11310:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
   11314:	00003706 	br	113f4 <OSFlagPend+0x448>

        case OS_FLAG_WAIT_CLR_ANY:
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags); /* Extract only the bits we want      */
   11318:	e0bffc17 	ldw	r2,-16(fp)
   1131c:	1080020b 	ldhu	r2,8(r2)
   11320:	0084303a 	nor	r2,zero,r2
   11324:	1007883a 	mov	r3,r2
   11328:	e0bffd0b 	ldhu	r2,-12(fp)
   1132c:	1884703a 	and	r2,r3,r2
   11330:	e0bfe80d 	sth	r2,-96(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag cleared                  */
   11334:	e0bfe80b 	ldhu	r2,-96(fp)
   11338:	10001526 	beq	r2,zero,11390 <OSFlagPend+0x3e4>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
   1133c:	e0bfe403 	ldbu	r2,-112(fp)
   11340:	10800058 	cmpnei	r2,r2,1
   11344:	1000071e 	bne	r2,zero,11364 <OSFlagPend+0x3b8>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we got           */
   11348:	e0bffc17 	ldw	r2,-16(fp)
   1134c:	10c0020b 	ldhu	r3,8(r2)
   11350:	e0bfe80b 	ldhu	r2,-96(fp)
   11354:	1884b03a 	or	r2,r3,r2
   11358:	1007883a 	mov	r3,r2
   1135c:	e0bffc17 	ldw	r2,-16(fp)
   11360:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
   11364:	d0a73017 	ldw	r2,-25408(gp)
   11368:	e0ffe80b 	ldhu	r3,-96(fp)
   1136c:	10c00b0d 	sth	r3,44(r2)
   11370:	e0bfe517 	ldw	r2,-108(fp)
   11374:	e0bfee15 	stw	r2,-72(fp)
   11378:	e0bfee17 	ldw	r2,-72(fp)
   1137c:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
   11380:	e0800217 	ldw	r2,8(fp)
   11384:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
   11388:	e0bfe80b 	ldhu	r2,-96(fp)
   1138c:	00007006 	br	11550 <OSFlagPend+0x5a4>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
   11390:	e13ffd0b 	ldhu	r4,-12(fp)
   11394:	e17ffe03 	ldbu	r5,-8(fp)
   11398:	e0bfff0b 	ldhu	r2,-4(fp)
   1139c:	e0fff704 	addi	r3,fp,-36
   113a0:	d8800015 	stw	r2,0(sp)
   113a4:	280f883a 	mov	r7,r5
   113a8:	200d883a 	mov	r6,r4
   113ac:	180b883a 	mov	r5,r3
   113b0:	e13ffc17 	ldw	r4,-16(fp)
   113b4:	0011a1c0 	call	11a1c <OS_FlagBlock>
   113b8:	e0bfe517 	ldw	r2,-108(fp)
   113bc:	e0bfef15 	stw	r2,-68(fp)
   113c0:	e0bfef17 	ldw	r2,-68(fp)
   113c4:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
   113c8:	00000a06 	br	113f4 <OSFlagPend+0x448>
   113cc:	e0bfe517 	ldw	r2,-108(fp)
   113d0:	e0bff015 	stw	r2,-64(fp)
   113d4:	e0bff017 	ldw	r2,-64(fp)
   113d8:	1001703a 	wrctl	status,r2
#endif

        default:
             OS_EXIT_CRITICAL();
             flags_rdy = (OS_FLAGS)0;
   113dc:	e03fe80d 	sth	zero,-96(fp)
             *perr      = OS_ERR_FLAG_WAIT_TYPE;
   113e0:	e0800217 	ldw	r2,8(fp)
   113e4:	00c01bc4 	movi	r3,111
   113e8:	10c00005 	stb	r3,0(r2)
             return (flags_rdy);
   113ec:	e0bfe80b 	ldhu	r2,-96(fp)
   113f0:	00005706 	br	11550 <OSFlagPend+0x5a4>
    }
/*$PAGE*/
    OS_Sched();                                            /* Find next HPT ready to run               */
   113f4:	000fe7c0 	call	fe7c <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   113f8:	0005303a 	rdctl	r2,status
   113fc:	e0bff115 	stw	r2,-60(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   11400:	e0fff117 	ldw	r3,-60(fp)
   11404:	00bfff84 	movi	r2,-2
   11408:	1884703a 	and	r2,r3,r2
   1140c:	1001703a 	wrctl	status,r2
  
  return context;
   11410:	e0bff117 	ldw	r2,-60(fp)
    OS_ENTER_CRITICAL();
   11414:	e0bfe515 	stw	r2,-108(fp)
    if (OSTCBCur->OSTCBStatPend != OS_STAT_PEND_OK) {      /* Have we timed-out or aborted?            */
   11418:	d0a73017 	ldw	r2,-25408(gp)
   1141c:	10800c43 	ldbu	r2,49(r2)
   11420:	10803fcc 	andi	r2,r2,255
   11424:	10001c26 	beq	r2,zero,11498 <OSFlagPend+0x4ec>
        pend_stat                = OSTCBCur->OSTCBStatPend;
   11428:	d0a73017 	ldw	r2,-25408(gp)
   1142c:	10800c43 	ldbu	r2,49(r2)
   11430:	e0bff305 	stb	r2,-52(fp)
        OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
   11434:	d0a73017 	ldw	r2,-25408(gp)
   11438:	10000c45 	stb	zero,49(r2)
        OS_FlagUnlink(&node);
   1143c:	e0bff704 	addi	r2,fp,-36
   11440:	1009883a 	mov	r4,r2
   11444:	0011d500 	call	11d50 <OS_FlagUnlink>
        OSTCBCur->OSTCBStat      = OS_STAT_RDY;            /* Yes, make task ready-to-run              */
   11448:	d0a73017 	ldw	r2,-25408(gp)
   1144c:	10000c05 	stb	zero,48(r2)
   11450:	e0bfe517 	ldw	r2,-108(fp)
   11454:	e0bff215 	stw	r2,-56(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   11458:	e0bff217 	ldw	r2,-56(fp)
   1145c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        flags_rdy                = (OS_FLAGS)0;
   11460:	e03fe80d 	sth	zero,-96(fp)
        switch (pend_stat) {
   11464:	e0bff303 	ldbu	r2,-52(fp)
   11468:	108000a0 	cmpeqi	r2,r2,2
   1146c:	10000426 	beq	r2,zero,11480 <OSFlagPend+0x4d4>
            case OS_STAT_PEND_ABORT:
                 *perr = OS_ERR_PEND_ABORT;                 /* Indicate that we aborted   waiting       */
   11470:	e0800217 	ldw	r2,8(fp)
   11474:	00c00384 	movi	r3,14
   11478:	10c00005 	stb	r3,0(r2)
                 break;
   1147c:	00000406 	br	11490 <OSFlagPend+0x4e4>

            case OS_STAT_PEND_TO:
            default:
                 *perr = OS_ERR_TIMEOUT;                    /* Indicate that we timed-out waiting       */
   11480:	e0800217 	ldw	r2,8(fp)
   11484:	00c00284 	movi	r3,10
   11488:	10c00005 	stb	r3,0(r2)
                 break;
   1148c:	0001883a 	nop
        }
        return (flags_rdy);
   11490:	e0bfe80b 	ldhu	r2,-96(fp)
   11494:	00002e06 	br	11550 <OSFlagPend+0x5a4>
    }
    flags_rdy = OSTCBCur->OSTCBFlagsRdy;
   11498:	d0a73017 	ldw	r2,-25408(gp)
   1149c:	10800b0b 	ldhu	r2,44(r2)
   114a0:	e0bfe80d 	sth	r2,-96(fp)
    if (consume == OS_TRUE) {                              /* See if we need to consume the flags      */
   114a4:	e0bfe403 	ldbu	r2,-112(fp)
   114a8:	10800058 	cmpnei	r2,r2,1
   114ac:	1000211e 	bne	r2,zero,11534 <OSFlagPend+0x588>
        switch (wait_type) {
   114b0:	e0bffe03 	ldbu	r2,-8(fp)
   114b4:	10001616 	blt	r2,zero,11510 <OSFlagPend+0x564>
   114b8:	10c00090 	cmplti	r3,r2,2
   114bc:	18000c1e 	bne	r3,zero,114f0 <OSFlagPend+0x544>
   114c0:	10800108 	cmpgei	r2,r2,4
   114c4:	1000121e 	bne	r2,zero,11510 <OSFlagPend+0x564>
            case OS_FLAG_WAIT_SET_ALL:
            case OS_FLAG_WAIT_SET_ANY:                     /* Clear ONLY the flags we got              */
                 pgrp->OSFlagFlags &= ~flags_rdy;
   114c8:	e0bffc17 	ldw	r2,-16(fp)
   114cc:	1080020b 	ldhu	r2,8(r2)
   114d0:	1007883a 	mov	r3,r2
   114d4:	e0bfe80b 	ldhu	r2,-96(fp)
   114d8:	0084303a 	nor	r2,zero,r2
   114dc:	1884703a 	and	r2,r3,r2
   114e0:	1007883a 	mov	r3,r2
   114e4:	e0bffc17 	ldw	r2,-16(fp)
   114e8:	10c0020d 	sth	r3,8(r2)
                 break;
   114ec:	00001106 	br	11534 <OSFlagPend+0x588>

#if OS_FLAG_WAIT_CLR_EN > 0
            case OS_FLAG_WAIT_CLR_ALL:
            case OS_FLAG_WAIT_CLR_ANY:                     /* Set   ONLY the flags we got              */
                 pgrp->OSFlagFlags |=  flags_rdy;
   114f0:	e0bffc17 	ldw	r2,-16(fp)
   114f4:	10c0020b 	ldhu	r3,8(r2)
   114f8:	e0bfe80b 	ldhu	r2,-96(fp)
   114fc:	1884b03a 	or	r2,r3,r2
   11500:	1007883a 	mov	r3,r2
   11504:	e0bffc17 	ldw	r2,-16(fp)
   11508:	10c0020d 	sth	r3,8(r2)
                 break;
   1150c:	00000906 	br	11534 <OSFlagPend+0x588>
   11510:	e0bfe517 	ldw	r2,-108(fp)
   11514:	e0bff415 	stw	r2,-48(fp)
   11518:	e0bff417 	ldw	r2,-48(fp)
   1151c:	1001703a 	wrctl	status,r2
#endif
            default:
                 OS_EXIT_CRITICAL();
                 *perr = OS_ERR_FLAG_WAIT_TYPE;
   11520:	e0800217 	ldw	r2,8(fp)
   11524:	00c01bc4 	movi	r3,111
   11528:	10c00005 	stb	r3,0(r2)
                 return ((OS_FLAGS)0);
   1152c:	0005883a 	mov	r2,zero
   11530:	00000706 	br	11550 <OSFlagPend+0x5a4>
   11534:	e0bfe517 	ldw	r2,-108(fp)
   11538:	e0bff515 	stw	r2,-44(fp)
   1153c:	e0bff517 	ldw	r2,-44(fp)
   11540:	1001703a 	wrctl	status,r2
        }
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;                                   /* Event(s) must have occurred              */
   11544:	e0800217 	ldw	r2,8(fp)
   11548:	10000005 	stb	zero,0(r2)
    return (flags_rdy);
   1154c:	e0bfe80b 	ldhu	r2,-96(fp)
}
   11550:	e037883a 	mov	sp,fp
   11554:	dfc00117 	ldw	ra,4(sp)
   11558:	df000017 	ldw	fp,0(sp)
   1155c:	dec00204 	addi	sp,sp,8
   11560:	f800283a 	ret

00011564 <OSFlagPendGetFlagsRdy>:
* Called from: Task ONLY
*********************************************************************************************************
*/

OS_FLAGS  OSFlagPendGetFlagsRdy (void)
{
   11564:	defffb04 	addi	sp,sp,-20
   11568:	df000415 	stw	fp,16(sp)
   1156c:	df000404 	addi	fp,sp,16
    OS_FLAGS      flags;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
   11570:	e03ffc15 	stw	zero,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   11574:	0005303a 	rdctl	r2,status
   11578:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1157c:	e0fffe17 	ldw	r3,-8(fp)
   11580:	00bfff84 	movi	r2,-2
   11584:	1884703a 	and	r2,r3,r2
   11588:	1001703a 	wrctl	status,r2
  
  return context;
   1158c:	e0bffe17 	ldw	r2,-8(fp)
#endif



    OS_ENTER_CRITICAL();
   11590:	e0bffc15 	stw	r2,-16(fp)
    flags = OSTCBCur->OSTCBFlagsRdy;
   11594:	d0a73017 	ldw	r2,-25408(gp)
   11598:	10800b0b 	ldhu	r2,44(r2)
   1159c:	e0bffd0d 	sth	r2,-12(fp)
   115a0:	e0bffc17 	ldw	r2,-16(fp)
   115a4:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   115a8:	e0bfff17 	ldw	r2,-4(fp)
   115ac:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (flags);
   115b0:	e0bffd0b 	ldhu	r2,-12(fp)
}
   115b4:	e037883a 	mov	sp,fp
   115b8:	df000017 	ldw	fp,0(sp)
   115bc:	dec00104 	addi	sp,sp,4
   115c0:	f800283a 	ret

000115c4 <OSFlagPost>:
*              2) The amount of time interrupts are DISABLED depends on the number of tasks waiting on
*                 the event flag group.
*********************************************************************************************************
*/
OS_FLAGS  OSFlagPost (OS_FLAG_GRP *pgrp, OS_FLAGS flags, INT8U opt, INT8U *perr)
{
   115c4:	deffef04 	addi	sp,sp,-68
   115c8:	dfc01015 	stw	ra,64(sp)
   115cc:	df000f15 	stw	fp,60(sp)
   115d0:	df000f04 	addi	fp,sp,60
   115d4:	e13ffc15 	stw	r4,-16(fp)
   115d8:	2807883a 	mov	r3,r5
   115dc:	3005883a 	mov	r2,r6
   115e0:	e1ffff15 	stw	r7,-4(fp)
   115e4:	e0fffd0d 	sth	r3,-12(fp)
   115e8:	e0bffe05 	stb	r2,-8(fp)
    BOOLEAN       sched;
    OS_FLAGS      flags_cur;
    OS_FLAGS      flags_rdy;
    BOOLEAN       rdy;
#if OS_CRITICAL_METHOD == 3                          /* Allocate storage for CPU status register       */
    OS_CPU_SR     cpu_sr = 0;
   115ec:	e03ff315 	stw	zero,-52(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                        /* Validate 'perr'                                */
   115f0:	e0bfff17 	ldw	r2,-4(fp)
   115f4:	1000021e 	bne	r2,zero,11600 <OSFlagPost+0x3c>
        return ((OS_FLAGS)0);
   115f8:	0005883a 	mov	r2,zero
   115fc:	0000d106 	br	11944 <OSFlagPost+0x380>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                  /* Validate 'pgrp'                                */
   11600:	e0bffc17 	ldw	r2,-16(fp)
   11604:	1000051e 	bne	r2,zero,1161c <OSFlagPost+0x58>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
   11608:	e0bfff17 	ldw	r2,-4(fp)
   1160c:	00c01b84 	movi	r3,110
   11610:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
   11614:	0005883a 	mov	r2,zero
   11618:	0000ca06 	br	11944 <OSFlagPost+0x380>
    }
#endif
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {    /* Make sure we are pointing to an event flag grp */
   1161c:	e0bffc17 	ldw	r2,-16(fp)
   11620:	10800003 	ldbu	r2,0(r2)
   11624:	10803fcc 	andi	r2,r2,255
   11628:	10800160 	cmpeqi	r2,r2,5
   1162c:	1000051e 	bne	r2,zero,11644 <OSFlagPost+0x80>
        *perr = OS_ERR_EVENT_TYPE;
   11630:	e0bfff17 	ldw	r2,-4(fp)
   11634:	00c00044 	movi	r3,1
   11638:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
   1163c:	0005883a 	mov	r2,zero
   11640:	0000c006 	br	11944 <OSFlagPost+0x380>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   11644:	0005303a 	rdctl	r2,status
   11648:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1164c:	e0fffb17 	ldw	r3,-20(fp)
   11650:	00bfff84 	movi	r2,-2
   11654:	1884703a 	and	r2,r3,r2
   11658:	1001703a 	wrctl	status,r2
  
  return context;
   1165c:	e0bffb17 	ldw	r2,-20(fp)
    }
/*$PAGE*/
    OS_ENTER_CRITICAL();
   11660:	e0bff315 	stw	r2,-52(fp)
    switch (opt) {
   11664:	e0bffe03 	ldbu	r2,-8(fp)
   11668:	10000326 	beq	r2,zero,11678 <OSFlagPost+0xb4>
   1166c:	10800060 	cmpeqi	r2,r2,1
   11670:	10000b1e 	bne	r2,zero,116a0 <OSFlagPost+0xdc>
   11674:	00001206 	br	116c0 <OSFlagPost+0xfc>
        case OS_FLAG_CLR:
             pgrp->OSFlagFlags &= ~flags;            /* Clear the flags specified in the group         */
   11678:	e0bffc17 	ldw	r2,-16(fp)
   1167c:	1080020b 	ldhu	r2,8(r2)
   11680:	1007883a 	mov	r3,r2
   11684:	e0bffd0b 	ldhu	r2,-12(fp)
   11688:	0084303a 	nor	r2,zero,r2
   1168c:	1884703a 	and	r2,r3,r2
   11690:	1007883a 	mov	r3,r2
   11694:	e0bffc17 	ldw	r2,-16(fp)
   11698:	10c0020d 	sth	r3,8(r2)
             break;
   1169c:	00001106 	br	116e4 <OSFlagPost+0x120>

        case OS_FLAG_SET:
             pgrp->OSFlagFlags |=  flags;            /* Set   the flags specified in the group         */
   116a0:	e0bffc17 	ldw	r2,-16(fp)
   116a4:	10c0020b 	ldhu	r3,8(r2)
   116a8:	e0bffd0b 	ldhu	r2,-12(fp)
   116ac:	1884b03a 	or	r2,r3,r2
   116b0:	1007883a 	mov	r3,r2
   116b4:	e0bffc17 	ldw	r2,-16(fp)
   116b8:	10c0020d 	sth	r3,8(r2)
             break;
   116bc:	00000906 	br	116e4 <OSFlagPost+0x120>
   116c0:	e0bff317 	ldw	r2,-52(fp)
   116c4:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   116c8:	e0bff417 	ldw	r2,-48(fp)
   116cc:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();                     /* INVALID option                                 */
             *perr = OS_ERR_FLAG_INVALID_OPT;
   116d0:	e0bfff17 	ldw	r2,-4(fp)
   116d4:	00c01c44 	movi	r3,113
   116d8:	10c00005 	stb	r3,0(r2)
             return ((OS_FLAGS)0);
   116dc:	0005883a 	mov	r2,zero
   116e0:	00009806 	br	11944 <OSFlagPost+0x380>
    }
    sched = OS_FALSE;                                /* Indicate that we don't need rescheduling       */
   116e4:	e03ff205 	stb	zero,-56(fp)
    pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
   116e8:	e0bffc17 	ldw	r2,-16(fp)
   116ec:	10800117 	ldw	r2,4(r2)
   116f0:	e0bff115 	stw	r2,-60(fp)
    while (pnode != (OS_FLAG_NODE *)0) {             /* Go through all tasks waiting on event flag(s)  */
   116f4:	00007706 	br	118d4 <OSFlagPost+0x310>
        switch (pnode->OSFlagNodeWaitType) {
   116f8:	e0bff117 	ldw	r2,-60(fp)
   116fc:	10800483 	ldbu	r2,18(r2)
   11700:	10803fcc 	andi	r2,r2,255
   11704:	10c00060 	cmpeqi	r3,r2,1
   11708:	18004a1e 	bne	r3,zero,11834 <OSFlagPost+0x270>
   1170c:	10c00088 	cmpgei	r3,r2,2
   11710:	1800021e 	bne	r3,zero,1171c <OSFlagPost+0x158>
   11714:	10002f26 	beq	r2,zero,117d4 <OSFlagPost+0x210>
   11718:	00005b06 	br	11888 <OSFlagPost+0x2c4>
   1171c:	10c000a0 	cmpeqi	r3,r2,2
   11720:	1800031e 	bne	r3,zero,11730 <OSFlagPost+0x16c>
   11724:	108000e0 	cmpeqi	r2,r2,3
   11728:	1000171e 	bne	r2,zero,11788 <OSFlagPost+0x1c4>
   1172c:	00005606 	br	11888 <OSFlagPost+0x2c4>
            case OS_FLAG_WAIT_SET_ALL:               /* See if all req. flags are set for current node */
                 flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
   11730:	e0bffc17 	ldw	r2,-16(fp)
   11734:	10c0020b 	ldhu	r3,8(r2)
   11738:	e0bff117 	ldw	r2,-60(fp)
   1173c:	1080040b 	ldhu	r2,16(r2)
   11740:	1884703a 	and	r2,r3,r2
   11744:	e0bff60d 	sth	r2,-40(fp)
                 if (flags_rdy == pnode->OSFlagNodeFlags) {
   11748:	e0bff117 	ldw	r2,-60(fp)
   1174c:	1080040b 	ldhu	r2,16(r2)
   11750:	10ffffcc 	andi	r3,r2,65535
   11754:	e0bff60b 	ldhu	r2,-40(fp)
   11758:	1880541e 	bne	r3,r2,118ac <OSFlagPost+0x2e8>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
   1175c:	e0bff60b 	ldhu	r2,-40(fp)
   11760:	100b883a 	mov	r5,r2
   11764:	e13ff117 	ldw	r4,-60(fp)
   11768:	0011c5c0 	call	11c5c <OS_FlagTaskRdy>
   1176c:	e0bff685 	stb	r2,-38(fp)
                     if (rdy == OS_TRUE) {
   11770:	e0bff683 	ldbu	r2,-38(fp)
   11774:	10800058 	cmpnei	r2,r2,1
   11778:	10004c1e 	bne	r2,zero,118ac <OSFlagPost+0x2e8>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
   1177c:	00800044 	movi	r2,1
   11780:	e0bff205 	stb	r2,-56(fp)
                     }
                 }
                 break;
   11784:	00004906 	br	118ac <OSFlagPost+0x2e8>

            case OS_FLAG_WAIT_SET_ANY:               /* See if any flag set                            */
                 flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
   11788:	e0bffc17 	ldw	r2,-16(fp)
   1178c:	10c0020b 	ldhu	r3,8(r2)
   11790:	e0bff117 	ldw	r2,-60(fp)
   11794:	1080040b 	ldhu	r2,16(r2)
   11798:	1884703a 	and	r2,r3,r2
   1179c:	e0bff60d 	sth	r2,-40(fp)
                 if (flags_rdy != (OS_FLAGS)0) {
   117a0:	e0bff60b 	ldhu	r2,-40(fp)
   117a4:	10004326 	beq	r2,zero,118b4 <OSFlagPost+0x2f0>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
   117a8:	e0bff60b 	ldhu	r2,-40(fp)
   117ac:	100b883a 	mov	r5,r2
   117b0:	e13ff117 	ldw	r4,-60(fp)
   117b4:	0011c5c0 	call	11c5c <OS_FlagTaskRdy>
   117b8:	e0bff685 	stb	r2,-38(fp)
                     if (rdy == OS_TRUE) {
   117bc:	e0bff683 	ldbu	r2,-38(fp)
   117c0:	10800058 	cmpnei	r2,r2,1
   117c4:	10003b1e 	bne	r2,zero,118b4 <OSFlagPost+0x2f0>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
   117c8:	00800044 	movi	r2,1
   117cc:	e0bff205 	stb	r2,-56(fp)
                     }
                 }
                 break;
   117d0:	00003806 	br	118b4 <OSFlagPost+0x2f0>

#if OS_FLAG_WAIT_CLR_EN > 0
            case OS_FLAG_WAIT_CLR_ALL:               /* See if all req. flags are set for current node */
                 flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
   117d4:	e0bffc17 	ldw	r2,-16(fp)
   117d8:	1080020b 	ldhu	r2,8(r2)
   117dc:	0084303a 	nor	r2,zero,r2
   117e0:	1007883a 	mov	r3,r2
   117e4:	e0bff117 	ldw	r2,-60(fp)
   117e8:	1080040b 	ldhu	r2,16(r2)
   117ec:	1884703a 	and	r2,r3,r2
   117f0:	e0bff60d 	sth	r2,-40(fp)
                 if (flags_rdy == pnode->OSFlagNodeFlags) {
   117f4:	e0bff117 	ldw	r2,-60(fp)
   117f8:	1080040b 	ldhu	r2,16(r2)
   117fc:	10ffffcc 	andi	r3,r2,65535
   11800:	e0bff60b 	ldhu	r2,-40(fp)
   11804:	18802d1e 	bne	r3,r2,118bc <OSFlagPost+0x2f8>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
   11808:	e0bff60b 	ldhu	r2,-40(fp)
   1180c:	100b883a 	mov	r5,r2
   11810:	e13ff117 	ldw	r4,-60(fp)
   11814:	0011c5c0 	call	11c5c <OS_FlagTaskRdy>
   11818:	e0bff685 	stb	r2,-38(fp)
                     if (rdy == OS_TRUE) {
   1181c:	e0bff683 	ldbu	r2,-38(fp)
   11820:	10800058 	cmpnei	r2,r2,1
   11824:	1000251e 	bne	r2,zero,118bc <OSFlagPost+0x2f8>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
   11828:	00800044 	movi	r2,1
   1182c:	e0bff205 	stb	r2,-56(fp)
                     }
                 }
                 break;
   11830:	00002206 	br	118bc <OSFlagPost+0x2f8>

            case OS_FLAG_WAIT_CLR_ANY:               /* See if any flag set                            */
                 flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
   11834:	e0bffc17 	ldw	r2,-16(fp)
   11838:	1080020b 	ldhu	r2,8(r2)
   1183c:	0084303a 	nor	r2,zero,r2
   11840:	1007883a 	mov	r3,r2
   11844:	e0bff117 	ldw	r2,-60(fp)
   11848:	1080040b 	ldhu	r2,16(r2)
   1184c:	1884703a 	and	r2,r3,r2
   11850:	e0bff60d 	sth	r2,-40(fp)
                 if (flags_rdy != (OS_FLAGS)0) {
   11854:	e0bff60b 	ldhu	r2,-40(fp)
   11858:	10001a26 	beq	r2,zero,118c4 <OSFlagPost+0x300>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
   1185c:	e0bff60b 	ldhu	r2,-40(fp)
   11860:	100b883a 	mov	r5,r2
   11864:	e13ff117 	ldw	r4,-60(fp)
   11868:	0011c5c0 	call	11c5c <OS_FlagTaskRdy>
   1186c:	e0bff685 	stb	r2,-38(fp)
                     if (rdy == OS_TRUE) {
   11870:	e0bff683 	ldbu	r2,-38(fp)
   11874:	10800058 	cmpnei	r2,r2,1
   11878:	1000121e 	bne	r2,zero,118c4 <OSFlagPost+0x300>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
   1187c:	00800044 	movi	r2,1
   11880:	e0bff205 	stb	r2,-56(fp)
                     }
                 }
                 break;
   11884:	00000f06 	br	118c4 <OSFlagPost+0x300>
   11888:	e0bff317 	ldw	r2,-52(fp)
   1188c:	e0bff515 	stw	r2,-44(fp)
   11890:	e0bff517 	ldw	r2,-44(fp)
   11894:	1001703a 	wrctl	status,r2
#endif
            default:
                 OS_EXIT_CRITICAL();
                 *perr = OS_ERR_FLAG_WAIT_TYPE;
   11898:	e0bfff17 	ldw	r2,-4(fp)
   1189c:	00c01bc4 	movi	r3,111
   118a0:	10c00005 	stb	r3,0(r2)
                 return ((OS_FLAGS)0);
   118a4:	0005883a 	mov	r2,zero
   118a8:	00002606 	br	11944 <OSFlagPost+0x380>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
                     if (rdy == OS_TRUE) {
                         sched = OS_TRUE;                     /* When done we will reschedule          */
                     }
                 }
                 break;
   118ac:	0001883a 	nop
   118b0:	00000506 	br	118c8 <OSFlagPost+0x304>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
                     if (rdy == OS_TRUE) {
                         sched = OS_TRUE;                     /* When done we will reschedule          */
                     }
                 }
                 break;
   118b4:	0001883a 	nop
   118b8:	00000306 	br	118c8 <OSFlagPost+0x304>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
                     if (rdy == OS_TRUE) {
                         sched = OS_TRUE;                     /* When done we will reschedule          */
                     }
                 }
                 break;
   118bc:	0001883a 	nop
   118c0:	00000106 	br	118c8 <OSFlagPost+0x304>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
                     if (rdy == OS_TRUE) {
                         sched = OS_TRUE;                     /* When done we will reschedule          */
                     }
                 }
                 break;
   118c4:	0001883a 	nop
            default:
                 OS_EXIT_CRITICAL();
                 *perr = OS_ERR_FLAG_WAIT_TYPE;
                 return ((OS_FLAGS)0);
        }
        pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext; /* Point to next task waiting for event flag(s) */
   118c8:	e0bff117 	ldw	r2,-60(fp)
   118cc:	10800017 	ldw	r2,0(r2)
   118d0:	e0bff115 	stw	r2,-60(fp)
             *perr = OS_ERR_FLAG_INVALID_OPT;
             return ((OS_FLAGS)0);
    }
    sched = OS_FALSE;                                /* Indicate that we don't need rescheduling       */
    pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
    while (pnode != (OS_FLAG_NODE *)0) {             /* Go through all tasks waiting on event flag(s)  */
   118d4:	e0bff117 	ldw	r2,-60(fp)
   118d8:	103f871e 	bne	r2,zero,116f8 <__alt_data_end+0xfffe16f8>
   118dc:	e0bff317 	ldw	r2,-52(fp)
   118e0:	e0bff715 	stw	r2,-36(fp)
   118e4:	e0bff717 	ldw	r2,-36(fp)
   118e8:	1001703a 	wrctl	status,r2
                 return ((OS_FLAGS)0);
        }
        pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext; /* Point to next task waiting for event flag(s) */
    }
    OS_EXIT_CRITICAL();
    if (sched == OS_TRUE) {
   118ec:	e0bff203 	ldbu	r2,-56(fp)
   118f0:	10800058 	cmpnei	r2,r2,1
   118f4:	1000011e 	bne	r2,zero,118fc <OSFlagPost+0x338>
        OS_Sched();
   118f8:	000fe7c0 	call	fe7c <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   118fc:	0005303a 	rdctl	r2,status
   11900:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   11904:	e0fffa17 	ldw	r3,-24(fp)
   11908:	00bfff84 	movi	r2,-2
   1190c:	1884703a 	and	r2,r3,r2
   11910:	1001703a 	wrctl	status,r2
  
  return context;
   11914:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
   11918:	e0bff315 	stw	r2,-52(fp)
    flags_cur = pgrp->OSFlagFlags;
   1191c:	e0bffc17 	ldw	r2,-16(fp)
   11920:	1080020b 	ldhu	r2,8(r2)
   11924:	e0bff90d 	sth	r2,-28(fp)
   11928:	e0bff317 	ldw	r2,-52(fp)
   1192c:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   11930:	e0bff817 	ldw	r2,-32(fp)
   11934:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr     = OS_ERR_NONE;
   11938:	e0bfff17 	ldw	r2,-4(fp)
   1193c:	10000005 	stb	zero,0(r2)
    return (flags_cur);
   11940:	e0bff90b 	ldhu	r2,-28(fp)
}
   11944:	e037883a 	mov	sp,fp
   11948:	dfc00117 	ldw	ra,4(sp)
   1194c:	df000017 	ldw	fp,0(sp)
   11950:	dec00204 	addi	sp,sp,8
   11954:	f800283a 	ret

00011958 <OSFlagQuery>:
*********************************************************************************************************
*/

#if OS_FLAG_QUERY_EN > 0
OS_FLAGS  OSFlagQuery (OS_FLAG_GRP *pgrp, INT8U *perr)
{
   11958:	defff904 	addi	sp,sp,-28
   1195c:	df000615 	stw	fp,24(sp)
   11960:	df000604 	addi	fp,sp,24
   11964:	e13ffe15 	stw	r4,-8(fp)
   11968:	e17fff15 	stw	r5,-4(fp)
    OS_FLAGS   flags;
#if OS_CRITICAL_METHOD == 3                       /* Allocate storage for CPU status register          */
    OS_CPU_SR  cpu_sr = 0;
   1196c:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                     /* Validate 'perr'                                   */
   11970:	e0bfff17 	ldw	r2,-4(fp)
   11974:	1000021e 	bne	r2,zero,11980 <OSFlagQuery+0x28>
        return ((OS_FLAGS)0);
   11978:	0005883a 	mov	r2,zero
   1197c:	00002306 	br	11a0c <OSFlagQuery+0xb4>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {               /* Validate 'pgrp'                                   */
   11980:	e0bffe17 	ldw	r2,-8(fp)
   11984:	1000051e 	bne	r2,zero,1199c <OSFlagQuery+0x44>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
   11988:	e0bfff17 	ldw	r2,-4(fp)
   1198c:	00c01b84 	movi	r3,110
   11990:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
   11994:	0005883a 	mov	r2,zero
   11998:	00001c06 	br	11a0c <OSFlagQuery+0xb4>
    }
#endif
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) { /* Validate event block type                         */
   1199c:	e0bffe17 	ldw	r2,-8(fp)
   119a0:	10800003 	ldbu	r2,0(r2)
   119a4:	10803fcc 	andi	r2,r2,255
   119a8:	10800160 	cmpeqi	r2,r2,5
   119ac:	1000051e 	bne	r2,zero,119c4 <OSFlagQuery+0x6c>
        *perr = OS_ERR_EVENT_TYPE;
   119b0:	e0bfff17 	ldw	r2,-4(fp)
   119b4:	00c00044 	movi	r3,1
   119b8:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
   119bc:	0005883a 	mov	r2,zero
   119c0:	00001206 	br	11a0c <OSFlagQuery+0xb4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   119c4:	0005303a 	rdctl	r2,status
   119c8:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   119cc:	e0fffc17 	ldw	r3,-16(fp)
   119d0:	00bfff84 	movi	r2,-2
   119d4:	1884703a 	and	r2,r3,r2
   119d8:	1001703a 	wrctl	status,r2
  
  return context;
   119dc:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
   119e0:	e0bffa15 	stw	r2,-24(fp)
    flags = pgrp->OSFlagFlags;
   119e4:	e0bffe17 	ldw	r2,-8(fp)
   119e8:	1080020b 	ldhu	r2,8(r2)
   119ec:	e0bffb0d 	sth	r2,-20(fp)
   119f0:	e0bffa17 	ldw	r2,-24(fp)
   119f4:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   119f8:	e0bffd17 	ldw	r2,-12(fp)
   119fc:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   11a00:	e0bfff17 	ldw	r2,-4(fp)
   11a04:	10000005 	stb	zero,0(r2)
    return (flags);                               /* Return the current value of the event flags       */
   11a08:	e0bffb0b 	ldhu	r2,-20(fp)
}
   11a0c:	e037883a 	mov	sp,fp
   11a10:	df000017 	ldw	fp,0(sp)
   11a14:	dec00104 	addi	sp,sp,4
   11a18:	f800283a 	ret

00011a1c <OS_FlagBlock>:
* Note(s)    : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

static  void  OS_FlagBlock (OS_FLAG_GRP *pgrp, OS_FLAG_NODE *pnode, OS_FLAGS flags, INT8U wait_type, INT16U timeout)
{
   11a1c:	defff804 	addi	sp,sp,-32
   11a20:	df000715 	stw	fp,28(sp)
   11a24:	df000704 	addi	fp,sp,28
   11a28:	e13ffb15 	stw	r4,-20(fp)
   11a2c:	e17ffc15 	stw	r5,-16(fp)
   11a30:	3009883a 	mov	r4,r6
   11a34:	3807883a 	mov	r3,r7
   11a38:	e0800117 	ldw	r2,4(fp)
   11a3c:	e13ffd0d 	sth	r4,-12(fp)
   11a40:	e0fffe05 	stb	r3,-8(fp)
   11a44:	e0bfff0d 	sth	r2,-4(fp)
    OS_FLAG_NODE  *pnode_next;
    INT8U          y;


    OSTCBCur->OSTCBStat      |= OS_STAT_FLAG;
   11a48:	d0a73017 	ldw	r2,-25408(gp)
   11a4c:	d0e73017 	ldw	r3,-25408(gp)
   11a50:	18c00c03 	ldbu	r3,48(r3)
   11a54:	18c00814 	ori	r3,r3,32
   11a58:	10c00c05 	stb	r3,48(r2)
    OSTCBCur->OSTCBStatPend   = OS_STAT_PEND_OK;
   11a5c:	d0a73017 	ldw	r2,-25408(gp)
   11a60:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly        = timeout;              /* Store timeout in task's TCB                   */
   11a64:	d0a73017 	ldw	r2,-25408(gp)
   11a68:	e0ffff0b 	ldhu	r3,-4(fp)
   11a6c:	10c00b8d 	sth	r3,46(r2)
#if OS_TASK_DEL_EN > 0
    OSTCBCur->OSTCBFlagNode   = pnode;                /* TCB to link to node                           */
   11a70:	d0a73017 	ldw	r2,-25408(gp)
   11a74:	e0fffc17 	ldw	r3,-16(fp)
   11a78:	10c00a15 	stw	r3,40(r2)
#endif
    pnode->OSFlagNodeFlags    = flags;                /* Save the flags that we need to wait for       */
   11a7c:	e0bffc17 	ldw	r2,-16(fp)
   11a80:	e0fffd0b 	ldhu	r3,-12(fp)
   11a84:	10c0040d 	sth	r3,16(r2)
    pnode->OSFlagNodeWaitType = wait_type;            /* Save the type of wait we are doing            */
   11a88:	e0bffc17 	ldw	r2,-16(fp)
   11a8c:	e0fffe03 	ldbu	r3,-8(fp)
   11a90:	10c00485 	stb	r3,18(r2)
    pnode->OSFlagNodeTCB      = (void *)OSTCBCur;     /* Link to task's TCB                            */
   11a94:	d0e73017 	ldw	r3,-25408(gp)
   11a98:	e0bffc17 	ldw	r2,-16(fp)
   11a9c:	10c00215 	stw	r3,8(r2)
    pnode->OSFlagNodeNext     = pgrp->OSFlagWaitList; /* Add node at beginning of event flag wait list */
   11aa0:	e0bffb17 	ldw	r2,-20(fp)
   11aa4:	10c00117 	ldw	r3,4(r2)
   11aa8:	e0bffc17 	ldw	r2,-16(fp)
   11aac:	10c00015 	stw	r3,0(r2)
    pnode->OSFlagNodePrev     = (void *)0;
   11ab0:	e0bffc17 	ldw	r2,-16(fp)
   11ab4:	10000115 	stw	zero,4(r2)
    pnode->OSFlagNodeFlagGrp  = (void *)pgrp;         /* Link to Event Flag Group                      */
   11ab8:	e0bffc17 	ldw	r2,-16(fp)
   11abc:	e0fffb17 	ldw	r3,-20(fp)
   11ac0:	10c00315 	stw	r3,12(r2)
    pnode_next                = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
   11ac4:	e0bffb17 	ldw	r2,-20(fp)
   11ac8:	10800117 	ldw	r2,4(r2)
   11acc:	e0bff915 	stw	r2,-28(fp)
    if (pnode_next != (void *)0) {                    /* Is this the first NODE to insert?             */
   11ad0:	e0bff917 	ldw	r2,-28(fp)
   11ad4:	10000326 	beq	r2,zero,11ae4 <OS_FlagBlock+0xc8>
        pnode_next->OSFlagNodePrev = pnode;           /* No, link in doubly linked list                */
   11ad8:	e0bff917 	ldw	r2,-28(fp)
   11adc:	e0fffc17 	ldw	r3,-16(fp)
   11ae0:	10c00115 	stw	r3,4(r2)
    }
    pgrp->OSFlagWaitList = (void *)pnode;
   11ae4:	e0bffb17 	ldw	r2,-20(fp)
   11ae8:	e0fffc17 	ldw	r3,-16(fp)
   11aec:	10c00115 	stw	r3,4(r2)

    y            =  OSTCBCur->OSTCBY;                 /* Suspend current task until flag(s) received   */
   11af0:	d0a73017 	ldw	r2,-25408(gp)
   11af4:	10800d03 	ldbu	r2,52(r2)
   11af8:	e0bffa05 	stb	r2,-24(fp)
    OSRdyTbl[y] &= ~OSTCBCur->OSTCBBitX;
   11afc:	e0fffa03 	ldbu	r3,-24(fp)
   11b00:	e13ffa03 	ldbu	r4,-24(fp)
   11b04:	d0a72d44 	addi	r2,gp,-25419
   11b08:	2085883a 	add	r2,r4,r2
   11b0c:	10800003 	ldbu	r2,0(r2)
   11b10:	1009883a 	mov	r4,r2
   11b14:	d0a73017 	ldw	r2,-25408(gp)
   11b18:	10800d43 	ldbu	r2,53(r2)
   11b1c:	0084303a 	nor	r2,zero,r2
   11b20:	2084703a 	and	r2,r4,r2
   11b24:	1009883a 	mov	r4,r2
   11b28:	d0a72d44 	addi	r2,gp,-25419
   11b2c:	1885883a 	add	r2,r3,r2
   11b30:	11000005 	stb	r4,0(r2)
    if (OSRdyTbl[y] == 0x00) {
   11b34:	e0fffa03 	ldbu	r3,-24(fp)
   11b38:	d0a72d44 	addi	r2,gp,-25419
   11b3c:	1885883a 	add	r2,r3,r2
   11b40:	10800003 	ldbu	r2,0(r2)
   11b44:	10803fcc 	andi	r2,r2,255
   11b48:	1000071e 	bne	r2,zero,11b68 <OS_FlagBlock+0x14c>
        OSRdyGrp &= ~OSTCBCur->OSTCBBitY;
   11b4c:	d0a73017 	ldw	r2,-25408(gp)
   11b50:	10800d83 	ldbu	r2,54(r2)
   11b54:	0084303a 	nor	r2,zero,r2
   11b58:	1007883a 	mov	r3,r2
   11b5c:	d0a72d03 	ldbu	r2,-25420(gp)
   11b60:	1884703a 	and	r2,r3,r2
   11b64:	d0a72d05 	stb	r2,-25420(gp)
    }
}
   11b68:	0001883a 	nop
   11b6c:	e037883a 	mov	sp,fp
   11b70:	df000017 	ldw	fp,0(sp)
   11b74:	dec00104 	addi	sp,sp,4
   11b78:	f800283a 	ret

00011b7c <OS_FlagInit>:
* WARNING    : You MUST NOT call this function from your code.  This is an INTERNAL function to uC/OS-II.
*********************************************************************************************************
*/

void  OS_FlagInit (void)
{
   11b7c:	defffb04 	addi	sp,sp,-20
   11b80:	dfc00415 	stw	ra,16(sp)
   11b84:	df000315 	stw	fp,12(sp)
   11b88:	df000304 	addi	fp,sp,12
    INT16U       i;
    OS_FLAG_GRP *pgrp1;
    OS_FLAG_GRP *pgrp2;


    OS_MemClr((INT8U *)&OSFlagTbl[0], sizeof(OSFlagTbl));           /* Clear the flag group table      */
   11b8c:	0140dc04 	movi	r5,880
   11b90:	010000b4 	movhi	r4,2
   11b94:	2132ce04 	addi	r4,r4,-13512
   11b98:	000fdc00 	call	fdc0 <OS_MemClr>
    pgrp1 = &OSFlagTbl[0];
   11b9c:	008000b4 	movhi	r2,2
   11ba0:	10b2ce04 	addi	r2,r2,-13512
   11ba4:	e0bffe15 	stw	r2,-8(fp)
    pgrp2 = &OSFlagTbl[1];
   11ba8:	008000b4 	movhi	r2,2
   11bac:	10b2d904 	addi	r2,r2,-13468
   11bb0:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < (OS_MAX_FLAGS - 1); i++) {                      /* Init. list of free EVENT FLAGS  */
   11bb4:	e03ffd0d 	sth	zero,-12(fp)
   11bb8:	00001306 	br	11c08 <OS_FlagInit+0x8c>
        pgrp1->OSFlagType     = OS_EVENT_TYPE_UNUSED;
   11bbc:	e0bffe17 	ldw	r2,-8(fp)
   11bc0:	10000005 	stb	zero,0(r2)
        pgrp1->OSFlagWaitList = (void *)pgrp2;
   11bc4:	e0bffe17 	ldw	r2,-8(fp)
   11bc8:	e0ffff17 	ldw	r3,-4(fp)
   11bcc:	10c00115 	stw	r3,4(r2)
#if OS_FLAG_NAME_SIZE > 1
        pgrp1->OSFlagName[0]  = '?';                                /* Unknown name                    */
   11bd0:	e0bffe17 	ldw	r2,-8(fp)
   11bd4:	00c00fc4 	movi	r3,63
   11bd8:	10c00285 	stb	r3,10(r2)
        pgrp1->OSFlagName[1]  = OS_ASCII_NUL;
   11bdc:	e0bffe17 	ldw	r2,-8(fp)
   11be0:	100002c5 	stb	zero,11(r2)
#endif
        pgrp1++;
   11be4:	e0bffe17 	ldw	r2,-8(fp)
   11be8:	10800b04 	addi	r2,r2,44
   11bec:	e0bffe15 	stw	r2,-8(fp)
        pgrp2++;
   11bf0:	e0bfff17 	ldw	r2,-4(fp)
   11bf4:	10800b04 	addi	r2,r2,44
   11bf8:	e0bfff15 	stw	r2,-4(fp)


    OS_MemClr((INT8U *)&OSFlagTbl[0], sizeof(OSFlagTbl));           /* Clear the flag group table      */
    pgrp1 = &OSFlagTbl[0];
    pgrp2 = &OSFlagTbl[1];
    for (i = 0; i < (OS_MAX_FLAGS - 1); i++) {                      /* Init. list of free EVENT FLAGS  */
   11bfc:	e0bffd0b 	ldhu	r2,-12(fp)
   11c00:	10800044 	addi	r2,r2,1
   11c04:	e0bffd0d 	sth	r2,-12(fp)
   11c08:	e0bffd0b 	ldhu	r2,-12(fp)
   11c0c:	108004f0 	cmpltui	r2,r2,19
   11c10:	103fea1e 	bne	r2,zero,11bbc <__alt_data_end+0xfffe1bbc>
        pgrp1->OSFlagName[1]  = OS_ASCII_NUL;
#endif
        pgrp1++;
        pgrp2++;
    }
    pgrp1->OSFlagType     = OS_EVENT_TYPE_UNUSED;
   11c14:	e0bffe17 	ldw	r2,-8(fp)
   11c18:	10000005 	stb	zero,0(r2)
    pgrp1->OSFlagWaitList = (void *)0;
   11c1c:	e0bffe17 	ldw	r2,-8(fp)
   11c20:	10000115 	stw	zero,4(r2)
#if OS_FLAG_NAME_SIZE > 1
    pgrp1->OSFlagName[0]  = '?';                                    /* Unknown name                    */
   11c24:	e0bffe17 	ldw	r2,-8(fp)
   11c28:	00c00fc4 	movi	r3,63
   11c2c:	10c00285 	stb	r3,10(r2)
    pgrp1->OSFlagName[1]  = OS_ASCII_NUL;
   11c30:	e0bffe17 	ldw	r2,-8(fp)
   11c34:	100002c5 	stb	zero,11(r2)
#endif
    OSFlagFreeList        = &OSFlagTbl[0];
   11c38:	008000b4 	movhi	r2,2
   11c3c:	10b2ce04 	addi	r2,r2,-13512
   11c40:	d0a73215 	stw	r2,-25400(gp)
#endif
}
   11c44:	0001883a 	nop
   11c48:	e037883a 	mov	sp,fp
   11c4c:	dfc00117 	ldw	ra,4(sp)
   11c50:	df000017 	ldw	fp,0(sp)
   11c54:	dec00204 	addi	sp,sp,8
   11c58:	f800283a 	ret

00011c5c <OS_FlagTaskRdy>:
*              2) This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

static  BOOLEAN  OS_FlagTaskRdy (OS_FLAG_NODE *pnode, OS_FLAGS flags_rdy)
{
   11c5c:	defffa04 	addi	sp,sp,-24
   11c60:	dfc00515 	stw	ra,20(sp)
   11c64:	df000415 	stw	fp,16(sp)
   11c68:	df000404 	addi	fp,sp,16
   11c6c:	e13ffe15 	stw	r4,-8(fp)
   11c70:	2805883a 	mov	r2,r5
   11c74:	e0bfff0d 	sth	r2,-4(fp)
    OS_TCB   *ptcb;
    BOOLEAN   sched;


    ptcb                 = (OS_TCB *)pnode->OSFlagNodeTCB; /* Point to TCB of waiting task             */
   11c78:	e0bffe17 	ldw	r2,-8(fp)
   11c7c:	10800217 	ldw	r2,8(r2)
   11c80:	e0bffd15 	stw	r2,-12(fp)
    ptcb->OSTCBDly       = 0;
   11c84:	e0bffd17 	ldw	r2,-12(fp)
   11c88:	10000b8d 	sth	zero,46(r2)
    ptcb->OSTCBFlagsRdy  = flags_rdy;
   11c8c:	e0bffd17 	ldw	r2,-12(fp)
   11c90:	e0ffff0b 	ldhu	r3,-4(fp)
   11c94:	10c00b0d 	sth	r3,44(r2)
    ptcb->OSTCBStat     &= ~(INT8U)OS_STAT_FLAG;
   11c98:	e0bffd17 	ldw	r2,-12(fp)
   11c9c:	10c00c03 	ldbu	r3,48(r2)
   11ca0:	00bff7c4 	movi	r2,-33
   11ca4:	1884703a 	and	r2,r3,r2
   11ca8:	1007883a 	mov	r3,r2
   11cac:	e0bffd17 	ldw	r2,-12(fp)
   11cb0:	10c00c05 	stb	r3,48(r2)
    ptcb->OSTCBStatPend  = OS_STAT_PEND_OK;
   11cb4:	e0bffd17 	ldw	r2,-12(fp)
   11cb8:	10000c45 	stb	zero,49(r2)
    if (ptcb->OSTCBStat == OS_STAT_RDY) {                  /* Task now ready?                          */
   11cbc:	e0bffd17 	ldw	r2,-12(fp)
   11cc0:	10800c03 	ldbu	r2,48(r2)
   11cc4:	10803fcc 	andi	r2,r2,255
   11cc8:	1000181e 	bne	r2,zero,11d2c <OS_FlagTaskRdy+0xd0>
        OSRdyGrp               |= ptcb->OSTCBBitY;         /* Put task into ready list                 */
   11ccc:	e0bffd17 	ldw	r2,-12(fp)
   11cd0:	10c00d83 	ldbu	r3,54(r2)
   11cd4:	d0a72d03 	ldbu	r2,-25420(gp)
   11cd8:	1884b03a 	or	r2,r3,r2
   11cdc:	d0a72d05 	stb	r2,-25420(gp)
        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
   11ce0:	e0bffd17 	ldw	r2,-12(fp)
   11ce4:	10800d03 	ldbu	r2,52(r2)
   11ce8:	10c03fcc 	andi	r3,r2,255
   11cec:	e0bffd17 	ldw	r2,-12(fp)
   11cf0:	10800d03 	ldbu	r2,52(r2)
   11cf4:	11003fcc 	andi	r4,r2,255
   11cf8:	d0a72d44 	addi	r2,gp,-25419
   11cfc:	2085883a 	add	r2,r4,r2
   11d00:	11000003 	ldbu	r4,0(r2)
   11d04:	e0bffd17 	ldw	r2,-12(fp)
   11d08:	10800d43 	ldbu	r2,53(r2)
   11d0c:	2084b03a 	or	r2,r4,r2
   11d10:	1009883a 	mov	r4,r2
   11d14:	d0a72d44 	addi	r2,gp,-25419
   11d18:	1885883a 	add	r2,r3,r2
   11d1c:	11000005 	stb	r4,0(r2)
        sched                   = OS_TRUE;
   11d20:	00800044 	movi	r2,1
   11d24:	e0bffc05 	stb	r2,-16(fp)
   11d28:	00000106 	br	11d30 <OS_FlagTaskRdy+0xd4>
    } else {
        sched                   = OS_FALSE;
   11d2c:	e03ffc05 	stb	zero,-16(fp)
    }
    OS_FlagUnlink(pnode);
   11d30:	e13ffe17 	ldw	r4,-8(fp)
   11d34:	0011d500 	call	11d50 <OS_FlagUnlink>
    return (sched);
   11d38:	e0bffc03 	ldbu	r2,-16(fp)
}
   11d3c:	e037883a 	mov	sp,fp
   11d40:	dfc00117 	ldw	ra,4(sp)
   11d44:	df000017 	ldw	fp,0(sp)
   11d48:	dec00204 	addi	sp,sp,8
   11d4c:	f800283a 	ret

00011d50 <OS_FlagUnlink>:
*              2) This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

void  OS_FlagUnlink (OS_FLAG_NODE *pnode)
{
   11d50:	defffa04 	addi	sp,sp,-24
   11d54:	df000515 	stw	fp,20(sp)
   11d58:	df000504 	addi	fp,sp,20
   11d5c:	e13fff15 	stw	r4,-4(fp)
    OS_FLAG_GRP  *pgrp;
    OS_FLAG_NODE *pnode_prev;
    OS_FLAG_NODE *pnode_next;


    pnode_prev = (OS_FLAG_NODE *)pnode->OSFlagNodePrev;
   11d60:	e0bfff17 	ldw	r2,-4(fp)
   11d64:	10800117 	ldw	r2,4(r2)
   11d68:	e0bffb15 	stw	r2,-20(fp)
    pnode_next = (OS_FLAG_NODE *)pnode->OSFlagNodeNext;
   11d6c:	e0bfff17 	ldw	r2,-4(fp)
   11d70:	10800017 	ldw	r2,0(r2)
   11d74:	e0bffc15 	stw	r2,-16(fp)
    if (pnode_prev == (OS_FLAG_NODE *)0) {                      /* Is it first node in wait list?      */
   11d78:	e0bffb17 	ldw	r2,-20(fp)
   11d7c:	10000b1e 	bne	r2,zero,11dac <OS_FlagUnlink+0x5c>
        pgrp                 = (OS_FLAG_GRP *)pnode->OSFlagNodeFlagGrp;
   11d80:	e0bfff17 	ldw	r2,-4(fp)
   11d84:	10800317 	ldw	r2,12(r2)
   11d88:	e0bffd15 	stw	r2,-12(fp)
        pgrp->OSFlagWaitList = (void *)pnode_next;              /*      Update list for new 1st node   */
   11d8c:	e0bffd17 	ldw	r2,-12(fp)
   11d90:	e0fffc17 	ldw	r3,-16(fp)
   11d94:	10c00115 	stw	r3,4(r2)
        if (pnode_next != (OS_FLAG_NODE *)0) {
   11d98:	e0bffc17 	ldw	r2,-16(fp)
   11d9c:	10000b26 	beq	r2,zero,11dcc <OS_FlagUnlink+0x7c>
            pnode_next->OSFlagNodePrev = (OS_FLAG_NODE *)0;     /*      Link new 1st node PREV to NULL */
   11da0:	e0bffc17 	ldw	r2,-16(fp)
   11da4:	10000115 	stw	zero,4(r2)
   11da8:	00000806 	br	11dcc <OS_FlagUnlink+0x7c>
        }
    } else {                                                    /* No,  A node somewhere in the list   */
        pnode_prev->OSFlagNodeNext = pnode_next;                /*      Link around the node to unlink */
   11dac:	e0bffb17 	ldw	r2,-20(fp)
   11db0:	e0fffc17 	ldw	r3,-16(fp)
   11db4:	10c00015 	stw	r3,0(r2)
        if (pnode_next != (OS_FLAG_NODE *)0) {                  /*      Was this the LAST node?        */
   11db8:	e0bffc17 	ldw	r2,-16(fp)
   11dbc:	10000326 	beq	r2,zero,11dcc <OS_FlagUnlink+0x7c>
            pnode_next->OSFlagNodePrev = pnode_prev;            /*      No, Link around current node   */
   11dc0:	e0bffc17 	ldw	r2,-16(fp)
   11dc4:	e0fffb17 	ldw	r3,-20(fp)
   11dc8:	10c00115 	stw	r3,4(r2)
        }
    }
#if OS_TASK_DEL_EN > 0
    ptcb                = (OS_TCB *)pnode->OSFlagNodeTCB;
   11dcc:	e0bfff17 	ldw	r2,-4(fp)
   11dd0:	10800217 	ldw	r2,8(r2)
   11dd4:	e0bffe15 	stw	r2,-8(fp)
    ptcb->OSTCBFlagNode = (OS_FLAG_NODE *)0;
   11dd8:	e0bffe17 	ldw	r2,-8(fp)
   11ddc:	10000a15 	stw	zero,40(r2)
#endif
}
   11de0:	0001883a 	nop
   11de4:	e037883a 	mov	sp,fp
   11de8:	df000017 	ldw	fp,0(sp)
   11dec:	dec00104 	addi	sp,sp,4
   11df0:	f800283a 	ret

00011df4 <OSMemCreate>:
*                              free partition is available.
*********************************************************************************************************
*/

OS_MEM  *OSMemCreate (void *addr, INT32U nblks, INT32U blksize, INT8U *perr)
{
   11df4:	defff404 	addi	sp,sp,-48
   11df8:	df000b15 	stw	fp,44(sp)
   11dfc:	df000b04 	addi	fp,sp,44
   11e00:	e13ffc15 	stw	r4,-16(fp)
   11e04:	e17ffd15 	stw	r5,-12(fp)
   11e08:	e1bffe15 	stw	r6,-8(fp)
   11e0c:	e1ffff15 	stw	r7,-4(fp)
    OS_MEM    *pmem;
    INT8U     *pblk;
    void     **plink;
    INT32U     i;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   11e10:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0              
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
   11e14:	e0bfff17 	ldw	r2,-4(fp)
   11e18:	1000021e 	bne	r2,zero,11e24 <OSMemCreate+0x30>
        return ((OS_MEM *)0);
   11e1c:	0005883a 	mov	r2,zero
   11e20:	00006506 	br	11fb8 <OSMemCreate+0x1c4>
    }
    if (addr == (void *)0) {                          /* Must pass a valid address for the memory part.*/
   11e24:	e0bffc17 	ldw	r2,-16(fp)
   11e28:	1000051e 	bne	r2,zero,11e40 <OSMemCreate+0x4c>
        *perr = OS_ERR_MEM_INVALID_ADDR;
   11e2c:	e0bfff17 	ldw	r2,-4(fp)
   11e30:	00c01884 	movi	r3,98
   11e34:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
   11e38:	0005883a 	mov	r2,zero
   11e3c:	00005e06 	br	11fb8 <OSMemCreate+0x1c4>
    }
    if (((INT32U)addr & (sizeof(void *) - 1)) != 0){  /* Must be pointer size aligned                  */
   11e40:	e0bffc17 	ldw	r2,-16(fp)
   11e44:	108000cc 	andi	r2,r2,3
   11e48:	10000526 	beq	r2,zero,11e60 <OSMemCreate+0x6c>
        *perr = OS_ERR_MEM_INVALID_ADDR;
   11e4c:	e0bfff17 	ldw	r2,-4(fp)
   11e50:	00c01884 	movi	r3,98
   11e54:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
   11e58:	0005883a 	mov	r2,zero
   11e5c:	00005606 	br	11fb8 <OSMemCreate+0x1c4>
    }
    if (nblks < 2) {                                  /* Must have at least 2 blocks per partition     */
   11e60:	e0bffd17 	ldw	r2,-12(fp)
   11e64:	108000a8 	cmpgeui	r2,r2,2
   11e68:	1000051e 	bne	r2,zero,11e80 <OSMemCreate+0x8c>
        *perr = OS_ERR_MEM_INVALID_BLKS;
   11e6c:	e0bfff17 	ldw	r2,-4(fp)
   11e70:	00c016c4 	movi	r3,91
   11e74:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
   11e78:	0005883a 	mov	r2,zero
   11e7c:	00004e06 	br	11fb8 <OSMemCreate+0x1c4>
    }
    if (blksize < sizeof(void *)) {                   /* Must contain space for at least a pointer     */
   11e80:	e0bffe17 	ldw	r2,-8(fp)
   11e84:	10800128 	cmpgeui	r2,r2,4
   11e88:	1000051e 	bne	r2,zero,11ea0 <OSMemCreate+0xac>
        *perr = OS_ERR_MEM_INVALID_SIZE;
   11e8c:	e0bfff17 	ldw	r2,-4(fp)
   11e90:	00c01704 	movi	r3,92
   11e94:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
   11e98:	0005883a 	mov	r2,zero
   11e9c:	00004606 	br	11fb8 <OSMemCreate+0x1c4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   11ea0:	0005303a 	rdctl	r2,status
   11ea4:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   11ea8:	e0fffb17 	ldw	r3,-20(fp)
   11eac:	00bfff84 	movi	r2,-2
   11eb0:	1884703a 	and	r2,r3,r2
   11eb4:	1001703a 	wrctl	status,r2
  
  return context;
   11eb8:	e0bffb17 	ldw	r2,-20(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   11ebc:	e0bff815 	stw	r2,-32(fp)
    pmem = OSMemFreeList;                             /* Get next free memory partition                */
   11ec0:	d0a72a17 	ldw	r2,-25432(gp)
   11ec4:	e0bffa15 	stw	r2,-24(fp)
    if (OSMemFreeList != (OS_MEM *)0) {               /* See if pool of free partitions was empty      */
   11ec8:	d0a72a17 	ldw	r2,-25432(gp)
   11ecc:	10000326 	beq	r2,zero,11edc <OSMemCreate+0xe8>
        OSMemFreeList = (OS_MEM *)OSMemFreeList->OSMemFreeList;
   11ed0:	d0a72a17 	ldw	r2,-25432(gp)
   11ed4:	10800117 	ldw	r2,4(r2)
   11ed8:	d0a72a15 	stw	r2,-25432(gp)
   11edc:	e0bff817 	ldw	r2,-32(fp)
   11ee0:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   11ee4:	e0bff917 	ldw	r2,-28(fp)
   11ee8:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    if (pmem == (OS_MEM *)0) {                        /* See if we have a memory partition             */
   11eec:	e0bffa17 	ldw	r2,-24(fp)
   11ef0:	1000051e 	bne	r2,zero,11f08 <OSMemCreate+0x114>
        *perr = OS_ERR_MEM_INVALID_PART;
   11ef4:	e0bfff17 	ldw	r2,-4(fp)
   11ef8:	00c01684 	movi	r3,90
   11efc:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
   11f00:	0005883a 	mov	r2,zero
   11f04:	00002c06 	br	11fb8 <OSMemCreate+0x1c4>
    }
    plink = (void **)addr;                            /* Create linked list of free memory blocks      */
   11f08:	e0bffc17 	ldw	r2,-16(fp)
   11f0c:	e0bff615 	stw	r2,-40(fp)
    pblk  = (INT8U *)((INT32U)addr + blksize);
   11f10:	e0fffc17 	ldw	r3,-16(fp)
   11f14:	e0bffe17 	ldw	r2,-8(fp)
   11f18:	1885883a 	add	r2,r3,r2
   11f1c:	e0bff515 	stw	r2,-44(fp)
    for (i = 0; i < (nblks - 1); i++) {
   11f20:	e03ff715 	stw	zero,-36(fp)
   11f24:	00000c06 	br	11f58 <OSMemCreate+0x164>
       *plink = (void *)pblk;                         /* Save pointer to NEXT block in CURRENT block   */
   11f28:	e0bff617 	ldw	r2,-40(fp)
   11f2c:	e0fff517 	ldw	r3,-44(fp)
   11f30:	10c00015 	stw	r3,0(r2)
        plink = (void **)pblk;                        /* Position to  NEXT      block                  */
   11f34:	e0bff517 	ldw	r2,-44(fp)
   11f38:	e0bff615 	stw	r2,-40(fp)
        pblk  = (INT8U *)((INT32U)pblk + blksize);    /* Point to the FOLLOWING block                  */
   11f3c:	e0fff517 	ldw	r3,-44(fp)
   11f40:	e0bffe17 	ldw	r2,-8(fp)
   11f44:	1885883a 	add	r2,r3,r2
   11f48:	e0bff515 	stw	r2,-44(fp)
        *perr = OS_ERR_MEM_INVALID_PART;
        return ((OS_MEM *)0);
    }
    plink = (void **)addr;                            /* Create linked list of free memory blocks      */
    pblk  = (INT8U *)((INT32U)addr + blksize);
    for (i = 0; i < (nblks - 1); i++) {
   11f4c:	e0bff717 	ldw	r2,-36(fp)
   11f50:	10800044 	addi	r2,r2,1
   11f54:	e0bff715 	stw	r2,-36(fp)
   11f58:	e0bffd17 	ldw	r2,-12(fp)
   11f5c:	10bfffc4 	addi	r2,r2,-1
   11f60:	e0fff717 	ldw	r3,-36(fp)
   11f64:	18bff036 	bltu	r3,r2,11f28 <__alt_data_end+0xfffe1f28>
       *plink = (void *)pblk;                         /* Save pointer to NEXT block in CURRENT block   */
        plink = (void **)pblk;                        /* Position to  NEXT      block                  */
        pblk  = (INT8U *)((INT32U)pblk + blksize);    /* Point to the FOLLOWING block                  */
    }
    *plink              = (void *)0;                  /* Last memory block points to NULL              */
   11f68:	e0bff617 	ldw	r2,-40(fp)
   11f6c:	10000015 	stw	zero,0(r2)
    pmem->OSMemAddr     = addr;                       /* Store start address of memory partition       */
   11f70:	e0bffa17 	ldw	r2,-24(fp)
   11f74:	e0fffc17 	ldw	r3,-16(fp)
   11f78:	10c00015 	stw	r3,0(r2)
    pmem->OSMemFreeList = addr;                       /* Initialize pointer to pool of free blocks     */
   11f7c:	e0bffa17 	ldw	r2,-24(fp)
   11f80:	e0fffc17 	ldw	r3,-16(fp)
   11f84:	10c00115 	stw	r3,4(r2)
    pmem->OSMemNFree    = nblks;                      /* Store number of free blocks in MCB            */
   11f88:	e0bffa17 	ldw	r2,-24(fp)
   11f8c:	e0fffd17 	ldw	r3,-12(fp)
   11f90:	10c00415 	stw	r3,16(r2)
    pmem->OSMemNBlks    = nblks;
   11f94:	e0bffa17 	ldw	r2,-24(fp)
   11f98:	e0fffd17 	ldw	r3,-12(fp)
   11f9c:	10c00315 	stw	r3,12(r2)
    pmem->OSMemBlkSize  = blksize;                    /* Store block size of each memory blocks        */
   11fa0:	e0bffa17 	ldw	r2,-24(fp)
   11fa4:	e0fffe17 	ldw	r3,-8(fp)
   11fa8:	10c00215 	stw	r3,8(r2)
    *perr               = OS_ERR_NONE;
   11fac:	e0bfff17 	ldw	r2,-4(fp)
   11fb0:	10000005 	stb	zero,0(r2)
    return (pmem);
   11fb4:	e0bffa17 	ldw	r2,-24(fp)
}
   11fb8:	e037883a 	mov	sp,fp
   11fbc:	df000017 	ldw	fp,0(sp)
   11fc0:	dec00104 	addi	sp,sp,4
   11fc4:	f800283a 	ret

00011fc8 <OSMemGet>:
*               A pointer to NULL if an error is detected
*********************************************************************************************************
*/

void  *OSMemGet (OS_MEM *pmem, INT8U *perr)
{
   11fc8:	defff804 	addi	sp,sp,-32
   11fcc:	df000715 	stw	fp,28(sp)
   11fd0:	df000704 	addi	fp,sp,28
   11fd4:	e13ffe15 	stw	r4,-8(fp)
   11fd8:	e17fff15 	stw	r5,-4(fp)
    void      *pblk;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   11fdc:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
   11fe0:	e0bfff17 	ldw	r2,-4(fp)
   11fe4:	1000021e 	bne	r2,zero,11ff0 <OSMemGet+0x28>
        return ((void *)0);
   11fe8:	0005883a 	mov	r2,zero
   11fec:	00002e06 	br	120a8 <OSMemGet+0xe0>
    }
    if (pmem == (OS_MEM *)0) {                        /* Must point to a valid memory partition        */
   11ff0:	e0bffe17 	ldw	r2,-8(fp)
   11ff4:	1000051e 	bne	r2,zero,1200c <OSMemGet+0x44>
        *perr = OS_ERR_MEM_INVALID_PMEM;
   11ff8:	e0bfff17 	ldw	r2,-4(fp)
   11ffc:	00c01804 	movi	r3,96
   12000:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
   12004:	0005883a 	mov	r2,zero
   12008:	00002706 	br	120a8 <OSMemGet+0xe0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1200c:	0005303a 	rdctl	r2,status
   12010:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   12014:	e0fffd17 	ldw	r3,-12(fp)
   12018:	00bfff84 	movi	r2,-2
   1201c:	1884703a 	and	r2,r3,r2
   12020:	1001703a 	wrctl	status,r2
  
  return context;
   12024:	e0bffd17 	ldw	r2,-12(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   12028:	e0bff915 	stw	r2,-28(fp)
    if (pmem->OSMemNFree > 0) {                       /* See if there are any free memory blocks       */
   1202c:	e0bffe17 	ldw	r2,-8(fp)
   12030:	10800417 	ldw	r2,16(r2)
   12034:	10001426 	beq	r2,zero,12088 <OSMemGet+0xc0>
        pblk                = pmem->OSMemFreeList;    /* Yes, point to next free memory block          */
   12038:	e0bffe17 	ldw	r2,-8(fp)
   1203c:	10800117 	ldw	r2,4(r2)
   12040:	e0bffb15 	stw	r2,-20(fp)
        pmem->OSMemFreeList = *(void **)pblk;         /*      Adjust pointer to new free list          */
   12044:	e0bffb17 	ldw	r2,-20(fp)
   12048:	10c00017 	ldw	r3,0(r2)
   1204c:	e0bffe17 	ldw	r2,-8(fp)
   12050:	10c00115 	stw	r3,4(r2)
        pmem->OSMemNFree--;                           /*      One less memory block in this partition  */
   12054:	e0bffe17 	ldw	r2,-8(fp)
   12058:	10800417 	ldw	r2,16(r2)
   1205c:	10ffffc4 	addi	r3,r2,-1
   12060:	e0bffe17 	ldw	r2,-8(fp)
   12064:	10c00415 	stw	r3,16(r2)
   12068:	e0bff917 	ldw	r2,-28(fp)
   1206c:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   12070:	e0bffa17 	ldw	r2,-24(fp)
   12074:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_NONE;                          /*      No error                                 */
   12078:	e0bfff17 	ldw	r2,-4(fp)
   1207c:	10000005 	stb	zero,0(r2)
        return (pblk);                                /*      Return memory block to caller            */
   12080:	e0bffb17 	ldw	r2,-20(fp)
   12084:	00000806 	br	120a8 <OSMemGet+0xe0>
   12088:	e0bff917 	ldw	r2,-28(fp)
   1208c:	e0bffc15 	stw	r2,-16(fp)
   12090:	e0bffc17 	ldw	r2,-16(fp)
   12094:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_MEM_NO_FREE_BLKS;                  /* No,  Notify caller of empty memory partition  */
   12098:	e0bfff17 	ldw	r2,-4(fp)
   1209c:	00c01744 	movi	r3,93
   120a0:	10c00005 	stb	r3,0(r2)
    return ((void *)0);                               /*      Return NULL pointer to caller            */
   120a4:	0005883a 	mov	r2,zero
}
   120a8:	e037883a 	mov	sp,fp
   120ac:	df000017 	ldw	fp,0(sp)
   120b0:	dec00104 	addi	sp,sp,4
   120b4:	f800283a 	ret

000120b8 <OSMemNameGet>:
*********************************************************************************************************
*/

#if OS_MEM_NAME_SIZE > 1
INT8U  OSMemNameGet (OS_MEM *pmem, INT8U *pname, INT8U *perr)
{
   120b8:	defff704 	addi	sp,sp,-36
   120bc:	dfc00815 	stw	ra,32(sp)
   120c0:	df000715 	stw	fp,28(sp)
   120c4:	df000704 	addi	fp,sp,28
   120c8:	e13ffd15 	stw	r4,-12(fp)
   120cc:	e17ffe15 	stw	r5,-8(fp)
   120d0:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   120d4:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
   120d8:	e0bfff17 	ldw	r2,-4(fp)
   120dc:	1000021e 	bne	r2,zero,120e8 <OSMemNameGet+0x30>
        return (0);
   120e0:	0005883a 	mov	r2,zero
   120e4:	00002b06 	br	12194 <OSMemNameGet+0xdc>
    }
    if (pmem == (OS_MEM *)0) {                   /* Is 'pmem' a NULL pointer?                          */
   120e8:	e0bffd17 	ldw	r2,-12(fp)
   120ec:	1000051e 	bne	r2,zero,12104 <OSMemNameGet+0x4c>
        *perr = OS_ERR_MEM_INVALID_PMEM;
   120f0:	e0bfff17 	ldw	r2,-4(fp)
   120f4:	00c01804 	movi	r3,96
   120f8:	10c00005 	stb	r3,0(r2)
        return (0);
   120fc:	0005883a 	mov	r2,zero
   12100:	00002406 	br	12194 <OSMemNameGet+0xdc>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
   12104:	e0bffe17 	ldw	r2,-8(fp)
   12108:	1000051e 	bne	r2,zero,12120 <OSMemNameGet+0x68>
        *perr = OS_ERR_PNAME_NULL;
   1210c:	e0bfff17 	ldw	r2,-4(fp)
   12110:	00c00304 	movi	r3,12
   12114:	10c00005 	stb	r3,0(r2)
        return (0);
   12118:	0005883a 	mov	r2,zero
   1211c:	00001d06 	br	12194 <OSMemNameGet+0xdc>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
   12120:	d0a72f03 	ldbu	r2,-25412(gp)
   12124:	10803fcc 	andi	r2,r2,255
   12128:	10000526 	beq	r2,zero,12140 <OSMemNameGet+0x88>
        *perr = OS_ERR_NAME_GET_ISR;
   1212c:	e0bfff17 	ldw	r2,-4(fp)
   12130:	00c00444 	movi	r3,17
   12134:	10c00005 	stb	r3,0(r2)
        return (0);
   12138:	0005883a 	mov	r2,zero
   1213c:	00001506 	br	12194 <OSMemNameGet+0xdc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   12140:	0005303a 	rdctl	r2,status
   12144:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   12148:	e0fffb17 	ldw	r3,-20(fp)
   1214c:	00bfff84 	movi	r2,-2
   12150:	1884703a 	and	r2,r3,r2
   12154:	1001703a 	wrctl	status,r2
  
  return context;
   12158:	e0bffb17 	ldw	r2,-20(fp)
    }
    OS_ENTER_CRITICAL();
   1215c:	e0bff915 	stw	r2,-28(fp)
    len   = OS_StrCopy(pname, pmem->OSMemName);  /* Copy name from OS_MEM                              */
   12160:	e0bffd17 	ldw	r2,-12(fp)
   12164:	10800504 	addi	r2,r2,20
   12168:	100b883a 	mov	r5,r2
   1216c:	e13ffe17 	ldw	r4,-8(fp)
   12170:	000ffc00 	call	ffc0 <OS_StrCopy>
   12174:	e0bffa05 	stb	r2,-24(fp)
   12178:	e0bff917 	ldw	r2,-28(fp)
   1217c:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   12180:	e0bffc17 	ldw	r2,-16(fp)
   12184:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   12188:	e0bfff17 	ldw	r2,-4(fp)
   1218c:	10000005 	stb	zero,0(r2)
    return (len);
   12190:	e0bffa03 	ldbu	r2,-24(fp)
}
   12194:	e037883a 	mov	sp,fp
   12198:	dfc00117 	ldw	ra,4(sp)
   1219c:	df000017 	ldw	fp,0(sp)
   121a0:	dec00204 	addi	sp,sp,8
   121a4:	f800283a 	ret

000121a8 <OSMemNameSet>:
*********************************************************************************************************
*/

#if OS_MEM_NAME_SIZE > 1
void  OSMemNameSet (OS_MEM *pmem, INT8U *pname, INT8U *perr)
{
   121a8:	defff604 	addi	sp,sp,-40
   121ac:	dfc00915 	stw	ra,36(sp)
   121b0:	df000815 	stw	fp,32(sp)
   121b4:	df000804 	addi	fp,sp,32
   121b8:	e13ffd15 	stw	r4,-12(fp)
   121bc:	e17ffe15 	stw	r5,-8(fp)
   121c0:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   121c4:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
   121c8:	e0bfff17 	ldw	r2,-4(fp)
   121cc:	10003526 	beq	r2,zero,122a4 <OSMemNameSet+0xfc>
        return;
    }
    if (pmem == (OS_MEM *)0) {                   /* Is 'pmem' a NULL pointer?                          */
   121d0:	e0bffd17 	ldw	r2,-12(fp)
   121d4:	1000041e 	bne	r2,zero,121e8 <OSMemNameSet+0x40>
        *perr = OS_ERR_MEM_INVALID_PMEM;
   121d8:	e0bfff17 	ldw	r2,-4(fp)
   121dc:	00c01804 	movi	r3,96
   121e0:	10c00005 	stb	r3,0(r2)
        return;
   121e4:	00003006 	br	122a8 <OSMemNameSet+0x100>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
   121e8:	e0bffe17 	ldw	r2,-8(fp)
   121ec:	1000041e 	bne	r2,zero,12200 <OSMemNameSet+0x58>
        *perr = OS_ERR_PNAME_NULL;
   121f0:	e0bfff17 	ldw	r2,-4(fp)
   121f4:	00c00304 	movi	r3,12
   121f8:	10c00005 	stb	r3,0(r2)
        return;
   121fc:	00002a06 	br	122a8 <OSMemNameSet+0x100>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
   12200:	d0a72f03 	ldbu	r2,-25412(gp)
   12204:	10803fcc 	andi	r2,r2,255
   12208:	10000426 	beq	r2,zero,1221c <OSMemNameSet+0x74>
        *perr = OS_ERR_NAME_SET_ISR;
   1220c:	e0bfff17 	ldw	r2,-4(fp)
   12210:	00c00484 	movi	r3,18
   12214:	10c00005 	stb	r3,0(r2)
        return;
   12218:	00002306 	br	122a8 <OSMemNameSet+0x100>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1221c:	0005303a 	rdctl	r2,status
   12220:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   12224:	e0fffc17 	ldw	r3,-16(fp)
   12228:	00bfff84 	movi	r2,-2
   1222c:	1884703a 	and	r2,r3,r2
   12230:	1001703a 	wrctl	status,r2
  
  return context;
   12234:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
   12238:	e0bff815 	stw	r2,-32(fp)
    len = OS_StrLen(pname);                      /* Can we fit the string in the storage area?         */
   1223c:	e13ffe17 	ldw	r4,-8(fp)
   12240:	00100340 	call	10034 <OS_StrLen>
   12244:	e0bffa05 	stb	r2,-24(fp)
    if (len > (OS_MEM_NAME_SIZE - 1)) {          /* No                                                 */
   12248:	e0bffa03 	ldbu	r2,-24(fp)
   1224c:	10800830 	cmpltui	r2,r2,32
   12250:	1000081e 	bne	r2,zero,12274 <OSMemNameSet+0xcc>
   12254:	e0bff817 	ldw	r2,-32(fp)
   12258:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1225c:	e0bff917 	ldw	r2,-28(fp)
   12260:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_MEM_NAME_TOO_LONG;
   12264:	e0bfff17 	ldw	r2,-4(fp)
   12268:	00c018c4 	movi	r3,99
   1226c:	10c00005 	stb	r3,0(r2)
        return;
   12270:	00000d06 	br	122a8 <OSMemNameSet+0x100>
    }
    (void)OS_StrCopy(pmem->OSMemName, pname);    /* Yes, copy name to the memory partition header      */
   12274:	e0bffd17 	ldw	r2,-12(fp)
   12278:	10800504 	addi	r2,r2,20
   1227c:	e17ffe17 	ldw	r5,-8(fp)
   12280:	1009883a 	mov	r4,r2
   12284:	000ffc00 	call	ffc0 <OS_StrCopy>
   12288:	e0bff817 	ldw	r2,-32(fp)
   1228c:	e0bffb15 	stw	r2,-20(fp)
   12290:	e0bffb17 	ldw	r2,-20(fp)
   12294:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   12298:	e0bfff17 	ldw	r2,-4(fp)
   1229c:	10000005 	stb	zero,0(r2)
   122a0:	00000106 	br	122a8 <OSMemNameSet+0x100>



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
        return;
   122a4:	0001883a 	nop
        return;
    }
    (void)OS_StrCopy(pmem->OSMemName, pname);    /* Yes, copy name to the memory partition header      */
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
}
   122a8:	e037883a 	mov	sp,fp
   122ac:	dfc00117 	ldw	ra,4(sp)
   122b0:	df000017 	ldw	fp,0(sp)
   122b4:	dec00204 	addi	sp,sp,8
   122b8:	f800283a 	ret

000122bc <OSMemPut>:
*               OS_ERR_MEM_INVALID_PBLK  if you passed a NULL pointer for the block to release.
*********************************************************************************************************
*/

INT8U  OSMemPut (OS_MEM *pmem, void *pblk)
{
   122bc:	defff904 	addi	sp,sp,-28
   122c0:	df000615 	stw	fp,24(sp)
   122c4:	df000604 	addi	fp,sp,24
   122c8:	e13ffe15 	stw	r4,-8(fp)
   122cc:	e17fff15 	stw	r5,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   122d0:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pmem == (OS_MEM *)0) {                   /* Must point to a valid memory partition             */
   122d4:	e0bffe17 	ldw	r2,-8(fp)
   122d8:	1000021e 	bne	r2,zero,122e4 <OSMemPut+0x28>
        return (OS_ERR_MEM_INVALID_PMEM);
   122dc:	00801804 	movi	r2,96
   122e0:	00002806 	br	12384 <OSMemPut+0xc8>
    }
    if (pblk == (void *)0) {                     /* Must release a valid block                         */
   122e4:	e0bfff17 	ldw	r2,-4(fp)
   122e8:	1000021e 	bne	r2,zero,122f4 <OSMemPut+0x38>
        return (OS_ERR_MEM_INVALID_PBLK);
   122ec:	008017c4 	movi	r2,95
   122f0:	00002406 	br	12384 <OSMemPut+0xc8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   122f4:	0005303a 	rdctl	r2,status
   122f8:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   122fc:	e0fffd17 	ldw	r3,-12(fp)
   12300:	00bfff84 	movi	r2,-2
   12304:	1884703a 	and	r2,r3,r2
   12308:	1001703a 	wrctl	status,r2
  
  return context;
   1230c:	e0bffd17 	ldw	r2,-12(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   12310:	e0bffa15 	stw	r2,-24(fp)
    if (pmem->OSMemNFree >= pmem->OSMemNBlks) {  /* Make sure all blocks not already returned          */
   12314:	e0bffe17 	ldw	r2,-8(fp)
   12318:	10c00417 	ldw	r3,16(r2)
   1231c:	e0bffe17 	ldw	r2,-8(fp)
   12320:	10800317 	ldw	r2,12(r2)
   12324:	18800636 	bltu	r3,r2,12340 <OSMemPut+0x84>
   12328:	e0bffa17 	ldw	r2,-24(fp)
   1232c:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   12330:	e0bffb17 	ldw	r2,-20(fp)
   12334:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_MEM_FULL);
   12338:	00801784 	movi	r2,94
   1233c:	00001106 	br	12384 <OSMemPut+0xc8>
    }
    *(void **)pblk      = pmem->OSMemFreeList;   /* Insert released block into free block list         */
   12340:	e0bffe17 	ldw	r2,-8(fp)
   12344:	10c00117 	ldw	r3,4(r2)
   12348:	e0bfff17 	ldw	r2,-4(fp)
   1234c:	10c00015 	stw	r3,0(r2)
    pmem->OSMemFreeList = pblk;
   12350:	e0bffe17 	ldw	r2,-8(fp)
   12354:	e0ffff17 	ldw	r3,-4(fp)
   12358:	10c00115 	stw	r3,4(r2)
    pmem->OSMemNFree++;                          /* One more memory block in this partition            */
   1235c:	e0bffe17 	ldw	r2,-8(fp)
   12360:	10800417 	ldw	r2,16(r2)
   12364:	10c00044 	addi	r3,r2,1
   12368:	e0bffe17 	ldw	r2,-8(fp)
   1236c:	10c00415 	stw	r3,16(r2)
   12370:	e0bffa17 	ldw	r2,-24(fp)
   12374:	e0bffc15 	stw	r2,-16(fp)
   12378:	e0bffc17 	ldw	r2,-16(fp)
   1237c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);                        /* Notify caller that memory block was released       */
   12380:	0005883a 	mov	r2,zero
}
   12384:	e037883a 	mov	sp,fp
   12388:	df000017 	ldw	fp,0(sp)
   1238c:	dec00104 	addi	sp,sp,4
   12390:	f800283a 	ret

00012394 <OSMemQuery>:
*********************************************************************************************************
*/

#if OS_MEM_QUERY_EN > 0
INT8U  OSMemQuery (OS_MEM *pmem, OS_MEM_DATA *p_mem_data)
{
   12394:	defffa04 	addi	sp,sp,-24
   12398:	df000515 	stw	fp,20(sp)
   1239c:	df000504 	addi	fp,sp,20
   123a0:	e13ffe15 	stw	r4,-8(fp)
   123a4:	e17fff15 	stw	r5,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   123a8:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pmem == (OS_MEM *)0) {                   /* Must point to a valid memory partition             */
   123ac:	e0bffe17 	ldw	r2,-8(fp)
   123b0:	1000021e 	bne	r2,zero,123bc <OSMemQuery+0x28>
        return (OS_ERR_MEM_INVALID_PMEM);
   123b4:	00801804 	movi	r2,96
   123b8:	00002c06 	br	1246c <OSMemQuery+0xd8>
    }
    if (p_mem_data == (OS_MEM_DATA *)0) {        /* Must release a valid storage area for the data     */
   123bc:	e0bfff17 	ldw	r2,-4(fp)
   123c0:	1000021e 	bne	r2,zero,123cc <OSMemQuery+0x38>
        return (OS_ERR_MEM_INVALID_PDATA);
   123c4:	00801844 	movi	r2,97
   123c8:	00002806 	br	1246c <OSMemQuery+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   123cc:	0005303a 	rdctl	r2,status
   123d0:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   123d4:	e0fffc17 	ldw	r3,-16(fp)
   123d8:	00bfff84 	movi	r2,-2
   123dc:	1884703a 	and	r2,r3,r2
   123e0:	1001703a 	wrctl	status,r2
  
  return context;
   123e4:	e0bffc17 	ldw	r2,-16(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   123e8:	e0bffb15 	stw	r2,-20(fp)
    p_mem_data->OSAddr     = pmem->OSMemAddr;
   123ec:	e0bffe17 	ldw	r2,-8(fp)
   123f0:	10c00017 	ldw	r3,0(r2)
   123f4:	e0bfff17 	ldw	r2,-4(fp)
   123f8:	10c00015 	stw	r3,0(r2)
    p_mem_data->OSFreeList = pmem->OSMemFreeList;
   123fc:	e0bffe17 	ldw	r2,-8(fp)
   12400:	10c00117 	ldw	r3,4(r2)
   12404:	e0bfff17 	ldw	r2,-4(fp)
   12408:	10c00115 	stw	r3,4(r2)
    p_mem_data->OSBlkSize  = pmem->OSMemBlkSize;
   1240c:	e0bffe17 	ldw	r2,-8(fp)
   12410:	10c00217 	ldw	r3,8(r2)
   12414:	e0bfff17 	ldw	r2,-4(fp)
   12418:	10c00215 	stw	r3,8(r2)
    p_mem_data->OSNBlks    = pmem->OSMemNBlks;
   1241c:	e0bffe17 	ldw	r2,-8(fp)
   12420:	10c00317 	ldw	r3,12(r2)
   12424:	e0bfff17 	ldw	r2,-4(fp)
   12428:	10c00315 	stw	r3,12(r2)
    p_mem_data->OSNFree    = pmem->OSMemNFree;
   1242c:	e0bffe17 	ldw	r2,-8(fp)
   12430:	10c00417 	ldw	r3,16(r2)
   12434:	e0bfff17 	ldw	r2,-4(fp)
   12438:	10c00415 	stw	r3,16(r2)
   1243c:	e0bffb17 	ldw	r2,-20(fp)
   12440:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   12444:	e0bffd17 	ldw	r2,-12(fp)
   12448:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    p_mem_data->OSNUsed    = p_mem_data->OSNBlks - p_mem_data->OSNFree;
   1244c:	e0bfff17 	ldw	r2,-4(fp)
   12450:	10c00317 	ldw	r3,12(r2)
   12454:	e0bfff17 	ldw	r2,-4(fp)
   12458:	10800417 	ldw	r2,16(r2)
   1245c:	1887c83a 	sub	r3,r3,r2
   12460:	e0bfff17 	ldw	r2,-4(fp)
   12464:	10c00515 	stw	r3,20(r2)
    return (OS_ERR_NONE);
   12468:	0005883a 	mov	r2,zero
}
   1246c:	e037883a 	mov	sp,fp
   12470:	df000017 	ldw	fp,0(sp)
   12474:	dec00104 	addi	sp,sp,4
   12478:	f800283a 	ret

0001247c <OS_MemInit>:
* Note(s)    : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

void  OS_MemInit (void)
{
   1247c:	defffc04 	addi	sp,sp,-16
   12480:	dfc00315 	stw	ra,12(sp)
   12484:	df000215 	stw	fp,8(sp)
   12488:	df000204 	addi	fp,sp,8
#if OS_MAX_MEM_PART >= 2
    OS_MEM  *pmem;
    INT16U   i;


    OS_MemClr((INT8U *)&OSMemTbl[0], sizeof(OSMemTbl));   /* Clear the memory partition table          */
   1248c:	01430c04 	movi	r5,3120
   12490:	010000b4 	movhi	r4,2
   12494:	2133aa04 	addi	r4,r4,-12632
   12498:	000fdc00 	call	fdc0 <OS_MemClr>
    pmem = &OSMemTbl[0];                                  /* Point to memory control block (MCB)       */
   1249c:	008000b4 	movhi	r2,2
   124a0:	10b3aa04 	addi	r2,r2,-12632
   124a4:	e0bffe15 	stw	r2,-8(fp)
    for (i = 0; i < (OS_MAX_MEM_PART - 1); i++) {         /* Init. list of free memory partitions      */
   124a8:	e03fff0d 	sth	zero,-4(fp)
   124ac:	00001606 	br	12508 <OS_MemInit+0x8c>
        pmem->OSMemFreeList = (void *)&OSMemTbl[i+1];     /* Chain list of free partitions             */
   124b0:	e0bfff0b 	ldhu	r2,-4(fp)
   124b4:	10800044 	addi	r2,r2,1
   124b8:	01400d04 	movi	r5,52
   124bc:	1009883a 	mov	r4,r2
   124c0:	000ad340 	call	ad34 <__mulsi3>
   124c4:	1007883a 	mov	r3,r2
   124c8:	008000b4 	movhi	r2,2
   124cc:	10b3aa04 	addi	r2,r2,-12632
   124d0:	1887883a 	add	r3,r3,r2
   124d4:	e0bffe17 	ldw	r2,-8(fp)
   124d8:	10c00115 	stw	r3,4(r2)
#if OS_MEM_NAME_SIZE > 1
        pmem->OSMemName[0]  = '?';                        /* Unknown name                              */
   124dc:	e0bffe17 	ldw	r2,-8(fp)
   124e0:	00c00fc4 	movi	r3,63
   124e4:	10c00505 	stb	r3,20(r2)
        pmem->OSMemName[1]  = OS_ASCII_NUL;
   124e8:	e0bffe17 	ldw	r2,-8(fp)
   124ec:	10000545 	stb	zero,21(r2)
#endif
        pmem++;
   124f0:	e0bffe17 	ldw	r2,-8(fp)
   124f4:	10800d04 	addi	r2,r2,52
   124f8:	e0bffe15 	stw	r2,-8(fp)
    INT16U   i;


    OS_MemClr((INT8U *)&OSMemTbl[0], sizeof(OSMemTbl));   /* Clear the memory partition table          */
    pmem = &OSMemTbl[0];                                  /* Point to memory control block (MCB)       */
    for (i = 0; i < (OS_MAX_MEM_PART - 1); i++) {         /* Init. list of free memory partitions      */
   124fc:	e0bfff0b 	ldhu	r2,-4(fp)
   12500:	10800044 	addi	r2,r2,1
   12504:	e0bfff0d 	sth	r2,-4(fp)
   12508:	e0bfff0b 	ldhu	r2,-4(fp)
   1250c:	10800ef0 	cmpltui	r2,r2,59
   12510:	103fe71e 	bne	r2,zero,124b0 <__alt_data_end+0xfffe24b0>
        pmem->OSMemName[0]  = '?';                        /* Unknown name                              */
        pmem->OSMemName[1]  = OS_ASCII_NUL;
#endif
        pmem++;
    }
    pmem->OSMemFreeList = (void *)0;                      /* Initialize last node                      */
   12514:	e0bffe17 	ldw	r2,-8(fp)
   12518:	10000115 	stw	zero,4(r2)
#if OS_MEM_NAME_SIZE > 1
    pmem->OSMemName[0]  = '?';                            /* Unknown name                              */
   1251c:	e0bffe17 	ldw	r2,-8(fp)
   12520:	00c00fc4 	movi	r3,63
   12524:	10c00505 	stb	r3,20(r2)
    pmem->OSMemName[1]  = OS_ASCII_NUL;
   12528:	e0bffe17 	ldw	r2,-8(fp)
   1252c:	10000545 	stb	zero,21(r2)
#endif

    OSMemFreeList       = &OSMemTbl[0];                   /* Point to beginning of free list           */
   12530:	008000b4 	movhi	r2,2
   12534:	10b3aa04 	addi	r2,r2,-12632
   12538:	d0a72a15 	stw	r2,-25432(gp)
#endif
}
   1253c:	0001883a 	nop
   12540:	e037883a 	mov	sp,fp
   12544:	dfc00117 	ldw	ra,4(sp)
   12548:	df000017 	ldw	fp,0(sp)
   1254c:	dec00204 	addi	sp,sp,8
   12550:	f800283a 	ret

00012554 <OSQAccept>:
*********************************************************************************************************
*/

#if OS_Q_ACCEPT_EN > 0
void  *OSQAccept (OS_EVENT *pevent, INT8U *perr)
{
   12554:	defff804 	addi	sp,sp,-32
   12558:	df000715 	stw	fp,28(sp)
   1255c:	df000704 	addi	fp,sp,28
   12560:	e13ffe15 	stw	r4,-8(fp)
   12564:	e17fff15 	stw	r5,-4(fp)
    void      *pmsg;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   12568:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
   1256c:	e0bfff17 	ldw	r2,-4(fp)
   12570:	1000021e 	bne	r2,zero,1257c <OSQAccept+0x28>
        return ((void *)0);
   12574:	0005883a 	mov	r2,zero
   12578:	00004206 	br	12684 <OSQAccept+0x130>
    }
    if (pevent == (OS_EVENT *)0) {               /* Validate 'pevent'                                  */
   1257c:	e0bffe17 	ldw	r2,-8(fp)
   12580:	1000051e 	bne	r2,zero,12598 <OSQAccept+0x44>
        *perr = OS_ERR_PEVENT_NULL;
   12584:	e0bfff17 	ldw	r2,-4(fp)
   12588:	00c00104 	movi	r3,4
   1258c:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
   12590:	0005883a 	mov	r2,zero
   12594:	00003b06 	br	12684 <OSQAccept+0x130>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {/* Validate event block type                          */
   12598:	e0bffe17 	ldw	r2,-8(fp)
   1259c:	10800003 	ldbu	r2,0(r2)
   125a0:	10803fcc 	andi	r2,r2,255
   125a4:	108000a0 	cmpeqi	r2,r2,2
   125a8:	1000051e 	bne	r2,zero,125c0 <OSQAccept+0x6c>
        *perr = OS_ERR_EVENT_TYPE;
   125ac:	e0bfff17 	ldw	r2,-4(fp)
   125b0:	00c00044 	movi	r3,1
   125b4:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
   125b8:	0005883a 	mov	r2,zero
   125bc:	00003106 	br	12684 <OSQAccept+0x130>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   125c0:	0005303a 	rdctl	r2,status
   125c4:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   125c8:	e0fffd17 	ldw	r3,-12(fp)
   125cc:	00bfff84 	movi	r2,-2
   125d0:	1884703a 	and	r2,r3,r2
   125d4:	1001703a 	wrctl	status,r2
  
  return context;
   125d8:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
   125dc:	e0bffa15 	stw	r2,-24(fp)
    pq = (OS_Q *)pevent->OSEventPtr;             /* Point at queue control block                       */
   125e0:	e0bffe17 	ldw	r2,-8(fp)
   125e4:	10800117 	ldw	r2,4(r2)
   125e8:	e0bffc15 	stw	r2,-16(fp)
    if (pq->OSQEntries > 0) {                    /* See if any messages in the queue                   */
   125ec:	e0bffc17 	ldw	r2,-16(fp)
   125f0:	1080058b 	ldhu	r2,22(r2)
   125f4:	10bfffcc 	andi	r2,r2,65535
   125f8:	10001926 	beq	r2,zero,12660 <OSQAccept+0x10c>
        pmsg = *pq->OSQOut++;                    /* Yes, extract oldest message from the queue         */
   125fc:	e0bffc17 	ldw	r2,-16(fp)
   12600:	10800417 	ldw	r2,16(r2)
   12604:	11000104 	addi	r4,r2,4
   12608:	e0fffc17 	ldw	r3,-16(fp)
   1260c:	19000415 	stw	r4,16(r3)
   12610:	10800017 	ldw	r2,0(r2)
   12614:	e0bff915 	stw	r2,-28(fp)
        pq->OSQEntries--;                        /* Update the number of entries in the queue          */
   12618:	e0bffc17 	ldw	r2,-16(fp)
   1261c:	1080058b 	ldhu	r2,22(r2)
   12620:	10bfffc4 	addi	r2,r2,-1
   12624:	1007883a 	mov	r3,r2
   12628:	e0bffc17 	ldw	r2,-16(fp)
   1262c:	10c0058d 	sth	r3,22(r2)
        if (pq->OSQOut == pq->OSQEnd) {          /* Wrap OUT pointer if we are at the end of the queue */
   12630:	e0bffc17 	ldw	r2,-16(fp)
   12634:	10c00417 	ldw	r3,16(r2)
   12638:	e0bffc17 	ldw	r2,-16(fp)
   1263c:	10800217 	ldw	r2,8(r2)
   12640:	1880041e 	bne	r3,r2,12654 <OSQAccept+0x100>
            pq->OSQOut = pq->OSQStart;
   12644:	e0bffc17 	ldw	r2,-16(fp)
   12648:	10c00117 	ldw	r3,4(r2)
   1264c:	e0bffc17 	ldw	r2,-16(fp)
   12650:	10c00415 	stw	r3,16(r2)
        }
        *perr = OS_ERR_NONE;
   12654:	e0bfff17 	ldw	r2,-4(fp)
   12658:	10000005 	stb	zero,0(r2)
   1265c:	00000406 	br	12670 <OSQAccept+0x11c>
    } else {
        *perr = OS_ERR_Q_EMPTY;
   12660:	e0bfff17 	ldw	r2,-4(fp)
   12664:	00c007c4 	movi	r3,31
   12668:	10c00005 	stb	r3,0(r2)
        pmsg  = (void *)0;                       /* Queue is empty                                     */
   1266c:	e03ff915 	stw	zero,-28(fp)
   12670:	e0bffa17 	ldw	r2,-24(fp)
   12674:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   12678:	e0bffb17 	ldw	r2,-20(fp)
   1267c:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (pmsg);                               /* Return message received (or NULL)                  */
   12680:	e0bff917 	ldw	r2,-28(fp)
}
   12684:	e037883a 	mov	sp,fp
   12688:	df000017 	ldw	fp,0(sp)
   1268c:	dec00104 	addi	sp,sp,4
   12690:	f800283a 	ret

00012694 <OSQCreate>:
*              == (OS_EVENT *)0  if no event control blocks were available or an error was detected
*********************************************************************************************************
*/

OS_EVENT  *OSQCreate (void **start, INT16U size)
{
   12694:	defff404 	addi	sp,sp,-48
   12698:	dfc00b15 	stw	ra,44(sp)
   1269c:	df000a15 	stw	fp,40(sp)
   126a0:	df000a04 	addi	fp,sp,40
   126a4:	e13ffe15 	stw	r4,-8(fp)
   126a8:	2805883a 	mov	r2,r5
   126ac:	e0bfff0d 	sth	r2,-4(fp)
    OS_EVENT  *pevent;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   126b0:	e03ff715 	stw	zero,-36(fp)
#endif



    if (OSIntNesting > 0) {                      /* See if called from ISR ...                         */
   126b4:	d0a72f03 	ldbu	r2,-25412(gp)
   126b8:	10803fcc 	andi	r2,r2,255
   126bc:	10000226 	beq	r2,zero,126c8 <OSQCreate+0x34>
        return ((OS_EVENT *)0);                  /* ... can't CREATE from an ISR                       */
   126c0:	0005883a 	mov	r2,zero
   126c4:	00005906 	br	1282c <OSQCreate+0x198>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   126c8:	0005303a 	rdctl	r2,status
   126cc:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   126d0:	e0fffd17 	ldw	r3,-12(fp)
   126d4:	00bfff84 	movi	r2,-2
   126d8:	1884703a 	and	r2,r3,r2
   126dc:	1001703a 	wrctl	status,r2
  
  return context;
   126e0:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
   126e4:	e0bff715 	stw	r2,-36(fp)
    pevent = OSEventFreeList;                    /* Get next free event control block                  */
   126e8:	d0a72e17 	ldw	r2,-25416(gp)
   126ec:	e0bff615 	stw	r2,-40(fp)
    if (OSEventFreeList != (OS_EVENT *)0) {      /* See if pool of free ECB pool was empty             */
   126f0:	d0a72e17 	ldw	r2,-25416(gp)
   126f4:	10000326 	beq	r2,zero,12704 <OSQCreate+0x70>
        OSEventFreeList = (OS_EVENT *)OSEventFreeList->OSEventPtr;
   126f8:	d0a72e17 	ldw	r2,-25416(gp)
   126fc:	10800117 	ldw	r2,4(r2)
   12700:	d0a72e15 	stw	r2,-25416(gp)
   12704:	e0bff717 	ldw	r2,-36(fp)
   12708:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1270c:	e0bff817 	ldw	r2,-32(fp)
   12710:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    if (pevent != (OS_EVENT *)0) {               /* See if we have an event control block              */
   12714:	e0bff617 	ldw	r2,-40(fp)
   12718:	10004326 	beq	r2,zero,12828 <OSQCreate+0x194>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1271c:	0005303a 	rdctl	r2,status
   12720:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   12724:	e0fff917 	ldw	r3,-28(fp)
   12728:	00bfff84 	movi	r2,-2
   1272c:	1884703a 	and	r2,r3,r2
   12730:	1001703a 	wrctl	status,r2
  
  return context;
   12734:	e0bff917 	ldw	r2,-28(fp)
        OS_ENTER_CRITICAL();
   12738:	e0bff715 	stw	r2,-36(fp)
        pq = OSQFreeList;                        /* Get a free queue control block                     */
   1273c:	d0a72c17 	ldw	r2,-25424(gp)
   12740:	e0bffb15 	stw	r2,-20(fp)
        if (pq != (OS_Q *)0) {                   /* Were we able to get a queue control block ?        */
   12744:	e0bffb17 	ldw	r2,-20(fp)
   12748:	10002d26 	beq	r2,zero,12800 <OSQCreate+0x16c>
            OSQFreeList            = OSQFreeList->OSQPtr; /* Yes, Adjust free list pointer to next free*/
   1274c:	d0a72c17 	ldw	r2,-25424(gp)
   12750:	10800017 	ldw	r2,0(r2)
   12754:	d0a72c15 	stw	r2,-25424(gp)
   12758:	e0bff717 	ldw	r2,-36(fp)
   1275c:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   12760:	e0bffa17 	ldw	r2,-24(fp)
   12764:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
            pq->OSQStart           = start;               /*      Initialize the queue                 */
   12768:	e0bffb17 	ldw	r2,-20(fp)
   1276c:	e0fffe17 	ldw	r3,-8(fp)
   12770:	10c00115 	stw	r3,4(r2)
            pq->OSQEnd             = &start[size];
   12774:	e0bfff0b 	ldhu	r2,-4(fp)
   12778:	1085883a 	add	r2,r2,r2
   1277c:	1085883a 	add	r2,r2,r2
   12780:	1007883a 	mov	r3,r2
   12784:	e0bffe17 	ldw	r2,-8(fp)
   12788:	10c7883a 	add	r3,r2,r3
   1278c:	e0bffb17 	ldw	r2,-20(fp)
   12790:	10c00215 	stw	r3,8(r2)
            pq->OSQIn              = start;
   12794:	e0bffb17 	ldw	r2,-20(fp)
   12798:	e0fffe17 	ldw	r3,-8(fp)
   1279c:	10c00315 	stw	r3,12(r2)
            pq->OSQOut             = start;
   127a0:	e0bffb17 	ldw	r2,-20(fp)
   127a4:	e0fffe17 	ldw	r3,-8(fp)
   127a8:	10c00415 	stw	r3,16(r2)
            pq->OSQSize            = size;
   127ac:	e0bffb17 	ldw	r2,-20(fp)
   127b0:	e0ffff0b 	ldhu	r3,-4(fp)
   127b4:	10c0050d 	sth	r3,20(r2)
            pq->OSQEntries         = 0;
   127b8:	e0bffb17 	ldw	r2,-20(fp)
   127bc:	1000058d 	sth	zero,22(r2)
            pevent->OSEventType    = OS_EVENT_TYPE_Q;
   127c0:	e0bff617 	ldw	r2,-40(fp)
   127c4:	00c00084 	movi	r3,2
   127c8:	10c00005 	stb	r3,0(r2)
            pevent->OSEventCnt     = 0;
   127cc:	e0bff617 	ldw	r2,-40(fp)
   127d0:	1000020d 	sth	zero,8(r2)
            pevent->OSEventPtr     = pq;
   127d4:	e0bff617 	ldw	r2,-40(fp)
   127d8:	e0fffb17 	ldw	r3,-20(fp)
   127dc:	10c00115 	stw	r3,4(r2)
#if OS_EVENT_NAME_SIZE > 1
            pevent->OSEventName[0] = '?';                  /* Unknown name                             */
   127e0:	e0bff617 	ldw	r2,-40(fp)
   127e4:	00c00fc4 	movi	r3,63
   127e8:	10c00385 	stb	r3,14(r2)
            pevent->OSEventName[1] = OS_ASCII_NUL;
   127ec:	e0bff617 	ldw	r2,-40(fp)
   127f0:	100003c5 	stb	zero,15(r2)
#endif
            OS_EventWaitListInit(pevent);                 /*      Initalize the wait list              */
   127f4:	e13ff617 	ldw	r4,-40(fp)
   127f8:	000f9e00 	call	f9e0 <OS_EventWaitListInit>
   127fc:	00000a06 	br	12828 <OSQCreate+0x194>
        } else {
            pevent->OSEventPtr = (void *)OSEventFreeList; /* No,  Return event control block on error  */
   12800:	d0e72e17 	ldw	r3,-25416(gp)
   12804:	e0bff617 	ldw	r2,-40(fp)
   12808:	10c00115 	stw	r3,4(r2)
            OSEventFreeList    = pevent;
   1280c:	e0bff617 	ldw	r2,-40(fp)
   12810:	d0a72e15 	stw	r2,-25416(gp)
   12814:	e0bff717 	ldw	r2,-36(fp)
   12818:	e0bffc15 	stw	r2,-16(fp)
   1281c:	e0bffc17 	ldw	r2,-16(fp)
   12820:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
            pevent = (OS_EVENT *)0;
   12824:	e03ff615 	stw	zero,-40(fp)
        }
    }
    return (pevent);
   12828:	e0bff617 	ldw	r2,-40(fp)
}
   1282c:	e037883a 	mov	sp,fp
   12830:	dfc00117 	ldw	ra,4(sp)
   12834:	df000017 	ldw	fp,0(sp)
   12838:	dec00204 	addi	sp,sp,8
   1283c:	f800283a 	ret

00012840 <OSQDel>:
*********************************************************************************************************
*/

#if OS_Q_DEL_EN > 0
OS_EVENT  *OSQDel (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
   12840:	defff204 	addi	sp,sp,-56
   12844:	dfc00d15 	stw	ra,52(sp)
   12848:	df000c15 	stw	fp,48(sp)
   1284c:	df000c04 	addi	fp,sp,48
   12850:	e13ffd15 	stw	r4,-12(fp)
   12854:	2805883a 	mov	r2,r5
   12858:	e1bfff15 	stw	r6,-4(fp)
   1285c:	e0bffe05 	stb	r2,-8(fp)
    BOOLEAN    tasks_waiting;
    OS_EVENT  *pevent_return;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
   12860:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
   12864:	e0bfff17 	ldw	r2,-4(fp)
   12868:	1000021e 	bne	r2,zero,12874 <OSQDel+0x34>
        return (pevent);
   1286c:	e0bffd17 	ldw	r2,-12(fp)
   12870:	00008e06 	br	12aac <OSQDel+0x26c>
    }
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
   12874:	e0bffd17 	ldw	r2,-12(fp)
   12878:	1000051e 	bne	r2,zero,12890 <OSQDel+0x50>
        *perr = OS_ERR_PEVENT_NULL;
   1287c:	e0bfff17 	ldw	r2,-4(fp)
   12880:	00c00104 	movi	r3,4
   12884:	10c00005 	stb	r3,0(r2)
        return (pevent);
   12888:	e0bffd17 	ldw	r2,-12(fp)
   1288c:	00008706 	br	12aac <OSQDel+0x26c>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {          /* Validate event block type                */
   12890:	e0bffd17 	ldw	r2,-12(fp)
   12894:	10800003 	ldbu	r2,0(r2)
   12898:	10803fcc 	andi	r2,r2,255
   1289c:	108000a0 	cmpeqi	r2,r2,2
   128a0:	1000051e 	bne	r2,zero,128b8 <OSQDel+0x78>
        *perr = OS_ERR_EVENT_TYPE;
   128a4:	e0bfff17 	ldw	r2,-4(fp)
   128a8:	00c00044 	movi	r3,1
   128ac:	10c00005 	stb	r3,0(r2)
        return (pevent);
   128b0:	e0bffd17 	ldw	r2,-12(fp)
   128b4:	00007d06 	br	12aac <OSQDel+0x26c>
    }
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
   128b8:	d0a72f03 	ldbu	r2,-25412(gp)
   128bc:	10803fcc 	andi	r2,r2,255
   128c0:	10000526 	beq	r2,zero,128d8 <OSQDel+0x98>
        *perr = OS_ERR_DEL_ISR;                            /* ... can't DELETE from an ISR             */
   128c4:	e0bfff17 	ldw	r2,-4(fp)
   128c8:	00c003c4 	movi	r3,15
   128cc:	10c00005 	stb	r3,0(r2)
        return (pevent);
   128d0:	e0bffd17 	ldw	r2,-12(fp)
   128d4:	00007506 	br	12aac <OSQDel+0x26c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   128d8:	0005303a 	rdctl	r2,status
   128dc:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   128e0:	e0fffc17 	ldw	r3,-16(fp)
   128e4:	00bfff84 	movi	r2,-2
   128e8:	1884703a 	and	r2,r3,r2
   128ec:	1001703a 	wrctl	status,r2
  
  return context;
   128f0:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
   128f4:	e0bff615 	stw	r2,-40(fp)
    if (pevent->OSEventGrp != 0) {                         /* See if any tasks waiting on queue        */
   128f8:	e0bffd17 	ldw	r2,-12(fp)
   128fc:	10800283 	ldbu	r2,10(r2)
   12900:	10803fcc 	andi	r2,r2,255
   12904:	10000326 	beq	r2,zero,12914 <OSQDel+0xd4>
        tasks_waiting = OS_TRUE;                           /* Yes                                      */
   12908:	00800044 	movi	r2,1
   1290c:	e0bff405 	stb	r2,-48(fp)
   12910:	00000106 	br	12918 <OSQDel+0xd8>
    } else {
        tasks_waiting = OS_FALSE;                          /* No                                       */
   12914:	e03ff405 	stb	zero,-48(fp)
    }
    switch (opt) {
   12918:	e0bffe03 	ldbu	r2,-8(fp)
   1291c:	10000326 	beq	r2,zero,1292c <OSQDel+0xec>
   12920:	10800060 	cmpeqi	r2,r2,1
   12924:	1000301e 	bne	r2,zero,129e8 <OSQDel+0x1a8>
   12928:	00005506 	br	12a80 <OSQDel+0x240>
        case OS_DEL_NO_PEND:                               /* Delete queue only if no task waiting     */
             if (tasks_waiting == OS_FALSE) {
   1292c:	e0bff403 	ldbu	r2,-48(fp)
   12930:	10001e1e 	bne	r2,zero,129ac <OSQDel+0x16c>
#if OS_EVENT_NAME_SIZE > 1
                 pevent->OSEventName[0] = '?';             /* Unknown name                             */
   12934:	e0bffd17 	ldw	r2,-12(fp)
   12938:	00c00fc4 	movi	r3,63
   1293c:	10c00385 	stb	r3,14(r2)
                 pevent->OSEventName[1] = OS_ASCII_NUL;
   12940:	e0bffd17 	ldw	r2,-12(fp)
   12944:	100003c5 	stb	zero,15(r2)
#endif
                 pq                     = (OS_Q *)pevent->OSEventPtr;  /* Return OS_Q to free list     */
   12948:	e0bffd17 	ldw	r2,-12(fp)
   1294c:	10800117 	ldw	r2,4(r2)
   12950:	e0bff815 	stw	r2,-32(fp)
                 pq->OSQPtr             = OSQFreeList;
   12954:	d0e72c17 	ldw	r3,-25424(gp)
   12958:	e0bff817 	ldw	r2,-32(fp)
   1295c:	10c00015 	stw	r3,0(r2)
                 OSQFreeList            = pq;
   12960:	e0bff817 	ldw	r2,-32(fp)
   12964:	d0a72c15 	stw	r2,-25424(gp)
                 pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
   12968:	e0bffd17 	ldw	r2,-12(fp)
   1296c:	10000005 	stb	zero,0(r2)
                 pevent->OSEventPtr     = OSEventFreeList; /* Return Event Control Block to free list  */
   12970:	d0e72e17 	ldw	r3,-25416(gp)
   12974:	e0bffd17 	ldw	r2,-12(fp)
   12978:	10c00115 	stw	r3,4(r2)
                 pevent->OSEventCnt     = 0;
   1297c:	e0bffd17 	ldw	r2,-12(fp)
   12980:	1000020d 	sth	zero,8(r2)
                 OSEventFreeList        = pevent;          /* Get next free event control block        */
   12984:	e0bffd17 	ldw	r2,-12(fp)
   12988:	d0a72e15 	stw	r2,-25416(gp)
   1298c:	e0bff617 	ldw	r2,-40(fp)
   12990:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   12994:	e0bff717 	ldw	r2,-36(fp)
   12998:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_NONE;
   1299c:	e0bfff17 	ldw	r2,-4(fp)
   129a0:	10000005 	stb	zero,0(r2)
                 pevent_return          = (OS_EVENT *)0;   /* Queue has been deleted                   */
   129a4:	e03ff515 	stw	zero,-44(fp)
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_TASK_WAITING;
                 pevent_return          = pevent;
             }
             break;
   129a8:	00003f06 	br	12aa8 <OSQDel+0x268>
   129ac:	e0bff617 	ldw	r2,-40(fp)
   129b0:	e0bff915 	stw	r2,-28(fp)
   129b4:	e0bff917 	ldw	r2,-28(fp)
   129b8:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_NONE;
                 pevent_return          = (OS_EVENT *)0;   /* Queue has been deleted                   */
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_TASK_WAITING;
   129bc:	e0bfff17 	ldw	r2,-4(fp)
   129c0:	00c01244 	movi	r3,73
   129c4:	10c00005 	stb	r3,0(r2)
                 pevent_return          = pevent;
   129c8:	e0bffd17 	ldw	r2,-12(fp)
   129cc:	e0bff515 	stw	r2,-44(fp)
             }
             break;
   129d0:	00003506 	br	12aa8 <OSQDel+0x268>

        case OS_DEL_ALWAYS:                                /* Always delete the queue                  */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for queue        */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_OK);
   129d4:	000f883a 	mov	r7,zero
   129d8:	01800104 	movi	r6,4
   129dc:	000b883a 	mov	r5,zero
   129e0:	e13ffd17 	ldw	r4,-12(fp)
   129e4:	000f4300 	call	f430 <OS_EventTaskRdy>
                 pevent_return          = pevent;
             }
             break;

        case OS_DEL_ALWAYS:                                /* Always delete the queue                  */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for queue        */
   129e8:	e0bffd17 	ldw	r2,-12(fp)
   129ec:	10800283 	ldbu	r2,10(r2)
   129f0:	10803fcc 	andi	r2,r2,255
   129f4:	103ff71e 	bne	r2,zero,129d4 <__alt_data_end+0xfffe29d4>
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_OK);
             }
#if OS_EVENT_NAME_SIZE > 1
             pevent->OSEventName[0] = '?';                 /* Unknown name                             */
   129f8:	e0bffd17 	ldw	r2,-12(fp)
   129fc:	00c00fc4 	movi	r3,63
   12a00:	10c00385 	stb	r3,14(r2)
             pevent->OSEventName[1] = OS_ASCII_NUL;
   12a04:	e0bffd17 	ldw	r2,-12(fp)
   12a08:	100003c5 	stb	zero,15(r2)
#endif
             pq                     = (OS_Q *)pevent->OSEventPtr;   /* Return OS_Q to free list        */
   12a0c:	e0bffd17 	ldw	r2,-12(fp)
   12a10:	10800117 	ldw	r2,4(r2)
   12a14:	e0bff815 	stw	r2,-32(fp)
             pq->OSQPtr             = OSQFreeList;
   12a18:	d0e72c17 	ldw	r3,-25424(gp)
   12a1c:	e0bff817 	ldw	r2,-32(fp)
   12a20:	10c00015 	stw	r3,0(r2)
             OSQFreeList            = pq;
   12a24:	e0bff817 	ldw	r2,-32(fp)
   12a28:	d0a72c15 	stw	r2,-25424(gp)
             pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
   12a2c:	e0bffd17 	ldw	r2,-12(fp)
   12a30:	10000005 	stb	zero,0(r2)
             pevent->OSEventPtr     = OSEventFreeList;     /* Return Event Control Block to free list  */
   12a34:	d0e72e17 	ldw	r3,-25416(gp)
   12a38:	e0bffd17 	ldw	r2,-12(fp)
   12a3c:	10c00115 	stw	r3,4(r2)
             pevent->OSEventCnt     = 0;
   12a40:	e0bffd17 	ldw	r2,-12(fp)
   12a44:	1000020d 	sth	zero,8(r2)
             OSEventFreeList        = pevent;              /* Get next free event control block        */
   12a48:	e0bffd17 	ldw	r2,-12(fp)
   12a4c:	d0a72e15 	stw	r2,-25416(gp)
   12a50:	e0bff617 	ldw	r2,-40(fp)
   12a54:	e0bffa15 	stw	r2,-24(fp)
   12a58:	e0bffa17 	ldw	r2,-24(fp)
   12a5c:	1001703a 	wrctl	status,r2
             OS_EXIT_CRITICAL();
             if (tasks_waiting == OS_TRUE) {               /* Reschedule only if task(s) were waiting  */
   12a60:	e0bff403 	ldbu	r2,-48(fp)
   12a64:	10800058 	cmpnei	r2,r2,1
   12a68:	1000011e 	bne	r2,zero,12a70 <OSQDel+0x230>
                 OS_Sched();                               /* Find highest priority task ready to run  */
   12a6c:	000fe7c0 	call	fe7c <OS_Sched>
             }
             *perr                  = OS_ERR_NONE;
   12a70:	e0bfff17 	ldw	r2,-4(fp)
   12a74:	10000005 	stb	zero,0(r2)
             pevent_return          = (OS_EVENT *)0;       /* Queue has been deleted                   */
   12a78:	e03ff515 	stw	zero,-44(fp)
             break;
   12a7c:	00000a06 	br	12aa8 <OSQDel+0x268>
   12a80:	e0bff617 	ldw	r2,-40(fp)
   12a84:	e0bffb15 	stw	r2,-20(fp)
   12a88:	e0bffb17 	ldw	r2,-20(fp)
   12a8c:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();
             *perr                  = OS_ERR_INVALID_OPT;
   12a90:	e0bfff17 	ldw	r2,-4(fp)
   12a94:	00c001c4 	movi	r3,7
   12a98:	10c00005 	stb	r3,0(r2)
             pevent_return          = pevent;
   12a9c:	e0bffd17 	ldw	r2,-12(fp)
   12aa0:	e0bff515 	stw	r2,-44(fp)
             break;
   12aa4:	0001883a 	nop
    }
    return (pevent_return);
   12aa8:	e0bff517 	ldw	r2,-44(fp)
}
   12aac:	e037883a 	mov	sp,fp
   12ab0:	dfc00117 	ldw	ra,4(sp)
   12ab4:	df000017 	ldw	fp,0(sp)
   12ab8:	dec00204 	addi	sp,sp,8
   12abc:	f800283a 	ret

00012ac0 <OSQFlush>:
*********************************************************************************************************
*/

#if OS_Q_FLUSH_EN > 0
INT8U  OSQFlush (OS_EVENT *pevent)
{
   12ac0:	defffa04 	addi	sp,sp,-24
   12ac4:	df000515 	stw	fp,20(sp)
   12ac8:	df000504 	addi	fp,sp,20
   12acc:	e13fff15 	stw	r4,-4(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   12ad0:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
   12ad4:	e0bfff17 	ldw	r2,-4(fp)
   12ad8:	1000021e 	bne	r2,zero,12ae4 <OSQFlush+0x24>
        return (OS_ERR_PEVENT_NULL);
   12adc:	00800104 	movi	r2,4
   12ae0:	00002106 	br	12b68 <OSQFlush+0xa8>
    }
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {     /* Validate event block type                     */
   12ae4:	e0bfff17 	ldw	r2,-4(fp)
   12ae8:	10800003 	ldbu	r2,0(r2)
   12aec:	10803fcc 	andi	r2,r2,255
   12af0:	108000a0 	cmpeqi	r2,r2,2
   12af4:	1000021e 	bne	r2,zero,12b00 <OSQFlush+0x40>
        return (OS_ERR_EVENT_TYPE);
   12af8:	00800044 	movi	r2,1
   12afc:	00001a06 	br	12b68 <OSQFlush+0xa8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   12b00:	0005303a 	rdctl	r2,status
   12b04:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   12b08:	e0fffd17 	ldw	r3,-12(fp)
   12b0c:	00bfff84 	movi	r2,-2
   12b10:	1884703a 	and	r2,r3,r2
   12b14:	1001703a 	wrctl	status,r2
  
  return context;
   12b18:	e0bffd17 	ldw	r2,-12(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   12b1c:	e0bffb15 	stw	r2,-20(fp)
    pq             = (OS_Q *)pevent->OSEventPtr;      /* Point to queue storage structure              */
   12b20:	e0bfff17 	ldw	r2,-4(fp)
   12b24:	10800117 	ldw	r2,4(r2)
   12b28:	e0bffc15 	stw	r2,-16(fp)
    pq->OSQIn      = pq->OSQStart;
   12b2c:	e0bffc17 	ldw	r2,-16(fp)
   12b30:	10c00117 	ldw	r3,4(r2)
   12b34:	e0bffc17 	ldw	r2,-16(fp)
   12b38:	10c00315 	stw	r3,12(r2)
    pq->OSQOut     = pq->OSQStart;
   12b3c:	e0bffc17 	ldw	r2,-16(fp)
   12b40:	10c00117 	ldw	r3,4(r2)
   12b44:	e0bffc17 	ldw	r2,-16(fp)
   12b48:	10c00415 	stw	r3,16(r2)
    pq->OSQEntries = 0;
   12b4c:	e0bffc17 	ldw	r2,-16(fp)
   12b50:	1000058d 	sth	zero,22(r2)
   12b54:	e0bffb17 	ldw	r2,-20(fp)
   12b58:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   12b5c:	e0bffe17 	ldw	r2,-8(fp)
   12b60:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
   12b64:	0005883a 	mov	r2,zero
}
   12b68:	e037883a 	mov	sp,fp
   12b6c:	df000017 	ldw	fp,0(sp)
   12b70:	dec00104 	addi	sp,sp,4
   12b74:	f800283a 	ret

00012b78 <OSQPend>:
* Note(s)    : As of V2.60, this function allows you to receive NULL pointer messages.
*********************************************************************************************************
*/

void  *OSQPend (OS_EVENT *pevent, INT16U timeout, INT8U *perr)
{
   12b78:	defff304 	addi	sp,sp,-52
   12b7c:	dfc00c15 	stw	ra,48(sp)
   12b80:	df000b15 	stw	fp,44(sp)
   12b84:	df000b04 	addi	fp,sp,44
   12b88:	e13ffd15 	stw	r4,-12(fp)
   12b8c:	2805883a 	mov	r2,r5
   12b90:	e1bfff15 	stw	r6,-4(fp)
   12b94:	e0bffe0d 	sth	r2,-8(fp)
    void      *pmsg;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   12b98:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
   12b9c:	e0bfff17 	ldw	r2,-4(fp)
   12ba0:	1000021e 	bne	r2,zero,12bac <OSQPend+0x34>
        return ((void *)0);
   12ba4:	0005883a 	mov	r2,zero
   12ba8:	00009106 	br	12df0 <OSQPend+0x278>
    }
    if (pevent == (OS_EVENT *)0) {               /* Validate 'pevent'                                  */
   12bac:	e0bffd17 	ldw	r2,-12(fp)
   12bb0:	1000051e 	bne	r2,zero,12bc8 <OSQPend+0x50>
        *perr = OS_ERR_PEVENT_NULL;
   12bb4:	e0bfff17 	ldw	r2,-4(fp)
   12bb8:	00c00104 	movi	r3,4
   12bbc:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
   12bc0:	0005883a 	mov	r2,zero
   12bc4:	00008a06 	br	12df0 <OSQPend+0x278>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {/* Validate event block type                          */
   12bc8:	e0bffd17 	ldw	r2,-12(fp)
   12bcc:	10800003 	ldbu	r2,0(r2)
   12bd0:	10803fcc 	andi	r2,r2,255
   12bd4:	108000a0 	cmpeqi	r2,r2,2
   12bd8:	1000051e 	bne	r2,zero,12bf0 <OSQPend+0x78>
        *perr = OS_ERR_EVENT_TYPE;
   12bdc:	e0bfff17 	ldw	r2,-4(fp)
   12be0:	00c00044 	movi	r3,1
   12be4:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
   12be8:	0005883a 	mov	r2,zero
   12bec:	00008006 	br	12df0 <OSQPend+0x278>
    }
    if (OSIntNesting > 0) {                      /* See if called from ISR ...                         */
   12bf0:	d0a72f03 	ldbu	r2,-25412(gp)
   12bf4:	10803fcc 	andi	r2,r2,255
   12bf8:	10000526 	beq	r2,zero,12c10 <OSQPend+0x98>
        *perr = OS_ERR_PEND_ISR;                 /* ... can't PEND from an ISR                         */
   12bfc:	e0bfff17 	ldw	r2,-4(fp)
   12c00:	00c00084 	movi	r3,2
   12c04:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
   12c08:	0005883a 	mov	r2,zero
   12c0c:	00007806 	br	12df0 <OSQPend+0x278>
    }
    if (OSLockNesting > 0) {                     /* See if called with scheduler locked ...            */
   12c10:	d0a72103 	ldbu	r2,-25468(gp)
   12c14:	10803fcc 	andi	r2,r2,255
   12c18:	10000526 	beq	r2,zero,12c30 <OSQPend+0xb8>
        *perr = OS_ERR_PEND_LOCKED;              /* ... can't PEND when locked                         */
   12c1c:	e0bfff17 	ldw	r2,-4(fp)
   12c20:	00c00344 	movi	r3,13
   12c24:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
   12c28:	0005883a 	mov	r2,zero
   12c2c:	00007006 	br	12df0 <OSQPend+0x278>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   12c30:	0005303a 	rdctl	r2,status
   12c34:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   12c38:	e0fffc17 	ldw	r3,-16(fp)
   12c3c:	00bfff84 	movi	r2,-2
   12c40:	1884703a 	and	r2,r3,r2
   12c44:	1001703a 	wrctl	status,r2
  
  return context;
   12c48:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
   12c4c:	e0bff615 	stw	r2,-40(fp)
    pq = (OS_Q *)pevent->OSEventPtr;             /* Point at queue control block                       */
   12c50:	e0bffd17 	ldw	r2,-12(fp)
   12c54:	10800117 	ldw	r2,4(r2)
   12c58:	e0bff815 	stw	r2,-32(fp)
    if (pq->OSQEntries > 0) {                    /* See if any messages in the queue                   */
   12c5c:	e0bff817 	ldw	r2,-32(fp)
   12c60:	1080058b 	ldhu	r2,22(r2)
   12c64:	10bfffcc 	andi	r2,r2,65535
   12c68:	10001e26 	beq	r2,zero,12ce4 <OSQPend+0x16c>
        pmsg = *pq->OSQOut++;                    /* Yes, extract oldest message from the queue         */
   12c6c:	e0bff817 	ldw	r2,-32(fp)
   12c70:	10800417 	ldw	r2,16(r2)
   12c74:	11000104 	addi	r4,r2,4
   12c78:	e0fff817 	ldw	r3,-32(fp)
   12c7c:	19000415 	stw	r4,16(r3)
   12c80:	10800017 	ldw	r2,0(r2)
   12c84:	e0bff515 	stw	r2,-44(fp)
        pq->OSQEntries--;                        /* Update the number of entries in the queue          */
   12c88:	e0bff817 	ldw	r2,-32(fp)
   12c8c:	1080058b 	ldhu	r2,22(r2)
   12c90:	10bfffc4 	addi	r2,r2,-1
   12c94:	1007883a 	mov	r3,r2
   12c98:	e0bff817 	ldw	r2,-32(fp)
   12c9c:	10c0058d 	sth	r3,22(r2)
        if (pq->OSQOut == pq->OSQEnd) {          /* Wrap OUT pointer if we are at the end of the queue */
   12ca0:	e0bff817 	ldw	r2,-32(fp)
   12ca4:	10c00417 	ldw	r3,16(r2)
   12ca8:	e0bff817 	ldw	r2,-32(fp)
   12cac:	10800217 	ldw	r2,8(r2)
   12cb0:	1880041e 	bne	r3,r2,12cc4 <OSQPend+0x14c>
            pq->OSQOut = pq->OSQStart;
   12cb4:	e0bff817 	ldw	r2,-32(fp)
   12cb8:	10c00117 	ldw	r3,4(r2)
   12cbc:	e0bff817 	ldw	r2,-32(fp)
   12cc0:	10c00415 	stw	r3,16(r2)
   12cc4:	e0bff617 	ldw	r2,-40(fp)
   12cc8:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   12ccc:	e0bff717 	ldw	r2,-36(fp)
   12cd0:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_NONE;
   12cd4:	e0bfff17 	ldw	r2,-4(fp)
   12cd8:	10000005 	stb	zero,0(r2)
        return (pmsg);                           /* Return message received                            */
   12cdc:	e0bff517 	ldw	r2,-44(fp)
   12ce0:	00004306 	br	12df0 <OSQPend+0x278>
    }
    OSTCBCur->OSTCBStat     |= OS_STAT_Q;        /* Task will have to pend for a message to be posted  */
   12ce4:	d0a73017 	ldw	r2,-25408(gp)
   12ce8:	d0e73017 	ldw	r3,-25408(gp)
   12cec:	18c00c03 	ldbu	r3,48(r3)
   12cf0:	18c00114 	ori	r3,r3,4
   12cf4:	10c00c05 	stb	r3,48(r2)
    OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
   12cf8:	d0a73017 	ldw	r2,-25408(gp)
   12cfc:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly       = timeout;          /* Load timeout into TCB                              */
   12d00:	d0a73017 	ldw	r2,-25408(gp)
   12d04:	e0fffe0b 	ldhu	r3,-8(fp)
   12d08:	10c00b8d 	sth	r3,46(r2)
    OS_EventTaskWait(pevent);                    /* Suspend task until event or timeout occurs         */
   12d0c:	e13ffd17 	ldw	r4,-12(fp)
   12d10:	000f5c80 	call	f5c8 <OS_EventTaskWait>
   12d14:	e0bff617 	ldw	r2,-40(fp)
   12d18:	e0bffb15 	stw	r2,-20(fp)
   12d1c:	e0bffb17 	ldw	r2,-20(fp)
   12d20:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OS_Sched();                                  /* Find next highest priority task ready to run       */
   12d24:	000fe7c0 	call	fe7c <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   12d28:	0005303a 	rdctl	r2,status
   12d2c:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   12d30:	e0fff917 	ldw	r3,-28(fp)
   12d34:	00bfff84 	movi	r2,-2
   12d38:	1884703a 	and	r2,r3,r2
   12d3c:	1001703a 	wrctl	status,r2
  
  return context;
   12d40:	e0bff917 	ldw	r2,-28(fp)
    OS_ENTER_CRITICAL();
   12d44:	e0bff615 	stw	r2,-40(fp)
    switch (OSTCBCur->OSTCBStatPend) {                /* See if we timed-out or aborted                */
   12d48:	d0a73017 	ldw	r2,-25408(gp)
   12d4c:	10800c43 	ldbu	r2,49(r2)
   12d50:	10803fcc 	andi	r2,r2,255
   12d54:	10000326 	beq	r2,zero,12d64 <OSQPend+0x1ec>
   12d58:	108000a0 	cmpeqi	r2,r2,2
   12d5c:	1000071e 	bne	r2,zero,12d7c <OSQPend+0x204>
   12d60:	00000b06 	br	12d90 <OSQPend+0x218>
        case OS_STAT_PEND_OK:                         /* Extract message from TCB (Put there by QPost) */
             pmsg =  OSTCBCur->OSTCBMsg;
   12d64:	d0a73017 	ldw	r2,-25408(gp)
   12d68:	10800917 	ldw	r2,36(r2)
   12d6c:	e0bff515 	stw	r2,-44(fp)
            *perr =  OS_ERR_NONE;
   12d70:	e0bfff17 	ldw	r2,-4(fp)
   12d74:	10000005 	stb	zero,0(r2)
             break;
   12d78:	00000e06 	br	12db4 <OSQPend+0x23c>

        case OS_STAT_PEND_ABORT:
             pmsg = (void *)0;
   12d7c:	e03ff515 	stw	zero,-44(fp)
            *perr =  OS_ERR_PEND_ABORT;               /* Indicate that we aborted                      */
   12d80:	e0bfff17 	ldw	r2,-4(fp)
   12d84:	00c00384 	movi	r3,14
   12d88:	10c00005 	stb	r3,0(r2)
             break;
   12d8c:	00000906 	br	12db4 <OSQPend+0x23c>

        case OS_STAT_PEND_TO:
        default:
             OS_EventTaskRemove(OSTCBCur, pevent);
   12d90:	d0a73017 	ldw	r2,-25408(gp)
   12d94:	e17ffd17 	ldw	r5,-12(fp)
   12d98:	1009883a 	mov	r4,r2
   12d9c:	000f8280 	call	f828 <OS_EventTaskRemove>
             pmsg = (void *)0;
   12da0:	e03ff515 	stw	zero,-44(fp)
            *perr =  OS_ERR_TIMEOUT;                  /* Indicate that we didn't get event within TO   */
   12da4:	e0bfff17 	ldw	r2,-4(fp)
   12da8:	00c00284 	movi	r3,10
   12dac:	10c00005 	stb	r3,0(r2)
             break;
   12db0:	0001883a 	nop
    }
    OSTCBCur->OSTCBStat          =  OS_STAT_RDY;      /* Set   task  status to ready                   */
   12db4:	d0a73017 	ldw	r2,-25408(gp)
   12db8:	10000c05 	stb	zero,48(r2)
    OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;  /* Clear pend  status                            */
   12dbc:	d0a73017 	ldw	r2,-25408(gp)
   12dc0:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;    /* Clear event pointers                          */
   12dc4:	d0a73017 	ldw	r2,-25408(gp)
   12dc8:	10000715 	stw	zero,28(r2)
#if (OS_EVENT_MULTI_EN > 0)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
   12dcc:	d0a73017 	ldw	r2,-25408(gp)
   12dd0:	10000815 	stw	zero,32(r2)
#endif
    OSTCBCur->OSTCBMsg           = (void      *)0;    /* Clear  received message                       */
   12dd4:	d0a73017 	ldw	r2,-25408(gp)
   12dd8:	10000915 	stw	zero,36(r2)
   12ddc:	e0bff617 	ldw	r2,-40(fp)
   12de0:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   12de4:	e0bffa17 	ldw	r2,-24(fp)
   12de8:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (pmsg);                                    /* Return received message                       */
   12dec:	e0bff517 	ldw	r2,-44(fp)
}
   12df0:	e037883a 	mov	sp,fp
   12df4:	dfc00117 	ldw	ra,4(sp)
   12df8:	df000017 	ldw	fp,0(sp)
   12dfc:	dec00204 	addi	sp,sp,8
   12e00:	f800283a 	ret

00012e04 <OSQPendAbort>:
*********************************************************************************************************
*/

#if OS_Q_PEND_ABORT_EN > 0
INT8U  OSQPendAbort (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
   12e04:	defff604 	addi	sp,sp,-40
   12e08:	dfc00915 	stw	ra,36(sp)
   12e0c:	df000815 	stw	fp,32(sp)
   12e10:	df000804 	addi	fp,sp,32
   12e14:	e13ffd15 	stw	r4,-12(fp)
   12e18:	2805883a 	mov	r2,r5
   12e1c:	e1bfff15 	stw	r6,-4(fp)
   12e20:	e0bffe05 	stb	r2,-8(fp)
    INT8U      nbr_tasks;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
   12e24:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
   12e28:	e0bfff17 	ldw	r2,-4(fp)
   12e2c:	1000021e 	bne	r2,zero,12e38 <OSQPendAbort+0x34>
        return (0);
   12e30:	0005883a 	mov	r2,zero
   12e34:	00004906 	br	12f5c <OSQPendAbort+0x158>
    }
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
   12e38:	e0bffd17 	ldw	r2,-12(fp)
   12e3c:	1000051e 	bne	r2,zero,12e54 <OSQPendAbort+0x50>
        *perr = OS_ERR_PEVENT_NULL;
   12e40:	e0bfff17 	ldw	r2,-4(fp)
   12e44:	00c00104 	movi	r3,4
   12e48:	10c00005 	stb	r3,0(r2)
        return (0);
   12e4c:	0005883a 	mov	r2,zero
   12e50:	00004206 	br	12f5c <OSQPendAbort+0x158>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {          /* Validate event block type                */
   12e54:	e0bffd17 	ldw	r2,-12(fp)
   12e58:	10800003 	ldbu	r2,0(r2)
   12e5c:	10803fcc 	andi	r2,r2,255
   12e60:	108000a0 	cmpeqi	r2,r2,2
   12e64:	1000051e 	bne	r2,zero,12e7c <OSQPendAbort+0x78>
        *perr = OS_ERR_EVENT_TYPE;
   12e68:	e0bfff17 	ldw	r2,-4(fp)
   12e6c:	00c00044 	movi	r3,1
   12e70:	10c00005 	stb	r3,0(r2)
        return (0);
   12e74:	0005883a 	mov	r2,zero
   12e78:	00003806 	br	12f5c <OSQPendAbort+0x158>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   12e7c:	0005303a 	rdctl	r2,status
   12e80:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   12e84:	e0fffc17 	ldw	r3,-16(fp)
   12e88:	00bfff84 	movi	r2,-2
   12e8c:	1884703a 	and	r2,r3,r2
   12e90:	1001703a 	wrctl	status,r2
  
  return context;
   12e94:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
   12e98:	e0bff915 	stw	r2,-28(fp)
    if (pevent->OSEventGrp != 0) {                         /* See if any task waiting on queue?        */
   12e9c:	e0bffd17 	ldw	r2,-12(fp)
   12ea0:	10800283 	ldbu	r2,10(r2)
   12ea4:	10803fcc 	andi	r2,r2,255
   12ea8:	10002526 	beq	r2,zero,12f40 <OSQPendAbort+0x13c>
        nbr_tasks = 0;
   12eac:	e03ff805 	stb	zero,-32(fp)
        switch (opt) {
   12eb0:	e0bffe03 	ldbu	r2,-8(fp)
   12eb4:	10800060 	cmpeqi	r2,r2,1
   12eb8:	10000e26 	beq	r2,zero,12ef4 <OSQPendAbort+0xf0>
            case OS_PEND_OPT_BROADCAST:                    /* Do we need to abort ALL waiting tasks?   */
                 while (pevent->OSEventGrp != 0) {         /* Yes, ready ALL tasks waiting on queue    */
   12ebc:	00000806 	br	12ee0 <OSQPendAbort+0xdc>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_ABORT);
   12ec0:	01c00084 	movi	r7,2
   12ec4:	01800104 	movi	r6,4
   12ec8:	000b883a 	mov	r5,zero
   12ecc:	e13ffd17 	ldw	r4,-12(fp)
   12ed0:	000f4300 	call	f430 <OS_EventTaskRdy>
                     nbr_tasks++;
   12ed4:	e0bff803 	ldbu	r2,-32(fp)
   12ed8:	10800044 	addi	r2,r2,1
   12edc:	e0bff805 	stb	r2,-32(fp)
    OS_ENTER_CRITICAL();
    if (pevent->OSEventGrp != 0) {                         /* See if any task waiting on queue?        */
        nbr_tasks = 0;
        switch (opt) {
            case OS_PEND_OPT_BROADCAST:                    /* Do we need to abort ALL waiting tasks?   */
                 while (pevent->OSEventGrp != 0) {         /* Yes, ready ALL tasks waiting on queue    */
   12ee0:	e0bffd17 	ldw	r2,-12(fp)
   12ee4:	10800283 	ldbu	r2,10(r2)
   12ee8:	10803fcc 	andi	r2,r2,255
   12eec:	103ff41e 	bne	r2,zero,12ec0 <__alt_data_end+0xfffe2ec0>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_ABORT);
                     nbr_tasks++;
                 }
                 break;
   12ef0:	00000906 	br	12f18 <OSQPendAbort+0x114>
               
            case OS_PEND_OPT_NONE:
            default:                                       /* No,  ready HPT       waiting on queue    */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_ABORT);
   12ef4:	01c00084 	movi	r7,2
   12ef8:	01800104 	movi	r6,4
   12efc:	000b883a 	mov	r5,zero
   12f00:	e13ffd17 	ldw	r4,-12(fp)
   12f04:	000f4300 	call	f430 <OS_EventTaskRdy>
                 nbr_tasks++;
   12f08:	e0bff803 	ldbu	r2,-32(fp)
   12f0c:	10800044 	addi	r2,r2,1
   12f10:	e0bff805 	stb	r2,-32(fp)
                 break;
   12f14:	0001883a 	nop
   12f18:	e0bff917 	ldw	r2,-28(fp)
   12f1c:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   12f20:	e0bffa17 	ldw	r2,-24(fp)
   12f24:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        OS_Sched();                                        /* Find HPT ready to run                    */
   12f28:	000fe7c0 	call	fe7c <OS_Sched>
        *perr = OS_ERR_PEND_ABORT;
   12f2c:	e0bfff17 	ldw	r2,-4(fp)
   12f30:	00c00384 	movi	r3,14
   12f34:	10c00005 	stb	r3,0(r2)
        return (nbr_tasks);
   12f38:	e0bff803 	ldbu	r2,-32(fp)
   12f3c:	00000706 	br	12f5c <OSQPendAbort+0x158>
   12f40:	e0bff917 	ldw	r2,-28(fp)
   12f44:	e0bffb15 	stw	r2,-20(fp)
   12f48:	e0bffb17 	ldw	r2,-20(fp)
   12f4c:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   12f50:	e0bfff17 	ldw	r2,-4(fp)
   12f54:	10000005 	stb	zero,0(r2)
    return (0);                                            /* No tasks waiting on queue                */
   12f58:	0005883a 	mov	r2,zero
}
   12f5c:	e037883a 	mov	sp,fp
   12f60:	dfc00117 	ldw	ra,4(sp)
   12f64:	df000017 	ldw	fp,0(sp)
   12f68:	dec00204 	addi	sp,sp,8
   12f6c:	f800283a 	ret

00012f70 <OSQPost>:
*********************************************************************************************************
*/

#if OS_Q_POST_EN > 0
INT8U  OSQPost (OS_EVENT *pevent, void *pmsg)
{
   12f70:	defff604 	addi	sp,sp,-40
   12f74:	dfc00915 	stw	ra,36(sp)
   12f78:	df000815 	stw	fp,32(sp)
   12f7c:	df000804 	addi	fp,sp,32
   12f80:	e13ffe15 	stw	r4,-8(fp)
   12f84:	e17fff15 	stw	r5,-4(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
   12f88:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                     /* Validate 'pevent'                            */
   12f8c:	e0bffe17 	ldw	r2,-8(fp)
   12f90:	1000021e 	bne	r2,zero,12f9c <OSQPost+0x2c>
        return (OS_ERR_PEVENT_NULL);
   12f94:	00800104 	movi	r2,4
   12f98:	00004a06 	br	130c4 <OSQPost+0x154>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {      /* Validate event block type                    */
   12f9c:	e0bffe17 	ldw	r2,-8(fp)
   12fa0:	10800003 	ldbu	r2,0(r2)
   12fa4:	10803fcc 	andi	r2,r2,255
   12fa8:	108000a0 	cmpeqi	r2,r2,2
   12fac:	1000021e 	bne	r2,zero,12fb8 <OSQPost+0x48>
        return (OS_ERR_EVENT_TYPE);
   12fb0:	00800044 	movi	r2,1
   12fb4:	00004306 	br	130c4 <OSQPost+0x154>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   12fb8:	0005303a 	rdctl	r2,status
   12fbc:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   12fc0:	e0fffd17 	ldw	r3,-12(fp)
   12fc4:	00bfff84 	movi	r2,-2
   12fc8:	1884703a 	and	r2,r3,r2
   12fcc:	1001703a 	wrctl	status,r2
  
  return context;
   12fd0:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
   12fd4:	e0bff815 	stw	r2,-32(fp)
    if (pevent->OSEventGrp != 0) {                     /* See if any task pending on queue             */
   12fd8:	e0bffe17 	ldw	r2,-8(fp)
   12fdc:	10800283 	ldbu	r2,10(r2)
   12fe0:	10803fcc 	andi	r2,r2,255
   12fe4:	10000c26 	beq	r2,zero,13018 <OSQPost+0xa8>
                                                       /* Ready highest priority task waiting on event */
        (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
   12fe8:	000f883a 	mov	r7,zero
   12fec:	01800104 	movi	r6,4
   12ff0:	e17fff17 	ldw	r5,-4(fp)
   12ff4:	e13ffe17 	ldw	r4,-8(fp)
   12ff8:	000f4300 	call	f430 <OS_EventTaskRdy>
   12ffc:	e0bff817 	ldw	r2,-32(fp)
   13000:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   13004:	e0bff917 	ldw	r2,-28(fp)
   13008:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                    /* Find highest priority task ready to run      */
   1300c:	000fe7c0 	call	fe7c <OS_Sched>
        return (OS_ERR_NONE);
   13010:	0005883a 	mov	r2,zero
   13014:	00002b06 	br	130c4 <OSQPost+0x154>
    }
    pq = (OS_Q *)pevent->OSEventPtr;                   /* Point to queue control block                 */
   13018:	e0bffe17 	ldw	r2,-8(fp)
   1301c:	10800117 	ldw	r2,4(r2)
   13020:	e0bffb15 	stw	r2,-20(fp)
    if (pq->OSQEntries >= pq->OSQSize) {               /* Make sure queue is not full                  */
   13024:	e0bffb17 	ldw	r2,-20(fp)
   13028:	10c0058b 	ldhu	r3,22(r2)
   1302c:	e0bffb17 	ldw	r2,-20(fp)
   13030:	1080050b 	ldhu	r2,20(r2)
   13034:	18ffffcc 	andi	r3,r3,65535
   13038:	10bfffcc 	andi	r2,r2,65535
   1303c:	18800636 	bltu	r3,r2,13058 <OSQPost+0xe8>
   13040:	e0bff817 	ldw	r2,-32(fp)
   13044:	e0bffa15 	stw	r2,-24(fp)
   13048:	e0bffa17 	ldw	r2,-24(fp)
   1304c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_Q_FULL);
   13050:	00800784 	movi	r2,30
   13054:	00001b06 	br	130c4 <OSQPost+0x154>
    }
    *pq->OSQIn++ = pmsg;                               /* Insert message into queue                    */
   13058:	e0bffb17 	ldw	r2,-20(fp)
   1305c:	10800317 	ldw	r2,12(r2)
   13060:	11000104 	addi	r4,r2,4
   13064:	e0fffb17 	ldw	r3,-20(fp)
   13068:	19000315 	stw	r4,12(r3)
   1306c:	e0ffff17 	ldw	r3,-4(fp)
   13070:	10c00015 	stw	r3,0(r2)
    pq->OSQEntries++;                                  /* Update the nbr of entries in the queue       */
   13074:	e0bffb17 	ldw	r2,-20(fp)
   13078:	1080058b 	ldhu	r2,22(r2)
   1307c:	10800044 	addi	r2,r2,1
   13080:	1007883a 	mov	r3,r2
   13084:	e0bffb17 	ldw	r2,-20(fp)
   13088:	10c0058d 	sth	r3,22(r2)
    if (pq->OSQIn == pq->OSQEnd) {                     /* Wrap IN ptr if we are at end of queue        */
   1308c:	e0bffb17 	ldw	r2,-20(fp)
   13090:	10c00317 	ldw	r3,12(r2)
   13094:	e0bffb17 	ldw	r2,-20(fp)
   13098:	10800217 	ldw	r2,8(r2)
   1309c:	1880041e 	bne	r3,r2,130b0 <OSQPost+0x140>
        pq->OSQIn = pq->OSQStart;
   130a0:	e0bffb17 	ldw	r2,-20(fp)
   130a4:	10c00117 	ldw	r3,4(r2)
   130a8:	e0bffb17 	ldw	r2,-20(fp)
   130ac:	10c00315 	stw	r3,12(r2)
   130b0:	e0bff817 	ldw	r2,-32(fp)
   130b4:	e0bffc15 	stw	r2,-16(fp)
   130b8:	e0bffc17 	ldw	r2,-16(fp)
   130bc:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
   130c0:	0005883a 	mov	r2,zero
}
   130c4:	e037883a 	mov	sp,fp
   130c8:	dfc00117 	ldw	ra,4(sp)
   130cc:	df000017 	ldw	fp,0(sp)
   130d0:	dec00204 	addi	sp,sp,8
   130d4:	f800283a 	ret

000130d8 <OSQPostFront>:
*********************************************************************************************************
*/

#if OS_Q_POST_FRONT_EN > 0
INT8U  OSQPostFront (OS_EVENT *pevent, void *pmsg)
{
   130d8:	defff604 	addi	sp,sp,-40
   130dc:	dfc00915 	stw	ra,36(sp)
   130e0:	df000815 	stw	fp,32(sp)
   130e4:	df000804 	addi	fp,sp,32
   130e8:	e13ffe15 	stw	r4,-8(fp)
   130ec:	e17fff15 	stw	r5,-4(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   130f0:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
   130f4:	e0bffe17 	ldw	r2,-8(fp)
   130f8:	1000021e 	bne	r2,zero,13104 <OSQPostFront+0x2c>
        return (OS_ERR_PEVENT_NULL);
   130fc:	00800104 	movi	r2,4
   13100:	00004c06 	br	13234 <OSQPostFront+0x15c>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {     /* Validate event block type                     */
   13104:	e0bffe17 	ldw	r2,-8(fp)
   13108:	10800003 	ldbu	r2,0(r2)
   1310c:	10803fcc 	andi	r2,r2,255
   13110:	108000a0 	cmpeqi	r2,r2,2
   13114:	1000021e 	bne	r2,zero,13120 <OSQPostFront+0x48>
        return (OS_ERR_EVENT_TYPE);
   13118:	00800044 	movi	r2,1
   1311c:	00004506 	br	13234 <OSQPostFront+0x15c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   13120:	0005303a 	rdctl	r2,status
   13124:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   13128:	e0fffd17 	ldw	r3,-12(fp)
   1312c:	00bfff84 	movi	r2,-2
   13130:	1884703a 	and	r2,r3,r2
   13134:	1001703a 	wrctl	status,r2
  
  return context;
   13138:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
   1313c:	e0bff815 	stw	r2,-32(fp)
    if (pevent->OSEventGrp != 0) {                    /* See if any task pending on queue              */
   13140:	e0bffe17 	ldw	r2,-8(fp)
   13144:	10800283 	ldbu	r2,10(r2)
   13148:	10803fcc 	andi	r2,r2,255
   1314c:	10000c26 	beq	r2,zero,13180 <OSQPostFront+0xa8>
                                                      /* Ready highest priority task waiting on event  */
        (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
   13150:	000f883a 	mov	r7,zero
   13154:	01800104 	movi	r6,4
   13158:	e17fff17 	ldw	r5,-4(fp)
   1315c:	e13ffe17 	ldw	r4,-8(fp)
   13160:	000f4300 	call	f430 <OS_EventTaskRdy>
   13164:	e0bff817 	ldw	r2,-32(fp)
   13168:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1316c:	e0bff917 	ldw	r2,-28(fp)
   13170:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                   /* Find highest priority task ready to run       */
   13174:	000fe7c0 	call	fe7c <OS_Sched>
        return (OS_ERR_NONE);
   13178:	0005883a 	mov	r2,zero
   1317c:	00002d06 	br	13234 <OSQPostFront+0x15c>
    }
    pq = (OS_Q *)pevent->OSEventPtr;                  /* Point to queue control block                  */
   13180:	e0bffe17 	ldw	r2,-8(fp)
   13184:	10800117 	ldw	r2,4(r2)
   13188:	e0bffb15 	stw	r2,-20(fp)
    if (pq->OSQEntries >= pq->OSQSize) {              /* Make sure queue is not full                   */
   1318c:	e0bffb17 	ldw	r2,-20(fp)
   13190:	10c0058b 	ldhu	r3,22(r2)
   13194:	e0bffb17 	ldw	r2,-20(fp)
   13198:	1080050b 	ldhu	r2,20(r2)
   1319c:	18ffffcc 	andi	r3,r3,65535
   131a0:	10bfffcc 	andi	r2,r2,65535
   131a4:	18800636 	bltu	r3,r2,131c0 <OSQPostFront+0xe8>
   131a8:	e0bff817 	ldw	r2,-32(fp)
   131ac:	e0bffa15 	stw	r2,-24(fp)
   131b0:	e0bffa17 	ldw	r2,-24(fp)
   131b4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_Q_FULL);
   131b8:	00800784 	movi	r2,30
   131bc:	00001d06 	br	13234 <OSQPostFront+0x15c>
    }
    if (pq->OSQOut == pq->OSQStart) {                 /* Wrap OUT ptr if we are at the 1st queue entry */
   131c0:	e0bffb17 	ldw	r2,-20(fp)
   131c4:	10c00417 	ldw	r3,16(r2)
   131c8:	e0bffb17 	ldw	r2,-20(fp)
   131cc:	10800117 	ldw	r2,4(r2)
   131d0:	1880041e 	bne	r3,r2,131e4 <OSQPostFront+0x10c>
        pq->OSQOut = pq->OSQEnd;
   131d4:	e0bffb17 	ldw	r2,-20(fp)
   131d8:	10c00217 	ldw	r3,8(r2)
   131dc:	e0bffb17 	ldw	r2,-20(fp)
   131e0:	10c00415 	stw	r3,16(r2)
    }
    pq->OSQOut--;
   131e4:	e0bffb17 	ldw	r2,-20(fp)
   131e8:	10800417 	ldw	r2,16(r2)
   131ec:	10ffff04 	addi	r3,r2,-4
   131f0:	e0bffb17 	ldw	r2,-20(fp)
   131f4:	10c00415 	stw	r3,16(r2)
    *pq->OSQOut = pmsg;                               /* Insert message into queue                     */
   131f8:	e0bffb17 	ldw	r2,-20(fp)
   131fc:	10800417 	ldw	r2,16(r2)
   13200:	e0ffff17 	ldw	r3,-4(fp)
   13204:	10c00015 	stw	r3,0(r2)
    pq->OSQEntries++;                                 /* Update the nbr of entries in the queue        */
   13208:	e0bffb17 	ldw	r2,-20(fp)
   1320c:	1080058b 	ldhu	r2,22(r2)
   13210:	10800044 	addi	r2,r2,1
   13214:	1007883a 	mov	r3,r2
   13218:	e0bffb17 	ldw	r2,-20(fp)
   1321c:	10c0058d 	sth	r3,22(r2)
   13220:	e0bff817 	ldw	r2,-32(fp)
   13224:	e0bffc15 	stw	r2,-16(fp)
   13228:	e0bffc17 	ldw	r2,-16(fp)
   1322c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
   13230:	0005883a 	mov	r2,zero
}
   13234:	e037883a 	mov	sp,fp
   13238:	dfc00117 	ldw	ra,4(sp)
   1323c:	df000017 	ldw	fp,0(sp)
   13240:	dec00204 	addi	sp,sp,8
   13244:	f800283a 	ret

00013248 <OSQPostOpt>:
*********************************************************************************************************
*/

#if OS_Q_POST_OPT_EN > 0
INT8U  OSQPostOpt (OS_EVENT *pevent, void *pmsg, INT8U opt)
{
   13248:	defff504 	addi	sp,sp,-44
   1324c:	dfc00a15 	stw	ra,40(sp)
   13250:	df000915 	stw	fp,36(sp)
   13254:	df000904 	addi	fp,sp,36
   13258:	e13ffd15 	stw	r4,-12(fp)
   1325c:	e17ffe15 	stw	r5,-8(fp)
   13260:	3005883a 	mov	r2,r6
   13264:	e0bfff05 	stb	r2,-4(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   13268:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
   1326c:	e0bffd17 	ldw	r2,-12(fp)
   13270:	1000021e 	bne	r2,zero,1327c <OSQPostOpt+0x34>
        return (OS_ERR_PEVENT_NULL);
   13274:	00800104 	movi	r2,4
   13278:	00007106 	br	13440 <OSQPostOpt+0x1f8>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {     /* Validate event block type                     */
   1327c:	e0bffd17 	ldw	r2,-12(fp)
   13280:	10800003 	ldbu	r2,0(r2)
   13284:	10803fcc 	andi	r2,r2,255
   13288:	108000a0 	cmpeqi	r2,r2,2
   1328c:	1000021e 	bne	r2,zero,13298 <OSQPostOpt+0x50>
        return (OS_ERR_EVENT_TYPE);
   13290:	00800044 	movi	r2,1
   13294:	00006a06 	br	13440 <OSQPostOpt+0x1f8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   13298:	0005303a 	rdctl	r2,status
   1329c:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   132a0:	e0fffc17 	ldw	r3,-16(fp)
   132a4:	00bfff84 	movi	r2,-2
   132a8:	1884703a 	and	r2,r3,r2
   132ac:	1001703a 	wrctl	status,r2
  
  return context;
   132b0:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
   132b4:	e0bff715 	stw	r2,-36(fp)
    if (pevent->OSEventGrp != 0x00) {                 /* See if any task pending on queue              */
   132b8:	e0bffd17 	ldw	r2,-12(fp)
   132bc:	10800283 	ldbu	r2,10(r2)
   132c0:	10803fcc 	andi	r2,r2,255
   132c4:	10001d26 	beq	r2,zero,1333c <OSQPostOpt+0xf4>
        if ((opt & OS_POST_OPT_BROADCAST) != 0x00) {  /* Do we need to post msg to ALL waiting tasks ? */
   132c8:	e0bfff03 	ldbu	r2,-4(fp)
   132cc:	1080004c 	andi	r2,r2,1
   132d0:	10000b26 	beq	r2,zero,13300 <OSQPostOpt+0xb8>
            while (pevent->OSEventGrp != 0) {         /* Yes, Post to ALL tasks waiting on queue       */
   132d4:	00000506 	br	132ec <OSQPostOpt+0xa4>
                (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
   132d8:	000f883a 	mov	r7,zero
   132dc:	01800104 	movi	r6,4
   132e0:	e17ffe17 	ldw	r5,-8(fp)
   132e4:	e13ffd17 	ldw	r4,-12(fp)
   132e8:	000f4300 	call	f430 <OS_EventTaskRdy>
        return (OS_ERR_EVENT_TYPE);
    }
    OS_ENTER_CRITICAL();
    if (pevent->OSEventGrp != 0x00) {                 /* See if any task pending on queue              */
        if ((opt & OS_POST_OPT_BROADCAST) != 0x00) {  /* Do we need to post msg to ALL waiting tasks ? */
            while (pevent->OSEventGrp != 0) {         /* Yes, Post to ALL tasks waiting on queue       */
   132ec:	e0bffd17 	ldw	r2,-12(fp)
   132f0:	10800283 	ldbu	r2,10(r2)
   132f4:	10803fcc 	andi	r2,r2,255
   132f8:	103ff71e 	bne	r2,zero,132d8 <__alt_data_end+0xfffe32d8>
   132fc:	00000506 	br	13314 <OSQPostOpt+0xcc>
                (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
            }
        } else {                                      /* No,  Post to HPT waiting on queue             */
            (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
   13300:	000f883a 	mov	r7,zero
   13304:	01800104 	movi	r6,4
   13308:	e17ffe17 	ldw	r5,-8(fp)
   1330c:	e13ffd17 	ldw	r4,-12(fp)
   13310:	000f4300 	call	f430 <OS_EventTaskRdy>
   13314:	e0bff717 	ldw	r2,-36(fp)
   13318:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1331c:	e0bff817 	ldw	r2,-32(fp)
   13320:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        if ((opt & OS_POST_OPT_NO_SCHED) == 0) {	  /* See if scheduler needs to be invoked          */
   13324:	e0bfff03 	ldbu	r2,-4(fp)
   13328:	1080010c 	andi	r2,r2,4
   1332c:	1000011e 	bne	r2,zero,13334 <OSQPostOpt+0xec>
            OS_Sched();                               /* Find highest priority task ready to run       */
   13330:	000fe7c0 	call	fe7c <OS_Sched>
        }
        return (OS_ERR_NONE);
   13334:	0005883a 	mov	r2,zero
   13338:	00004106 	br	13440 <OSQPostOpt+0x1f8>
    }
    pq = (OS_Q *)pevent->OSEventPtr;                  /* Point to queue control block                  */
   1333c:	e0bffd17 	ldw	r2,-12(fp)
   13340:	10800117 	ldw	r2,4(r2)
   13344:	e0bffa15 	stw	r2,-24(fp)
    if (pq->OSQEntries >= pq->OSQSize) {              /* Make sure queue is not full                   */
   13348:	e0bffa17 	ldw	r2,-24(fp)
   1334c:	10c0058b 	ldhu	r3,22(r2)
   13350:	e0bffa17 	ldw	r2,-24(fp)
   13354:	1080050b 	ldhu	r2,20(r2)
   13358:	18ffffcc 	andi	r3,r3,65535
   1335c:	10bfffcc 	andi	r2,r2,65535
   13360:	18800636 	bltu	r3,r2,1337c <OSQPostOpt+0x134>
   13364:	e0bff717 	ldw	r2,-36(fp)
   13368:	e0bff915 	stw	r2,-28(fp)
   1336c:	e0bff917 	ldw	r2,-28(fp)
   13370:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_Q_FULL);
   13374:	00800784 	movi	r2,30
   13378:	00003106 	br	13440 <OSQPostOpt+0x1f8>
    }
    if ((opt & OS_POST_OPT_FRONT) != 0x00) {          /* Do we post to the FRONT of the queue?         */
   1337c:	e0bfff03 	ldbu	r2,-4(fp)
   13380:	1080008c 	andi	r2,r2,2
   13384:	10001326 	beq	r2,zero,133d4 <OSQPostOpt+0x18c>
        if (pq->OSQOut == pq->OSQStart) {             /* Yes, Post as LIFO, Wrap OUT pointer if we ... */
   13388:	e0bffa17 	ldw	r2,-24(fp)
   1338c:	10c00417 	ldw	r3,16(r2)
   13390:	e0bffa17 	ldw	r2,-24(fp)
   13394:	10800117 	ldw	r2,4(r2)
   13398:	1880041e 	bne	r3,r2,133ac <OSQPostOpt+0x164>
            pq->OSQOut = pq->OSQEnd;                  /*      ... are at the 1st queue entry           */
   1339c:	e0bffa17 	ldw	r2,-24(fp)
   133a0:	10c00217 	ldw	r3,8(r2)
   133a4:	e0bffa17 	ldw	r2,-24(fp)
   133a8:	10c00415 	stw	r3,16(r2)
        }
        pq->OSQOut--;
   133ac:	e0bffa17 	ldw	r2,-24(fp)
   133b0:	10800417 	ldw	r2,16(r2)
   133b4:	10ffff04 	addi	r3,r2,-4
   133b8:	e0bffa17 	ldw	r2,-24(fp)
   133bc:	10c00415 	stw	r3,16(r2)
        *pq->OSQOut = pmsg;                           /*      Insert message into queue                */
   133c0:	e0bffa17 	ldw	r2,-24(fp)
   133c4:	10800417 	ldw	r2,16(r2)
   133c8:	e0fffe17 	ldw	r3,-8(fp)
   133cc:	10c00015 	stw	r3,0(r2)
   133d0:	00001006 	br	13414 <OSQPostOpt+0x1cc>
    } else {                                          /* No,  Post as FIFO                             */
        *pq->OSQIn++ = pmsg;                          /*      Insert message into queue                */
   133d4:	e0bffa17 	ldw	r2,-24(fp)
   133d8:	10800317 	ldw	r2,12(r2)
   133dc:	11000104 	addi	r4,r2,4
   133e0:	e0fffa17 	ldw	r3,-24(fp)
   133e4:	19000315 	stw	r4,12(r3)
   133e8:	e0fffe17 	ldw	r3,-8(fp)
   133ec:	10c00015 	stw	r3,0(r2)
        if (pq->OSQIn == pq->OSQEnd) {                /*      Wrap IN ptr if we are at end of queue    */
   133f0:	e0bffa17 	ldw	r2,-24(fp)
   133f4:	10c00317 	ldw	r3,12(r2)
   133f8:	e0bffa17 	ldw	r2,-24(fp)
   133fc:	10800217 	ldw	r2,8(r2)
   13400:	1880041e 	bne	r3,r2,13414 <OSQPostOpt+0x1cc>
            pq->OSQIn = pq->OSQStart;
   13404:	e0bffa17 	ldw	r2,-24(fp)
   13408:	10c00117 	ldw	r3,4(r2)
   1340c:	e0bffa17 	ldw	r2,-24(fp)
   13410:	10c00315 	stw	r3,12(r2)
        }
    }
    pq->OSQEntries++;                                 /* Update the nbr of entries in the queue        */
   13414:	e0bffa17 	ldw	r2,-24(fp)
   13418:	1080058b 	ldhu	r2,22(r2)
   1341c:	10800044 	addi	r2,r2,1
   13420:	1007883a 	mov	r3,r2
   13424:	e0bffa17 	ldw	r2,-24(fp)
   13428:	10c0058d 	sth	r3,22(r2)
   1342c:	e0bff717 	ldw	r2,-36(fp)
   13430:	e0bffb15 	stw	r2,-20(fp)
   13434:	e0bffb17 	ldw	r2,-20(fp)
   13438:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
   1343c:	0005883a 	mov	r2,zero
}
   13440:	e037883a 	mov	sp,fp
   13444:	dfc00117 	ldw	ra,4(sp)
   13448:	df000017 	ldw	fp,0(sp)
   1344c:	dec00204 	addi	sp,sp,8
   13450:	f800283a 	ret

00013454 <OSQQuery>:
*********************************************************************************************************
*/

#if OS_Q_QUERY_EN > 0
INT8U  OSQQuery (OS_EVENT *pevent, OS_Q_DATA *p_q_data)
{
   13454:	defff604 	addi	sp,sp,-40
   13458:	df000915 	stw	fp,36(sp)
   1345c:	df000904 	addi	fp,sp,36
   13460:	e13ffe15 	stw	r4,-8(fp)
   13464:	e17fff15 	stw	r5,-4(fp)
#else
    INT16U    *psrc;
    INT16U    *pdest;
#endif
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
   13468:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                     /* Validate 'pevent'                            */
   1346c:	e0bffe17 	ldw	r2,-8(fp)
   13470:	1000021e 	bne	r2,zero,1347c <OSQQuery+0x28>
        return (OS_ERR_PEVENT_NULL);
   13474:	00800104 	movi	r2,4
   13478:	00004906 	br	135a0 <OSQQuery+0x14c>
    }
    if (p_q_data == (OS_Q_DATA *)0) {                  /* Validate 'p_q_data'                          */
   1347c:	e0bfff17 	ldw	r2,-4(fp)
   13480:	1000021e 	bne	r2,zero,1348c <OSQQuery+0x38>
        return (OS_ERR_PDATA_NULL);
   13484:	00800244 	movi	r2,9
   13488:	00004506 	br	135a0 <OSQQuery+0x14c>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {      /* Validate event block type                    */
   1348c:	e0bffe17 	ldw	r2,-8(fp)
   13490:	10800003 	ldbu	r2,0(r2)
   13494:	10803fcc 	andi	r2,r2,255
   13498:	108000a0 	cmpeqi	r2,r2,2
   1349c:	1000021e 	bne	r2,zero,134a8 <OSQQuery+0x54>
        return (OS_ERR_EVENT_TYPE);
   134a0:	00800044 	movi	r2,1
   134a4:	00003e06 	br	135a0 <OSQQuery+0x14c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   134a8:	0005303a 	rdctl	r2,status
   134ac:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   134b0:	e0fffd17 	ldw	r3,-12(fp)
   134b4:	00bfff84 	movi	r2,-2
   134b8:	1884703a 	and	r2,r3,r2
   134bc:	1001703a 	wrctl	status,r2
  
  return context;
   134c0:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
   134c4:	e0bffa15 	stw	r2,-24(fp)
    p_q_data->OSEventGrp = pevent->OSEventGrp;         /* Copy message queue wait list                 */
   134c8:	e0bffe17 	ldw	r2,-8(fp)
   134cc:	10c00283 	ldbu	r3,10(r2)
   134d0:	e0bfff17 	ldw	r2,-4(fp)
   134d4:	10c002c5 	stb	r3,11(r2)
    psrc                 = &pevent->OSEventTbl[0];
   134d8:	e0bffe17 	ldw	r2,-8(fp)
   134dc:	108002c4 	addi	r2,r2,11
   134e0:	e0bff815 	stw	r2,-32(fp)
    pdest                = &p_q_data->OSEventTbl[0];
   134e4:	e0bfff17 	ldw	r2,-4(fp)
   134e8:	10800204 	addi	r2,r2,8
   134ec:	e0bff915 	stw	r2,-28(fp)
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
   134f0:	e03ff705 	stb	zero,-36(fp)
   134f4:	00000b06 	br	13524 <OSQQuery+0xd0>
        *pdest++ = *psrc++;
   134f8:	e0bff917 	ldw	r2,-28(fp)
   134fc:	10c00044 	addi	r3,r2,1
   13500:	e0fff915 	stw	r3,-28(fp)
   13504:	e0fff817 	ldw	r3,-32(fp)
   13508:	19000044 	addi	r4,r3,1
   1350c:	e13ff815 	stw	r4,-32(fp)
   13510:	18c00003 	ldbu	r3,0(r3)
   13514:	10c00005 	stb	r3,0(r2)
    }
    OS_ENTER_CRITICAL();
    p_q_data->OSEventGrp = pevent->OSEventGrp;         /* Copy message queue wait list                 */
    psrc                 = &pevent->OSEventTbl[0];
    pdest                = &p_q_data->OSEventTbl[0];
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
   13518:	e0bff703 	ldbu	r2,-36(fp)
   1351c:	10800044 	addi	r2,r2,1
   13520:	e0bff705 	stb	r2,-36(fp)
   13524:	e0bff703 	ldbu	r2,-36(fp)
   13528:	108000f0 	cmpltui	r2,r2,3
   1352c:	103ff21e 	bne	r2,zero,134f8 <__alt_data_end+0xfffe34f8>
        *pdest++ = *psrc++;
    }
    pq = (OS_Q *)pevent->OSEventPtr;
   13530:	e0bffe17 	ldw	r2,-8(fp)
   13534:	10800117 	ldw	r2,4(r2)
   13538:	e0bffc15 	stw	r2,-16(fp)
    if (pq->OSQEntries > 0) {
   1353c:	e0bffc17 	ldw	r2,-16(fp)
   13540:	1080058b 	ldhu	r2,22(r2)
   13544:	10bfffcc 	andi	r2,r2,65535
   13548:	10000626 	beq	r2,zero,13564 <OSQQuery+0x110>
        p_q_data->OSMsg = *pq->OSQOut;                 /* Get next message to return if available      */
   1354c:	e0bffc17 	ldw	r2,-16(fp)
   13550:	10800417 	ldw	r2,16(r2)
   13554:	10c00017 	ldw	r3,0(r2)
   13558:	e0bfff17 	ldw	r2,-4(fp)
   1355c:	10c00015 	stw	r3,0(r2)
   13560:	00000206 	br	1356c <OSQQuery+0x118>
    } else {
        p_q_data->OSMsg = (void *)0;
   13564:	e0bfff17 	ldw	r2,-4(fp)
   13568:	10000015 	stw	zero,0(r2)
    }
    p_q_data->OSNMsgs = pq->OSQEntries;
   1356c:	e0bffc17 	ldw	r2,-16(fp)
   13570:	10c0058b 	ldhu	r3,22(r2)
   13574:	e0bfff17 	ldw	r2,-4(fp)
   13578:	10c0010d 	sth	r3,4(r2)
    p_q_data->OSQSize = pq->OSQSize;
   1357c:	e0bffc17 	ldw	r2,-16(fp)
   13580:	10c0050b 	ldhu	r3,20(r2)
   13584:	e0bfff17 	ldw	r2,-4(fp)
   13588:	10c0018d 	sth	r3,6(r2)
   1358c:	e0bffa17 	ldw	r2,-24(fp)
   13590:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   13594:	e0bffb17 	ldw	r2,-20(fp)
   13598:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
   1359c:	0005883a 	mov	r2,zero
}
   135a0:	e037883a 	mov	sp,fp
   135a4:	df000017 	ldw	fp,0(sp)
   135a8:	dec00104 	addi	sp,sp,4
   135ac:	f800283a 	ret

000135b0 <OS_QInit>:
* Note(s)    : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

void  OS_QInit (void)
{
   135b0:	defffb04 	addi	sp,sp,-20
   135b4:	dfc00415 	stw	ra,16(sp)
   135b8:	df000315 	stw	fp,12(sp)
   135bc:	df000304 	addi	fp,sp,12
    OS_Q   *pq1;
    OS_Q   *pq2;



    OS_MemClr((INT8U *)&OSQTbl[0], sizeof(OSQTbl));  /* Clear the queue table                          */
   135c0:	01407804 	movi	r5,480
   135c4:	010000b4 	movhi	r4,2
   135c8:	2138b604 	addi	r4,r4,-7464
   135cc:	000fdc00 	call	fdc0 <OS_MemClr>
    pq1 = &OSQTbl[0];
   135d0:	008000b4 	movhi	r2,2
   135d4:	10b8b604 	addi	r2,r2,-7464
   135d8:	e0bffe15 	stw	r2,-8(fp)
    pq2 = &OSQTbl[1];
   135dc:	008000b4 	movhi	r2,2
   135e0:	10b8bc04 	addi	r2,r2,-7440
   135e4:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < (OS_MAX_QS - 1); i++) {          /* Init. list of free QUEUE control blocks        */
   135e8:	e03ffd0d 	sth	zero,-12(fp)
   135ec:	00000c06 	br	13620 <OS_QInit+0x70>
        pq1->OSQPtr = pq2;
   135f0:	e0bffe17 	ldw	r2,-8(fp)
   135f4:	e0ffff17 	ldw	r3,-4(fp)
   135f8:	10c00015 	stw	r3,0(r2)
        pq1++;
   135fc:	e0bffe17 	ldw	r2,-8(fp)
   13600:	10800604 	addi	r2,r2,24
   13604:	e0bffe15 	stw	r2,-8(fp)
        pq2++;
   13608:	e0bfff17 	ldw	r2,-4(fp)
   1360c:	10800604 	addi	r2,r2,24
   13610:	e0bfff15 	stw	r2,-4(fp)


    OS_MemClr((INT8U *)&OSQTbl[0], sizeof(OSQTbl));  /* Clear the queue table                          */
    pq1 = &OSQTbl[0];
    pq2 = &OSQTbl[1];
    for (i = 0; i < (OS_MAX_QS - 1); i++) {          /* Init. list of free QUEUE control blocks        */
   13614:	e0bffd0b 	ldhu	r2,-12(fp)
   13618:	10800044 	addi	r2,r2,1
   1361c:	e0bffd0d 	sth	r2,-12(fp)
   13620:	e0bffd0b 	ldhu	r2,-12(fp)
   13624:	108004f0 	cmpltui	r2,r2,19
   13628:	103ff11e 	bne	r2,zero,135f0 <__alt_data_end+0xfffe35f0>
        pq1->OSQPtr = pq2;
        pq1++;
        pq2++;
    }
    pq1->OSQPtr = (OS_Q *)0;
   1362c:	e0bffe17 	ldw	r2,-8(fp)
   13630:	10000015 	stw	zero,0(r2)
    OSQFreeList = &OSQTbl[0];
   13634:	008000b4 	movhi	r2,2
   13638:	10b8b604 	addi	r2,r2,-7464
   1363c:	d0a72c15 	stw	r2,-25424(gp)
#endif
}
   13640:	0001883a 	nop
   13644:	e037883a 	mov	sp,fp
   13648:	dfc00117 	ldw	ra,4(sp)
   1364c:	df000017 	ldw	fp,0(sp)
   13650:	dec00204 	addi	sp,sp,8
   13654:	f800283a 	ret

00013658 <OSSemAccept>:
*********************************************************************************************************
*/

#if OS_SEM_ACCEPT_EN > 0
INT16U  OSSemAccept (OS_EVENT *pevent)
{
   13658:	defffa04 	addi	sp,sp,-24
   1365c:	df000515 	stw	fp,20(sp)
   13660:	df000504 	addi	fp,sp,20
   13664:	e13fff15 	stw	r4,-4(fp)
    INT16U     cnt;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   13668:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
   1366c:	e0bfff17 	ldw	r2,-4(fp)
   13670:	1000021e 	bne	r2,zero,1367c <OSSemAccept+0x24>
        return (0);
   13674:	0005883a 	mov	r2,zero
   13678:	00001f06 	br	136f8 <OSSemAccept+0xa0>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
   1367c:	e0bfff17 	ldw	r2,-4(fp)
   13680:	10800003 	ldbu	r2,0(r2)
   13684:	10803fcc 	andi	r2,r2,255
   13688:	108000e0 	cmpeqi	r2,r2,3
   1368c:	1000021e 	bne	r2,zero,13698 <OSSemAccept+0x40>
        return (0);
   13690:	0005883a 	mov	r2,zero
   13694:	00001806 	br	136f8 <OSSemAccept+0xa0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   13698:	0005303a 	rdctl	r2,status
   1369c:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   136a0:	e0fffe17 	ldw	r3,-8(fp)
   136a4:	00bfff84 	movi	r2,-2
   136a8:	1884703a 	and	r2,r3,r2
   136ac:	1001703a 	wrctl	status,r2
  
  return context;
   136b0:	e0bffe17 	ldw	r2,-8(fp)
    }
    OS_ENTER_CRITICAL();
   136b4:	e0bffb15 	stw	r2,-20(fp)
    cnt = pevent->OSEventCnt;
   136b8:	e0bfff17 	ldw	r2,-4(fp)
   136bc:	1080020b 	ldhu	r2,8(r2)
   136c0:	e0bffd0d 	sth	r2,-12(fp)
    if (cnt > 0) {                                    /* See if resource is available                  */
   136c4:	e0bffd0b 	ldhu	r2,-12(fp)
   136c8:	10000626 	beq	r2,zero,136e4 <OSSemAccept+0x8c>
        pevent->OSEventCnt--;                         /* Yes, decrement semaphore and notify caller    */
   136cc:	e0bfff17 	ldw	r2,-4(fp)
   136d0:	1080020b 	ldhu	r2,8(r2)
   136d4:	10bfffc4 	addi	r2,r2,-1
   136d8:	1007883a 	mov	r3,r2
   136dc:	e0bfff17 	ldw	r2,-4(fp)
   136e0:	10c0020d 	sth	r3,8(r2)
   136e4:	e0bffb17 	ldw	r2,-20(fp)
   136e8:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   136ec:	e0bffc17 	ldw	r2,-16(fp)
   136f0:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (cnt);                                     /* Return semaphore count                        */
   136f4:	e0bffd0b 	ldhu	r2,-12(fp)
}
   136f8:	e037883a 	mov	sp,fp
   136fc:	df000017 	ldw	fp,0(sp)
   13700:	dec00104 	addi	sp,sp,4
   13704:	f800283a 	ret

00013708 <OSSemCreate>:
*              == (void *)0  if no event control blocks were available
*********************************************************************************************************
*/

OS_EVENT  *OSSemCreate (INT16U cnt)
{
   13708:	defff904 	addi	sp,sp,-28
   1370c:	dfc00615 	stw	ra,24(sp)
   13710:	df000515 	stw	fp,20(sp)
   13714:	df000504 	addi	fp,sp,20
   13718:	2005883a 	mov	r2,r4
   1371c:	e0bfff0d 	sth	r2,-4(fp)
    OS_EVENT  *pevent;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
   13720:	e03ffb15 	stw	zero,-20(fp)
#endif



    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
   13724:	d0a72f03 	ldbu	r2,-25412(gp)
   13728:	10803fcc 	andi	r2,r2,255
   1372c:	10000226 	beq	r2,zero,13738 <OSSemCreate+0x30>
        return ((OS_EVENT *)0);                            /* ... can't CREATE from an ISR             */
   13730:	0005883a 	mov	r2,zero
   13734:	00002506 	br	137cc <OSSemCreate+0xc4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   13738:	0005303a 	rdctl	r2,status
   1373c:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   13740:	e0fffe17 	ldw	r3,-8(fp)
   13744:	00bfff84 	movi	r2,-2
   13748:	1884703a 	and	r2,r3,r2
   1374c:	1001703a 	wrctl	status,r2
  
  return context;
   13750:	e0bffe17 	ldw	r2,-8(fp)
    }
    OS_ENTER_CRITICAL();
   13754:	e0bffb15 	stw	r2,-20(fp)
    pevent = OSEventFreeList;                              /* Get next free event control block        */
   13758:	d0a72e17 	ldw	r2,-25416(gp)
   1375c:	e0bffd15 	stw	r2,-12(fp)
    if (OSEventFreeList != (OS_EVENT *)0) {                /* See if pool of free ECB pool was empty   */
   13760:	d0a72e17 	ldw	r2,-25416(gp)
   13764:	10000326 	beq	r2,zero,13774 <OSSemCreate+0x6c>
        OSEventFreeList = (OS_EVENT *)OSEventFreeList->OSEventPtr;
   13768:	d0a72e17 	ldw	r2,-25416(gp)
   1376c:	10800117 	ldw	r2,4(r2)
   13770:	d0a72e15 	stw	r2,-25416(gp)
   13774:	e0bffb17 	ldw	r2,-20(fp)
   13778:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1377c:	e0bffc17 	ldw	r2,-16(fp)
   13780:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    if (pevent != (OS_EVENT *)0) {                         /* Get an event control block               */
   13784:	e0bffd17 	ldw	r2,-12(fp)
   13788:	10000f26 	beq	r2,zero,137c8 <OSSemCreate+0xc0>
        pevent->OSEventType    = OS_EVENT_TYPE_SEM;
   1378c:	e0bffd17 	ldw	r2,-12(fp)
   13790:	00c000c4 	movi	r3,3
   13794:	10c00005 	stb	r3,0(r2)
        pevent->OSEventCnt     = cnt;                      /* Set semaphore value                      */
   13798:	e0bffd17 	ldw	r2,-12(fp)
   1379c:	e0ffff0b 	ldhu	r3,-4(fp)
   137a0:	10c0020d 	sth	r3,8(r2)
        pevent->OSEventPtr     = (void *)0;                /* Unlink from ECB free list                */
   137a4:	e0bffd17 	ldw	r2,-12(fp)
   137a8:	10000115 	stw	zero,4(r2)
#if OS_EVENT_NAME_SIZE > 1
        pevent->OSEventName[0] = '?';                      /* Unknown name                             */
   137ac:	e0bffd17 	ldw	r2,-12(fp)
   137b0:	00c00fc4 	movi	r3,63
   137b4:	10c00385 	stb	r3,14(r2)
        pevent->OSEventName[1] = OS_ASCII_NUL;
   137b8:	e0bffd17 	ldw	r2,-12(fp)
   137bc:	100003c5 	stb	zero,15(r2)
#endif
        OS_EventWaitListInit(pevent);                      /* Initialize to 'nobody waiting' on sem.   */
   137c0:	e13ffd17 	ldw	r4,-12(fp)
   137c4:	000f9e00 	call	f9e0 <OS_EventWaitListInit>
    }
    return (pevent);
   137c8:	e0bffd17 	ldw	r2,-12(fp)
}
   137cc:	e037883a 	mov	sp,fp
   137d0:	dfc00117 	ldw	ra,4(sp)
   137d4:	df000017 	ldw	fp,0(sp)
   137d8:	dec00204 	addi	sp,sp,8
   137dc:	f800283a 	ret

000137e0 <OSSemDel>:
*********************************************************************************************************
*/

#if OS_SEM_DEL_EN > 0
OS_EVENT  *OSSemDel (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
   137e0:	defff304 	addi	sp,sp,-52
   137e4:	dfc00c15 	stw	ra,48(sp)
   137e8:	df000b15 	stw	fp,44(sp)
   137ec:	df000b04 	addi	fp,sp,44
   137f0:	e13ffd15 	stw	r4,-12(fp)
   137f4:	2805883a 	mov	r2,r5
   137f8:	e1bfff15 	stw	r6,-4(fp)
   137fc:	e0bffe05 	stb	r2,-8(fp)
    BOOLEAN    tasks_waiting;
    OS_EVENT  *pevent_return;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
   13800:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
   13804:	e0bfff17 	ldw	r2,-4(fp)
   13808:	1000021e 	bne	r2,zero,13814 <OSSemDel+0x34>
        return (pevent);
   1380c:	e0bffd17 	ldw	r2,-12(fp)
   13810:	00007e06 	br	13a0c <OSSemDel+0x22c>
    }
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
   13814:	e0bffd17 	ldw	r2,-12(fp)
   13818:	1000051e 	bne	r2,zero,13830 <OSSemDel+0x50>
        *perr = OS_ERR_PEVENT_NULL;
   1381c:	e0bfff17 	ldw	r2,-4(fp)
   13820:	00c00104 	movi	r3,4
   13824:	10c00005 	stb	r3,0(r2)
        return (pevent);
   13828:	e0bffd17 	ldw	r2,-12(fp)
   1382c:	00007706 	br	13a0c <OSSemDel+0x22c>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {        /* Validate event block type                */
   13830:	e0bffd17 	ldw	r2,-12(fp)
   13834:	10800003 	ldbu	r2,0(r2)
   13838:	10803fcc 	andi	r2,r2,255
   1383c:	108000e0 	cmpeqi	r2,r2,3
   13840:	1000051e 	bne	r2,zero,13858 <OSSemDel+0x78>
        *perr = OS_ERR_EVENT_TYPE;
   13844:	e0bfff17 	ldw	r2,-4(fp)
   13848:	00c00044 	movi	r3,1
   1384c:	10c00005 	stb	r3,0(r2)
        return (pevent);
   13850:	e0bffd17 	ldw	r2,-12(fp)
   13854:	00006d06 	br	13a0c <OSSemDel+0x22c>
    }
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
   13858:	d0a72f03 	ldbu	r2,-25412(gp)
   1385c:	10803fcc 	andi	r2,r2,255
   13860:	10000526 	beq	r2,zero,13878 <OSSemDel+0x98>
        *perr = OS_ERR_DEL_ISR;                             /* ... can't DELETE from an ISR             */
   13864:	e0bfff17 	ldw	r2,-4(fp)
   13868:	00c003c4 	movi	r3,15
   1386c:	10c00005 	stb	r3,0(r2)
        return (pevent);
   13870:	e0bffd17 	ldw	r2,-12(fp)
   13874:	00006506 	br	13a0c <OSSemDel+0x22c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   13878:	0005303a 	rdctl	r2,status
   1387c:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   13880:	e0fffc17 	ldw	r3,-16(fp)
   13884:	00bfff84 	movi	r2,-2
   13888:	1884703a 	and	r2,r3,r2
   1388c:	1001703a 	wrctl	status,r2
  
  return context;
   13890:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
   13894:	e0bff715 	stw	r2,-36(fp)
    if (pevent->OSEventGrp != 0) {                         /* See if any tasks waiting on semaphore    */
   13898:	e0bffd17 	ldw	r2,-12(fp)
   1389c:	10800283 	ldbu	r2,10(r2)
   138a0:	10803fcc 	andi	r2,r2,255
   138a4:	10000326 	beq	r2,zero,138b4 <OSSemDel+0xd4>
        tasks_waiting = OS_TRUE;                           /* Yes                                      */
   138a8:	00800044 	movi	r2,1
   138ac:	e0bff505 	stb	r2,-44(fp)
   138b0:	00000106 	br	138b8 <OSSemDel+0xd8>
    } else {
        tasks_waiting = OS_FALSE;                          /* No                                       */
   138b4:	e03ff505 	stb	zero,-44(fp)
    }
    switch (opt) {
   138b8:	e0bffe03 	ldbu	r2,-8(fp)
   138bc:	10000326 	beq	r2,zero,138cc <OSSemDel+0xec>
   138c0:	10800060 	cmpeqi	r2,r2,1
   138c4:	1000281e 	bne	r2,zero,13968 <OSSemDel+0x188>
   138c8:	00004506 	br	139e0 <OSSemDel+0x200>
        case OS_DEL_NO_PEND:                               /* Delete semaphore only if no task waiting */
             if (tasks_waiting == OS_FALSE) {
   138cc:	e0bff503 	ldbu	r2,-44(fp)
   138d0:	1000161e 	bne	r2,zero,1392c <OSSemDel+0x14c>
#if OS_EVENT_NAME_SIZE > 1
                 pevent->OSEventName[0] = '?';             /* Unknown name                             */
   138d4:	e0bffd17 	ldw	r2,-12(fp)
   138d8:	00c00fc4 	movi	r3,63
   138dc:	10c00385 	stb	r3,14(r2)
                 pevent->OSEventName[1] = OS_ASCII_NUL;
   138e0:	e0bffd17 	ldw	r2,-12(fp)
   138e4:	100003c5 	stb	zero,15(r2)
#endif
                 pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
   138e8:	e0bffd17 	ldw	r2,-12(fp)
   138ec:	10000005 	stb	zero,0(r2)
                 pevent->OSEventPtr     = OSEventFreeList; /* Return Event Control Block to free list  */
   138f0:	d0e72e17 	ldw	r3,-25416(gp)
   138f4:	e0bffd17 	ldw	r2,-12(fp)
   138f8:	10c00115 	stw	r3,4(r2)
                 pevent->OSEventCnt     = 0;
   138fc:	e0bffd17 	ldw	r2,-12(fp)
   13900:	1000020d 	sth	zero,8(r2)
                 OSEventFreeList        = pevent;          /* Get next free event control block        */
   13904:	e0bffd17 	ldw	r2,-12(fp)
   13908:	d0a72e15 	stw	r2,-25416(gp)
   1390c:	e0bff717 	ldw	r2,-36(fp)
   13910:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   13914:	e0bff817 	ldw	r2,-32(fp)
   13918:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_NONE;
   1391c:	e0bfff17 	ldw	r2,-4(fp)
   13920:	10000005 	stb	zero,0(r2)
                 pevent_return          = (OS_EVENT *)0;   /* Semaphore has been deleted               */
   13924:	e03ff615 	stw	zero,-40(fp)
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_TASK_WAITING;
                 pevent_return          = pevent;
             }
             break;
   13928:	00003706 	br	13a08 <OSSemDel+0x228>
   1392c:	e0bff717 	ldw	r2,-36(fp)
   13930:	e0bff915 	stw	r2,-28(fp)
   13934:	e0bff917 	ldw	r2,-28(fp)
   13938:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_NONE;
                 pevent_return          = (OS_EVENT *)0;   /* Semaphore has been deleted               */
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_TASK_WAITING;
   1393c:	e0bfff17 	ldw	r2,-4(fp)
   13940:	00c01244 	movi	r3,73
   13944:	10c00005 	stb	r3,0(r2)
                 pevent_return          = pevent;
   13948:	e0bffd17 	ldw	r2,-12(fp)
   1394c:	e0bff615 	stw	r2,-40(fp)
             }
             break;
   13950:	00002d06 	br	13a08 <OSSemDel+0x228>

        case OS_DEL_ALWAYS:                                /* Always delete the semaphore              */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for semaphore    */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_OK);
   13954:	000f883a 	mov	r7,zero
   13958:	01800044 	movi	r6,1
   1395c:	000b883a 	mov	r5,zero
   13960:	e13ffd17 	ldw	r4,-12(fp)
   13964:	000f4300 	call	f430 <OS_EventTaskRdy>
                 pevent_return          = pevent;
             }
             break;

        case OS_DEL_ALWAYS:                                /* Always delete the semaphore              */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for semaphore    */
   13968:	e0bffd17 	ldw	r2,-12(fp)
   1396c:	10800283 	ldbu	r2,10(r2)
   13970:	10803fcc 	andi	r2,r2,255
   13974:	103ff71e 	bne	r2,zero,13954 <__alt_data_end+0xfffe3954>
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_OK);
             }
#if OS_EVENT_NAME_SIZE > 1
             pevent->OSEventName[0] = '?';                 /* Unknown name                             */
   13978:	e0bffd17 	ldw	r2,-12(fp)
   1397c:	00c00fc4 	movi	r3,63
   13980:	10c00385 	stb	r3,14(r2)
             pevent->OSEventName[1] = OS_ASCII_NUL;
   13984:	e0bffd17 	ldw	r2,-12(fp)
   13988:	100003c5 	stb	zero,15(r2)
#endif
             pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
   1398c:	e0bffd17 	ldw	r2,-12(fp)
   13990:	10000005 	stb	zero,0(r2)
             pevent->OSEventPtr     = OSEventFreeList;     /* Return Event Control Block to free list  */
   13994:	d0e72e17 	ldw	r3,-25416(gp)
   13998:	e0bffd17 	ldw	r2,-12(fp)
   1399c:	10c00115 	stw	r3,4(r2)
             pevent->OSEventCnt     = 0;
   139a0:	e0bffd17 	ldw	r2,-12(fp)
   139a4:	1000020d 	sth	zero,8(r2)
             OSEventFreeList        = pevent;              /* Get next free event control block        */
   139a8:	e0bffd17 	ldw	r2,-12(fp)
   139ac:	d0a72e15 	stw	r2,-25416(gp)
   139b0:	e0bff717 	ldw	r2,-36(fp)
   139b4:	e0bffa15 	stw	r2,-24(fp)
   139b8:	e0bffa17 	ldw	r2,-24(fp)
   139bc:	1001703a 	wrctl	status,r2
             OS_EXIT_CRITICAL();
             if (tasks_waiting == OS_TRUE) {               /* Reschedule only if task(s) were waiting  */
   139c0:	e0bff503 	ldbu	r2,-44(fp)
   139c4:	10800058 	cmpnei	r2,r2,1
   139c8:	1000011e 	bne	r2,zero,139d0 <OSSemDel+0x1f0>
                 OS_Sched();                               /* Find highest priority task ready to run  */
   139cc:	000fe7c0 	call	fe7c <OS_Sched>
             }
             *perr                  = OS_ERR_NONE;
   139d0:	e0bfff17 	ldw	r2,-4(fp)
   139d4:	10000005 	stb	zero,0(r2)
             pevent_return          = (OS_EVENT *)0;       /* Semaphore has been deleted               */
   139d8:	e03ff615 	stw	zero,-40(fp)
             break;
   139dc:	00000a06 	br	13a08 <OSSemDel+0x228>
   139e0:	e0bff717 	ldw	r2,-36(fp)
   139e4:	e0bffb15 	stw	r2,-20(fp)
   139e8:	e0bffb17 	ldw	r2,-20(fp)
   139ec:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();
             *perr                  = OS_ERR_INVALID_OPT;
   139f0:	e0bfff17 	ldw	r2,-4(fp)
   139f4:	00c001c4 	movi	r3,7
   139f8:	10c00005 	stb	r3,0(r2)
             pevent_return          = pevent;
   139fc:	e0bffd17 	ldw	r2,-12(fp)
   13a00:	e0bff615 	stw	r2,-40(fp)
             break;
   13a04:	0001883a 	nop
    }
    return (pevent_return);
   13a08:	e0bff617 	ldw	r2,-40(fp)
}
   13a0c:	e037883a 	mov	sp,fp
   13a10:	dfc00117 	ldw	ra,4(sp)
   13a14:	df000017 	ldw	fp,0(sp)
   13a18:	dec00204 	addi	sp,sp,8
   13a1c:	f800283a 	ret

00013a20 <OSSemPend>:
* Returns    : none
*********************************************************************************************************
*/
/*$PAGE*/
void  OSSemPend (OS_EVENT *pevent, INT16U timeout, INT8U *perr)
{
   13a20:	defff504 	addi	sp,sp,-44
   13a24:	dfc00a15 	stw	ra,40(sp)
   13a28:	df000915 	stw	fp,36(sp)
   13a2c:	df000904 	addi	fp,sp,36
   13a30:	e13ffd15 	stw	r4,-12(fp)
   13a34:	2805883a 	mov	r2,r5
   13a38:	e1bfff15 	stw	r6,-4(fp)
   13a3c:	e0bffe0d 	sth	r2,-8(fp)
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   13a40:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
   13a44:	e0bfff17 	ldw	r2,-4(fp)
   13a48:	10007226 	beq	r2,zero,13c14 <OSSemPend+0x1f4>
        return;
    }
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
   13a4c:	e0bffd17 	ldw	r2,-12(fp)
   13a50:	1000041e 	bne	r2,zero,13a64 <OSSemPend+0x44>
        *perr = OS_ERR_PEVENT_NULL;
   13a54:	e0bfff17 	ldw	r2,-4(fp)
   13a58:	00c00104 	movi	r3,4
   13a5c:	10c00005 	stb	r3,0(r2)
        return;
   13a60:	00006d06 	br	13c18 <OSSemPend+0x1f8>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
   13a64:	e0bffd17 	ldw	r2,-12(fp)
   13a68:	10800003 	ldbu	r2,0(r2)
   13a6c:	10803fcc 	andi	r2,r2,255
   13a70:	108000e0 	cmpeqi	r2,r2,3
   13a74:	1000041e 	bne	r2,zero,13a88 <OSSemPend+0x68>
        *perr = OS_ERR_EVENT_TYPE;
   13a78:	e0bfff17 	ldw	r2,-4(fp)
   13a7c:	00c00044 	movi	r3,1
   13a80:	10c00005 	stb	r3,0(r2)
        return;
   13a84:	00006406 	br	13c18 <OSSemPend+0x1f8>
    }
    if (OSIntNesting > 0) {                           /* See if called from ISR ...                    */
   13a88:	d0a72f03 	ldbu	r2,-25412(gp)
   13a8c:	10803fcc 	andi	r2,r2,255
   13a90:	10000426 	beq	r2,zero,13aa4 <OSSemPend+0x84>
        *perr = OS_ERR_PEND_ISR;                      /* ... can't PEND from an ISR                    */
   13a94:	e0bfff17 	ldw	r2,-4(fp)
   13a98:	00c00084 	movi	r3,2
   13a9c:	10c00005 	stb	r3,0(r2)
        return;
   13aa0:	00005d06 	br	13c18 <OSSemPend+0x1f8>
    }
    if (OSLockNesting > 0) {                          /* See if called with scheduler locked ...       */
   13aa4:	d0a72103 	ldbu	r2,-25468(gp)
   13aa8:	10803fcc 	andi	r2,r2,255
   13aac:	10000426 	beq	r2,zero,13ac0 <OSSemPend+0xa0>
        *perr = OS_ERR_PEND_LOCKED;                   /* ... can't PEND when locked                    */
   13ab0:	e0bfff17 	ldw	r2,-4(fp)
   13ab4:	00c00344 	movi	r3,13
   13ab8:	10c00005 	stb	r3,0(r2)
        return;
   13abc:	00005606 	br	13c18 <OSSemPend+0x1f8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   13ac0:	0005303a 	rdctl	r2,status
   13ac4:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   13ac8:	e0fffc17 	ldw	r3,-16(fp)
   13acc:	00bfff84 	movi	r2,-2
   13ad0:	1884703a 	and	r2,r3,r2
   13ad4:	1001703a 	wrctl	status,r2
  
  return context;
   13ad8:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
   13adc:	e0bff715 	stw	r2,-36(fp)
    if (pevent->OSEventCnt > 0) {                     /* If sem. is positive, resource available ...   */
   13ae0:	e0bffd17 	ldw	r2,-12(fp)
   13ae4:	1080020b 	ldhu	r2,8(r2)
   13ae8:	10bfffcc 	andi	r2,r2,65535
   13aec:	10000d26 	beq	r2,zero,13b24 <OSSemPend+0x104>
        pevent->OSEventCnt--;                         /* ... decrement semaphore only if positive.     */
   13af0:	e0bffd17 	ldw	r2,-12(fp)
   13af4:	1080020b 	ldhu	r2,8(r2)
   13af8:	10bfffc4 	addi	r2,r2,-1
   13afc:	1007883a 	mov	r3,r2
   13b00:	e0bffd17 	ldw	r2,-12(fp)
   13b04:	10c0020d 	sth	r3,8(r2)
   13b08:	e0bff717 	ldw	r2,-36(fp)
   13b0c:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   13b10:	e0bff817 	ldw	r2,-32(fp)
   13b14:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_NONE;
   13b18:	e0bfff17 	ldw	r2,-4(fp)
   13b1c:	10000005 	stb	zero,0(r2)
        return;
   13b20:	00003d06 	br	13c18 <OSSemPend+0x1f8>
    }
                                                      /* Otherwise, must wait until event occurs       */
    OSTCBCur->OSTCBStat     |= OS_STAT_SEM;           /* Resource not available, pend on semaphore     */
   13b24:	d0a73017 	ldw	r2,-25408(gp)
   13b28:	d0e73017 	ldw	r3,-25408(gp)
   13b2c:	18c00c03 	ldbu	r3,48(r3)
   13b30:	18c00054 	ori	r3,r3,1
   13b34:	10c00c05 	stb	r3,48(r2)
    OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
   13b38:	d0a73017 	ldw	r2,-25408(gp)
   13b3c:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly       = timeout;               /* Store pend timeout in TCB                     */
   13b40:	d0a73017 	ldw	r2,-25408(gp)
   13b44:	e0fffe0b 	ldhu	r3,-8(fp)
   13b48:	10c00b8d 	sth	r3,46(r2)
    OS_EventTaskWait(pevent);                         /* Suspend task until event or timeout occurs    */
   13b4c:	e13ffd17 	ldw	r4,-12(fp)
   13b50:	000f5c80 	call	f5c8 <OS_EventTaskWait>
   13b54:	e0bff717 	ldw	r2,-36(fp)
   13b58:	e0bffb15 	stw	r2,-20(fp)
   13b5c:	e0bffb17 	ldw	r2,-20(fp)
   13b60:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OS_Sched();                                       /* Find next highest priority task ready         */
   13b64:	000fe7c0 	call	fe7c <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   13b68:	0005303a 	rdctl	r2,status
   13b6c:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   13b70:	e0fff917 	ldw	r3,-28(fp)
   13b74:	00bfff84 	movi	r2,-2
   13b78:	1884703a 	and	r2,r3,r2
   13b7c:	1001703a 	wrctl	status,r2
  
  return context;
   13b80:	e0bff917 	ldw	r2,-28(fp)
    OS_ENTER_CRITICAL();
   13b84:	e0bff715 	stw	r2,-36(fp)
    switch (OSTCBCur->OSTCBStatPend) {                /* See if we timed-out or aborted                */
   13b88:	d0a73017 	ldw	r2,-25408(gp)
   13b8c:	10800c43 	ldbu	r2,49(r2)
   13b90:	10803fcc 	andi	r2,r2,255
   13b94:	10000326 	beq	r2,zero,13ba4 <OSSemPend+0x184>
   13b98:	108000a0 	cmpeqi	r2,r2,2
   13b9c:	1000041e 	bne	r2,zero,13bb0 <OSSemPend+0x190>
   13ba0:	00000706 	br	13bc0 <OSSemPend+0x1a0>
        case OS_STAT_PEND_OK:
             *perr = OS_ERR_NONE;
   13ba4:	e0bfff17 	ldw	r2,-4(fp)
   13ba8:	10000005 	stb	zero,0(r2)
             break;
   13bac:	00000c06 	br	13be0 <OSSemPend+0x1c0>

        case OS_STAT_PEND_ABORT:
             *perr = OS_ERR_PEND_ABORT;               /* Indicate that we aborted                      */
   13bb0:	e0bfff17 	ldw	r2,-4(fp)
   13bb4:	00c00384 	movi	r3,14
   13bb8:	10c00005 	stb	r3,0(r2)
             break;
   13bbc:	00000806 	br	13be0 <OSSemPend+0x1c0>

        case OS_STAT_PEND_TO:
        default:        
             OS_EventTaskRemove(OSTCBCur, pevent);
   13bc0:	d0a73017 	ldw	r2,-25408(gp)
   13bc4:	e17ffd17 	ldw	r5,-12(fp)
   13bc8:	1009883a 	mov	r4,r2
   13bcc:	000f8280 	call	f828 <OS_EventTaskRemove>
             *perr = OS_ERR_TIMEOUT;                  /* Indicate that we didn't get event within TO   */
   13bd0:	e0bfff17 	ldw	r2,-4(fp)
   13bd4:	00c00284 	movi	r3,10
   13bd8:	10c00005 	stb	r3,0(r2)
             break;
   13bdc:	0001883a 	nop
    }
    OSTCBCur->OSTCBStat          =  OS_STAT_RDY;      /* Set   task  status to ready                   */
   13be0:	d0a73017 	ldw	r2,-25408(gp)
   13be4:	10000c05 	stb	zero,48(r2)
    OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;  /* Clear pend  status                            */
   13be8:	d0a73017 	ldw	r2,-25408(gp)
   13bec:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;    /* Clear event pointers                          */
   13bf0:	d0a73017 	ldw	r2,-25408(gp)
   13bf4:	10000715 	stw	zero,28(r2)
#if (OS_EVENT_MULTI_EN > 0)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
   13bf8:	d0a73017 	ldw	r2,-25408(gp)
   13bfc:	10000815 	stw	zero,32(r2)
   13c00:	e0bff717 	ldw	r2,-36(fp)
   13c04:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   13c08:	e0bffa17 	ldw	r2,-24(fp)
   13c0c:	1001703a 	wrctl	status,r2
   13c10:	00000106 	br	13c18 <OSSemPend+0x1f8>



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
        return;
   13c14:	0001883a 	nop
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;    /* Clear event pointers                          */
#if (OS_EVENT_MULTI_EN > 0)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
#endif
    OS_EXIT_CRITICAL();
}
   13c18:	e037883a 	mov	sp,fp
   13c1c:	dfc00117 	ldw	ra,4(sp)
   13c20:	df000017 	ldw	fp,0(sp)
   13c24:	dec00204 	addi	sp,sp,8
   13c28:	f800283a 	ret

00013c2c <OSSemPendAbort>:
*********************************************************************************************************
*/

#if OS_SEM_PEND_ABORT_EN > 0
INT8U  OSSemPendAbort (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
   13c2c:	defff604 	addi	sp,sp,-40
   13c30:	dfc00915 	stw	ra,36(sp)
   13c34:	df000815 	stw	fp,32(sp)
   13c38:	df000804 	addi	fp,sp,32
   13c3c:	e13ffd15 	stw	r4,-12(fp)
   13c40:	2805883a 	mov	r2,r5
   13c44:	e1bfff15 	stw	r6,-4(fp)
   13c48:	e0bffe05 	stb	r2,-8(fp)
    INT8U      nbr_tasks;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   13c4c:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
   13c50:	e0bfff17 	ldw	r2,-4(fp)
   13c54:	1000021e 	bne	r2,zero,13c60 <OSSemPendAbort+0x34>
        return (0);
   13c58:	0005883a 	mov	r2,zero
   13c5c:	00004906 	br	13d84 <OSSemPendAbort+0x158>
    }
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
   13c60:	e0bffd17 	ldw	r2,-12(fp)
   13c64:	1000051e 	bne	r2,zero,13c7c <OSSemPendAbort+0x50>
        *perr = OS_ERR_PEVENT_NULL;
   13c68:	e0bfff17 	ldw	r2,-4(fp)
   13c6c:	00c00104 	movi	r3,4
   13c70:	10c00005 	stb	r3,0(r2)
        return (0);
   13c74:	0005883a 	mov	r2,zero
   13c78:	00004206 	br	13d84 <OSSemPendAbort+0x158>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
   13c7c:	e0bffd17 	ldw	r2,-12(fp)
   13c80:	10800003 	ldbu	r2,0(r2)
   13c84:	10803fcc 	andi	r2,r2,255
   13c88:	108000e0 	cmpeqi	r2,r2,3
   13c8c:	1000051e 	bne	r2,zero,13ca4 <OSSemPendAbort+0x78>
        *perr = OS_ERR_EVENT_TYPE;
   13c90:	e0bfff17 	ldw	r2,-4(fp)
   13c94:	00c00044 	movi	r3,1
   13c98:	10c00005 	stb	r3,0(r2)
        return (0);
   13c9c:	0005883a 	mov	r2,zero
   13ca0:	00003806 	br	13d84 <OSSemPendAbort+0x158>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   13ca4:	0005303a 	rdctl	r2,status
   13ca8:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   13cac:	e0fffc17 	ldw	r3,-16(fp)
   13cb0:	00bfff84 	movi	r2,-2
   13cb4:	1884703a 	and	r2,r3,r2
   13cb8:	1001703a 	wrctl	status,r2
  
  return context;
   13cbc:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
   13cc0:	e0bff915 	stw	r2,-28(fp)
    if (pevent->OSEventGrp != 0) {                    /* See if any task waiting on semaphore?         */
   13cc4:	e0bffd17 	ldw	r2,-12(fp)
   13cc8:	10800283 	ldbu	r2,10(r2)
   13ccc:	10803fcc 	andi	r2,r2,255
   13cd0:	10002526 	beq	r2,zero,13d68 <OSSemPendAbort+0x13c>
        nbr_tasks = 0;
   13cd4:	e03ff805 	stb	zero,-32(fp)
        switch (opt) {
   13cd8:	e0bffe03 	ldbu	r2,-8(fp)
   13cdc:	10800060 	cmpeqi	r2,r2,1
   13ce0:	10000e26 	beq	r2,zero,13d1c <OSSemPendAbort+0xf0>
            case OS_PEND_OPT_BROADCAST:               /* Do we need to abort ALL waiting tasks?        */
                 while (pevent->OSEventGrp != 0) {    /* Yes, ready ALL tasks waiting on semaphore     */
   13ce4:	00000806 	br	13d08 <OSSemPendAbort+0xdc>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_ABORT);
   13ce8:	01c00084 	movi	r7,2
   13cec:	01800044 	movi	r6,1
   13cf0:	000b883a 	mov	r5,zero
   13cf4:	e13ffd17 	ldw	r4,-12(fp)
   13cf8:	000f4300 	call	f430 <OS_EventTaskRdy>
                     nbr_tasks++;
   13cfc:	e0bff803 	ldbu	r2,-32(fp)
   13d00:	10800044 	addi	r2,r2,1
   13d04:	e0bff805 	stb	r2,-32(fp)
    OS_ENTER_CRITICAL();
    if (pevent->OSEventGrp != 0) {                    /* See if any task waiting on semaphore?         */
        nbr_tasks = 0;
        switch (opt) {
            case OS_PEND_OPT_BROADCAST:               /* Do we need to abort ALL waiting tasks?        */
                 while (pevent->OSEventGrp != 0) {    /* Yes, ready ALL tasks waiting on semaphore     */
   13d08:	e0bffd17 	ldw	r2,-12(fp)
   13d0c:	10800283 	ldbu	r2,10(r2)
   13d10:	10803fcc 	andi	r2,r2,255
   13d14:	103ff41e 	bne	r2,zero,13ce8 <__alt_data_end+0xfffe3ce8>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_ABORT);
                     nbr_tasks++;
                 }
                 break;
   13d18:	00000906 	br	13d40 <OSSemPendAbort+0x114>
                 
            case OS_PEND_OPT_NONE:
            default:                                  /* No,  ready HPT       waiting on semaphore     */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_ABORT);
   13d1c:	01c00084 	movi	r7,2
   13d20:	01800044 	movi	r6,1
   13d24:	000b883a 	mov	r5,zero
   13d28:	e13ffd17 	ldw	r4,-12(fp)
   13d2c:	000f4300 	call	f430 <OS_EventTaskRdy>
                 nbr_tasks++;
   13d30:	e0bff803 	ldbu	r2,-32(fp)
   13d34:	10800044 	addi	r2,r2,1
   13d38:	e0bff805 	stb	r2,-32(fp)
                 break;
   13d3c:	0001883a 	nop
   13d40:	e0bff917 	ldw	r2,-28(fp)
   13d44:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   13d48:	e0bffa17 	ldw	r2,-24(fp)
   13d4c:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        OS_Sched();                                   /* Find HPT ready to run                         */
   13d50:	000fe7c0 	call	fe7c <OS_Sched>
        *perr = OS_ERR_PEND_ABORT;
   13d54:	e0bfff17 	ldw	r2,-4(fp)
   13d58:	00c00384 	movi	r3,14
   13d5c:	10c00005 	stb	r3,0(r2)
        return (nbr_tasks);
   13d60:	e0bff803 	ldbu	r2,-32(fp)
   13d64:	00000706 	br	13d84 <OSSemPendAbort+0x158>
   13d68:	e0bff917 	ldw	r2,-28(fp)
   13d6c:	e0bffb15 	stw	r2,-20(fp)
   13d70:	e0bffb17 	ldw	r2,-20(fp)
   13d74:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   13d78:	e0bfff17 	ldw	r2,-4(fp)
   13d7c:	10000005 	stb	zero,0(r2)
    return (0);                                       /* No tasks waiting on semaphore                 */
   13d80:	0005883a 	mov	r2,zero
}
   13d84:	e037883a 	mov	sp,fp
   13d88:	dfc00117 	ldw	ra,4(sp)
   13d8c:	df000017 	ldw	fp,0(sp)
   13d90:	dec00204 	addi	sp,sp,8
   13d94:	f800283a 	ret

00013d98 <OSSemPost>:
*              OS_ERR_PEVENT_NULL  If 'pevent' is a NULL pointer.
*********************************************************************************************************
*/

INT8U  OSSemPost (OS_EVENT *pevent)
{
   13d98:	defff804 	addi	sp,sp,-32
   13d9c:	dfc00715 	stw	ra,28(sp)
   13da0:	df000615 	stw	fp,24(sp)
   13da4:	df000604 	addi	fp,sp,24
   13da8:	e13fff15 	stw	r4,-4(fp)
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   13dac:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
   13db0:	e0bfff17 	ldw	r2,-4(fp)
   13db4:	1000021e 	bne	r2,zero,13dc0 <OSSemPost+0x28>
        return (OS_ERR_PEVENT_NULL);
   13db8:	00800104 	movi	r2,4
   13dbc:	00003506 	br	13e94 <OSSemPost+0xfc>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
   13dc0:	e0bfff17 	ldw	r2,-4(fp)
   13dc4:	10800003 	ldbu	r2,0(r2)
   13dc8:	10803fcc 	andi	r2,r2,255
   13dcc:	108000e0 	cmpeqi	r2,r2,3
   13dd0:	1000021e 	bne	r2,zero,13ddc <OSSemPost+0x44>
        return (OS_ERR_EVENT_TYPE);
   13dd4:	00800044 	movi	r2,1
   13dd8:	00002e06 	br	13e94 <OSSemPost+0xfc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   13ddc:	0005303a 	rdctl	r2,status
   13de0:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   13de4:	e0fffe17 	ldw	r3,-8(fp)
   13de8:	00bfff84 	movi	r2,-2
   13dec:	1884703a 	and	r2,r3,r2
   13df0:	1001703a 	wrctl	status,r2
  
  return context;
   13df4:	e0bffe17 	ldw	r2,-8(fp)
    }
    OS_ENTER_CRITICAL();
   13df8:	e0bffa15 	stw	r2,-24(fp)
    if (pevent->OSEventGrp != 0) {                    /* See if any task waiting for semaphore         */
   13dfc:	e0bfff17 	ldw	r2,-4(fp)
   13e00:	10800283 	ldbu	r2,10(r2)
   13e04:	10803fcc 	andi	r2,r2,255
   13e08:	10000c26 	beq	r2,zero,13e3c <OSSemPost+0xa4>
                                                      /* Ready HPT waiting on event                    */
        (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_OK);
   13e0c:	000f883a 	mov	r7,zero
   13e10:	01800044 	movi	r6,1
   13e14:	000b883a 	mov	r5,zero
   13e18:	e13fff17 	ldw	r4,-4(fp)
   13e1c:	000f4300 	call	f430 <OS_EventTaskRdy>
   13e20:	e0bffa17 	ldw	r2,-24(fp)
   13e24:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   13e28:	e0bffb17 	ldw	r2,-20(fp)
   13e2c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                   /* Find HPT ready to run                         */
   13e30:	000fe7c0 	call	fe7c <OS_Sched>
        return (OS_ERR_NONE);
   13e34:	0005883a 	mov	r2,zero
   13e38:	00001606 	br	13e94 <OSSemPost+0xfc>
    }
    if (pevent->OSEventCnt < 65535u) {                /* Make sure semaphore will not overflow         */
   13e3c:	e0bfff17 	ldw	r2,-4(fp)
   13e40:	1080020b 	ldhu	r2,8(r2)
   13e44:	10ffffcc 	andi	r3,r2,65535
   13e48:	00bfffd4 	movui	r2,65535
   13e4c:	18800c26 	beq	r3,r2,13e80 <OSSemPost+0xe8>
        pevent->OSEventCnt++;                         /* Increment semaphore count to register event   */
   13e50:	e0bfff17 	ldw	r2,-4(fp)
   13e54:	1080020b 	ldhu	r2,8(r2)
   13e58:	10800044 	addi	r2,r2,1
   13e5c:	1007883a 	mov	r3,r2
   13e60:	e0bfff17 	ldw	r2,-4(fp)
   13e64:	10c0020d 	sth	r3,8(r2)
   13e68:	e0bffa17 	ldw	r2,-24(fp)
   13e6c:	e0bffc15 	stw	r2,-16(fp)
   13e70:	e0bffc17 	ldw	r2,-16(fp)
   13e74:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_NONE);
   13e78:	0005883a 	mov	r2,zero
   13e7c:	00000506 	br	13e94 <OSSemPost+0xfc>
   13e80:	e0bffa17 	ldw	r2,-24(fp)
   13e84:	e0bffd15 	stw	r2,-12(fp)
   13e88:	e0bffd17 	ldw	r2,-12(fp)
   13e8c:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();                               /* Semaphore value has reached its maximum       */
    return (OS_ERR_SEM_OVF);
   13e90:	00800c84 	movi	r2,50
}
   13e94:	e037883a 	mov	sp,fp
   13e98:	dfc00117 	ldw	ra,4(sp)
   13e9c:	df000017 	ldw	fp,0(sp)
   13ea0:	dec00204 	addi	sp,sp,8
   13ea4:	f800283a 	ret

00013ea8 <OSSemQuery>:
*********************************************************************************************************
*/

#if OS_SEM_QUERY_EN > 0
INT8U  OSSemQuery (OS_EVENT *pevent, OS_SEM_DATA *p_sem_data)
{
   13ea8:	defff704 	addi	sp,sp,-36
   13eac:	df000815 	stw	fp,32(sp)
   13eb0:	df000804 	addi	fp,sp,32
   13eb4:	e13ffe15 	stw	r4,-8(fp)
   13eb8:	e17fff15 	stw	r5,-4(fp)
    INT16U    *psrc;
    INT16U    *pdest;
#endif
    INT8U      i;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
   13ebc:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
   13ec0:	e0bffe17 	ldw	r2,-8(fp)
   13ec4:	1000021e 	bne	r2,zero,13ed0 <OSSemQuery+0x28>
        return (OS_ERR_PEVENT_NULL);
   13ec8:	00800104 	movi	r2,4
   13ecc:	00003606 	br	13fa8 <OSSemQuery+0x100>
    }
    if (p_sem_data == (OS_SEM_DATA *)0) {                  /* Validate 'p_sem_data'                    */
   13ed0:	e0bfff17 	ldw	r2,-4(fp)
   13ed4:	1000021e 	bne	r2,zero,13ee0 <OSSemQuery+0x38>
        return (OS_ERR_PDATA_NULL);
   13ed8:	00800244 	movi	r2,9
   13edc:	00003206 	br	13fa8 <OSSemQuery+0x100>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {        /* Validate event block type                */
   13ee0:	e0bffe17 	ldw	r2,-8(fp)
   13ee4:	10800003 	ldbu	r2,0(r2)
   13ee8:	10803fcc 	andi	r2,r2,255
   13eec:	108000e0 	cmpeqi	r2,r2,3
   13ef0:	1000021e 	bne	r2,zero,13efc <OSSemQuery+0x54>
        return (OS_ERR_EVENT_TYPE);
   13ef4:	00800044 	movi	r2,1
   13ef8:	00002b06 	br	13fa8 <OSSemQuery+0x100>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   13efc:	0005303a 	rdctl	r2,status
   13f00:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   13f04:	e0fffd17 	ldw	r3,-12(fp)
   13f08:	00bfff84 	movi	r2,-2
   13f0c:	1884703a 	and	r2,r3,r2
   13f10:	1001703a 	wrctl	status,r2
  
  return context;
   13f14:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
   13f18:	e0bffb15 	stw	r2,-20(fp)
    p_sem_data->OSEventGrp = pevent->OSEventGrp;           /* Copy message mailbox wait list           */
   13f1c:	e0bffe17 	ldw	r2,-8(fp)
   13f20:	10c00283 	ldbu	r3,10(r2)
   13f24:	e0bfff17 	ldw	r2,-4(fp)
   13f28:	10c00145 	stb	r3,5(r2)
    psrc                   = &pevent->OSEventTbl[0];
   13f2c:	e0bffe17 	ldw	r2,-8(fp)
   13f30:	108002c4 	addi	r2,r2,11
   13f34:	e0bff815 	stw	r2,-32(fp)
    pdest                  = &p_sem_data->OSEventTbl[0];
   13f38:	e0bfff17 	ldw	r2,-4(fp)
   13f3c:	10800084 	addi	r2,r2,2
   13f40:	e0bff915 	stw	r2,-28(fp)
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
   13f44:	e03ffa05 	stb	zero,-24(fp)
   13f48:	00000b06 	br	13f78 <OSSemQuery+0xd0>
        *pdest++ = *psrc++;
   13f4c:	e0bff917 	ldw	r2,-28(fp)
   13f50:	10c00044 	addi	r3,r2,1
   13f54:	e0fff915 	stw	r3,-28(fp)
   13f58:	e0fff817 	ldw	r3,-32(fp)
   13f5c:	19000044 	addi	r4,r3,1
   13f60:	e13ff815 	stw	r4,-32(fp)
   13f64:	18c00003 	ldbu	r3,0(r3)
   13f68:	10c00005 	stb	r3,0(r2)
    }
    OS_ENTER_CRITICAL();
    p_sem_data->OSEventGrp = pevent->OSEventGrp;           /* Copy message mailbox wait list           */
    psrc                   = &pevent->OSEventTbl[0];
    pdest                  = &p_sem_data->OSEventTbl[0];
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
   13f6c:	e0bffa03 	ldbu	r2,-24(fp)
   13f70:	10800044 	addi	r2,r2,1
   13f74:	e0bffa05 	stb	r2,-24(fp)
   13f78:	e0bffa03 	ldbu	r2,-24(fp)
   13f7c:	108000f0 	cmpltui	r2,r2,3
   13f80:	103ff21e 	bne	r2,zero,13f4c <__alt_data_end+0xfffe3f4c>
        *pdest++ = *psrc++;
    }
    p_sem_data->OSCnt = pevent->OSEventCnt;                /* Get semaphore count                      */
   13f84:	e0bffe17 	ldw	r2,-8(fp)
   13f88:	10c0020b 	ldhu	r3,8(r2)
   13f8c:	e0bfff17 	ldw	r2,-4(fp)
   13f90:	10c0000d 	sth	r3,0(r2)
   13f94:	e0bffb17 	ldw	r2,-20(fp)
   13f98:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   13f9c:	e0bffc17 	ldw	r2,-16(fp)
   13fa0:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
   13fa4:	0005883a 	mov	r2,zero
}
   13fa8:	e037883a 	mov	sp,fp
   13fac:	df000017 	ldw	fp,0(sp)
   13fb0:	dec00104 	addi	sp,sp,4
   13fb4:	f800283a 	ret

00013fb8 <OSSemSet>:
*********************************************************************************************************
*/

#if OS_SEM_SET_EN > 0
void  OSSemSet (OS_EVENT *pevent, INT16U cnt, INT8U *perr)
{
   13fb8:	defff904 	addi	sp,sp,-28
   13fbc:	df000615 	stw	fp,24(sp)
   13fc0:	df000604 	addi	fp,sp,24
   13fc4:	e13ffd15 	stw	r4,-12(fp)
   13fc8:	2805883a 	mov	r2,r5
   13fcc:	e1bfff15 	stw	r6,-4(fp)
   13fd0:	e0bffe0d 	sth	r2,-8(fp)
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   13fd4:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
   13fd8:	e0bfff17 	ldw	r2,-4(fp)
   13fdc:	10003126 	beq	r2,zero,140a4 <OSSemSet+0xec>
        return;
    }
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
   13fe0:	e0bffd17 	ldw	r2,-12(fp)
   13fe4:	1000041e 	bne	r2,zero,13ff8 <OSSemSet+0x40>
        *perr = OS_ERR_PEVENT_NULL;
   13fe8:	e0bfff17 	ldw	r2,-4(fp)
   13fec:	00c00104 	movi	r3,4
   13ff0:	10c00005 	stb	r3,0(r2)
        return;
   13ff4:	00002c06 	br	140a8 <OSSemSet+0xf0>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
   13ff8:	e0bffd17 	ldw	r2,-12(fp)
   13ffc:	10800003 	ldbu	r2,0(r2)
   14000:	10803fcc 	andi	r2,r2,255
   14004:	108000e0 	cmpeqi	r2,r2,3
   14008:	1000041e 	bne	r2,zero,1401c <OSSemSet+0x64>
        *perr = OS_ERR_EVENT_TYPE;
   1400c:	e0bfff17 	ldw	r2,-4(fp)
   14010:	00c00044 	movi	r3,1
   14014:	10c00005 	stb	r3,0(r2)
        return;
   14018:	00002306 	br	140a8 <OSSemSet+0xf0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1401c:	0005303a 	rdctl	r2,status
   14020:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   14024:	e0fffc17 	ldw	r3,-16(fp)
   14028:	00bfff84 	movi	r2,-2
   1402c:	1884703a 	and	r2,r3,r2
   14030:	1001703a 	wrctl	status,r2
  
  return context;
   14034:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
   14038:	e0bffa15 	stw	r2,-24(fp)
    *perr = OS_ERR_NONE;
   1403c:	e0bfff17 	ldw	r2,-4(fp)
   14040:	10000005 	stb	zero,0(r2)
    if (pevent->OSEventCnt > 0) {                     /* See if semaphore already has a count          */
   14044:	e0bffd17 	ldw	r2,-12(fp)
   14048:	1080020b 	ldhu	r2,8(r2)
   1404c:	10bfffcc 	andi	r2,r2,65535
   14050:	10000426 	beq	r2,zero,14064 <OSSemSet+0xac>
        pevent->OSEventCnt = cnt;                     /* Yes, set it to the new value specified.       */
   14054:	e0bffd17 	ldw	r2,-12(fp)
   14058:	e0fffe0b 	ldhu	r3,-8(fp)
   1405c:	10c0020d 	sth	r3,8(r2)
   14060:	00000b06 	br	14090 <OSSemSet+0xd8>
    } else {                                          /* No                                            */
        if (pevent->OSEventGrp == 0) {                /*      See if task(s) waiting?                  */
   14064:	e0bffd17 	ldw	r2,-12(fp)
   14068:	10800283 	ldbu	r2,10(r2)
   1406c:	10803fcc 	andi	r2,r2,255
   14070:	1000041e 	bne	r2,zero,14084 <OSSemSet+0xcc>
            pevent->OSEventCnt = cnt;                 /*      No, OK to set the value                  */
   14074:	e0bffd17 	ldw	r2,-12(fp)
   14078:	e0fffe0b 	ldhu	r3,-8(fp)
   1407c:	10c0020d 	sth	r3,8(r2)
   14080:	00000306 	br	14090 <OSSemSet+0xd8>
        } else {
            *perr              = OS_ERR_TASK_WAITING;
   14084:	e0bfff17 	ldw	r2,-4(fp)
   14088:	00c01244 	movi	r3,73
   1408c:	10c00005 	stb	r3,0(r2)
   14090:	e0bffa17 	ldw	r2,-24(fp)
   14094:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   14098:	e0bffb17 	ldw	r2,-20(fp)
   1409c:	1001703a 	wrctl	status,r2
   140a0:	00000106 	br	140a8 <OSSemSet+0xf0>



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
        return;
   140a4:	0001883a 	nop
        } else {
            *perr              = OS_ERR_TASK_WAITING;
        }
    }
    OS_EXIT_CRITICAL();
}
   140a8:	e037883a 	mov	sp,fp
   140ac:	df000017 	ldw	fp,0(sp)
   140b0:	dec00104 	addi	sp,sp,4
   140b4:	f800283a 	ret

000140b8 <OSTaskChangePrio>:
*********************************************************************************************************
*/

#if OS_TASK_CHANGE_PRIO_EN > 0
INT8U  OSTaskChangePrio (INT8U oldprio, INT8U newprio)
{
   140b8:	defff104 	addi	sp,sp,-60
   140bc:	dfc00e15 	stw	ra,56(sp)
   140c0:	df000d15 	stw	fp,52(sp)
   140c4:	df000d04 	addi	fp,sp,52
   140c8:	2007883a 	mov	r3,r4
   140cc:	2805883a 	mov	r2,r5
   140d0:	e0fffe05 	stb	r3,-8(fp)
   140d4:	e0bfff05 	stb	r2,-4(fp)
    INT16U     bitx_new;
    INT16U     bity_old;
    INT16U     bitx_old;
#endif
#if OS_CRITICAL_METHOD == 3
    OS_CPU_SR  cpu_sr = 0;                                  /* Storage for CPU status register         */
   140d8:	e03ff515 	stw	zero,-44(fp)
#endif


/*$PAGE*/
#if OS_ARG_CHK_EN > 0
    if (oldprio >= OS_LOWEST_PRIO) {
   140dc:	e0bffe03 	ldbu	r2,-8(fp)
   140e0:	10800530 	cmpltui	r2,r2,20
   140e4:	1000051e 	bne	r2,zero,140fc <OSTaskChangePrio+0x44>
        if (oldprio != OS_PRIO_SELF) {
   140e8:	e0bffe03 	ldbu	r2,-8(fp)
   140ec:	10803fe0 	cmpeqi	r2,r2,255
   140f0:	1000021e 	bne	r2,zero,140fc <OSTaskChangePrio+0x44>
            return (OS_ERR_PRIO_INVALID);
   140f4:	00800a84 	movi	r2,42
   140f8:	00012606 	br	14594 <OSTaskChangePrio+0x4dc>
        }
    }
    if (newprio >= OS_LOWEST_PRIO) {
   140fc:	e0bfff03 	ldbu	r2,-4(fp)
   14100:	10800530 	cmpltui	r2,r2,20
   14104:	1000021e 	bne	r2,zero,14110 <OSTaskChangePrio+0x58>
        return (OS_ERR_PRIO_INVALID);
   14108:	00800a84 	movi	r2,42
   1410c:	00012106 	br	14594 <OSTaskChangePrio+0x4dc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   14110:	0005303a 	rdctl	r2,status
   14114:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   14118:	e0fffd17 	ldw	r3,-12(fp)
   1411c:	00bfff84 	movi	r2,-2
   14120:	1884703a 	and	r2,r3,r2
   14124:	1001703a 	wrctl	status,r2
  
  return context;
   14128:	e0bffd17 	ldw	r2,-12(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   1412c:	e0bff515 	stw	r2,-44(fp)
    if (OSTCBPrioTbl[newprio] != (OS_TCB *)0) {             /* New priority must not already exist     */
   14130:	e0ffff03 	ldbu	r3,-4(fp)
   14134:	008000b4 	movhi	r2,2
   14138:	10bf4204 	addi	r2,r2,-760
   1413c:	18c7883a 	add	r3,r3,r3
   14140:	18c7883a 	add	r3,r3,r3
   14144:	10c5883a 	add	r2,r2,r3
   14148:	10800017 	ldw	r2,0(r2)
   1414c:	10000626 	beq	r2,zero,14168 <OSTaskChangePrio+0xb0>
   14150:	e0bff517 	ldw	r2,-44(fp)
   14154:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   14158:	e0bff617 	ldw	r2,-40(fp)
   1415c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_PRIO_EXIST);
   14160:	00800a04 	movi	r2,40
   14164:	00010b06 	br	14594 <OSTaskChangePrio+0x4dc>
    }
    if (oldprio == OS_PRIO_SELF) {                          /* See if changing self                    */
   14168:	e0bffe03 	ldbu	r2,-8(fp)
   1416c:	10803fd8 	cmpnei	r2,r2,255
   14170:	1000031e 	bne	r2,zero,14180 <OSTaskChangePrio+0xc8>
        oldprio = OSTCBCur->OSTCBPrio;                      /* Yes, get priority                       */
   14174:	d0a73017 	ldw	r2,-25408(gp)
   14178:	10800c83 	ldbu	r2,50(r2)
   1417c:	e0bffe05 	stb	r2,-8(fp)
    }
    ptcb = OSTCBPrioTbl[oldprio];
   14180:	e0fffe03 	ldbu	r3,-8(fp)
   14184:	008000b4 	movhi	r2,2
   14188:	10bf4204 	addi	r2,r2,-760
   1418c:	18c7883a 	add	r3,r3,r3
   14190:	18c7883a 	add	r3,r3,r3
   14194:	10c5883a 	add	r2,r2,r3
   14198:	10800017 	ldw	r2,0(r2)
   1419c:	e0bff815 	stw	r2,-32(fp)
    if (ptcb == (OS_TCB *)0) {                              /* Does task to change exist?              */
   141a0:	e0bff817 	ldw	r2,-32(fp)
   141a4:	1000061e 	bne	r2,zero,141c0 <OSTaskChangePrio+0x108>
   141a8:	e0bff517 	ldw	r2,-44(fp)
   141ac:	e0bff715 	stw	r2,-36(fp)
   141b0:	e0bff717 	ldw	r2,-36(fp)
   141b4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                                 /* No, can't change its priority!          */
        return (OS_ERR_PRIO);
   141b8:	00800a44 	movi	r2,41
   141bc:	0000f506 	br	14594 <OSTaskChangePrio+0x4dc>
    }
    if (ptcb == OS_TCB_RESERVED) {                          /* Is task assigned to Mutex               */
   141c0:	e0bff817 	ldw	r2,-32(fp)
   141c4:	10800058 	cmpnei	r2,r2,1
   141c8:	1000061e 	bne	r2,zero,141e4 <OSTaskChangePrio+0x12c>
   141cc:	e0bff517 	ldw	r2,-44(fp)
   141d0:	e0bff915 	stw	r2,-28(fp)
   141d4:	e0bff917 	ldw	r2,-28(fp)
   141d8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                                 /* No, can't change its priority!          */
        return (OS_ERR_TASK_NOT_EXIST);
   141dc:	008010c4 	movi	r2,67
   141e0:	0000ec06 	br	14594 <OSTaskChangePrio+0x4dc>
    }
#if OS_LOWEST_PRIO <= 63
    y_new                 = (INT8U)(newprio >> 3);          /* Yes, compute new TCB fields             */
   141e4:	e0bfff03 	ldbu	r2,-4(fp)
   141e8:	1004d0fa 	srli	r2,r2,3
   141ec:	e0bffb05 	stb	r2,-20(fp)
    x_new                 = (INT8U)(newprio & 0x07);
   141f0:	e0bfff03 	ldbu	r2,-4(fp)
   141f4:	108001cc 	andi	r2,r2,7
   141f8:	e0bffb45 	stb	r2,-19(fp)
    bity_new              = (INT8U)(1 << y_new);
   141fc:	e0bffb03 	ldbu	r2,-20(fp)
   14200:	00c00044 	movi	r3,1
   14204:	1884983a 	sll	r2,r3,r2
   14208:	e0bffb85 	stb	r2,-18(fp)
    bitx_new              = (INT8U)(1 << x_new);
   1420c:	e0bffb43 	ldbu	r2,-19(fp)
   14210:	00c00044 	movi	r3,1
   14214:	1884983a 	sll	r2,r3,r2
   14218:	e0bffbc5 	stb	r2,-17(fp)
    x_new                 = (INT8U)( newprio & 0x0F);
    bity_new              = (INT16U)(1 << y_new);
    bitx_new              = (INT16U)(1 << x_new);
#endif

    OSTCBPrioTbl[oldprio] = (OS_TCB *)0;                    /* Remove TCB from old priority            */
   1421c:	e0fffe03 	ldbu	r3,-8(fp)
   14220:	008000b4 	movhi	r2,2
   14224:	10bf4204 	addi	r2,r2,-760
   14228:	18c7883a 	add	r3,r3,r3
   1422c:	18c7883a 	add	r3,r3,r3
   14230:	10c5883a 	add	r2,r2,r3
   14234:	10000015 	stw	zero,0(r2)
    OSTCBPrioTbl[newprio] =  ptcb;                          /* Place pointer to TCB @ new priority     */
   14238:	e0ffff03 	ldbu	r3,-4(fp)
   1423c:	008000b4 	movhi	r2,2
   14240:	10bf4204 	addi	r2,r2,-760
   14244:	18c7883a 	add	r3,r3,r3
   14248:	18c7883a 	add	r3,r3,r3
   1424c:	10c5883a 	add	r2,r2,r3
   14250:	e0fff817 	ldw	r3,-32(fp)
   14254:	10c00015 	stw	r3,0(r2)
    y_old                 =  ptcb->OSTCBY;
   14258:	e0bff817 	ldw	r2,-32(fp)
   1425c:	10800d03 	ldbu	r2,52(r2)
   14260:	e0bffc05 	stb	r2,-16(fp)
    bity_old              =  ptcb->OSTCBBitY;
   14264:	e0bff817 	ldw	r2,-32(fp)
   14268:	10800d83 	ldbu	r2,54(r2)
   1426c:	e0bffc45 	stb	r2,-15(fp)
    bitx_old              =  ptcb->OSTCBBitX;
   14270:	e0bff817 	ldw	r2,-32(fp)
   14274:	10800d43 	ldbu	r2,53(r2)
   14278:	e0bffc85 	stb	r2,-14(fp)
    if ((OSRdyTbl[y_old] &   bitx_old) != 0) {              /* If task is ready make it not            */
   1427c:	e0fffc03 	ldbu	r3,-16(fp)
   14280:	d0a72d44 	addi	r2,gp,-25419
   14284:	1885883a 	add	r2,r3,r2
   14288:	10c00003 	ldbu	r3,0(r2)
   1428c:	e0bffc83 	ldbu	r2,-14(fp)
   14290:	1884703a 	and	r2,r3,r2
   14294:	10803fcc 	andi	r2,r2,255
   14298:	10002826 	beq	r2,zero,1433c <OSTaskChangePrio+0x284>
         OSRdyTbl[y_old] &= ~bitx_old;
   1429c:	e0fffc03 	ldbu	r3,-16(fp)
   142a0:	e13ffc03 	ldbu	r4,-16(fp)
   142a4:	d0a72d44 	addi	r2,gp,-25419
   142a8:	2085883a 	add	r2,r4,r2
   142ac:	10800003 	ldbu	r2,0(r2)
   142b0:	1009883a 	mov	r4,r2
   142b4:	e0bffc83 	ldbu	r2,-14(fp)
   142b8:	0084303a 	nor	r2,zero,r2
   142bc:	2084703a 	and	r2,r4,r2
   142c0:	1009883a 	mov	r4,r2
   142c4:	d0a72d44 	addi	r2,gp,-25419
   142c8:	1885883a 	add	r2,r3,r2
   142cc:	11000005 	stb	r4,0(r2)
         if (OSRdyTbl[y_old] == 0) {
   142d0:	e0fffc03 	ldbu	r3,-16(fp)
   142d4:	d0a72d44 	addi	r2,gp,-25419
   142d8:	1885883a 	add	r2,r3,r2
   142dc:	10800003 	ldbu	r2,0(r2)
   142e0:	10803fcc 	andi	r2,r2,255
   142e4:	1000061e 	bne	r2,zero,14300 <OSTaskChangePrio+0x248>
             OSRdyGrp &= ~bity_old;
   142e8:	e0bffc43 	ldbu	r2,-15(fp)
   142ec:	0084303a 	nor	r2,zero,r2
   142f0:	1007883a 	mov	r3,r2
   142f4:	d0a72d03 	ldbu	r2,-25420(gp)
   142f8:	1884703a 	and	r2,r3,r2
   142fc:	d0a72d05 	stb	r2,-25420(gp)
         }
         OSRdyGrp        |= bity_new;                       /* Make new priority ready to run          */
   14300:	d0e72d03 	ldbu	r3,-25420(gp)
   14304:	e0bffb83 	ldbu	r2,-18(fp)
   14308:	1884b03a 	or	r2,r3,r2
   1430c:	d0a72d05 	stb	r2,-25420(gp)
         OSRdyTbl[y_new] |= bitx_new;
   14310:	e0fffb03 	ldbu	r3,-20(fp)
   14314:	e13ffb03 	ldbu	r4,-20(fp)
   14318:	d0a72d44 	addi	r2,gp,-25419
   1431c:	2085883a 	add	r2,r4,r2
   14320:	11000003 	ldbu	r4,0(r2)
   14324:	e0bffbc3 	ldbu	r2,-17(fp)
   14328:	2084b03a 	or	r2,r4,r2
   1432c:	1009883a 	mov	r4,r2
   14330:	d0a72d44 	addi	r2,gp,-25419
   14334:	1885883a 	add	r2,r3,r2
   14338:	11000005 	stb	r4,0(r2)
    }

#if (OS_EVENT_EN)
    pevent = ptcb->OSTCBEventPtr;
   1433c:	e0bff817 	ldw	r2,-32(fp)
   14340:	10800717 	ldw	r2,28(r2)
   14344:	e0bff315 	stw	r2,-52(fp)
    if (pevent != (OS_EVENT *)0) {
   14348:	e0bff317 	ldw	r2,-52(fp)
   1434c:	10003326 	beq	r2,zero,1441c <OSTaskChangePrio+0x364>
        pevent->OSEventTbl[y_old] &= ~bitx_old;             /* Remove old task prio from wait list     */
   14350:	e0bffc03 	ldbu	r2,-16(fp)
   14354:	e0fffc03 	ldbu	r3,-16(fp)
   14358:	e13ff317 	ldw	r4,-52(fp)
   1435c:	20c7883a 	add	r3,r4,r3
   14360:	18c002c4 	addi	r3,r3,11
   14364:	18c00003 	ldbu	r3,0(r3)
   14368:	1809883a 	mov	r4,r3
   1436c:	e0fffc83 	ldbu	r3,-14(fp)
   14370:	00c6303a 	nor	r3,zero,r3
   14374:	20c6703a 	and	r3,r4,r3
   14378:	1809883a 	mov	r4,r3
   1437c:	e0fff317 	ldw	r3,-52(fp)
   14380:	1885883a 	add	r2,r3,r2
   14384:	108002c4 	addi	r2,r2,11
   14388:	11000005 	stb	r4,0(r2)
        if (pevent->OSEventTbl[y_old] == 0) {
   1438c:	e0bffc03 	ldbu	r2,-16(fp)
   14390:	e0fff317 	ldw	r3,-52(fp)
   14394:	1885883a 	add	r2,r3,r2
   14398:	108002c4 	addi	r2,r2,11
   1439c:	10800003 	ldbu	r2,0(r2)
   143a0:	10803fcc 	andi	r2,r2,255
   143a4:	1000091e 	bne	r2,zero,143cc <OSTaskChangePrio+0x314>
            pevent->OSEventGrp    &= ~bity_old;
   143a8:	e0bff317 	ldw	r2,-52(fp)
   143ac:	10800283 	ldbu	r2,10(r2)
   143b0:	1007883a 	mov	r3,r2
   143b4:	e0bffc43 	ldbu	r2,-15(fp)
   143b8:	0084303a 	nor	r2,zero,r2
   143bc:	1884703a 	and	r2,r3,r2
   143c0:	1007883a 	mov	r3,r2
   143c4:	e0bff317 	ldw	r2,-52(fp)
   143c8:	10c00285 	stb	r3,10(r2)
        }
        pevent->OSEventGrp        |= bity_new;              /* Add    new task prio to   wait list     */
   143cc:	e0bff317 	ldw	r2,-52(fp)
   143d0:	10c00283 	ldbu	r3,10(r2)
   143d4:	e0bffb83 	ldbu	r2,-18(fp)
   143d8:	1884b03a 	or	r2,r3,r2
   143dc:	1007883a 	mov	r3,r2
   143e0:	e0bff317 	ldw	r2,-52(fp)
   143e4:	10c00285 	stb	r3,10(r2)
        pevent->OSEventTbl[y_new] |= bitx_new;
   143e8:	e0bffb03 	ldbu	r2,-20(fp)
   143ec:	e0fffb03 	ldbu	r3,-20(fp)
   143f0:	e13ff317 	ldw	r4,-52(fp)
   143f4:	20c7883a 	add	r3,r4,r3
   143f8:	18c002c4 	addi	r3,r3,11
   143fc:	19000003 	ldbu	r4,0(r3)
   14400:	e0fffbc3 	ldbu	r3,-17(fp)
   14404:	20c6b03a 	or	r3,r4,r3
   14408:	1809883a 	mov	r4,r3
   1440c:	e0fff317 	ldw	r3,-52(fp)
   14410:	1885883a 	add	r2,r3,r2
   14414:	108002c4 	addi	r2,r2,11
   14418:	11000005 	stb	r4,0(r2)
    }
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {
   1441c:	e0bff817 	ldw	r2,-32(fp)
   14420:	10800817 	ldw	r2,32(r2)
   14424:	10004226 	beq	r2,zero,14530 <OSTaskChangePrio+0x478>
        pevents =  ptcb->OSTCBEventMultiPtr;
   14428:	e0bff817 	ldw	r2,-32(fp)
   1442c:	10800817 	ldw	r2,32(r2)
   14430:	e0bff415 	stw	r2,-48(fp)
        pevent  = *pevents;
   14434:	e0bff417 	ldw	r2,-48(fp)
   14438:	10800017 	ldw	r2,0(r2)
   1443c:	e0bff315 	stw	r2,-52(fp)
        while (pevent != (OS_EVENT *)0) {
   14440:	00003906 	br	14528 <OSTaskChangePrio+0x470>
            pevent->OSEventTbl[y_old] &= ~bitx_old;         /* Remove old task prio from wait lists    */
   14444:	e0bffc03 	ldbu	r2,-16(fp)
   14448:	e0fffc03 	ldbu	r3,-16(fp)
   1444c:	e13ff317 	ldw	r4,-52(fp)
   14450:	20c7883a 	add	r3,r4,r3
   14454:	18c002c4 	addi	r3,r3,11
   14458:	18c00003 	ldbu	r3,0(r3)
   1445c:	1809883a 	mov	r4,r3
   14460:	e0fffc83 	ldbu	r3,-14(fp)
   14464:	00c6303a 	nor	r3,zero,r3
   14468:	20c6703a 	and	r3,r4,r3
   1446c:	1809883a 	mov	r4,r3
   14470:	e0fff317 	ldw	r3,-52(fp)
   14474:	1885883a 	add	r2,r3,r2
   14478:	108002c4 	addi	r2,r2,11
   1447c:	11000005 	stb	r4,0(r2)
            if (pevent->OSEventTbl[y_old] == 0) {
   14480:	e0bffc03 	ldbu	r2,-16(fp)
   14484:	e0fff317 	ldw	r3,-52(fp)
   14488:	1885883a 	add	r2,r3,r2
   1448c:	108002c4 	addi	r2,r2,11
   14490:	10800003 	ldbu	r2,0(r2)
   14494:	10803fcc 	andi	r2,r2,255
   14498:	1000091e 	bne	r2,zero,144c0 <OSTaskChangePrio+0x408>
                pevent->OSEventGrp    &= ~bity_old;
   1449c:	e0bff317 	ldw	r2,-52(fp)
   144a0:	10800283 	ldbu	r2,10(r2)
   144a4:	1007883a 	mov	r3,r2
   144a8:	e0bffc43 	ldbu	r2,-15(fp)
   144ac:	0084303a 	nor	r2,zero,r2
   144b0:	1884703a 	and	r2,r3,r2
   144b4:	1007883a 	mov	r3,r2
   144b8:	e0bff317 	ldw	r2,-52(fp)
   144bc:	10c00285 	stb	r3,10(r2)
            }
            pevent->OSEventGrp        |= bity_new;          /* Add    new task prio to   wait lists    */
   144c0:	e0bff317 	ldw	r2,-52(fp)
   144c4:	10c00283 	ldbu	r3,10(r2)
   144c8:	e0bffb83 	ldbu	r2,-18(fp)
   144cc:	1884b03a 	or	r2,r3,r2
   144d0:	1007883a 	mov	r3,r2
   144d4:	e0bff317 	ldw	r2,-52(fp)
   144d8:	10c00285 	stb	r3,10(r2)
            pevent->OSEventTbl[y_new] |= bitx_new;
   144dc:	e0bffb03 	ldbu	r2,-20(fp)
   144e0:	e0fffb03 	ldbu	r3,-20(fp)
   144e4:	e13ff317 	ldw	r4,-52(fp)
   144e8:	20c7883a 	add	r3,r4,r3
   144ec:	18c002c4 	addi	r3,r3,11
   144f0:	19000003 	ldbu	r4,0(r3)
   144f4:	e0fffbc3 	ldbu	r3,-17(fp)
   144f8:	20c6b03a 	or	r3,r4,r3
   144fc:	1809883a 	mov	r4,r3
   14500:	e0fff317 	ldw	r3,-52(fp)
   14504:	1885883a 	add	r2,r3,r2
   14508:	108002c4 	addi	r2,r2,11
   1450c:	11000005 	stb	r4,0(r2)
            pevents++;
   14510:	e0bff417 	ldw	r2,-48(fp)
   14514:	10800104 	addi	r2,r2,4
   14518:	e0bff415 	stw	r2,-48(fp)
            pevent                     = *pevents;
   1451c:	e0bff417 	ldw	r2,-48(fp)
   14520:	10800017 	ldw	r2,0(r2)
   14524:	e0bff315 	stw	r2,-52(fp)
    }
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {
        pevents =  ptcb->OSTCBEventMultiPtr;
        pevent  = *pevents;
        while (pevent != (OS_EVENT *)0) {
   14528:	e0bff317 	ldw	r2,-52(fp)
   1452c:	103fc51e 	bne	r2,zero,14444 <__alt_data_end+0xfffe4444>
        }
    }
#endif
#endif

    ptcb->OSTCBPrio = newprio;                              /* Set new task priority                   */
   14530:	e0bff817 	ldw	r2,-32(fp)
   14534:	e0ffff03 	ldbu	r3,-4(fp)
   14538:	10c00c85 	stb	r3,50(r2)
    ptcb->OSTCBY    = y_new;
   1453c:	e0bff817 	ldw	r2,-32(fp)
   14540:	e0fffb03 	ldbu	r3,-20(fp)
   14544:	10c00d05 	stb	r3,52(r2)
    ptcb->OSTCBX    = x_new;
   14548:	e0bff817 	ldw	r2,-32(fp)
   1454c:	e0fffb43 	ldbu	r3,-19(fp)
   14550:	10c00cc5 	stb	r3,51(r2)
    ptcb->OSTCBBitY = bity_new;
   14554:	e0bff817 	ldw	r2,-32(fp)
   14558:	e0fffb83 	ldbu	r3,-18(fp)
   1455c:	10c00d85 	stb	r3,54(r2)
    ptcb->OSTCBBitX = bitx_new;
   14560:	e0bff817 	ldw	r2,-32(fp)
   14564:	e0fffbc3 	ldbu	r3,-17(fp)
   14568:	10c00d45 	stb	r3,53(r2)
   1456c:	e0bff517 	ldw	r2,-44(fp)
   14570:	e0bffa15 	stw	r2,-24(fp)
   14574:	e0bffa17 	ldw	r2,-24(fp)
   14578:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    if (OSRunning == OS_TRUE) {
   1457c:	d0a72143 	ldbu	r2,-25467(gp)
   14580:	10803fcc 	andi	r2,r2,255
   14584:	10800058 	cmpnei	r2,r2,1
   14588:	1000011e 	bne	r2,zero,14590 <OSTaskChangePrio+0x4d8>
        OS_Sched();                                         /* Find new highest priority task          */
   1458c:	000fe7c0 	call	fe7c <OS_Sched>
    }
    return (OS_ERR_NONE);
   14590:	0005883a 	mov	r2,zero
}
   14594:	e037883a 	mov	sp,fp
   14598:	dfc00117 	ldw	ra,4(sp)
   1459c:	df000017 	ldw	fp,0(sp)
   145a0:	dec00204 	addi	sp,sp,8
   145a4:	f800283a 	ret

000145a8 <OSTaskCreate>:
*********************************************************************************************************
*/

#if OS_TASK_CREATE_EN > 0
INT8U  OSTaskCreate (void (*task)(void *p_arg), void *p_arg, OS_STK *ptos, INT8U prio)
{
   145a8:	deffee04 	addi	sp,sp,-72
   145ac:	dfc01115 	stw	ra,68(sp)
   145b0:	df001015 	stw	fp,64(sp)
   145b4:	df001004 	addi	fp,sp,64
   145b8:	e13ffc15 	stw	r4,-16(fp)
   145bc:	e17ffd15 	stw	r5,-12(fp)
   145c0:	e1bffe15 	stw	r6,-8(fp)
   145c4:	3805883a 	mov	r2,r7
   145c8:	e0bfff05 	stb	r2,-4(fp)
    OS_STK    *psp;
    INT8U      err;
#if OS_CRITICAL_METHOD == 3                  /* Allocate storage for CPU status register               */
    OS_CPU_SR  cpu_sr = 0;
   145cc:	e03ff315 	stw	zero,-52(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {             /* Make sure priority is within allowable range           */
   145d0:	e0bfff03 	ldbu	r2,-4(fp)
   145d4:	10800570 	cmpltui	r2,r2,21
   145d8:	1000021e 	bne	r2,zero,145e4 <OSTaskCreate+0x3c>
        return (OS_ERR_PRIO_INVALID);
   145dc:	00800a84 	movi	r2,42
   145e0:	00005706 	br	14740 <OSTaskCreate+0x198>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   145e4:	0005303a 	rdctl	r2,status
   145e8:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   145ec:	e0fffb17 	ldw	r3,-20(fp)
   145f0:	00bfff84 	movi	r2,-2
   145f4:	1884703a 	and	r2,r3,r2
   145f8:	1001703a 	wrctl	status,r2
  
  return context;
   145fc:	e0bffb17 	ldw	r2,-20(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   14600:	e0bff315 	stw	r2,-52(fp)
    if (OSIntNesting > 0) {                  /* Make sure we don't create the task from within an ISR  */
   14604:	d0a72f03 	ldbu	r2,-25412(gp)
   14608:	10803fcc 	andi	r2,r2,255
   1460c:	10000626 	beq	r2,zero,14628 <OSTaskCreate+0x80>
   14610:	e0bff317 	ldw	r2,-52(fp)
   14614:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   14618:	e0bff417 	ldw	r2,-48(fp)
   1461c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_CREATE_ISR);
   14620:	00800f04 	movi	r2,60
   14624:	00004606 	br	14740 <OSTaskCreate+0x198>
    }
    if (OSTCBPrioTbl[prio] == (OS_TCB *)0) { /* Make sure task doesn't already exist at this priority  */
   14628:	e0ffff03 	ldbu	r3,-4(fp)
   1462c:	008000b4 	movhi	r2,2
   14630:	10bf4204 	addi	r2,r2,-760
   14634:	18c7883a 	add	r3,r3,r3
   14638:	18c7883a 	add	r3,r3,r3
   1463c:	10c5883a 	add	r2,r2,r3
   14640:	10800017 	ldw	r2,0(r2)
   14644:	1000391e 	bne	r2,zero,1472c <OSTaskCreate+0x184>
        OSTCBPrioTbl[prio] = OS_TCB_RESERVED;/* Reserve the priority to prevent others from doing ...  */
   14648:	e0ffff03 	ldbu	r3,-4(fp)
   1464c:	008000b4 	movhi	r2,2
   14650:	10bf4204 	addi	r2,r2,-760
   14654:	18c7883a 	add	r3,r3,r3
   14658:	18c7883a 	add	r3,r3,r3
   1465c:	10c5883a 	add	r2,r2,r3
   14660:	00c00044 	movi	r3,1
   14664:	10c00015 	stw	r3,0(r2)
   14668:	e0bff317 	ldw	r2,-52(fp)
   1466c:	e0bff515 	stw	r2,-44(fp)
   14670:	e0bff517 	ldw	r2,-44(fp)
   14674:	1001703a 	wrctl	status,r2
                                             /* ... the same thing until task is created.              */
        OS_EXIT_CRITICAL();
        psp = OSTaskStkInit(task, p_arg, ptos, 0);              /* Initialize the task's stack         */
   14678:	000f883a 	mov	r7,zero
   1467c:	e1bffe17 	ldw	r6,-8(fp)
   14680:	e17ffd17 	ldw	r5,-12(fp)
   14684:	e13ffc17 	ldw	r4,-16(fp)
   14688:	00175ac0 	call	175ac <OSTaskStkInit>
   1468c:	e0bff715 	stw	r2,-36(fp)
        err = OS_TCBInit(prio, psp, (OS_STK *)0, 0, 0, (void *)0, 0);
   14690:	e0bfff03 	ldbu	r2,-4(fp)
   14694:	d8000215 	stw	zero,8(sp)
   14698:	d8000115 	stw	zero,4(sp)
   1469c:	d8000015 	stw	zero,0(sp)
   146a0:	000f883a 	mov	r7,zero
   146a4:	000d883a 	mov	r6,zero
   146a8:	e17ff717 	ldw	r5,-36(fp)
   146ac:	1009883a 	mov	r4,r2
   146b0:	001027c0 	call	1027c <OS_TCBInit>
   146b4:	e0bff805 	stb	r2,-32(fp)
        if (err == OS_ERR_NONE) {
   146b8:	e0bff803 	ldbu	r2,-32(fp)
   146bc:	1000061e 	bne	r2,zero,146d8 <OSTaskCreate+0x130>
            if (OSRunning == OS_TRUE) {      /* Find highest priority task if multitasking has started */
   146c0:	d0a72143 	ldbu	r2,-25467(gp)
   146c4:	10803fcc 	andi	r2,r2,255
   146c8:	10800058 	cmpnei	r2,r2,1
   146cc:	1000151e 	bne	r2,zero,14724 <OSTaskCreate+0x17c>
                OS_Sched();
   146d0:	000fe7c0 	call	fe7c <OS_Sched>
   146d4:	00001306 	br	14724 <OSTaskCreate+0x17c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   146d8:	0005303a 	rdctl	r2,status
   146dc:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   146e0:	e0fffa17 	ldw	r3,-24(fp)
   146e4:	00bfff84 	movi	r2,-2
   146e8:	1884703a 	and	r2,r3,r2
   146ec:	1001703a 	wrctl	status,r2
  
  return context;
   146f0:	e0bffa17 	ldw	r2,-24(fp)
            }
        } else {
            OS_ENTER_CRITICAL();
   146f4:	e0bff315 	stw	r2,-52(fp)
            OSTCBPrioTbl[prio] = (OS_TCB *)0;/* Make this priority available to others                 */
   146f8:	e0ffff03 	ldbu	r3,-4(fp)
   146fc:	008000b4 	movhi	r2,2
   14700:	10bf4204 	addi	r2,r2,-760
   14704:	18c7883a 	add	r3,r3,r3
   14708:	18c7883a 	add	r3,r3,r3
   1470c:	10c5883a 	add	r2,r2,r3
   14710:	10000015 	stw	zero,0(r2)
   14714:	e0bff317 	ldw	r2,-52(fp)
   14718:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1471c:	e0bff617 	ldw	r2,-40(fp)
   14720:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
        }
        return (err);
   14724:	e0bff803 	ldbu	r2,-32(fp)
   14728:	00000506 	br	14740 <OSTaskCreate+0x198>
   1472c:	e0bff317 	ldw	r2,-52(fp)
   14730:	e0bff915 	stw	r2,-28(fp)
   14734:	e0bff917 	ldw	r2,-28(fp)
   14738:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_PRIO_EXIST);
   1473c:	00800a04 	movi	r2,40
}
   14740:	e037883a 	mov	sp,fp
   14744:	dfc00117 	ldw	ra,4(sp)
   14748:	df000017 	ldw	fp,0(sp)
   1474c:	dec00204 	addi	sp,sp,8
   14750:	f800283a 	ret

00014754 <OSTaskCreateExt>:
                        INT16U   id,
                        OS_STK  *pbos,
                        INT32U   stk_size,
                        void    *pext,
                        INT16U   opt)
{
   14754:	deffec04 	addi	sp,sp,-80
   14758:	dfc01315 	stw	ra,76(sp)
   1475c:	df001215 	stw	fp,72(sp)
   14760:	df001204 	addi	fp,sp,72
   14764:	e13ffa15 	stw	r4,-24(fp)
   14768:	e17ffb15 	stw	r5,-20(fp)
   1476c:	e1bffc15 	stw	r6,-16(fp)
   14770:	3809883a 	mov	r4,r7
   14774:	e0c00217 	ldw	r3,8(fp)
   14778:	e0800617 	ldw	r2,24(fp)
   1477c:	e13ffd05 	stb	r4,-12(fp)
   14780:	e0fffe0d 	sth	r3,-8(fp)
   14784:	e0bfff0d 	sth	r2,-4(fp)
    OS_STK    *psp;
    INT8U      err;
#if OS_CRITICAL_METHOD == 3                  /* Allocate storage for CPU status register               */
    OS_CPU_SR  cpu_sr = 0;
   14788:	e03ff115 	stw	zero,-60(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {             /* Make sure priority is within allowable range           */
   1478c:	e0bffd03 	ldbu	r2,-12(fp)
   14790:	10800570 	cmpltui	r2,r2,21
   14794:	1000021e 	bne	r2,zero,147a0 <OSTaskCreateExt+0x4c>
        return (OS_ERR_PRIO_INVALID);
   14798:	00800a84 	movi	r2,42
   1479c:	00006106 	br	14924 <OSTaskCreateExt+0x1d0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   147a0:	0005303a 	rdctl	r2,status
   147a4:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   147a8:	e0fff917 	ldw	r3,-28(fp)
   147ac:	00bfff84 	movi	r2,-2
   147b0:	1884703a 	and	r2,r3,r2
   147b4:	1001703a 	wrctl	status,r2
  
  return context;
   147b8:	e0bff917 	ldw	r2,-28(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   147bc:	e0bff115 	stw	r2,-60(fp)
    if (OSIntNesting > 0) {                  /* Make sure we don't create the task from within an ISR  */
   147c0:	d0a72f03 	ldbu	r2,-25412(gp)
   147c4:	10803fcc 	andi	r2,r2,255
   147c8:	10000626 	beq	r2,zero,147e4 <OSTaskCreateExt+0x90>
   147cc:	e0bff117 	ldw	r2,-60(fp)
   147d0:	e0bff215 	stw	r2,-56(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   147d4:	e0bff217 	ldw	r2,-56(fp)
   147d8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_CREATE_ISR);
   147dc:	00800f04 	movi	r2,60
   147e0:	00005006 	br	14924 <OSTaskCreateExt+0x1d0>
    }
    if (OSTCBPrioTbl[prio] == (OS_TCB *)0) { /* Make sure task doesn't already exist at this priority  */
   147e4:	e0fffd03 	ldbu	r3,-12(fp)
   147e8:	008000b4 	movhi	r2,2
   147ec:	10bf4204 	addi	r2,r2,-760
   147f0:	18c7883a 	add	r3,r3,r3
   147f4:	18c7883a 	add	r3,r3,r3
   147f8:	10c5883a 	add	r2,r2,r3
   147fc:	10800017 	ldw	r2,0(r2)
   14800:	1000431e 	bne	r2,zero,14910 <OSTaskCreateExt+0x1bc>
        OSTCBPrioTbl[prio] = OS_TCB_RESERVED;/* Reserve the priority to prevent others from doing ...  */
   14804:	e0fffd03 	ldbu	r3,-12(fp)
   14808:	008000b4 	movhi	r2,2
   1480c:	10bf4204 	addi	r2,r2,-760
   14810:	18c7883a 	add	r3,r3,r3
   14814:	18c7883a 	add	r3,r3,r3
   14818:	10c5883a 	add	r2,r2,r3
   1481c:	00c00044 	movi	r3,1
   14820:	10c00015 	stw	r3,0(r2)
   14824:	e0bff117 	ldw	r2,-60(fp)
   14828:	e0bff315 	stw	r2,-52(fp)
   1482c:	e0bff317 	ldw	r2,-52(fp)
   14830:	1001703a 	wrctl	status,r2
                                             /* ... the same thing until task is created.              */
        OS_EXIT_CRITICAL();

#if (OS_TASK_STAT_STK_CHK_EN > 0)
        OS_TaskStkClr(pbos, stk_size, opt);                    /* Clear the task stack (if needed)     */
   14834:	e0bfff0b 	ldhu	r2,-4(fp)
   14838:	100d883a 	mov	r6,r2
   1483c:	e1400417 	ldw	r5,16(fp)
   14840:	e1000317 	ldw	r4,12(fp)
   14844:	00157b40 	call	157b4 <OS_TaskStkClr>
#endif

        psp = OSTaskStkInit(task, p_arg, ptos, opt);           /* Initialize the task's stack          */
   14848:	e0bfff0b 	ldhu	r2,-4(fp)
   1484c:	100f883a 	mov	r7,r2
   14850:	e1bffc17 	ldw	r6,-16(fp)
   14854:	e17ffb17 	ldw	r5,-20(fp)
   14858:	e13ffa17 	ldw	r4,-24(fp)
   1485c:	00175ac0 	call	175ac <OSTaskStkInit>
   14860:	e0bff515 	stw	r2,-44(fp)
        err = OS_TCBInit(prio, psp, pbos, id, stk_size, pext, opt);
   14864:	e0fffd03 	ldbu	r3,-12(fp)
   14868:	e13ffe0b 	ldhu	r4,-8(fp)
   1486c:	e0bfff0b 	ldhu	r2,-4(fp)
   14870:	d8800215 	stw	r2,8(sp)
   14874:	e0800517 	ldw	r2,20(fp)
   14878:	d8800115 	stw	r2,4(sp)
   1487c:	e0800417 	ldw	r2,16(fp)
   14880:	d8800015 	stw	r2,0(sp)
   14884:	200f883a 	mov	r7,r4
   14888:	e1800317 	ldw	r6,12(fp)
   1488c:	e17ff517 	ldw	r5,-44(fp)
   14890:	1809883a 	mov	r4,r3
   14894:	001027c0 	call	1027c <OS_TCBInit>
   14898:	e0bff605 	stb	r2,-40(fp)
        if (err == OS_ERR_NONE) {
   1489c:	e0bff603 	ldbu	r2,-40(fp)
   148a0:	1000061e 	bne	r2,zero,148bc <OSTaskCreateExt+0x168>
            if (OSRunning == OS_TRUE) {                        /* Find HPT if multitasking has started */
   148a4:	d0a72143 	ldbu	r2,-25467(gp)
   148a8:	10803fcc 	andi	r2,r2,255
   148ac:	10800058 	cmpnei	r2,r2,1
   148b0:	1000151e 	bne	r2,zero,14908 <OSTaskCreateExt+0x1b4>
                OS_Sched();
   148b4:	000fe7c0 	call	fe7c <OS_Sched>
   148b8:	00001306 	br	14908 <OSTaskCreateExt+0x1b4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   148bc:	0005303a 	rdctl	r2,status
   148c0:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   148c4:	e0fff817 	ldw	r3,-32(fp)
   148c8:	00bfff84 	movi	r2,-2
   148cc:	1884703a 	and	r2,r3,r2
   148d0:	1001703a 	wrctl	status,r2
  
  return context;
   148d4:	e0bff817 	ldw	r2,-32(fp)
            }
        } else {
            OS_ENTER_CRITICAL();
   148d8:	e0bff115 	stw	r2,-60(fp)
            OSTCBPrioTbl[prio] = (OS_TCB *)0;                  /* Make this priority avail. to others  */
   148dc:	e0fffd03 	ldbu	r3,-12(fp)
   148e0:	008000b4 	movhi	r2,2
   148e4:	10bf4204 	addi	r2,r2,-760
   148e8:	18c7883a 	add	r3,r3,r3
   148ec:	18c7883a 	add	r3,r3,r3
   148f0:	10c5883a 	add	r2,r2,r3
   148f4:	10000015 	stw	zero,0(r2)
   148f8:	e0bff117 	ldw	r2,-60(fp)
   148fc:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   14900:	e0bff417 	ldw	r2,-48(fp)
   14904:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
        }
        return (err);
   14908:	e0bff603 	ldbu	r2,-40(fp)
   1490c:	00000506 	br	14924 <OSTaskCreateExt+0x1d0>
   14910:	e0bff117 	ldw	r2,-60(fp)
   14914:	e0bff715 	stw	r2,-36(fp)
   14918:	e0bff717 	ldw	r2,-36(fp)
   1491c:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_PRIO_EXIST);
   14920:	00800a04 	movi	r2,40
}
   14924:	e037883a 	mov	sp,fp
   14928:	dfc00117 	ldw	ra,4(sp)
   1492c:	df000017 	ldw	fp,0(sp)
   14930:	dec00204 	addi	sp,sp,8
   14934:	f800283a 	ret

00014938 <OSTaskDel>:
*********************************************************************************************************
*/

#if OS_TASK_DEL_EN > 0
INT8U  OSTaskDel (INT8U prio)
{
   14938:	defff404 	addi	sp,sp,-48
   1493c:	dfc00b15 	stw	ra,44(sp)
   14940:	df000a15 	stw	fp,40(sp)
   14944:	df000a04 	addi	fp,sp,40
   14948:	2005883a 	mov	r2,r4
   1494c:	e0bfff05 	stb	r2,-4(fp)
#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0)
    OS_FLAG_NODE *pnode;
#endif
    OS_TCB       *ptcb;
#if OS_CRITICAL_METHOD == 3                             /* Allocate storage for CPU status register    */
    OS_CPU_SR     cpu_sr = 0;
   14950:	e03ff615 	stw	zero,-40(fp)
#endif



    if (OSIntNesting > 0) {                             /* See if trying to delete from ISR            */
   14954:	d0a72f03 	ldbu	r2,-25412(gp)
   14958:	10803fcc 	andi	r2,r2,255
   1495c:	10000226 	beq	r2,zero,14968 <OSTaskDel+0x30>
        return (OS_ERR_TASK_DEL_ISR);
   14960:	00801004 	movi	r2,64
   14964:	0000c006 	br	14c68 <OSTaskDel+0x330>
    }
    if (prio == OS_TASK_IDLE_PRIO) {                    /* Not allowed to delete idle task             */
   14968:	e0bfff03 	ldbu	r2,-4(fp)
   1496c:	10800518 	cmpnei	r2,r2,20
   14970:	1000021e 	bne	r2,zero,1497c <OSTaskDel+0x44>
        return (OS_ERR_TASK_DEL_IDLE);
   14974:	00800f84 	movi	r2,62
   14978:	0000bb06 	br	14c68 <OSTaskDel+0x330>
    }
#if OS_ARG_CHK_EN > 0
    if (prio >= OS_LOWEST_PRIO) {                       /* Task priority valid ?                       */
   1497c:	e0bfff03 	ldbu	r2,-4(fp)
   14980:	10800530 	cmpltui	r2,r2,20
   14984:	1000051e 	bne	r2,zero,1499c <OSTaskDel+0x64>
        if (prio != OS_PRIO_SELF) {
   14988:	e0bfff03 	ldbu	r2,-4(fp)
   1498c:	10803fe0 	cmpeqi	r2,r2,255
   14990:	1000021e 	bne	r2,zero,1499c <OSTaskDel+0x64>
            return (OS_ERR_PRIO_INVALID);
   14994:	00800a84 	movi	r2,42
   14998:	0000b306 	br	14c68 <OSTaskDel+0x330>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1499c:	0005303a 	rdctl	r2,status
   149a0:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   149a4:	e0fffe17 	ldw	r3,-8(fp)
   149a8:	00bfff84 	movi	r2,-2
   149ac:	1884703a 	and	r2,r3,r2
   149b0:	1001703a 	wrctl	status,r2
  
  return context;
   149b4:	e0bffe17 	ldw	r2,-8(fp)
        }
    }
#endif

/*$PAGE*/
    OS_ENTER_CRITICAL();
   149b8:	e0bff615 	stw	r2,-40(fp)
    if (prio == OS_PRIO_SELF) {                         /* See if requesting to delete self            */
   149bc:	e0bfff03 	ldbu	r2,-4(fp)
   149c0:	10803fd8 	cmpnei	r2,r2,255
   149c4:	1000031e 	bne	r2,zero,149d4 <OSTaskDel+0x9c>
        prio = OSTCBCur->OSTCBPrio;                     /* Set priority to delete to current           */
   149c8:	d0a73017 	ldw	r2,-25408(gp)
   149cc:	10800c83 	ldbu	r2,50(r2)
   149d0:	e0bfff05 	stb	r2,-4(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
   149d4:	e0ffff03 	ldbu	r3,-4(fp)
   149d8:	008000b4 	movhi	r2,2
   149dc:	10bf4204 	addi	r2,r2,-760
   149e0:	18c7883a 	add	r3,r3,r3
   149e4:	18c7883a 	add	r3,r3,r3
   149e8:	10c5883a 	add	r2,r2,r3
   149ec:	10800017 	ldw	r2,0(r2)
   149f0:	e0bff815 	stw	r2,-32(fp)
    if (ptcb == (OS_TCB *)0) {                          /* Task to delete must exist                   */
   149f4:	e0bff817 	ldw	r2,-32(fp)
   149f8:	1000061e 	bne	r2,zero,14a14 <OSTaskDel+0xdc>
   149fc:	e0bff617 	ldw	r2,-40(fp)
   14a00:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   14a04:	e0bff717 	ldw	r2,-36(fp)
   14a08:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
   14a0c:	008010c4 	movi	r2,67
   14a10:	00009506 	br	14c68 <OSTaskDel+0x330>
    }
    if (ptcb == OS_TCB_RESERVED) {                      /* Must not be assigned to Mutex               */
   14a14:	e0bff817 	ldw	r2,-32(fp)
   14a18:	10800058 	cmpnei	r2,r2,1
   14a1c:	1000061e 	bne	r2,zero,14a38 <OSTaskDel+0x100>
   14a20:	e0bff617 	ldw	r2,-40(fp)
   14a24:	e0bff915 	stw	r2,-28(fp)
   14a28:	e0bff917 	ldw	r2,-28(fp)
   14a2c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_DEL);
   14a30:	00800f44 	movi	r2,61
   14a34:	00008c06 	br	14c68 <OSTaskDel+0x330>
    }

    OSRdyTbl[ptcb->OSTCBY] &= ~ptcb->OSTCBBitX;
   14a38:	e0bff817 	ldw	r2,-32(fp)
   14a3c:	10800d03 	ldbu	r2,52(r2)
   14a40:	10c03fcc 	andi	r3,r2,255
   14a44:	e0bff817 	ldw	r2,-32(fp)
   14a48:	10800d03 	ldbu	r2,52(r2)
   14a4c:	11003fcc 	andi	r4,r2,255
   14a50:	d0a72d44 	addi	r2,gp,-25419
   14a54:	2085883a 	add	r2,r4,r2
   14a58:	10800003 	ldbu	r2,0(r2)
   14a5c:	1009883a 	mov	r4,r2
   14a60:	e0bff817 	ldw	r2,-32(fp)
   14a64:	10800d43 	ldbu	r2,53(r2)
   14a68:	0084303a 	nor	r2,zero,r2
   14a6c:	2084703a 	and	r2,r4,r2
   14a70:	1009883a 	mov	r4,r2
   14a74:	d0a72d44 	addi	r2,gp,-25419
   14a78:	1885883a 	add	r2,r3,r2
   14a7c:	11000005 	stb	r4,0(r2)
    if (OSRdyTbl[ptcb->OSTCBY] == 0) {                  /* Make task not ready                         */
   14a80:	e0bff817 	ldw	r2,-32(fp)
   14a84:	10800d03 	ldbu	r2,52(r2)
   14a88:	10c03fcc 	andi	r3,r2,255
   14a8c:	d0a72d44 	addi	r2,gp,-25419
   14a90:	1885883a 	add	r2,r3,r2
   14a94:	10800003 	ldbu	r2,0(r2)
   14a98:	10803fcc 	andi	r2,r2,255
   14a9c:	1000071e 	bne	r2,zero,14abc <OSTaskDel+0x184>
        OSRdyGrp           &= ~ptcb->OSTCBBitY;
   14aa0:	e0bff817 	ldw	r2,-32(fp)
   14aa4:	10800d83 	ldbu	r2,54(r2)
   14aa8:	0084303a 	nor	r2,zero,r2
   14aac:	1007883a 	mov	r3,r2
   14ab0:	d0a72d03 	ldbu	r2,-25420(gp)
   14ab4:	1884703a 	and	r2,r3,r2
   14ab8:	d0a72d05 	stb	r2,-25420(gp)
    }
    
#if (OS_EVENT_EN)
    if (ptcb->OSTCBEventPtr != (OS_EVENT *)0) {
   14abc:	e0bff817 	ldw	r2,-32(fp)
   14ac0:	10800717 	ldw	r2,28(r2)
   14ac4:	10000526 	beq	r2,zero,14adc <OSTaskDel+0x1a4>
        OS_EventTaskRemove(ptcb, ptcb->OSTCBEventPtr);  /* Remove this task from any event   wait list */
   14ac8:	e0bff817 	ldw	r2,-32(fp)
   14acc:	10800717 	ldw	r2,28(r2)
   14ad0:	100b883a 	mov	r5,r2
   14ad4:	e13ff817 	ldw	r4,-32(fp)
   14ad8:	000f8280 	call	f828 <OS_EventTaskRemove>
    }
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {   /* Remove this task from any events' wait lists*/
   14adc:	e0bff817 	ldw	r2,-32(fp)
   14ae0:	10800817 	ldw	r2,32(r2)
   14ae4:	10000526 	beq	r2,zero,14afc <OSTaskDel+0x1c4>
        OS_EventTaskRemoveMulti(ptcb, ptcb->OSTCBEventMultiPtr);
   14ae8:	e0bff817 	ldw	r2,-32(fp)
   14aec:	10800817 	ldw	r2,32(r2)
   14af0:	100b883a 	mov	r5,r2
   14af4:	e13ff817 	ldw	r4,-32(fp)
   14af8:	000f8e00 	call	f8e0 <OS_EventTaskRemoveMulti>
    }
#endif
#endif

#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0)
    pnode = ptcb->OSTCBFlagNode;
   14afc:	e0bff817 	ldw	r2,-32(fp)
   14b00:	10800a17 	ldw	r2,40(r2)
   14b04:	e0bffb15 	stw	r2,-20(fp)
    if (pnode != (OS_FLAG_NODE *)0) {                   /* If task is waiting on event flag            */
   14b08:	e0bffb17 	ldw	r2,-20(fp)
   14b0c:	10000226 	beq	r2,zero,14b18 <OSTaskDel+0x1e0>
        OS_FlagUnlink(pnode);                           /* Remove from wait list                       */
   14b10:	e13ffb17 	ldw	r4,-20(fp)
   14b14:	0011d500 	call	11d50 <OS_FlagUnlink>
    }
#endif

    ptcb->OSTCBDly      = 0;                            /* Prevent OSTimeTick() from updating          */
   14b18:	e0bff817 	ldw	r2,-32(fp)
   14b1c:	10000b8d 	sth	zero,46(r2)
    ptcb->OSTCBStat     = OS_STAT_RDY;                  /* Prevent task from being resumed             */
   14b20:	e0bff817 	ldw	r2,-32(fp)
   14b24:	10000c05 	stb	zero,48(r2)
    ptcb->OSTCBStatPend = OS_STAT_PEND_OK;
   14b28:	e0bff817 	ldw	r2,-32(fp)
   14b2c:	10000c45 	stb	zero,49(r2)
    if (OSLockNesting < 255u) {                         /* Make sure we don't context switch           */
   14b30:	d0a72103 	ldbu	r2,-25468(gp)
   14b34:	10803fcc 	andi	r2,r2,255
   14b38:	10803fe0 	cmpeqi	r2,r2,255
   14b3c:	1000031e 	bne	r2,zero,14b4c <OSTaskDel+0x214>
        OSLockNesting++;
   14b40:	d0a72103 	ldbu	r2,-25468(gp)
   14b44:	10800044 	addi	r2,r2,1
   14b48:	d0a72105 	stb	r2,-25468(gp)
   14b4c:	e0bff617 	ldw	r2,-40(fp)
   14b50:	e0bffd15 	stw	r2,-12(fp)
   14b54:	e0bffd17 	ldw	r2,-12(fp)
   14b58:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();                                 /* Enabling INT. ignores next instruc.         */
    OS_Dummy();                                         /* ... Dummy ensures that INTs will be         */
   14b5c:	000f4100 	call	f410 <OS_Dummy>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   14b60:	0005303a 	rdctl	r2,status
   14b64:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   14b68:	e0fffa17 	ldw	r3,-24(fp)
   14b6c:	00bfff84 	movi	r2,-2
   14b70:	1884703a 	and	r2,r3,r2
   14b74:	1001703a 	wrctl	status,r2
  
  return context;
   14b78:	e0bffa17 	ldw	r2,-24(fp)
    OS_ENTER_CRITICAL();                                /* ... disabled HERE!                          */
   14b7c:	e0bff615 	stw	r2,-40(fp)
    if (OSLockNesting > 0) {                            /* Remove context switch lock                  */
   14b80:	d0a72103 	ldbu	r2,-25468(gp)
   14b84:	10803fcc 	andi	r2,r2,255
   14b88:	10000326 	beq	r2,zero,14b98 <OSTaskDel+0x260>
        OSLockNesting--;
   14b8c:	d0a72103 	ldbu	r2,-25468(gp)
   14b90:	10bfffc4 	addi	r2,r2,-1
   14b94:	d0a72105 	stb	r2,-25468(gp)
    }
    OSTaskDelHook(ptcb);                                /* Call user defined hook                      */
   14b98:	e13ff817 	ldw	r4,-32(fp)
   14b9c:	001772c0 	call	1772c <OSTaskDelHook>
    OSTaskCtr--;                                        /* One less task being managed                 */
   14ba0:	d0a72943 	ldbu	r2,-25435(gp)
   14ba4:	10bfffc4 	addi	r2,r2,-1
   14ba8:	d0a72945 	stb	r2,-25435(gp)
    OSTCBPrioTbl[prio] = (OS_TCB *)0;                   /* Clear old priority entry                    */
   14bac:	e0ffff03 	ldbu	r3,-4(fp)
   14bb0:	008000b4 	movhi	r2,2
   14bb4:	10bf4204 	addi	r2,r2,-760
   14bb8:	18c7883a 	add	r3,r3,r3
   14bbc:	18c7883a 	add	r3,r3,r3
   14bc0:	10c5883a 	add	r2,r2,r3
   14bc4:	10000015 	stw	zero,0(r2)
    if (ptcb->OSTCBPrev == (OS_TCB *)0) {               /* Remove from TCB chain                       */
   14bc8:	e0bff817 	ldw	r2,-32(fp)
   14bcc:	10800617 	ldw	r2,24(r2)
   14bd0:	1000071e 	bne	r2,zero,14bf0 <OSTaskDel+0x2b8>
        ptcb->OSTCBNext->OSTCBPrev = (OS_TCB *)0;
   14bd4:	e0bff817 	ldw	r2,-32(fp)
   14bd8:	10800517 	ldw	r2,20(r2)
   14bdc:	10000615 	stw	zero,24(r2)
        OSTCBList                  = ptcb->OSTCBNext;
   14be0:	e0bff817 	ldw	r2,-32(fp)
   14be4:	10800517 	ldw	r2,20(r2)
   14be8:	d0a72415 	stw	r2,-25456(gp)
   14bec:	00000a06 	br	14c18 <OSTaskDel+0x2e0>
    } else {
        ptcb->OSTCBPrev->OSTCBNext = ptcb->OSTCBNext;
   14bf0:	e0bff817 	ldw	r2,-32(fp)
   14bf4:	10800617 	ldw	r2,24(r2)
   14bf8:	e0fff817 	ldw	r3,-32(fp)
   14bfc:	18c00517 	ldw	r3,20(r3)
   14c00:	10c00515 	stw	r3,20(r2)
        ptcb->OSTCBNext->OSTCBPrev = ptcb->OSTCBPrev;
   14c04:	e0bff817 	ldw	r2,-32(fp)
   14c08:	10800517 	ldw	r2,20(r2)
   14c0c:	e0fff817 	ldw	r3,-32(fp)
   14c10:	18c00617 	ldw	r3,24(r3)
   14c14:	10c00615 	stw	r3,24(r2)
    }
    ptcb->OSTCBNext   = OSTCBFreeList;                  /* Return TCB to free TCB list                 */
   14c18:	d0e72817 	ldw	r3,-25440(gp)
   14c1c:	e0bff817 	ldw	r2,-32(fp)
   14c20:	10c00515 	stw	r3,20(r2)
    OSTCBFreeList     = ptcb;
   14c24:	e0bff817 	ldw	r2,-32(fp)
   14c28:	d0a72815 	stw	r2,-25440(gp)
#if OS_TASK_NAME_SIZE > 1
    ptcb->OSTCBTaskName[0] = '?';                       /* Unknown name                                */
   14c2c:	e0bff817 	ldw	r2,-32(fp)
   14c30:	00c00fc4 	movi	r3,63
   14c34:	10c01305 	stb	r3,76(r2)
    ptcb->OSTCBTaskName[1] = OS_ASCII_NUL;
   14c38:	e0bff817 	ldw	r2,-32(fp)
   14c3c:	10001345 	stb	zero,77(r2)
   14c40:	e0bff617 	ldw	r2,-40(fp)
   14c44:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   14c48:	e0bffc17 	ldw	r2,-16(fp)
   14c4c:	1001703a 	wrctl	status,r2
#endif
    OS_EXIT_CRITICAL();
    if (OSRunning == OS_TRUE) {
   14c50:	d0a72143 	ldbu	r2,-25467(gp)
   14c54:	10803fcc 	andi	r2,r2,255
   14c58:	10800058 	cmpnei	r2,r2,1
   14c5c:	1000011e 	bne	r2,zero,14c64 <OSTaskDel+0x32c>
        OS_Sched();                                     /* Find new highest priority task              */
   14c60:	000fe7c0 	call	fe7c <OS_Sched>
    }
    return (OS_ERR_NONE);
   14c64:	0005883a 	mov	r2,zero
}
   14c68:	e037883a 	mov	sp,fp
   14c6c:	dfc00117 	ldw	ra,4(sp)
   14c70:	df000017 	ldw	fp,0(sp)
   14c74:	dec00204 	addi	sp,sp,8
   14c78:	f800283a 	ret

00014c7c <OSTaskDelReq>:
*********************************************************************************************************
*/
/*$PAGE*/
#if OS_TASK_DEL_EN > 0
INT8U  OSTaskDelReq (INT8U prio)
{
   14c7c:	defff504 	addi	sp,sp,-44
   14c80:	df000a15 	stw	fp,40(sp)
   14c84:	df000a04 	addi	fp,sp,40
   14c88:	2005883a 	mov	r2,r4
   14c8c:	e0bfff05 	stb	r2,-4(fp)
    INT8U      stat;
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   14c90:	e03ff615 	stw	zero,-40(fp)
#endif



    if (prio == OS_TASK_IDLE_PRIO) {                            /* Not allowed to delete idle task     */
   14c94:	e0bfff03 	ldbu	r2,-4(fp)
   14c98:	10800518 	cmpnei	r2,r2,20
   14c9c:	1000021e 	bne	r2,zero,14ca8 <OSTaskDelReq+0x2c>
        return (OS_ERR_TASK_DEL_IDLE);
   14ca0:	00800f84 	movi	r2,62
   14ca4:	00004506 	br	14dbc <OSTaskDelReq+0x140>
    }
#if OS_ARG_CHK_EN > 0
    if (prio >= OS_LOWEST_PRIO) {                               /* Task priority valid ?               */
   14ca8:	e0bfff03 	ldbu	r2,-4(fp)
   14cac:	10800530 	cmpltui	r2,r2,20
   14cb0:	1000051e 	bne	r2,zero,14cc8 <OSTaskDelReq+0x4c>
        if (prio != OS_PRIO_SELF) {
   14cb4:	e0bfff03 	ldbu	r2,-4(fp)
   14cb8:	10803fe0 	cmpeqi	r2,r2,255
   14cbc:	1000021e 	bne	r2,zero,14cc8 <OSTaskDelReq+0x4c>
            return (OS_ERR_PRIO_INVALID);
   14cc0:	00800a84 	movi	r2,42
   14cc4:	00003d06 	br	14dbc <OSTaskDelReq+0x140>
        }
    }
#endif
    if (prio == OS_PRIO_SELF) {                                 /* See if a task is requesting to ...  */
   14cc8:	e0bfff03 	ldbu	r2,-4(fp)
   14ccc:	10803fd8 	cmpnei	r2,r2,255
   14cd0:	1000111e 	bne	r2,zero,14d18 <OSTaskDelReq+0x9c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   14cd4:	0005303a 	rdctl	r2,status
   14cd8:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   14cdc:	e0fff917 	ldw	r3,-28(fp)
   14ce0:	00bfff84 	movi	r2,-2
   14ce4:	1884703a 	and	r2,r3,r2
   14ce8:	1001703a 	wrctl	status,r2
  
  return context;
   14cec:	e0bff917 	ldw	r2,-28(fp)
        OS_ENTER_CRITICAL();                                    /* ... this task to delete itself      */
   14cf0:	e0bff615 	stw	r2,-40(fp)
        stat = OSTCBCur->OSTCBDelReq;                           /* Return request status to caller     */
   14cf4:	d0a73017 	ldw	r2,-25408(gp)
   14cf8:	10800dc3 	ldbu	r2,55(r2)
   14cfc:	e0bff805 	stb	r2,-32(fp)
   14d00:	e0bff617 	ldw	r2,-40(fp)
   14d04:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   14d08:	e0bffe17 	ldw	r2,-8(fp)
   14d0c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (stat);
   14d10:	e0bff803 	ldbu	r2,-32(fp)
   14d14:	00002906 	br	14dbc <OSTaskDelReq+0x140>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   14d18:	0005303a 	rdctl	r2,status
   14d1c:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   14d20:	e0fff717 	ldw	r3,-36(fp)
   14d24:	00bfff84 	movi	r2,-2
   14d28:	1884703a 	and	r2,r3,r2
   14d2c:	1001703a 	wrctl	status,r2
  
  return context;
   14d30:	e0bff717 	ldw	r2,-36(fp)
    }
    OS_ENTER_CRITICAL();
   14d34:	e0bff615 	stw	r2,-40(fp)
    ptcb = OSTCBPrioTbl[prio];
   14d38:	e0ffff03 	ldbu	r3,-4(fp)
   14d3c:	008000b4 	movhi	r2,2
   14d40:	10bf4204 	addi	r2,r2,-760
   14d44:	18c7883a 	add	r3,r3,r3
   14d48:	18c7883a 	add	r3,r3,r3
   14d4c:	10c5883a 	add	r2,r2,r3
   14d50:	10800017 	ldw	r2,0(r2)
   14d54:	e0bffb15 	stw	r2,-20(fp)
    if (ptcb == (OS_TCB *)0) {                                  /* Task to delete must exist           */
   14d58:	e0bffb17 	ldw	r2,-20(fp)
   14d5c:	1000061e 	bne	r2,zero,14d78 <OSTaskDelReq+0xfc>
   14d60:	e0bff617 	ldw	r2,-40(fp)
   14d64:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   14d68:	e0bffa17 	ldw	r2,-24(fp)
   14d6c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);                         /* Task must already be deleted        */
   14d70:	008010c4 	movi	r2,67
   14d74:	00001106 	br	14dbc <OSTaskDelReq+0x140>
    }
    if (ptcb == OS_TCB_RESERVED) {                              /* Must NOT be assigned to a Mutex     */
   14d78:	e0bffb17 	ldw	r2,-20(fp)
   14d7c:	10800058 	cmpnei	r2,r2,1
   14d80:	1000061e 	bne	r2,zero,14d9c <OSTaskDelReq+0x120>
   14d84:	e0bff617 	ldw	r2,-40(fp)
   14d88:	e0bffc15 	stw	r2,-16(fp)
   14d8c:	e0bffc17 	ldw	r2,-16(fp)
   14d90:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_DEL);
   14d94:	00800f44 	movi	r2,61
   14d98:	00000806 	br	14dbc <OSTaskDelReq+0x140>
    }
    ptcb->OSTCBDelReq = OS_ERR_TASK_DEL_REQ;                    /* Set flag indicating task to be DEL. */
   14d9c:	e0bffb17 	ldw	r2,-20(fp)
   14da0:	00c00fc4 	movi	r3,63
   14da4:	10c00dc5 	stb	r3,55(r2)
   14da8:	e0bff617 	ldw	r2,-40(fp)
   14dac:	e0bffd15 	stw	r2,-12(fp)
   14db0:	e0bffd17 	ldw	r2,-12(fp)
   14db4:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
   14db8:	0005883a 	mov	r2,zero
}
   14dbc:	e037883a 	mov	sp,fp
   14dc0:	df000017 	ldw	fp,0(sp)
   14dc4:	dec00104 	addi	sp,sp,4
   14dc8:	f800283a 	ret

00014dcc <OSTaskNameGet>:
*********************************************************************************************************
*/

#if OS_TASK_NAME_SIZE > 1
INT8U  OSTaskNameGet (INT8U prio, INT8U *pname, INT8U *perr)
{
   14dcc:	defff404 	addi	sp,sp,-48
   14dd0:	dfc00b15 	stw	ra,44(sp)
   14dd4:	df000a15 	stw	fp,40(sp)
   14dd8:	df000a04 	addi	fp,sp,40
   14ddc:	2005883a 	mov	r2,r4
   14de0:	e17ffe15 	stw	r5,-8(fp)
   14de4:	e1bfff15 	stw	r6,-4(fp)
   14de8:	e0bffd05 	stb	r2,-12(fp)
    OS_TCB    *ptcb;
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                              /* Allocate storage for CPU status register   */
    OS_CPU_SR  cpu_sr = 0;
   14dec:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                            /* Validate 'perr'                            */
   14df0:	e0bfff17 	ldw	r2,-4(fp)
   14df4:	1000021e 	bne	r2,zero,14e00 <OSTaskNameGet+0x34>
        return (0);
   14df8:	0005883a 	mov	r2,zero
   14dfc:	00005406 	br	14f50 <OSTaskNameGet+0x184>
    }
    if (prio > OS_LOWEST_PRIO) {                         /* Task priority valid ?                      */
   14e00:	e0bffd03 	ldbu	r2,-12(fp)
   14e04:	10800570 	cmpltui	r2,r2,21
   14e08:	1000081e 	bne	r2,zero,14e2c <OSTaskNameGet+0x60>
        if (prio != OS_PRIO_SELF) {
   14e0c:	e0bffd03 	ldbu	r2,-12(fp)
   14e10:	10803fe0 	cmpeqi	r2,r2,255
   14e14:	1000051e 	bne	r2,zero,14e2c <OSTaskNameGet+0x60>
            *perr = OS_ERR_PRIO_INVALID;                 /* No                                         */
   14e18:	e0bfff17 	ldw	r2,-4(fp)
   14e1c:	00c00a84 	movi	r3,42
   14e20:	10c00005 	stb	r3,0(r2)
            return (0);
   14e24:	0005883a 	mov	r2,zero
   14e28:	00004906 	br	14f50 <OSTaskNameGet+0x184>
        }
    }
    if (pname == (INT8U *)0) {                           /* Is 'pname' a NULL pointer?                 */
   14e2c:	e0bffe17 	ldw	r2,-8(fp)
   14e30:	1000051e 	bne	r2,zero,14e48 <OSTaskNameGet+0x7c>
        *perr = OS_ERR_PNAME_NULL;                       /* Yes                                        */
   14e34:	e0bfff17 	ldw	r2,-4(fp)
   14e38:	00c00304 	movi	r3,12
   14e3c:	10c00005 	stb	r3,0(r2)
        return (0);
   14e40:	0005883a 	mov	r2,zero
   14e44:	00004206 	br	14f50 <OSTaskNameGet+0x184>
    }
#endif
    if (OSIntNesting > 0) {                              /* See if trying to call from an ISR          */
   14e48:	d0a72f03 	ldbu	r2,-25412(gp)
   14e4c:	10803fcc 	andi	r2,r2,255
   14e50:	10000526 	beq	r2,zero,14e68 <OSTaskNameGet+0x9c>
        *perr = OS_ERR_NAME_GET_ISR;
   14e54:	e0bfff17 	ldw	r2,-4(fp)
   14e58:	00c00444 	movi	r3,17
   14e5c:	10c00005 	stb	r3,0(r2)
        return (0);
   14e60:	0005883a 	mov	r2,zero
   14e64:	00003a06 	br	14f50 <OSTaskNameGet+0x184>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   14e68:	0005303a 	rdctl	r2,status
   14e6c:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   14e70:	e0fffc17 	ldw	r3,-16(fp)
   14e74:	00bfff84 	movi	r2,-2
   14e78:	1884703a 	and	r2,r3,r2
   14e7c:	1001703a 	wrctl	status,r2
  
  return context;
   14e80:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
   14e84:	e0bff615 	stw	r2,-40(fp)
    if (prio == OS_PRIO_SELF) {                          /* See if caller desires it's own name        */
   14e88:	e0bffd03 	ldbu	r2,-12(fp)
   14e8c:	10803fd8 	cmpnei	r2,r2,255
   14e90:	1000031e 	bne	r2,zero,14ea0 <OSTaskNameGet+0xd4>
        prio = OSTCBCur->OSTCBPrio;
   14e94:	d0a73017 	ldw	r2,-25408(gp)
   14e98:	10800c83 	ldbu	r2,50(r2)
   14e9c:	e0bffd05 	stb	r2,-12(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
   14ea0:	e0fffd03 	ldbu	r3,-12(fp)
   14ea4:	008000b4 	movhi	r2,2
   14ea8:	10bf4204 	addi	r2,r2,-760
   14eac:	18c7883a 	add	r3,r3,r3
   14eb0:	18c7883a 	add	r3,r3,r3
   14eb4:	10c5883a 	add	r2,r2,r3
   14eb8:	10800017 	ldw	r2,0(r2)
   14ebc:	e0bff815 	stw	r2,-32(fp)
    if (ptcb == (OS_TCB *)0) {                           /* Does task exist?                           */
   14ec0:	e0bff817 	ldw	r2,-32(fp)
   14ec4:	1000091e 	bne	r2,zero,14eec <OSTaskNameGet+0x120>
   14ec8:	e0bff617 	ldw	r2,-40(fp)
   14ecc:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   14ed0:	e0bff717 	ldw	r2,-36(fp)
   14ed4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                              /* No                                         */
        *perr = OS_ERR_TASK_NOT_EXIST;
   14ed8:	e0bfff17 	ldw	r2,-4(fp)
   14edc:	00c010c4 	movi	r3,67
   14ee0:	10c00005 	stb	r3,0(r2)
        return (0);
   14ee4:	0005883a 	mov	r2,zero
   14ee8:	00001906 	br	14f50 <OSTaskNameGet+0x184>
    }
    if (ptcb == OS_TCB_RESERVED) {                       /* Task assigned to a Mutex?                  */
   14eec:	e0bff817 	ldw	r2,-32(fp)
   14ef0:	10800058 	cmpnei	r2,r2,1
   14ef4:	1000091e 	bne	r2,zero,14f1c <OSTaskNameGet+0x150>
   14ef8:	e0bff617 	ldw	r2,-40(fp)
   14efc:	e0bff915 	stw	r2,-28(fp)
   14f00:	e0bff917 	ldw	r2,-28(fp)
   14f04:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                              /* Yes                                        */
        *perr = OS_ERR_TASK_NOT_EXIST;
   14f08:	e0bfff17 	ldw	r2,-4(fp)
   14f0c:	00c010c4 	movi	r3,67
   14f10:	10c00005 	stb	r3,0(r2)
        return (0);
   14f14:	0005883a 	mov	r2,zero
   14f18:	00000d06 	br	14f50 <OSTaskNameGet+0x184>
    }
    len   = OS_StrCopy(pname, ptcb->OSTCBTaskName);      /* Yes, copy name from TCB                    */
   14f1c:	e0bff817 	ldw	r2,-32(fp)
   14f20:	10801304 	addi	r2,r2,76
   14f24:	100b883a 	mov	r5,r2
   14f28:	e13ffe17 	ldw	r4,-8(fp)
   14f2c:	000ffc00 	call	ffc0 <OS_StrCopy>
   14f30:	e0bffb05 	stb	r2,-20(fp)
   14f34:	e0bff617 	ldw	r2,-40(fp)
   14f38:	e0bffa15 	stw	r2,-24(fp)
   14f3c:	e0bffa17 	ldw	r2,-24(fp)
   14f40:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   14f44:	e0bfff17 	ldw	r2,-4(fp)
   14f48:	10000005 	stb	zero,0(r2)
    return (len);
   14f4c:	e0bffb03 	ldbu	r2,-20(fp)
}
   14f50:	e037883a 	mov	sp,fp
   14f54:	dfc00117 	ldw	ra,4(sp)
   14f58:	df000017 	ldw	fp,0(sp)
   14f5c:	dec00204 	addi	sp,sp,8
   14f60:	f800283a 	ret

00014f64 <OSTaskNameSet>:
* Returns    : None
*********************************************************************************************************
*/
#if OS_TASK_NAME_SIZE > 1
void  OSTaskNameSet (INT8U prio, INT8U *pname, INT8U *perr)
{
   14f64:	defff304 	addi	sp,sp,-52
   14f68:	dfc00c15 	stw	ra,48(sp)
   14f6c:	df000b15 	stw	fp,44(sp)
   14f70:	df000b04 	addi	fp,sp,44
   14f74:	2005883a 	mov	r2,r4
   14f78:	e17ffe15 	stw	r5,-8(fp)
   14f7c:	e1bfff15 	stw	r6,-4(fp)
   14f80:	e0bffd05 	stb	r2,-12(fp)
    INT8U      len;
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                          /* Allocate storage for CPU status register       */
    OS_CPU_SR  cpu_sr = 0;
   14f84:	e03ff515 	stw	zero,-44(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                        /* Validate 'perr'                                */
   14f88:	e0bfff17 	ldw	r2,-4(fp)
   14f8c:	10005c26 	beq	r2,zero,15100 <OSTaskNameSet+0x19c>
        return;
    }
    if (prio > OS_LOWEST_PRIO) {                     /* Task priority valid ?                          */
   14f90:	e0bffd03 	ldbu	r2,-12(fp)
   14f94:	10800570 	cmpltui	r2,r2,21
   14f98:	1000071e 	bne	r2,zero,14fb8 <OSTaskNameSet+0x54>
        if (prio != OS_PRIO_SELF) {
   14f9c:	e0bffd03 	ldbu	r2,-12(fp)
   14fa0:	10803fe0 	cmpeqi	r2,r2,255
   14fa4:	1000041e 	bne	r2,zero,14fb8 <OSTaskNameSet+0x54>
            *perr = OS_ERR_PRIO_INVALID;             /* No                                             */
   14fa8:	e0bfff17 	ldw	r2,-4(fp)
   14fac:	00c00a84 	movi	r3,42
   14fb0:	10c00005 	stb	r3,0(r2)
            return;
   14fb4:	00005306 	br	15104 <OSTaskNameSet+0x1a0>
        }
    }
    if (pname == (INT8U *)0) {                       /* Is 'pname' a NULL pointer?                     */
   14fb8:	e0bffe17 	ldw	r2,-8(fp)
   14fbc:	1000041e 	bne	r2,zero,14fd0 <OSTaskNameSet+0x6c>
        *perr = OS_ERR_PNAME_NULL;                   /* Yes                                            */
   14fc0:	e0bfff17 	ldw	r2,-4(fp)
   14fc4:	00c00304 	movi	r3,12
   14fc8:	10c00005 	stb	r3,0(r2)
        return;
   14fcc:	00004d06 	br	15104 <OSTaskNameSet+0x1a0>
    }
#endif
    if (OSIntNesting > 0) {                          /* See if trying to call from an ISR              */
   14fd0:	d0a72f03 	ldbu	r2,-25412(gp)
   14fd4:	10803fcc 	andi	r2,r2,255
   14fd8:	10000426 	beq	r2,zero,14fec <OSTaskNameSet+0x88>
        *perr = OS_ERR_NAME_SET_ISR;
   14fdc:	e0bfff17 	ldw	r2,-4(fp)
   14fe0:	00c00484 	movi	r3,18
   14fe4:	10c00005 	stb	r3,0(r2)
        return;
   14fe8:	00004606 	br	15104 <OSTaskNameSet+0x1a0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   14fec:	0005303a 	rdctl	r2,status
   14ff0:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   14ff4:	e0fffc17 	ldw	r3,-16(fp)
   14ff8:	00bfff84 	movi	r2,-2
   14ffc:	1884703a 	and	r2,r3,r2
   15000:	1001703a 	wrctl	status,r2
  
  return context;
   15004:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
   15008:	e0bff515 	stw	r2,-44(fp)
    if (prio == OS_PRIO_SELF) {                      /* See if caller desires to set it's own name     */
   1500c:	e0bffd03 	ldbu	r2,-12(fp)
   15010:	10803fd8 	cmpnei	r2,r2,255
   15014:	1000031e 	bne	r2,zero,15024 <OSTaskNameSet+0xc0>
        prio = OSTCBCur->OSTCBPrio;
   15018:	d0a73017 	ldw	r2,-25408(gp)
   1501c:	10800c83 	ldbu	r2,50(r2)
   15020:	e0bffd05 	stb	r2,-12(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
   15024:	e0fffd03 	ldbu	r3,-12(fp)
   15028:	008000b4 	movhi	r2,2
   1502c:	10bf4204 	addi	r2,r2,-760
   15030:	18c7883a 	add	r3,r3,r3
   15034:	18c7883a 	add	r3,r3,r3
   15038:	10c5883a 	add	r2,r2,r3
   1503c:	10800017 	ldw	r2,0(r2)
   15040:	e0bff715 	stw	r2,-36(fp)
    if (ptcb == (OS_TCB *)0) {                       /* Does task exist?                               */
   15044:	e0bff717 	ldw	r2,-36(fp)
   15048:	1000081e 	bne	r2,zero,1506c <OSTaskNameSet+0x108>
   1504c:	e0bff517 	ldw	r2,-44(fp)
   15050:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   15054:	e0bff617 	ldw	r2,-40(fp)
   15058:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                          /* No                                             */
        *perr = OS_ERR_TASK_NOT_EXIST;
   1505c:	e0bfff17 	ldw	r2,-4(fp)
   15060:	00c010c4 	movi	r3,67
   15064:	10c00005 	stb	r3,0(r2)
        return;
   15068:	00002606 	br	15104 <OSTaskNameSet+0x1a0>
    }
    if (ptcb == OS_TCB_RESERVED) {                   /* Task assigned to a Mutex?                      */
   1506c:	e0bff717 	ldw	r2,-36(fp)
   15070:	10800058 	cmpnei	r2,r2,1
   15074:	1000081e 	bne	r2,zero,15098 <OSTaskNameSet+0x134>
   15078:	e0bff517 	ldw	r2,-44(fp)
   1507c:	e0bff815 	stw	r2,-32(fp)
   15080:	e0bff817 	ldw	r2,-32(fp)
   15084:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                          /* Yes                                            */
        *perr = OS_ERR_TASK_NOT_EXIST;
   15088:	e0bfff17 	ldw	r2,-4(fp)
   1508c:	00c010c4 	movi	r3,67
   15090:	10c00005 	stb	r3,0(r2)
        return;
   15094:	00001b06 	br	15104 <OSTaskNameSet+0x1a0>
    }
    len = OS_StrLen(pname);                          /* Yes, Can we fit the string in the TCB?         */
   15098:	e13ffe17 	ldw	r4,-8(fp)
   1509c:	00100340 	call	10034 <OS_StrLen>
   150a0:	e0bffa05 	stb	r2,-24(fp)
    if (len > (OS_TASK_NAME_SIZE - 1)) {             /*      No                                        */
   150a4:	e0bffa03 	ldbu	r2,-24(fp)
   150a8:	10800830 	cmpltui	r2,r2,32
   150ac:	1000081e 	bne	r2,zero,150d0 <OSTaskNameSet+0x16c>
   150b0:	e0bff517 	ldw	r2,-44(fp)
   150b4:	e0bff915 	stw	r2,-28(fp)
   150b8:	e0bff917 	ldw	r2,-28(fp)
   150bc:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_TASK_NAME_TOO_LONG;
   150c0:	e0bfff17 	ldw	r2,-4(fp)
   150c4:	00c01044 	movi	r3,65
   150c8:	10c00005 	stb	r3,0(r2)
        return;
   150cc:	00000d06 	br	15104 <OSTaskNameSet+0x1a0>
    }
    (void)OS_StrCopy(ptcb->OSTCBTaskName, pname);    /*      Yes, copy to TCB                          */
   150d0:	e0bff717 	ldw	r2,-36(fp)
   150d4:	10801304 	addi	r2,r2,76
   150d8:	e17ffe17 	ldw	r5,-8(fp)
   150dc:	1009883a 	mov	r4,r2
   150e0:	000ffc00 	call	ffc0 <OS_StrCopy>
   150e4:	e0bff517 	ldw	r2,-44(fp)
   150e8:	e0bffb15 	stw	r2,-20(fp)
   150ec:	e0bffb17 	ldw	r2,-20(fp)
   150f0:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   150f4:	e0bfff17 	ldw	r2,-4(fp)
   150f8:	10000005 	stb	zero,0(r2)
   150fc:	00000106 	br	15104 <OSTaskNameSet+0x1a0>



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                        /* Validate 'perr'                                */
        return;
   15100:	0001883a 	nop
        return;
    }
    (void)OS_StrCopy(ptcb->OSTCBTaskName, pname);    /*      Yes, copy to TCB                          */
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
}
   15104:	e037883a 	mov	sp,fp
   15108:	dfc00117 	ldw	ra,4(sp)
   1510c:	df000017 	ldw	fp,0(sp)
   15110:	dec00204 	addi	sp,sp,8
   15114:	f800283a 	ret

00015118 <OSTaskResume>:
*********************************************************************************************************
*/

#if OS_TASK_SUSPEND_EN > 0
INT8U  OSTaskResume (INT8U prio)
{
   15118:	defff404 	addi	sp,sp,-48
   1511c:	dfc00b15 	stw	ra,44(sp)
   15120:	df000a15 	stw	fp,40(sp)
   15124:	df000a04 	addi	fp,sp,40
   15128:	2005883a 	mov	r2,r4
   1512c:	e0bfff05 	stb	r2,-4(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                                   /* Storage for CPU status register       */
    OS_CPU_SR  cpu_sr = 0;
   15130:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio >= OS_LOWEST_PRIO) {                             /* Make sure task priority is valid      */
   15134:	e0bfff03 	ldbu	r2,-4(fp)
   15138:	10800530 	cmpltui	r2,r2,20
   1513c:	1000021e 	bne	r2,zero,15148 <OSTaskResume+0x30>
        return (OS_ERR_PRIO_INVALID);
   15140:	00800a84 	movi	r2,42
   15144:	00006406 	br	152d8 <OSTaskResume+0x1c0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   15148:	0005303a 	rdctl	r2,status
   1514c:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   15150:	e0fffe17 	ldw	r3,-8(fp)
   15154:	00bfff84 	movi	r2,-2
   15158:	1884703a 	and	r2,r3,r2
   1515c:	1001703a 	wrctl	status,r2
  
  return context;
   15160:	e0bffe17 	ldw	r2,-8(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   15164:	e0bff615 	stw	r2,-40(fp)
    ptcb = OSTCBPrioTbl[prio];
   15168:	e0ffff03 	ldbu	r3,-4(fp)
   1516c:	008000b4 	movhi	r2,2
   15170:	10bf4204 	addi	r2,r2,-760
   15174:	18c7883a 	add	r3,r3,r3
   15178:	18c7883a 	add	r3,r3,r3
   1517c:	10c5883a 	add	r2,r2,r3
   15180:	10800017 	ldw	r2,0(r2)
   15184:	e0bff815 	stw	r2,-32(fp)
    if (ptcb == (OS_TCB *)0) {                                /* Task to suspend must exist            */
   15188:	e0bff817 	ldw	r2,-32(fp)
   1518c:	1000061e 	bne	r2,zero,151a8 <OSTaskResume+0x90>
   15190:	e0bff617 	ldw	r2,-40(fp)
   15194:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   15198:	e0bff717 	ldw	r2,-36(fp)
   1519c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_RESUME_PRIO);
   151a0:	00801184 	movi	r2,70
   151a4:	00004c06 	br	152d8 <OSTaskResume+0x1c0>
    }
    if (ptcb == OS_TCB_RESERVED) {                            /* See if assigned to Mutex              */
   151a8:	e0bff817 	ldw	r2,-32(fp)
   151ac:	10800058 	cmpnei	r2,r2,1
   151b0:	1000061e 	bne	r2,zero,151cc <OSTaskResume+0xb4>
   151b4:	e0bff617 	ldw	r2,-40(fp)
   151b8:	e0bff915 	stw	r2,-28(fp)
   151bc:	e0bff917 	ldw	r2,-28(fp)
   151c0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
   151c4:	008010c4 	movi	r2,67
   151c8:	00004306 	br	152d8 <OSTaskResume+0x1c0>
    }
    if ((ptcb->OSTCBStat & OS_STAT_SUSPEND) != OS_STAT_RDY) { /* Task must be suspended                */
   151cc:	e0bff817 	ldw	r2,-32(fp)
   151d0:	10800c03 	ldbu	r2,48(r2)
   151d4:	10803fcc 	andi	r2,r2,255
   151d8:	1080020c 	andi	r2,r2,8
   151dc:	10003926 	beq	r2,zero,152c4 <OSTaskResume+0x1ac>
        ptcb->OSTCBStat &= ~(INT8U)OS_STAT_SUSPEND;           /* Remove suspension                     */
   151e0:	e0bff817 	ldw	r2,-32(fp)
   151e4:	10c00c03 	ldbu	r3,48(r2)
   151e8:	00bffdc4 	movi	r2,-9
   151ec:	1884703a 	and	r2,r3,r2
   151f0:	1007883a 	mov	r3,r2
   151f4:	e0bff817 	ldw	r2,-32(fp)
   151f8:	10c00c05 	stb	r3,48(r2)
        if (ptcb->OSTCBStat == OS_STAT_RDY) {                 /* See if task is now ready              */
   151fc:	e0bff817 	ldw	r2,-32(fp)
   15200:	10800c03 	ldbu	r2,48(r2)
   15204:	10803fcc 	andi	r2,r2,255
   15208:	1000281e 	bne	r2,zero,152ac <OSTaskResume+0x194>
            if (ptcb->OSTCBDly == 0) {
   1520c:	e0bff817 	ldw	r2,-32(fp)
   15210:	10800b8b 	ldhu	r2,46(r2)
   15214:	10bfffcc 	andi	r2,r2,65535
   15218:	10001f1e 	bne	r2,zero,15298 <OSTaskResume+0x180>
                OSRdyGrp               |= ptcb->OSTCBBitY;    /* Yes, Make task ready to run           */
   1521c:	e0bff817 	ldw	r2,-32(fp)
   15220:	10c00d83 	ldbu	r3,54(r2)
   15224:	d0a72d03 	ldbu	r2,-25420(gp)
   15228:	1884b03a 	or	r2,r3,r2
   1522c:	d0a72d05 	stb	r2,-25420(gp)
                OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
   15230:	e0bff817 	ldw	r2,-32(fp)
   15234:	10800d03 	ldbu	r2,52(r2)
   15238:	10c03fcc 	andi	r3,r2,255
   1523c:	e0bff817 	ldw	r2,-32(fp)
   15240:	10800d03 	ldbu	r2,52(r2)
   15244:	11003fcc 	andi	r4,r2,255
   15248:	d0a72d44 	addi	r2,gp,-25419
   1524c:	2085883a 	add	r2,r4,r2
   15250:	11000003 	ldbu	r4,0(r2)
   15254:	e0bff817 	ldw	r2,-32(fp)
   15258:	10800d43 	ldbu	r2,53(r2)
   1525c:	2084b03a 	or	r2,r4,r2
   15260:	1009883a 	mov	r4,r2
   15264:	d0a72d44 	addi	r2,gp,-25419
   15268:	1885883a 	add	r2,r3,r2
   1526c:	11000005 	stb	r4,0(r2)
   15270:	e0bff617 	ldw	r2,-40(fp)
   15274:	e0bffa15 	stw	r2,-24(fp)
   15278:	e0bffa17 	ldw	r2,-24(fp)
   1527c:	1001703a 	wrctl	status,r2
                OS_EXIT_CRITICAL();
                if (OSRunning == OS_TRUE) {
   15280:	d0a72143 	ldbu	r2,-25467(gp)
   15284:	10803fcc 	andi	r2,r2,255
   15288:	10800058 	cmpnei	r2,r2,1
   1528c:	10000b1e 	bne	r2,zero,152bc <OSTaskResume+0x1a4>
                    OS_Sched();                               /* Find new highest priority task        */
   15290:	000fe7c0 	call	fe7c <OS_Sched>
   15294:	00000906 	br	152bc <OSTaskResume+0x1a4>
   15298:	e0bff617 	ldw	r2,-40(fp)
   1529c:	e0bffb15 	stw	r2,-20(fp)
   152a0:	e0bffb17 	ldw	r2,-20(fp)
   152a4:	1001703a 	wrctl	status,r2
   152a8:	00000406 	br	152bc <OSTaskResume+0x1a4>
   152ac:	e0bff617 	ldw	r2,-40(fp)
   152b0:	e0bffc15 	stw	r2,-16(fp)
   152b4:	e0bffc17 	ldw	r2,-16(fp)
   152b8:	1001703a 	wrctl	status,r2
                OS_EXIT_CRITICAL();
            }
        } else {                                              /* Must be pending on event              */
            OS_EXIT_CRITICAL();
        }
        return (OS_ERR_NONE);
   152bc:	0005883a 	mov	r2,zero
   152c0:	00000506 	br	152d8 <OSTaskResume+0x1c0>
   152c4:	e0bff617 	ldw	r2,-40(fp)
   152c8:	e0bffd15 	stw	r2,-12(fp)
   152cc:	e0bffd17 	ldw	r2,-12(fp)
   152d0:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_TASK_NOT_SUSPENDED);
   152d4:	00801104 	movi	r2,68
}
   152d8:	e037883a 	mov	sp,fp
   152dc:	dfc00117 	ldw	ra,4(sp)
   152e0:	df000017 	ldw	fp,0(sp)
   152e4:	dec00204 	addi	sp,sp,8
   152e8:	f800283a 	ret

000152ec <OSTaskStkChk>:
*              OS_ERR_PDATA_NULL      if 'p_stk_data' is a NULL pointer
*********************************************************************************************************
*/
#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
INT8U  OSTaskStkChk (INT8U prio, OS_STK_DATA *p_stk_data)
{
   152ec:	defff304 	addi	sp,sp,-52
   152f0:	df000c15 	stw	fp,48(sp)
   152f4:	df000c04 	addi	fp,sp,48
   152f8:	2005883a 	mov	r2,r4
   152fc:	e17fff15 	stw	r5,-4(fp)
   15300:	e0bffe05 	stb	r2,-8(fp)
    OS_TCB    *ptcb;
    OS_STK    *pchk;
    INT32U     nfree;
    INT32U     size;
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
   15304:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {                       /* Make sure task priority is valid             */
   15308:	e0bffe03 	ldbu	r2,-8(fp)
   1530c:	10800570 	cmpltui	r2,r2,21
   15310:	1000051e 	bne	r2,zero,15328 <OSTaskStkChk+0x3c>
        if (prio != OS_PRIO_SELF) {
   15314:	e0bffe03 	ldbu	r2,-8(fp)
   15318:	10803fe0 	cmpeqi	r2,r2,255
   1531c:	1000021e 	bne	r2,zero,15328 <OSTaskStkChk+0x3c>
            return (OS_ERR_PRIO_INVALID);
   15320:	00800a84 	movi	r2,42
   15324:	00005d06 	br	1549c <OSTaskStkChk+0x1b0>
        }
    }
    if (p_stk_data == (OS_STK_DATA *)0) {              /* Validate 'p_stk_data'                        */
   15328:	e0bfff17 	ldw	r2,-4(fp)
   1532c:	1000021e 	bne	r2,zero,15338 <OSTaskStkChk+0x4c>
        return (OS_ERR_PDATA_NULL);
   15330:	00800244 	movi	r2,9
   15334:	00005906 	br	1549c <OSTaskStkChk+0x1b0>
    }
#endif
    p_stk_data->OSFree = 0;                            /* Assume failure, set to 0 size                */
   15338:	e0bfff17 	ldw	r2,-4(fp)
   1533c:	10000015 	stw	zero,0(r2)
    p_stk_data->OSUsed = 0;
   15340:	e0bfff17 	ldw	r2,-4(fp)
   15344:	10000115 	stw	zero,4(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   15348:	0005303a 	rdctl	r2,status
   1534c:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   15350:	e0fffd17 	ldw	r3,-12(fp)
   15354:	00bfff84 	movi	r2,-2
   15358:	1884703a 	and	r2,r3,r2
   1535c:	1001703a 	wrctl	status,r2
  
  return context;
   15360:	e0bffd17 	ldw	r2,-12(fp)
    OS_ENTER_CRITICAL();
   15364:	e0bff615 	stw	r2,-40(fp)
    if (prio == OS_PRIO_SELF) {                        /* See if check for SELF                        */
   15368:	e0bffe03 	ldbu	r2,-8(fp)
   1536c:	10803fd8 	cmpnei	r2,r2,255
   15370:	1000031e 	bne	r2,zero,15380 <OSTaskStkChk+0x94>
        prio = OSTCBCur->OSTCBPrio;
   15374:	d0a73017 	ldw	r2,-25408(gp)
   15378:	10800c83 	ldbu	r2,50(r2)
   1537c:	e0bffe05 	stb	r2,-8(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
   15380:	e0fffe03 	ldbu	r3,-8(fp)
   15384:	008000b4 	movhi	r2,2
   15388:	10bf4204 	addi	r2,r2,-760
   1538c:	18c7883a 	add	r3,r3,r3
   15390:	18c7883a 	add	r3,r3,r3
   15394:	10c5883a 	add	r2,r2,r3
   15398:	10800017 	ldw	r2,0(r2)
   1539c:	e0bff815 	stw	r2,-32(fp)
    if (ptcb == (OS_TCB *)0) {                         /* Make sure task exist                         */
   153a0:	e0bff817 	ldw	r2,-32(fp)
   153a4:	1000061e 	bne	r2,zero,153c0 <OSTaskStkChk+0xd4>
   153a8:	e0bff617 	ldw	r2,-40(fp)
   153ac:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   153b0:	e0bff717 	ldw	r2,-36(fp)
   153b4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
   153b8:	008010c4 	movi	r2,67
   153bc:	00003706 	br	1549c <OSTaskStkChk+0x1b0>
    }
    if (ptcb == OS_TCB_RESERVED) {
   153c0:	e0bff817 	ldw	r2,-32(fp)
   153c4:	10800058 	cmpnei	r2,r2,1
   153c8:	1000061e 	bne	r2,zero,153e4 <OSTaskStkChk+0xf8>
   153cc:	e0bff617 	ldw	r2,-40(fp)
   153d0:	e0bff915 	stw	r2,-28(fp)
   153d4:	e0bff917 	ldw	r2,-28(fp)
   153d8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
   153dc:	008010c4 	movi	r2,67
   153e0:	00002e06 	br	1549c <OSTaskStkChk+0x1b0>
    }
    if ((ptcb->OSTCBOpt & OS_TASK_OPT_STK_CHK) == 0) { /* Make sure stack checking option is set       */
   153e4:	e0bff817 	ldw	r2,-32(fp)
   153e8:	1080040b 	ldhu	r2,16(r2)
   153ec:	10bfffcc 	andi	r2,r2,65535
   153f0:	1080004c 	andi	r2,r2,1
   153f4:	1000061e 	bne	r2,zero,15410 <OSTaskStkChk+0x124>
   153f8:	e0bff617 	ldw	r2,-40(fp)
   153fc:	e0bffa15 	stw	r2,-24(fp)
   15400:	e0bffa17 	ldw	r2,-24(fp)
   15404:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_OPT);
   15408:	00801144 	movi	r2,69
   1540c:	00002306 	br	1549c <OSTaskStkChk+0x1b0>
    }
    nfree = 0;
   15410:	e03ff515 	stw	zero,-44(fp)
    size  = ptcb->OSTCBStkSize;
   15414:	e0bff817 	ldw	r2,-32(fp)
   15418:	10800317 	ldw	r2,12(r2)
   1541c:	e0bffc15 	stw	r2,-16(fp)
    pchk  = ptcb->OSTCBStkBottom;
   15420:	e0bff817 	ldw	r2,-32(fp)
   15424:	10800217 	ldw	r2,8(r2)
   15428:	e0bff415 	stw	r2,-48(fp)
   1542c:	e0bff617 	ldw	r2,-40(fp)
   15430:	e0bffb15 	stw	r2,-20(fp)
   15434:	e0bffb17 	ldw	r2,-20(fp)
   15438:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
#if OS_STK_GROWTH == 1
    while (*pchk++ == (OS_STK)0) {                    /* Compute the number of zero entries on the stk */
   1543c:	00000306 	br	1544c <OSTaskStkChk+0x160>
        nfree++;
   15440:	e0bff517 	ldw	r2,-44(fp)
   15444:	10800044 	addi	r2,r2,1
   15448:	e0bff515 	stw	r2,-44(fp)
    nfree = 0;
    size  = ptcb->OSTCBStkSize;
    pchk  = ptcb->OSTCBStkBottom;
    OS_EXIT_CRITICAL();
#if OS_STK_GROWTH == 1
    while (*pchk++ == (OS_STK)0) {                    /* Compute the number of zero entries on the stk */
   1544c:	e0bff417 	ldw	r2,-48(fp)
   15450:	10c00104 	addi	r3,r2,4
   15454:	e0fff415 	stw	r3,-48(fp)
   15458:	10800017 	ldw	r2,0(r2)
   1545c:	103ff826 	beq	r2,zero,15440 <__alt_data_end+0xfffe5440>
#else
    while (*pchk-- == (OS_STK)0) {
        nfree++;
    }
#endif
    p_stk_data->OSFree = nfree * sizeof(OS_STK);          /* Compute number of free bytes on the stack */
   15460:	e0bff517 	ldw	r2,-44(fp)
   15464:	1085883a 	add	r2,r2,r2
   15468:	1085883a 	add	r2,r2,r2
   1546c:	1007883a 	mov	r3,r2
   15470:	e0bfff17 	ldw	r2,-4(fp)
   15474:	10c00015 	stw	r3,0(r2)
    p_stk_data->OSUsed = (size - nfree) * sizeof(OS_STK); /* Compute number of bytes used on the stack */
   15478:	e0fffc17 	ldw	r3,-16(fp)
   1547c:	e0bff517 	ldw	r2,-44(fp)
   15480:	1885c83a 	sub	r2,r3,r2
   15484:	1085883a 	add	r2,r2,r2
   15488:	1085883a 	add	r2,r2,r2
   1548c:	1007883a 	mov	r3,r2
   15490:	e0bfff17 	ldw	r2,-4(fp)
   15494:	10c00115 	stw	r3,4(r2)
    return (OS_ERR_NONE);
   15498:	0005883a 	mov	r2,zero
}
   1549c:	e037883a 	mov	sp,fp
   154a0:	df000017 	ldw	fp,0(sp)
   154a4:	dec00104 	addi	sp,sp,4
   154a8:	f800283a 	ret

000154ac <OSTaskSuspend>:
*********************************************************************************************************
*/

#if OS_TASK_SUSPEND_EN > 0
INT8U  OSTaskSuspend (INT8U prio)
{
   154ac:	defff504 	addi	sp,sp,-44
   154b0:	dfc00a15 	stw	ra,40(sp)
   154b4:	df000915 	stw	fp,36(sp)
   154b8:	df000904 	addi	fp,sp,36
   154bc:	2005883a 	mov	r2,r4
   154c0:	e0bfff05 	stb	r2,-4(fp)
    BOOLEAN    self;
    OS_TCB    *ptcb;
    INT8U      y;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   154c4:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio == OS_TASK_IDLE_PRIO) {                            /* Not allowed to suspend idle task    */
   154c8:	e0bfff03 	ldbu	r2,-4(fp)
   154cc:	10800518 	cmpnei	r2,r2,20
   154d0:	1000021e 	bne	r2,zero,154dc <OSTaskSuspend+0x30>
        return (OS_ERR_TASK_SUSPEND_IDLE);
   154d4:	008011c4 	movi	r2,71
   154d8:	00006806 	br	1567c <OSTaskSuspend+0x1d0>
    }
    if (prio >= OS_LOWEST_PRIO) {                               /* Task priority valid ?               */
   154dc:	e0bfff03 	ldbu	r2,-4(fp)
   154e0:	10800530 	cmpltui	r2,r2,20
   154e4:	1000051e 	bne	r2,zero,154fc <OSTaskSuspend+0x50>
        if (prio != OS_PRIO_SELF) {
   154e8:	e0bfff03 	ldbu	r2,-4(fp)
   154ec:	10803fe0 	cmpeqi	r2,r2,255
   154f0:	1000021e 	bne	r2,zero,154fc <OSTaskSuspend+0x50>
            return (OS_ERR_PRIO_INVALID);
   154f4:	00800a84 	movi	r2,42
   154f8:	00006006 	br	1567c <OSTaskSuspend+0x1d0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   154fc:	0005303a 	rdctl	r2,status
   15500:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   15504:	e0fffe17 	ldw	r3,-8(fp)
   15508:	00bfff84 	movi	r2,-2
   1550c:	1884703a 	and	r2,r3,r2
   15510:	1001703a 	wrctl	status,r2
  
  return context;
   15514:	e0bffe17 	ldw	r2,-8(fp)
        }
    }
#endif
    OS_ENTER_CRITICAL();
   15518:	e0bff815 	stw	r2,-32(fp)
    if (prio == OS_PRIO_SELF) {                                 /* See if suspend SELF                 */
   1551c:	e0bfff03 	ldbu	r2,-4(fp)
   15520:	10803fd8 	cmpnei	r2,r2,255
   15524:	1000061e 	bne	r2,zero,15540 <OSTaskSuspend+0x94>
        prio = OSTCBCur->OSTCBPrio;
   15528:	d0a73017 	ldw	r2,-25408(gp)
   1552c:	10800c83 	ldbu	r2,50(r2)
   15530:	e0bfff05 	stb	r2,-4(fp)
        self = OS_TRUE;
   15534:	00800044 	movi	r2,1
   15538:	e0bff705 	stb	r2,-36(fp)
   1553c:	00000906 	br	15564 <OSTaskSuspend+0xb8>
    } else if (prio == OSTCBCur->OSTCBPrio) {                   /* See if suspending self              */
   15540:	d0a73017 	ldw	r2,-25408(gp)
   15544:	10800c83 	ldbu	r2,50(r2)
   15548:	10c03fcc 	andi	r3,r2,255
   1554c:	e0bfff03 	ldbu	r2,-4(fp)
   15550:	1880031e 	bne	r3,r2,15560 <OSTaskSuspend+0xb4>
        self = OS_TRUE;
   15554:	00800044 	movi	r2,1
   15558:	e0bff705 	stb	r2,-36(fp)
   1555c:	00000106 	br	15564 <OSTaskSuspend+0xb8>
    } else {
        self = OS_FALSE;                                        /* No suspending another task          */
   15560:	e03ff705 	stb	zero,-36(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
   15564:	e0ffff03 	ldbu	r3,-4(fp)
   15568:	008000b4 	movhi	r2,2
   1556c:	10bf4204 	addi	r2,r2,-760
   15570:	18c7883a 	add	r3,r3,r3
   15574:	18c7883a 	add	r3,r3,r3
   15578:	10c5883a 	add	r2,r2,r3
   1557c:	10800017 	ldw	r2,0(r2)
   15580:	e0bffa15 	stw	r2,-24(fp)
    if (ptcb == (OS_TCB *)0) {                                  /* Task to suspend must exist          */
   15584:	e0bffa17 	ldw	r2,-24(fp)
   15588:	1000061e 	bne	r2,zero,155a4 <OSTaskSuspend+0xf8>
   1558c:	e0bff817 	ldw	r2,-32(fp)
   15590:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   15594:	e0bff917 	ldw	r2,-28(fp)
   15598:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_SUSPEND_PRIO);
   1559c:	00801204 	movi	r2,72
   155a0:	00003606 	br	1567c <OSTaskSuspend+0x1d0>
    }
    if (ptcb == OS_TCB_RESERVED) {                              /* See if assigned to Mutex            */
   155a4:	e0bffa17 	ldw	r2,-24(fp)
   155a8:	10800058 	cmpnei	r2,r2,1
   155ac:	1000061e 	bne	r2,zero,155c8 <OSTaskSuspend+0x11c>
   155b0:	e0bff817 	ldw	r2,-32(fp)
   155b4:	e0bffb15 	stw	r2,-20(fp)
   155b8:	e0bffb17 	ldw	r2,-20(fp)
   155bc:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
   155c0:	008010c4 	movi	r2,67
   155c4:	00002d06 	br	1567c <OSTaskSuspend+0x1d0>
    }
    y            = ptcb->OSTCBY;
   155c8:	e0bffa17 	ldw	r2,-24(fp)
   155cc:	10800d03 	ldbu	r2,52(r2)
   155d0:	e0bffd05 	stb	r2,-12(fp)
    OSRdyTbl[y] &= ~ptcb->OSTCBBitX;                            /* Make task not ready                 */
   155d4:	e0fffd03 	ldbu	r3,-12(fp)
   155d8:	e13ffd03 	ldbu	r4,-12(fp)
   155dc:	d0a72d44 	addi	r2,gp,-25419
   155e0:	2085883a 	add	r2,r4,r2
   155e4:	10800003 	ldbu	r2,0(r2)
   155e8:	1009883a 	mov	r4,r2
   155ec:	e0bffa17 	ldw	r2,-24(fp)
   155f0:	10800d43 	ldbu	r2,53(r2)
   155f4:	0084303a 	nor	r2,zero,r2
   155f8:	2084703a 	and	r2,r4,r2
   155fc:	1009883a 	mov	r4,r2
   15600:	d0a72d44 	addi	r2,gp,-25419
   15604:	1885883a 	add	r2,r3,r2
   15608:	11000005 	stb	r4,0(r2)
    if (OSRdyTbl[y] == 0) {
   1560c:	e0fffd03 	ldbu	r3,-12(fp)
   15610:	d0a72d44 	addi	r2,gp,-25419
   15614:	1885883a 	add	r2,r3,r2
   15618:	10800003 	ldbu	r2,0(r2)
   1561c:	10803fcc 	andi	r2,r2,255
   15620:	1000071e 	bne	r2,zero,15640 <OSTaskSuspend+0x194>
        OSRdyGrp &= ~ptcb->OSTCBBitY;
   15624:	e0bffa17 	ldw	r2,-24(fp)
   15628:	10800d83 	ldbu	r2,54(r2)
   1562c:	0084303a 	nor	r2,zero,r2
   15630:	1007883a 	mov	r3,r2
   15634:	d0a72d03 	ldbu	r2,-25420(gp)
   15638:	1884703a 	and	r2,r3,r2
   1563c:	d0a72d05 	stb	r2,-25420(gp)
    }
    ptcb->OSTCBStat |= OS_STAT_SUSPEND;                         /* Status of task is 'SUSPENDED'       */
   15640:	e0bffa17 	ldw	r2,-24(fp)
   15644:	10800c03 	ldbu	r2,48(r2)
   15648:	10800214 	ori	r2,r2,8
   1564c:	1007883a 	mov	r3,r2
   15650:	e0bffa17 	ldw	r2,-24(fp)
   15654:	10c00c05 	stb	r3,48(r2)
   15658:	e0bff817 	ldw	r2,-32(fp)
   1565c:	e0bffc15 	stw	r2,-16(fp)
   15660:	e0bffc17 	ldw	r2,-16(fp)
   15664:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    if (self == OS_TRUE) {                                      /* Context switch only if SELF         */
   15668:	e0bff703 	ldbu	r2,-36(fp)
   1566c:	10800058 	cmpnei	r2,r2,1
   15670:	1000011e 	bne	r2,zero,15678 <OSTaskSuspend+0x1cc>
        OS_Sched();                                             /* Find new highest priority task      */
   15674:	000fe7c0 	call	fe7c <OS_Sched>
    }
    return (OS_ERR_NONE);
   15678:	0005883a 	mov	r2,zero
}
   1567c:	e037883a 	mov	sp,fp
   15680:	dfc00117 	ldw	ra,4(sp)
   15684:	df000017 	ldw	fp,0(sp)
   15688:	dec00204 	addi	sp,sp,8
   1568c:	f800283a 	ret

00015690 <OSTaskQuery>:
*********************************************************************************************************
*/

#if OS_TASK_QUERY_EN > 0
INT8U  OSTaskQuery (INT8U prio, OS_TCB *p_task_data)
{
   15690:	defff604 	addi	sp,sp,-40
   15694:	dfc00915 	stw	ra,36(sp)
   15698:	df000815 	stw	fp,32(sp)
   1569c:	df000804 	addi	fp,sp,32
   156a0:	2005883a 	mov	r2,r4
   156a4:	e17fff15 	stw	r5,-4(fp)
   156a8:	e0bffe05 	stb	r2,-8(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   156ac:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {                 /* Task priority valid ?                              */
   156b0:	e0bffe03 	ldbu	r2,-8(fp)
   156b4:	10800570 	cmpltui	r2,r2,21
   156b8:	1000051e 	bne	r2,zero,156d0 <OSTaskQuery+0x40>
        if (prio != OS_PRIO_SELF) {
   156bc:	e0bffe03 	ldbu	r2,-8(fp)
   156c0:	10803fe0 	cmpeqi	r2,r2,255
   156c4:	1000021e 	bne	r2,zero,156d0 <OSTaskQuery+0x40>
            return (OS_ERR_PRIO_INVALID);
   156c8:	00800a84 	movi	r2,42
   156cc:	00003406 	br	157a0 <OSTaskQuery+0x110>
        }
    }
    if (p_task_data == (OS_TCB *)0) {            /* Validate 'p_task_data'                             */
   156d0:	e0bfff17 	ldw	r2,-4(fp)
   156d4:	1000021e 	bne	r2,zero,156e0 <OSTaskQuery+0x50>
        return (OS_ERR_PDATA_NULL);
   156d8:	00800244 	movi	r2,9
   156dc:	00003006 	br	157a0 <OSTaskQuery+0x110>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   156e0:	0005303a 	rdctl	r2,status
   156e4:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   156e8:	e0fffd17 	ldw	r3,-12(fp)
   156ec:	00bfff84 	movi	r2,-2
   156f0:	1884703a 	and	r2,r3,r2
   156f4:	1001703a 	wrctl	status,r2
  
  return context;
   156f8:	e0bffd17 	ldw	r2,-12(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   156fc:	e0bff815 	stw	r2,-32(fp)
    if (prio == OS_PRIO_SELF) {                  /* See if suspend SELF                                */
   15700:	e0bffe03 	ldbu	r2,-8(fp)
   15704:	10803fd8 	cmpnei	r2,r2,255
   15708:	1000031e 	bne	r2,zero,15718 <OSTaskQuery+0x88>
        prio = OSTCBCur->OSTCBPrio;
   1570c:	d0a73017 	ldw	r2,-25408(gp)
   15710:	10800c83 	ldbu	r2,50(r2)
   15714:	e0bffe05 	stb	r2,-8(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
   15718:	e0fffe03 	ldbu	r3,-8(fp)
   1571c:	008000b4 	movhi	r2,2
   15720:	10bf4204 	addi	r2,r2,-760
   15724:	18c7883a 	add	r3,r3,r3
   15728:	18c7883a 	add	r3,r3,r3
   1572c:	10c5883a 	add	r2,r2,r3
   15730:	10800017 	ldw	r2,0(r2)
   15734:	e0bffa15 	stw	r2,-24(fp)
    if (ptcb == (OS_TCB *)0) {                   /* Task to query must exist                           */
   15738:	e0bffa17 	ldw	r2,-24(fp)
   1573c:	1000061e 	bne	r2,zero,15758 <OSTaskQuery+0xc8>
   15740:	e0bff817 	ldw	r2,-32(fp)
   15744:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   15748:	e0bff917 	ldw	r2,-28(fp)
   1574c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_PRIO);
   15750:	00800a44 	movi	r2,41
   15754:	00001206 	br	157a0 <OSTaskQuery+0x110>
    }
    if (ptcb == OS_TCB_RESERVED) {               /* Task to query must not be assigned to a Mutex      */
   15758:	e0bffa17 	ldw	r2,-24(fp)
   1575c:	10800058 	cmpnei	r2,r2,1
   15760:	1000061e 	bne	r2,zero,1577c <OSTaskQuery+0xec>
   15764:	e0bff817 	ldw	r2,-32(fp)
   15768:	e0bffb15 	stw	r2,-20(fp)
   1576c:	e0bffb17 	ldw	r2,-20(fp)
   15770:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
   15774:	008010c4 	movi	r2,67
   15778:	00000906 	br	157a0 <OSTaskQuery+0x110>
    }
                                                 /* Copy TCB into user storage area                    */
    OS_MemCopy((INT8U *)p_task_data, (INT8U *)ptcb, sizeof(OS_TCB));
   1577c:	01801b04 	movi	r6,108
   15780:	e17ffa17 	ldw	r5,-24(fp)
   15784:	e13fff17 	ldw	r4,-4(fp)
   15788:	000fe140 	call	fe14 <OS_MemCopy>
   1578c:	e0bff817 	ldw	r2,-32(fp)
   15790:	e0bffc15 	stw	r2,-16(fp)
   15794:	e0bffc17 	ldw	r2,-16(fp)
   15798:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
   1579c:	0005883a 	mov	r2,zero
}
   157a0:	e037883a 	mov	sp,fp
   157a4:	dfc00117 	ldw	ra,4(sp)
   157a8:	df000017 	ldw	fp,0(sp)
   157ac:	dec00204 	addi	sp,sp,8
   157b0:	f800283a 	ret

000157b4 <OS_TaskStkClr>:
* Returns    : none
*********************************************************************************************************
*/
#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
void  OS_TaskStkClr (OS_STK *pbos, INT32U size, INT16U opt)
{
   157b4:	defffc04 	addi	sp,sp,-16
   157b8:	df000315 	stw	fp,12(sp)
   157bc:	df000304 	addi	fp,sp,12
   157c0:	e13ffd15 	stw	r4,-12(fp)
   157c4:	e17ffe15 	stw	r5,-8(fp)
   157c8:	3005883a 	mov	r2,r6
   157cc:	e0bfff0d 	sth	r2,-4(fp)
    if ((opt & OS_TASK_OPT_STK_CHK) != 0x0000) {       /* See if stack checking has been enabled       */
   157d0:	e0bfff0b 	ldhu	r2,-4(fp)
   157d4:	1080004c 	andi	r2,r2,1
   157d8:	10000d26 	beq	r2,zero,15810 <OS_TaskStkClr+0x5c>
        if ((opt & OS_TASK_OPT_STK_CLR) != 0x0000) {   /* See if stack needs to be cleared             */
   157dc:	e0bfff0b 	ldhu	r2,-4(fp)
   157e0:	1080008c 	andi	r2,r2,2
   157e4:	10000a26 	beq	r2,zero,15810 <OS_TaskStkClr+0x5c>
#if OS_STK_GROWTH == 1
            while (size > 0) {                         /* Stack grows from HIGH to LOW memory          */
   157e8:	00000706 	br	15808 <OS_TaskStkClr+0x54>
                size--;
   157ec:	e0bffe17 	ldw	r2,-8(fp)
   157f0:	10bfffc4 	addi	r2,r2,-1
   157f4:	e0bffe15 	stw	r2,-8(fp)
                *pbos++ = (OS_STK)0;                   /* Clear from bottom of stack and up!           */
   157f8:	e0bffd17 	ldw	r2,-12(fp)
   157fc:	10c00104 	addi	r3,r2,4
   15800:	e0fffd15 	stw	r3,-12(fp)
   15804:	10000015 	stw	zero,0(r2)
void  OS_TaskStkClr (OS_STK *pbos, INT32U size, INT16U opt)
{
    if ((opt & OS_TASK_OPT_STK_CHK) != 0x0000) {       /* See if stack checking has been enabled       */
        if ((opt & OS_TASK_OPT_STK_CLR) != 0x0000) {   /* See if stack needs to be cleared             */
#if OS_STK_GROWTH == 1
            while (size > 0) {                         /* Stack grows from HIGH to LOW memory          */
   15808:	e0bffe17 	ldw	r2,-8(fp)
   1580c:	103ff71e 	bne	r2,zero,157ec <__alt_data_end+0xfffe57ec>
                *pbos-- = (OS_STK)0;                   /* Clear from bottom of stack and down          */
            }
#endif
        }
    }
}
   15810:	0001883a 	nop
   15814:	e037883a 	mov	sp,fp
   15818:	df000017 	ldw	fp,0(sp)
   1581c:	dec00104 	addi	sp,sp,4
   15820:	f800283a 	ret

00015824 <OSTimeDly>:
* Returns    : none
*********************************************************************************************************
*/

void  OSTimeDly (INT16U ticks)
{
   15824:	defff904 	addi	sp,sp,-28
   15828:	dfc00615 	stw	ra,24(sp)
   1582c:	df000515 	stw	fp,20(sp)
   15830:	df000504 	addi	fp,sp,20
   15834:	2005883a 	mov	r2,r4
   15838:	e0bfff0d 	sth	r2,-4(fp)
    INT8U      y;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   1583c:	e03ffb15 	stw	zero,-20(fp)
#endif



    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
   15840:	d0a72f03 	ldbu	r2,-25412(gp)
   15844:	10803fcc 	andi	r2,r2,255
   15848:	1000311e 	bne	r2,zero,15910 <OSTimeDly+0xec>
        return;
    }
    if (ticks > 0) {                             /* 0 means no delay!                                  */
   1584c:	e0bfff0b 	ldhu	r2,-4(fp)
   15850:	10003026 	beq	r2,zero,15914 <OSTimeDly+0xf0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   15854:	0005303a 	rdctl	r2,status
   15858:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1585c:	e0fffe17 	ldw	r3,-8(fp)
   15860:	00bfff84 	movi	r2,-2
   15864:	1884703a 	and	r2,r3,r2
   15868:	1001703a 	wrctl	status,r2
  
  return context;
   1586c:	e0bffe17 	ldw	r2,-8(fp)
        OS_ENTER_CRITICAL();
   15870:	e0bffb15 	stw	r2,-20(fp)
        y            =  OSTCBCur->OSTCBY;        /* Delay current task                                 */
   15874:	d0a73017 	ldw	r2,-25408(gp)
   15878:	10800d03 	ldbu	r2,52(r2)
   1587c:	e0bffd05 	stb	r2,-12(fp)
        OSRdyTbl[y] &= ~OSTCBCur->OSTCBBitX;
   15880:	e0fffd03 	ldbu	r3,-12(fp)
   15884:	e13ffd03 	ldbu	r4,-12(fp)
   15888:	d0a72d44 	addi	r2,gp,-25419
   1588c:	2085883a 	add	r2,r4,r2
   15890:	10800003 	ldbu	r2,0(r2)
   15894:	1009883a 	mov	r4,r2
   15898:	d0a73017 	ldw	r2,-25408(gp)
   1589c:	10800d43 	ldbu	r2,53(r2)
   158a0:	0084303a 	nor	r2,zero,r2
   158a4:	2084703a 	and	r2,r4,r2
   158a8:	1009883a 	mov	r4,r2
   158ac:	d0a72d44 	addi	r2,gp,-25419
   158b0:	1885883a 	add	r2,r3,r2
   158b4:	11000005 	stb	r4,0(r2)
        if (OSRdyTbl[y] == 0) {
   158b8:	e0fffd03 	ldbu	r3,-12(fp)
   158bc:	d0a72d44 	addi	r2,gp,-25419
   158c0:	1885883a 	add	r2,r3,r2
   158c4:	10800003 	ldbu	r2,0(r2)
   158c8:	10803fcc 	andi	r2,r2,255
   158cc:	1000071e 	bne	r2,zero,158ec <OSTimeDly+0xc8>
            OSRdyGrp &= ~OSTCBCur->OSTCBBitY;
   158d0:	d0a73017 	ldw	r2,-25408(gp)
   158d4:	10800d83 	ldbu	r2,54(r2)
   158d8:	0084303a 	nor	r2,zero,r2
   158dc:	1007883a 	mov	r3,r2
   158e0:	d0a72d03 	ldbu	r2,-25420(gp)
   158e4:	1884703a 	and	r2,r3,r2
   158e8:	d0a72d05 	stb	r2,-25420(gp)
        }
        OSTCBCur->OSTCBDly = ticks;              /* Load ticks in TCB                                  */
   158ec:	d0a73017 	ldw	r2,-25408(gp)
   158f0:	e0ffff0b 	ldhu	r3,-4(fp)
   158f4:	10c00b8d 	sth	r3,46(r2)
   158f8:	e0bffb17 	ldw	r2,-20(fp)
   158fc:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   15900:	e0bffc17 	ldw	r2,-16(fp)
   15904:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                              /* Find next task to run!                             */
   15908:	000fe7c0 	call	fe7c <OS_Sched>
   1590c:	00000106 	br	15914 <OSTimeDly+0xf0>
#endif



    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
        return;
   15910:	0001883a 	nop
        }
        OSTCBCur->OSTCBDly = ticks;              /* Load ticks in TCB                                  */
        OS_EXIT_CRITICAL();
        OS_Sched();                              /* Find next task to run!                             */
    }
}
   15914:	e037883a 	mov	sp,fp
   15918:	dfc00117 	ldw	ra,4(sp)
   1591c:	df000017 	ldw	fp,0(sp)
   15920:	dec00204 	addi	sp,sp,8
   15924:	f800283a 	ret

00015928 <OSTimeDlyHMSM>:
*********************************************************************************************************
*/

#if OS_TIME_DLY_HMSM_EN > 0
INT8U  OSTimeDlyHMSM (INT8U hours, INT8U minutes, INT8U seconds, INT16U ms)
{
   15928:	defff704 	addi	sp,sp,-36
   1592c:	dfc00815 	stw	ra,32(sp)
   15930:	df000715 	stw	fp,28(sp)
   15934:	dc000615 	stw	r16,24(sp)
   15938:	df000704 	addi	fp,sp,28
   1593c:	2011883a 	mov	r8,r4
   15940:	2809883a 	mov	r4,r5
   15944:	3007883a 	mov	r3,r6
   15948:	3805883a 	mov	r2,r7
   1594c:	e23ffb05 	stb	r8,-20(fp)
   15950:	e13ffc05 	stb	r4,-16(fp)
   15954:	e0fffd05 	stb	r3,-12(fp)
   15958:	e0bffe0d 	sth	r2,-8(fp)
    INT32U ticks;
    INT16U loops;


    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
   1595c:	d0a72f03 	ldbu	r2,-25412(gp)
   15960:	10803fcc 	andi	r2,r2,255
   15964:	10000226 	beq	r2,zero,15970 <OSTimeDlyHMSM+0x48>
        return (OS_ERR_TIME_DLY_ISR);
   15968:	00801544 	movi	r2,85
   1596c:	00004706 	br	15a8c <OSTimeDlyHMSM+0x164>
    }
#if OS_ARG_CHK_EN > 0
    if (hours == 0) {
   15970:	e0bffb03 	ldbu	r2,-20(fp)
   15974:	1000081e 	bne	r2,zero,15998 <OSTimeDlyHMSM+0x70>
        if (minutes == 0) {
   15978:	e0bffc03 	ldbu	r2,-16(fp)
   1597c:	1000061e 	bne	r2,zero,15998 <OSTimeDlyHMSM+0x70>
            if (seconds == 0) {
   15980:	e0bffd03 	ldbu	r2,-12(fp)
   15984:	1000041e 	bne	r2,zero,15998 <OSTimeDlyHMSM+0x70>
                if (ms == 0) {
   15988:	e0bffe0b 	ldhu	r2,-8(fp)
   1598c:	1000021e 	bne	r2,zero,15998 <OSTimeDlyHMSM+0x70>
                    return (OS_ERR_TIME_ZERO_DLY);
   15990:	00801504 	movi	r2,84
   15994:	00003d06 	br	15a8c <OSTimeDlyHMSM+0x164>
                }
            }
        }
    }
    if (minutes > 59) {
   15998:	e0bffc03 	ldbu	r2,-16(fp)
   1599c:	10800f30 	cmpltui	r2,r2,60
   159a0:	1000021e 	bne	r2,zero,159ac <OSTimeDlyHMSM+0x84>
        return (OS_ERR_TIME_INVALID_MINUTES);    /* Validate arguments to be within range              */
   159a4:	00801444 	movi	r2,81
   159a8:	00003806 	br	15a8c <OSTimeDlyHMSM+0x164>
    }
    if (seconds > 59) {
   159ac:	e0bffd03 	ldbu	r2,-12(fp)
   159b0:	10800f30 	cmpltui	r2,r2,60
   159b4:	1000021e 	bne	r2,zero,159c0 <OSTimeDlyHMSM+0x98>
        return (OS_ERR_TIME_INVALID_SECONDS);
   159b8:	00801484 	movi	r2,82
   159bc:	00003306 	br	15a8c <OSTimeDlyHMSM+0x164>
    }
    if (ms > 999) {
   159c0:	e0bffe0b 	ldhu	r2,-8(fp)
   159c4:	1080fa30 	cmpltui	r2,r2,1000
   159c8:	1000021e 	bne	r2,zero,159d4 <OSTimeDlyHMSM+0xac>
        return (OS_ERR_TIME_INVALID_MS);
   159cc:	008014c4 	movi	r2,83
   159d0:	00002e06 	br	15a8c <OSTimeDlyHMSM+0x164>
    }
#endif
                                                 /* Compute the total number of clock ticks required.. */
                                                 /* .. (rounded to the nearest tick)                   */
    ticks = ((INT32U)hours * 3600L + (INT32U)minutes * 60L + (INT32U)seconds) * OS_TICKS_PER_SEC
   159d4:	e0bffb03 	ldbu	r2,-20(fp)
   159d8:	01438404 	movi	r5,3600
   159dc:	1009883a 	mov	r4,r2
   159e0:	000ad340 	call	ad34 <__mulsi3>
   159e4:	1021883a 	mov	r16,r2
   159e8:	e0bffc03 	ldbu	r2,-16(fp)
   159ec:	01400f04 	movi	r5,60
   159f0:	1009883a 	mov	r4,r2
   159f4:	000ad340 	call	ad34 <__mulsi3>
   159f8:	8087883a 	add	r3,r16,r2
   159fc:	e0bffd03 	ldbu	r2,-12(fp)
   15a00:	1885883a 	add	r2,r3,r2
   15a04:	0140fa04 	movi	r5,1000
   15a08:	1009883a 	mov	r4,r2
   15a0c:	000ad340 	call	ad34 <__mulsi3>
   15a10:	1021883a 	mov	r16,r2
          + OS_TICKS_PER_SEC * ((INT32U)ms + 500L / OS_TICKS_PER_SEC) / 1000L;
   15a14:	e0bffe0b 	ldhu	r2,-8(fp)
   15a18:	0140fa04 	movi	r5,1000
   15a1c:	1009883a 	mov	r4,r2
   15a20:	000ad340 	call	ad34 <__mulsi3>
   15a24:	0140fa04 	movi	r5,1000
   15a28:	1009883a 	mov	r4,r2
   15a2c:	000088c0 	call	88c <__udivsi3>
        return (OS_ERR_TIME_INVALID_MS);
    }
#endif
                                                 /* Compute the total number of clock ticks required.. */
                                                 /* .. (rounded to the nearest tick)                   */
    ticks = ((INT32U)hours * 3600L + (INT32U)minutes * 60L + (INT32U)seconds) * OS_TICKS_PER_SEC
   15a30:	8085883a 	add	r2,r16,r2
   15a34:	e0bffa15 	stw	r2,-24(fp)
          + OS_TICKS_PER_SEC * ((INT32U)ms + 500L / OS_TICKS_PER_SEC) / 1000L;
    loops = (INT16U)(ticks >> 16);               /* Compute the integral number of 65536 tick delays   */
   15a38:	e0bffa17 	ldw	r2,-24(fp)
   15a3c:	1004d43a 	srli	r2,r2,16
   15a40:	e0bff90d 	sth	r2,-28(fp)
    ticks = ticks & 0xFFFFL;                     /* Obtain  the fractional number of ticks             */
   15a44:	e0bffa17 	ldw	r2,-24(fp)
   15a48:	10bfffcc 	andi	r2,r2,65535
   15a4c:	e0bffa15 	stw	r2,-24(fp)
    OSTimeDly((INT16U)ticks);
   15a50:	e0bffa17 	ldw	r2,-24(fp)
   15a54:	10bfffcc 	andi	r2,r2,65535
   15a58:	1009883a 	mov	r4,r2
   15a5c:	00158240 	call	15824 <OSTimeDly>
    while (loops > 0) {
   15a60:	00000706 	br	15a80 <OSTimeDlyHMSM+0x158>
        OSTimeDly((INT16U)32768u);
   15a64:	01200014 	movui	r4,32768
   15a68:	00158240 	call	15824 <OSTimeDly>
        OSTimeDly((INT16U)32768u);
   15a6c:	01200014 	movui	r4,32768
   15a70:	00158240 	call	15824 <OSTimeDly>
        loops--;
   15a74:	e0bff90b 	ldhu	r2,-28(fp)
   15a78:	10bfffc4 	addi	r2,r2,-1
   15a7c:	e0bff90d 	sth	r2,-28(fp)
    ticks = ((INT32U)hours * 3600L + (INT32U)minutes * 60L + (INT32U)seconds) * OS_TICKS_PER_SEC
          + OS_TICKS_PER_SEC * ((INT32U)ms + 500L / OS_TICKS_PER_SEC) / 1000L;
    loops = (INT16U)(ticks >> 16);               /* Compute the integral number of 65536 tick delays   */
    ticks = ticks & 0xFFFFL;                     /* Obtain  the fractional number of ticks             */
    OSTimeDly((INT16U)ticks);
    while (loops > 0) {
   15a80:	e0bff90b 	ldhu	r2,-28(fp)
   15a84:	103ff71e 	bne	r2,zero,15a64 <__alt_data_end+0xfffe5a64>
        OSTimeDly((INT16U)32768u);
        OSTimeDly((INT16U)32768u);
        loops--;
    }
    return (OS_ERR_NONE);
   15a88:	0005883a 	mov	r2,zero
}
   15a8c:	e6ffff04 	addi	sp,fp,-4
   15a90:	dfc00217 	ldw	ra,8(sp)
   15a94:	df000117 	ldw	fp,4(sp)
   15a98:	dc000017 	ldw	r16,0(sp)
   15a9c:	dec00304 	addi	sp,sp,12
   15aa0:	f800283a 	ret

00015aa4 <OSTimeDlyResume>:
*********************************************************************************************************
*/

#if OS_TIME_DLY_RESUME_EN > 0
INT8U  OSTimeDlyResume (INT8U prio)
{
   15aa4:	defff504 	addi	sp,sp,-44
   15aa8:	dfc00a15 	stw	ra,40(sp)
   15aac:	df000915 	stw	fp,36(sp)
   15ab0:	df000904 	addi	fp,sp,36
   15ab4:	2005883a 	mov	r2,r4
   15ab8:	e0bfff05 	stb	r2,-4(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                                    /* Storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   15abc:	e03ff715 	stw	zero,-36(fp)
#endif



    if (prio >= OS_LOWEST_PRIO) {
   15ac0:	e0bfff03 	ldbu	r2,-4(fp)
   15ac4:	10800530 	cmpltui	r2,r2,20
   15ac8:	1000021e 	bne	r2,zero,15ad4 <OSTimeDlyResume+0x30>
        return (OS_ERR_PRIO_INVALID);
   15acc:	00800a84 	movi	r2,42
   15ad0:	00006406 	br	15c64 <OSTimeDlyResume+0x1c0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   15ad4:	0005303a 	rdctl	r2,status
   15ad8:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   15adc:	e0fffe17 	ldw	r3,-8(fp)
   15ae0:	00bfff84 	movi	r2,-2
   15ae4:	1884703a 	and	r2,r3,r2
   15ae8:	1001703a 	wrctl	status,r2
  
  return context;
   15aec:	e0bffe17 	ldw	r2,-8(fp)
    }
    OS_ENTER_CRITICAL();
   15af0:	e0bff715 	stw	r2,-36(fp)
    ptcb = OSTCBPrioTbl[prio];                                 /* Make sure that task exist            */
   15af4:	e0ffff03 	ldbu	r3,-4(fp)
   15af8:	008000b4 	movhi	r2,2
   15afc:	10bf4204 	addi	r2,r2,-760
   15b00:	18c7883a 	add	r3,r3,r3
   15b04:	18c7883a 	add	r3,r3,r3
   15b08:	10c5883a 	add	r2,r2,r3
   15b0c:	10800017 	ldw	r2,0(r2)
   15b10:	e0bff915 	stw	r2,-28(fp)
    if (ptcb == (OS_TCB *)0) {
   15b14:	e0bff917 	ldw	r2,-28(fp)
   15b18:	1000061e 	bne	r2,zero,15b34 <OSTimeDlyResume+0x90>
   15b1c:	e0bff717 	ldw	r2,-36(fp)
   15b20:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   15b24:	e0bff817 	ldw	r2,-32(fp)
   15b28:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);                        /* The task does not exist              */
   15b2c:	008010c4 	movi	r2,67
   15b30:	00004c06 	br	15c64 <OSTimeDlyResume+0x1c0>
    }
    if (ptcb == OS_TCB_RESERVED) {
   15b34:	e0bff917 	ldw	r2,-28(fp)
   15b38:	10800058 	cmpnei	r2,r2,1
   15b3c:	1000061e 	bne	r2,zero,15b58 <OSTimeDlyResume+0xb4>
   15b40:	e0bff717 	ldw	r2,-36(fp)
   15b44:	e0bffa15 	stw	r2,-24(fp)
   15b48:	e0bffa17 	ldw	r2,-24(fp)
   15b4c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);                        /* The task does not exist              */
   15b50:	008010c4 	movi	r2,67
   15b54:	00004306 	br	15c64 <OSTimeDlyResume+0x1c0>
    }
    if (ptcb->OSTCBDly == 0) {                                 /* See if task is delayed               */
   15b58:	e0bff917 	ldw	r2,-28(fp)
   15b5c:	10800b8b 	ldhu	r2,46(r2)
   15b60:	10bfffcc 	andi	r2,r2,65535
   15b64:	1000061e 	bne	r2,zero,15b80 <OSTimeDlyResume+0xdc>
   15b68:	e0bff717 	ldw	r2,-36(fp)
   15b6c:	e0bffb15 	stw	r2,-20(fp)
   15b70:	e0bffb17 	ldw	r2,-20(fp)
   15b74:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TIME_NOT_DLY);                          /* Indicate that task was not delayed   */
   15b78:	00801404 	movi	r2,80
   15b7c:	00003906 	br	15c64 <OSTimeDlyResume+0x1c0>
    }

    ptcb->OSTCBDly = 0;                                        /* Clear the time delay                 */
   15b80:	e0bff917 	ldw	r2,-28(fp)
   15b84:	10000b8d 	sth	zero,46(r2)
    if ((ptcb->OSTCBStat & OS_STAT_PEND_ANY) != OS_STAT_RDY) {
   15b88:	e0bff917 	ldw	r2,-28(fp)
   15b8c:	10800c03 	ldbu	r2,48(r2)
   15b90:	10803fcc 	andi	r2,r2,255
   15b94:	10800dcc 	andi	r2,r2,55
   15b98:	10000b26 	beq	r2,zero,15bc8 <OSTimeDlyResume+0x124>
        ptcb->OSTCBStat     &= ~OS_STAT_PEND_ANY;              /* Yes, Clear status flag               */
   15b9c:	e0bff917 	ldw	r2,-28(fp)
   15ba0:	10c00c03 	ldbu	r3,48(r2)
   15ba4:	00bff204 	movi	r2,-56
   15ba8:	1884703a 	and	r2,r3,r2
   15bac:	1007883a 	mov	r3,r2
   15bb0:	e0bff917 	ldw	r2,-28(fp)
   15bb4:	10c00c05 	stb	r3,48(r2)
        ptcb->OSTCBStatPend  =  OS_STAT_PEND_TO;               /* Indicate PEND timeout                */
   15bb8:	e0bff917 	ldw	r2,-28(fp)
   15bbc:	00c00044 	movi	r3,1
   15bc0:	10c00c45 	stb	r3,49(r2)
   15bc4:	00000206 	br	15bd0 <OSTimeDlyResume+0x12c>
    } else {
        ptcb->OSTCBStatPend  =  OS_STAT_PEND_OK;
   15bc8:	e0bff917 	ldw	r2,-28(fp)
   15bcc:	10000c45 	stb	zero,49(r2)
    }
    if ((ptcb->OSTCBStat & OS_STAT_SUSPEND) == OS_STAT_RDY) {  /* Is task suspended?                   */
   15bd0:	e0bff917 	ldw	r2,-28(fp)
   15bd4:	10800c03 	ldbu	r2,48(r2)
   15bd8:	10803fcc 	andi	r2,r2,255
   15bdc:	1080020c 	andi	r2,r2,8
   15be0:	10001b1e 	bne	r2,zero,15c50 <OSTimeDlyResume+0x1ac>
        OSRdyGrp               |= ptcb->OSTCBBitY;             /* No,  Make ready                      */
   15be4:	e0bff917 	ldw	r2,-28(fp)
   15be8:	10c00d83 	ldbu	r3,54(r2)
   15bec:	d0a72d03 	ldbu	r2,-25420(gp)
   15bf0:	1884b03a 	or	r2,r3,r2
   15bf4:	d0a72d05 	stb	r2,-25420(gp)
        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
   15bf8:	e0bff917 	ldw	r2,-28(fp)
   15bfc:	10800d03 	ldbu	r2,52(r2)
   15c00:	10c03fcc 	andi	r3,r2,255
   15c04:	e0bff917 	ldw	r2,-28(fp)
   15c08:	10800d03 	ldbu	r2,52(r2)
   15c0c:	11003fcc 	andi	r4,r2,255
   15c10:	d0a72d44 	addi	r2,gp,-25419
   15c14:	2085883a 	add	r2,r4,r2
   15c18:	11000003 	ldbu	r4,0(r2)
   15c1c:	e0bff917 	ldw	r2,-28(fp)
   15c20:	10800d43 	ldbu	r2,53(r2)
   15c24:	2084b03a 	or	r2,r4,r2
   15c28:	1009883a 	mov	r4,r2
   15c2c:	d0a72d44 	addi	r2,gp,-25419
   15c30:	1885883a 	add	r2,r3,r2
   15c34:	11000005 	stb	r4,0(r2)
   15c38:	e0bff717 	ldw	r2,-36(fp)
   15c3c:	e0bffc15 	stw	r2,-16(fp)
   15c40:	e0bffc17 	ldw	r2,-16(fp)
   15c44:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                            /* See if this is new highest priority  */
   15c48:	000fe7c0 	call	fe7c <OS_Sched>
   15c4c:	00000406 	br	15c60 <OSTimeDlyResume+0x1bc>
   15c50:	e0bff717 	ldw	r2,-36(fp)
   15c54:	e0bffd15 	stw	r2,-12(fp)
   15c58:	e0bffd17 	ldw	r2,-12(fp)
   15c5c:	1001703a 	wrctl	status,r2
    } else {
        OS_EXIT_CRITICAL();                                    /* Task may be suspended                */
    }
    return (OS_ERR_NONE);
   15c60:	0005883a 	mov	r2,zero
}
   15c64:	e037883a 	mov	sp,fp
   15c68:	dfc00117 	ldw	ra,4(sp)
   15c6c:	df000017 	ldw	fp,0(sp)
   15c70:	dec00204 	addi	sp,sp,8
   15c74:	f800283a 	ret

00015c78 <OSTimeGet>:
*********************************************************************************************************
*/

#if OS_TIME_GET_SET_EN > 0
INT32U  OSTimeGet (void)
{
   15c78:	defffb04 	addi	sp,sp,-20
   15c7c:	df000415 	stw	fp,16(sp)
   15c80:	df000404 	addi	fp,sp,16
    INT32U     ticks;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   15c84:	e03ffc15 	stw	zero,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   15c88:	0005303a 	rdctl	r2,status
   15c8c:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   15c90:	e0fffe17 	ldw	r3,-8(fp)
   15c94:	00bfff84 	movi	r2,-2
   15c98:	1884703a 	and	r2,r3,r2
   15c9c:	1001703a 	wrctl	status,r2
  
  return context;
   15ca0:	e0bffe17 	ldw	r2,-8(fp)
#endif



    OS_ENTER_CRITICAL();
   15ca4:	e0bffc15 	stw	r2,-16(fp)
    ticks = OSTime;
   15ca8:	d0a73117 	ldw	r2,-25404(gp)
   15cac:	e0bffd15 	stw	r2,-12(fp)
   15cb0:	e0bffc17 	ldw	r2,-16(fp)
   15cb4:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   15cb8:	e0bfff17 	ldw	r2,-4(fp)
   15cbc:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (ticks);
   15cc0:	e0bffd17 	ldw	r2,-12(fp)
}
   15cc4:	e037883a 	mov	sp,fp
   15cc8:	df000017 	ldw	fp,0(sp)
   15ccc:	dec00104 	addi	sp,sp,4
   15cd0:	f800283a 	ret

00015cd4 <OSTimeSet>:
*********************************************************************************************************
*/

#if OS_TIME_GET_SET_EN > 0
void  OSTimeSet (INT32U ticks)
{
   15cd4:	defffb04 	addi	sp,sp,-20
   15cd8:	df000415 	stw	fp,16(sp)
   15cdc:	df000404 	addi	fp,sp,16
   15ce0:	e13fff15 	stw	r4,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   15ce4:	e03ffc15 	stw	zero,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   15ce8:	0005303a 	rdctl	r2,status
   15cec:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   15cf0:	e0fffd17 	ldw	r3,-12(fp)
   15cf4:	00bfff84 	movi	r2,-2
   15cf8:	1884703a 	and	r2,r3,r2
   15cfc:	1001703a 	wrctl	status,r2
  
  return context;
   15d00:	e0bffd17 	ldw	r2,-12(fp)
#endif



    OS_ENTER_CRITICAL();
   15d04:	e0bffc15 	stw	r2,-16(fp)
    OSTime = ticks;
   15d08:	e0bfff17 	ldw	r2,-4(fp)
   15d0c:	d0a73115 	stw	r2,-25404(gp)
   15d10:	e0bffc17 	ldw	r2,-16(fp)
   15d14:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   15d18:	e0bffe17 	ldw	r2,-8(fp)
   15d1c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
}
   15d20:	0001883a 	nop
   15d24:	e037883a 	mov	sp,fp
   15d28:	df000017 	ldw	fp,0(sp)
   15d2c:	dec00104 	addi	sp,sp,4
   15d30:	f800283a 	ret

00015d34 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
   15d34:	defffd04 	addi	sp,sp,-12
   15d38:	dfc00215 	stw	ra,8(sp)
   15d3c:	df000115 	stw	fp,4(sp)
   15d40:	df000104 	addi	fp,sp,4
   15d44:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
   15d48:	d1600804 	addi	r5,gp,-32736
   15d4c:	e13fff17 	ldw	r4,-4(fp)
   15d50:	0016dac0 	call	16dac <alt_dev_llist_insert>
}
   15d54:	e037883a 	mov	sp,fp
   15d58:	dfc00117 	ldw	ra,4(sp)
   15d5c:	df000017 	ldw	fp,0(sp)
   15d60:	dec00204 	addi	sp,sp,8
   15d64:	f800283a 	ret

00015d68 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
   15d68:	defffd04 	addi	sp,sp,-12
   15d6c:	dfc00215 	stw	ra,8(sp)
   15d70:	df000115 	stw	fp,4(sp)
   15d74:	df000104 	addi	fp,sp,4
   15d78:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( NIOS2, nios2);
   15d7c:	00174b80 	call	174b8 <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
   15d80:	00800044 	movi	r2,1
   15d84:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
   15d88:	0001883a 	nop
   15d8c:	e037883a 	mov	sp,fp
   15d90:	dfc00117 	ldw	ra,4(sp)
   15d94:	df000017 	ldw	fp,0(sp)
   15d98:	dec00204 	addi	sp,sp,8
   15d9c:	f800283a 	ret

00015da0 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
   15da0:	defffe04 	addi	sp,sp,-8
   15da4:	dfc00115 	stw	ra,4(sp)
   15da8:	df000015 	stw	fp,0(sp)
   15dac:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER, timer);
   15db0:	01c0fa04 	movi	r7,1000
   15db4:	000d883a 	mov	r6,zero
   15db8:	000b883a 	mov	r5,zero
   15dbc:	01000134 	movhi	r4,4
   15dc0:	21040004 	addi	r4,r4,4096
   15dc4:	0016ba80 	call	16ba8 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG, jtag);
   15dc8:	01800084 	movi	r6,2
   15dcc:	000b883a 	mov	r5,zero
   15dd0:	010000b4 	movhi	r4,2
   15dd4:	21233c04 	addi	r4,r4,-29456
   15dd8:	0015f680 	call	15f68 <altera_avalon_jtag_uart_init>
   15ddc:	010000b4 	movhi	r4,2
   15de0:	21233204 	addi	r4,r4,-29496
   15de4:	0015d340 	call	15d34 <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID, sysid);
   15de8:	0001883a 	nop
}
   15dec:	0001883a 	nop
   15df0:	e037883a 	mov	sp,fp
   15df4:	dfc00117 	ldw	ra,4(sp)
   15df8:	df000017 	ldw	fp,0(sp)
   15dfc:	dec00204 	addi	sp,sp,8
   15e00:	f800283a 	ret

00015e04 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
   15e04:	defffa04 	addi	sp,sp,-24
   15e08:	dfc00515 	stw	ra,20(sp)
   15e0c:	df000415 	stw	fp,16(sp)
   15e10:	df000404 	addi	fp,sp,16
   15e14:	e13ffd15 	stw	r4,-12(fp)
   15e18:	e17ffe15 	stw	r5,-8(fp)
   15e1c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   15e20:	e0bffd17 	ldw	r2,-12(fp)
   15e24:	10800017 	ldw	r2,0(r2)
   15e28:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
   15e2c:	e0bffc17 	ldw	r2,-16(fp)
   15e30:	10c00a04 	addi	r3,r2,40
   15e34:	e0bffd17 	ldw	r2,-12(fp)
   15e38:	10800217 	ldw	r2,8(r2)
   15e3c:	100f883a 	mov	r7,r2
   15e40:	e1bfff17 	ldw	r6,-4(fp)
   15e44:	e17ffe17 	ldw	r5,-8(fp)
   15e48:	1809883a 	mov	r4,r3
   15e4c:	00165b00 	call	165b0 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
   15e50:	e037883a 	mov	sp,fp
   15e54:	dfc00117 	ldw	ra,4(sp)
   15e58:	df000017 	ldw	fp,0(sp)
   15e5c:	dec00204 	addi	sp,sp,8
   15e60:	f800283a 	ret

00015e64 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
   15e64:	defffa04 	addi	sp,sp,-24
   15e68:	dfc00515 	stw	ra,20(sp)
   15e6c:	df000415 	stw	fp,16(sp)
   15e70:	df000404 	addi	fp,sp,16
   15e74:	e13ffd15 	stw	r4,-12(fp)
   15e78:	e17ffe15 	stw	r5,-8(fp)
   15e7c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   15e80:	e0bffd17 	ldw	r2,-12(fp)
   15e84:	10800017 	ldw	r2,0(r2)
   15e88:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
   15e8c:	e0bffc17 	ldw	r2,-16(fp)
   15e90:	10c00a04 	addi	r3,r2,40
   15e94:	e0bffd17 	ldw	r2,-12(fp)
   15e98:	10800217 	ldw	r2,8(r2)
   15e9c:	100f883a 	mov	r7,r2
   15ea0:	e1bfff17 	ldw	r6,-4(fp)
   15ea4:	e17ffe17 	ldw	r5,-8(fp)
   15ea8:	1809883a 	mov	r4,r3
   15eac:	001686c0 	call	1686c <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
   15eb0:	e037883a 	mov	sp,fp
   15eb4:	dfc00117 	ldw	ra,4(sp)
   15eb8:	df000017 	ldw	fp,0(sp)
   15ebc:	dec00204 	addi	sp,sp,8
   15ec0:	f800283a 	ret

00015ec4 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
   15ec4:	defffc04 	addi	sp,sp,-16
   15ec8:	dfc00315 	stw	ra,12(sp)
   15ecc:	df000215 	stw	fp,8(sp)
   15ed0:	df000204 	addi	fp,sp,8
   15ed4:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   15ed8:	e0bfff17 	ldw	r2,-4(fp)
   15edc:	10800017 	ldw	r2,0(r2)
   15ee0:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
   15ee4:	e0bffe17 	ldw	r2,-8(fp)
   15ee8:	10c00a04 	addi	r3,r2,40
   15eec:	e0bfff17 	ldw	r2,-4(fp)
   15ef0:	10800217 	ldw	r2,8(r2)
   15ef4:	100b883a 	mov	r5,r2
   15ef8:	1809883a 	mov	r4,r3
   15efc:	00164580 	call	16458 <altera_avalon_jtag_uart_close>
}
   15f00:	e037883a 	mov	sp,fp
   15f04:	dfc00117 	ldw	ra,4(sp)
   15f08:	df000017 	ldw	fp,0(sp)
   15f0c:	dec00204 	addi	sp,sp,8
   15f10:	f800283a 	ret

00015f14 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
   15f14:	defffa04 	addi	sp,sp,-24
   15f18:	dfc00515 	stw	ra,20(sp)
   15f1c:	df000415 	stw	fp,16(sp)
   15f20:	df000404 	addi	fp,sp,16
   15f24:	e13ffd15 	stw	r4,-12(fp)
   15f28:	e17ffe15 	stw	r5,-8(fp)
   15f2c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
   15f30:	e0bffd17 	ldw	r2,-12(fp)
   15f34:	10800017 	ldw	r2,0(r2)
   15f38:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
   15f3c:	e0bffc17 	ldw	r2,-16(fp)
   15f40:	10800a04 	addi	r2,r2,40
   15f44:	e1bfff17 	ldw	r6,-4(fp)
   15f48:	e17ffe17 	ldw	r5,-8(fp)
   15f4c:	1009883a 	mov	r4,r2
   15f50:	00164c00 	call	164c0 <altera_avalon_jtag_uart_ioctl>
}
   15f54:	e037883a 	mov	sp,fp
   15f58:	dfc00117 	ldw	ra,4(sp)
   15f5c:	df000017 	ldw	fp,0(sp)
   15f60:	dec00204 	addi	sp,sp,8
   15f64:	f800283a 	ret

00015f68 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
   15f68:	defff104 	addi	sp,sp,-60
   15f6c:	dfc00e15 	stw	ra,56(sp)
   15f70:	df000d15 	stw	fp,52(sp)
   15f74:	df000d04 	addi	fp,sp,52
   15f78:	e13ff915 	stw	r4,-28(fp)
   15f7c:	e17ffa15 	stw	r5,-24(fp)
   15f80:	e1bffb15 	stw	r6,-20(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
   15f84:	e0bff917 	ldw	r2,-28(fp)
   15f88:	10800c04 	addi	r2,r2,48
   15f8c:	e0bff415 	stw	r2,-48(fp)
   15f90:	e03ff80d 	sth	zero,-32(fp)

static ALT_INLINE int ALT_ALWAYS_INLINE alt_flag_create (OS_FLAG_GRP** pgroup, 
               OS_FLAGS flags)
{
  INT8U err;
  *pgroup = OSFlagCreate (flags, &err);
   15f94:	e0bff80b 	ldhu	r2,-32(fp)
   15f98:	e0fff884 	addi	r3,fp,-30
   15f9c:	180b883a 	mov	r5,r3
   15fa0:	1009883a 	mov	r4,r2
   15fa4:	00109e80 	call	109e8 <OSFlagCreate>
   15fa8:	1007883a 	mov	r3,r2
   15fac:	e0bff417 	ldw	r2,-48(fp)
   15fb0:	10c00015 	stw	r3,0(r2)
  ALT_SEM_CREATE(&sp->read_lock, 1);
   15fb4:	e0bff917 	ldw	r2,-28(fp)
   15fb8:	10800a04 	addi	r2,r2,40
   15fbc:	e0bff515 	stw	r2,-44(fp)
   15fc0:	00800044 	movi	r2,1
   15fc4:	e0bff78d 	sth	r2,-34(fp)
   15fc8:	e0bff78b 	ldhu	r2,-34(fp)
   15fcc:	1009883a 	mov	r4,r2
   15fd0:	00137080 	call	13708 <OSSemCreate>
   15fd4:	1007883a 	mov	r3,r2
   15fd8:	e0bff517 	ldw	r2,-44(fp)
   15fdc:	10c00015 	stw	r3,0(r2)
  ALT_SEM_CREATE(&sp->write_lock, 1);
   15fe0:	e0bff917 	ldw	r2,-28(fp)
   15fe4:	10800b04 	addi	r2,r2,44
   15fe8:	e0bff615 	stw	r2,-40(fp)
   15fec:	00800044 	movi	r2,1
   15ff0:	e0bff70d 	sth	r2,-36(fp)
   15ff4:	e0bff70b 	ldhu	r2,-36(fp)
   15ff8:	1009883a 	mov	r4,r2
   15ffc:	00137080 	call	13708 <OSSemCreate>
   16000:	1007883a 	mov	r3,r2
   16004:	e0bff617 	ldw	r2,-40(fp)
   16008:	10c00015 	stw	r3,0(r2)

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   1600c:	e0bff917 	ldw	r2,-28(fp)
   16010:	00c00044 	movi	r3,1
   16014:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
   16018:	e0bff917 	ldw	r2,-28(fp)
   1601c:	10800017 	ldw	r2,0(r2)
   16020:	10800104 	addi	r2,r2,4
   16024:	1007883a 	mov	r3,r2
   16028:	e0bff917 	ldw	r2,-28(fp)
   1602c:	10800817 	ldw	r2,32(r2)
   16030:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
   16034:	e0bffa17 	ldw	r2,-24(fp)
   16038:	e0fffb17 	ldw	r3,-20(fp)
   1603c:	d8000015 	stw	zero,0(sp)
   16040:	e1fff917 	ldw	r7,-28(fp)
   16044:	01800074 	movhi	r6,1
   16048:	31982c04 	addi	r6,r6,24752
   1604c:	180b883a 	mov	r5,r3
   16050:	1009883a 	mov	r4,r2
   16054:	000d8340 	call	d834 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
   16058:	e0bff917 	ldw	r2,-28(fp)
   1605c:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
   16060:	e0bff917 	ldw	r2,-28(fp)
   16064:	10800204 	addi	r2,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   16068:	d0e73517 	ldw	r3,-25388(gp)
   1606c:	e1fff917 	ldw	r7,-28(fp)
   16070:	01800074 	movhi	r6,1
   16074:	3198d504 	addi	r6,r6,25428
   16078:	180b883a 	mov	r5,r3
   1607c:	1009883a 	mov	r4,r2
   16080:	0016c240 	call	16c24 <alt_alarm_start>
   16084:	1000040e 	bge	r2,zero,16098 <altera_avalon_jtag_uart_init+0x130>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
   16088:	e0fff917 	ldw	r3,-28(fp)
   1608c:	00a00034 	movhi	r2,32768
   16090:	10bfffc4 	addi	r2,r2,-1
   16094:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
   16098:	0001883a 	nop
   1609c:	e037883a 	mov	sp,fp
   160a0:	dfc00117 	ldw	ra,4(sp)
   160a4:	df000017 	ldw	fp,0(sp)
   160a8:	dec00204 	addi	sp,sp,8
   160ac:	f800283a 	ret

000160b0 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
   160b0:	defff204 	addi	sp,sp,-56
   160b4:	dfc00d15 	stw	ra,52(sp)
   160b8:	df000c15 	stw	fp,48(sp)
   160bc:	df000c04 	addi	fp,sp,48
   160c0:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
   160c4:	e0bfff17 	ldw	r2,-4(fp)
   160c8:	e0bff615 	stw	r2,-40(fp)
  unsigned int base = sp->base;
   160cc:	e0bff617 	ldw	r2,-40(fp)
   160d0:	10800017 	ldw	r2,0(r2)
   160d4:	e0bff715 	stw	r2,-36(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   160d8:	e0bff717 	ldw	r2,-36(fp)
   160dc:	10800104 	addi	r2,r2,4
   160e0:	10800037 	ldwio	r2,0(r2)
   160e4:	e0bff815 	stw	r2,-32(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
   160e8:	e0bff817 	ldw	r2,-32(fp)
   160ec:	1080c00c 	andi	r2,r2,768
   160f0:	10009126 	beq	r2,zero,16338 <altera_avalon_jtag_uart_irq+0x288>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
   160f4:	e0bff817 	ldw	r2,-32(fp)
   160f8:	1080400c 	andi	r2,r2,256
   160fc:	10004726 	beq	r2,zero,1621c <altera_avalon_jtag_uart_irq+0x16c>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
   16100:	00800074 	movhi	r2,1
   16104:	e0bff415 	stw	r2,-48(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   16108:	e0bff617 	ldw	r2,-40(fp)
   1610c:	10800d17 	ldw	r2,52(r2)
   16110:	10800044 	addi	r2,r2,1
   16114:	1081ffcc 	andi	r2,r2,2047
   16118:	e0bff915 	stw	r2,-28(fp)
        if (next == sp->rx_out)
   1611c:	e0bff617 	ldw	r2,-40(fp)
   16120:	10c00e17 	ldw	r3,56(r2)
   16124:	e0bff917 	ldw	r2,-28(fp)
   16128:	18802726 	beq	r3,r2,161c8 <altera_avalon_jtag_uart_irq+0x118>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
   1612c:	e0bff717 	ldw	r2,-36(fp)
   16130:	10800037 	ldwio	r2,0(r2)
   16134:	e0bff415 	stw	r2,-48(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
   16138:	e0bff417 	ldw	r2,-48(fp)
   1613c:	10a0000c 	andi	r2,r2,32768
   16140:	10002326 	beq	r2,zero,161d0 <altera_avalon_jtag_uart_irq+0x120>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
   16144:	e0bff617 	ldw	r2,-40(fp)
   16148:	10800d17 	ldw	r2,52(r2)
   1614c:	e0fff417 	ldw	r3,-48(fp)
   16150:	1809883a 	mov	r4,r3
   16154:	e0fff617 	ldw	r3,-40(fp)
   16158:	1885883a 	add	r2,r3,r2
   1615c:	10801104 	addi	r2,r2,68
   16160:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   16164:	e0bff617 	ldw	r2,-40(fp)
   16168:	10800d17 	ldw	r2,52(r2)
   1616c:	10800044 	addi	r2,r2,1
   16170:	10c1ffcc 	andi	r3,r2,2047
   16174:	e0bff617 	ldw	r2,-40(fp)
   16178:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
   1617c:	e0bff617 	ldw	r2,-40(fp)
   16180:	10800c17 	ldw	r2,48(r2)
   16184:	e0bffb15 	stw	r2,-20(fp)
   16188:	00800044 	movi	r2,1
   1618c:	e0bffc0d 	sth	r2,-16(fp)
   16190:	00800044 	movi	r2,1
   16194:	e0bffc85 	stb	r2,-14(fp)
                   OS_FLAGS     flags, 
                   INT8U        opt)
{
  INT8U err;

  if (OSRunning)
   16198:	d0a72143 	ldbu	r2,-25467(gp)
   1619c:	10803fcc 	andi	r2,r2,255
   161a0:	103fd926 	beq	r2,zero,16108 <__alt_data_end+0xfffe6108>
  {
    OSFlagPost (group, flags, opt, &err);
   161a4:	e0bffc0b 	ldhu	r2,-16(fp)
   161a8:	e0fffc83 	ldbu	r3,-14(fp)
   161ac:	e13ffdc4 	addi	r4,fp,-9
   161b0:	200f883a 	mov	r7,r4
   161b4:	180d883a 	mov	r6,r3
   161b8:	100b883a 	mov	r5,r2
   161bc:	e13ffb17 	ldw	r4,-20(fp)
   161c0:	00115c40 	call	115c4 <OSFlagPost>
      }
   161c4:	003fd006 	br	16108 <__alt_data_end+0xfffe6108>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
   161c8:	0001883a 	nop
   161cc:	00000106 	br	161d4 <altera_avalon_jtag_uart_irq+0x124>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
   161d0:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
   161d4:	e0bff417 	ldw	r2,-48(fp)
   161d8:	10bfffec 	andhi	r2,r2,65535
   161dc:	10000f26 	beq	r2,zero,1621c <altera_avalon_jtag_uart_irq+0x16c>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   161e0:	e0bff617 	ldw	r2,-40(fp)
   161e4:	10c00817 	ldw	r3,32(r2)
   161e8:	00bfff84 	movi	r2,-2
   161ec:	1886703a 	and	r3,r3,r2
   161f0:	e0bff617 	ldw	r2,-40(fp)
   161f4:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
   161f8:	e0bff717 	ldw	r2,-36(fp)
   161fc:	10800104 	addi	r2,r2,4
   16200:	1007883a 	mov	r3,r2
   16204:	e0bff617 	ldw	r2,-40(fp)
   16208:	10800817 	ldw	r2,32(r2)
   1620c:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   16210:	e0bff717 	ldw	r2,-36(fp)
   16214:	10800104 	addi	r2,r2,4
   16218:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
   1621c:	e0bff817 	ldw	r2,-32(fp)
   16220:	1080800c 	andi	r2,r2,512
   16224:	103fac26 	beq	r2,zero,160d8 <__alt_data_end+0xfffe60d8>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
   16228:	e0bff817 	ldw	r2,-32(fp)
   1622c:	1004d43a 	srli	r2,r2,16
   16230:	e0bff515 	stw	r2,-44(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
   16234:	00002606 	br	162d0 <altera_avalon_jtag_uart_irq+0x220>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
   16238:	e0bff717 	ldw	r2,-36(fp)
   1623c:	e0fff617 	ldw	r3,-40(fp)
   16240:	18c01017 	ldw	r3,64(r3)
   16244:	e13ff617 	ldw	r4,-40(fp)
   16248:	20c7883a 	add	r3,r4,r3
   1624c:	18c21104 	addi	r3,r3,2116
   16250:	18c00003 	ldbu	r3,0(r3)
   16254:	18c03fcc 	andi	r3,r3,255
   16258:	18c0201c 	xori	r3,r3,128
   1625c:	18ffe004 	addi	r3,r3,-128
   16260:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   16264:	e0bff617 	ldw	r2,-40(fp)
   16268:	10801017 	ldw	r2,64(r2)
   1626c:	10800044 	addi	r2,r2,1
   16270:	10c1ffcc 	andi	r3,r2,2047
   16274:	e0bff617 	ldw	r2,-40(fp)
   16278:	10c01015 	stw	r3,64(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);
   1627c:	e0bff617 	ldw	r2,-40(fp)
   16280:	10800c17 	ldw	r2,48(r2)
   16284:	e0bffa15 	stw	r2,-24(fp)
   16288:	00800084 	movi	r2,2
   1628c:	e0bffd0d 	sth	r2,-12(fp)
   16290:	00800044 	movi	r2,1
   16294:	e0bffd85 	stb	r2,-10(fp)
                   OS_FLAGS     flags, 
                   INT8U        opt)
{
  INT8U err;

  if (OSRunning)
   16298:	d0a72143 	ldbu	r2,-25467(gp)
   1629c:	10803fcc 	andi	r2,r2,255
   162a0:	10000826 	beq	r2,zero,162c4 <altera_avalon_jtag_uart_irq+0x214>
  {
    OSFlagPost (group, flags, opt, &err);
   162a4:	e0bffd0b 	ldhu	r2,-12(fp)
   162a8:	e0fffd83 	ldbu	r3,-10(fp)
   162ac:	e13ffe04 	addi	r4,fp,-8
   162b0:	200f883a 	mov	r7,r4
   162b4:	180d883a 	mov	r6,r3
   162b8:	100b883a 	mov	r5,r2
   162bc:	e13ffa17 	ldw	r4,-24(fp)
   162c0:	00115c40 	call	115c4 <OSFlagPost>

        space--;
   162c4:	e0bff517 	ldw	r2,-44(fp)
   162c8:	10bfffc4 	addi	r2,r2,-1
   162cc:	e0bff515 	stw	r2,-44(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
   162d0:	e0bff517 	ldw	r2,-44(fp)
   162d4:	10000526 	beq	r2,zero,162ec <altera_avalon_jtag_uart_irq+0x23c>
   162d8:	e0bff617 	ldw	r2,-40(fp)
   162dc:	10c01017 	ldw	r3,64(r2)
   162e0:	e0bff617 	ldw	r2,-40(fp)
   162e4:	10800f17 	ldw	r2,60(r2)
   162e8:	18bfd31e 	bne	r3,r2,16238 <__alt_data_end+0xfffe6238>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
   162ec:	e0bff517 	ldw	r2,-44(fp)
   162f0:	103f7926 	beq	r2,zero,160d8 <__alt_data_end+0xfffe60d8>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   162f4:	e0bff617 	ldw	r2,-40(fp)
   162f8:	10c00817 	ldw	r3,32(r2)
   162fc:	00bfff44 	movi	r2,-3
   16300:	1886703a 	and	r3,r3,r2
   16304:	e0bff617 	ldw	r2,-40(fp)
   16308:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   1630c:	e0bff617 	ldw	r2,-40(fp)
   16310:	10800017 	ldw	r2,0(r2)
   16314:	10800104 	addi	r2,r2,4
   16318:	1007883a 	mov	r3,r2
   1631c:	e0bff617 	ldw	r2,-40(fp)
   16320:	10800817 	ldw	r2,32(r2)
   16324:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   16328:	e0bff717 	ldw	r2,-36(fp)
   1632c:	10800104 	addi	r2,r2,4
   16330:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
   16334:	003f6806 	br	160d8 <__alt_data_end+0xfffe60d8>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
   16338:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
   1633c:	0001883a 	nop
   16340:	e037883a 	mov	sp,fp
   16344:	dfc00117 	ldw	ra,4(sp)
   16348:	df000017 	ldw	fp,0(sp)
   1634c:	dec00204 	addi	sp,sp,8
   16350:	f800283a 	ret

00016354 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
   16354:	defff904 	addi	sp,sp,-28
   16358:	dfc00615 	stw	ra,24(sp)
   1635c:	df000515 	stw	fp,20(sp)
   16360:	df000504 	addi	fp,sp,20
   16364:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
   16368:	e0bfff17 	ldw	r2,-4(fp)
   1636c:	e0bffb15 	stw	r2,-20(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
   16370:	e0bffb17 	ldw	r2,-20(fp)
   16374:	10800017 	ldw	r2,0(r2)
   16378:	10800104 	addi	r2,r2,4
   1637c:	10800037 	ldwio	r2,0(r2)
   16380:	e0bffc15 	stw	r2,-16(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
   16384:	e0bffc17 	ldw	r2,-16(fp)
   16388:	1081000c 	andi	r2,r2,1024
   1638c:	10000b26 	beq	r2,zero,163bc <altera_avalon_jtag_uart_timeout+0x68>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
   16390:	e0bffb17 	ldw	r2,-20(fp)
   16394:	10800017 	ldw	r2,0(r2)
   16398:	10800104 	addi	r2,r2,4
   1639c:	1007883a 	mov	r3,r2
   163a0:	e0bffb17 	ldw	r2,-20(fp)
   163a4:	10800817 	ldw	r2,32(r2)
   163a8:	10810014 	ori	r2,r2,1024
   163ac:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
   163b0:	e0bffb17 	ldw	r2,-20(fp)
   163b4:	10000915 	stw	zero,36(r2)
   163b8:	00002106 	br	16440 <altera_avalon_jtag_uart_timeout+0xec>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
   163bc:	e0bffb17 	ldw	r2,-20(fp)
   163c0:	10c00917 	ldw	r3,36(r2)
   163c4:	00a00034 	movhi	r2,32768
   163c8:	10bfff04 	addi	r2,r2,-4
   163cc:	10c01c36 	bltu	r2,r3,16440 <altera_avalon_jtag_uart_timeout+0xec>
    sp->host_inactive++;
   163d0:	e0bffb17 	ldw	r2,-20(fp)
   163d4:	10800917 	ldw	r2,36(r2)
   163d8:	10c00044 	addi	r3,r2,1
   163dc:	e0bffb17 	ldw	r2,-20(fp)
   163e0:	10c00915 	stw	r3,36(r2)
    
    if (sp->host_inactive >= sp->timeout) {
   163e4:	e0bffb17 	ldw	r2,-20(fp)
   163e8:	10c00917 	ldw	r3,36(r2)
   163ec:	e0bffb17 	ldw	r2,-20(fp)
   163f0:	10800117 	ldw	r2,4(r2)
   163f4:	18801236 	bltu	r3,r2,16440 <altera_avalon_jtag_uart_timeout+0xec>
      /* Post an event to indicate host is inactive (for jtag_uart_read */
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
   163f8:	e0bffb17 	ldw	r2,-20(fp)
   163fc:	10800c17 	ldw	r2,48(r2)
   16400:	e0bffd15 	stw	r2,-12(fp)
   16404:	00800104 	movi	r2,4
   16408:	e0bffe0d 	sth	r2,-8(fp)
   1640c:	00800044 	movi	r2,1
   16410:	e0bffe85 	stb	r2,-6(fp)
                   OS_FLAGS     flags, 
                   INT8U        opt)
{
  INT8U err;

  if (OSRunning)
   16414:	d0a72143 	ldbu	r2,-25467(gp)
   16418:	10803fcc 	andi	r2,r2,255
   1641c:	10000826 	beq	r2,zero,16440 <altera_avalon_jtag_uart_timeout+0xec>
  {
    OSFlagPost (group, flags, opt, &err);
   16420:	e0bffe0b 	ldhu	r2,-8(fp)
   16424:	e0fffe83 	ldbu	r3,-6(fp)
   16428:	e13ffec4 	addi	r4,fp,-5
   1642c:	200f883a 	mov	r7,r4
   16430:	180d883a 	mov	r6,r3
   16434:	100b883a 	mov	r5,r2
   16438:	e13ffd17 	ldw	r4,-12(fp)
   1643c:	00115c40 	call	115c4 <OSFlagPost>
   16440:	d0a73517 	ldw	r2,-25388(gp)
    }
  }

  return alt_ticks_per_second();
}
   16444:	e037883a 	mov	sp,fp
   16448:	dfc00117 	ldw	ra,4(sp)
   1644c:	df000017 	ldw	fp,0(sp)
   16450:	dec00204 	addi	sp,sp,8
   16454:	f800283a 	ret

00016458 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
   16458:	defffd04 	addi	sp,sp,-12
   1645c:	df000215 	stw	fp,8(sp)
   16460:	df000204 	addi	fp,sp,8
   16464:	e13ffe15 	stw	r4,-8(fp)
   16468:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   1646c:	00000506 	br	16484 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
   16470:	e0bfff17 	ldw	r2,-4(fp)
   16474:	1090000c 	andi	r2,r2,16384
   16478:	10000226 	beq	r2,zero,16484 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
   1647c:	00bffd44 	movi	r2,-11
   16480:	00000b06 	br	164b0 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   16484:	e0bffe17 	ldw	r2,-8(fp)
   16488:	10c01017 	ldw	r3,64(r2)
   1648c:	e0bffe17 	ldw	r2,-8(fp)
   16490:	10800f17 	ldw	r2,60(r2)
   16494:	18800526 	beq	r3,r2,164ac <altera_avalon_jtag_uart_close+0x54>
   16498:	e0bffe17 	ldw	r2,-8(fp)
   1649c:	10c00917 	ldw	r3,36(r2)
   164a0:	e0bffe17 	ldw	r2,-8(fp)
   164a4:	10800117 	ldw	r2,4(r2)
   164a8:	18bff136 	bltu	r3,r2,16470 <__alt_data_end+0xfffe6470>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
   164ac:	0005883a 	mov	r2,zero
}
   164b0:	e037883a 	mov	sp,fp
   164b4:	df000017 	ldw	fp,0(sp)
   164b8:	dec00104 	addi	sp,sp,4
   164bc:	f800283a 	ret

000164c0 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
   164c0:	defffa04 	addi	sp,sp,-24
   164c4:	df000515 	stw	fp,20(sp)
   164c8:	df000504 	addi	fp,sp,20
   164cc:	e13ffd15 	stw	r4,-12(fp)
   164d0:	e17ffe15 	stw	r5,-8(fp)
   164d4:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
   164d8:	00bff9c4 	movi	r2,-25
   164dc:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
   164e0:	e0bffe17 	ldw	r2,-8(fp)
   164e4:	10da8060 	cmpeqi	r3,r2,27137
   164e8:	1800031e 	bne	r3,zero,164f8 <altera_avalon_jtag_uart_ioctl+0x38>
   164ec:	109a80a0 	cmpeqi	r2,r2,27138
   164f0:	1000181e 	bne	r2,zero,16554 <altera_avalon_jtag_uart_ioctl+0x94>
      rc = 0;
    }
    break;

  default:
    break;
   164f4:	00002906 	br	1659c <altera_avalon_jtag_uart_ioctl+0xdc>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
   164f8:	e0bffd17 	ldw	r2,-12(fp)
   164fc:	10c00117 	ldw	r3,4(r2)
   16500:	00a00034 	movhi	r2,32768
   16504:	10bfffc4 	addi	r2,r2,-1
   16508:	18802126 	beq	r3,r2,16590 <altera_avalon_jtag_uart_ioctl+0xd0>
    {
      int timeout = *((int *)arg);
   1650c:	e0bfff17 	ldw	r2,-4(fp)
   16510:	10800017 	ldw	r2,0(r2)
   16514:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
   16518:	e0bffc17 	ldw	r2,-16(fp)
   1651c:	10800090 	cmplti	r2,r2,2
   16520:	1000061e 	bne	r2,zero,1653c <altera_avalon_jtag_uart_ioctl+0x7c>
   16524:	e0fffc17 	ldw	r3,-16(fp)
   16528:	00a00034 	movhi	r2,32768
   1652c:	10bfffc4 	addi	r2,r2,-1
   16530:	18800226 	beq	r3,r2,1653c <altera_avalon_jtag_uart_ioctl+0x7c>
   16534:	e0bffc17 	ldw	r2,-16(fp)
   16538:	00000206 	br	16544 <altera_avalon_jtag_uart_ioctl+0x84>
   1653c:	00a00034 	movhi	r2,32768
   16540:	10bfff84 	addi	r2,r2,-2
   16544:	e0fffd17 	ldw	r3,-12(fp)
   16548:	18800115 	stw	r2,4(r3)
      rc = 0;
   1654c:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   16550:	00000f06 	br	16590 <altera_avalon_jtag_uart_ioctl+0xd0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
   16554:	e0bffd17 	ldw	r2,-12(fp)
   16558:	10c00117 	ldw	r3,4(r2)
   1655c:	00a00034 	movhi	r2,32768
   16560:	10bfffc4 	addi	r2,r2,-1
   16564:	18800c26 	beq	r3,r2,16598 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
   16568:	e0bffd17 	ldw	r2,-12(fp)
   1656c:	10c00917 	ldw	r3,36(r2)
   16570:	e0bffd17 	ldw	r2,-12(fp)
   16574:	10800117 	ldw	r2,4(r2)
   16578:	1885803a 	cmpltu	r2,r3,r2
   1657c:	10c03fcc 	andi	r3,r2,255
   16580:	e0bfff17 	ldw	r2,-4(fp)
   16584:	10c00015 	stw	r3,0(r2)
      rc = 0;
   16588:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   1658c:	00000206 	br	16598 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
   16590:	0001883a 	nop
   16594:	00000106 	br	1659c <altera_avalon_jtag_uart_ioctl+0xdc>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
   16598:	0001883a 	nop

  default:
    break;
  }

  return rc;
   1659c:	e0bffb17 	ldw	r2,-20(fp)
}
   165a0:	e037883a 	mov	sp,fp
   165a4:	df000017 	ldw	fp,0(sp)
   165a8:	dec00104 	addi	sp,sp,4
   165ac:	f800283a 	ret

000165b0 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
   165b0:	deffed04 	addi	sp,sp,-76
   165b4:	dfc01215 	stw	ra,72(sp)
   165b8:	df001115 	stw	fp,68(sp)
   165bc:	df001104 	addi	fp,sp,68
   165c0:	e13ffc15 	stw	r4,-16(fp)
   165c4:	e17ffd15 	stw	r5,-12(fp)
   165c8:	e1bffe15 	stw	r6,-8(fp)
   165cc:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
   165d0:	e0bffd17 	ldw	r2,-12(fp)
   165d4:	e0bff015 	stw	r2,-64(fp)

  /*
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);
   165d8:	e0bffc17 	ldw	r2,-16(fp)
   165dc:	10800a17 	ldw	r2,40(r2)
   165e0:	e0bff815 	stw	r2,-32(fp)
   165e4:	e03ff90d 	sth	zero,-28(fp)

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sem_pend (OS_EVENT* sem, 
                  INT16U timeout)
{
  INT8U err;
  OSSemPend (sem, timeout, &err);
   165e8:	e0bff90b 	ldhu	r2,-28(fp)
   165ec:	e0fffb04 	addi	r3,fp,-20
   165f0:	180d883a 	mov	r6,r3
   165f4:	100b883a 	mov	r5,r2
   165f8:	e13ff817 	ldw	r4,-32(fp)
   165fc:	0013a200 	call	13a20 <OSSemPend>

  while (space > 0)
   16600:	00006106 	br	16788 <altera_avalon_jtag_uart_read+0x1d8>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
   16604:	e0bffc17 	ldw	r2,-16(fp)
   16608:	10800d17 	ldw	r2,52(r2)
   1660c:	e0bff315 	stw	r2,-52(fp)
      out = sp->rx_out;
   16610:	e0bffc17 	ldw	r2,-16(fp)
   16614:	10800e17 	ldw	r2,56(r2)
   16618:	e0bff415 	stw	r2,-48(fp)

      if (in >= out)
   1661c:	e0fff317 	ldw	r3,-52(fp)
   16620:	e0bff417 	ldw	r2,-48(fp)
   16624:	18800536 	bltu	r3,r2,1663c <altera_avalon_jtag_uart_read+0x8c>
        n = in - out;
   16628:	e0fff317 	ldw	r3,-52(fp)
   1662c:	e0bff417 	ldw	r2,-48(fp)
   16630:	1885c83a 	sub	r2,r3,r2
   16634:	e0bff115 	stw	r2,-60(fp)
   16638:	00000406 	br	1664c <altera_avalon_jtag_uart_read+0x9c>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
   1663c:	00c20004 	movi	r3,2048
   16640:	e0bff417 	ldw	r2,-48(fp)
   16644:	1885c83a 	sub	r2,r3,r2
   16648:	e0bff115 	stw	r2,-60(fp)

      if (n == 0)
   1664c:	e0bff117 	ldw	r2,-60(fp)
   16650:	10001e26 	beq	r2,zero,166cc <altera_avalon_jtag_uart_read+0x11c>
        break; /* No more data available */

      if (n > space)
   16654:	e0fffe17 	ldw	r3,-8(fp)
   16658:	e0bff117 	ldw	r2,-60(fp)
   1665c:	1880022e 	bgeu	r3,r2,16668 <altera_avalon_jtag_uart_read+0xb8>
        n = space;
   16660:	e0bffe17 	ldw	r2,-8(fp)
   16664:	e0bff115 	stw	r2,-60(fp)

      memcpy(ptr, sp->rx_buf + out, n);
   16668:	e0bffc17 	ldw	r2,-16(fp)
   1666c:	10c01104 	addi	r3,r2,68
   16670:	e0bff417 	ldw	r2,-48(fp)
   16674:	1885883a 	add	r2,r3,r2
   16678:	e1bff117 	ldw	r6,-60(fp)
   1667c:	100b883a 	mov	r5,r2
   16680:	e13ff017 	ldw	r4,-64(fp)
   16684:	0005f080 	call	5f08 <memcpy>
      ptr   += n;
   16688:	e0fff017 	ldw	r3,-64(fp)
   1668c:	e0bff117 	ldw	r2,-60(fp)
   16690:	1885883a 	add	r2,r3,r2
   16694:	e0bff015 	stw	r2,-64(fp)
      space -= n;
   16698:	e0fffe17 	ldw	r3,-8(fp)
   1669c:	e0bff117 	ldw	r2,-60(fp)
   166a0:	1885c83a 	sub	r2,r3,r2
   166a4:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   166a8:	e0fff417 	ldw	r3,-48(fp)
   166ac:	e0bff117 	ldw	r2,-60(fp)
   166b0:	1885883a 	add	r2,r3,r2
   166b4:	10c1ffcc 	andi	r3,r2,2047
   166b8:	e0bffc17 	ldw	r2,-16(fp)
   166bc:	10c00e15 	stw	r3,56(r2)
    }
    while (space > 0);
   166c0:	e0bffe17 	ldw	r2,-8(fp)
   166c4:	00bfcf16 	blt	zero,r2,16604 <__alt_data_end+0xfffe6604>
   166c8:	00000106 	br	166d0 <altera_avalon_jtag_uart_read+0x120>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
   166cc:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
   166d0:	e0fff017 	ldw	r3,-64(fp)
   166d4:	e0bffd17 	ldw	r2,-12(fp)
   166d8:	18802e1e 	bne	r3,r2,16794 <altera_avalon_jtag_uart_read+0x1e4>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
   166dc:	e0bfff17 	ldw	r2,-4(fp)
   166e0:	1090000c 	andi	r2,r2,16384
   166e4:	10002d1e 	bne	r2,zero,1679c <altera_avalon_jtag_uart_read+0x1ec>
      break;

#ifdef __ucosii__
    /* OS Present: Pend on a flag if the OS is running, otherwise spin */
    if(OSRunning == OS_TRUE) {
   166e8:	d0a72143 	ldbu	r2,-25467(gp)
   166ec:	10803fcc 	andi	r2,r2,255
   166f0:	10800058 	cmpnei	r2,r2,1
   166f4:	1000161e 	bne	r2,zero,16750 <altera_avalon_jtag_uart_read+0x1a0>
       * When running in a multi-threaded mode, we pend on the read event
       * flag set and timeout event flag set in the isr. This avoids wasting CPU
       * cycles waiting in this thread, when we could be doing something more
       * profitable elsewhere.
       */
      ALT_FLAG_PEND (sp->events,
   166f8:	e0bffc17 	ldw	r2,-16(fp)
   166fc:	10800c17 	ldw	r2,48(r2)
   16700:	e0bff215 	stw	r2,-56(fp)
   16704:	00800144 	movi	r2,5
   16708:	e0bff98d 	sth	r2,-26(fp)
   1670c:	00bfe0c4 	movi	r2,-125
   16710:	e0bffa05 	stb	r2,-24(fp)
   16714:	e03ffa8d 	sth	zero,-22(fp)
                   OS_FLAGS flags, 
                   INT8U wait_type, 
                   INT16U timeout)
{
  INT8U err;
  if (OSRunning)
   16718:	d0a72143 	ldbu	r2,-25467(gp)
   1671c:	10803fcc 	andi	r2,r2,255
   16720:	10001526 	beq	r2,zero,16778 <altera_avalon_jtag_uart_read+0x1c8>
  {
    OSFlagPend (group, flags, wait_type, timeout, &err);
   16724:	e0fff98b 	ldhu	r3,-26(fp)
   16728:	e13ffa03 	ldbu	r4,-24(fp)
   1672c:	e17ffa8b 	ldhu	r5,-22(fp)
   16730:	e0bffb44 	addi	r2,fp,-19
   16734:	d8800015 	stw	r2,0(sp)
   16738:	280f883a 	mov	r7,r5
   1673c:	200d883a 	mov	r6,r4
   16740:	180b883a 	mov	r5,r3
   16744:	e13ff217 	ldw	r4,-56(fp)
   16748:	0010fac0 	call	10fac <OSFlagPend>
   1674c:	00000a06 	br	16778 <altera_avalon_jtag_uart_read+0x1c8>
                     OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                     0);
    }
    else {
      /* Spin until more data arrives or until host disconnects */
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
   16750:	0001883a 	nop
   16754:	e0bffc17 	ldw	r2,-16(fp)
   16758:	10c00d17 	ldw	r3,52(r2)
   1675c:	e0bff317 	ldw	r2,-52(fp)
   16760:	1880051e 	bne	r3,r2,16778 <altera_avalon_jtag_uart_read+0x1c8>
   16764:	e0bffc17 	ldw	r2,-16(fp)
   16768:	10c00917 	ldw	r3,36(r2)
   1676c:	e0bffc17 	ldw	r2,-16(fp)
   16770:	10800117 	ldw	r2,4(r2)
   16774:	18bff736 	bltu	r3,r2,16754 <__alt_data_end+0xfffe6754>
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
   16778:	e0bffc17 	ldw	r2,-16(fp)
   1677c:	10c00d17 	ldw	r3,52(r2)
   16780:	e0bff317 	ldw	r2,-52(fp)
   16784:	18800726 	beq	r3,r2,167a4 <altera_avalon_jtag_uart_read+0x1f4>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   16788:	e0bffe17 	ldw	r2,-8(fp)
   1678c:	00bf9d16 	blt	zero,r2,16604 <__alt_data_end+0xfffe6604>
   16790:	00000506 	br	167a8 <altera_avalon_jtag_uart_read+0x1f8>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
   16794:	0001883a 	nop
   16798:	00000306 	br	167a8 <altera_avalon_jtag_uart_read+0x1f8>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
   1679c:	0001883a 	nop
   167a0:	00000106 	br	167a8 <altera_avalon_jtag_uart_read+0x1f8>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
   167a4:	0001883a 	nop
  /*
   * Now that access to the circular buffer is complete, release the read
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);
   167a8:	e0bffc17 	ldw	r2,-16(fp)
   167ac:	10800a17 	ldw	r2,40(r2)
   167b0:	1009883a 	mov	r4,r2
   167b4:	0013d980 	call	13d98 <OSSemPost>

  if (ptr != buffer)
   167b8:	e0fff017 	ldw	r3,-64(fp)
   167bc:	e0bffd17 	ldw	r2,-12(fp)
   167c0:	18801826 	beq	r3,r2,16824 <altera_avalon_jtag_uart_read+0x274>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   167c4:	0005303a 	rdctl	r2,status
   167c8:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   167cc:	e0fff717 	ldw	r3,-36(fp)
   167d0:	00bfff84 	movi	r2,-2
   167d4:	1884703a 	and	r2,r3,r2
   167d8:	1001703a 	wrctl	status,r2
  
  return context;
   167dc:	e0bff717 	ldw	r2,-36(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
   167e0:	e0bff615 	stw	r2,-40(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   167e4:	e0bffc17 	ldw	r2,-16(fp)
   167e8:	10800817 	ldw	r2,32(r2)
   167ec:	10c00054 	ori	r3,r2,1
   167f0:	e0bffc17 	ldw	r2,-16(fp)
   167f4:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   167f8:	e0bffc17 	ldw	r2,-16(fp)
   167fc:	10800017 	ldw	r2,0(r2)
   16800:	10800104 	addi	r2,r2,4
   16804:	1007883a 	mov	r3,r2
   16808:	e0bffc17 	ldw	r2,-16(fp)
   1680c:	10800817 	ldw	r2,32(r2)
   16810:	18800035 	stwio	r2,0(r3)
   16814:	e0bff617 	ldw	r2,-40(fp)
   16818:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1681c:	e0bff517 	ldw	r2,-44(fp)
   16820:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
   16824:	e0fff017 	ldw	r3,-64(fp)
   16828:	e0bffd17 	ldw	r2,-12(fp)
   1682c:	18800426 	beq	r3,r2,16840 <altera_avalon_jtag_uart_read+0x290>
    return ptr - buffer;
   16830:	e0fff017 	ldw	r3,-64(fp)
   16834:	e0bffd17 	ldw	r2,-12(fp)
   16838:	1885c83a 	sub	r2,r3,r2
   1683c:	00000606 	br	16858 <altera_avalon_jtag_uart_read+0x2a8>
  else if (flags & O_NONBLOCK)
   16840:	e0bfff17 	ldw	r2,-4(fp)
   16844:	1090000c 	andi	r2,r2,16384
   16848:	10000226 	beq	r2,zero,16854 <altera_avalon_jtag_uart_read+0x2a4>
    return -EWOULDBLOCK;
   1684c:	00bffd44 	movi	r2,-11
   16850:	00000106 	br	16858 <altera_avalon_jtag_uart_read+0x2a8>
  else
    return -EIO;
   16854:	00bffec4 	movi	r2,-5
}
   16858:	e037883a 	mov	sp,fp
   1685c:	dfc00117 	ldw	ra,4(sp)
   16860:	df000017 	ldw	fp,0(sp)
   16864:	dec00204 	addi	sp,sp,8
   16868:	f800283a 	ret

0001686c <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
   1686c:	deffed04 	addi	sp,sp,-76
   16870:	dfc01215 	stw	ra,72(sp)
   16874:	df001115 	stw	fp,68(sp)
   16878:	df001104 	addi	fp,sp,68
   1687c:	e13ffc15 	stw	r4,-16(fp)
   16880:	e17ffd15 	stw	r5,-12(fp)
   16884:	e1bffe15 	stw	r6,-8(fp)
   16888:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
   1688c:	e03ff015 	stw	zero,-64(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
   16890:	e0bffd17 	ldw	r2,-12(fp)
   16894:	e0bff215 	stw	r2,-56(fp)

  /*
   * When running in a multi threaded environment, obtain the "write_lock"
   * semaphore. This ensures that writing to the device is thread-safe.
   */
  ALT_SEM_PEND (sp->write_lock, 0);
   16898:	e0bffc17 	ldw	r2,-16(fp)
   1689c:	10800b17 	ldw	r2,44(r2)
   168a0:	e0bff815 	stw	r2,-32(fp)
   168a4:	e03ff90d 	sth	zero,-28(fp)
   168a8:	e0bff90b 	ldhu	r2,-28(fp)
   168ac:	e0fffb44 	addi	r3,fp,-19
   168b0:	180d883a 	mov	r6,r3
   168b4:	100b883a 	mov	r5,r2
   168b8:	e13ff817 	ldw	r4,-32(fp)
   168bc:	0013a200 	call	13a20 <OSSemPend>

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   168c0:	00003706 	br	169a0 <altera_avalon_jtag_uart_write+0x134>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
   168c4:	e0bffc17 	ldw	r2,-16(fp)
   168c8:	10800f17 	ldw	r2,60(r2)
   168cc:	e0bff415 	stw	r2,-48(fp)
      out = sp->tx_out;
   168d0:	e0bffc17 	ldw	r2,-16(fp)
   168d4:	10801017 	ldw	r2,64(r2)
   168d8:	e0bff015 	stw	r2,-64(fp)

      if (in < out)
   168dc:	e0fff417 	ldw	r3,-48(fp)
   168e0:	e0bff017 	ldw	r2,-64(fp)
   168e4:	1880062e 	bgeu	r3,r2,16900 <altera_avalon_jtag_uart_write+0x94>
        n = out - 1 - in;
   168e8:	e0fff017 	ldw	r3,-64(fp)
   168ec:	e0bff417 	ldw	r2,-48(fp)
   168f0:	1885c83a 	sub	r2,r3,r2
   168f4:	10bfffc4 	addi	r2,r2,-1
   168f8:	e0bff115 	stw	r2,-60(fp)
   168fc:	00000b06 	br	1692c <altera_avalon_jtag_uart_write+0xc0>
      else if (out > 0)
   16900:	e0bff017 	ldw	r2,-64(fp)
   16904:	10000526 	beq	r2,zero,1691c <altera_avalon_jtag_uart_write+0xb0>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
   16908:	00c20004 	movi	r3,2048
   1690c:	e0bff417 	ldw	r2,-48(fp)
   16910:	1885c83a 	sub	r2,r3,r2
   16914:	e0bff115 	stw	r2,-60(fp)
   16918:	00000406 	br	1692c <altera_avalon_jtag_uart_write+0xc0>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
   1691c:	00c1ffc4 	movi	r3,2047
   16920:	e0bff417 	ldw	r2,-48(fp)
   16924:	1885c83a 	sub	r2,r3,r2
   16928:	e0bff115 	stw	r2,-60(fp)

      if (n == 0)
   1692c:	e0bff117 	ldw	r2,-60(fp)
   16930:	10001e26 	beq	r2,zero,169ac <altera_avalon_jtag_uart_write+0x140>
        break;

      if (n > count)
   16934:	e0fffe17 	ldw	r3,-8(fp)
   16938:	e0bff117 	ldw	r2,-60(fp)
   1693c:	1880022e 	bgeu	r3,r2,16948 <altera_avalon_jtag_uart_write+0xdc>
        n = count;
   16940:	e0bffe17 	ldw	r2,-8(fp)
   16944:	e0bff115 	stw	r2,-60(fp)

      memcpy(sp->tx_buf + in, ptr, n);
   16948:	e0bffc17 	ldw	r2,-16(fp)
   1694c:	10c21104 	addi	r3,r2,2116
   16950:	e0bff417 	ldw	r2,-48(fp)
   16954:	1885883a 	add	r2,r3,r2
   16958:	e1bff117 	ldw	r6,-60(fp)
   1695c:	e17ffd17 	ldw	r5,-12(fp)
   16960:	1009883a 	mov	r4,r2
   16964:	0005f080 	call	5f08 <memcpy>
      ptr   += n;
   16968:	e0fffd17 	ldw	r3,-12(fp)
   1696c:	e0bff117 	ldw	r2,-60(fp)
   16970:	1885883a 	add	r2,r3,r2
   16974:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
   16978:	e0fffe17 	ldw	r3,-8(fp)
   1697c:	e0bff117 	ldw	r2,-60(fp)
   16980:	1885c83a 	sub	r2,r3,r2
   16984:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   16988:	e0fff417 	ldw	r3,-48(fp)
   1698c:	e0bff117 	ldw	r2,-60(fp)
   16990:	1885883a 	add	r2,r3,r2
   16994:	10c1ffcc 	andi	r3,r2,2047
   16998:	e0bffc17 	ldw	r2,-16(fp)
   1699c:	10c00f15 	stw	r3,60(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   169a0:	e0bffe17 	ldw	r2,-8(fp)
   169a4:	00bfc716 	blt	zero,r2,168c4 <__alt_data_end+0xfffe68c4>
   169a8:	00000106 	br	169b0 <altera_avalon_jtag_uart_write+0x144>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
   169ac:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   169b0:	0005303a 	rdctl	r2,status
   169b4:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   169b8:	e0fff717 	ldw	r3,-36(fp)
   169bc:	00bfff84 	movi	r2,-2
   169c0:	1884703a 	and	r2,r3,r2
   169c4:	1001703a 	wrctl	status,r2
  
  return context;
   169c8:	e0bff717 	ldw	r2,-36(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
   169cc:	e0bff615 	stw	r2,-40(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   169d0:	e0bffc17 	ldw	r2,-16(fp)
   169d4:	10800817 	ldw	r2,32(r2)
   169d8:	10c00094 	ori	r3,r2,2
   169dc:	e0bffc17 	ldw	r2,-16(fp)
   169e0:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   169e4:	e0bffc17 	ldw	r2,-16(fp)
   169e8:	10800017 	ldw	r2,0(r2)
   169ec:	10800104 	addi	r2,r2,4
   169f0:	1007883a 	mov	r3,r2
   169f4:	e0bffc17 	ldw	r2,-16(fp)
   169f8:	10800817 	ldw	r2,32(r2)
   169fc:	18800035 	stwio	r2,0(r3)
   16a00:	e0bff617 	ldw	r2,-40(fp)
   16a04:	e0bff315 	stw	r2,-52(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   16a08:	e0bff317 	ldw	r2,-52(fp)
   16a0c:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
   16a10:	e0bffe17 	ldw	r2,-8(fp)
   16a14:	00802a0e 	bge	zero,r2,16ac0 <altera_avalon_jtag_uart_write+0x254>
    {
      if (flags & O_NONBLOCK)
   16a18:	e0bfff17 	ldw	r2,-4(fp)
   16a1c:	1090000c 	andi	r2,r2,16384
   16a20:	10002a1e 	bne	r2,zero,16acc <altera_avalon_jtag_uart_write+0x260>
        break;

#ifdef __ucosii__
      /* OS Present: Pend on a flag if the OS is running, otherwise spin */
      if(OSRunning == OS_TRUE) {
   16a24:	d0a72143 	ldbu	r2,-25467(gp)
   16a28:	10803fcc 	andi	r2,r2,255
   16a2c:	10800058 	cmpnei	r2,r2,1
   16a30:	1000161e 	bne	r2,zero,16a8c <altera_avalon_jtag_uart_write+0x220>
         * more profitable elsewhere.
         */
#ifdef ALTERA_AVALON_JTAG_UART_IGNORE_FIFO_FULL_ERROR
        if(!sp->host_inactive)
#endif
        ALT_FLAG_PEND (sp->events,
   16a34:	e0bffc17 	ldw	r2,-16(fp)
   16a38:	10800c17 	ldw	r2,48(r2)
   16a3c:	e0bff515 	stw	r2,-44(fp)
   16a40:	00800184 	movi	r2,6
   16a44:	e0bff98d 	sth	r2,-26(fp)
   16a48:	00bfe0c4 	movi	r2,-125
   16a4c:	e0bffa05 	stb	r2,-24(fp)
   16a50:	e03ffa8d 	sth	zero,-22(fp)
                   OS_FLAGS flags, 
                   INT8U wait_type, 
                   INT16U timeout)
{
  INT8U err;
  if (OSRunning)
   16a54:	d0a72143 	ldbu	r2,-25467(gp)
   16a58:	10803fcc 	andi	r2,r2,255
   16a5c:	10001526 	beq	r2,zero,16ab4 <altera_avalon_jtag_uart_write+0x248>
  {
    OSFlagPend (group, flags, wait_type, timeout, &err);
   16a60:	e0fff98b 	ldhu	r3,-26(fp)
   16a64:	e13ffa03 	ldbu	r4,-24(fp)
   16a68:	e17ffa8b 	ldhu	r5,-22(fp)
   16a6c:	e0bffb04 	addi	r2,fp,-20
   16a70:	d8800015 	stw	r2,0(sp)
   16a74:	280f883a 	mov	r7,r5
   16a78:	200d883a 	mov	r6,r4
   16a7c:	180b883a 	mov	r5,r3
   16a80:	e13ff517 	ldw	r4,-44(fp)
   16a84:	0010fac0 	call	10fac <OSFlagPend>
   16a88:	00000a06 	br	16ab4 <altera_avalon_jtag_uart_write+0x248>
        /*
         * OS not running: Wait for data to be removed from buffer.
         * Once the interrupt routine has removed some data then we
         * will be able to insert some more.
         */
        while (out == sp->tx_out && sp->host_inactive < sp->timeout)
   16a8c:	0001883a 	nop
   16a90:	e0bffc17 	ldw	r2,-16(fp)
   16a94:	10c01017 	ldw	r3,64(r2)
   16a98:	e0bff017 	ldw	r2,-64(fp)
   16a9c:	1880051e 	bne	r3,r2,16ab4 <altera_avalon_jtag_uart_write+0x248>
   16aa0:	e0bffc17 	ldw	r2,-16(fp)
   16aa4:	10c00917 	ldw	r3,36(r2)
   16aa8:	e0bffc17 	ldw	r2,-16(fp)
   16aac:	10800117 	ldw	r2,4(r2)
   16ab0:	18bff736 	bltu	r3,r2,16a90 <__alt_data_end+0xfffe6a90>
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
   16ab4:	e0bffc17 	ldw	r2,-16(fp)
   16ab8:	10800917 	ldw	r2,36(r2)
   16abc:	1000051e 	bne	r2,zero,16ad4 <altera_avalon_jtag_uart_write+0x268>
         break;
    }
  }
  while (count > 0);
   16ac0:	e0bffe17 	ldw	r2,-8(fp)
   16ac4:	00bfb616 	blt	zero,r2,169a0 <__alt_data_end+0xfffe69a0>
   16ac8:	00000306 	br	16ad8 <altera_avalon_jtag_uart_write+0x26c>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
   16acc:	0001883a 	nop
   16ad0:	00000106 	br	16ad8 <altera_avalon_jtag_uart_write+0x26c>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
   16ad4:	0001883a 	nop

  /*
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);
   16ad8:	e0bffc17 	ldw	r2,-16(fp)
   16adc:	10800b17 	ldw	r2,44(r2)
   16ae0:	1009883a 	mov	r4,r2
   16ae4:	0013d980 	call	13d98 <OSSemPost>

  if (ptr != start)
   16ae8:	e0fffd17 	ldw	r3,-12(fp)
   16aec:	e0bff217 	ldw	r2,-56(fp)
   16af0:	18800426 	beq	r3,r2,16b04 <altera_avalon_jtag_uart_write+0x298>
    return ptr - start;
   16af4:	e0fffd17 	ldw	r3,-12(fp)
   16af8:	e0bff217 	ldw	r2,-56(fp)
   16afc:	1885c83a 	sub	r2,r3,r2
   16b00:	00000606 	br	16b1c <altera_avalon_jtag_uart_write+0x2b0>
  else if (flags & O_NONBLOCK)
   16b04:	e0bfff17 	ldw	r2,-4(fp)
   16b08:	1090000c 	andi	r2,r2,16384
   16b0c:	10000226 	beq	r2,zero,16b18 <altera_avalon_jtag_uart_write+0x2ac>
    return -EWOULDBLOCK;
   16b10:	00bffd44 	movi	r2,-11
   16b14:	00000106 	br	16b1c <altera_avalon_jtag_uart_write+0x2b0>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
   16b18:	00bffec4 	movi	r2,-5
}
   16b1c:	e037883a 	mov	sp,fp
   16b20:	dfc00117 	ldw	ra,4(sp)
   16b24:	df000017 	ldw	fp,0(sp)
   16b28:	dec00204 	addi	sp,sp,8
   16b2c:	f800283a 	ret

00016b30 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
   16b30:	defffa04 	addi	sp,sp,-24
   16b34:	dfc00515 	stw	ra,20(sp)
   16b38:	df000415 	stw	fp,16(sp)
   16b3c:	df000404 	addi	fp,sp,16
   16b40:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
   16b44:	0007883a 	mov	r3,zero
   16b48:	e0bfff17 	ldw	r2,-4(fp)
   16b4c:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
   16b50:	e0bfff17 	ldw	r2,-4(fp)
   16b54:	10800104 	addi	r2,r2,4
   16b58:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   16b5c:	0005303a 	rdctl	r2,status
   16b60:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   16b64:	e0fffd17 	ldw	r3,-12(fp)
   16b68:	00bfff84 	movi	r2,-2
   16b6c:	1884703a 	and	r2,r3,r2
   16b70:	1001703a 	wrctl	status,r2
  
  return context;
   16b74:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
   16b78:	e0bffc15 	stw	r2,-16(fp)
  alt_tick ();
   16b7c:	00173b00 	call	173b0 <alt_tick>
   16b80:	e0bffc17 	ldw	r2,-16(fp)
   16b84:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   16b88:	e0bffe17 	ldw	r2,-8(fp)
   16b8c:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
   16b90:	0001883a 	nop
   16b94:	e037883a 	mov	sp,fp
   16b98:	dfc00117 	ldw	ra,4(sp)
   16b9c:	df000017 	ldw	fp,0(sp)
   16ba0:	dec00204 	addi	sp,sp,8
   16ba4:	f800283a 	ret

00016ba8 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
   16ba8:	defff804 	addi	sp,sp,-32
   16bac:	dfc00715 	stw	ra,28(sp)
   16bb0:	df000615 	stw	fp,24(sp)
   16bb4:	df000604 	addi	fp,sp,24
   16bb8:	e13ffc15 	stw	r4,-16(fp)
   16bbc:	e17ffd15 	stw	r5,-12(fp)
   16bc0:	e1bffe15 	stw	r6,-8(fp)
   16bc4:	e1ffff15 	stw	r7,-4(fp)
   16bc8:	e0bfff17 	ldw	r2,-4(fp)
   16bcc:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
   16bd0:	d0a73517 	ldw	r2,-25388(gp)
   16bd4:	1000021e 	bne	r2,zero,16be0 <alt_avalon_timer_sc_init+0x38>
  {
    _alt_tick_rate = nticks;
   16bd8:	e0bffb17 	ldw	r2,-20(fp)
   16bdc:	d0a73515 	stw	r2,-25388(gp)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
   16be0:	e0bffc17 	ldw	r2,-16(fp)
   16be4:	10800104 	addi	r2,r2,4
   16be8:	00c001c4 	movi	r3,7
   16bec:	10c00035 	stwio	r3,0(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
   16bf0:	d8000015 	stw	zero,0(sp)
   16bf4:	e1fffc17 	ldw	r7,-16(fp)
   16bf8:	01800074 	movhi	r6,1
   16bfc:	319acc04 	addi	r6,r6,27440
   16c00:	e17ffe17 	ldw	r5,-8(fp)
   16c04:	e13ffd17 	ldw	r4,-12(fp)
   16c08:	000d8340 	call	d834 <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
   16c0c:	0001883a 	nop
   16c10:	e037883a 	mov	sp,fp
   16c14:	dfc00117 	ldw	ra,4(sp)
   16c18:	df000017 	ldw	fp,0(sp)
   16c1c:	dec00204 	addi	sp,sp,8
   16c20:	f800283a 	ret

00016c24 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
   16c24:	defff504 	addi	sp,sp,-44
   16c28:	df000a15 	stw	fp,40(sp)
   16c2c:	df000a04 	addi	fp,sp,40
   16c30:	e13ffc15 	stw	r4,-16(fp)
   16c34:	e17ffd15 	stw	r5,-12(fp)
   16c38:	e1bffe15 	stw	r6,-8(fp)
   16c3c:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
   16c40:	e03ff615 	stw	zero,-40(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   16c44:	d0a73517 	ldw	r2,-25388(gp)
  
  if (alt_ticks_per_second ())
   16c48:	10003c26 	beq	r2,zero,16d3c <alt_alarm_start+0x118>
  {
    if (alarm)
   16c4c:	e0bffc17 	ldw	r2,-16(fp)
   16c50:	10003826 	beq	r2,zero,16d34 <alt_alarm_start+0x110>
    {
      alarm->callback = callback;
   16c54:	e0bffc17 	ldw	r2,-16(fp)
   16c58:	e0fffe17 	ldw	r3,-8(fp)
   16c5c:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
   16c60:	e0bffc17 	ldw	r2,-16(fp)
   16c64:	e0ffff17 	ldw	r3,-4(fp)
   16c68:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   16c6c:	0005303a 	rdctl	r2,status
   16c70:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   16c74:	e0fff917 	ldw	r3,-28(fp)
   16c78:	00bfff84 	movi	r2,-2
   16c7c:	1884703a 	and	r2,r3,r2
   16c80:	1001703a 	wrctl	status,r2
  
  return context;
   16c84:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
   16c88:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
   16c8c:	d0a73617 	ldw	r2,-25384(gp)
      
      current_nticks = alt_nticks();
   16c90:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
   16c94:	e0fffd17 	ldw	r3,-12(fp)
   16c98:	e0bff617 	ldw	r2,-40(fp)
   16c9c:	1885883a 	add	r2,r3,r2
   16ca0:	10c00044 	addi	r3,r2,1
   16ca4:	e0bffc17 	ldw	r2,-16(fp)
   16ca8:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
   16cac:	e0bffc17 	ldw	r2,-16(fp)
   16cb0:	10c00217 	ldw	r3,8(r2)
   16cb4:	e0bff617 	ldw	r2,-40(fp)
   16cb8:	1880042e 	bgeu	r3,r2,16ccc <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
   16cbc:	e0bffc17 	ldw	r2,-16(fp)
   16cc0:	00c00044 	movi	r3,1
   16cc4:	10c00405 	stb	r3,16(r2)
   16cc8:	00000206 	br	16cd4 <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
   16ccc:	e0bffc17 	ldw	r2,-16(fp)
   16cd0:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
   16cd4:	e0bffc17 	ldw	r2,-16(fp)
   16cd8:	d0e02d04 	addi	r3,gp,-32588
   16cdc:	e0fffa15 	stw	r3,-24(fp)
   16ce0:	e0bffb15 	stw	r2,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   16ce4:	e0bffb17 	ldw	r2,-20(fp)
   16ce8:	e0fffa17 	ldw	r3,-24(fp)
   16cec:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   16cf0:	e0bffa17 	ldw	r2,-24(fp)
   16cf4:	10c00017 	ldw	r3,0(r2)
   16cf8:	e0bffb17 	ldw	r2,-20(fp)
   16cfc:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   16d00:	e0bffa17 	ldw	r2,-24(fp)
   16d04:	10800017 	ldw	r2,0(r2)
   16d08:	e0fffb17 	ldw	r3,-20(fp)
   16d0c:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   16d10:	e0bffa17 	ldw	r2,-24(fp)
   16d14:	e0fffb17 	ldw	r3,-20(fp)
   16d18:	10c00015 	stw	r3,0(r2)
   16d1c:	e0bff817 	ldw	r2,-32(fp)
   16d20:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   16d24:	e0bff717 	ldw	r2,-36(fp)
   16d28:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
   16d2c:	0005883a 	mov	r2,zero
   16d30:	00000306 	br	16d40 <alt_alarm_start+0x11c>
    }
    else
    {
      return -EINVAL;
   16d34:	00bffa84 	movi	r2,-22
   16d38:	00000106 	br	16d40 <alt_alarm_start+0x11c>
    }
  }
  else
  {
    return -ENOTSUP;
   16d3c:	00bfde84 	movi	r2,-134
  }
}
   16d40:	e037883a 	mov	sp,fp
   16d44:	df000017 	ldw	fp,0(sp)
   16d48:	dec00104 	addi	sp,sp,4
   16d4c:	f800283a 	ret

00016d50 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
   16d50:	deffff04 	addi	sp,sp,-4
   16d54:	df000015 	stw	fp,0(sp)
   16d58:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
   16d5c:	0001883a 	nop
   16d60:	e037883a 	mov	sp,fp
   16d64:	df000017 	ldw	fp,0(sp)
   16d68:	dec00104 	addi	sp,sp,4
   16d6c:	f800283a 	ret

00016d70 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   16d70:	defffe04 	addi	sp,sp,-8
   16d74:	dfc00115 	stw	ra,4(sp)
   16d78:	df000015 	stw	fp,0(sp)
   16d7c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   16d80:	d0a00b17 	ldw	r2,-32724(gp)
   16d84:	10000326 	beq	r2,zero,16d94 <alt_get_errno+0x24>
   16d88:	d0a00b17 	ldw	r2,-32724(gp)
   16d8c:	103ee83a 	callr	r2
   16d90:	00000106 	br	16d98 <alt_get_errno+0x28>
   16d94:	d0a71704 	addi	r2,gp,-25508
}
   16d98:	e037883a 	mov	sp,fp
   16d9c:	dfc00117 	ldw	ra,4(sp)
   16da0:	df000017 	ldw	fp,0(sp)
   16da4:	dec00204 	addi	sp,sp,8
   16da8:	f800283a 	ret

00016dac <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
   16dac:	defffa04 	addi	sp,sp,-24
   16db0:	dfc00515 	stw	ra,20(sp)
   16db4:	df000415 	stw	fp,16(sp)
   16db8:	df000404 	addi	fp,sp,16
   16dbc:	e13ffe15 	stw	r4,-8(fp)
   16dc0:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
   16dc4:	e0bffe17 	ldw	r2,-8(fp)
   16dc8:	10000326 	beq	r2,zero,16dd8 <alt_dev_llist_insert+0x2c>
   16dcc:	e0bffe17 	ldw	r2,-8(fp)
   16dd0:	10800217 	ldw	r2,8(r2)
   16dd4:	1000061e 	bne	r2,zero,16df0 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
   16dd8:	0016d700 	call	16d70 <alt_get_errno>
   16ddc:	1007883a 	mov	r3,r2
   16de0:	00800584 	movi	r2,22
   16de4:	18800015 	stw	r2,0(r3)
    return -EINVAL;
   16de8:	00bffa84 	movi	r2,-22
   16dec:	00001306 	br	16e3c <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
   16df0:	e0bffe17 	ldw	r2,-8(fp)
   16df4:	e0ffff17 	ldw	r3,-4(fp)
   16df8:	e0fffc15 	stw	r3,-16(fp)
   16dfc:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   16e00:	e0bffd17 	ldw	r2,-12(fp)
   16e04:	e0fffc17 	ldw	r3,-16(fp)
   16e08:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   16e0c:	e0bffc17 	ldw	r2,-16(fp)
   16e10:	10c00017 	ldw	r3,0(r2)
   16e14:	e0bffd17 	ldw	r2,-12(fp)
   16e18:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   16e1c:	e0bffc17 	ldw	r2,-16(fp)
   16e20:	10800017 	ldw	r2,0(r2)
   16e24:	e0fffd17 	ldw	r3,-12(fp)
   16e28:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   16e2c:	e0bffc17 	ldw	r2,-16(fp)
   16e30:	e0fffd17 	ldw	r3,-12(fp)
   16e34:	10c00015 	stw	r3,0(r2)

  return 0;  
   16e38:	0005883a 	mov	r2,zero
}
   16e3c:	e037883a 	mov	sp,fp
   16e40:	dfc00117 	ldw	ra,4(sp)
   16e44:	df000017 	ldw	fp,0(sp)
   16e48:	dec00204 	addi	sp,sp,8
   16e4c:	f800283a 	ret

00016e50 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
   16e50:	defffd04 	addi	sp,sp,-12
   16e54:	dfc00215 	stw	ra,8(sp)
   16e58:	df000115 	stw	fp,4(sp)
   16e5c:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   16e60:	00800074 	movhi	r2,1
   16e64:	109f9404 	addi	r2,r2,32336
   16e68:	e0bfff15 	stw	r2,-4(fp)
   16e6c:	00000606 	br	16e88 <_do_ctors+0x38>
        (*ctor) (); 
   16e70:	e0bfff17 	ldw	r2,-4(fp)
   16e74:	10800017 	ldw	r2,0(r2)
   16e78:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   16e7c:	e0bfff17 	ldw	r2,-4(fp)
   16e80:	10bfff04 	addi	r2,r2,-4
   16e84:	e0bfff15 	stw	r2,-4(fp)
   16e88:	e0ffff17 	ldw	r3,-4(fp)
   16e8c:	00800074 	movhi	r2,1
   16e90:	109f9504 	addi	r2,r2,32340
   16e94:	18bff62e 	bgeu	r3,r2,16e70 <__alt_data_end+0xfffe6e70>
        (*ctor) (); 
}
   16e98:	0001883a 	nop
   16e9c:	e037883a 	mov	sp,fp
   16ea0:	dfc00117 	ldw	ra,4(sp)
   16ea4:	df000017 	ldw	fp,0(sp)
   16ea8:	dec00204 	addi	sp,sp,8
   16eac:	f800283a 	ret

00016eb0 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
   16eb0:	defffd04 	addi	sp,sp,-12
   16eb4:	dfc00215 	stw	ra,8(sp)
   16eb8:	df000115 	stw	fp,4(sp)
   16ebc:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   16ec0:	00800074 	movhi	r2,1
   16ec4:	109f9404 	addi	r2,r2,32336
   16ec8:	e0bfff15 	stw	r2,-4(fp)
   16ecc:	00000606 	br	16ee8 <_do_dtors+0x38>
        (*dtor) (); 
   16ed0:	e0bfff17 	ldw	r2,-4(fp)
   16ed4:	10800017 	ldw	r2,0(r2)
   16ed8:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   16edc:	e0bfff17 	ldw	r2,-4(fp)
   16ee0:	10bfff04 	addi	r2,r2,-4
   16ee4:	e0bfff15 	stw	r2,-4(fp)
   16ee8:	e0ffff17 	ldw	r3,-4(fp)
   16eec:	00800074 	movhi	r2,1
   16ef0:	109f9504 	addi	r2,r2,32340
   16ef4:	18bff62e 	bgeu	r3,r2,16ed0 <__alt_data_end+0xfffe6ed0>
        (*dtor) (); 
}
   16ef8:	0001883a 	nop
   16efc:	e037883a 	mov	sp,fp
   16f00:	dfc00117 	ldw	ra,4(sp)
   16f04:	df000017 	ldw	fp,0(sp)
   16f08:	dec00204 	addi	sp,sp,8
   16f0c:	f800283a 	ret

00016f10 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
   16f10:	deffff04 	addi	sp,sp,-4
   16f14:	df000015 	stw	fp,0(sp)
   16f18:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
   16f1c:	0001883a 	nop
   16f20:	e037883a 	mov	sp,fp
   16f24:	df000017 	ldw	fp,0(sp)
   16f28:	dec00104 	addi	sp,sp,4
   16f2c:	f800283a 	ret

00016f30 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
   16f30:	defff804 	addi	sp,sp,-32
   16f34:	dfc00715 	stw	ra,28(sp)
   16f38:	df000615 	stw	fp,24(sp)
   16f3c:	dc000515 	stw	r16,20(sp)
   16f40:	df000604 	addi	fp,sp,24
   16f44:	e13ffb15 	stw	r4,-20(fp)
   16f48:	e17ffc15 	stw	r5,-16(fp)
   16f4c:	e1bffd15 	stw	r6,-12(fp)
   16f50:	e1fffe15 	stw	r7,-8(fp)
  int old;

  old = open (name, flags, mode);
   16f54:	e1bffe17 	ldw	r6,-8(fp)
   16f58:	e17ffd17 	ldw	r5,-12(fp)
   16f5c:	e13ffc17 	ldw	r4,-16(fp)
   16f60:	00171b80 	call	171b8 <open>
   16f64:	e0bffa15 	stw	r2,-24(fp)

  if (old >= 0)
   16f68:	e0bffa17 	ldw	r2,-24(fp)
   16f6c:	10002216 	blt	r2,zero,16ff8 <alt_open_fd+0xc8>
  {
    fd->dev      = alt_fd_list[old].dev;
   16f70:	040000b4 	movhi	r16,2
   16f74:	8422d204 	addi	r16,r16,-29880
   16f78:	e0bffa17 	ldw	r2,-24(fp)
   16f7c:	01400304 	movi	r5,12
   16f80:	1009883a 	mov	r4,r2
   16f84:	000ad340 	call	ad34 <__mulsi3>
   16f88:	8085883a 	add	r2,r16,r2
   16f8c:	10c00017 	ldw	r3,0(r2)
   16f90:	e0bffb17 	ldw	r2,-20(fp)
   16f94:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
   16f98:	040000b4 	movhi	r16,2
   16f9c:	8422d204 	addi	r16,r16,-29880
   16fa0:	e0bffa17 	ldw	r2,-24(fp)
   16fa4:	01400304 	movi	r5,12
   16fa8:	1009883a 	mov	r4,r2
   16fac:	000ad340 	call	ad34 <__mulsi3>
   16fb0:	8085883a 	add	r2,r16,r2
   16fb4:	10800104 	addi	r2,r2,4
   16fb8:	10c00017 	ldw	r3,0(r2)
   16fbc:	e0bffb17 	ldw	r2,-20(fp)
   16fc0:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
   16fc4:	040000b4 	movhi	r16,2
   16fc8:	8422d204 	addi	r16,r16,-29880
   16fcc:	e0bffa17 	ldw	r2,-24(fp)
   16fd0:	01400304 	movi	r5,12
   16fd4:	1009883a 	mov	r4,r2
   16fd8:	000ad340 	call	ad34 <__mulsi3>
   16fdc:	8085883a 	add	r2,r16,r2
   16fe0:	10800204 	addi	r2,r2,8
   16fe4:	10c00017 	ldw	r3,0(r2)
   16fe8:	e0bffb17 	ldw	r2,-20(fp)
   16fec:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
   16ff0:	e13ffa17 	ldw	r4,-24(fp)
   16ff4:	000dfbc0 	call	dfbc <alt_release_fd>
  }
} 
   16ff8:	0001883a 	nop
   16ffc:	e6ffff04 	addi	sp,fp,-4
   17000:	dfc00217 	ldw	ra,8(sp)
   17004:	df000117 	ldw	fp,4(sp)
   17008:	dc000017 	ldw	r16,0(sp)
   1700c:	dec00304 	addi	sp,sp,12
   17010:	f800283a 	ret

00017014 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
   17014:	defffb04 	addi	sp,sp,-20
   17018:	dfc00415 	stw	ra,16(sp)
   1701c:	df000315 	stw	fp,12(sp)
   17020:	df000304 	addi	fp,sp,12
   17024:	e13ffd15 	stw	r4,-12(fp)
   17028:	e17ffe15 	stw	r5,-8(fp)
   1702c:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
   17030:	01c07fc4 	movi	r7,511
   17034:	01800044 	movi	r6,1
   17038:	e17ffd17 	ldw	r5,-12(fp)
   1703c:	010000b4 	movhi	r4,2
   17040:	2122d504 	addi	r4,r4,-29868
   17044:	0016f300 	call	16f30 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
   17048:	01c07fc4 	movi	r7,511
   1704c:	000d883a 	mov	r6,zero
   17050:	e17ffe17 	ldw	r5,-8(fp)
   17054:	010000b4 	movhi	r4,2
   17058:	2122d204 	addi	r4,r4,-29880
   1705c:	0016f300 	call	16f30 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
   17060:	01c07fc4 	movi	r7,511
   17064:	01800044 	movi	r6,1
   17068:	e17fff17 	ldw	r5,-4(fp)
   1706c:	010000b4 	movhi	r4,2
   17070:	2122d804 	addi	r4,r4,-29856
   17074:	0016f300 	call	16f30 <alt_open_fd>
}  
   17078:	0001883a 	nop
   1707c:	e037883a 	mov	sp,fp
   17080:	dfc00117 	ldw	ra,4(sp)
   17084:	df000017 	ldw	fp,0(sp)
   17088:	dec00204 	addi	sp,sp,8
   1708c:	f800283a 	ret

00017090 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   17090:	defffe04 	addi	sp,sp,-8
   17094:	dfc00115 	stw	ra,4(sp)
   17098:	df000015 	stw	fp,0(sp)
   1709c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   170a0:	d0a00b17 	ldw	r2,-32724(gp)
   170a4:	10000326 	beq	r2,zero,170b4 <alt_get_errno+0x24>
   170a8:	d0a00b17 	ldw	r2,-32724(gp)
   170ac:	103ee83a 	callr	r2
   170b0:	00000106 	br	170b8 <alt_get_errno+0x28>
   170b4:	d0a71704 	addi	r2,gp,-25508
}
   170b8:	e037883a 	mov	sp,fp
   170bc:	dfc00117 	ldw	ra,4(sp)
   170c0:	df000017 	ldw	fp,0(sp)
   170c4:	dec00204 	addi	sp,sp,8
   170c8:	f800283a 	ret

000170cc <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
   170cc:	defffb04 	addi	sp,sp,-20
   170d0:	dfc00415 	stw	ra,16(sp)
   170d4:	df000315 	stw	fp,12(sp)
   170d8:	dc000215 	stw	r16,8(sp)
   170dc:	df000304 	addi	fp,sp,12
   170e0:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
   170e4:	e0bffe17 	ldw	r2,-8(fp)
   170e8:	10800217 	ldw	r2,8(r2)
   170ec:	10d00034 	orhi	r3,r2,16384
   170f0:	e0bffe17 	ldw	r2,-8(fp)
   170f4:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   170f8:	e03ffd15 	stw	zero,-12(fp)
   170fc:	00002306 	br	1718c <alt_file_locked+0xc0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   17100:	040000b4 	movhi	r16,2
   17104:	8422d204 	addi	r16,r16,-29880
   17108:	e0bffd17 	ldw	r2,-12(fp)
   1710c:	01400304 	movi	r5,12
   17110:	1009883a 	mov	r4,r2
   17114:	000ad340 	call	ad34 <__mulsi3>
   17118:	8085883a 	add	r2,r16,r2
   1711c:	10c00017 	ldw	r3,0(r2)
   17120:	e0bffe17 	ldw	r2,-8(fp)
   17124:	10800017 	ldw	r2,0(r2)
   17128:	1880151e 	bne	r3,r2,17180 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   1712c:	040000b4 	movhi	r16,2
   17130:	8422d204 	addi	r16,r16,-29880
   17134:	e0bffd17 	ldw	r2,-12(fp)
   17138:	01400304 	movi	r5,12
   1713c:	1009883a 	mov	r4,r2
   17140:	000ad340 	call	ad34 <__mulsi3>
   17144:	8085883a 	add	r2,r16,r2
   17148:	10800204 	addi	r2,r2,8
   1714c:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   17150:	10000b0e 	bge	r2,zero,17180 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
   17154:	01400304 	movi	r5,12
   17158:	e13ffd17 	ldw	r4,-12(fp)
   1715c:	000ad340 	call	ad34 <__mulsi3>
   17160:	1007883a 	mov	r3,r2
   17164:	008000b4 	movhi	r2,2
   17168:	10a2d204 	addi	r2,r2,-29880
   1716c:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   17170:	e0bffe17 	ldw	r2,-8(fp)
   17174:	18800226 	beq	r3,r2,17180 <alt_file_locked+0xb4>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
   17178:	00bffcc4 	movi	r2,-13
   1717c:	00000806 	br	171a0 <alt_file_locked+0xd4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   17180:	e0bffd17 	ldw	r2,-12(fp)
   17184:	10800044 	addi	r2,r2,1
   17188:	e0bffd15 	stw	r2,-12(fp)
   1718c:	d0a00a17 	ldw	r2,-32728(gp)
   17190:	1007883a 	mov	r3,r2
   17194:	e0bffd17 	ldw	r2,-12(fp)
   17198:	18bfd92e 	bgeu	r3,r2,17100 <__alt_data_end+0xfffe7100>
    }
  }
  
  /* The device is not locked */
 
  return 0;
   1719c:	0005883a 	mov	r2,zero
}
   171a0:	e6ffff04 	addi	sp,fp,-4
   171a4:	dfc00217 	ldw	ra,8(sp)
   171a8:	df000117 	ldw	fp,4(sp)
   171ac:	dc000017 	ldw	r16,0(sp)
   171b0:	dec00304 	addi	sp,sp,12
   171b4:	f800283a 	ret

000171b8 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
   171b8:	defff604 	addi	sp,sp,-40
   171bc:	dfc00915 	stw	ra,36(sp)
   171c0:	df000815 	stw	fp,32(sp)
   171c4:	df000804 	addi	fp,sp,32
   171c8:	e13ffd15 	stw	r4,-12(fp)
   171cc:	e17ffe15 	stw	r5,-8(fp)
   171d0:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
   171d4:	00bfffc4 	movi	r2,-1
   171d8:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
   171dc:	00bffb44 	movi	r2,-19
   171e0:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
   171e4:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
   171e8:	d1600804 	addi	r5,gp,-32736
   171ec:	e13ffd17 	ldw	r4,-12(fp)
   171f0:	00178340 	call	17834 <alt_find_dev>
   171f4:	e0bff815 	stw	r2,-32(fp)
   171f8:	e0bff817 	ldw	r2,-32(fp)
   171fc:	1000051e 	bne	r2,zero,17214 <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
   17200:	e13ffd17 	ldw	r4,-12(fp)
   17204:	00178c40 	call	178c4 <alt_find_file>
   17208:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
   1720c:	00800044 	movi	r2,1
   17210:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
   17214:	e0bff817 	ldw	r2,-32(fp)
   17218:	10002b26 	beq	r2,zero,172c8 <open+0x110>
  {
    if ((index = alt_get_fd (dev)) < 0)
   1721c:	e13ff817 	ldw	r4,-32(fp)
   17220:	00179cc0 	call	179cc <alt_get_fd>
   17224:	e0bff915 	stw	r2,-28(fp)
   17228:	e0bff917 	ldw	r2,-28(fp)
   1722c:	1000030e 	bge	r2,zero,1723c <open+0x84>
    {
      status = index;
   17230:	e0bff917 	ldw	r2,-28(fp)
   17234:	e0bffa15 	stw	r2,-24(fp)
   17238:	00002506 	br	172d0 <open+0x118>
    }
    else
    {
      fd = &alt_fd_list[index];
   1723c:	01400304 	movi	r5,12
   17240:	e13ff917 	ldw	r4,-28(fp)
   17244:	000ad340 	call	ad34 <__mulsi3>
   17248:	1007883a 	mov	r3,r2
   1724c:	008000b4 	movhi	r2,2
   17250:	10a2d204 	addi	r2,r2,-29880
   17254:	1885883a 	add	r2,r3,r2
   17258:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
   1725c:	e0fffe17 	ldw	r3,-8(fp)
   17260:	00900034 	movhi	r2,16384
   17264:	10bfffc4 	addi	r2,r2,-1
   17268:	1886703a 	and	r3,r3,r2
   1726c:	e0bffc17 	ldw	r2,-16(fp)
   17270:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
   17274:	e0bffb17 	ldw	r2,-20(fp)
   17278:	1000051e 	bne	r2,zero,17290 <open+0xd8>
   1727c:	e13ffc17 	ldw	r4,-16(fp)
   17280:	00170cc0 	call	170cc <alt_file_locked>
   17284:	e0bffa15 	stw	r2,-24(fp)
   17288:	e0bffa17 	ldw	r2,-24(fp)
   1728c:	10001016 	blt	r2,zero,172d0 <open+0x118>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
   17290:	e0bff817 	ldw	r2,-32(fp)
   17294:	10800317 	ldw	r2,12(r2)
   17298:	10000826 	beq	r2,zero,172bc <open+0x104>
   1729c:	e0bff817 	ldw	r2,-32(fp)
   172a0:	10800317 	ldw	r2,12(r2)
   172a4:	e1ffff17 	ldw	r7,-4(fp)
   172a8:	e1bffe17 	ldw	r6,-8(fp)
   172ac:	e17ffd17 	ldw	r5,-12(fp)
   172b0:	e13ffc17 	ldw	r4,-16(fp)
   172b4:	103ee83a 	callr	r2
   172b8:	00000106 	br	172c0 <open+0x108>
   172bc:	0005883a 	mov	r2,zero
   172c0:	e0bffa15 	stw	r2,-24(fp)
   172c4:	00000206 	br	172d0 <open+0x118>
      }
    }
  }
  else
  {
    status = -ENODEV;
   172c8:	00bffb44 	movi	r2,-19
   172cc:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
   172d0:	e0bffa17 	ldw	r2,-24(fp)
   172d4:	1000090e 	bge	r2,zero,172fc <open+0x144>
  {
    alt_release_fd (index);  
   172d8:	e13ff917 	ldw	r4,-28(fp)
   172dc:	000dfbc0 	call	dfbc <alt_release_fd>
    ALT_ERRNO = -status;
   172e0:	00170900 	call	17090 <alt_get_errno>
   172e4:	1007883a 	mov	r3,r2
   172e8:	e0bffa17 	ldw	r2,-24(fp)
   172ec:	0085c83a 	sub	r2,zero,r2
   172f0:	18800015 	stw	r2,0(r3)
    return -1;
   172f4:	00bfffc4 	movi	r2,-1
   172f8:	00000106 	br	17300 <open+0x148>
  }
  
  /* return the reference upon success */

  return index;
   172fc:	e0bff917 	ldw	r2,-28(fp)
}
   17300:	e037883a 	mov	sp,fp
   17304:	dfc00117 	ldw	ra,4(sp)
   17308:	df000017 	ldw	fp,0(sp)
   1730c:	dec00204 	addi	sp,sp,8
   17310:	f800283a 	ret

00017314 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
   17314:	defffa04 	addi	sp,sp,-24
   17318:	df000515 	stw	fp,20(sp)
   1731c:	df000504 	addi	fp,sp,20
   17320:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   17324:	0005303a 	rdctl	r2,status
   17328:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1732c:	e0fffc17 	ldw	r3,-16(fp)
   17330:	00bfff84 	movi	r2,-2
   17334:	1884703a 	and	r2,r3,r2
   17338:	1001703a 	wrctl	status,r2
  
  return context;
   1733c:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
   17340:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
   17344:	e0bfff17 	ldw	r2,-4(fp)
   17348:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
   1734c:	e0bffd17 	ldw	r2,-12(fp)
   17350:	10800017 	ldw	r2,0(r2)
   17354:	e0fffd17 	ldw	r3,-12(fp)
   17358:	18c00117 	ldw	r3,4(r3)
   1735c:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
   17360:	e0bffd17 	ldw	r2,-12(fp)
   17364:	10800117 	ldw	r2,4(r2)
   17368:	e0fffd17 	ldw	r3,-12(fp)
   1736c:	18c00017 	ldw	r3,0(r3)
   17370:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
   17374:	e0bffd17 	ldw	r2,-12(fp)
   17378:	e0fffd17 	ldw	r3,-12(fp)
   1737c:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
   17380:	e0bffd17 	ldw	r2,-12(fp)
   17384:	e0fffd17 	ldw	r3,-12(fp)
   17388:	10c00015 	stw	r3,0(r2)
   1738c:	e0bffb17 	ldw	r2,-20(fp)
   17390:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   17394:	e0bffe17 	ldw	r2,-8(fp)
   17398:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
   1739c:	0001883a 	nop
   173a0:	e037883a 	mov	sp,fp
   173a4:	df000017 	ldw	fp,0(sp)
   173a8:	dec00104 	addi	sp,sp,4
   173ac:	f800283a 	ret

000173b0 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
   173b0:	defffb04 	addi	sp,sp,-20
   173b4:	dfc00415 	stw	ra,16(sp)
   173b8:	df000315 	stw	fp,12(sp)
   173bc:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
   173c0:	d0a02d17 	ldw	r2,-32588(gp)
   173c4:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
   173c8:	d0a73617 	ldw	r2,-25384(gp)
   173cc:	10800044 	addi	r2,r2,1
   173d0:	d0a73615 	stw	r2,-25384(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   173d4:	00002e06 	br	17490 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
   173d8:	e0bffd17 	ldw	r2,-12(fp)
   173dc:	10800017 	ldw	r2,0(r2)
   173e0:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
   173e4:	e0bffd17 	ldw	r2,-12(fp)
   173e8:	10800403 	ldbu	r2,16(r2)
   173ec:	10803fcc 	andi	r2,r2,255
   173f0:	10000426 	beq	r2,zero,17404 <alt_tick+0x54>
   173f4:	d0a73617 	ldw	r2,-25384(gp)
   173f8:	1000021e 	bne	r2,zero,17404 <alt_tick+0x54>
    {
      alarm->rollover = 0;
   173fc:	e0bffd17 	ldw	r2,-12(fp)
   17400:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
   17404:	e0bffd17 	ldw	r2,-12(fp)
   17408:	10800217 	ldw	r2,8(r2)
   1740c:	d0e73617 	ldw	r3,-25384(gp)
   17410:	18801d36 	bltu	r3,r2,17488 <alt_tick+0xd8>
   17414:	e0bffd17 	ldw	r2,-12(fp)
   17418:	10800403 	ldbu	r2,16(r2)
   1741c:	10803fcc 	andi	r2,r2,255
   17420:	1000191e 	bne	r2,zero,17488 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
   17424:	e0bffd17 	ldw	r2,-12(fp)
   17428:	10800317 	ldw	r2,12(r2)
   1742c:	e0fffd17 	ldw	r3,-12(fp)
   17430:	18c00517 	ldw	r3,20(r3)
   17434:	1809883a 	mov	r4,r3
   17438:	103ee83a 	callr	r2
   1743c:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
   17440:	e0bfff17 	ldw	r2,-4(fp)
   17444:	1000031e 	bne	r2,zero,17454 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
   17448:	e13ffd17 	ldw	r4,-12(fp)
   1744c:	00173140 	call	17314 <alt_alarm_stop>
   17450:	00000d06 	br	17488 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
   17454:	e0bffd17 	ldw	r2,-12(fp)
   17458:	10c00217 	ldw	r3,8(r2)
   1745c:	e0bfff17 	ldw	r2,-4(fp)
   17460:	1887883a 	add	r3,r3,r2
   17464:	e0bffd17 	ldw	r2,-12(fp)
   17468:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
   1746c:	e0bffd17 	ldw	r2,-12(fp)
   17470:	10c00217 	ldw	r3,8(r2)
   17474:	d0a73617 	ldw	r2,-25384(gp)
   17478:	1880032e 	bgeu	r3,r2,17488 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
   1747c:	e0bffd17 	ldw	r2,-12(fp)
   17480:	00c00044 	movi	r3,1
   17484:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
   17488:	e0bffe17 	ldw	r2,-8(fp)
   1748c:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   17490:	e0fffd17 	ldw	r3,-12(fp)
   17494:	d0a02d04 	addi	r2,gp,-32588
   17498:	18bfcf1e 	bne	r3,r2,173d8 <__alt_data_end+0xfffe73d8>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
   1749c:	000f1d00 	call	f1d0 <OSTimeTick>
}
   174a0:	0001883a 	nop
   174a4:	e037883a 	mov	sp,fp
   174a8:	dfc00117 	ldw	ra,4(sp)
   174ac:	df000017 	ldw	fp,0(sp)
   174b0:	dec00204 	addi	sp,sp,8
   174b4:	f800283a 	ret

000174b8 <altera_nios2_qsys_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
   174b8:	deffff04 	addi	sp,sp,-4
   174bc:	df000015 	stw	fp,0(sp)
   174c0:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
   174c4:	000170fa 	wrctl	ienable,zero
}
   174c8:	0001883a 	nop
   174cc:	e037883a 	mov	sp,fp
   174d0:	df000017 	ldw	fp,0(sp)
   174d4:	dec00104 	addi	sp,sp,4
   174d8:	f800283a 	ret

000174dc <OSCtxSw>:

      /* 
       * Save the remaining registers to the stack. 
       */

      addi sp, sp, -44
   174dc:	defff504 	addi	sp,sp,-44
      bltu  sp, et, .Lstack_overflow

#endif

#if OS_THREAD_SAFE_NEWLIB
      ldw r3, %gprel(_impure_ptr)(gp)   /* load the pointer */
   174e0:	d0e00117 	ldw	r3,-32764(gp)
#endif /* OS_THREAD_SAFE_NEWLIB */

      ldw r4, %gprel(OSTCBCur)(gp)
   174e4:	d1273017 	ldw	r4,-25408(gp)

      stw ra,  0(sp)
   174e8:	dfc00015 	stw	ra,0(sp)
      stw fp,  4(sp)
   174ec:	df000115 	stw	fp,4(sp)
      stw r23, 8(sp)
   174f0:	ddc00215 	stw	r23,8(sp)
      stw r22, 12(sp)
   174f4:	dd800315 	stw	r22,12(sp)
      stw r21, 16(sp)
   174f8:	dd400415 	stw	r21,16(sp)
      stw r20, 20(sp)
   174fc:	dd000515 	stw	r20,20(sp)
      stw r19, 24(sp)
   17500:	dcc00615 	stw	r19,24(sp)
      stw r18, 28(sp)
   17504:	dc800715 	stw	r18,28(sp)
      stw r17, 32(sp)
   17508:	dc400815 	stw	r17,32(sp)
      stw r16, 36(sp)
   1750c:	dc000915 	stw	r16,36(sp)
       * store the current value of _impure_ptr so it can be restored
       * later; _impure_ptr is asigned on a per task basis. It is used
       * by Newlib to achieve reentrancy.	
       */

      stw r3, 40(sp)                  /* save the impure pointer */
   17510:	d8c00a15 	stw	r3,40(sp)
      /* 
       * Save the current tasks stack pointer into the current tasks OS_TCB.
       * i.e. OSTCBCur->OSTCBStkPtr = sp;
       */

      stw sp, (r4)                  /* save the stack pointer (OSTCBStkPtr */
   17514:	26c00015 	stw	sp,0(r4)

      /*
       * Call the user definable OSTaskSWHook()
       */

      call OSTaskSwHook
   17518:	00177500 	call	17750 <OSTaskSwHook>
      /*
       * OSTCBCur = OSTCBHighRdy; 
       * OSPrioCur = OSPrioHighRdy; 
       */

      ldw r4, %gprel(OSTCBHighRdy)(gp)
   1751c:	d1272b17 	ldw	r4,-25428(gp)
      ldb r5, %gprel(OSPrioHighRdy)(gp)
   17520:	d1672307 	ldb	r5,-25460(gp)

      stw r4, %gprel(OSTCBCur)(gp)     /* set the current task to be the new task */
   17524:	d1273015 	stw	r4,-25408(gp)
      stb r5, %gprel(OSPrioCur)(gp)    /* store the new task's priority as the current */
   17528:	d1672345 	stb	r5,-25459(gp)

      /*
       * Set the stack pointer to point to the new task's stack
       */

      ldw sp, (r4) /* the stack pointer is the first entry in the OS_TCB structure */
   1752c:	26c00017 	ldw	sp,0(r4)
      /*
       * restore the value of _impure_ptr ; _impure_ptr is asigned on a 
       * per task basis. It is used by Newlib to achieve reentrancy.	
       */

      ldw r3, 40(sp)                  /* load the new impure pointer */
   17530:	d8c00a17 	ldw	r3,40(sp)

      /*
       * Restore the saved registers for the new task.
       */

      ldw ra,  0(sp)
   17534:	dfc00017 	ldw	ra,0(sp)
      ldw fp,  4(sp)
   17538:	df000117 	ldw	fp,4(sp)
      ldw r23, 8(sp)
   1753c:	ddc00217 	ldw	r23,8(sp)
      ldw r22, 12(sp)
   17540:	dd800317 	ldw	r22,12(sp)
      ldw r21, 16(sp)
   17544:	dd400417 	ldw	r21,16(sp)
      ldw r20, 20(sp)
   17548:	dd000517 	ldw	r20,20(sp)
      ldw r19, 24(sp)
   1754c:	dcc00617 	ldw	r19,24(sp)
      ldw r18, 28(sp)
   17550:	dc800717 	ldw	r18,28(sp)
      ldw r17, 32(sp)
   17554:	dc400817 	ldw	r17,32(sp)
      ldw r16, 36(sp)
   17558:	dc000917 	ldw	r16,36(sp)

#if OS_THREAD_SAFE_NEWLIB

      stw r3, %gprel(_impure_ptr)(gp) /* update _impure_ptr */
   1755c:	d0e00115 	stw	r3,-32764(gp)

      stw et, %gprel(alt_stack_limit_value)(gp)

#endif

      addi sp, sp, 44
   17560:	dec00b04 	addi	sp,sp,44

      /*
       * resume execution of the new task.
       */

      ret
   17564:	f800283a 	ret

00017568 <OSStartHighRdy>:

      /*
       * disable interrupts so that the scheduler doesn't run while
       * we're initialising this task.
       */  
      rdctl r18, status
   17568:	0025303a 	rdctl	r18,status
      subi  r17, zero, 2   /* r17 = 0xfffffffe */
   1756c:	047fff84 	movi	r17,-2
      and   r18, r18, r17
   17570:	9464703a 	and	r18,r18,r17
      wrctl status, r18
   17574:	9001703a 	wrctl	status,r18

      /*
       * Call the user definable OSTaskSWHook()
       */

      call OSTaskSwHook
   17578:	00177500 	call	17750 <OSTaskSwHook>

      /* 
       * set OSRunning = TRUE.
       */

      movi r18, 1                    /* set r18 to the value 'TRUE' */
   1757c:	04800044 	movi	r18,1
      stb r18, %gprel(OSRunning)(gp) /* save this to OSRunning */
   17580:	d4a72145 	stb	r18,-25467(gp)

      /*
       * start execution of the new task.
       */

      br 9b
   17584:	003fe506 	br	1751c <__alt_data_end+0xfffe751c>

00017588 <OSStartTsk>:

OSStartTsk:
      /* This instruction is never executed.  Its here to make the
       * backtrace work right 
       */
      movi sp, 0
   17588:	06c00004 	movi	sp,0

      /* Enable interrupts */
      rdctl r2, status
   1758c:	0005303a 	rdctl	r2,status
      ori   r2, r2, 0x1
   17590:	10800054 	ori	r2,r2,1
      wrctl status, r2
   17594:	1001703a 	wrctl	status,r2

      ldw r2, 4(sp)
   17598:	d8800117 	ldw	r2,4(sp)
      ldw r4, 0(sp)
   1759c:	d9000017 	ldw	r4,0(sp)

      addi sp, sp, 8
   175a0:	dec00204 	addi	sp,sp,8

      callr r2
   175a4:	103ee83a 	callr	r2

      nop
   175a8:	0001883a 	nop

000175ac <OSTaskStkInit>:
 *              been placed on the stack in the proper order.
 *
 ***********************************************************************************************/

OS_STK *OSTaskStkInit(void (*task)(void *pd), void *pdata, OS_STK *pstk, INT16U opt)
{
   175ac:	defff704 	addi	sp,sp,-36
   175b0:	dfc00815 	stw	ra,32(sp)
   175b4:	df000715 	stw	fp,28(sp)
   175b8:	df000704 	addi	fp,sp,28
   175bc:	e13ffc15 	stw	r4,-16(fp)
   175c0:	e17ffd15 	stw	r5,-12(fp)
   175c4:	e1bffe15 	stw	r6,-8(fp)
   175c8:	3805883a 	mov	r2,r7
   175cc:	e0bfff0d 	sth	r2,-4(fp)
    * create and initialise the impure pointer used for Newlib thread local storage.
    * This is only done if the C library is being used in a thread safe mode. Otherwise
    * a single reent structure is used for all threads, which saves memory.
    */

   local_impure_ptr = (struct _reent*)((((INT32U)(pstk)) & ~0x3) - sizeof(struct _reent));
   175d0:	e0fffe17 	ldw	r3,-8(fp)
   175d4:	00bfff04 	movi	r2,-4
   175d8:	1884703a 	and	r2,r3,r2
   175dc:	10bef704 	addi	r2,r2,-1060
   175e0:	e0bff915 	stw	r2,-28(fp)

   _REENT_INIT_PTR (local_impure_ptr);
   175e4:	01810904 	movi	r6,1060
   175e8:	000b883a 	mov	r5,zero
   175ec:	e13ff917 	ldw	r4,-28(fp)
   175f0:	00060500 	call	6050 <memset>
   175f4:	e0bff917 	ldw	r2,-28(fp)
   175f8:	10c0bb04 	addi	r3,r2,748
   175fc:	e0bff917 	ldw	r2,-28(fp)
   17600:	10c00115 	stw	r3,4(r2)
   17604:	e0bff917 	ldw	r2,-28(fp)
   17608:	10c0d504 	addi	r3,r2,852
   1760c:	e0bff917 	ldw	r2,-28(fp)
   17610:	10c00215 	stw	r3,8(r2)
   17614:	e0bff917 	ldw	r2,-28(fp)
   17618:	10c0ef04 	addi	r3,r2,956
   1761c:	e0bff917 	ldw	r2,-28(fp)
   17620:	10c00315 	stw	r3,12(r2)
   17624:	e0fff917 	ldw	r3,-28(fp)
   17628:	008000b4 	movhi	r2,2
   1762c:	10a09e04 	addi	r2,r2,-32136
   17630:	18800d15 	stw	r2,52(r3)
   17634:	e0bff917 	ldw	r2,-28(fp)
   17638:	00c00044 	movi	r3,1
   1763c:	10c02915 	stw	r3,164(r2)
   17640:	10002a15 	stw	zero,168(r2)
   17644:	e0bff917 	ldw	r2,-28(fp)
   17648:	00ccc384 	movi	r3,13070
   1764c:	10c02b0d 	sth	r3,172(r2)
   17650:	e0bff917 	ldw	r2,-28(fp)
   17654:	00eaf344 	movi	r3,-21555
   17658:	10c02b8d 	sth	r3,174(r2)
   1765c:	e0bff917 	ldw	r2,-28(fp)
   17660:	00c48d04 	movi	r3,4660
   17664:	10c02c0d 	sth	r3,176(r2)
   17668:	e0bff917 	ldw	r2,-28(fp)
   1766c:	00f99b44 	movi	r3,-6547
   17670:	10c02c8d 	sth	r3,178(r2)
   17674:	e0bff917 	ldw	r2,-28(fp)
   17678:	00f7bb04 	movi	r3,-8468
   1767c:	10c02d0d 	sth	r3,180(r2)
   17680:	e0bff917 	ldw	r2,-28(fp)
   17684:	00c00144 	movi	r3,5
   17688:	10c02d8d 	sth	r3,182(r2)
   1768c:	e0bff917 	ldw	r2,-28(fp)
   17690:	00c002c4 	movi	r3,11
   17694:	10c02e0d 	sth	r3,184(r2)
   /* 
    * create a stack frame at the top of the stack (leaving space for the 
    * reentrant data structure).
    */

   frame_pointer = (INT32U*) local_impure_ptr;
   17698:	e0bff917 	ldw	r2,-28(fp)
   1769c:	e0bffa15 	stw	r2,-24(fp)
#else
   frame_pointer =   (INT32U*) (((INT32U)(pstk)) & ~0x3);
#endif /* OS_THREAD_SAFE_NEWLIB */
   stk = frame_pointer - 13;
   176a0:	e0bffa17 	ldw	r2,-24(fp)
   176a4:	10bff304 	addi	r2,r2,-52
   176a8:	e0bffb15 	stw	r2,-20(fp)

   /* Now fill the stack frame. */

   stk[12] = (INT32U)task;            /* task address (ra) */
   176ac:	e0bffb17 	ldw	r2,-20(fp)
   176b0:	10800c04 	addi	r2,r2,48
   176b4:	e0fffc17 	ldw	r3,-16(fp)
   176b8:	10c00015 	stw	r3,0(r2)
   stk[11] = (INT32U) pdata;          /* first register argument (r4) */
   176bc:	e0bffb17 	ldw	r2,-20(fp)
   176c0:	10800b04 	addi	r2,r2,44
   176c4:	e0fffd17 	ldw	r3,-12(fp)
   176c8:	10c00015 	stw	r3,0(r2)

#if OS_THREAD_SAFE_NEWLIB
   stk[10] = (INT32U) local_impure_ptr; /* value of _impure_ptr for this thread */
   176cc:	e0bffb17 	ldw	r2,-20(fp)
   176d0:	10800a04 	addi	r2,r2,40
   176d4:	e0fff917 	ldw	r3,-28(fp)
   176d8:	10c00015 	stw	r3,0(r2)
#endif /* OS_THREAD_SAFE_NEWLIB */
   stk[0]  = ((INT32U)&OSStartTsk) + 4;/* exception return address (ea) */  
   176dc:	00800074 	movhi	r2,1
   176e0:	109d6204 	addi	r2,r2,30088
   176e4:	10c00104 	addi	r3,r2,4
   176e8:	e0bffb17 	ldw	r2,-20(fp)
   176ec:	10c00015 	stw	r3,0(r2)
    */
   __asm__ (".set OSTCBNext_OFFSET,%0" :: "i" (offsetof(OS_TCB, OSTCBNext)));
   __asm__ (".set OSTCBPrio_OFFSET,%0" :: "i" (offsetof(OS_TCB, OSTCBPrio)));
   __asm__ (".set OSTCBStkPtr_OFFSET,%0" :: "i" (offsetof(OS_TCB, OSTCBStkPtr)));
  
   return((OS_STK *)stk);
   176f0:	e0bffb17 	ldw	r2,-20(fp)
}
   176f4:	e037883a 	mov	sp,fp
   176f8:	dfc00117 	ldw	ra,4(sp)
   176fc:	df000017 	ldw	fp,0(sp)
   17700:	dec00204 	addi	sp,sp,8
   17704:	f800283a 	ret

00017708 <OSTaskCreateHook>:
*
* Note(s)    : 1) Interrupts are disabled during this call.
*********************************************************************************************************
*/
void OSTaskCreateHook (OS_TCB *ptcb)
{
   17708:	defffe04 	addi	sp,sp,-8
   1770c:	df000115 	stw	fp,4(sp)
   17710:	df000104 	addi	fp,sp,4
   17714:	e13fff15 	stw	r4,-4(fp)
    ptcb = ptcb;                       /* Prevent compiler warning */
}
   17718:	0001883a 	nop
   1771c:	e037883a 	mov	sp,fp
   17720:	df000017 	ldw	fp,0(sp)
   17724:	dec00104 	addi	sp,sp,4
   17728:	f800283a 	ret

0001772c <OSTaskDelHook>:
*
* Note(s)    : 1) Interrupts are disabled during this call.
*********************************************************************************************************
*/
void OSTaskDelHook (OS_TCB *ptcb)
{
   1772c:	defffe04 	addi	sp,sp,-8
   17730:	df000115 	stw	fp,4(sp)
   17734:	df000104 	addi	fp,sp,4
   17738:	e13fff15 	stw	r4,-4(fp)
    ptcb = ptcb;                       /* Prevent compiler warning                                     */
}
   1773c:	0001883a 	nop
   17740:	e037883a 	mov	sp,fp
   17744:	df000017 	ldw	fp,0(sp)
   17748:	dec00104 	addi	sp,sp,4
   1774c:	f800283a 	ret

00017750 <OSTaskSwHook>:
*                 will be 'switched in' (i.e. the highest priority task) and, 'OSTCBCur' points to the
*                 task being switched out (i.e. the preempted task).
*********************************************************************************************************
*/
void OSTaskSwHook (void)
{
   17750:	deffff04 	addi	sp,sp,-4
   17754:	df000015 	stw	fp,0(sp)
   17758:	d839883a 	mov	fp,sp
}
   1775c:	0001883a 	nop
   17760:	e037883a 	mov	sp,fp
   17764:	df000017 	ldw	fp,0(sp)
   17768:	dec00104 	addi	sp,sp,4
   1776c:	f800283a 	ret

00017770 <OSTaskStatHook>:
*
* Arguments  : none
*********************************************************************************************************
*/
void OSTaskStatHook (void)
{
   17770:	deffff04 	addi	sp,sp,-4
   17774:	df000015 	stw	fp,0(sp)
   17778:	d839883a 	mov	fp,sp
}
   1777c:	0001883a 	nop
   17780:	e037883a 	mov	sp,fp
   17784:	df000017 	ldw	fp,0(sp)
   17788:	dec00104 	addi	sp,sp,4
   1778c:	f800283a 	ret

00017790 <OSTimeTickHook>:
#ifdef ALT_INICHE
void cticks_hook(void);
#endif

void OSTimeTickHook (void)
{
   17790:	deffff04 	addi	sp,sp,-4
   17794:	df000015 	stw	fp,0(sp)
   17798:	d839883a 	mov	fp,sp
    
#ifdef ALT_INICHE
    /* Service the Interniche timer */
    cticks_hook();
#endif
}
   1779c:	0001883a 	nop
   177a0:	e037883a 	mov	sp,fp
   177a4:	df000017 	ldw	fp,0(sp)
   177a8:	dec00104 	addi	sp,sp,4
   177ac:	f800283a 	ret

000177b0 <OSInitHookBegin>:

void OSInitHookBegin(void)
{
   177b0:	deffff04 	addi	sp,sp,-4
   177b4:	df000015 	stw	fp,0(sp)
   177b8:	d839883a 	mov	fp,sp
#if OS_TMR_EN > 0
    OSTmrCtr = 0;
#endif
}
   177bc:	0001883a 	nop
   177c0:	e037883a 	mov	sp,fp
   177c4:	df000017 	ldw	fp,0(sp)
   177c8:	dec00104 	addi	sp,sp,4
   177cc:	f800283a 	ret

000177d0 <OSInitHookEnd>:

void OSInitHookEnd(void)
{
   177d0:	deffff04 	addi	sp,sp,-4
   177d4:	df000015 	stw	fp,0(sp)
   177d8:	d839883a 	mov	fp,sp
}
   177dc:	0001883a 	nop
   177e0:	e037883a 	mov	sp,fp
   177e4:	df000017 	ldw	fp,0(sp)
   177e8:	dec00104 	addi	sp,sp,4
   177ec:	f800283a 	ret

000177f0 <OSTaskIdleHook>:

void OSTaskIdleHook(void)
{
   177f0:	deffff04 	addi	sp,sp,-4
   177f4:	df000015 	stw	fp,0(sp)
   177f8:	d839883a 	mov	fp,sp
}
   177fc:	0001883a 	nop
   17800:	e037883a 	mov	sp,fp
   17804:	df000017 	ldw	fp,0(sp)
   17808:	dec00104 	addi	sp,sp,4
   1780c:	f800283a 	ret

00017810 <OSTCBInitHook>:

void OSTCBInitHook(OS_TCB *ptcb)
{
   17810:	defffe04 	addi	sp,sp,-8
   17814:	df000115 	stw	fp,4(sp)
   17818:	df000104 	addi	fp,sp,4
   1781c:	e13fff15 	stw	r4,-4(fp)
}
   17820:	0001883a 	nop
   17824:	e037883a 	mov	sp,fp
   17828:	df000017 	ldw	fp,0(sp)
   1782c:	dec00104 	addi	sp,sp,4
   17830:	f800283a 	ret

00017834 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
   17834:	defffa04 	addi	sp,sp,-24
   17838:	dfc00515 	stw	ra,20(sp)
   1783c:	df000415 	stw	fp,16(sp)
   17840:	df000404 	addi	fp,sp,16
   17844:	e13ffe15 	stw	r4,-8(fp)
   17848:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
   1784c:	e0bfff17 	ldw	r2,-4(fp)
   17850:	10800017 	ldw	r2,0(r2)
   17854:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
   17858:	e13ffe17 	ldw	r4,-8(fp)
   1785c:	00075100 	call	7510 <strlen>
   17860:	10800044 	addi	r2,r2,1
   17864:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   17868:	00000d06 	br	178a0 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
   1786c:	e0bffc17 	ldw	r2,-16(fp)
   17870:	10800217 	ldw	r2,8(r2)
   17874:	e0fffd17 	ldw	r3,-12(fp)
   17878:	180d883a 	mov	r6,r3
   1787c:	e17ffe17 	ldw	r5,-8(fp)
   17880:	1009883a 	mov	r4,r2
   17884:	0017b0c0 	call	17b0c <memcmp>
   17888:	1000021e 	bne	r2,zero,17894 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
   1788c:	e0bffc17 	ldw	r2,-16(fp)
   17890:	00000706 	br	178b0 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
   17894:	e0bffc17 	ldw	r2,-16(fp)
   17898:	10800017 	ldw	r2,0(r2)
   1789c:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   178a0:	e0fffc17 	ldw	r3,-16(fp)
   178a4:	e0bfff17 	ldw	r2,-4(fp)
   178a8:	18bff01e 	bne	r3,r2,1786c <__alt_data_end+0xfffe786c>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
   178ac:	0005883a 	mov	r2,zero
}
   178b0:	e037883a 	mov	sp,fp
   178b4:	dfc00117 	ldw	ra,4(sp)
   178b8:	df000017 	ldw	fp,0(sp)
   178bc:	dec00204 	addi	sp,sp,8
   178c0:	f800283a 	ret

000178c4 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
   178c4:	defffb04 	addi	sp,sp,-20
   178c8:	dfc00415 	stw	ra,16(sp)
   178cc:	df000315 	stw	fp,12(sp)
   178d0:	df000304 	addi	fp,sp,12
   178d4:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
   178d8:	d0a00617 	ldw	r2,-32744(gp)
   178dc:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   178e0:	00003106 	br	179a8 <alt_find_file+0xe4>
  {
    len = strlen(next->name);
   178e4:	e0bffd17 	ldw	r2,-12(fp)
   178e8:	10800217 	ldw	r2,8(r2)
   178ec:	1009883a 	mov	r4,r2
   178f0:	00075100 	call	7510 <strlen>
   178f4:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
   178f8:	e0bffd17 	ldw	r2,-12(fp)
   178fc:	10c00217 	ldw	r3,8(r2)
   17900:	e0bffe17 	ldw	r2,-8(fp)
   17904:	10bfffc4 	addi	r2,r2,-1
   17908:	1885883a 	add	r2,r3,r2
   1790c:	10800003 	ldbu	r2,0(r2)
   17910:	10803fcc 	andi	r2,r2,255
   17914:	1080201c 	xori	r2,r2,128
   17918:	10bfe004 	addi	r2,r2,-128
   1791c:	10800bd8 	cmpnei	r2,r2,47
   17920:	1000031e 	bne	r2,zero,17930 <alt_find_file+0x6c>
    {
      len -= 1;
   17924:	e0bffe17 	ldw	r2,-8(fp)
   17928:	10bfffc4 	addi	r2,r2,-1
   1792c:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   17930:	e0bffe17 	ldw	r2,-8(fp)
   17934:	e0ffff17 	ldw	r3,-4(fp)
   17938:	1885883a 	add	r2,r3,r2
   1793c:	10800003 	ldbu	r2,0(r2)
   17940:	10803fcc 	andi	r2,r2,255
   17944:	1080201c 	xori	r2,r2,128
   17948:	10bfe004 	addi	r2,r2,-128
   1794c:	10800be0 	cmpeqi	r2,r2,47
   17950:	1000081e 	bne	r2,zero,17974 <alt_find_file+0xb0>
   17954:	e0bffe17 	ldw	r2,-8(fp)
   17958:	e0ffff17 	ldw	r3,-4(fp)
   1795c:	1885883a 	add	r2,r3,r2
   17960:	10800003 	ldbu	r2,0(r2)
   17964:	10803fcc 	andi	r2,r2,255
   17968:	1080201c 	xori	r2,r2,128
   1796c:	10bfe004 	addi	r2,r2,-128
   17970:	10000a1e 	bne	r2,zero,1799c <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
   17974:	e0bffd17 	ldw	r2,-12(fp)
   17978:	10800217 	ldw	r2,8(r2)
   1797c:	e0fffe17 	ldw	r3,-8(fp)
   17980:	180d883a 	mov	r6,r3
   17984:	e17fff17 	ldw	r5,-4(fp)
   17988:	1009883a 	mov	r4,r2
   1798c:	0017b0c0 	call	17b0c <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   17990:	1000021e 	bne	r2,zero,1799c <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
   17994:	e0bffd17 	ldw	r2,-12(fp)
   17998:	00000706 	br	179b8 <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
   1799c:	e0bffd17 	ldw	r2,-12(fp)
   179a0:	10800017 	ldw	r2,0(r2)
   179a4:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   179a8:	e0fffd17 	ldw	r3,-12(fp)
   179ac:	d0a00604 	addi	r2,gp,-32744
   179b0:	18bfcc1e 	bne	r3,r2,178e4 <__alt_data_end+0xfffe78e4>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
   179b4:	0005883a 	mov	r2,zero
}
   179b8:	e037883a 	mov	sp,fp
   179bc:	dfc00117 	ldw	ra,4(sp)
   179c0:	df000017 	ldw	fp,0(sp)
   179c4:	dec00204 	addi	sp,sp,8
   179c8:	f800283a 	ret

000179cc <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
   179cc:	defff804 	addi	sp,sp,-32
   179d0:	dfc00715 	stw	ra,28(sp)
   179d4:	df000615 	stw	fp,24(sp)
   179d8:	dc000515 	stw	r16,20(sp)
   179dc:	df000604 	addi	fp,sp,24
   179e0:	e13ffe15 	stw	r4,-8(fp)
  alt_32 i;
  int rc = -EMFILE;
   179e4:	00bffa04 	movi	r2,-24
   179e8:	e0bffb15 	stw	r2,-20(fp)
  /* 
   * Take the alt_fd_list_lock semaphore in order to avoid races when 
   * accessing the file descriptor pool.
   */
  
  ALT_SEM_PEND(alt_fd_list_lock, 0);
   179ec:	d0a71817 	ldw	r2,-25504(gp)
   179f0:	e0bffc15 	stw	r2,-16(fp)
   179f4:	e03ffd0d 	sth	zero,-12(fp)
   179f8:	e0bffd0b 	ldhu	r2,-12(fp)
   179fc:	e0fffd84 	addi	r3,fp,-10
   17a00:	180d883a 	mov	r6,r3
   17a04:	100b883a 	mov	r5,r2
   17a08:	e13ffc17 	ldw	r4,-16(fp)
   17a0c:	0013a200 	call	13a20 <OSSemPend>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   17a10:	e03ffa15 	stw	zero,-24(fp)
   17a14:	00001d06 	br	17a8c <alt_get_fd+0xc0>
  {
    if (!alt_fd_list[i].dev)
   17a18:	040000b4 	movhi	r16,2
   17a1c:	8422d204 	addi	r16,r16,-29880
   17a20:	e0bffa17 	ldw	r2,-24(fp)
   17a24:	01400304 	movi	r5,12
   17a28:	1009883a 	mov	r4,r2
   17a2c:	000ad340 	call	ad34 <__mulsi3>
   17a30:	8085883a 	add	r2,r16,r2
   17a34:	10800017 	ldw	r2,0(r2)
   17a38:	1000111e 	bne	r2,zero,17a80 <alt_get_fd+0xb4>
    {
      alt_fd_list[i].dev = dev;
   17a3c:	040000b4 	movhi	r16,2
   17a40:	8422d204 	addi	r16,r16,-29880
   17a44:	e0bffa17 	ldw	r2,-24(fp)
   17a48:	01400304 	movi	r5,12
   17a4c:	1009883a 	mov	r4,r2
   17a50:	000ad340 	call	ad34 <__mulsi3>
   17a54:	8085883a 	add	r2,r16,r2
   17a58:	e0fffe17 	ldw	r3,-8(fp)
   17a5c:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
   17a60:	d0e00a17 	ldw	r3,-32728(gp)
   17a64:	e0bffa17 	ldw	r2,-24(fp)
   17a68:	1880020e 	bge	r3,r2,17a74 <alt_get_fd+0xa8>
      {
        alt_max_fd = i;
   17a6c:	e0bffa17 	ldw	r2,-24(fp)
   17a70:	d0a00a15 	stw	r2,-32728(gp)
      }
      rc = i;
   17a74:	e0bffa17 	ldw	r2,-24(fp)
   17a78:	e0bffb15 	stw	r2,-20(fp)
      goto alt_get_fd_exit;
   17a7c:	00000606 	br	17a98 <alt_get_fd+0xcc>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   17a80:	e0bffa17 	ldw	r2,-24(fp)
   17a84:	10800044 	addi	r2,r2,1
   17a88:	e0bffa15 	stw	r2,-24(fp)
   17a8c:	e0bffa17 	ldw	r2,-24(fp)
   17a90:	10800810 	cmplti	r2,r2,32
   17a94:	103fe01e 	bne	r2,zero,17a18 <__alt_data_end+0xfffe7a18>
  /*
   * Release the alt_fd_list_lock semaphore now that we are done with the
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);
   17a98:	d0a71817 	ldw	r2,-25504(gp)
   17a9c:	1009883a 	mov	r4,r2
   17aa0:	0013d980 	call	13d98 <OSSemPost>

  return rc;
   17aa4:	e0bffb17 	ldw	r2,-20(fp)
}
   17aa8:	e6ffff04 	addi	sp,fp,-4
   17aac:	dfc00217 	ldw	ra,8(sp)
   17ab0:	df000117 	ldw	fp,4(sp)
   17ab4:	dc000017 	ldw	r16,0(sp)
   17ab8:	dec00304 	addi	sp,sp,12
   17abc:	f800283a 	ret

00017ac0 <atexit>:
   17ac0:	200b883a 	mov	r5,r4
   17ac4:	000f883a 	mov	r7,zero
   17ac8:	000d883a 	mov	r6,zero
   17acc:	0009883a 	mov	r4,zero
   17ad0:	0017b881 	jmpi	17b88 <__register_exitproc>

00017ad4 <exit>:
   17ad4:	defffe04 	addi	sp,sp,-8
   17ad8:	000b883a 	mov	r5,zero
   17adc:	dc000015 	stw	r16,0(sp)
   17ae0:	dfc00115 	stw	ra,4(sp)
   17ae4:	2021883a 	mov	r16,r4
   17ae8:	0017ca00 	call	17ca0 <__call_exitprocs>
   17aec:	008000b4 	movhi	r2,2
   17af0:	10a74d04 	addi	r2,r2,-25292
   17af4:	11000017 	ldw	r4,0(r2)
   17af8:	20800f17 	ldw	r2,60(r4)
   17afc:	10000126 	beq	r2,zero,17b04 <exit+0x30>
   17b00:	103ee83a 	callr	r2
   17b04:	8009883a 	mov	r4,r16
   17b08:	0017e200 	call	17e20 <_exit>

00017b0c <memcmp>:
   17b0c:	01c000c4 	movi	r7,3
   17b10:	3980192e 	bgeu	r7,r6,17b78 <memcmp+0x6c>
   17b14:	2144b03a 	or	r2,r4,r5
   17b18:	11c4703a 	and	r2,r2,r7
   17b1c:	10000f26 	beq	r2,zero,17b5c <memcmp+0x50>
   17b20:	20800003 	ldbu	r2,0(r4)
   17b24:	28c00003 	ldbu	r3,0(r5)
   17b28:	10c0151e 	bne	r2,r3,17b80 <memcmp+0x74>
   17b2c:	31bfff84 	addi	r6,r6,-2
   17b30:	01ffffc4 	movi	r7,-1
   17b34:	00000406 	br	17b48 <memcmp+0x3c>
   17b38:	20800003 	ldbu	r2,0(r4)
   17b3c:	28c00003 	ldbu	r3,0(r5)
   17b40:	31bfffc4 	addi	r6,r6,-1
   17b44:	10c00e1e 	bne	r2,r3,17b80 <memcmp+0x74>
   17b48:	21000044 	addi	r4,r4,1
   17b4c:	29400044 	addi	r5,r5,1
   17b50:	31fff91e 	bne	r6,r7,17b38 <__alt_data_end+0xfffe7b38>
   17b54:	0005883a 	mov	r2,zero
   17b58:	f800283a 	ret
   17b5c:	20c00017 	ldw	r3,0(r4)
   17b60:	28800017 	ldw	r2,0(r5)
   17b64:	18bfee1e 	bne	r3,r2,17b20 <__alt_data_end+0xfffe7b20>
   17b68:	31bfff04 	addi	r6,r6,-4
   17b6c:	21000104 	addi	r4,r4,4
   17b70:	29400104 	addi	r5,r5,4
   17b74:	39bff936 	bltu	r7,r6,17b5c <__alt_data_end+0xfffe7b5c>
   17b78:	303fe91e 	bne	r6,zero,17b20 <__alt_data_end+0xfffe7b20>
   17b7c:	003ff506 	br	17b54 <__alt_data_end+0xfffe7b54>
   17b80:	10c5c83a 	sub	r2,r2,r3
   17b84:	f800283a 	ret

00017b88 <__register_exitproc>:
   17b88:	defffa04 	addi	sp,sp,-24
   17b8c:	dc000315 	stw	r16,12(sp)
   17b90:	040000b4 	movhi	r16,2
   17b94:	84274d04 	addi	r16,r16,-25292
   17b98:	80c00017 	ldw	r3,0(r16)
   17b9c:	dc400415 	stw	r17,16(sp)
   17ba0:	dfc00515 	stw	ra,20(sp)
   17ba4:	18805217 	ldw	r2,328(r3)
   17ba8:	2023883a 	mov	r17,r4
   17bac:	10003726 	beq	r2,zero,17c8c <__register_exitproc+0x104>
   17bb0:	10c00117 	ldw	r3,4(r2)
   17bb4:	010007c4 	movi	r4,31
   17bb8:	20c00e16 	blt	r4,r3,17bf4 <__register_exitproc+0x6c>
   17bbc:	1a000044 	addi	r8,r3,1
   17bc0:	8800221e 	bne	r17,zero,17c4c <__register_exitproc+0xc4>
   17bc4:	18c00084 	addi	r3,r3,2
   17bc8:	18c7883a 	add	r3,r3,r3
   17bcc:	18c7883a 	add	r3,r3,r3
   17bd0:	12000115 	stw	r8,4(r2)
   17bd4:	10c7883a 	add	r3,r2,r3
   17bd8:	19400015 	stw	r5,0(r3)
   17bdc:	0005883a 	mov	r2,zero
   17be0:	dfc00517 	ldw	ra,20(sp)
   17be4:	dc400417 	ldw	r17,16(sp)
   17be8:	dc000317 	ldw	r16,12(sp)
   17bec:	dec00604 	addi	sp,sp,24
   17bf0:	f800283a 	ret
   17bf4:	00800034 	movhi	r2,0
   17bf8:	10800004 	addi	r2,r2,0
   17bfc:	10002626 	beq	r2,zero,17c98 <__register_exitproc+0x110>
   17c00:	01006404 	movi	r4,400
   17c04:	d9400015 	stw	r5,0(sp)
   17c08:	d9800115 	stw	r6,4(sp)
   17c0c:	d9c00215 	stw	r7,8(sp)
   17c10:	00000000 	call	0 <__reset>
   17c14:	d9400017 	ldw	r5,0(sp)
   17c18:	d9800117 	ldw	r6,4(sp)
   17c1c:	d9c00217 	ldw	r7,8(sp)
   17c20:	10001d26 	beq	r2,zero,17c98 <__register_exitproc+0x110>
   17c24:	81000017 	ldw	r4,0(r16)
   17c28:	10000115 	stw	zero,4(r2)
   17c2c:	02000044 	movi	r8,1
   17c30:	22405217 	ldw	r9,328(r4)
   17c34:	0007883a 	mov	r3,zero
   17c38:	12400015 	stw	r9,0(r2)
   17c3c:	20805215 	stw	r2,328(r4)
   17c40:	10006215 	stw	zero,392(r2)
   17c44:	10006315 	stw	zero,396(r2)
   17c48:	883fde26 	beq	r17,zero,17bc4 <__alt_data_end+0xfffe7bc4>
   17c4c:	18c9883a 	add	r4,r3,r3
   17c50:	2109883a 	add	r4,r4,r4
   17c54:	1109883a 	add	r4,r2,r4
   17c58:	21802215 	stw	r6,136(r4)
   17c5c:	01800044 	movi	r6,1
   17c60:	12406217 	ldw	r9,392(r2)
   17c64:	30cc983a 	sll	r6,r6,r3
   17c68:	4992b03a 	or	r9,r9,r6
   17c6c:	12406215 	stw	r9,392(r2)
   17c70:	21c04215 	stw	r7,264(r4)
   17c74:	01000084 	movi	r4,2
   17c78:	893fd21e 	bne	r17,r4,17bc4 <__alt_data_end+0xfffe7bc4>
   17c7c:	11006317 	ldw	r4,396(r2)
   17c80:	218cb03a 	or	r6,r4,r6
   17c84:	11806315 	stw	r6,396(r2)
   17c88:	003fce06 	br	17bc4 <__alt_data_end+0xfffe7bc4>
   17c8c:	18805304 	addi	r2,r3,332
   17c90:	18805215 	stw	r2,328(r3)
   17c94:	003fc606 	br	17bb0 <__alt_data_end+0xfffe7bb0>
   17c98:	00bfffc4 	movi	r2,-1
   17c9c:	003fd006 	br	17be0 <__alt_data_end+0xfffe7be0>

00017ca0 <__call_exitprocs>:
   17ca0:	defff504 	addi	sp,sp,-44
   17ca4:	df000915 	stw	fp,36(sp)
   17ca8:	dd400615 	stw	r21,24(sp)
   17cac:	dc800315 	stw	r18,12(sp)
   17cb0:	dfc00a15 	stw	ra,40(sp)
   17cb4:	ddc00815 	stw	r23,32(sp)
   17cb8:	dd800715 	stw	r22,28(sp)
   17cbc:	dd000515 	stw	r20,20(sp)
   17cc0:	dcc00415 	stw	r19,16(sp)
   17cc4:	dc400215 	stw	r17,8(sp)
   17cc8:	dc000115 	stw	r16,4(sp)
   17ccc:	d9000015 	stw	r4,0(sp)
   17cd0:	2839883a 	mov	fp,r5
   17cd4:	04800044 	movi	r18,1
   17cd8:	057fffc4 	movi	r21,-1
   17cdc:	008000b4 	movhi	r2,2
   17ce0:	10a74d04 	addi	r2,r2,-25292
   17ce4:	12000017 	ldw	r8,0(r2)
   17ce8:	45005217 	ldw	r20,328(r8)
   17cec:	44c05204 	addi	r19,r8,328
   17cf0:	a0001c26 	beq	r20,zero,17d64 <__call_exitprocs+0xc4>
   17cf4:	a0800117 	ldw	r2,4(r20)
   17cf8:	15ffffc4 	addi	r23,r2,-1
   17cfc:	b8000d16 	blt	r23,zero,17d34 <__call_exitprocs+0x94>
   17d00:	14000044 	addi	r16,r2,1
   17d04:	8421883a 	add	r16,r16,r16
   17d08:	8421883a 	add	r16,r16,r16
   17d0c:	84402004 	addi	r17,r16,128
   17d10:	a463883a 	add	r17,r20,r17
   17d14:	a421883a 	add	r16,r20,r16
   17d18:	e0001e26 	beq	fp,zero,17d94 <__call_exitprocs+0xf4>
   17d1c:	80804017 	ldw	r2,256(r16)
   17d20:	e0801c26 	beq	fp,r2,17d94 <__call_exitprocs+0xf4>
   17d24:	bdffffc4 	addi	r23,r23,-1
   17d28:	843fff04 	addi	r16,r16,-4
   17d2c:	8c7fff04 	addi	r17,r17,-4
   17d30:	bd7ff91e 	bne	r23,r21,17d18 <__alt_data_end+0xfffe7d18>
   17d34:	00800034 	movhi	r2,0
   17d38:	10800004 	addi	r2,r2,0
   17d3c:	10000926 	beq	r2,zero,17d64 <__call_exitprocs+0xc4>
   17d40:	a0800117 	ldw	r2,4(r20)
   17d44:	1000301e 	bne	r2,zero,17e08 <__call_exitprocs+0x168>
   17d48:	a0800017 	ldw	r2,0(r20)
   17d4c:	10003226 	beq	r2,zero,17e18 <__call_exitprocs+0x178>
   17d50:	a009883a 	mov	r4,r20
   17d54:	98800015 	stw	r2,0(r19)
   17d58:	00000000 	call	0 <__reset>
   17d5c:	9d000017 	ldw	r20,0(r19)
   17d60:	a03fe41e 	bne	r20,zero,17cf4 <__alt_data_end+0xfffe7cf4>
   17d64:	dfc00a17 	ldw	ra,40(sp)
   17d68:	df000917 	ldw	fp,36(sp)
   17d6c:	ddc00817 	ldw	r23,32(sp)
   17d70:	dd800717 	ldw	r22,28(sp)
   17d74:	dd400617 	ldw	r21,24(sp)
   17d78:	dd000517 	ldw	r20,20(sp)
   17d7c:	dcc00417 	ldw	r19,16(sp)
   17d80:	dc800317 	ldw	r18,12(sp)
   17d84:	dc400217 	ldw	r17,8(sp)
   17d88:	dc000117 	ldw	r16,4(sp)
   17d8c:	dec00b04 	addi	sp,sp,44
   17d90:	f800283a 	ret
   17d94:	a0800117 	ldw	r2,4(r20)
   17d98:	80c00017 	ldw	r3,0(r16)
   17d9c:	10bfffc4 	addi	r2,r2,-1
   17da0:	15c01426 	beq	r2,r23,17df4 <__call_exitprocs+0x154>
   17da4:	80000015 	stw	zero,0(r16)
   17da8:	183fde26 	beq	r3,zero,17d24 <__alt_data_end+0xfffe7d24>
   17dac:	95c8983a 	sll	r4,r18,r23
   17db0:	a0806217 	ldw	r2,392(r20)
   17db4:	a5800117 	ldw	r22,4(r20)
   17db8:	2084703a 	and	r2,r4,r2
   17dbc:	10000b26 	beq	r2,zero,17dec <__call_exitprocs+0x14c>
   17dc0:	a0806317 	ldw	r2,396(r20)
   17dc4:	2088703a 	and	r4,r4,r2
   17dc8:	20000c1e 	bne	r4,zero,17dfc <__call_exitprocs+0x15c>
   17dcc:	89400017 	ldw	r5,0(r17)
   17dd0:	d9000017 	ldw	r4,0(sp)
   17dd4:	183ee83a 	callr	r3
   17dd8:	a0800117 	ldw	r2,4(r20)
   17ddc:	15bfbf1e 	bne	r2,r22,17cdc <__alt_data_end+0xfffe7cdc>
   17de0:	98800017 	ldw	r2,0(r19)
   17de4:	153fcf26 	beq	r2,r20,17d24 <__alt_data_end+0xfffe7d24>
   17de8:	003fbc06 	br	17cdc <__alt_data_end+0xfffe7cdc>
   17dec:	183ee83a 	callr	r3
   17df0:	003ff906 	br	17dd8 <__alt_data_end+0xfffe7dd8>
   17df4:	a5c00115 	stw	r23,4(r20)
   17df8:	003feb06 	br	17da8 <__alt_data_end+0xfffe7da8>
   17dfc:	89000017 	ldw	r4,0(r17)
   17e00:	183ee83a 	callr	r3
   17e04:	003ff406 	br	17dd8 <__alt_data_end+0xfffe7dd8>
   17e08:	a0800017 	ldw	r2,0(r20)
   17e0c:	a027883a 	mov	r19,r20
   17e10:	1029883a 	mov	r20,r2
   17e14:	003fb606 	br	17cf0 <__alt_data_end+0xfffe7cf0>
   17e18:	0005883a 	mov	r2,zero
   17e1c:	003ffb06 	br	17e0c <__alt_data_end+0xfffe7e0c>

00017e20 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
   17e20:	defffd04 	addi	sp,sp,-12
   17e24:	df000215 	stw	fp,8(sp)
   17e28:	df000204 	addi	fp,sp,8
   17e2c:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
   17e30:	d0272145 	stb	zero,-25467(gp)
   17e34:	e0bfff17 	ldw	r2,-4(fp)
   17e38:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
   17e3c:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
   17e40:	10000226 	beq	r2,zero,17e4c <_exit+0x2c>
    ALT_SIM_FAIL();
   17e44:	002af070 	cmpltui	zero,zero,43969
   17e48:	00000106 	br	17e50 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
   17e4c:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
   17e50:	003fff06 	br	17e50 <__alt_data_end+0xfffe7e50>
