
rtos_based.elf:     file format elf32-littlenios2
rtos_based.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x000001c0

Program Header:
    LOAD off    0x00001000 vaddr 0x00000000 paddr 0x00000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00000020 paddr 0x00000020 align 2**12
         filesz 0x000199c4 memsz 0x000199c4 flags r-x
    LOAD off    0x0001a9e4 vaddr 0x000199e4 paddr 0x0001b55c align 2**12
         filesz 0x00001b78 memsz 0x00001b78 flags rw-
    LOAD off    0x0001d0d4 vaddr 0x0001d0d4 paddr 0x0001d0d4 align 2**12
         filesz 0x00000000 memsz 0x00005450 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00000000  00000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   000001a0  00000020  00000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         000192b0  000001c0  000001c0  000011c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000574  00019470  00019470  0001a470  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001b78  000199e4  0001b55c  0001a9e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00005450  0001d0d4  0001d0d4  0001d0d4  2**2
                  ALLOC, SMALL_DATA
  6 .memory       00000000  00022524  00022524  0001c55c  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  0001c55c  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00001188  00000000  00000000  0001c580  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   0003130f  00000000  00000000  0001d708  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0000bc80  00000000  00000000  0004ea17  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   0000eeff  00000000  00000000  0005a697  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00003580  00000000  00000000  00069598  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00004c18  00000000  00000000  0006cb18  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00018d3b  00000000  00000000  00071730  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000010  00000000  00000000  0008a46c  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00001a78  00000000  00000000  0008a480  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000006  00000000  00000000  00090d7e  2**0
                  CONTENTS, READONLY
 18 .cpu          00000005  00000000  00000000  00090d84  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  00090d89  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  00090d8a  2**0
                  CONTENTS, READONLY
 21 .sysid_hash   00000004  00000000  00000000  00090d8b  2**0
                  CONTENTS, READONLY
 22 .sysid_base   00000004  00000000  00000000  00090d8f  2**0
                  CONTENTS, READONLY
 23 .sysid_time   00000004  00000000  00000000  00090d93  2**0
                  CONTENTS, READONLY
 24 .stderr_dev   00000009  00000000  00000000  00090d97  2**0
                  CONTENTS, READONLY
 25 .stdin_dev    00000009  00000000  00000000  00090da0  2**0
                  CONTENTS, READONLY
 26 .stdout_dev   00000009  00000000  00000000  00090da9  2**0
                  CONTENTS, READONLY
 27 .sopc_system_name 0000000f  00000000  00000000  00090db2  2**0
                  CONTENTS, READONLY
 28 .quartus_project_dir 00000046  00000000  00000000  00090dc1  2**0
                  CONTENTS, READONLY
 29 .jdi          00004d9e  00000000  00000000  00090e07  2**0
                  CONTENTS, READONLY
 30 .sopcinfo     0004a7b0  00000000  00000000  00095ba5  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00000000 l    d  .entry	00000000 .entry
00000020 l    d  .exceptions	00000000 .exceptions
000001c0 l    d  .text	00000000 .text
00019470 l    d  .rodata	00000000 .rodata
000199e4 l    d  .rwdata	00000000 .rwdata
0001d0d4 l    d  .bss	00000000 .bss
00022524 l    d  .memory	00000000 .memory
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../rtos_based_bsp//obj/HAL/src/crt0.o
000001f8 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_exception_entry.o
00000094 l       .exceptions	00000000 alt_exception_unknown
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 rtos_main.cpp
0001d0e4 l     O .bss	00000008 _ZL19player_queue_buffer
000003f8 l     F .text	00000094 _ZL13user_registerv
0001b49c l     O .rwdata	00000001 _ZZL13user_registervE6rounds
0001f1cc l     O .bss	0000000a _ZZ7receivevE7payload
00000a94 l     F .text	00000064 _Z41__static_initialization_and_destruction_0ii
00000af8 l     F .text	00000030 _GLOBAL__sub_I_task1_stk
00000000 l    df *ABS*	00000000 button.cpp
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 getc.c
00000000 l    df *ABS*	00000000 impure.c
000199e4 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 rand.c
00000000 l    df *ABS*	00000000 rget.c
00000000 l    df *ABS*	00000000 strcpy.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 strstr.c
000012e4 l     F .text	00000104 critical_factorization
000013e8 l     F .text	000003b0 two_way_long_needle
00000000 l    df *ABS*	00000000 strtok.c
00000000 l    df *ABS*	00000000 strtok_r.c
00000000 l    df *ABS*	00000000 vfprintf.c
00019612 l     O .rodata	00000010 zeroes.4404
00003efc l     F .text	000000bc __sbprintf
00019622 l     O .rodata	00000010 blanks.4403
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
0000410c l     F .text	00000228 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
00005c64 l     F .text	00000008 __fp_unlock
00005c78 l     F .text	0000019c __sinit.part.1
00005e14 l     F .text	00000008 __fp_lock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 locale.c
00019e28 l     O .rwdata	00000020 lc_ctype_charset
00019e08 l     O .rwdata	00000020 lc_message_charset
00019e48 l     O .rwdata	00000038 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mprec.c
00019650 l     O .rodata	0000000c p05.2768
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 refill.c
00009084 l     F .text	0000001c lflush
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strchr.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 vfprintf.c
000096b8 l     F .text	000000fc __sprint_r.part.0
00019774 l     O .rodata	00000010 zeroes.4349
0000acf4 l     F .text	000000bc __sbprintf
00019784 l     O .rodata	00000010 blanks.4348
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 alt_close.c
0000ec94 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
0000eda8 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
0000edd4 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_isatty.c
0000f168 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
0000f250 l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
0000f33c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_read.c
0000f510 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
0001b4d4 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
0000f784 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_env_lock.c
0001b4d8 l     O .rwdata	00000004 lockid
0001d11c l     O .bss	00000004 locks
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
0001b4dc l     O .rwdata	00000004 lockid
0001d124 l     O .bss	00000004 locks
00000000 l    df *ABS*	00000000 os_core.c
000111bc l     F .text	00000048 OS_InitMisc
00011204 l     F .text	0000006c OS_InitRdyList
00011370 l     F .text	000000e4 OS_InitTCBList
000110dc l     F .text	000000e0 OS_InitEventList
00011270 l     F .text	00000080 OS_InitTaskIdle
000112f0 l     F .text	00000080 OS_InitTaskStat
000115e0 l     F .text	00000074 OS_SchedNew
00000000 l    df *ABS*	00000000 os_dbg.c
00000000 l    df *ABS*	00000000 os_flag.c
000132f0 l     F .text	000000f4 OS_FlagTaskRdy
000130b0 l     F .text	00000160 OS_FlagBlock
00000000 l    df *ABS*	00000000 os_mem.c
00000000 l    df *ABS*	00000000 os_q.c
00000000 l    df *ABS*	00000000 os_sem.c
00000000 l    df *ABS*	00000000 os_task.c
00000000 l    df *ABS*	00000000 os_time.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
000173c8 l     F .text	00000034 alt_dev_reg
0001a430 l     O .rwdata	0000106c jtag_uart
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
00017744 l     F .text	000002a4 altera_avalon_jtag_uart_irq
000179e8 l     F .text	00000104 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
000181c4 l     F .text	00000078 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
00018404 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
000185c4 l     F .text	000000e4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_open.c
00018724 l     F .text	0000003c alt_get_errno
00018760 l     F .text	000000ec alt_file_locked
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000000 l    df *ABS*	00000000 os_cpu_a.o
00000040 l       *ABS*	00000000 OSCtxSw_SWITCH_PC
00000000 l    df *ABS*	00000000 os_cpu_c.c
00000014 l       *ABS*	00000000 OSTCBNext_OFFSET
00000032 l       *ABS*	00000000 OSTCBPrio_OFFSET
00000000 l       *ABS*	00000000 OSTCBStkPtr_OFFSET
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
000089a8 g     F .text	00000074 _mprec_log10
0001b52a g     O .rwdata	00000002 OSTaskNameSize
00000b7c g     F .text	0000007c _ZN9buttons_c3isrEPv
00008a94 g     F .text	0000008c __any_on
0000b2a8 g     F .text	00000054 _isatty_r
0001965c g     O .rodata	00000028 __mprec_tinytens
0000f454 g     F .text	000000bc alt_main
000011bc g     F .text	00000090 strcpy
0000048c g     F .text	00000428 _Z14reaction_meterPv
00000fe4 g     F .text	000000c0 _puts_r
0001f200 g     O .bss	00000100 alt_irq
0000b2fc g     F .text	00000060 _lseek_r
00013b10 g     F .text	000000d8 OS_MemInit
0001b55c g       *ABS*	00000000 __flash_rwdata_start
00017368 g     F .text	00000060 OSTimeSet
0000d66c g     F .text	00000088 .hidden __eqdf2
0000fe30 g     F .text	00000610 OSEventPendMulti
00022524 g       *ABS*	00000000 __alt_heap_start
00018d9c g     F .text	00000024 OSTaskCreateHook
00001bfc g     F .text	00000008 strtok_r
0001d184 g     O .bss	00001000 task1_stk
00000fa8 g     F .text	0000003c printf
0001b502 g     O .rwdata	00000002 OSMboxEn
000003b0 g     F .text	00000048 _Z11rotate_leftii
00010498 g     F .text	0000004c OSIntEnter
0000b514 g     F .text	0000009c _wcrtomb_r
00009414 g     F .text	0000005c __sseek
00005fc4 g     F .text	00000010 __sinit
0000b3bc g     F .text	00000140 __swbuf_r
0001b512 g     O .rwdata	00000002 OSQEn
00006a98 g     F .text	0000007c _setlocale_r
00005e1c g     F .text	00000078 __sfmoreglue
0000fb04 g     F .text	000000cc __malloc_unlock
00018e04 g     F .text	00000020 OSTaskStatHook
0001d12c g     O .bss	00000001 OSLockNesting
0001b550 g     O .rwdata	00000002 OSDataSize
0001d12d g     O .bss	00000001 OSRunning
000077e4 g     F .text	0000015c memmove
00018e44 g     F .text	00000020 OSInitHookBegin
0001b548 g     O .rwdata	00000002 OSTmrSize
00005fac g     F .text	00000018 _cleanup
00007a68 g     F .text	000000a8 _Balloc
00001b60 g     F .text	0000009c __strtok_r
0001d130 g     O .bss	00000004 OSIdleCtr
0000d6f4 g     F .text	000000dc .hidden __gtdf2
00018c1c g       .text	00000000 OSStartTsk
00011910 g     F .text	000002d4 OS_TCBInit
00000000 g     F .entry	0000000c __reset
0001b54e g     O .rwdata	00000002 OSTmrWheelTblSize
00000020 g       *ABS*	00000000 __flash_exceptions_start
0001d0d4 g     O .bss	00000004 running_sem
0001b4ee g     O .rwdata	00000002 OSEventSize
0001d134 g     O .bss	00000001 OSPrioHighRdy
0000b24c g     F .text	0000005c _fstat_r
00018dc0 g     F .text	00000024 OSTaskDelHook
0001d104 g     O .bss	00000004 errno
000011a8 g     F .text	00000014 __srget
00009390 g     F .text	00000008 __seofread
00018bfc g       .text	00000000 OSStartHighRdy
00015de8 g     F .text	000001e4 OSTaskCreateExt
00012bf8 g     F .text	00000060 OSFlagPendGetFlagsRdy
0001b52e g     O .rwdata	00000002 OSTaskStatStkSize
00011d74 g     F .text	00000308 OSFlagAccept
00014154 g     F .text	000000b8 OSQFlush
00013be8 g     F .text	00000140 OSQAccept
0001d114 g     O .bss	00000004 alt_argv
0002349c g       *ABS*	00000000 _gp
00015c3c g     F .text	000001ac OSTaskCreate
0001574c g     F .text	000004f0 OSTaskChangePrio
0001d128 g     O .bss	00000004 alt_heapsem
00011be4 g     F .text	00000190 OSDebugInit
00015fcc g     F .text	00000344 OSTaskDel
0001a2b0 g     O .rwdata	00000180 alt_fd_list
0001f300 g     O .bss	00000370 OSFlagTbl
00000e80 g     F .text	00000070 _getc_r
00000ef0 g     F .text	00000088 getc
00010ebc g     F .text	000000b8 OS_EventTaskRemove
00018ec8 g     F .text	00000090 alt_find_dev
0000769c g     F .text	00000148 memcpy
0001b518 g     O .rwdata	00000002 OSRdyTblSize
00005c6c g     F .text	0000000c _cleanup_r
0000eaac g     F .text	000000dc .hidden __floatsidf
000186a8 g     F .text	0000007c alt_io_redirect
0000d7d0 g     F .text	000000f4 .hidden __ltdf2
00019470 g       *ABS*	00000000 __DTOR_END__
000010a4 g     F .text	00000014 puts
0000fbd0 g     F .text	00000120 OSEventNameGet
0001b4fc g     O .rwdata	00000002 OSFlagMax
00009274 g     F .text	00000074 __fpclassifyd
00008904 g     F .text	000000a4 __ratio
000104e4 g     F .text	000000f8 OSIntExit
0000acd8 g     F .text	0000001c __vfiprintf_internal
0001b536 g     O .rwdata	00000002 OSTCBSize
0001d135 g     O .bss	00000001 OSPrioCur
00017c44 g     F .text	000002bc altera_avalon_jtag_uart_read
00000f78 g     F .text	00000030 _printf_r
00000dc4 g     F .text	00000064 .hidden __udivsi3
0000f1a4 g     F .text	000000ac isatty
0001b51c g     O .rwdata	00000002 OSStkWidth
000196ac g     O .rodata	000000c8 __mprec_tens
0001b510 g     O .rwdata	00000002 OSPtrSize
00006b14 g     F .text	0000000c __locale_charset
0001b4f0 g     O .rwdata	00000002 OSEventTblSize
00018b70 g       .text	00000000 OSCtxSw
00000bf8 g     F .text	00000094 _ZN9buttons_c4initEPFvhE
0001d100 g     O .bss	00000004 __malloc_top_pad
0001d138 g     O .bss	00000004 OSTCBList
0001d108 g     O .bss	00000004 alt_fd_list_lock
0001b4a8 g     O .rwdata	00000004 __mb_cur_max
00006b44 g     F .text	0000000c _localeconv_r
00007e9c g     F .text	0000003c __i2b
00006448 g     F .text	000004c8 __sfvwrite_r
0001f670 g     O .bss	00000c30 OSMemTbl
0001d13c g     O .bss	00000001 OSTickStepState
000092e8 g     F .text	00000054 _sbrk_r
0001b514 g     O .rwdata	00000002 OSQMax
000202a0 g     O .bss	00000800 OSTaskStatStk
0001374c g     F .text	000000f0 OSMemNameGet
0001b4f4 g     O .rwdata	00000002 OSFlagEn
0000b35c g     F .text	00000060 _read_r
0001b53a g     O .rwdata	00000002 OSTimeTickHookEn
000133e4 g     F .text	000000a4 OS_FlagUnlink
00014604 g     F .text	00000168 OSQPost
0001b4c8 g     O .rwdata	00000004 alt_max_fd
000114a8 g     F .text	00000068 OS_MemCopy
00011510 g     F .text	000000d0 OS_Sched
0000af40 g     F .text	000000f0 _fclose_r
0001365c g     F .text	000000f0 OSMemGet
000165f8 g     F .text	000001b4 OSTaskNameSet
00005c34 g     F .text	00000030 fflush
0001d0fc g     O .bss	00000004 __malloc_max_sbrked_mem
0001d140 g     O .bss	00000004 OSCtxSwCtr
00018e24 g     F .text	00000020 OSTimeTickHook
0001b4fe g     O .rwdata	00000002 OSFlagNameSize
00010f74 g     F .text	00000100 OS_EventTaskRemoveMulti
0000c3f0 g     F .text	000008ac .hidden __adddf3
00010d6c g     F .text	00000150 OS_EventTaskWaitMulti
000086ac g     F .text	0000010c __b2d
0001b516 g     O .rwdata	00000002 OSQSize
0000be04 g     F .text	000005c4 .hidden __umoddi3
0000f378 g     F .text	000000dc lseek
000150b4 g     F .text	0000020c OSSemPend
0001b4a0 g     O .rwdata	00000004 _global_impure_ptr
00008b20 g     F .text	00000564 _realloc_r
0001b500 g     O .rwdata	00000002 OSLowestPrio
00022524 g       *ABS*	00000000 __bss_end
0000f078 g     F .text	000000f0 alt_iic_isr_register
00018ea4 g     F .text	00000024 OSTCBInitHook
0001b546 g     O .rwdata	00000002 OSTmrCfgTicksPerSec
00018a44 g     F .text	00000108 alt_tick
0000b808 g     F .text	000005fc .hidden __udivdi3
0000b1a8 g     F .text	00000024 _fputwc_r
0001b4e8 g     O .rwdata	00000002 OSEventEn
00019684 g     O .rodata	00000028 __mprec_bigtens
00007c80 g     F .text	00000104 __s2b
0001b542 g     O .rwdata	00000002 OSTmrCfgNameSize
0000eb88 g     F .text	000000a8 .hidden __floatunsidf
000083ec g     F .text	00000060 __mcmp
00005fe4 g     F .text	00000018 __fp_lock_all
0000f02c g     F .text	0000004c alt_ic_irq_enabled
00013210 g     F .text	000000e0 OS_FlagInit
000189a8 g     F .text	0000009c alt_alarm_stop
0001b524 g     O .rwdata	00000002 OSTaskIdleStkSize
0001d10c g     O .bss	00000004 alt_irq_active
00014cec g     F .text	000000b0 OSSemAccept
00013950 g     F .text	000000d8 OSMemPut
00013488 g     F .text	000001d4 OSMemCreate
0001d144 g     O .bss	00000004 OSIdleCtrMax
000000ec g     F .exceptions	000000d4 alt_irq_handler
0001a288 g     O .rwdata	00000028 alt_dev_null
0001b538 g     O .rwdata	00000002 OSTicksPerSec
00000928 g     F .text	00000078 _Z7consolePv
00018b70 g       .text	00000000 OSIntCtxSw
000183e4 g     F .text	00000020 alt_dcache_flush_all
00007d84 g     F .text	00000068 __hi0bits
0000ea2c g     F .text	00000080 .hidden __fixdfsi
0001f184 g     O .bss	00000032 player_name
0001d148 g     O .bss	00000004 OSTCBFreeList
0001b55c g       *ABS*	00000000 __ram_rwdata_end
000152c0 g     F .text	0000016c OSSemPendAbort
0001b4c0 g     O .rwdata	00000008 alt_dev_list
0000f7c0 g     F .text	00000100 write
0001b53c g     O .rwdata	00000002 OSVersionNbr
000199e4 g       *ABS*	00000000 __ram_rodata_end
0000ee10 g     F .text	000000b8 fstat
0000d7d0 g     F .text	000000f4 .hidden __ledf2
0001b4e4 g     O .rwdata	00000004 OSEndiannessTest
00008164 g     F .text	00000140 __pow5mult
000097cc g     F .text	0000150c ___vfiprintf_internal_r
0001d0f4 g     O .bss	00000004 __nlocale_changed
00000e28 g     F .text	00000058 .hidden __umodsi3
0001b4f6 g     O .rwdata	00000002 OSFlagGrpSize
00022524 g       *ABS*	00000000 end
000175fc g     F .text	00000148 altera_avalon_jtag_uart_init
00011778 g     F .text	000000cc OS_TaskStat
0001946c g       *ABS*	00000000 __CTOR_LIST__
00030000 g       *ABS*	00000000 __alt_stack_pointer
00000b28 g     F .text	00000054 _ZN9buttons_cC2Emmm
0001823c g     F .text	0000007c alt_avalon_timer_sc_init
0000ec30 g     F .text	00000064 .hidden __clzsi2
00017f00 g     F .text	000002c4 altera_avalon_jtag_uart_write
00005fd4 g     F .text	00000004 __sfp_lock_acquire
0000753c g     F .text	000000e4 memchr
00011454 g     F .text	00000054 OS_MemClr
00001c04 g     F .text	000022dc ___vfprintf_internal_r
00018c40 g     F .text	0000015c OSTaskStkInit
00006138 g     F .text	00000310 _free_r
00006b20 g     F .text	00000010 __locale_mb_cur_max
00010ac4 g     F .text	00000198 OS_EventTaskRdy
000192b8 g     F .text	00000180 __call_exitprocs
00001134 g     F .text	00000074 __srget_r
0001d14c g     O .bss	00000001 OSCPUUsage
0001d0f0 g     O .bss	00000004 __mlocale_changed
0001b4ac g     O .rwdata	00000004 __malloc_sbrk_base
000001c0 g     F .text	0000003c _start
0001d17c g     O .bss	00000004 _alt_tick_rate
0001420c g     F .text	0000028c OSQPend
00001798 g     F .text	000003b0 strstr
00016eb8 g     F .text	00000104 OSTimeDly
000010d0 g     F .text	00000064 rand
000082a4 g     F .text	00000148 __lshift
0001d180 g     O .bss	00000004 _alt_nticks
0000f54c g     F .text	00000104 read
00017434 g     F .text	00000064 alt_sys_init
000191a0 g     F .text	00000118 __register_exitproc
0001d14d g     O .bss	00000001 OSTaskCtr
00016fbc g     F .text	0000017c OSTimeDlyHMSM
00007ed8 g     F .text	0000028c __multiply
00017aec g     F .text	00000068 altera_avalon_jtag_uart_close
0000c3c8 g     F .text	00000028 .hidden __mulsi3
000199e4 g       *ABS*	00000000 __ram_rwdata_start
00019470 g       *ABS*	00000000 __ram_rodata_start
0001f1d8 g     O .bss	00000028 __malloc_current_mallinfo
0001b4ea g     O .rwdata	00000002 OSEventMax
000087b8 g     F .text	0000014c __d2b
0001542c g     F .text	00000110 OSSemPost
00010668 g     F .text	000000dc OSSchedUnlock
00017498 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
00019060 g     F .text	000000f4 alt_get_fd
0001d150 g     O .bss	00000004 OSMemFreeList
000107b4 g     F .text	000000b0 OSStatInit
00012fec g     F .text	000000c4 OSFlagQuery
0001d0e0 g     O .bss	00000004 player_queue
0001b520 g     O .rwdata	00000002 OSTaskCreateExtEn
0000ae10 g     F .text	00000054 _close_r
00001b48 g     F .text	00000018 strtok
00007620 g     F .text	0000007c memcmp
00010aa4 g     F .text	00000020 OS_Dummy
00017558 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
00022524 g       *ABS*	00000000 __alt_stack_base
000175a8 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
0001d0d8 g     O .bss	00000004 start_sem
00003fb8 g     F .text	00000154 __swsetup_r
00020aa0 g     O .bss	000001e0 OSQTbl
0000cc9c g     F .text	000009d0 .hidden __divdf3
00005e94 g     F .text	00000118 __sfp
00008a1c g     F .text	00000078 __copybits
00019e80 g     O .rwdata	00000408 __malloc_av_
00005fe0 g     F .text	00000004 __sinit_lock_release
0001d154 g     O .bss	00000004 OSTCBHighRdy
0000d8c4 g     F .text	0000086c .hidden __muldf3
0000933c g     F .text	00000054 __sread
0001d158 g     O .bss	00000004 OSQFreeList
00018f58 g     F .text	00000108 alt_find_file
00018440 g     F .text	000000a4 alt_dev_llist_insert
0000f9e4 g     F .text	00000120 __malloc_lock
0000f6d4 g     F .text	000000b0 sbrk
0000fcf0 g     F .text	00000140 OSEventNameSet
00005bd8 g     F .text	0000005c _fflush_r
0001d0dc g     O .bss	00000004 stop_sem
00000c8c g     F .text	00000040 _ZN9buttons_c7pressedEh
0000ae64 g     F .text	000000dc _calloc_r
0001d15c g     O .bss	00000001 OSRdyGrp
0001d0d4 g       *ABS*	00000000 __bss_start
00007940 g     F .text	00000128 memset
000009a0 g     F .text	000000f4 main
0001d118 g     O .bss	00000004 alt_envp
0001d0f8 g     O .bss	00000004 __malloc_max_total_mem
000174f8 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
0001f1b8 g     O .bss	00000014 buttons
0000b4fc g     F .text	00000018 __swbuf
000010b8 g     F .text	00000018 srand
000198b0 g     O .rodata	00000100 OSUnMapTbl
0001b51a g     O .rwdata	00000002 OSSemEn
00012c58 g     F .text	00000394 OSFlagPost
00009470 g     F .text	00000008 __sclose
00030000 g       *ABS*	00000000 __alt_heap_limit
0000b030 g     F .text	00000014 fclose
00010c5c g     F .text	00000110 OS_EventTaskWait
0001e184 g     O .bss	00001000 task2_stk
00011844 g     F .text	000000cc OS_TaskStatStkChk
00016310 g     F .text	00000150 OSTaskDelReq
00004334 g     F .text	00001688 _dtoa_r
00006d30 g     F .text	0000080c _malloc_r
0000b670 g     F .text	00000030 __ascii_wctomb
000001fc g     F .text	000000d4 _Z10show_scorej
0001b4cc g     O .rwdata	00000004 alt_errno
00010744 g     F .text	00000070 OSStart
0000f984 g     F .text	00000060 __env_unlock
000008b4 g     F .text	00000074 _Z7receivev
00006910 g     F .text	000000c4 _fwalk
000167ac g     F .text	000001d4 OSTaskResume
00013a28 g     F .text	000000e8 OSMemQuery
0001b52c g     O .rwdata	00000002 OSTaskStatEn
0000034c g     F .text	00000064 _Z10button_isrh
0001b506 g     O .rwdata	00000002 OSMemMax
0001476c g     F .text	00000170 OSQPostFront
00000ccc g     F .text	00000084 .hidden __divsi3
0001d15d g     O .bss	00000003 OSRdyTbl
0001b4e0 g     O .rwdata	00000002 OSDebugEn
00006014 g     F .text	00000124 _malloc_trim_r
00019470 g       *ABS*	00000000 __CTOR_END__
0001b4f8 g     O .rwdata	00000002 OSFlagNodeSize
0001b540 g     O .rwdata	00000002 OSTmrCfgMax
000095dc g     F .text	000000dc strcmp
00013d28 g     F .text	000001ac OSQCreate
00016460 g     F .text	00000198 OSTaskNameGet
00019470 g       *ABS*	00000000 __flash_rodata_start
000148dc g     F .text	0000020c OSQPostOpt
00010864 g     F .text	00000220 OSTimeTick
0001b528 g     O .rwdata	00000002 OSTaskMax
00019470 g       *ABS*	00000000 __DTOR_LIST__
00014d9c g     F .text	000000d8 OSSemCreate
0001b54c g     O .rwdata	00000002 OSTmrWheelSize
000002d0 g     F .text	0000007c _Z10show_triesj
0000d66c g     F .text	00000088 .hidden __nedf2
0001b522 g     O .rwdata	00000002 OSTaskDelEn
0001553c g     F .text	00000110 OSSemQuery
00013ed4 g     F .text	00000280 OSQDel
00014498 g     F .text	0000016c OSQPendAbort
000173fc g     F .text	00000038 alt_irq_init
0000f650 g     F .text	00000084 alt_release_fd
00019794 g     O .rodata	00000100 .hidden __clz_tab
0001d0ec g     O .bss	00000004 _PathLocale
00019154 g     F .text	00000014 atexit
0000adb0 g     F .text	00000060 _write_r
000105dc g     F .text	0000008c OSSchedLock
00006b50 g     F .text	00000018 setlocale
0001207c g     F .text	00000108 OSFlagCreate
0001b4a4 g     O .rwdata	00000004 _impure_ptr
0001d110 g     O .bss	00000004 alt_argc
000059bc g     F .text	0000021c __sflush_r
00018544 g     F .text	00000060 _do_dtors
00006b3c g     F .text	00000008 __locale_cjk_lang
0001b4f2 g     O .rwdata	00000002 OSEventMultiEn
000090a0 g     F .text	000001d4 __srefill_r
00012184 g     F .text	00000248 OSFlagDel
0001d160 g     O .bss	00000004 OSEventFreeList
00000020 g       .exceptions	00000000 alt_irq_entry
00008648 g     F .text	00000064 __ulp
00012640 g     F .text	000005b8 OSFlagPend
0001b53e g     O .rwdata	00000002 OSTmrEn
00005ffc g     F .text	00000018 __fp_unlock_all
0001b4b8 g     O .rwdata	00000008 alt_fs_list
00011654 g     F .text	00000074 OS_StrCopy
0001b508 g     O .rwdata	00000002 OSMemNameSize
00018e64 g     F .text	00000020 OSInitHookEnd
00000020 g       *ABS*	00000000 __ram_exceptions_start
0001b534 g     O .rwdata	00000002 OSTCBPrioTblMax
00006b68 g     F .text	0000000c localeconv
0001b530 g     O .rwdata	00000002 OSTaskStatStkChkEn
0000eec8 g     F .text	00000050 alt_ic_isr_register
0001b504 g     O .rwdata	00000002 OSMemEn
0001b50e g     O .rwdata	00000002 OSMutexEn
0001b55c g       *ABS*	00000000 _edata
00000b28 g     F .text	00000054 _ZN9buttons_cC1Emmm
00022524 g       *ABS*	00000000 _end
0001d164 g     O .bss	00000001 OSIntNesting
0000b044 g     F .text	00000164 __fputwc
000001c0 g       *ABS*	00000000 __ram_exceptions_end
00017b54 g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
00017138 g     F .text	000001d4 OSTimeDlyResume
000124f4 g     F .text	0000014c OSFlagNameSet
00016980 g     F .text	000001c0 OSTaskStkChk
0000efa0 g     F .text	0000008c alt_ic_irq_disable
0001b50a g     O .rwdata	00000002 OSMemSize
00009398 g     F .text	0000007c __swrite
00000000 g       *ABS*	00000000 __alt_mem_memory
0001b4b0 g     O .rwdata	00000004 __malloc_trim_threshold
00018b4c g     F .text	00000024 altera_nios2_qsys_irq_init
00006b30 g     F .text	0000000c __locale_msgcharset
0001d168 g     O .bss	00000004 OSTCBCur
00019168 g     F .text	00000038 exit
0001b50c g     O .rwdata	00000002 OSMemTblSize
000069d4 g     F .text	000000c4 _fwalk_reent
0000844c g     F .text	000001fc __mdiff
00000d50 g     F .text	00000074 .hidden __modsi3
00030000 g       *ABS*	00000000 __alt_data_end
00000020 g     F .exceptions	00000000 alt_exception
00005fd8 g     F .text	00000004 __sfp_lock_release
00010440 g     F .text	00000058 OSInit
00016d24 g     F .text	00000124 OSTaskQuery
00014c44 g     F .text	000000a8 OS_QInit
000116c8 g     F .text	00000054 OS_StrLen
0001383c g     F .text	00000114 OSMemNameSet
0001b526 g     O .rwdata	00000002 OSTaskProfileEn
0001d16c g     O .bss	00000004 OSTime
00020c80 g     O .bss	00000800 OSTaskIdleStk
00019438 g     F .text	00000034 _exit
000182b8 g     F .text	0000012c alt_alarm_start
000123cc g     F .text	00000128 OSFlagNameGet
0001730c g     F .text	0000005c OSTimeGet
0000b6fc g     F .text	0000010c .hidden __muldi3
00006b74 g     F .text	000001bc __smakebuf_r
0000124c g     F .text	00000098 strlen
00018de4 g     F .text	00000020 OSTaskSwHook
0001884c g     F .text	0000015c open
00021480 g     O .bss	00000b40 OSEventTbl
0000d6f4 g     F .text	000000dc .hidden __gedf2
00021fc0 g     O .bss	00000510 OSTCBTbl
0001564c g     F .text	00000100 OSSemSet
0001b4b4 g     O .rwdata	00000004 __wctomb
000097b4 g     F .text	00000018 __sprint_r
000185a4 g     F .text	00000020 alt_icache_flush_all
00009478 g     F .text	00000164 strchr
0001b4d0 g     O .rwdata	00000004 alt_priority_mask
00014e74 g     F .text	00000240 OSSemDel
0001d170 g     O .bss	00000004 OSFlagFreeList
0000ef18 g     F .text	00000088 alt_ic_irq_enable
0001b4ec g     O .rwdata	00000002 OSEventNameSize
00003ee0 g     F .text	0000001c __vfprintf_internal
0001d174 g     O .bss	00000001 OSStatRdy
000224d0 g     O .bss	00000054 OSTCBPrioTbl
0000b6a0 g     F .text	0000005c _wctomb_r
0000f8c0 g     F .text	000000c4 __env_lock
0001b532 g     O .rwdata	00000002 OSTaskSwHookEn
0000e130 g     F .text	000008fc .hidden __subdf3
00007dec g     F .text	000000b0 __lo0bits
0001b554 g     O .rwdata	00000008 alt_alarm_list
0001b4fa g     O .rwdata	00000002 OSFlagWidth
000184e4 g     F .text	00000060 _do_ctors
0000b5b0 g     F .text	000000c0 wcrtomb
0000ecd0 g     F .text	000000d8 close
0001d120 g     O .bss	00000004 alt_envsem
0001d178 g     O .bss	00000004 OSIdleCtrRun
00010a84 g     F .text	00000020 OSVersion
0001b544 g     O .rwdata	00000002 OSTmrCfgWheelSize
0000f2b8 g     F .text	00000084 alt_load
00016e48 g     F .text	00000070 OS_TaskStkClr
0001b51e g     O .rwdata	00000002 OSTaskCreateEn
00011074 g     F .text	00000068 OS_EventWaitListInit
0000b1cc g     F .text	00000080 fputwc
00018e84 g     F .text	00000020 OSTaskIdleHook
00005fdc g     F .text	00000004 __sinit_lock_acquire
00007b38 g     F .text	00000148 __multadd
00016b40 g     F .text	000001e4 OSTaskSuspend
00007b10 g     F .text	00000028 _Bfree
0001171c g     F .text	0000005c OS_TaskIdle
0001b54a g     O .rwdata	00000002 OSTmrTblSize
00014ae8 g     F .text	0000015c OSQQuery



Disassembly of section .entry:

00000000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   0:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
   4:	08407014 	ori	at,at,448
    jmp r1
   8:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

00000020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
  20:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
  24:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
  28:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
  2c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
  30:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
  34:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
  38:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
  3c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
  40:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
  44:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
  48:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
  4c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
  50:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
  54:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
  58:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
  5c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
  60:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
  64:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
  68:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
  6c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  70:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
  74:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
  78:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
  7c:	10000326 	beq	r2,zero,8c <OSCtxSw_SWITCH_PC+0x4c>
        beq   r4, zero, .Lnot_irq
  80:	20000226 	beq	r4,zero,8c <OSCtxSw_SWITCH_PC+0x4c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
  84:	00000ec0 	call	ec <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
  88:	00000306 	br	98 <alt_exception_unknown+0x4>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
  8c:	df401215 	stw	ea,72(sp)
        ldw   r2, -4(ea)   /* Instruction that caused exception */
  90:	e8bfff17 	ldw	r2,-4(ea)

00000094 <alt_exception_unknown>:
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
  94:	003da03a 	break	0
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
  98:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
  9c:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
  a0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
  a4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
  a8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
  ac:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
  b0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
  b4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
  b8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
  bc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
  c0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
  c4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
  c8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
  cc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
  d0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
  d4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
  d8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
  dc:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
  e0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
  e4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
  e8:	ef80083a 	eret

000000ec <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
  ec:	defff904 	addi	sp,sp,-28
  f0:	dfc00615 	stw	ra,24(sp)
  f4:	df000515 	stw	fp,20(sp)
  f8:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
  fc:	00104980 	call	10498 <OSIntEnter>
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 100:	0005313a 	rdctl	r2,ipending
 104:	e0bffe15 	stw	r2,-8(fp)

  return active;
 108:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 10c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
 110:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 114:	00800044 	movi	r2,1
 118:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 11c:	e0fffb17 	ldw	r3,-20(fp)
 120:	e0bffc17 	ldw	r2,-16(fp)
 124:	1884703a 	and	r2,r3,r2
 128:	10001426 	beq	r2,zero,17c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
 12c:	008000b4 	movhi	r2,2
 130:	10bc8004 	addi	r2,r2,-3584
 134:	e0fffd17 	ldw	r3,-12(fp)
 138:	180690fa 	slli	r3,r3,3
 13c:	10c5883a 	add	r2,r2,r3
 140:	10c00017 	ldw	r3,0(r2)
 144:	008000b4 	movhi	r2,2
 148:	10bc8004 	addi	r2,r2,-3584
 14c:	e13ffd17 	ldw	r4,-12(fp)
 150:	200890fa 	slli	r4,r4,3
 154:	1105883a 	add	r2,r2,r4
 158:	10800104 	addi	r2,r2,4
 15c:	10800017 	ldw	r2,0(r2)
 160:	1009883a 	mov	r4,r2
 164:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
 168:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 16c:	0005313a 	rdctl	r2,ipending
 170:	e0bfff15 	stw	r2,-4(fp)

  return active;
 174:	e0bfff17 	ldw	r2,-4(fp)
 178:	00000706 	br	198 <alt_irq_handler+0xac>
      }
      mask <<= 1;
 17c:	e0bffc17 	ldw	r2,-16(fp)
 180:	1085883a 	add	r2,r2,r2
 184:	e0bffc15 	stw	r2,-16(fp)
      i++;
 188:	e0bffd17 	ldw	r2,-12(fp)
 18c:	10800044 	addi	r2,r2,1
 190:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 194:	003fe106 	br	11c <__alt_data_end+0xfffd011c>

    active = alt_irq_pending ();
 198:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
 19c:	e0bffb17 	ldw	r2,-20(fp)
 1a0:	103fdb1e 	bne	r2,zero,110 <__alt_data_end+0xfffd0110>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
 1a4:	00104e40 	call	104e4 <OSIntExit>
}
 1a8:	0001883a 	nop
 1ac:	e037883a 	mov	sp,fp
 1b0:	dfc00117 	ldw	ra,4(sp)
 1b4:	df000017 	ldw	fp,0(sp)
 1b8:	dec00204 	addi	sp,sp,8
 1bc:	f800283a 	ret

Disassembly of section .text:

000001c0 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
     1c0:	06c000f4 	movhi	sp,3
    ori sp, sp, %lo(__alt_stack_pointer)
     1c4:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
     1c8:	068000b4 	movhi	gp,2
    ori gp, gp, %lo(_gp)
     1cc:	d68d2714 	ori	gp,gp,13468
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
     1d0:	00800074 	movhi	r2,1
    ori r2, r2, %lo(__bss_start)
     1d4:	10b43514 	ori	r2,r2,53460

    movhi r3, %hi(__bss_end)
     1d8:	00c000b4 	movhi	r3,2
    ori r3, r3, %lo(__bss_end)
     1dc:	18c94914 	ori	r3,r3,9508

    beq r2, r3, 1f
     1e0:	10c00326 	beq	r2,r3,1f0 <_start+0x30>

0:
    stw zero, (r2)
     1e4:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
     1e8:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
     1ec:	10fffd36 	bltu	r2,r3,1e4 <__alt_data_end+0xfffd01e4>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
     1f0:	000f2b80 	call	f2b8 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
     1f4:	000f4540 	call	f454 <alt_main>

000001f8 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
     1f8:	003fff06 	br	1f8 <__alt_data_end+0xfffd01f8>

000001fc <_Z10show_scorej>:
static void *player_queue_buffer[MAX_MSG_AMT];
char player_name[50];

buttons_c buttons(BUTTONS_BASE, BUTTONS_IRQ_INTERRUPT_CONTROLLER_ID, BUTTONS_IRQ);

void show_score(unsigned int score){
     1fc:	defffc04 	addi	sp,sp,-16
     200:	dfc00315 	stw	ra,12(sp)
     204:	df000215 	stw	fp,8(sp)
     208:	df000204 	addi	fp,sp,8
     20c:	e13fff15 	stw	r4,-4(fp)
	int data = score % 10;
     210:	e0bfff17 	ldw	r2,-4(fp)
     214:	01400284 	movi	r5,10
     218:	1009883a 	mov	r4,r2
     21c:	0000e280 	call	e28 <__umodsi3>
     220:	e0bffe15 	stw	r2,-8(fp)
	data |= (score / 10 % 10) << 4;
     224:	e0bfff17 	ldw	r2,-4(fp)
     228:	01400284 	movi	r5,10
     22c:	1009883a 	mov	r4,r2
     230:	0000dc40 	call	dc4 <__udivsi3>
     234:	01400284 	movi	r5,10
     238:	1009883a 	mov	r4,r2
     23c:	0000e280 	call	e28 <__umodsi3>
     240:	1006913a 	slli	r3,r2,4
     244:	e0bffe17 	ldw	r2,-8(fp)
     248:	1884b03a 	or	r2,r3,r2
     24c:	e0bffe15 	stw	r2,-8(fp)
	data |= (score / 100 % 10) << 8;
     250:	e0bfff17 	ldw	r2,-4(fp)
     254:	01401904 	movi	r5,100
     258:	1009883a 	mov	r4,r2
     25c:	0000dc40 	call	dc4 <__udivsi3>
     260:	01400284 	movi	r5,10
     264:	1009883a 	mov	r4,r2
     268:	0000e280 	call	e28 <__umodsi3>
     26c:	1006923a 	slli	r3,r2,8
     270:	e0bffe17 	ldw	r2,-8(fp)
     274:	1884b03a 	or	r2,r3,r2
     278:	e0bffe15 	stw	r2,-8(fp)
	data |= (score / 1000 % 10) << 12;
     27c:	e0bfff17 	ldw	r2,-4(fp)
     280:	0140fa04 	movi	r5,1000
     284:	1009883a 	mov	r4,r2
     288:	0000dc40 	call	dc4 <__udivsi3>
     28c:	01400284 	movi	r5,10
     290:	1009883a 	mov	r4,r2
     294:	0000e280 	call	e28 <__umodsi3>
     298:	1006933a 	slli	r3,r2,12
     29c:	e0bffe17 	ldw	r2,-8(fp)
     2a0:	1884b03a 	or	r2,r3,r2
     2a4:	e0bffe15 	stw	r2,-8(fp)
	IOWR_32DIRECT(SEVEN_SEGMENT_CONTROLLER_0_BASE, 4, data);
     2a8:	00800134 	movhi	r2,4
     2ac:	10841704 	addi	r2,r2,4188
     2b0:	e0fffe17 	ldw	r3,-8(fp)
     2b4:	10c00035 	stwio	r3,0(r2)
}
     2b8:	0001883a 	nop
     2bc:	e037883a 	mov	sp,fp
     2c0:	dfc00117 	ldw	ra,4(sp)
     2c4:	df000017 	ldw	fp,0(sp)
     2c8:	dec00204 	addi	sp,sp,8
     2cc:	f800283a 	ret

000002d0 <_Z10show_triesj>:

void show_tries(unsigned int tries){
     2d0:	defffc04 	addi	sp,sp,-16
     2d4:	dfc00315 	stw	ra,12(sp)
     2d8:	df000215 	stw	fp,8(sp)
     2dc:	df000204 	addi	fp,sp,8
     2e0:	e13fff15 	stw	r4,-4(fp)
	int data = tries % 10;
     2e4:	e0bfff17 	ldw	r2,-4(fp)
     2e8:	01400284 	movi	r5,10
     2ec:	1009883a 	mov	r4,r2
     2f0:	0000e280 	call	e28 <__umodsi3>
     2f4:	e0bffe15 	stw	r2,-8(fp)
	data |= (tries / 10 % 10) << 4;
     2f8:	e0bfff17 	ldw	r2,-4(fp)
     2fc:	01400284 	movi	r5,10
     300:	1009883a 	mov	r4,r2
     304:	0000dc40 	call	dc4 <__udivsi3>
     308:	01400284 	movi	r5,10
     30c:	1009883a 	mov	r4,r2
     310:	0000e280 	call	e28 <__umodsi3>
     314:	1006913a 	slli	r3,r2,4
     318:	e0bffe17 	ldw	r2,-8(fp)
     31c:	1884b03a 	or	r2,r3,r2
     320:	e0bffe15 	stw	r2,-8(fp)
	IOWR_32DIRECT(SEVEN_SEGMENT_CONTROLLER_0_BASE, 0, data);
     324:	00800134 	movhi	r2,4
     328:	10841604 	addi	r2,r2,4184
     32c:	e0fffe17 	ldw	r3,-8(fp)
     330:	10c00035 	stwio	r3,0(r2)
}
     334:	0001883a 	nop
     338:	e037883a 	mov	sp,fp
     33c:	dfc00117 	ldw	ra,4(sp)
     340:	df000017 	ldw	fp,0(sp)
     344:	dec00204 	addi	sp,sp,8
     348:	f800283a 	ret

0000034c <_Z10button_isrh>:

void button_isr(uint8_t pin){
     34c:	defffd04 	addi	sp,sp,-12
     350:	dfc00215 	stw	ra,8(sp)
     354:	df000115 	stw	fp,4(sp)
     358:	df000104 	addi	fp,sp,4
     35c:	2005883a 	mov	r2,r4
     360:	e0bfff05 	stb	r2,-4(fp)
	if(pin == START_KEY){
     364:	e0bfff03 	ldbu	r2,-4(fp)
     368:	10800058 	cmpnei	r2,r2,1
     36c:	1000041e 	bne	r2,zero,380 <_Z10button_isrh+0x34>
		OSSemPost(start_sem);
     370:	d0a70f17 	ldw	r2,-25540(gp)
     374:	1009883a 	mov	r4,r2
     378:	001542c0 	call	1542c <OSSemPost>
	} else if(pin == RESP_KEY){
		OSSemPost(stop_sem);
	}
}
     37c:	00000606 	br	398 <_Z10button_isrh+0x4c>
}

void button_isr(uint8_t pin){
	if(pin == START_KEY){
		OSSemPost(start_sem);
	} else if(pin == RESP_KEY){
     380:	e0bfff03 	ldbu	r2,-4(fp)
     384:	10800098 	cmpnei	r2,r2,2
     388:	1000031e 	bne	r2,zero,398 <_Z10button_isrh+0x4c>
		OSSemPost(stop_sem);
     38c:	d0a71017 	ldw	r2,-25536(gp)
     390:	1009883a 	mov	r4,r2
     394:	001542c0 	call	1542c <OSSemPost>
	}
}
     398:	0001883a 	nop
     39c:	e037883a 	mov	sp,fp
     3a0:	dfc00117 	ldw	ra,4(sp)
     3a4:	df000017 	ldw	fp,0(sp)
     3a8:	dec00204 	addi	sp,sp,8
     3ac:	f800283a 	ret

000003b0 <_Z11rotate_leftii>:

int rotate_left(int num, int shift){
     3b0:	defffd04 	addi	sp,sp,-12
     3b4:	df000215 	stw	fp,8(sp)
     3b8:	df000204 	addi	fp,sp,8
     3bc:	e13ffe15 	stw	r4,-8(fp)
     3c0:	e17fff15 	stw	r5,-4(fp)
    return (num << shift) | (num >> (9 - shift));
     3c4:	e0fffe17 	ldw	r3,-8(fp)
     3c8:	e0bfff17 	ldw	r2,-4(fp)
     3cc:	1886983a 	sll	r3,r3,r2
     3d0:	01000244 	movi	r4,9
     3d4:	e0bfff17 	ldw	r2,-4(fp)
     3d8:	2085c83a 	sub	r2,r4,r2
     3dc:	e13ffe17 	ldw	r4,-8(fp)
     3e0:	2085d83a 	sra	r2,r4,r2
     3e4:	1884b03a 	or	r2,r3,r2
}
     3e8:	e037883a 	mov	sp,fp
     3ec:	df000017 	ldw	fp,0(sp)
     3f0:	dec00104 	addi	sp,sp,4
     3f4:	f800283a 	ret

000003f8 <_ZL13user_registerv>:

static void user_register(){
     3f8:	defffc04 	addi	sp,sp,-16
     3fc:	dfc00315 	stw	ra,12(sp)
     400:	df000215 	stw	fp,8(sp)
     404:	df000204 	addi	fp,sp,8
	INT8U ret;
	static uint8_t rounds = 3;
	void* name;
	if(rounds++ >= 3){
     408:	d0a00003 	ldbu	r2,-32768(gp)
     40c:	10c00044 	addi	r3,r2,1
     410:	d0e00005 	stb	r3,-32768(gp)
     414:	10803fcc 	andi	r2,r2,255
     418:	108000e8 	cmpgeui	r2,r2,3
     41c:	10803fcc 	andi	r2,r2,255
     420:	10001426 	beq	r2,zero,474 <_ZL13user_registerv+0x7c>
		printf("Register your name with the 'name' command.");
     424:	010000b4 	movhi	r4,2
     428:	21251c04 	addi	r4,r4,-27536
     42c:	0000fa80 	call	fa8 <printf>
		name = OSQPend(player_queue, 0, &ret);
     430:	d0a71117 	ldw	r2,-25532(gp)
     434:	e0ffff04 	addi	r3,fp,-4
     438:	180d883a 	mov	r6,r3
     43c:	000b883a 	mov	r5,zero
     440:	1009883a 	mov	r4,r2
     444:	001420c0 	call	1420c <OSQPend>
     448:	e0bffe15 	stw	r2,-8(fp)
		strcpy(player_name, (char*)name);
     44c:	e17ffe17 	ldw	r5,-8(fp)
     450:	010000b4 	movhi	r4,2
     454:	213c6104 	addi	r4,r4,-3708
     458:	00011bc0 	call	11bc <strcpy>
		printf("Registered %s.", player_name);
     45c:	014000b4 	movhi	r5,2
     460:	297c6104 	addi	r5,r5,-3708
     464:	010000b4 	movhi	r4,2
     468:	21252704 	addi	r4,r4,-27492
     46c:	0000fa80 	call	fa8 <printf>
		rounds = 0;
     470:	d0200005 	stb	zero,-32768(gp)
	}
}
     474:	0001883a 	nop
     478:	e037883a 	mov	sp,fp
     47c:	dfc00117 	ldw	ra,4(sp)
     480:	df000017 	ldw	fp,0(sp)
     484:	dec00204 	addi	sp,sp,8
     488:	f800283a 	ret

0000048c <_Z14reaction_meterPv>:

void reaction_meter(void* pdata){
     48c:	defff604 	addi	sp,sp,-40
     490:	dfc00915 	stw	ra,36(sp)
     494:	df000815 	stw	fp,32(sp)
     498:	df000804 	addi	fp,sp,32
     49c:	e13fff15 	stw	r4,-4(fp)
	INT8U ret = OS_NO_ERR;
     4a0:	e03ffe85 	stb	zero,-6(fp)
	uint16_t highscore = UINT16_MAX;
     4a4:	00bfffc4 	movi	r2,-1
     4a8:	e0bff80d 	sth	r2,-32(fp)
	uint16_t response_time, leds = 0;
     4ac:	e03ff90d 	sth	zero,-28(fp)
	uint8_t tries = 0;
     4b0:	e03ff985 	stb	zero,-26(fp)

	enum states {IDLE, START, DELAY, COUNT, STOP};
	enum states state = IDLE;
     4b4:	e03ffa15 	stw	zero,-24(fp)

	while (1){
		switch(state){
     4b8:	e0bffa17 	ldw	r2,-24(fp)
     4bc:	10c00168 	cmpgeui	r3,r2,5
     4c0:	183ffd1e 	bne	r3,zero,4b8 <__alt_data_end+0xfffd04b8>
     4c4:	100690ba 	slli	r3,r2,2
     4c8:	00800034 	movhi	r2,0
     4cc:	10813704 	addi	r2,r2,1244
     4d0:	1885883a 	add	r2,r3,r2
     4d4:	10800017 	ldw	r2,0(r2)
     4d8:	1000683a 	jmp	r2
     4dc:	000004f0 	cmpltui	zero,zero,19
     4e0:	00000598 	cmpnei	zero,zero,22
     4e4:	00000610 	cmplti	zero,zero,24
     4e8:	000006d8 	cmpnei	zero,zero,27
     4ec:	000007ec 	andhi	zero,zero,31
		case IDLE: {
			IOWR_ALTERA_AVALON_PIO_DATA(MEASUREMENT_BASE, 1UL << state);
     4f0:	e0bffa17 	ldw	r2,-24(fp)
     4f4:	00c00044 	movi	r3,1
     4f8:	1884983a 	sll	r2,r3,r2
     4fc:	1007883a 	mov	r3,r2
     500:	00800134 	movhi	r2,4
     504:	10840804 	addi	r2,r2,4128
     508:	10c00035 	stwio	r3,0(r2)
			if(highscore != UINT16_MAX){
     50c:	e0fff80b 	ldhu	r3,-32(fp)
     510:	00bfffd4 	movui	r2,65535
     514:	18800426 	beq	r3,r2,528 <_Z14reaction_meterPv+0x9c>
				show_score(highscore);
     518:	e0bff80b 	ldhu	r2,-32(fp)
     51c:	1009883a 	mov	r4,r2
     520:	00001fc0 	call	1fc <_Z10show_scorej>
     524:	00000206 	br	530 <_Z14reaction_meterPv+0xa4>
			} else {
				show_score(0);
     528:	0009883a 	mov	r4,zero
     52c:	00001fc0 	call	1fc <_Z10show_scorej>
			}
			show_tries(tries++);
     530:	e0bff983 	ldbu	r2,-26(fp)
     534:	10c00044 	addi	r3,r2,1
     538:	e0fff985 	stb	r3,-26(fp)
     53c:	10803fcc 	andi	r2,r2,255
     540:	1009883a 	mov	r4,r2
     544:	00002d00 	call	2d0 <_Z10show_triesj>
			leds = 0;
     548:	e03ff90d 	sth	zero,-28(fp)
			user_register();
     54c:	00003f80 	call	3f8 <_ZL13user_registerv>
			printf("Press KEY_0 whenever you're ready %s.", player_name);
     550:	014000b4 	movhi	r5,2
     554:	297c6104 	addi	r5,r5,-3708
     558:	010000b4 	movhi	r4,2
     55c:	21252b04 	addi	r4,r4,-27476
     560:	0000fa80 	call	fa8 <printf>
			IOWR_ALTERA_AVALON_PIO_DATA(LEDS_BASE, leds);
     564:	e0fff90b 	ldhu	r3,-28(fp)
     568:	00800134 	movhi	r2,4
     56c:	10840c04 	addi	r2,r2,4144
     570:	10c00035 	stwio	r3,0(r2)
			OSSemPend(start_sem, 0, &ret);
     574:	d0a70f17 	ldw	r2,-25540(gp)
     578:	e0fffe84 	addi	r3,fp,-6
     57c:	180d883a 	mov	r6,r3
     580:	000b883a 	mov	r5,zero
     584:	1009883a 	mov	r4,r2
     588:	00150b40 	call	150b4 <OSSemPend>
			state = START;
     58c:	00800044 	movi	r2,1
     590:	e0bffa15 	stw	r2,-24(fp)
			break;
     594:	0000c606 	br	8b0 <_Z14reaction_meterPv+0x424>
		}
		case START: {
			IOWR_ALTERA_AVALON_PIO_DATA(MEASUREMENT_BASE, 1UL << state);
     598:	e0bffa17 	ldw	r2,-24(fp)
     59c:	00c00044 	movi	r3,1
     5a0:	1884983a 	sll	r2,r3,r2
     5a4:	1007883a 	mov	r3,r2
     5a8:	00800134 	movhi	r2,4
     5ac:	10840804 	addi	r2,r2,4128
     5b0:	10c00035 	stwio	r3,0(r2)
			show_score(0);
     5b4:	0009883a 	mov	r4,zero
     5b8:	00001fc0 	call	1fc <_Z10show_scorej>
			printf("Waiting for button to be released!\n");
     5bc:	010000b4 	movhi	r4,2
     5c0:	21253504 	addi	r4,r4,-27436
     5c4:	00010a40 	call	10a4 <puts>
			while(buttons.pressed(START_KEY)){
     5c8:	01400044 	movi	r5,1
     5cc:	010000b4 	movhi	r4,2
     5d0:	213c6e04 	addi	r4,r4,-3656
     5d4:	0000c8c0 	call	c8c <_ZN9buttons_c7pressedEh>
     5d8:	10803fcc 	andi	r2,r2,255
     5dc:	10000626 	beq	r2,zero,5f8 <_Z14reaction_meterPv+0x16c>
				OSTimeDlyHMSM(0, 0, 0, 1);
     5e0:	01c00044 	movi	r7,1
     5e4:	000d883a 	mov	r6,zero
     5e8:	000b883a 	mov	r5,zero
     5ec:	0009883a 	mov	r4,zero
     5f0:	0016fbc0 	call	16fbc <OSTimeDlyHMSM>
		}
		case START: {
			IOWR_ALTERA_AVALON_PIO_DATA(MEASUREMENT_BASE, 1UL << state);
			show_score(0);
			printf("Waiting for button to be released!\n");
			while(buttons.pressed(START_KEY)){
     5f4:	003ff406 	br	5c8 <__alt_data_end+0xfffd05c8>
				OSTimeDlyHMSM(0, 0, 0, 1);
			}
			printf("Button has been released!\n");
     5f8:	010000b4 	movhi	r4,2
     5fc:	21253e04 	addi	r4,r4,-27400
     600:	00010a40 	call	10a4 <puts>
			state = DELAY;
     604:	00800084 	movi	r2,2
     608:	e0bffa15 	stw	r2,-24(fp)
			break;
     60c:	0000a806 	br	8b0 <_Z14reaction_meterPv+0x424>
		}
		case DELAY: {
			IOWR_ALTERA_AVALON_PIO_DATA(MEASUREMENT_BASE, 1UL << state);
     610:	e0bffa17 	ldw	r2,-24(fp)
     614:	00c00044 	movi	r3,1
     618:	1884983a 	sll	r2,r3,r2
     61c:	1007883a 	mov	r3,r2
     620:	00800134 	movhi	r2,4
     624:	10840804 	addi	r2,r2,4128
     628:	10c00035 	stwio	r3,0(r2)
			int32_t sys_time = OSTimeGet();
     62c:	001730c0 	call	1730c <OSTimeGet>
     630:	e0bffd15 	stw	r2,-12(fp)
			srand(sys_time);
     634:	e0bffd17 	ldw	r2,-12(fp)
     638:	1009883a 	mov	r4,r2
     63c:	00010b80 	call	10b8 <srand>
			int16_t delay = (rand() % MAX_RAND_DELAY) + MIN_RAND_DELAY;
     640:	00010d00 	call	10d0 <rand>
     644:	0141f404 	movi	r5,2000
     648:	1009883a 	mov	r4,r2
     64c:	0000d500 	call	d50 <__modsi3>
     650:	1080fa04 	addi	r2,r2,1000
     654:	e0bffe0d 	sth	r2,-8(fp)
			printf("Starting random delay of %ims.\n", delay);
     658:	e0bffe0f 	ldh	r2,-8(fp)
     65c:	100b883a 	mov	r5,r2
     660:	010000b4 	movhi	r4,2
     664:	21254504 	addi	r4,r4,-27372
     668:	0000fa80 	call	fa8 <printf>
			OSTimeDly(delay);
     66c:	e0bffe0b 	ldhu	r2,-8(fp)
     670:	10bfffcc 	andi	r2,r2,65535
     674:	1009883a 	mov	r4,r2
     678:	0016eb80 	call	16eb8 <OSTimeDly>
			while(buttons.pressed(RESP_KEY)){
     67c:	01400084 	movi	r5,2
     680:	010000b4 	movhi	r4,2
     684:	213c6e04 	addi	r4,r4,-3656
     688:	0000c8c0 	call	c8c <_ZN9buttons_c7pressedEh>
     68c:	10803fcc 	andi	r2,r2,255
     690:	10000e26 	beq	r2,zero,6cc <_Z14reaction_meterPv+0x240>
				printf("Cheat prevention kicking in...\n");
     694:	010000b4 	movhi	r4,2
     698:	21254d04 	addi	r4,r4,-27340
     69c:	00010a40 	call	10a4 <puts>
				OSSemSet(stop_sem, 0, &ret);		// Reset semaphore.
     6a0:	d0a71017 	ldw	r2,-25536(gp)
     6a4:	e0fffe84 	addi	r3,fp,-6
     6a8:	180d883a 	mov	r6,r3
     6ac:	000b883a 	mov	r5,zero
     6b0:	1009883a 	mov	r4,r2
     6b4:	001564c0 	call	1564c <OSSemSet>
				OSTimeDly(delay);
     6b8:	e0bffe0b 	ldhu	r2,-8(fp)
     6bc:	10bfffcc 	andi	r2,r2,65535
     6c0:	1009883a 	mov	r4,r2
     6c4:	0016eb80 	call	16eb8 <OSTimeDly>
			int32_t sys_time = OSTimeGet();
			srand(sys_time);
			int16_t delay = (rand() % MAX_RAND_DELAY) + MIN_RAND_DELAY;
			printf("Starting random delay of %ims.\n", delay);
			OSTimeDly(delay);
			while(buttons.pressed(RESP_KEY)){
     6c8:	003fec06 	br	67c <__alt_data_end+0xfffd067c>
				printf("Cheat prevention kicking in...\n");
				OSSemSet(stop_sem, 0, &ret);		// Reset semaphore.
				OSTimeDly(delay);
			}
			state = COUNT;
     6cc:	008000c4 	movi	r2,3
     6d0:	e0bffa15 	stw	r2,-24(fp)
			break;
     6d4:	00007606 	br	8b0 <_Z14reaction_meterPv+0x424>
		}
		case COUNT: {
			IOWR_ALTERA_AVALON_PIO_DATA(MEASUREMENT_BASE, 1UL << state);
     6d8:	e0bffa17 	ldw	r2,-24(fp)
     6dc:	00c00044 	movi	r3,1
     6e0:	1884983a 	sll	r2,r3,r2
     6e4:	1007883a 	mov	r3,r2
     6e8:	00800134 	movhi	r2,4
     6ec:	10840804 	addi	r2,r2,4128
     6f0:	10c00035 	stwio	r3,0(r2)
			enum states next_state = IDLE;
     6f4:	e03ffb15 	stw	zero,-20(fp)
			for(uint16_t time = 0; time < RESP_TIMEOUT; time++){
     6f8:	e03ffc0d 	sth	zero,-16(fp)
     6fc:	e0bffc0b 	ldhu	r2,-16(fp)
     700:	1080fa28 	cmpgeui	r2,r2,1000
     704:	1000361e 	bne	r2,zero,7e0 <_Z14reaction_meterPv+0x354>
				if(time % (RESP_TIMEOUT / LED_AMT) == 0){
     708:	e0bffc0b 	ldhu	r2,-16(fp)
     70c:	01401904 	movi	r5,100
     710:	1009883a 	mov	r4,r2
     714:	0000e280 	call	e28 <__umodsi3>
     718:	10bfffcc 	andi	r2,r2,65535
     71c:	10000f1e 	bne	r2,zero,75c <_Z14reaction_meterPv+0x2d0>
					leds |= 1UL << time / (RESP_TIMEOUT / LED_AMT);
     720:	e0bffc0b 	ldhu	r2,-16(fp)
     724:	01401904 	movi	r5,100
     728:	1009883a 	mov	r4,r2
     72c:	0000dc40 	call	dc4 <__udivsi3>
     730:	10bfffcc 	andi	r2,r2,65535
     734:	00c00044 	movi	r3,1
     738:	1884983a 	sll	r2,r3,r2
     73c:	1007883a 	mov	r3,r2
     740:	e0bff90b 	ldhu	r2,-28(fp)
     744:	1884b03a 	or	r2,r3,r2
     748:	e0bff90d 	sth	r2,-28(fp)
					IOWR_ALTERA_AVALON_PIO_DATA(LEDS_BASE, leds);
     74c:	e0fff90b 	ldhu	r3,-28(fp)
     750:	00800134 	movhi	r2,4
     754:	10840c04 	addi	r2,r2,4144
     758:	10c00035 	stwio	r3,0(r2)
				}
				OSSemPend(stop_sem, 1, &ret); 	// Wait 1ms at max.
     75c:	d0a71017 	ldw	r2,-25536(gp)
     760:	e0fffe84 	addi	r3,fp,-6
     764:	180d883a 	mov	r6,r3
     768:	01400044 	movi	r5,1
     76c:	1009883a 	mov	r4,r2
     770:	00150b40 	call	150b4 <OSSemPend>
				if(ret != OS_TIMEOUT){
     774:	e0bffe83 	ldbu	r2,-6(fp)
     778:	10803fcc 	andi	r2,r2,255
     77c:	108002a0 	cmpeqi	r2,r2,10
     780:	1000131e 	bne	r2,zero,7d0 <_Z14reaction_meterPv+0x344>
					if(time < MIN_RESP_TIME){
     784:	e0bffc0b 	ldhu	r2,-16(fp)
     788:	10801428 	cmpgeui	r2,r2,80
     78c:	1000061e 	bne	r2,zero,7a8 <_Z14reaction_meterPv+0x31c>
						printf("Impossible response-time of %ims detected; invalid!\n", time);
     790:	e0bffc0b 	ldhu	r2,-16(fp)
     794:	100b883a 	mov	r5,r2
     798:	010000b4 	movhi	r4,2
     79c:	21255504 	addi	r4,r4,-27308
     7a0:	0000fa80 	call	fa8 <printf>
					} else {
						printf("Responded within %ims!\n", time);
						response_time = time;
						next_state = STOP;
					}
					break;
     7a4:	00000e06 	br	7e0 <_Z14reaction_meterPv+0x354>
				OSSemPend(stop_sem, 1, &ret); 	// Wait 1ms at max.
				if(ret != OS_TIMEOUT){
					if(time < MIN_RESP_TIME){
						printf("Impossible response-time of %ims detected; invalid!\n", time);
					} else {
						printf("Responded within %ims!\n", time);
     7a8:	e0bffc0b 	ldhu	r2,-16(fp)
     7ac:	100b883a 	mov	r5,r2
     7b0:	010000b4 	movhi	r4,2
     7b4:	21256304 	addi	r4,r4,-27252
     7b8:	0000fa80 	call	fa8 <printf>
						response_time = time;
     7bc:	e0bffc0b 	ldhu	r2,-16(fp)
     7c0:	e0bff88d 	sth	r2,-30(fp)
						next_state = STOP;
     7c4:	00800104 	movi	r2,4
     7c8:	e0bffb15 	stw	r2,-20(fp)
					}
					break;
     7cc:	00000406 	br	7e0 <_Z14reaction_meterPv+0x354>
			break;
		}
		case COUNT: {
			IOWR_ALTERA_AVALON_PIO_DATA(MEASUREMENT_BASE, 1UL << state);
			enum states next_state = IDLE;
			for(uint16_t time = 0; time < RESP_TIMEOUT; time++){
     7d0:	e0bffc0b 	ldhu	r2,-16(fp)
     7d4:	10800044 	addi	r2,r2,1
     7d8:	e0bffc0d 	sth	r2,-16(fp)
     7dc:	003fc706 	br	6fc <__alt_data_end+0xfffd06fc>
						next_state = STOP;
					}
					break;
				}
			}
			state = next_state;
     7e0:	e0bffb17 	ldw	r2,-20(fp)
     7e4:	e0bffa15 	stw	r2,-24(fp)
			break;
     7e8:	00003106 	br	8b0 <_Z14reaction_meterPv+0x424>
		}
		case STOP: {
			IOWR_ALTERA_AVALON_PIO_DATA(MEASUREMENT_BASE, 1UL << state);
     7ec:	e0bffa17 	ldw	r2,-24(fp)
     7f0:	00c00044 	movi	r3,1
     7f4:	1884983a 	sll	r2,r3,r2
     7f8:	1007883a 	mov	r3,r2
     7fc:	00800134 	movhi	r2,4
     800:	10840804 	addi	r2,r2,4128
     804:	10c00035 	stwio	r3,0(r2)
			show_score(response_time);
     808:	e0bff88b 	ldhu	r2,-30(fp)
     80c:	1009883a 	mov	r4,r2
     810:	00001fc0 	call	1fc <_Z10show_scorej>
			bool new_highscore = false;
     814:	e03ffc85 	stb	zero,-14(fp)
			if(response_time < highscore){
     818:	e0fff88b 	ldhu	r3,-30(fp)
     81c:	e0bff80b 	ldhu	r2,-32(fp)
     820:	1880042e 	bgeu	r3,r2,834 <_Z14reaction_meterPv+0x3a8>
				highscore = response_time;
     824:	e0bff88b 	ldhu	r2,-30(fp)
     828:	e0bff80d 	sth	r2,-32(fp)
				new_highscore = true;
     82c:	00800044 	movi	r2,1
     830:	e0bffc85 	stb	r2,-14(fp)
			}
			printf("Waiting for button to be released!\n");
     834:	010000b4 	movhi	r4,2
     838:	21253504 	addi	r4,r4,-27436
     83c:	00010a40 	call	10a4 <puts>
			while(buttons.pressed(RESP_KEY)){
     840:	01400084 	movi	r5,2
     844:	010000b4 	movhi	r4,2
     848:	213c6e04 	addi	r4,r4,-3656
     84c:	0000c8c0 	call	c8c <_ZN9buttons_c7pressedEh>
     850:	10803fcc 	andi	r2,r2,255
     854:	10001126 	beq	r2,zero,89c <_Z14reaction_meterPv+0x410>
				OSTimeDlyHMSM(0, 0, 0, 100);
     858:	01c01904 	movi	r7,100
     85c:	000d883a 	mov	r6,zero
     860:	000b883a 	mov	r5,zero
     864:	0009883a 	mov	r4,zero
     868:	0016fbc0 	call	16fbc <OSTimeDlyHMSM>
				if(new_highscore){
     86c:	e0bffc83 	ldbu	r2,-14(fp)
     870:	103ff326 	beq	r2,zero,840 <__alt_data_end+0xfffd0840>
					leds = rotate_left(leds, 1);
     874:	e0bff90b 	ldhu	r2,-28(fp)
     878:	01400044 	movi	r5,1
     87c:	1009883a 	mov	r4,r2
     880:	00003b00 	call	3b0 <_Z11rotate_leftii>
     884:	e0bff90d 	sth	r2,-28(fp)
					IOWR_ALTERA_AVALON_PIO_DATA(LEDS_BASE, leds);
     888:	e0fff90b 	ldhu	r3,-28(fp)
     88c:	00800134 	movhi	r2,4
     890:	10840c04 	addi	r2,r2,4144
     894:	10c00035 	stwio	r3,0(r2)
			if(response_time < highscore){
				highscore = response_time;
				new_highscore = true;
			}
			printf("Waiting for button to be released!\n");
			while(buttons.pressed(RESP_KEY)){
     898:	003fe906 	br	840 <__alt_data_end+0xfffd0840>
				if(new_highscore){
					leds = rotate_left(leds, 1);
					IOWR_ALTERA_AVALON_PIO_DATA(LEDS_BASE, leds);
				}
			}
			printf("Button has been released!\n");
     89c:	010000b4 	movhi	r4,2
     8a0:	21253e04 	addi	r4,r4,-27400
     8a4:	00010a40 	call	10a4 <puts>
			state = IDLE;
     8a8:	e03ffa15 	stw	zero,-24(fp)
			break;
     8ac:	0001883a 	nop
	uint8_t tries = 0;

	enum states {IDLE, START, DELAY, COUNT, STOP};
	enum states state = IDLE;

	while (1){
     8b0:	003f0106 	br	4b8 <__alt_data_end+0xfffd04b8>

000008b4 <_Z7receivev>:
		}
		}
	}
}

char* receive(){
     8b4:	defffc04 	addi	sp,sp,-16
     8b8:	dfc00315 	stw	ra,12(sp)
     8bc:	df000215 	stw	fp,8(sp)
     8c0:	df000204 	addi	fp,sp,8
	static char payload[10];
	int i = 0;
     8c4:	e03ffe15 	stw	zero,-8(fp)
	char data;

	do {
		data = getchar();
     8c8:	d0a00217 	ldw	r2,-32760(gp)
     8cc:	10800117 	ldw	r2,4(r2)
     8d0:	1009883a 	mov	r4,r2
     8d4:	0000ef00 	call	ef0 <getc>
     8d8:	e0bfff05 	stb	r2,-4(fp)
		payload[i++] = data;
     8dc:	e0fffe17 	ldw	r3,-8(fp)
     8e0:	18800044 	addi	r2,r3,1
     8e4:	e0bffe15 	stw	r2,-8(fp)
     8e8:	008000b4 	movhi	r2,2
     8ec:	10bc7304 	addi	r2,r2,-3636
     8f0:	10c5883a 	add	r2,r2,r3
     8f4:	e0ffff03 	ldbu	r3,-4(fp)
     8f8:	10c00005 	stb	r3,0(r2)
	} while(data != '\n');
     8fc:	e0bfff07 	ldb	r2,-4(fp)
     900:	108002a0 	cmpeqi	r2,r2,10
     904:	1000011e 	bne	r2,zero,90c <_Z7receivev+0x58>
char* receive(){
	static char payload[10];
	int i = 0;
	char data;

	do {
     908:	003fef06 	br	8c8 <__alt_data_end+0xfffd08c8>
		data = getchar();
		payload[i++] = data;
	} while(data != '\n');

	return payload;
     90c:	008000b4 	movhi	r2,2
     910:	10bc7304 	addi	r2,r2,-3636
}
     914:	e037883a 	mov	sp,fp
     918:	dfc00117 	ldw	ra,4(sp)
     91c:	df000017 	ldw	fp,0(sp)
     920:	dec00204 	addi	sp,sp,8
     924:	f800283a 	ret

00000928 <_Z7consolePv>:

// Task 3
void console(void* pdata){
     928:	defffa04 	addi	sp,sp,-24
     92c:	dfc00515 	stw	ra,20(sp)
     930:	df000415 	stw	fp,16(sp)
     934:	df000404 	addi	fp,sp,16
     938:	e13fff15 	stw	r4,-4(fp)
	char* command;
	INT8U ret = OS_NO_ERR;
     93c:	e03ffc05 	stb	zero,-16(fp)

	while(1){
		command = receive();
     940:	00008b40 	call	8b4 <_Z7receivev>
     944:	e0bffd15 	stw	r2,-12(fp)
		if(strstr(command, "name") != NULL){
     948:	014000b4 	movhi	r5,2
     94c:	29656904 	addi	r5,r5,-27228
     950:	e13ffd17 	ldw	r4,-12(fp)
     954:	00017980 	call	1798 <strstr>
     958:	10000c26 	beq	r2,zero,98c <_Z7consolePv+0x64>
			char *name = (command + 5);
     95c:	e0bffd17 	ldw	r2,-12(fp)
     960:	10800144 	addi	r2,r2,5
     964:	e0bffe15 	stw	r2,-8(fp)
			strtok(name, "\n");
     968:	014000b4 	movhi	r5,2
     96c:	29656b04 	addi	r5,r5,-27220
     970:	e13ffe17 	ldw	r4,-8(fp)
     974:	0001b480 	call	1b48 <strtok>
			OSQPost(player_queue, (void*)name);
     978:	d0a71117 	ldw	r2,-25532(gp)
     97c:	e17ffe17 	ldw	r5,-8(fp)
     980:	1009883a 	mov	r4,r2
     984:	00146040 	call	14604 <OSQPost>
     988:	003fed06 	br	940 <__alt_data_end+0xfffd0940>
		} else {
			printf("Unkown command \'%s\'.", command);
     98c:	e17ffd17 	ldw	r5,-12(fp)
     990:	010000b4 	movhi	r4,2
     994:	21256c04 	addi	r4,r4,-27216
     998:	0000fa80 	call	fa8 <printf>
// Task 3
void console(void* pdata){
	char* command;
	INT8U ret = OS_NO_ERR;

	while(1){
     99c:	003fe806 	br	940 <__alt_data_end+0xfffd0940>

000009a0 <main>:
			printf("Unkown command \'%s\'.", command);
		}
	}
}

int main(void){
     9a0:	defff904 	addi	sp,sp,-28
     9a4:	dfc00615 	stw	ra,24(sp)
     9a8:	df000515 	stw	fp,20(sp)
     9ac:	df000504 	addi	fp,sp,20
	running_sem = OSSemCreate(0);
     9b0:	0009883a 	mov	r4,zero
     9b4:	0014d9c0 	call	14d9c <OSSemCreate>
     9b8:	d0a70e15 	stw	r2,-25544(gp)
	start_sem = OSSemCreate(0);
     9bc:	0009883a 	mov	r4,zero
     9c0:	0014d9c0 	call	14d9c <OSSemCreate>
     9c4:	d0a70f15 	stw	r2,-25540(gp)
	stop_sem = OSSemCreate(0);
     9c8:	0009883a 	mov	r4,zero
     9cc:	0014d9c0 	call	14d9c <OSSemCreate>
     9d0:	d0a71015 	stw	r2,-25536(gp)
	player_queue = OSQCreate((void**)&player_queue_buffer, MAX_MSG_AMT);
     9d4:	01400084 	movi	r5,2
     9d8:	d1271204 	addi	r4,gp,-25528
     9dc:	0013d280 	call	13d28 <OSQCreate>
     9e0:	d0a71115 	stw	r2,-25532(gp)

	buttons.init(button_isr);
     9e4:	01400034 	movhi	r5,0
     9e8:	2940d304 	addi	r5,r5,844
     9ec:	010000b4 	movhi	r4,2
     9f0:	213c6e04 	addi	r4,r4,-3656
     9f4:	0000bf80 	call	bf8 <_ZN9buttons_c4initEPFvhE>
                  TASK1_PRIORITY,
                  TASK1_PRIORITY,
                  task1_stk,
                  TASK_STACKSIZE,
                  NULL,
                  0);
     9f8:	d8000415 	stw	zero,16(sp)
     9fc:	d8000315 	stw	zero,12(sp)
     a00:	00810004 	movi	r2,1024
     a04:	d8800215 	stw	r2,8(sp)
     a08:	008000b4 	movhi	r2,2
     a0c:	10b46104 	addi	r2,r2,-11900
     a10:	d8800115 	stw	r2,4(sp)
     a14:	00800044 	movi	r2,1
     a18:	d8800015 	stw	r2,0(sp)
     a1c:	01c00044 	movi	r7,1
     a20:	018000b4 	movhi	r6,2
     a24:	31b86004 	addi	r6,r6,-7808
     a28:	000b883a 	mov	r5,zero
     a2c:	01000034 	movhi	r4,0
     a30:	21012304 	addi	r4,r4,1164
     a34:	0015de80 	call	15de8 <OSTaskCreateExt>
	                  TASK2_PRIORITY,
	                  TASK2_PRIORITY,
	                  task2_stk,
	                  TASK_STACKSIZE,
	                  NULL,
	                  0);
     a38:	d8000415 	stw	zero,16(sp)
     a3c:	d8000315 	stw	zero,12(sp)
     a40:	00810004 	movi	r2,1024
     a44:	d8800215 	stw	r2,8(sp)
     a48:	008000b4 	movhi	r2,2
     a4c:	10b86104 	addi	r2,r2,-7804
     a50:	d8800115 	stw	r2,4(sp)
     a54:	00800084 	movi	r2,2
     a58:	d8800015 	stw	r2,0(sp)
     a5c:	01c00084 	movi	r7,2
     a60:	018000b4 	movhi	r6,2
     a64:	31bc6004 	addi	r6,r6,-3712
     a68:	000b883a 	mov	r5,zero
     a6c:	01000034 	movhi	r4,0
     a70:	21024a04 	addi	r4,r4,2344
     a74:	0015de80 	call	15de8 <OSTaskCreateExt>

	OSStart();
     a78:	00107440 	call	10744 <OSStart>
	return 0;
     a7c:	0005883a 	mov	r2,zero
}
     a80:	e037883a 	mov	sp,fp
     a84:	dfc00117 	ldw	ra,4(sp)
     a88:	df000017 	ldw	fp,0(sp)
     a8c:	dec00204 	addi	sp,sp,8
     a90:	f800283a 	ret

00000a94 <_Z41__static_initialization_and_destruction_0ii>:
     a94:	defffc04 	addi	sp,sp,-16
     a98:	dfc00315 	stw	ra,12(sp)
     a9c:	df000215 	stw	fp,8(sp)
     aa0:	df000204 	addi	fp,sp,8
     aa4:	e13ffe15 	stw	r4,-8(fp)
     aa8:	e17fff15 	stw	r5,-4(fp)
     aac:	e0bffe17 	ldw	r2,-8(fp)
     ab0:	10800058 	cmpnei	r2,r2,1
     ab4:	10000a1e 	bne	r2,zero,ae0 <_Z41__static_initialization_and_destruction_0ii+0x4c>
     ab8:	e0ffff17 	ldw	r3,-4(fp)
     abc:	00bfffd4 	movui	r2,65535
     ac0:	1880071e 	bne	r3,r2,ae0 <_Z41__static_initialization_and_destruction_0ii+0x4c>
// Synchronisation mechanisms.
OS_EVENT *running_sem, *start_sem, *stop_sem, *player_queue;
static void *player_queue_buffer[MAX_MSG_AMT];
char player_name[50];

buttons_c buttons(BUTTONS_BASE, BUTTONS_IRQ_INTERRUPT_CONTROLLER_ID, BUTTONS_IRQ);
     ac4:	01c00084 	movi	r7,2
     ac8:	000d883a 	mov	r6,zero
     acc:	01400134 	movhi	r5,4
     ad0:	29441004 	addi	r5,r5,4160
     ad4:	010000b4 	movhi	r4,2
     ad8:	213c6e04 	addi	r4,r4,-3656
     adc:	0000b280 	call	b28 <_ZN9buttons_cC1Emmm>
	                  NULL,
	                  0);

	OSStart();
	return 0;
}
     ae0:	0001883a 	nop
     ae4:	e037883a 	mov	sp,fp
     ae8:	dfc00117 	ldw	ra,4(sp)
     aec:	df000017 	ldw	fp,0(sp)
     af0:	dec00204 	addi	sp,sp,8
     af4:	f800283a 	ret

00000af8 <_GLOBAL__sub_I_task1_stk>:
     af8:	defffe04 	addi	sp,sp,-8
     afc:	dfc00115 	stw	ra,4(sp)
     b00:	df000015 	stw	fp,0(sp)
     b04:	d839883a 	mov	fp,sp
     b08:	017fffd4 	movui	r5,65535
     b0c:	01000044 	movi	r4,1
     b10:	0000a940 	call	a94 <_Z41__static_initialization_and_destruction_0ii>
     b14:	e037883a 	mov	sp,fp
     b18:	dfc00117 	ldw	ra,4(sp)
     b1c:	df000017 	ldw	fp,0(sp)
     b20:	dec00204 	addi	sp,sp,8
     b24:	f800283a 	ret

00000b28 <_ZN9buttons_cC1Emmm>:
#include "button.hpp"

#include <sys/alt_irq.h>
#include <altera_avalon_pio_regs.h>

buttons_c::buttons_c(const uint32_t base_address, const uint32_t interrupt_controller, const uint32_t irq_id):
     b28:	defffb04 	addi	sp,sp,-20
     b2c:	df000415 	stw	fp,16(sp)
     b30:	df000404 	addi	fp,sp,16
     b34:	e13ffc15 	stw	r4,-16(fp)
     b38:	e17ffd15 	stw	r5,-12(fp)
     b3c:	e1bffe15 	stw	r6,-8(fp)
     b40:	e1ffff15 	stw	r7,-4(fp)
	base_address(base_address),
	interrupt_controller(interrupt_controller),
	irq_id(irq_id)
     b44:	e0bffc17 	ldw	r2,-16(fp)
     b48:	e0fffd17 	ldw	r3,-12(fp)
     b4c:	10c00015 	stw	r3,0(r2)
     b50:	e0bffc17 	ldw	r2,-16(fp)
     b54:	e0fffe17 	ldw	r3,-8(fp)
     b58:	10c00115 	stw	r3,4(r2)
     b5c:	e0bffc17 	ldw	r2,-16(fp)
     b60:	e0ffff17 	ldw	r3,-4(fp)
     b64:	10c00215 	stw	r3,8(r2)
{}
     b68:	0001883a 	nop
     b6c:	e037883a 	mov	sp,fp
     b70:	df000017 	ldw	fp,0(sp)
     b74:	dec00104 	addi	sp,sp,4
     b78:	f800283a 	ret

00000b7c <_ZN9buttons_c3isrEPv>:

void buttons_c::isr(void* isr_context){
     b7c:	defffc04 	addi	sp,sp,-16
     b80:	dfc00315 	stw	ra,12(sp)
     b84:	df000215 	stw	fp,8(sp)
     b88:	df000204 	addi	fp,sp,8
     b8c:	e13fff15 	stw	r4,-4(fp)
	buttons_c* buttons = (buttons_c*)isr_context;
     b90:	e0bfff17 	ldw	r2,-4(fp)
     b94:	e0bffe15 	stw	r2,-8(fp)
	buttons->edge_capture = IORD_ALTERA_AVALON_PIO_EDGE_CAP(buttons->base_address);
     b98:	e0bffe17 	ldw	r2,-8(fp)
     b9c:	10800017 	ldw	r2,0(r2)
     ba0:	10800304 	addi	r2,r2,12
     ba4:	10c00037 	ldwio	r3,0(r2)
     ba8:	e0bffe17 	ldw	r2,-8(fp)
     bac:	10c00315 	stw	r3,12(r2)
	IOWR_ALTERA_AVALON_PIO_EDGE_CAP(buttons->base_address, 0x0);
     bb0:	e0bffe17 	ldw	r2,-8(fp)
     bb4:	10800017 	ldw	r2,0(r2)
     bb8:	10800304 	addi	r2,r2,12
     bbc:	0007883a 	mov	r3,zero
     bc0:	10c00035 	stwio	r3,0(r2)
	buttons->m_callback(buttons->edge_capture);
     bc4:	e0bffe17 	ldw	r2,-8(fp)
     bc8:	10800417 	ldw	r2,16(r2)
     bcc:	e0fffe17 	ldw	r3,-8(fp)
     bd0:	18c00317 	ldw	r3,12(r3)
     bd4:	18c03fcc 	andi	r3,r3,255
     bd8:	1809883a 	mov	r4,r3
     bdc:	103ee83a 	callr	r2
}
     be0:	0001883a 	nop
     be4:	e037883a 	mov	sp,fp
     be8:	dfc00117 	ldw	ra,4(sp)
     bec:	df000017 	ldw	fp,0(sp)
     bf0:	dec00204 	addi	sp,sp,8
     bf4:	f800283a 	ret

00000bf8 <_ZN9buttons_c4initEPFvhE>:

void buttons_c::init(void (*callback)(uint8_t pin)){
     bf8:	defffb04 	addi	sp,sp,-20
     bfc:	dfc00415 	stw	ra,16(sp)
     c00:	df000315 	stw	fp,12(sp)
     c04:	df000304 	addi	fp,sp,12
     c08:	e13ffe15 	stw	r4,-8(fp)
     c0c:	e17fff15 	stw	r5,-4(fp)
	m_callback = callback;
     c10:	e0bffe17 	ldw	r2,-8(fp)
     c14:	e0ffff17 	ldw	r3,-4(fp)
     c18:	10c00415 	stw	r3,16(r2)
	IOWR_ALTERA_AVALON_PIO_IRQ_MASK(base_address, 0xF);
     c1c:	e0bffe17 	ldw	r2,-8(fp)
     c20:	10800017 	ldw	r2,0(r2)
     c24:	10800204 	addi	r2,r2,8
     c28:	1007883a 	mov	r3,r2
     c2c:	008003c4 	movi	r2,15
     c30:	18800035 	stwio	r2,0(r3)
	IOWR_ALTERA_AVALON_PIO_EDGE_CAP(base_address, 0x0);
     c34:	e0bffe17 	ldw	r2,-8(fp)
     c38:	10800017 	ldw	r2,0(r2)
     c3c:	10800304 	addi	r2,r2,12
     c40:	0007883a 	mov	r3,zero
     c44:	10c00035 	stwio	r3,0(r2)
	alt_ic_isr_register(interrupt_controller, irq_id, isr, this, 0x0);
     c48:	e0bffe17 	ldw	r2,-8(fp)
     c4c:	10c00117 	ldw	r3,4(r2)
     c50:	e0bffe17 	ldw	r2,-8(fp)
     c54:	10800217 	ldw	r2,8(r2)
     c58:	d8000015 	stw	zero,0(sp)
     c5c:	e1fffe17 	ldw	r7,-8(fp)
     c60:	01800034 	movhi	r6,0
     c64:	3182df04 	addi	r6,r6,2940
     c68:	100b883a 	mov	r5,r2
     c6c:	1809883a 	mov	r4,r3
     c70:	000eec80 	call	eec8 <alt_ic_isr_register>
}
     c74:	0001883a 	nop
     c78:	e037883a 	mov	sp,fp
     c7c:	dfc00117 	ldw	ra,4(sp)
     c80:	df000017 	ldw	fp,0(sp)
     c84:	dec00204 	addi	sp,sp,8
     c88:	f800283a 	ret

00000c8c <_ZN9buttons_c7pressedEh>:

bool buttons_c::pressed(const uint8_t pin){
     c8c:	defffd04 	addi	sp,sp,-12
     c90:	df000215 	stw	fp,8(sp)
     c94:	df000204 	addi	fp,sp,8
     c98:	e13ffe15 	stw	r4,-8(fp)
     c9c:	2805883a 	mov	r2,r5
     ca0:	e0bfff05 	stb	r2,-4(fp)
	return (IORD_ALTERA_AVALON_PIO_DATA(base_address) & pin) == 0;
     ca4:	e0bffe17 	ldw	r2,-8(fp)
     ca8:	10800017 	ldw	r2,0(r2)
     cac:	10c00037 	ldwio	r3,0(r2)
     cb0:	e0bfff03 	ldbu	r2,-4(fp)
     cb4:	1884703a 	and	r2,r3,r2
     cb8:	1005003a 	cmpeq	r2,r2,zero
}
     cbc:	e037883a 	mov	sp,fp
     cc0:	df000017 	ldw	fp,0(sp)
     cc4:	dec00104 	addi	sp,sp,4
     cc8:	f800283a 	ret

00000ccc <__divsi3>:
     ccc:	20001b16 	blt	r4,zero,d3c <__divsi3+0x70>
     cd0:	000f883a 	mov	r7,zero
     cd4:	28001616 	blt	r5,zero,d30 <__divsi3+0x64>
     cd8:	200d883a 	mov	r6,r4
     cdc:	29001a2e 	bgeu	r5,r4,d48 <__divsi3+0x7c>
     ce0:	00800804 	movi	r2,32
     ce4:	00c00044 	movi	r3,1
     ce8:	00000106 	br	cf0 <__divsi3+0x24>
     cec:	10000d26 	beq	r2,zero,d24 <__divsi3+0x58>
     cf0:	294b883a 	add	r5,r5,r5
     cf4:	10bfffc4 	addi	r2,r2,-1
     cf8:	18c7883a 	add	r3,r3,r3
     cfc:	293ffb36 	bltu	r5,r4,cec <__alt_data_end+0xfffd0cec>
     d00:	0005883a 	mov	r2,zero
     d04:	18000726 	beq	r3,zero,d24 <__divsi3+0x58>
     d08:	0005883a 	mov	r2,zero
     d0c:	31400236 	bltu	r6,r5,d18 <__divsi3+0x4c>
     d10:	314dc83a 	sub	r6,r6,r5
     d14:	10c4b03a 	or	r2,r2,r3
     d18:	1806d07a 	srli	r3,r3,1
     d1c:	280ad07a 	srli	r5,r5,1
     d20:	183ffa1e 	bne	r3,zero,d0c <__alt_data_end+0xfffd0d0c>
     d24:	38000126 	beq	r7,zero,d2c <__divsi3+0x60>
     d28:	0085c83a 	sub	r2,zero,r2
     d2c:	f800283a 	ret
     d30:	014bc83a 	sub	r5,zero,r5
     d34:	39c0005c 	xori	r7,r7,1
     d38:	003fe706 	br	cd8 <__alt_data_end+0xfffd0cd8>
     d3c:	0109c83a 	sub	r4,zero,r4
     d40:	01c00044 	movi	r7,1
     d44:	003fe306 	br	cd4 <__alt_data_end+0xfffd0cd4>
     d48:	00c00044 	movi	r3,1
     d4c:	003fee06 	br	d08 <__alt_data_end+0xfffd0d08>

00000d50 <__modsi3>:
     d50:	20001716 	blt	r4,zero,db0 <__modsi3+0x60>
     d54:	000f883a 	mov	r7,zero
     d58:	2005883a 	mov	r2,r4
     d5c:	28001216 	blt	r5,zero,da8 <__modsi3+0x58>
     d60:	2900162e 	bgeu	r5,r4,dbc <__modsi3+0x6c>
     d64:	01800804 	movi	r6,32
     d68:	00c00044 	movi	r3,1
     d6c:	00000106 	br	d74 <__modsi3+0x24>
     d70:	30000a26 	beq	r6,zero,d9c <__modsi3+0x4c>
     d74:	294b883a 	add	r5,r5,r5
     d78:	31bfffc4 	addi	r6,r6,-1
     d7c:	18c7883a 	add	r3,r3,r3
     d80:	293ffb36 	bltu	r5,r4,d70 <__alt_data_end+0xfffd0d70>
     d84:	18000526 	beq	r3,zero,d9c <__modsi3+0x4c>
     d88:	1806d07a 	srli	r3,r3,1
     d8c:	11400136 	bltu	r2,r5,d94 <__modsi3+0x44>
     d90:	1145c83a 	sub	r2,r2,r5
     d94:	280ad07a 	srli	r5,r5,1
     d98:	183ffb1e 	bne	r3,zero,d88 <__alt_data_end+0xfffd0d88>
     d9c:	38000126 	beq	r7,zero,da4 <__modsi3+0x54>
     da0:	0085c83a 	sub	r2,zero,r2
     da4:	f800283a 	ret
     da8:	014bc83a 	sub	r5,zero,r5
     dac:	003fec06 	br	d60 <__alt_data_end+0xfffd0d60>
     db0:	0109c83a 	sub	r4,zero,r4
     db4:	01c00044 	movi	r7,1
     db8:	003fe706 	br	d58 <__alt_data_end+0xfffd0d58>
     dbc:	00c00044 	movi	r3,1
     dc0:	003ff106 	br	d88 <__alt_data_end+0xfffd0d88>

00000dc4 <__udivsi3>:
     dc4:	200d883a 	mov	r6,r4
     dc8:	2900152e 	bgeu	r5,r4,e20 <__udivsi3+0x5c>
     dcc:	28001416 	blt	r5,zero,e20 <__udivsi3+0x5c>
     dd0:	00800804 	movi	r2,32
     dd4:	00c00044 	movi	r3,1
     dd8:	00000206 	br	de4 <__udivsi3+0x20>
     ddc:	10000e26 	beq	r2,zero,e18 <__udivsi3+0x54>
     de0:	28000516 	blt	r5,zero,df8 <__udivsi3+0x34>
     de4:	294b883a 	add	r5,r5,r5
     de8:	10bfffc4 	addi	r2,r2,-1
     dec:	18c7883a 	add	r3,r3,r3
     df0:	293ffa36 	bltu	r5,r4,ddc <__alt_data_end+0xfffd0ddc>
     df4:	18000826 	beq	r3,zero,e18 <__udivsi3+0x54>
     df8:	0005883a 	mov	r2,zero
     dfc:	31400236 	bltu	r6,r5,e08 <__udivsi3+0x44>
     e00:	314dc83a 	sub	r6,r6,r5
     e04:	10c4b03a 	or	r2,r2,r3
     e08:	1806d07a 	srli	r3,r3,1
     e0c:	280ad07a 	srli	r5,r5,1
     e10:	183ffa1e 	bne	r3,zero,dfc <__alt_data_end+0xfffd0dfc>
     e14:	f800283a 	ret
     e18:	0005883a 	mov	r2,zero
     e1c:	f800283a 	ret
     e20:	00c00044 	movi	r3,1
     e24:	003ff406 	br	df8 <__alt_data_end+0xfffd0df8>

00000e28 <__umodsi3>:
     e28:	2005883a 	mov	r2,r4
     e2c:	2900122e 	bgeu	r5,r4,e78 <__umodsi3+0x50>
     e30:	28001116 	blt	r5,zero,e78 <__umodsi3+0x50>
     e34:	01800804 	movi	r6,32
     e38:	00c00044 	movi	r3,1
     e3c:	00000206 	br	e48 <__umodsi3+0x20>
     e40:	30000c26 	beq	r6,zero,e74 <__umodsi3+0x4c>
     e44:	28000516 	blt	r5,zero,e5c <__umodsi3+0x34>
     e48:	294b883a 	add	r5,r5,r5
     e4c:	31bfffc4 	addi	r6,r6,-1
     e50:	18c7883a 	add	r3,r3,r3
     e54:	293ffa36 	bltu	r5,r4,e40 <__alt_data_end+0xfffd0e40>
     e58:	18000626 	beq	r3,zero,e74 <__umodsi3+0x4c>
     e5c:	1806d07a 	srli	r3,r3,1
     e60:	11400136 	bltu	r2,r5,e68 <__umodsi3+0x40>
     e64:	1145c83a 	sub	r2,r2,r5
     e68:	280ad07a 	srli	r5,r5,1
     e6c:	183ffb1e 	bne	r3,zero,e5c <__alt_data_end+0xfffd0e5c>
     e70:	f800283a 	ret
     e74:	f800283a 	ret
     e78:	00c00044 	movi	r3,1
     e7c:	003ff706 	br	e5c <__alt_data_end+0xfffd0e5c>

00000e80 <_getc_r>:
     e80:	defffd04 	addi	sp,sp,-12
     e84:	dc000115 	stw	r16,4(sp)
     e88:	dfc00215 	stw	ra,8(sp)
     e8c:	2021883a 	mov	r16,r4
     e90:	20000226 	beq	r4,zero,e9c <_getc_r+0x1c>
     e94:	20800e17 	ldw	r2,56(r4)
     e98:	10000c26 	beq	r2,zero,ecc <_getc_r+0x4c>
     e9c:	28800117 	ldw	r2,4(r5)
     ea0:	10bfffc4 	addi	r2,r2,-1
     ea4:	28800115 	stw	r2,4(r5)
     ea8:	10000c16 	blt	r2,zero,edc <_getc_r+0x5c>
     eac:	28800017 	ldw	r2,0(r5)
     eb0:	10c00044 	addi	r3,r2,1
     eb4:	28c00015 	stw	r3,0(r5)
     eb8:	10800003 	ldbu	r2,0(r2)
     ebc:	dfc00217 	ldw	ra,8(sp)
     ec0:	dc000117 	ldw	r16,4(sp)
     ec4:	dec00304 	addi	sp,sp,12
     ec8:	f800283a 	ret
     ecc:	d9400015 	stw	r5,0(sp)
     ed0:	0005fc40 	call	5fc4 <__sinit>
     ed4:	d9400017 	ldw	r5,0(sp)
     ed8:	003ff006 	br	e9c <__alt_data_end+0xfffd0e9c>
     edc:	8009883a 	mov	r4,r16
     ee0:	dfc00217 	ldw	ra,8(sp)
     ee4:	dc000117 	ldw	r16,4(sp)
     ee8:	dec00304 	addi	sp,sp,12
     eec:	00011341 	jmpi	1134 <__srget_r>

00000ef0 <getc>:
     ef0:	008000b4 	movhi	r2,2
     ef4:	defffd04 	addi	sp,sp,-12
     ef8:	10ad2904 	addi	r2,r2,-19292
     efc:	dc400115 	stw	r17,4(sp)
     f00:	14400017 	ldw	r17,0(r2)
     f04:	dc000015 	stw	r16,0(sp)
     f08:	dfc00215 	stw	ra,8(sp)
     f0c:	2021883a 	mov	r16,r4
     f10:	88000226 	beq	r17,zero,f1c <getc+0x2c>
     f14:	88800e17 	ldw	r2,56(r17)
     f18:	10000d26 	beq	r2,zero,f50 <getc+0x60>
     f1c:	80800117 	ldw	r2,4(r16)
     f20:	10bfffc4 	addi	r2,r2,-1
     f24:	80800115 	stw	r2,4(r16)
     f28:	10000c16 	blt	r2,zero,f5c <getc+0x6c>
     f2c:	80800017 	ldw	r2,0(r16)
     f30:	10c00044 	addi	r3,r2,1
     f34:	80c00015 	stw	r3,0(r16)
     f38:	10800003 	ldbu	r2,0(r2)
     f3c:	dfc00217 	ldw	ra,8(sp)
     f40:	dc400117 	ldw	r17,4(sp)
     f44:	dc000017 	ldw	r16,0(sp)
     f48:	dec00304 	addi	sp,sp,12
     f4c:	f800283a 	ret
     f50:	8809883a 	mov	r4,r17
     f54:	0005fc40 	call	5fc4 <__sinit>
     f58:	003ff006 	br	f1c <__alt_data_end+0xfffd0f1c>
     f5c:	800b883a 	mov	r5,r16
     f60:	8809883a 	mov	r4,r17
     f64:	dfc00217 	ldw	ra,8(sp)
     f68:	dc400117 	ldw	r17,4(sp)
     f6c:	dc000017 	ldw	r16,0(sp)
     f70:	dec00304 	addi	sp,sp,12
     f74:	00011341 	jmpi	1134 <__srget_r>

00000f78 <_printf_r>:
     f78:	defffd04 	addi	sp,sp,-12
     f7c:	2805883a 	mov	r2,r5
     f80:	dfc00015 	stw	ra,0(sp)
     f84:	d9800115 	stw	r6,4(sp)
     f88:	d9c00215 	stw	r7,8(sp)
     f8c:	21400217 	ldw	r5,8(r4)
     f90:	d9c00104 	addi	r7,sp,4
     f94:	100d883a 	mov	r6,r2
     f98:	0001c040 	call	1c04 <___vfprintf_internal_r>
     f9c:	dfc00017 	ldw	ra,0(sp)
     fa0:	dec00304 	addi	sp,sp,12
     fa4:	f800283a 	ret

00000fa8 <printf>:
     fa8:	defffc04 	addi	sp,sp,-16
     fac:	dfc00015 	stw	ra,0(sp)
     fb0:	d9400115 	stw	r5,4(sp)
     fb4:	d9800215 	stw	r6,8(sp)
     fb8:	d9c00315 	stw	r7,12(sp)
     fbc:	008000b4 	movhi	r2,2
     fc0:	10ad2904 	addi	r2,r2,-19292
     fc4:	10800017 	ldw	r2,0(r2)
     fc8:	200b883a 	mov	r5,r4
     fcc:	d9800104 	addi	r6,sp,4
     fd0:	11000217 	ldw	r4,8(r2)
     fd4:	0003ee00 	call	3ee0 <__vfprintf_internal>
     fd8:	dfc00017 	ldw	ra,0(sp)
     fdc:	dec00404 	addi	sp,sp,16
     fe0:	f800283a 	ret

00000fe4 <_puts_r>:
     fe4:	defff604 	addi	sp,sp,-40
     fe8:	dc000715 	stw	r16,28(sp)
     fec:	2021883a 	mov	r16,r4
     ff0:	2809883a 	mov	r4,r5
     ff4:	dc400815 	stw	r17,32(sp)
     ff8:	dfc00915 	stw	ra,36(sp)
     ffc:	2823883a 	mov	r17,r5
    1000:	000124c0 	call	124c <strlen>
    1004:	10c00044 	addi	r3,r2,1
    1008:	d8800115 	stw	r2,4(sp)
    100c:	008000b4 	movhi	r2,2
    1010:	10a57304 	addi	r2,r2,-27188
    1014:	d8800215 	stw	r2,8(sp)
    1018:	00800044 	movi	r2,1
    101c:	d8800315 	stw	r2,12(sp)
    1020:	00800084 	movi	r2,2
    1024:	dc400015 	stw	r17,0(sp)
    1028:	d8c00615 	stw	r3,24(sp)
    102c:	dec00415 	stw	sp,16(sp)
    1030:	d8800515 	stw	r2,20(sp)
    1034:	80000226 	beq	r16,zero,1040 <_puts_r+0x5c>
    1038:	80800e17 	ldw	r2,56(r16)
    103c:	10001426 	beq	r2,zero,1090 <_puts_r+0xac>
    1040:	81400217 	ldw	r5,8(r16)
    1044:	2880030b 	ldhu	r2,12(r5)
    1048:	10c8000c 	andi	r3,r2,8192
    104c:	1800061e 	bne	r3,zero,1068 <_puts_r+0x84>
    1050:	29001917 	ldw	r4,100(r5)
    1054:	00f7ffc4 	movi	r3,-8193
    1058:	10880014 	ori	r2,r2,8192
    105c:	20c6703a 	and	r3,r4,r3
    1060:	2880030d 	sth	r2,12(r5)
    1064:	28c01915 	stw	r3,100(r5)
    1068:	d9800404 	addi	r6,sp,16
    106c:	8009883a 	mov	r4,r16
    1070:	00064480 	call	6448 <__sfvwrite_r>
    1074:	1000091e 	bne	r2,zero,109c <_puts_r+0xb8>
    1078:	00800284 	movi	r2,10
    107c:	dfc00917 	ldw	ra,36(sp)
    1080:	dc400817 	ldw	r17,32(sp)
    1084:	dc000717 	ldw	r16,28(sp)
    1088:	dec00a04 	addi	sp,sp,40
    108c:	f800283a 	ret
    1090:	8009883a 	mov	r4,r16
    1094:	0005fc40 	call	5fc4 <__sinit>
    1098:	003fe906 	br	1040 <__alt_data_end+0xfffd1040>
    109c:	00bfffc4 	movi	r2,-1
    10a0:	003ff606 	br	107c <__alt_data_end+0xfffd107c>

000010a4 <puts>:
    10a4:	008000b4 	movhi	r2,2
    10a8:	10ad2904 	addi	r2,r2,-19292
    10ac:	200b883a 	mov	r5,r4
    10b0:	11000017 	ldw	r4,0(r2)
    10b4:	0000fe41 	jmpi	fe4 <_puts_r>

000010b8 <srand>:
    10b8:	008000b4 	movhi	r2,2
    10bc:	10ad2904 	addi	r2,r2,-19292
    10c0:	10800017 	ldw	r2,0(r2)
    10c4:	11002915 	stw	r4,164(r2)
    10c8:	10002a15 	stw	zero,168(r2)
    10cc:	f800283a 	ret

000010d0 <rand>:
    10d0:	008000b4 	movhi	r2,2
    10d4:	defffe04 	addi	sp,sp,-8
    10d8:	10ad2904 	addi	r2,r2,-19292
    10dc:	dc000015 	stw	r16,0(sp)
    10e0:	14000017 	ldw	r16,0(r2)
    10e4:	dfc00115 	stw	ra,4(sp)
    10e8:	01932574 	movhi	r6,19605
    10ec:	81002917 	ldw	r4,164(r16)
    10f0:	81402a17 	ldw	r5,168(r16)
    10f4:	01d614b4 	movhi	r7,22610
    10f8:	319fcb44 	addi	r6,r6,32557
    10fc:	39fd0b44 	addi	r7,r7,-3027
    1100:	000b6fc0 	call	b6fc <__muldi3>
    1104:	11000044 	addi	r4,r2,1
    1108:	2085803a 	cmpltu	r2,r4,r2
    110c:	10c7883a 	add	r3,r2,r3
    1110:	00a00034 	movhi	r2,32768
    1114:	10bfffc4 	addi	r2,r2,-1
    1118:	1884703a 	and	r2,r3,r2
    111c:	81002915 	stw	r4,164(r16)
    1120:	80c02a15 	stw	r3,168(r16)
    1124:	dfc00117 	ldw	ra,4(sp)
    1128:	dc000017 	ldw	r16,0(sp)
    112c:	dec00204 	addi	sp,sp,8
    1130:	f800283a 	ret

00001134 <__srget_r>:
    1134:	defffd04 	addi	sp,sp,-12
    1138:	dc400115 	stw	r17,4(sp)
    113c:	dc000015 	stw	r16,0(sp)
    1140:	dfc00215 	stw	ra,8(sp)
    1144:	2023883a 	mov	r17,r4
    1148:	2821883a 	mov	r16,r5
    114c:	20000226 	beq	r4,zero,1158 <__srget_r+0x24>
    1150:	20800e17 	ldw	r2,56(r4)
    1154:	10001026 	beq	r2,zero,1198 <__srget_r+0x64>
    1158:	800b883a 	mov	r5,r16
    115c:	8809883a 	mov	r4,r17
    1160:	00090a00 	call	90a0 <__srefill_r>
    1164:	10000e1e 	bne	r2,zero,11a0 <__srget_r+0x6c>
    1168:	80c00017 	ldw	r3,0(r16)
    116c:	80800117 	ldw	r2,4(r16)
    1170:	19000044 	addi	r4,r3,1
    1174:	10bfffc4 	addi	r2,r2,-1
    1178:	80800115 	stw	r2,4(r16)
    117c:	81000015 	stw	r4,0(r16)
    1180:	18800003 	ldbu	r2,0(r3)
    1184:	dfc00217 	ldw	ra,8(sp)
    1188:	dc400117 	ldw	r17,4(sp)
    118c:	dc000017 	ldw	r16,0(sp)
    1190:	dec00304 	addi	sp,sp,12
    1194:	f800283a 	ret
    1198:	0005fc40 	call	5fc4 <__sinit>
    119c:	003fee06 	br	1158 <__alt_data_end+0xfffd1158>
    11a0:	00bfffc4 	movi	r2,-1
    11a4:	003ff706 	br	1184 <__alt_data_end+0xfffd1184>

000011a8 <__srget>:
    11a8:	008000b4 	movhi	r2,2
    11ac:	10ad2904 	addi	r2,r2,-19292
    11b0:	200b883a 	mov	r5,r4
    11b4:	11000017 	ldw	r4,0(r2)
    11b8:	00011341 	jmpi	1134 <__srget_r>

000011bc <strcpy>:
    11bc:	2906b03a 	or	r3,r5,r4
    11c0:	18c000cc 	andi	r3,r3,3
    11c4:	2005883a 	mov	r2,r4
    11c8:	1800161e 	bne	r3,zero,1224 <strcpy+0x68>
    11cc:	29c00017 	ldw	r7,0(r5)
    11d0:	02ffbff4 	movhi	r11,65279
    11d4:	5affbfc4 	addi	r11,r11,-257
    11d8:	02a02074 	movhi	r10,32897
    11dc:	01c6303a 	nor	r3,zero,r7
    11e0:	3ac9883a 	add	r4,r7,r11
    11e4:	52a02004 	addi	r10,r10,-32640
    11e8:	20c6703a 	and	r3,r4,r3
    11ec:	1a86703a 	and	r3,r3,r10
    11f0:	18000c1e 	bne	r3,zero,1224 <strcpy+0x68>
    11f4:	1011883a 	mov	r8,r2
    11f8:	41c00015 	stw	r7,0(r8)
    11fc:	29400104 	addi	r5,r5,4
    1200:	29c00017 	ldw	r7,0(r5)
    1204:	41800104 	addi	r6,r8,4
    1208:	3011883a 	mov	r8,r6
    120c:	3ad3883a 	add	r9,r7,r11
    1210:	01c6303a 	nor	r3,zero,r7
    1214:	48c6703a 	and	r3,r9,r3
    1218:	1a86703a 	and	r3,r3,r10
    121c:	183ff626 	beq	r3,zero,11f8 <__alt_data_end+0xfffd11f8>
    1220:	00000106 	br	1228 <strcpy+0x6c>
    1224:	100d883a 	mov	r6,r2
    1228:	28c00003 	ldbu	r3,0(r5)
    122c:	31800044 	addi	r6,r6,1
    1230:	29400044 	addi	r5,r5,1
    1234:	30ffffc5 	stb	r3,-1(r6)
    1238:	18c03fcc 	andi	r3,r3,255
    123c:	18c0201c 	xori	r3,r3,128
    1240:	18ffe004 	addi	r3,r3,-128
    1244:	183ff81e 	bne	r3,zero,1228 <__alt_data_end+0xfffd1228>
    1248:	f800283a 	ret

0000124c <strlen>:
    124c:	208000cc 	andi	r2,r4,3
    1250:	10002026 	beq	r2,zero,12d4 <strlen+0x88>
    1254:	20800007 	ldb	r2,0(r4)
    1258:	10002026 	beq	r2,zero,12dc <strlen+0x90>
    125c:	2005883a 	mov	r2,r4
    1260:	00000206 	br	126c <strlen+0x20>
    1264:	10c00007 	ldb	r3,0(r2)
    1268:	18001826 	beq	r3,zero,12cc <strlen+0x80>
    126c:	10800044 	addi	r2,r2,1
    1270:	10c000cc 	andi	r3,r2,3
    1274:	183ffb1e 	bne	r3,zero,1264 <__alt_data_end+0xfffd1264>
    1278:	10c00017 	ldw	r3,0(r2)
    127c:	01ffbff4 	movhi	r7,65279
    1280:	39ffbfc4 	addi	r7,r7,-257
    1284:	00ca303a 	nor	r5,zero,r3
    1288:	01a02074 	movhi	r6,32897
    128c:	19c7883a 	add	r3,r3,r7
    1290:	31a02004 	addi	r6,r6,-32640
    1294:	1946703a 	and	r3,r3,r5
    1298:	1986703a 	and	r3,r3,r6
    129c:	1800091e 	bne	r3,zero,12c4 <strlen+0x78>
    12a0:	10800104 	addi	r2,r2,4
    12a4:	10c00017 	ldw	r3,0(r2)
    12a8:	19cb883a 	add	r5,r3,r7
    12ac:	00c6303a 	nor	r3,zero,r3
    12b0:	28c6703a 	and	r3,r5,r3
    12b4:	1986703a 	and	r3,r3,r6
    12b8:	183ff926 	beq	r3,zero,12a0 <__alt_data_end+0xfffd12a0>
    12bc:	00000106 	br	12c4 <strlen+0x78>
    12c0:	10800044 	addi	r2,r2,1
    12c4:	10c00007 	ldb	r3,0(r2)
    12c8:	183ffd1e 	bne	r3,zero,12c0 <__alt_data_end+0xfffd12c0>
    12cc:	1105c83a 	sub	r2,r2,r4
    12d0:	f800283a 	ret
    12d4:	2005883a 	mov	r2,r4
    12d8:	003fe706 	br	1278 <__alt_data_end+0xfffd1278>
    12dc:	0005883a 	mov	r2,zero
    12e0:	f800283a 	ret

000012e4 <critical_factorization>:
    12e4:	02c00044 	movi	r11,1
    12e8:	5811883a 	mov	r8,r11
    12ec:	0013883a 	mov	r9,zero
    12f0:	00bfffc4 	movi	r2,-1
    12f4:	2087883a 	add	r3,r4,r2
    12f8:	1a0f883a 	add	r7,r3,r8
    12fc:	4a07883a 	add	r3,r9,r8
    1300:	20d5883a 	add	r10,r4,r3
    1304:	1940102e 	bgeu	r3,r5,1348 <critical_factorization+0x64>
    1308:	52800003 	ldbu	r10,0(r10)
    130c:	39c00003 	ldbu	r7,0(r7)
    1310:	51c0042e 	bgeu	r10,r7,1324 <critical_factorization+0x40>
    1314:	1897c83a 	sub	r11,r3,r2
    1318:	1813883a 	mov	r9,r3
    131c:	02000044 	movi	r8,1
    1320:	003ff406 	br	12f4 <__alt_data_end+0xfffd12f4>
    1324:	51c00526 	beq	r10,r7,133c <critical_factorization+0x58>
    1328:	02c00044 	movi	r11,1
    132c:	4805883a 	mov	r2,r9
    1330:	5811883a 	mov	r8,r11
    1334:	4ad3883a 	add	r9,r9,r11
    1338:	003fee06 	br	12f4 <__alt_data_end+0xfffd12f4>
    133c:	42c02226 	beq	r8,r11,13c8 <critical_factorization+0xe4>
    1340:	42000044 	addi	r8,r8,1
    1344:	003feb06 	br	12f4 <__alt_data_end+0xfffd12f4>
    1348:	03000044 	movi	r12,1
    134c:	32c00015 	stw	r11,0(r6)
    1350:	6011883a 	mov	r8,r12
    1354:	0013883a 	mov	r9,zero
    1358:	02ffffc4 	movi	r11,-1
    135c:	22c7883a 	add	r3,r4,r11
    1360:	1a0f883a 	add	r7,r3,r8
    1364:	4a07883a 	add	r3,r9,r8
    1368:	20d5883a 	add	r10,r4,r3
    136c:	1940102e 	bgeu	r3,r5,13b0 <critical_factorization+0xcc>
    1370:	52800003 	ldbu	r10,0(r10)
    1374:	39c00003 	ldbu	r7,0(r7)
    1378:	3a80042e 	bgeu	r7,r10,138c <critical_factorization+0xa8>
    137c:	1ad9c83a 	sub	r12,r3,r11
    1380:	1813883a 	mov	r9,r3
    1384:	02000044 	movi	r8,1
    1388:	003ff406 	br	135c <__alt_data_end+0xfffd135c>
    138c:	51c00526 	beq	r10,r7,13a4 <critical_factorization+0xc0>
    1390:	03000044 	movi	r12,1
    1394:	4817883a 	mov	r11,r9
    1398:	6011883a 	mov	r8,r12
    139c:	4b13883a 	add	r9,r9,r12
    13a0:	003fee06 	br	135c <__alt_data_end+0xfffd135c>
    13a4:	43000c26 	beq	r8,r12,13d8 <critical_factorization+0xf4>
    13a8:	42000044 	addi	r8,r8,1
    13ac:	003feb06 	br	135c <__alt_data_end+0xfffd135c>
    13b0:	5ac00044 	addi	r11,r11,1
    13b4:	10800044 	addi	r2,r2,1
    13b8:	58800236 	bltu	r11,r2,13c4 <critical_factorization+0xe0>
    13bc:	33000015 	stw	r12,0(r6)
    13c0:	5805883a 	mov	r2,r11
    13c4:	f800283a 	ret
    13c8:	4017883a 	mov	r11,r8
    13cc:	1813883a 	mov	r9,r3
    13d0:	02000044 	movi	r8,1
    13d4:	003fc706 	br	12f4 <__alt_data_end+0xfffd12f4>
    13d8:	4019883a 	mov	r12,r8
    13dc:	1813883a 	mov	r9,r3
    13e0:	02000044 	movi	r8,1
    13e4:	003fdd06 	br	135c <__alt_data_end+0xfffd135c>

000013e8 <two_way_long_needle>:
    13e8:	defef104 	addi	sp,sp,-1084
    13ec:	dc810715 	stw	r18,1052(sp)
    13f0:	dc410615 	stw	r17,1048(sp)
    13f4:	dc810004 	addi	r18,sp,1024
    13f8:	3023883a 	mov	r17,r6
    13fc:	2807883a 	mov	r3,r5
    1400:	ddc10c15 	stw	r23,1072(sp)
    1404:	900d883a 	mov	r6,r18
    1408:	202f883a 	mov	r23,r4
    140c:	380b883a 	mov	r5,r7
    1410:	8809883a 	mov	r4,r17
    1414:	dd810b15 	stw	r22,1068(sp)
    1418:	dc010515 	stw	r16,1044(sp)
    141c:	d8c10415 	stw	r3,1040(sp)
    1420:	dfc10e15 	stw	ra,1080(sp)
    1424:	df010d15 	stw	fp,1076(sp)
    1428:	dd410a15 	stw	r21,1064(sp)
    142c:	dd010915 	stw	r20,1060(sp)
    1430:	dcc10815 	stw	r19,1056(sp)
    1434:	382d883a 	mov	r22,r7
    1438:	00012e40 	call	12e4 <critical_factorization>
    143c:	d8c10417 	ldw	r3,1040(sp)
    1440:	1021883a 	mov	r16,r2
    1444:	d805883a 	mov	r2,sp
    1448:	15800015 	stw	r22,0(r2)
    144c:	10800104 	addi	r2,r2,4
    1450:	90bffd1e 	bne	r18,r2,1448 <__alt_data_end+0xfffd1448>
    1454:	b0000b26 	beq	r22,zero,1484 <two_way_long_needle+0x9c>
    1458:	b17fffc4 	addi	r5,r22,-1
    145c:	8809883a 	mov	r4,r17
    1460:	8d8d883a 	add	r6,r17,r22
    1464:	20800003 	ldbu	r2,0(r4)
    1468:	21000044 	addi	r4,r4,1
    146c:	1085883a 	add	r2,r2,r2
    1470:	1085883a 	add	r2,r2,r2
    1474:	d885883a 	add	r2,sp,r2
    1478:	11400015 	stw	r5,0(r2)
    147c:	297fffc4 	addi	r5,r5,-1
    1480:	21bff81e 	bne	r4,r6,1464 <__alt_data_end+0xfffd1464>
    1484:	d9410017 	ldw	r5,1024(sp)
    1488:	800d883a 	mov	r6,r16
    148c:	8809883a 	mov	r4,r17
    1490:	894b883a 	add	r5,r17,r5
    1494:	d8c10415 	stw	r3,1040(sp)
    1498:	00076200 	call	7620 <memcmp>
    149c:	d8c10417 	ldw	r3,1040(sp)
    14a0:	10006a1e 	bne	r2,zero,164c <two_way_long_needle+0x264>
    14a4:	84bfffc4 	addi	r18,r16,-1
    14a8:	8c85883a 	add	r2,r17,r18
    14ac:	d8810215 	stw	r2,1032(sp)
    14b0:	00800044 	movi	r2,1
    14b4:	813fff84 	addi	r4,r16,-2
    14b8:	1405c83a 	sub	r2,r2,r16
    14bc:	0029883a 	mov	r20,zero
    14c0:	0039883a 	mov	fp,zero
    14c4:	b57fffc4 	addi	r21,r22,-1
    14c8:	d9010115 	stw	r4,1028(sp)
    14cc:	d8810315 	stw	r2,1036(sp)
    14d0:	00000706 	br	14f0 <two_way_long_needle+0x108>
    14d4:	a0000326 	beq	r20,zero,14e4 <two_way_long_needle+0xfc>
    14d8:	d8c10017 	ldw	r3,1024(sp)
    14dc:	10c0012e 	bgeu	r2,r3,14e4 <two_way_long_needle+0xfc>
    14e0:	b0c5c83a 	sub	r2,r22,r3
    14e4:	e0b9883a 	add	fp,fp,r2
    14e8:	0029883a 	mov	r20,zero
    14ec:	9807883a 	mov	r3,r19
    14f0:	e5a7883a 	add	r19,fp,r22
    14f4:	98cdc83a 	sub	r6,r19,r3
    14f8:	000b883a 	mov	r5,zero
    14fc:	b8c9883a 	add	r4,r23,r3
    1500:	000753c0 	call	753c <memchr>
    1504:	1000441e 	bne	r2,zero,1618 <two_way_long_needle+0x230>
    1508:	98004326 	beq	r19,zero,1618 <two_way_long_needle+0x230>
    150c:	bcc5883a 	add	r2,r23,r19
    1510:	10bfffc3 	ldbu	r2,-1(r2)
    1514:	1085883a 	add	r2,r2,r2
    1518:	1085883a 	add	r2,r2,r2
    151c:	d885883a 	add	r2,sp,r2
    1520:	10800017 	ldw	r2,0(r2)
    1524:	103feb1e 	bne	r2,zero,14d4 <__alt_data_end+0xfffd14d4>
    1528:	a015883a 	mov	r10,r20
    152c:	a400012e 	bgeu	r20,r16,1534 <two_way_long_needle+0x14c>
    1530:	8015883a 	mov	r10,r16
    1534:	5540152e 	bgeu	r10,r21,158c <two_way_long_needle+0x1a4>
    1538:	bf05883a 	add	r2,r23,fp
    153c:	8a87883a 	add	r3,r17,r10
    1540:	1285883a 	add	r2,r2,r10
    1544:	18c00003 	ldbu	r3,0(r3)
    1548:	10800003 	ldbu	r2,0(r2)
    154c:	18802d1e 	bne	r3,r2,1604 <two_way_long_needle+0x21c>
    1550:	e1400044 	addi	r5,fp,1
    1554:	50800044 	addi	r2,r10,1
    1558:	2a8b883a 	add	r5,r5,r10
    155c:	888d883a 	add	r6,r17,r2
    1560:	b94b883a 	add	r5,r23,r5
    1564:	00000706 	br	1584 <two_way_long_needle+0x19c>
    1568:	31000003 	ldbu	r4,0(r6)
    156c:	28c00003 	ldbu	r3,0(r5)
    1570:	31800044 	addi	r6,r6,1
    1574:	21003fcc 	andi	r4,r4,255
    1578:	29400044 	addi	r5,r5,1
    157c:	20c0211e 	bne	r4,r3,1604 <two_way_long_needle+0x21c>
    1580:	10800044 	addi	r2,r2,1
    1584:	1015883a 	mov	r10,r2
    1588:	157ff736 	bltu	r2,r21,1568 <__alt_data_end+0xfffd1568>
    158c:	900d883a 	mov	r6,r18
    1590:	a4007d2e 	bgeu	r20,r16,1788 <two_way_long_needle+0x3a0>
    1594:	d9410217 	ldw	r5,1032(sp)
    1598:	bf05883a 	add	r2,r23,fp
    159c:	1485883a 	add	r2,r2,r18
    15a0:	28c00003 	ldbu	r3,0(r5)
    15a4:	10800003 	ldbu	r2,0(r2)
    15a8:	1880771e 	bne	r3,r2,1788 <two_way_long_needle+0x3a0>
    15ac:	d8c10117 	ldw	r3,1028(sp)
    15b0:	a2ffffc4 	addi	r11,r20,-1
    15b4:	8ad7883a 	add	r11,r17,r11
    15b8:	e0cb883a 	add	r5,fp,r3
    15bc:	88c5883a 	add	r2,r17,r3
    15c0:	b94b883a 	add	r5,r23,r5
    15c4:	00000706 	br	15e4 <two_way_long_needle+0x1fc>
    15c8:	11000003 	ldbu	r4,0(r2)
    15cc:	28c00003 	ldbu	r3,0(r5)
    15d0:	10bfffc4 	addi	r2,r2,-1
    15d4:	21003fcc 	andi	r4,r4,255
    15d8:	297fffc4 	addi	r5,r5,-1
    15dc:	20c0031e 	bne	r4,r3,15ec <two_way_long_needle+0x204>
    15e0:	500d883a 	mov	r6,r10
    15e4:	32bfffc4 	addi	r10,r6,-1
    15e8:	58bff71e 	bne	r11,r2,15c8 <__alt_data_end+0xfffd15c8>
    15ec:	a2400044 	addi	r9,r20,1
    15f0:	32406736 	bltu	r6,r9,1790 <two_way_long_needle+0x3a8>
    15f4:	da410017 	ldw	r9,1024(sp)
    15f8:	e279883a 	add	fp,fp,r9
    15fc:	b269c83a 	sub	r20,r22,r9
    1600:	003fba06 	br	14ec <__alt_data_end+0xfffd14ec>
    1604:	d8c10317 	ldw	r3,1036(sp)
    1608:	0029883a 	mov	r20,zero
    160c:	1f39883a 	add	fp,r3,fp
    1610:	e2b9883a 	add	fp,fp,r10
    1614:	003fb506 	br	14ec <__alt_data_end+0xfffd14ec>
    1618:	0005883a 	mov	r2,zero
    161c:	dfc10e17 	ldw	ra,1080(sp)
    1620:	df010d17 	ldw	fp,1076(sp)
    1624:	ddc10c17 	ldw	r23,1072(sp)
    1628:	dd810b17 	ldw	r22,1068(sp)
    162c:	dd410a17 	ldw	r21,1064(sp)
    1630:	dd010917 	ldw	r20,1060(sp)
    1634:	dcc10817 	ldw	r19,1056(sp)
    1638:	dc810717 	ldw	r18,1052(sp)
    163c:	dc410617 	ldw	r17,1048(sp)
    1640:	dc010517 	ldw	r16,1044(sp)
    1644:	dec10f04 	addi	sp,sp,1084
    1648:	f800283a 	ret
    164c:	b405c83a 	sub	r2,r22,r16
    1650:	14004b36 	bltu	r2,r16,1780 <two_way_long_needle+0x398>
    1654:	10800044 	addi	r2,r2,1
    1658:	84bfffc4 	addi	r18,r16,-1
    165c:	d8810015 	stw	r2,1024(sp)
    1660:	00800044 	movi	r2,1
    1664:	8c89883a 	add	r4,r17,r18
    1668:	817fff84 	addi	r5,r16,-2
    166c:	1405c83a 	sub	r2,r2,r16
    1670:	0029883a 	mov	r20,zero
    1674:	b73fffc4 	addi	fp,r22,-1
    1678:	d9010215 	stw	r4,1032(sp)
    167c:	d9410115 	stw	r5,1028(sp)
    1680:	8d7fffc4 	addi	r21,r17,-1
    1684:	d8810315 	stw	r2,1036(sp)
    1688:	a5a7883a 	add	r19,r20,r22
    168c:	98cdc83a 	sub	r6,r19,r3
    1690:	000b883a 	mov	r5,zero
    1694:	b8c9883a 	add	r4,r23,r3
    1698:	000753c0 	call	753c <memchr>
    169c:	103fde1e 	bne	r2,zero,1618 <__alt_data_end+0xfffd1618>
    16a0:	983fdd26 	beq	r19,zero,1618 <__alt_data_end+0xfffd1618>
    16a4:	bcc5883a 	add	r2,r23,r19
    16a8:	10bfffc3 	ldbu	r2,-1(r2)
    16ac:	1085883a 	add	r2,r2,r2
    16b0:	1085883a 	add	r2,r2,r2
    16b4:	d885883a 	add	r2,sp,r2
    16b8:	10800017 	ldw	r2,0(r2)
    16bc:	1000291e 	bne	r2,zero,1764 <two_way_long_needle+0x37c>
    16c0:	bd05883a 	add	r2,r23,r20
    16c4:	8700142e 	bgeu	r16,fp,1718 <two_way_long_needle+0x330>
    16c8:	8c07883a 	add	r3,r17,r16
    16cc:	140b883a 	add	r5,r2,r16
    16d0:	19000003 	ldbu	r4,0(r3)
    16d4:	28c00003 	ldbu	r3,0(r5)
    16d8:	800d883a 	mov	r6,r16
    16dc:	20c0241e 	bne	r4,r3,1770 <two_way_long_needle+0x388>
    16e0:	81400044 	addi	r5,r16,1
    16e4:	a155883a 	add	r10,r20,r5
    16e8:	ba95883a 	add	r10,r23,r10
    16ec:	894b883a 	add	r5,r17,r5
    16f0:	800d883a 	mov	r6,r16
    16f4:	00000606 	br	1710 <two_way_long_needle+0x328>
    16f8:	29000003 	ldbu	r4,0(r5)
    16fc:	50c00003 	ldbu	r3,0(r10)
    1700:	29400044 	addi	r5,r5,1
    1704:	21003fcc 	andi	r4,r4,255
    1708:	52800044 	addi	r10,r10,1
    170c:	20c0181e 	bne	r4,r3,1770 <two_way_long_needle+0x388>
    1710:	31800044 	addi	r6,r6,1
    1714:	373ff836 	bltu	r6,fp,16f8 <__alt_data_end+0xfffd16f8>
    1718:	00ffffc4 	movi	r3,-1
    171c:	90ffbf26 	beq	r18,r3,161c <__alt_data_end+0xfffd161c>
    1720:	d9410217 	ldw	r5,1032(sp)
    1724:	1487883a 	add	r3,r2,r18
    1728:	18c00003 	ldbu	r3,0(r3)
    172c:	29000003 	ldbu	r4,0(r5)
    1730:	20c00b1e 	bne	r4,r3,1760 <two_way_long_needle+0x378>
    1734:	d8c10117 	ldw	r3,1028(sp)
    1738:	a0cd883a 	add	r6,r20,r3
    173c:	b98d883a 	add	r6,r23,r6
    1740:	88c7883a 	add	r3,r17,r3
    1744:	1d7fb526 	beq	r3,r21,161c <__alt_data_end+0xfffd161c>
    1748:	19400003 	ldbu	r5,0(r3)
    174c:	31000003 	ldbu	r4,0(r6)
    1750:	18ffffc4 	addi	r3,r3,-1
    1754:	29403fcc 	andi	r5,r5,255
    1758:	31bfffc4 	addi	r6,r6,-1
    175c:	293ff926 	beq	r5,r4,1744 <__alt_data_end+0xfffd1744>
    1760:	d8810017 	ldw	r2,1024(sp)
    1764:	a0a9883a 	add	r20,r20,r2
    1768:	9807883a 	mov	r3,r19
    176c:	003fc606 	br	1688 <__alt_data_end+0xfffd1688>
    1770:	d8c10317 	ldw	r3,1036(sp)
    1774:	1d11883a 	add	r8,r3,r20
    1778:	41a9883a 	add	r20,r8,r6
    177c:	003ffa06 	br	1768 <__alt_data_end+0xfffd1768>
    1780:	8005883a 	mov	r2,r16
    1784:	003fb306 	br	1654 <__alt_data_end+0xfffd1654>
    1788:	800d883a 	mov	r6,r16
    178c:	003f9706 	br	15ec <__alt_data_end+0xfffd15ec>
    1790:	bf05883a 	add	r2,r23,fp
    1794:	003fa106 	br	161c <__alt_data_end+0xfffd161c>

00001798 <strstr>:
    1798:	21800007 	ldb	r6,0(r4)
    179c:	30009226 	beq	r6,zero,19e8 <strstr+0x250>
    17a0:	28c00007 	ldb	r3,0(r5)
    17a4:	18000f26 	beq	r3,zero,17e4 <strstr+0x4c>
    17a8:	280f883a 	mov	r7,r5
    17ac:	2011883a 	mov	r8,r4
    17b0:	02400044 	movi	r9,1
    17b4:	00000206 	br	17c0 <strstr+0x28>
    17b8:	38c00007 	ldb	r3,0(r7)
    17bc:	18000826 	beq	r3,zero,17e0 <strstr+0x48>
    17c0:	42000044 	addi	r8,r8,1
    17c4:	1987003a 	cmpeq	r3,r3,r6
    17c8:	41800007 	ldb	r6,0(r8)
    17cc:	39c00044 	addi	r7,r7,1
    17d0:	48d2703a 	and	r9,r9,r3
    17d4:	303ff81e 	bne	r6,zero,17b8 <__alt_data_end+0xfffd17b8>
    17d8:	38800007 	ldb	r2,0(r7)
    17dc:	1000841e 	bne	r2,zero,19f0 <strstr+0x258>
    17e0:	48000226 	beq	r9,zero,17ec <strstr+0x54>
    17e4:	2005883a 	mov	r2,r4
    17e8:	f800283a 	ret
    17ec:	defff104 	addi	sp,sp,-60
    17f0:	ddc00c15 	stw	r23,48(sp)
    17f4:	dd800b15 	stw	r22,44(sp)
    17f8:	dd400a15 	stw	r21,40(sp)
    17fc:	dc000515 	stw	r16,20(sp)
    1800:	dfc00e15 	stw	ra,56(sp)
    1804:	df000d15 	stw	fp,52(sp)
    1808:	dd000915 	stw	r20,36(sp)
    180c:	dcc00815 	stw	r19,32(sp)
    1810:	dc800715 	stw	r18,28(sp)
    1814:	dc400615 	stw	r17,24(sp)
    1818:	282d883a 	mov	r22,r5
    181c:	29400007 	ldb	r5,0(r5)
    1820:	202b883a 	mov	r21,r4
    1824:	21000044 	addi	r4,r4,1
    1828:	3da1c83a 	sub	r16,r7,r22
    182c:	00094780 	call	9478 <strchr>
    1830:	102f883a 	mov	r23,r2
    1834:	10007526 	beq	r2,zero,1a0c <strstr+0x274>
    1838:	00c00044 	movi	r3,1
    183c:	80c00a26 	beq	r16,r3,1868 <strstr+0xd0>
    1840:	ac09883a 	add	r4,r21,r16
    1844:	20800136 	bltu	r4,r2,184c <strstr+0xb4>
    1848:	2087c83a 	sub	r3,r4,r2
    184c:	008007c4 	movi	r2,31
    1850:	1400112e 	bgeu	r2,r16,1898 <strstr+0x100>
    1854:	800f883a 	mov	r7,r16
    1858:	b00d883a 	mov	r6,r22
    185c:	180b883a 	mov	r5,r3
    1860:	b809883a 	mov	r4,r23
    1864:	00013e80 	call	13e8 <two_way_long_needle>
    1868:	dfc00e17 	ldw	ra,56(sp)
    186c:	df000d17 	ldw	fp,52(sp)
    1870:	ddc00c17 	ldw	r23,48(sp)
    1874:	dd800b17 	ldw	r22,44(sp)
    1878:	dd400a17 	ldw	r21,40(sp)
    187c:	dd000917 	ldw	r20,36(sp)
    1880:	dcc00817 	ldw	r19,32(sp)
    1884:	dc800717 	ldw	r18,28(sp)
    1888:	dc400617 	ldw	r17,24(sp)
    188c:	dc000517 	ldw	r16,20(sp)
    1890:	dec00f04 	addi	sp,sp,60
    1894:	f800283a 	ret
    1898:	d80d883a 	mov	r6,sp
    189c:	800b883a 	mov	r5,r16
    18a0:	b009883a 	mov	r4,r22
    18a4:	d8c00415 	stw	r3,16(sp)
    18a8:	00012e40 	call	12e4 <critical_factorization>
    18ac:	d9400017 	ldw	r5,0(sp)
    18b0:	100d883a 	mov	r6,r2
    18b4:	b009883a 	mov	r4,r22
    18b8:	b14b883a 	add	r5,r22,r5
    18bc:	1039883a 	mov	fp,r2
    18c0:	00076200 	call	7620 <memcmp>
    18c4:	d8c00417 	ldw	r3,16(sp)
    18c8:	1000521e 	bne	r2,zero,1a14 <strstr+0x27c>
    18cc:	e47fffc4 	addi	r17,fp,-1
    18d0:	04c00044 	movi	r19,1
    18d4:	b445883a 	add	r2,r22,r17
    18d8:	9f27c83a 	sub	r19,r19,fp
    18dc:	0029883a 	mov	r20,zero
    18e0:	002b883a 	mov	r21,zero
    18e4:	d8800215 	stw	r2,8(sp)
    18e8:	e4bfff84 	addi	r18,fp,-2
    18ec:	dcc00115 	stw	r19,4(sp)
    18f0:	8567883a 	add	r19,r16,r21
    18f4:	98cdc83a 	sub	r6,r19,r3
    18f8:	000b883a 	mov	r5,zero
    18fc:	b8c9883a 	add	r4,r23,r3
    1900:	000753c0 	call	753c <memchr>
    1904:	1000411e 	bne	r2,zero,1a0c <strstr+0x274>
    1908:	98004026 	beq	r19,zero,1a0c <strstr+0x274>
    190c:	e00b883a 	mov	r5,fp
    1910:	e500012e 	bgeu	fp,r20,1918 <strstr+0x180>
    1914:	a00b883a 	mov	r5,r20
    1918:	2c00152e 	bgeu	r5,r16,1970 <strstr+0x1d8>
    191c:	b947883a 	add	r3,r23,r5
    1920:	1d47883a 	add	r3,r3,r21
    1924:	b145883a 	add	r2,r22,r5
    1928:	18c00003 	ldbu	r3,0(r3)
    192c:	10800003 	ldbu	r2,0(r2)
    1930:	1880311e 	bne	r3,r2,19f8 <strstr+0x260>
    1934:	a8800044 	addi	r2,r21,1
    1938:	28c00044 	addi	r3,r5,1
    193c:	1145883a 	add	r2,r2,r5
    1940:	b0c9883a 	add	r4,r22,r3
    1944:	b885883a 	add	r2,r23,r2
    1948:	00000706 	br	1968 <strstr+0x1d0>
    194c:	21c00003 	ldbu	r7,0(r4)
    1950:	11800003 	ldbu	r6,0(r2)
    1954:	21000044 	addi	r4,r4,1
    1958:	39c03fcc 	andi	r7,r7,255
    195c:	10800044 	addi	r2,r2,1
    1960:	3980251e 	bne	r7,r6,19f8 <strstr+0x260>
    1964:	18c00044 	addi	r3,r3,1
    1968:	180b883a 	mov	r5,r3
    196c:	1c3ff736 	bltu	r3,r16,194c <__alt_data_end+0xfffd194c>
    1970:	880d883a 	mov	r6,r17
    1974:	a700702e 	bgeu	r20,fp,1b38 <strstr+0x3a0>
    1978:	d9000217 	ldw	r4,8(sp)
    197c:	bd45883a 	add	r2,r23,r21
    1980:	1445883a 	add	r2,r2,r17
    1984:	20c00003 	ldbu	r3,0(r4)
    1988:	10800003 	ldbu	r2,0(r2)
    198c:	18806a1e 	bne	r3,r2,1b38 <strstr+0x3a0>
    1990:	954b883a 	add	r5,r18,r21
    1994:	a2bfffc4 	addi	r10,r20,-1
    1998:	b485883a 	add	r2,r22,r18
    199c:	b94b883a 	add	r5,r23,r5
    19a0:	b295883a 	add	r10,r22,r10
    19a4:	00000706 	br	19c4 <strstr+0x22c>
    19a8:	11000003 	ldbu	r4,0(r2)
    19ac:	28c00003 	ldbu	r3,0(r5)
    19b0:	10bfffc4 	addi	r2,r2,-1
    19b4:	21003fcc 	andi	r4,r4,255
    19b8:	297fffc4 	addi	r5,r5,-1
    19bc:	20c0031e 	bne	r4,r3,19cc <strstr+0x234>
    19c0:	380d883a 	mov	r6,r7
    19c4:	31ffffc4 	addi	r7,r6,-1
    19c8:	12bff71e 	bne	r2,r10,19a8 <__alt_data_end+0xfffd19a8>
    19cc:	a2000044 	addi	r8,r20,1
    19d0:	32005b36 	bltu	r6,r8,1b40 <strstr+0x3a8>
    19d4:	da000017 	ldw	r8,0(sp)
    19d8:	aa2b883a 	add	r21,r21,r8
    19dc:	8229c83a 	sub	r20,r16,r8
    19e0:	9807883a 	mov	r3,r19
    19e4:	003fc206 	br	18f0 <__alt_data_end+0xfffd18f0>
    19e8:	28800007 	ldb	r2,0(r5)
    19ec:	103f7d26 	beq	r2,zero,17e4 <__alt_data_end+0xfffd17e4>
    19f0:	0005883a 	mov	r2,zero
    19f4:	f800283a 	ret
    19f8:	d8c00117 	ldw	r3,4(sp)
    19fc:	0029883a 	mov	r20,zero
    1a00:	1d6b883a 	add	r21,r3,r21
    1a04:	a96b883a 	add	r21,r21,r5
    1a08:	003ff506 	br	19e0 <__alt_data_end+0xfffd19e0>
    1a0c:	0005883a 	mov	r2,zero
    1a10:	003f9506 	br	1868 <__alt_data_end+0xfffd1868>
    1a14:	8705c83a 	sub	r2,r16,fp
    1a18:	1700012e 	bgeu	r2,fp,1a20 <strstr+0x288>
    1a1c:	e005883a 	mov	r2,fp
    1a20:	10800044 	addi	r2,r2,1
    1a24:	e4bfffc4 	addi	r18,fp,-1
    1a28:	05000044 	movi	r20,1
    1a2c:	a729c83a 	sub	r20,r20,fp
    1a30:	d8800015 	stw	r2,0(sp)
    1a34:	b48b883a 	add	r5,r22,r18
    1a38:	e0bfff84 	addi	r2,fp,-2
    1a3c:	dd000215 	stw	r20,8(sp)
    1a40:	002b883a 	mov	r21,zero
    1a44:	e4400044 	addi	r17,fp,1
    1a48:	d9400315 	stw	r5,12(sp)
    1a4c:	d8800115 	stw	r2,4(sp)
    1a50:	b53fffc4 	addi	r20,r22,-1
    1a54:	8567883a 	add	r19,r16,r21
    1a58:	98cdc83a 	sub	r6,r19,r3
    1a5c:	000b883a 	mov	r5,zero
    1a60:	b8c9883a 	add	r4,r23,r3
    1a64:	000753c0 	call	753c <memchr>
    1a68:	103fe81e 	bne	r2,zero,1a0c <__alt_data_end+0xfffd1a0c>
    1a6c:	983fe726 	beq	r19,zero,1a0c <__alt_data_end+0xfffd1a0c>
    1a70:	e400132e 	bgeu	fp,r16,1ac0 <strstr+0x328>
    1a74:	bf07883a 	add	r3,r23,fp
    1a78:	1d47883a 	add	r3,r3,r21
    1a7c:	b705883a 	add	r2,r22,fp
    1a80:	18c00003 	ldbu	r3,0(r3)
    1a84:	10800003 	ldbu	r2,0(r2)
    1a88:	1880241e 	bne	r3,r2,1b1c <strstr+0x384>
    1a8c:	ac45883a 	add	r2,r21,r17
    1a90:	b44b883a 	add	r5,r22,r17
    1a94:	b885883a 	add	r2,r23,r2
    1a98:	e009883a 	mov	r4,fp
    1a9c:	00000606 	br	1ab8 <strstr+0x320>
    1aa0:	29800003 	ldbu	r6,0(r5)
    1aa4:	10c00003 	ldbu	r3,0(r2)
    1aa8:	29400044 	addi	r5,r5,1
    1aac:	31803fcc 	andi	r6,r6,255
    1ab0:	10800044 	addi	r2,r2,1
    1ab4:	30c01a1e 	bne	r6,r3,1b20 <strstr+0x388>
    1ab8:	21000044 	addi	r4,r4,1
    1abc:	243ff836 	bltu	r4,r16,1aa0 <__alt_data_end+0xfffd1aa0>
    1ac0:	00bfffc4 	movi	r2,-1
    1ac4:	bd49883a 	add	r4,r23,r21
    1ac8:	90801926 	beq	r18,r2,1b30 <strstr+0x398>
    1acc:	d9400317 	ldw	r5,12(sp)
    1ad0:	2485883a 	add	r2,r4,r18
    1ad4:	10800003 	ldbu	r2,0(r2)
    1ad8:	28c00003 	ldbu	r3,0(r5)
    1adc:	18800b1e 	bne	r3,r2,1b0c <strstr+0x374>
    1ae0:	d8c00117 	ldw	r3,4(sp)
    1ae4:	a8c5883a 	add	r2,r21,r3
    1ae8:	b885883a 	add	r2,r23,r2
    1aec:	b0c7883a 	add	r3,r22,r3
    1af0:	1d000f26 	beq	r3,r20,1b30 <strstr+0x398>
    1af4:	19800003 	ldbu	r6,0(r3)
    1af8:	11400003 	ldbu	r5,0(r2)
    1afc:	18ffffc4 	addi	r3,r3,-1
    1b00:	31803fcc 	andi	r6,r6,255
    1b04:	10bfffc4 	addi	r2,r2,-1
    1b08:	317ff926 	beq	r6,r5,1af0 <__alt_data_end+0xfffd1af0>
    1b0c:	d8800017 	ldw	r2,0(sp)
    1b10:	a8ab883a 	add	r21,r21,r2
    1b14:	9807883a 	mov	r3,r19
    1b18:	003fce06 	br	1a54 <__alt_data_end+0xfffd1a54>
    1b1c:	e009883a 	mov	r4,fp
    1b20:	d8c00217 	ldw	r3,8(sp)
    1b24:	1d4f883a 	add	r7,r3,r21
    1b28:	392b883a 	add	r21,r7,r4
    1b2c:	003ff906 	br	1b14 <__alt_data_end+0xfffd1b14>
    1b30:	2005883a 	mov	r2,r4
    1b34:	003f4c06 	br	1868 <__alt_data_end+0xfffd1868>
    1b38:	e00d883a 	mov	r6,fp
    1b3c:	003fa306 	br	19cc <__alt_data_end+0xfffd19cc>
    1b40:	bd45883a 	add	r2,r23,r21
    1b44:	003f4806 	br	1868 <__alt_data_end+0xfffd1868>

00001b48 <strtok>:
    1b48:	008000b4 	movhi	r2,2
    1b4c:	10ad2904 	addi	r2,r2,-19292
    1b50:	11800017 	ldw	r6,0(r2)
    1b54:	01c00044 	movi	r7,1
    1b58:	31801704 	addi	r6,r6,92
    1b5c:	0001b601 	jmpi	1b60 <__strtok_r>

00001b60 <__strtok_r>:
    1b60:	20001f26 	beq	r4,zero,1be0 <__strtok_r+0x80>
    1b64:	2005883a 	mov	r2,r4
    1b68:	22400007 	ldb	r9,0(r4)
    1b6c:	2807883a 	mov	r3,r5
    1b70:	21000044 	addi	r4,r4,1
    1b74:	00000106 	br	1b7c <__strtok_r+0x1c>
    1b78:	4a001226 	beq	r9,r8,1bc4 <__strtok_r+0x64>
    1b7c:	1a000007 	ldb	r8,0(r3)
    1b80:	18c00044 	addi	r3,r3,1
    1b84:	403ffc1e 	bne	r8,zero,1b78 <__alt_data_end+0xfffd1b78>
    1b88:	48001926 	beq	r9,zero,1bf0 <__strtok_r+0x90>
    1b8c:	22000007 	ldb	r8,0(r4)
    1b90:	2013883a 	mov	r9,r4
    1b94:	21000044 	addi	r4,r4,1
    1b98:	2015883a 	mov	r10,r4
    1b9c:	2807883a 	mov	r3,r5
    1ba0:	00000106 	br	1ba8 <__strtok_r+0x48>
    1ba4:	383ff926 	beq	r7,zero,1b8c <__alt_data_end+0xfffd1b8c>
    1ba8:	19c00007 	ldb	r7,0(r3)
    1bac:	18c00044 	addi	r3,r3,1
    1bb0:	41fffc1e 	bne	r8,r7,1ba4 <__alt_data_end+0xfffd1ba4>
    1bb4:	40000726 	beq	r8,zero,1bd4 <__strtok_r+0x74>
    1bb8:	48000005 	stb	zero,0(r9)
    1bbc:	32800015 	stw	r10,0(r6)
    1bc0:	f800283a 	ret
    1bc4:	383fe71e 	bne	r7,zero,1b64 <__alt_data_end+0xfffd1b64>
    1bc8:	31000015 	stw	r4,0(r6)
    1bcc:	10000005 	stb	zero,0(r2)
    1bd0:	f800283a 	ret
    1bd4:	0015883a 	mov	r10,zero
    1bd8:	32800015 	stw	r10,0(r6)
    1bdc:	f800283a 	ret
    1be0:	31000017 	ldw	r4,0(r6)
    1be4:	203fdf1e 	bne	r4,zero,1b64 <__alt_data_end+0xfffd1b64>
    1be8:	0005883a 	mov	r2,zero
    1bec:	f800283a 	ret
    1bf0:	30000015 	stw	zero,0(r6)
    1bf4:	0005883a 	mov	r2,zero
    1bf8:	f800283a 	ret

00001bfc <strtok_r>:
    1bfc:	01c00044 	movi	r7,1
    1c00:	0001b601 	jmpi	1b60 <__strtok_r>

00001c04 <___vfprintf_internal_r>:
    1c04:	deffb804 	addi	sp,sp,-288
    1c08:	dfc04715 	stw	ra,284(sp)
    1c0c:	ddc04515 	stw	r23,276(sp)
    1c10:	dd404315 	stw	r21,268(sp)
    1c14:	d9002d15 	stw	r4,180(sp)
    1c18:	282f883a 	mov	r23,r5
    1c1c:	302b883a 	mov	r21,r6
    1c20:	d9c02e15 	stw	r7,184(sp)
    1c24:	df004615 	stw	fp,280(sp)
    1c28:	dd804415 	stw	r22,272(sp)
    1c2c:	dd004215 	stw	r20,264(sp)
    1c30:	dcc04115 	stw	r19,260(sp)
    1c34:	dc804015 	stw	r18,256(sp)
    1c38:	dc403f15 	stw	r17,252(sp)
    1c3c:	dc003e15 	stw	r16,248(sp)
    1c40:	0006b440 	call	6b44 <_localeconv_r>
    1c44:	10800017 	ldw	r2,0(r2)
    1c48:	1009883a 	mov	r4,r2
    1c4c:	d8803415 	stw	r2,208(sp)
    1c50:	000124c0 	call	124c <strlen>
    1c54:	d8803715 	stw	r2,220(sp)
    1c58:	d8802d17 	ldw	r2,180(sp)
    1c5c:	10000226 	beq	r2,zero,1c68 <___vfprintf_internal_r+0x64>
    1c60:	10800e17 	ldw	r2,56(r2)
    1c64:	1000fb26 	beq	r2,zero,2054 <___vfprintf_internal_r+0x450>
    1c68:	b880030b 	ldhu	r2,12(r23)
    1c6c:	10c8000c 	andi	r3,r2,8192
    1c70:	1800061e 	bne	r3,zero,1c8c <___vfprintf_internal_r+0x88>
    1c74:	b9001917 	ldw	r4,100(r23)
    1c78:	00f7ffc4 	movi	r3,-8193
    1c7c:	10880014 	ori	r2,r2,8192
    1c80:	20c6703a 	and	r3,r4,r3
    1c84:	b880030d 	sth	r2,12(r23)
    1c88:	b8c01915 	stw	r3,100(r23)
    1c8c:	10c0020c 	andi	r3,r2,8
    1c90:	1800c326 	beq	r3,zero,1fa0 <___vfprintf_internal_r+0x39c>
    1c94:	b8c00417 	ldw	r3,16(r23)
    1c98:	1800c126 	beq	r3,zero,1fa0 <___vfprintf_internal_r+0x39c>
    1c9c:	1080068c 	andi	r2,r2,26
    1ca0:	00c00284 	movi	r3,10
    1ca4:	10c0c626 	beq	r2,r3,1fc0 <___vfprintf_internal_r+0x3bc>
    1ca8:	d8c00404 	addi	r3,sp,16
    1cac:	050000b4 	movhi	r20,2
    1cb0:	d9001e04 	addi	r4,sp,120
    1cb4:	a5258484 	addi	r20,r20,-27118
    1cb8:	d8c01e15 	stw	r3,120(sp)
    1cbc:	d8002015 	stw	zero,128(sp)
    1cc0:	d8001f15 	stw	zero,124(sp)
    1cc4:	d8003315 	stw	zero,204(sp)
    1cc8:	d8003615 	stw	zero,216(sp)
    1ccc:	d8003815 	stw	zero,224(sp)
    1cd0:	1811883a 	mov	r8,r3
    1cd4:	d8003915 	stw	zero,228(sp)
    1cd8:	d8003a15 	stw	zero,232(sp)
    1cdc:	d8002f15 	stw	zero,188(sp)
    1ce0:	d9002815 	stw	r4,160(sp)
    1ce4:	a8800007 	ldb	r2,0(r21)
    1ce8:	10028b26 	beq	r2,zero,2718 <___vfprintf_internal_r+0xb14>
    1cec:	00c00944 	movi	r3,37
    1cf0:	a823883a 	mov	r17,r21
    1cf4:	10c0021e 	bne	r2,r3,1d00 <___vfprintf_internal_r+0xfc>
    1cf8:	00001406 	br	1d4c <___vfprintf_internal_r+0x148>
    1cfc:	10c00326 	beq	r2,r3,1d0c <___vfprintf_internal_r+0x108>
    1d00:	8c400044 	addi	r17,r17,1
    1d04:	88800007 	ldb	r2,0(r17)
    1d08:	103ffc1e 	bne	r2,zero,1cfc <__alt_data_end+0xfffd1cfc>
    1d0c:	8d61c83a 	sub	r16,r17,r21
    1d10:	80000e26 	beq	r16,zero,1d4c <___vfprintf_internal_r+0x148>
    1d14:	d8c02017 	ldw	r3,128(sp)
    1d18:	d8801f17 	ldw	r2,124(sp)
    1d1c:	45400015 	stw	r21,0(r8)
    1d20:	1c07883a 	add	r3,r3,r16
    1d24:	10800044 	addi	r2,r2,1
    1d28:	d8c02015 	stw	r3,128(sp)
    1d2c:	44000115 	stw	r16,4(r8)
    1d30:	d8801f15 	stw	r2,124(sp)
    1d34:	00c001c4 	movi	r3,7
    1d38:	1880a916 	blt	r3,r2,1fe0 <___vfprintf_internal_r+0x3dc>
    1d3c:	42000204 	addi	r8,r8,8
    1d40:	d9402f17 	ldw	r5,188(sp)
    1d44:	2c0b883a 	add	r5,r5,r16
    1d48:	d9402f15 	stw	r5,188(sp)
    1d4c:	88800007 	ldb	r2,0(r17)
    1d50:	1000aa26 	beq	r2,zero,1ffc <___vfprintf_internal_r+0x3f8>
    1d54:	8d400044 	addi	r21,r17,1
    1d58:	8c400047 	ldb	r17,1(r17)
    1d5c:	0021883a 	mov	r16,zero
    1d60:	00bfffc4 	movi	r2,-1
    1d64:	0025883a 	mov	r18,zero
    1d68:	dc002905 	stb	r16,164(sp)
    1d6c:	d8002785 	stb	zero,158(sp)
    1d70:	d8002b05 	stb	zero,172(sp)
    1d74:	d8802a15 	stw	r2,168(sp)
    1d78:	d8003115 	stw	zero,196(sp)
    1d7c:	04c01604 	movi	r19,88
    1d80:	05800244 	movi	r22,9
    1d84:	9021883a 	mov	r16,r18
    1d88:	4039883a 	mov	fp,r8
    1d8c:	ad400044 	addi	r21,r21,1
    1d90:	88bff804 	addi	r2,r17,-32
    1d94:	98833236 	bltu	r19,r2,2a60 <___vfprintf_internal_r+0xe5c>
    1d98:	100490ba 	slli	r2,r2,2
    1d9c:	00c00034 	movhi	r3,0
    1da0:	18c76c04 	addi	r3,r3,7600
    1da4:	10c5883a 	add	r2,r2,r3
    1da8:	10800017 	ldw	r2,0(r2)
    1dac:	1000683a 	jmp	r2
    1db0:	00002958 	cmpnei	zero,zero,165
    1db4:	00002a60 	cmpeqi	zero,zero,169
    1db8:	00002a60 	cmpeqi	zero,zero,169
    1dbc:	00002978 	rdprs	zero,zero,165
    1dc0:	00002a60 	cmpeqi	zero,zero,169
    1dc4:	00002a60 	cmpeqi	zero,zero,169
    1dc8:	00002a60 	cmpeqi	zero,zero,169
    1dcc:	00002a60 	cmpeqi	zero,zero,169
    1dd0:	00002a60 	cmpeqi	zero,zero,169
    1dd4:	00002a60 	cmpeqi	zero,zero,169
    1dd8:	00002060 	cmpeqi	zero,zero,129
    1ddc:	00002868 	cmpgeui	zero,zero,161
    1de0:	00002a60 	cmpeqi	zero,zero,169
    1de4:	00001f24 	muli	zero,zero,124
    1de8:	00002084 	movi	zero,130
    1dec:	00002a60 	cmpeqi	zero,zero,169
    1df0:	000020d4 	movui	zero,131
    1df4:	000020e0 	cmpeqi	zero,zero,131
    1df8:	000020e0 	cmpeqi	zero,zero,131
    1dfc:	000020e0 	cmpeqi	zero,zero,131
    1e00:	000020e0 	cmpeqi	zero,zero,131
    1e04:	000020e0 	cmpeqi	zero,zero,131
    1e08:	000020e0 	cmpeqi	zero,zero,131
    1e0c:	000020e0 	cmpeqi	zero,zero,131
    1e10:	000020e0 	cmpeqi	zero,zero,131
    1e14:	000020e0 	cmpeqi	zero,zero,131
    1e18:	00002a60 	cmpeqi	zero,zero,169
    1e1c:	00002a60 	cmpeqi	zero,zero,169
    1e20:	00002a60 	cmpeqi	zero,zero,169
    1e24:	00002a60 	cmpeqi	zero,zero,169
    1e28:	00002a60 	cmpeqi	zero,zero,169
    1e2c:	00002a60 	cmpeqi	zero,zero,169
    1e30:	00002a60 	cmpeqi	zero,zero,169
    1e34:	00002a60 	cmpeqi	zero,zero,169
    1e38:	00002a60 	cmpeqi	zero,zero,169
    1e3c:	00002a60 	cmpeqi	zero,zero,169
    1e40:	0000211c 	xori	zero,zero,132
    1e44:	000021e4 	muli	zero,zero,135
    1e48:	00002a60 	cmpeqi	zero,zero,169
    1e4c:	000021e4 	muli	zero,zero,135
    1e50:	00002a60 	cmpeqi	zero,zero,169
    1e54:	00002a60 	cmpeqi	zero,zero,169
    1e58:	00002a60 	cmpeqi	zero,zero,169
    1e5c:	00002a60 	cmpeqi	zero,zero,169
    1e60:	00002290 	cmplti	zero,zero,138
    1e64:	00002a60 	cmpeqi	zero,zero,169
    1e68:	00002a60 	cmpeqi	zero,zero,169
    1e6c:	0000229c 	xori	zero,zero,138
    1e70:	00002a60 	cmpeqi	zero,zero,169
    1e74:	00002a60 	cmpeqi	zero,zero,169
    1e78:	00002a60 	cmpeqi	zero,zero,169
    1e7c:	00002a60 	cmpeqi	zero,zero,169
    1e80:	00002a60 	cmpeqi	zero,zero,169
    1e84:	00002720 	cmpeqi	zero,zero,156
    1e88:	00002a60 	cmpeqi	zero,zero,169
    1e8c:	00002a60 	cmpeqi	zero,zero,169
    1e90:	0000278c 	andi	zero,zero,158
    1e94:	00002a60 	cmpeqi	zero,zero,169
    1e98:	00002a60 	cmpeqi	zero,zero,169
    1e9c:	00002a60 	cmpeqi	zero,zero,169
    1ea0:	00002a60 	cmpeqi	zero,zero,169
    1ea4:	00002a60 	cmpeqi	zero,zero,169
    1ea8:	00002a60 	cmpeqi	zero,zero,169
    1eac:	00002a60 	cmpeqi	zero,zero,169
    1eb0:	00002a60 	cmpeqi	zero,zero,169
    1eb4:	00002a60 	cmpeqi	zero,zero,169
    1eb8:	00002a60 	cmpeqi	zero,zero,169
    1ebc:	00002a04 	movi	zero,168
    1ec0:	00002984 	movi	zero,166
    1ec4:	000021e4 	muli	zero,zero,135
    1ec8:	000021e4 	muli	zero,zero,135
    1ecc:	000021e4 	muli	zero,zero,135
    1ed0:	000029a4 	muli	zero,zero,166
    1ed4:	00002984 	movi	zero,166
    1ed8:	00002a60 	cmpeqi	zero,zero,169
    1edc:	00002a60 	cmpeqi	zero,zero,169
    1ee0:	000029b0 	cmpltui	zero,zero,166
    1ee4:	00002a60 	cmpeqi	zero,zero,169
    1ee8:	000029c4 	movi	zero,167
    1eec:	00002848 	cmpgei	zero,zero,161
    1ef0:	00001f30 	cmpltui	zero,zero,124
    1ef4:	00002880 	call	288 <_Z10show_scorej+0x8c>
    1ef8:	00002a60 	cmpeqi	zero,zero,169
    1efc:	0000288c 	andi	zero,zero,162
    1f00:	00002a60 	cmpeqi	zero,zero,169
    1f04:	000028f0 	cmpltui	zero,zero,163
    1f08:	00002a60 	cmpeqi	zero,zero,169
    1f0c:	00002a60 	cmpeqi	zero,zero,169
    1f10:	00002910 	cmplti	zero,zero,164
    1f14:	d8c03117 	ldw	r3,196(sp)
    1f18:	d8802e15 	stw	r2,184(sp)
    1f1c:	00c7c83a 	sub	r3,zero,r3
    1f20:	d8c03115 	stw	r3,196(sp)
    1f24:	84000114 	ori	r16,r16,4
    1f28:	ac400007 	ldb	r17,0(r21)
    1f2c:	003f9706 	br	1d8c <__alt_data_end+0xfffd1d8c>
    1f30:	00800c04 	movi	r2,48
    1f34:	d8802705 	stb	r2,156(sp)
    1f38:	00801e04 	movi	r2,120
    1f3c:	d8802745 	stb	r2,157(sp)
    1f40:	d9002a17 	ldw	r4,168(sp)
    1f44:	d8802e17 	ldw	r2,184(sp)
    1f48:	d8002785 	stb	zero,158(sp)
    1f4c:	e011883a 	mov	r8,fp
    1f50:	10c00104 	addi	r3,r2,4
    1f54:	14c00017 	ldw	r19,0(r2)
    1f58:	002d883a 	mov	r22,zero
    1f5c:	80800094 	ori	r2,r16,2
    1f60:	2002ca16 	blt	r4,zero,2a8c <___vfprintf_internal_r+0xe88>
    1f64:	00bfdfc4 	movi	r2,-129
    1f68:	80a4703a 	and	r18,r16,r2
    1f6c:	d8c02e15 	stw	r3,184(sp)
    1f70:	94800094 	ori	r18,r18,2
    1f74:	9802b41e 	bne	r19,zero,2a48 <___vfprintf_internal_r+0xe44>
    1f78:	014000b4 	movhi	r5,2
    1f7c:	29657d04 	addi	r5,r5,-27148
    1f80:	d9403915 	stw	r5,228(sp)
    1f84:	04401e04 	movi	r17,120
    1f88:	d8802a17 	ldw	r2,168(sp)
    1f8c:	0039883a 	mov	fp,zero
    1f90:	1001fa26 	beq	r2,zero,277c <___vfprintf_internal_r+0xb78>
    1f94:	0027883a 	mov	r19,zero
    1f98:	002d883a 	mov	r22,zero
    1f9c:	00021906 	br	2804 <___vfprintf_internal_r+0xc00>
    1fa0:	d9002d17 	ldw	r4,180(sp)
    1fa4:	b80b883a 	mov	r5,r23
    1fa8:	0003fb80 	call	3fb8 <__swsetup_r>
    1fac:	1005dc1e 	bne	r2,zero,3720 <___vfprintf_internal_r+0x1b1c>
    1fb0:	b880030b 	ldhu	r2,12(r23)
    1fb4:	00c00284 	movi	r3,10
    1fb8:	1080068c 	andi	r2,r2,26
    1fbc:	10ff3a1e 	bne	r2,r3,1ca8 <__alt_data_end+0xfffd1ca8>
    1fc0:	b880038f 	ldh	r2,14(r23)
    1fc4:	103f3816 	blt	r2,zero,1ca8 <__alt_data_end+0xfffd1ca8>
    1fc8:	d9c02e17 	ldw	r7,184(sp)
    1fcc:	d9002d17 	ldw	r4,180(sp)
    1fd0:	a80d883a 	mov	r6,r21
    1fd4:	b80b883a 	mov	r5,r23
    1fd8:	0003efc0 	call	3efc <__sbprintf>
    1fdc:	00001106 	br	2024 <___vfprintf_internal_r+0x420>
    1fe0:	d9002d17 	ldw	r4,180(sp)
    1fe4:	d9801e04 	addi	r6,sp,120
    1fe8:	b80b883a 	mov	r5,r23
    1fec:	00097b40 	call	97b4 <__sprint_r>
    1ff0:	1000081e 	bne	r2,zero,2014 <___vfprintf_internal_r+0x410>
    1ff4:	da000404 	addi	r8,sp,16
    1ff8:	003f5106 	br	1d40 <__alt_data_end+0xfffd1d40>
    1ffc:	d8802017 	ldw	r2,128(sp)
    2000:	10000426 	beq	r2,zero,2014 <___vfprintf_internal_r+0x410>
    2004:	d9002d17 	ldw	r4,180(sp)
    2008:	d9801e04 	addi	r6,sp,120
    200c:	b80b883a 	mov	r5,r23
    2010:	00097b40 	call	97b4 <__sprint_r>
    2014:	b880030b 	ldhu	r2,12(r23)
    2018:	1080100c 	andi	r2,r2,64
    201c:	1005c01e 	bne	r2,zero,3720 <___vfprintf_internal_r+0x1b1c>
    2020:	d8802f17 	ldw	r2,188(sp)
    2024:	dfc04717 	ldw	ra,284(sp)
    2028:	df004617 	ldw	fp,280(sp)
    202c:	ddc04517 	ldw	r23,276(sp)
    2030:	dd804417 	ldw	r22,272(sp)
    2034:	dd404317 	ldw	r21,268(sp)
    2038:	dd004217 	ldw	r20,264(sp)
    203c:	dcc04117 	ldw	r19,260(sp)
    2040:	dc804017 	ldw	r18,256(sp)
    2044:	dc403f17 	ldw	r17,252(sp)
    2048:	dc003e17 	ldw	r16,248(sp)
    204c:	dec04804 	addi	sp,sp,288
    2050:	f800283a 	ret
    2054:	d9002d17 	ldw	r4,180(sp)
    2058:	0005fc40 	call	5fc4 <__sinit>
    205c:	003f0206 	br	1c68 <__alt_data_end+0xfffd1c68>
    2060:	d9002e17 	ldw	r4,184(sp)
    2064:	d9402e17 	ldw	r5,184(sp)
    2068:	21000017 	ldw	r4,0(r4)
    206c:	28800104 	addi	r2,r5,4
    2070:	d9003115 	stw	r4,196(sp)
    2074:	203fa716 	blt	r4,zero,1f14 <__alt_data_end+0xfffd1f14>
    2078:	d8802e15 	stw	r2,184(sp)
    207c:	ac400007 	ldb	r17,0(r21)
    2080:	003f4206 	br	1d8c <__alt_data_end+0xfffd1d8c>
    2084:	ac400007 	ldb	r17,0(r21)
    2088:	01000a84 	movi	r4,42
    208c:	a8c00044 	addi	r3,r21,1
    2090:	89075826 	beq	r17,r4,3df4 <___vfprintf_internal_r+0x21f0>
    2094:	8cbff404 	addi	r18,r17,-48
    2098:	b486ae36 	bltu	r22,r18,3b54 <___vfprintf_internal_r+0x1f50>
    209c:	0009883a 	mov	r4,zero
    20a0:	1823883a 	mov	r17,r3
    20a4:	01400284 	movi	r5,10
    20a8:	000c3c80 	call	c3c8 <__mulsi3>
    20ac:	88c00007 	ldb	r3,0(r17)
    20b0:	1489883a 	add	r4,r2,r18
    20b4:	8d400044 	addi	r21,r17,1
    20b8:	1cbff404 	addi	r18,r3,-48
    20bc:	a823883a 	mov	r17,r21
    20c0:	b4bff82e 	bgeu	r22,r18,20a4 <__alt_data_end+0xfffd20a4>
    20c4:	1823883a 	mov	r17,r3
    20c8:	2005f616 	blt	r4,zero,38a4 <___vfprintf_internal_r+0x1ca0>
    20cc:	d9002a15 	stw	r4,168(sp)
    20d0:	003f2f06 	br	1d90 <__alt_data_end+0xfffd1d90>
    20d4:	84002014 	ori	r16,r16,128
    20d8:	ac400007 	ldb	r17,0(r21)
    20dc:	003f2b06 	br	1d8c <__alt_data_end+0xfffd1d8c>
    20e0:	8cbff404 	addi	r18,r17,-48
    20e4:	d8003115 	stw	zero,196(sp)
    20e8:	0009883a 	mov	r4,zero
    20ec:	a823883a 	mov	r17,r21
    20f0:	01400284 	movi	r5,10
    20f4:	000c3c80 	call	c3c8 <__mulsi3>
    20f8:	88c00007 	ldb	r3,0(r17)
    20fc:	9089883a 	add	r4,r18,r2
    2100:	ad400044 	addi	r21,r21,1
    2104:	1cbff404 	addi	r18,r3,-48
    2108:	a823883a 	mov	r17,r21
    210c:	b4bff82e 	bgeu	r22,r18,20f0 <__alt_data_end+0xfffd20f0>
    2110:	1823883a 	mov	r17,r3
    2114:	d9003115 	stw	r4,196(sp)
    2118:	003f1d06 	br	1d90 <__alt_data_end+0xfffd1d90>
    211c:	8025883a 	mov	r18,r16
    2120:	dc002903 	ldbu	r16,164(sp)
    2124:	e011883a 	mov	r8,fp
    2128:	84003fcc 	andi	r16,r16,255
    212c:	8007531e 	bne	r16,zero,3e7c <___vfprintf_internal_r+0x2278>
    2130:	94800414 	ori	r18,r18,16
    2134:	9080080c 	andi	r2,r18,32
    2138:	1003a326 	beq	r2,zero,2fc8 <___vfprintf_internal_r+0x13c4>
    213c:	d9002e17 	ldw	r4,184(sp)
    2140:	20800117 	ldw	r2,4(r4)
    2144:	24c00017 	ldw	r19,0(r4)
    2148:	21000204 	addi	r4,r4,8
    214c:	d9002e15 	stw	r4,184(sp)
    2150:	102d883a 	mov	r22,r2
    2154:	10047316 	blt	r2,zero,3324 <___vfprintf_internal_r+0x1720>
    2158:	d9002a17 	ldw	r4,168(sp)
    215c:	df002783 	ldbu	fp,158(sp)
    2160:	2003e416 	blt	r4,zero,30f4 <___vfprintf_internal_r+0x14f0>
    2164:	00ffdfc4 	movi	r3,-129
    2168:	9d84b03a 	or	r2,r19,r22
    216c:	90e4703a 	and	r18,r18,r3
    2170:	10018026 	beq	r2,zero,2774 <___vfprintf_internal_r+0xb70>
    2174:	b003ab26 	beq	r22,zero,3024 <___vfprintf_internal_r+0x1420>
    2178:	dc402915 	stw	r17,164(sp)
    217c:	dc001e04 	addi	r16,sp,120
    2180:	b023883a 	mov	r17,r22
    2184:	402d883a 	mov	r22,r8
    2188:	9809883a 	mov	r4,r19
    218c:	880b883a 	mov	r5,r17
    2190:	01800284 	movi	r6,10
    2194:	000f883a 	mov	r7,zero
    2198:	000be040 	call	be04 <__umoddi3>
    219c:	10800c04 	addi	r2,r2,48
    21a0:	843fffc4 	addi	r16,r16,-1
    21a4:	9809883a 	mov	r4,r19
    21a8:	880b883a 	mov	r5,r17
    21ac:	80800005 	stb	r2,0(r16)
    21b0:	01800284 	movi	r6,10
    21b4:	000f883a 	mov	r7,zero
    21b8:	000b8080 	call	b808 <__udivdi3>
    21bc:	1027883a 	mov	r19,r2
    21c0:	10c4b03a 	or	r2,r2,r3
    21c4:	1823883a 	mov	r17,r3
    21c8:	103fef1e 	bne	r2,zero,2188 <__alt_data_end+0xfffd2188>
    21cc:	d8c02817 	ldw	r3,160(sp)
    21d0:	dc402917 	ldw	r17,164(sp)
    21d4:	b011883a 	mov	r8,r22
    21d8:	1c07c83a 	sub	r3,r3,r16
    21dc:	d8c02b15 	stw	r3,172(sp)
    21e0:	00005f06 	br	2360 <___vfprintf_internal_r+0x75c>
    21e4:	8025883a 	mov	r18,r16
    21e8:	dc002903 	ldbu	r16,164(sp)
    21ec:	e011883a 	mov	r8,fp
    21f0:	84003fcc 	andi	r16,r16,255
    21f4:	80071e1e 	bne	r16,zero,3e70 <___vfprintf_internal_r+0x226c>
    21f8:	9080020c 	andi	r2,r18,8
    21fc:	1004af26 	beq	r2,zero,34bc <___vfprintf_internal_r+0x18b8>
    2200:	d9002e17 	ldw	r4,184(sp)
    2204:	d9402e17 	ldw	r5,184(sp)
    2208:	d8802e17 	ldw	r2,184(sp)
    220c:	21000017 	ldw	r4,0(r4)
    2210:	29400117 	ldw	r5,4(r5)
    2214:	10800204 	addi	r2,r2,8
    2218:	d9003615 	stw	r4,216(sp)
    221c:	d9403815 	stw	r5,224(sp)
    2220:	d8802e15 	stw	r2,184(sp)
    2224:	d9003617 	ldw	r4,216(sp)
    2228:	d9403817 	ldw	r5,224(sp)
    222c:	da003d15 	stw	r8,244(sp)
    2230:	04000044 	movi	r16,1
    2234:	00092740 	call	9274 <__fpclassifyd>
    2238:	da003d17 	ldw	r8,244(sp)
    223c:	1404441e 	bne	r2,r16,3350 <___vfprintf_internal_r+0x174c>
    2240:	d9003617 	ldw	r4,216(sp)
    2244:	d9403817 	ldw	r5,224(sp)
    2248:	000d883a 	mov	r6,zero
    224c:	000f883a 	mov	r7,zero
    2250:	000d7d00 	call	d7d0 <__ledf2>
    2254:	da003d17 	ldw	r8,244(sp)
    2258:	1005e316 	blt	r2,zero,39e8 <___vfprintf_internal_r+0x1de4>
    225c:	df002783 	ldbu	fp,158(sp)
    2260:	008011c4 	movi	r2,71
    2264:	1445580e 	bge	r2,r17,37c8 <___vfprintf_internal_r+0x1bc4>
    2268:	040000b4 	movhi	r16,2
    226c:	84257504 	addi	r16,r16,-27180
    2270:	00c000c4 	movi	r3,3
    2274:	00bfdfc4 	movi	r2,-129
    2278:	d8c02915 	stw	r3,164(sp)
    227c:	90a4703a 	and	r18,r18,r2
    2280:	d8c02b15 	stw	r3,172(sp)
    2284:	d8002a15 	stw	zero,168(sp)
    2288:	d8003215 	stw	zero,200(sp)
    228c:	00003a06 	br	2378 <___vfprintf_internal_r+0x774>
    2290:	84000214 	ori	r16,r16,8
    2294:	ac400007 	ldb	r17,0(r21)
    2298:	003ebc06 	br	1d8c <__alt_data_end+0xfffd1d8c>
    229c:	8025883a 	mov	r18,r16
    22a0:	dc002903 	ldbu	r16,164(sp)
    22a4:	e011883a 	mov	r8,fp
    22a8:	84003fcc 	andi	r16,r16,255
    22ac:	8007001e 	bne	r16,zero,3eb0 <___vfprintf_internal_r+0x22ac>
    22b0:	94800414 	ori	r18,r18,16
    22b4:	9080080c 	andi	r2,r18,32
    22b8:	1002fa26 	beq	r2,zero,2ea4 <___vfprintf_internal_r+0x12a0>
    22bc:	d9002e17 	ldw	r4,184(sp)
    22c0:	d9402a17 	ldw	r5,168(sp)
    22c4:	d8002785 	stb	zero,158(sp)
    22c8:	20800204 	addi	r2,r4,8
    22cc:	24c00017 	ldw	r19,0(r4)
    22d0:	25800117 	ldw	r22,4(r4)
    22d4:	2804b116 	blt	r5,zero,359c <___vfprintf_internal_r+0x1998>
    22d8:	013fdfc4 	movi	r4,-129
    22dc:	9d86b03a 	or	r3,r19,r22
    22e0:	d8802e15 	stw	r2,184(sp)
    22e4:	9124703a 	and	r18,r18,r4
    22e8:	1802fb1e 	bne	r3,zero,2ed8 <___vfprintf_internal_r+0x12d4>
    22ec:	d8c02a17 	ldw	r3,168(sp)
    22f0:	0039883a 	mov	fp,zero
    22f4:	1805e526 	beq	r3,zero,3a8c <___vfprintf_internal_r+0x1e88>
    22f8:	0027883a 	mov	r19,zero
    22fc:	002d883a 	mov	r22,zero
    2300:	dc001e04 	addi	r16,sp,120
    2304:	9806d0fa 	srli	r3,r19,3
    2308:	b008977a 	slli	r4,r22,29
    230c:	b02cd0fa 	srli	r22,r22,3
    2310:	9cc001cc 	andi	r19,r19,7
    2314:	98800c04 	addi	r2,r19,48
    2318:	843fffc4 	addi	r16,r16,-1
    231c:	20e6b03a 	or	r19,r4,r3
    2320:	80800005 	stb	r2,0(r16)
    2324:	9d86b03a 	or	r3,r19,r22
    2328:	183ff61e 	bne	r3,zero,2304 <__alt_data_end+0xfffd2304>
    232c:	90c0004c 	andi	r3,r18,1
    2330:	18014126 	beq	r3,zero,2838 <___vfprintf_internal_r+0xc34>
    2334:	10803fcc 	andi	r2,r2,255
    2338:	1080201c 	xori	r2,r2,128
    233c:	10bfe004 	addi	r2,r2,-128
    2340:	00c00c04 	movi	r3,48
    2344:	10c13c26 	beq	r2,r3,2838 <___vfprintf_internal_r+0xc34>
    2348:	80ffffc5 	stb	r3,-1(r16)
    234c:	d8c02817 	ldw	r3,160(sp)
    2350:	80bfffc4 	addi	r2,r16,-1
    2354:	1021883a 	mov	r16,r2
    2358:	1887c83a 	sub	r3,r3,r2
    235c:	d8c02b15 	stw	r3,172(sp)
    2360:	d8802b17 	ldw	r2,172(sp)
    2364:	d9002a17 	ldw	r4,168(sp)
    2368:	1100010e 	bge	r2,r4,2370 <___vfprintf_internal_r+0x76c>
    236c:	2005883a 	mov	r2,r4
    2370:	d8802915 	stw	r2,164(sp)
    2374:	d8003215 	stw	zero,200(sp)
    2378:	e7003fcc 	andi	fp,fp,255
    237c:	e700201c 	xori	fp,fp,128
    2380:	e73fe004 	addi	fp,fp,-128
    2384:	e0000326 	beq	fp,zero,2394 <___vfprintf_internal_r+0x790>
    2388:	d8c02917 	ldw	r3,164(sp)
    238c:	18c00044 	addi	r3,r3,1
    2390:	d8c02915 	stw	r3,164(sp)
    2394:	90c0008c 	andi	r3,r18,2
    2398:	d8c02c15 	stw	r3,176(sp)
    239c:	18000326 	beq	r3,zero,23ac <___vfprintf_internal_r+0x7a8>
    23a0:	d8c02917 	ldw	r3,164(sp)
    23a4:	18c00084 	addi	r3,r3,2
    23a8:	d8c02915 	stw	r3,164(sp)
    23ac:	90c0210c 	andi	r3,r18,132
    23b0:	d8c03015 	stw	r3,192(sp)
    23b4:	1801c51e 	bne	r3,zero,2acc <___vfprintf_internal_r+0xec8>
    23b8:	d9003117 	ldw	r4,196(sp)
    23bc:	d8c02917 	ldw	r3,164(sp)
    23c0:	20e7c83a 	sub	r19,r4,r3
    23c4:	04c1c10e 	bge	zero,r19,2acc <___vfprintf_internal_r+0xec8>
    23c8:	02400404 	movi	r9,16
    23cc:	d8c02017 	ldw	r3,128(sp)
    23d0:	d8801f17 	ldw	r2,124(sp)
    23d4:	4cc52f0e 	bge	r9,r19,3894 <___vfprintf_internal_r+0x1c90>
    23d8:	014000b4 	movhi	r5,2
    23dc:	29658884 	addi	r5,r5,-27102
    23e0:	dc403b15 	stw	r17,236(sp)
    23e4:	d9403515 	stw	r5,212(sp)
    23e8:	9823883a 	mov	r17,r19
    23ec:	482d883a 	mov	r22,r9
    23f0:	9027883a 	mov	r19,r18
    23f4:	070001c4 	movi	fp,7
    23f8:	8025883a 	mov	r18,r16
    23fc:	dc002d17 	ldw	r16,180(sp)
    2400:	00000306 	br	2410 <___vfprintf_internal_r+0x80c>
    2404:	8c7ffc04 	addi	r17,r17,-16
    2408:	42000204 	addi	r8,r8,8
    240c:	b440130e 	bge	r22,r17,245c <___vfprintf_internal_r+0x858>
    2410:	010000b4 	movhi	r4,2
    2414:	18c00404 	addi	r3,r3,16
    2418:	10800044 	addi	r2,r2,1
    241c:	21258884 	addi	r4,r4,-27102
    2420:	41000015 	stw	r4,0(r8)
    2424:	45800115 	stw	r22,4(r8)
    2428:	d8c02015 	stw	r3,128(sp)
    242c:	d8801f15 	stw	r2,124(sp)
    2430:	e0bff40e 	bge	fp,r2,2404 <__alt_data_end+0xfffd2404>
    2434:	d9801e04 	addi	r6,sp,120
    2438:	b80b883a 	mov	r5,r23
    243c:	8009883a 	mov	r4,r16
    2440:	00097b40 	call	97b4 <__sprint_r>
    2444:	103ef31e 	bne	r2,zero,2014 <__alt_data_end+0xfffd2014>
    2448:	8c7ffc04 	addi	r17,r17,-16
    244c:	d8c02017 	ldw	r3,128(sp)
    2450:	d8801f17 	ldw	r2,124(sp)
    2454:	da000404 	addi	r8,sp,16
    2458:	b47fed16 	blt	r22,r17,2410 <__alt_data_end+0xfffd2410>
    245c:	9021883a 	mov	r16,r18
    2460:	9825883a 	mov	r18,r19
    2464:	8827883a 	mov	r19,r17
    2468:	dc403b17 	ldw	r17,236(sp)
    246c:	d9403517 	ldw	r5,212(sp)
    2470:	98c7883a 	add	r3,r19,r3
    2474:	10800044 	addi	r2,r2,1
    2478:	41400015 	stw	r5,0(r8)
    247c:	44c00115 	stw	r19,4(r8)
    2480:	d8c02015 	stw	r3,128(sp)
    2484:	d8801f15 	stw	r2,124(sp)
    2488:	010001c4 	movi	r4,7
    248c:	2082c516 	blt	r4,r2,2fa4 <___vfprintf_internal_r+0x13a0>
    2490:	df002787 	ldb	fp,158(sp)
    2494:	42000204 	addi	r8,r8,8
    2498:	e0000c26 	beq	fp,zero,24cc <___vfprintf_internal_r+0x8c8>
    249c:	d8801f17 	ldw	r2,124(sp)
    24a0:	d9002784 	addi	r4,sp,158
    24a4:	18c00044 	addi	r3,r3,1
    24a8:	10800044 	addi	r2,r2,1
    24ac:	41000015 	stw	r4,0(r8)
    24b0:	01000044 	movi	r4,1
    24b4:	41000115 	stw	r4,4(r8)
    24b8:	d8c02015 	stw	r3,128(sp)
    24bc:	d8801f15 	stw	r2,124(sp)
    24c0:	010001c4 	movi	r4,7
    24c4:	20825e16 	blt	r4,r2,2e40 <___vfprintf_internal_r+0x123c>
    24c8:	42000204 	addi	r8,r8,8
    24cc:	d8802c17 	ldw	r2,176(sp)
    24d0:	10000c26 	beq	r2,zero,2504 <___vfprintf_internal_r+0x900>
    24d4:	d8801f17 	ldw	r2,124(sp)
    24d8:	d9002704 	addi	r4,sp,156
    24dc:	18c00084 	addi	r3,r3,2
    24e0:	10800044 	addi	r2,r2,1
    24e4:	41000015 	stw	r4,0(r8)
    24e8:	01000084 	movi	r4,2
    24ec:	41000115 	stw	r4,4(r8)
    24f0:	d8c02015 	stw	r3,128(sp)
    24f4:	d8801f15 	stw	r2,124(sp)
    24f8:	010001c4 	movi	r4,7
    24fc:	20825816 	blt	r4,r2,2e60 <___vfprintf_internal_r+0x125c>
    2500:	42000204 	addi	r8,r8,8
    2504:	d9003017 	ldw	r4,192(sp)
    2508:	00802004 	movi	r2,128
    250c:	2081bb26 	beq	r4,r2,2bfc <___vfprintf_internal_r+0xff8>
    2510:	d9402a17 	ldw	r5,168(sp)
    2514:	d8802b17 	ldw	r2,172(sp)
    2518:	28adc83a 	sub	r22,r5,r2
    251c:	0580310e 	bge	zero,r22,25e4 <___vfprintf_internal_r+0x9e0>
    2520:	07000404 	movi	fp,16
    2524:	d8801f17 	ldw	r2,124(sp)
    2528:	e584360e 	bge	fp,r22,3604 <___vfprintf_internal_r+0x1a00>
    252c:	014000b4 	movhi	r5,2
    2530:	29658484 	addi	r5,r5,-27118
    2534:	dc402a15 	stw	r17,168(sp)
    2538:	d9402c15 	stw	r5,176(sp)
    253c:	b023883a 	mov	r17,r22
    2540:	04c001c4 	movi	r19,7
    2544:	a82d883a 	mov	r22,r21
    2548:	902b883a 	mov	r21,r18
    254c:	8025883a 	mov	r18,r16
    2550:	dc002d17 	ldw	r16,180(sp)
    2554:	00000306 	br	2564 <___vfprintf_internal_r+0x960>
    2558:	8c7ffc04 	addi	r17,r17,-16
    255c:	42000204 	addi	r8,r8,8
    2560:	e440110e 	bge	fp,r17,25a8 <___vfprintf_internal_r+0x9a4>
    2564:	18c00404 	addi	r3,r3,16
    2568:	10800044 	addi	r2,r2,1
    256c:	45000015 	stw	r20,0(r8)
    2570:	47000115 	stw	fp,4(r8)
    2574:	d8c02015 	stw	r3,128(sp)
    2578:	d8801f15 	stw	r2,124(sp)
    257c:	98bff60e 	bge	r19,r2,2558 <__alt_data_end+0xfffd2558>
    2580:	d9801e04 	addi	r6,sp,120
    2584:	b80b883a 	mov	r5,r23
    2588:	8009883a 	mov	r4,r16
    258c:	00097b40 	call	97b4 <__sprint_r>
    2590:	103ea01e 	bne	r2,zero,2014 <__alt_data_end+0xfffd2014>
    2594:	8c7ffc04 	addi	r17,r17,-16
    2598:	d8c02017 	ldw	r3,128(sp)
    259c:	d8801f17 	ldw	r2,124(sp)
    25a0:	da000404 	addi	r8,sp,16
    25a4:	e47fef16 	blt	fp,r17,2564 <__alt_data_end+0xfffd2564>
    25a8:	9021883a 	mov	r16,r18
    25ac:	a825883a 	mov	r18,r21
    25b0:	b02b883a 	mov	r21,r22
    25b4:	882d883a 	mov	r22,r17
    25b8:	dc402a17 	ldw	r17,168(sp)
    25bc:	d9002c17 	ldw	r4,176(sp)
    25c0:	1d87883a 	add	r3,r3,r22
    25c4:	10800044 	addi	r2,r2,1
    25c8:	41000015 	stw	r4,0(r8)
    25cc:	45800115 	stw	r22,4(r8)
    25d0:	d8c02015 	stw	r3,128(sp)
    25d4:	d8801f15 	stw	r2,124(sp)
    25d8:	010001c4 	movi	r4,7
    25dc:	20821016 	blt	r4,r2,2e20 <___vfprintf_internal_r+0x121c>
    25e0:	42000204 	addi	r8,r8,8
    25e4:	9080400c 	andi	r2,r18,256
    25e8:	10013a1e 	bne	r2,zero,2ad4 <___vfprintf_internal_r+0xed0>
    25ec:	d9402b17 	ldw	r5,172(sp)
    25f0:	d8801f17 	ldw	r2,124(sp)
    25f4:	44000015 	stw	r16,0(r8)
    25f8:	1947883a 	add	r3,r3,r5
    25fc:	10800044 	addi	r2,r2,1
    2600:	41400115 	stw	r5,4(r8)
    2604:	d8c02015 	stw	r3,128(sp)
    2608:	d8801f15 	stw	r2,124(sp)
    260c:	010001c4 	movi	r4,7
    2610:	2081f516 	blt	r4,r2,2de8 <___vfprintf_internal_r+0x11e4>
    2614:	42000204 	addi	r8,r8,8
    2618:	9480010c 	andi	r18,r18,4
    261c:	90003226 	beq	r18,zero,26e8 <___vfprintf_internal_r+0xae4>
    2620:	d9403117 	ldw	r5,196(sp)
    2624:	d8802917 	ldw	r2,164(sp)
    2628:	28a1c83a 	sub	r16,r5,r2
    262c:	04002e0e 	bge	zero,r16,26e8 <___vfprintf_internal_r+0xae4>
    2630:	04400404 	movi	r17,16
    2634:	d8801f17 	ldw	r2,124(sp)
    2638:	8c04c40e 	bge	r17,r16,394c <___vfprintf_internal_r+0x1d48>
    263c:	014000b4 	movhi	r5,2
    2640:	29658884 	addi	r5,r5,-27102
    2644:	d9403515 	stw	r5,212(sp)
    2648:	048001c4 	movi	r18,7
    264c:	dcc02d17 	ldw	r19,180(sp)
    2650:	00000306 	br	2660 <___vfprintf_internal_r+0xa5c>
    2654:	843ffc04 	addi	r16,r16,-16
    2658:	42000204 	addi	r8,r8,8
    265c:	8c00130e 	bge	r17,r16,26ac <___vfprintf_internal_r+0xaa8>
    2660:	010000b4 	movhi	r4,2
    2664:	18c00404 	addi	r3,r3,16
    2668:	10800044 	addi	r2,r2,1
    266c:	21258884 	addi	r4,r4,-27102
    2670:	41000015 	stw	r4,0(r8)
    2674:	44400115 	stw	r17,4(r8)
    2678:	d8c02015 	stw	r3,128(sp)
    267c:	d8801f15 	stw	r2,124(sp)
    2680:	90bff40e 	bge	r18,r2,2654 <__alt_data_end+0xfffd2654>
    2684:	d9801e04 	addi	r6,sp,120
    2688:	b80b883a 	mov	r5,r23
    268c:	9809883a 	mov	r4,r19
    2690:	00097b40 	call	97b4 <__sprint_r>
    2694:	103e5f1e 	bne	r2,zero,2014 <__alt_data_end+0xfffd2014>
    2698:	843ffc04 	addi	r16,r16,-16
    269c:	d8c02017 	ldw	r3,128(sp)
    26a0:	d8801f17 	ldw	r2,124(sp)
    26a4:	da000404 	addi	r8,sp,16
    26a8:	8c3fed16 	blt	r17,r16,2660 <__alt_data_end+0xfffd2660>
    26ac:	d9403517 	ldw	r5,212(sp)
    26b0:	1c07883a 	add	r3,r3,r16
    26b4:	10800044 	addi	r2,r2,1
    26b8:	41400015 	stw	r5,0(r8)
    26bc:	44000115 	stw	r16,4(r8)
    26c0:	d8c02015 	stw	r3,128(sp)
    26c4:	d8801f15 	stw	r2,124(sp)
    26c8:	010001c4 	movi	r4,7
    26cc:	2080060e 	bge	r4,r2,26e8 <___vfprintf_internal_r+0xae4>
    26d0:	d9002d17 	ldw	r4,180(sp)
    26d4:	d9801e04 	addi	r6,sp,120
    26d8:	b80b883a 	mov	r5,r23
    26dc:	00097b40 	call	97b4 <__sprint_r>
    26e0:	103e4c1e 	bne	r2,zero,2014 <__alt_data_end+0xfffd2014>
    26e4:	d8c02017 	ldw	r3,128(sp)
    26e8:	d8803117 	ldw	r2,196(sp)
    26ec:	d9002917 	ldw	r4,164(sp)
    26f0:	1100010e 	bge	r2,r4,26f8 <___vfprintf_internal_r+0xaf4>
    26f4:	2005883a 	mov	r2,r4
    26f8:	d9402f17 	ldw	r5,188(sp)
    26fc:	288b883a 	add	r5,r5,r2
    2700:	d9402f15 	stw	r5,188(sp)
    2704:	1801c01e 	bne	r3,zero,2e08 <___vfprintf_internal_r+0x1204>
    2708:	a8800007 	ldb	r2,0(r21)
    270c:	d8001f15 	stw	zero,124(sp)
    2710:	da000404 	addi	r8,sp,16
    2714:	103d751e 	bne	r2,zero,1cec <__alt_data_end+0xfffd1cec>
    2718:	a823883a 	mov	r17,r21
    271c:	003d8b06 	br	1d4c <__alt_data_end+0xfffd1d4c>
    2720:	8025883a 	mov	r18,r16
    2724:	dc002903 	ldbu	r16,164(sp)
    2728:	e011883a 	mov	r8,fp
    272c:	84003fcc 	andi	r16,r16,255
    2730:	8005e51e 	bne	r16,zero,3ec8 <___vfprintf_internal_r+0x22c4>
    2734:	94800414 	ori	r18,r18,16
    2738:	9080080c 	andi	r2,r18,32
    273c:	10022b26 	beq	r2,zero,2fec <___vfprintf_internal_r+0x13e8>
    2740:	d9002e17 	ldw	r4,184(sp)
    2744:	d9402a17 	ldw	r5,168(sp)
    2748:	d8002785 	stb	zero,158(sp)
    274c:	20c00204 	addi	r3,r4,8
    2750:	24c00017 	ldw	r19,0(r4)
    2754:	25800117 	ldw	r22,4(r4)
    2758:	28042e16 	blt	r5,zero,3814 <___vfprintf_internal_r+0x1c10>
    275c:	013fdfc4 	movi	r4,-129
    2760:	9d84b03a 	or	r2,r19,r22
    2764:	d8c02e15 	stw	r3,184(sp)
    2768:	9124703a 	and	r18,r18,r4
    276c:	0039883a 	mov	fp,zero
    2770:	103e801e 	bne	r2,zero,2174 <__alt_data_end+0xfffd2174>
    2774:	d9002a17 	ldw	r4,168(sp)
    2778:	2002e01e 	bne	r4,zero,32fc <___vfprintf_internal_r+0x16f8>
    277c:	d8002a15 	stw	zero,168(sp)
    2780:	d8002b15 	stw	zero,172(sp)
    2784:	dc001e04 	addi	r16,sp,120
    2788:	003ef506 	br	2360 <__alt_data_end+0xfffd2360>
    278c:	8025883a 	mov	r18,r16
    2790:	dc002903 	ldbu	r16,164(sp)
    2794:	e011883a 	mov	r8,fp
    2798:	84003fcc 	andi	r16,r16,255
    279c:	8005ba1e 	bne	r16,zero,3e88 <___vfprintf_internal_r+0x2284>
    27a0:	010000b4 	movhi	r4,2
    27a4:	21257804 	addi	r4,r4,-27168
    27a8:	d9003915 	stw	r4,228(sp)
    27ac:	9080080c 	andi	r2,r18,32
    27b0:	10006126 	beq	r2,zero,2938 <___vfprintf_internal_r+0xd34>
    27b4:	d9402e17 	ldw	r5,184(sp)
    27b8:	2cc00017 	ldw	r19,0(r5)
    27bc:	2d800117 	ldw	r22,4(r5)
    27c0:	29400204 	addi	r5,r5,8
    27c4:	d9402e15 	stw	r5,184(sp)
    27c8:	9080004c 	andi	r2,r18,1
    27cc:	1001ac26 	beq	r2,zero,2e80 <___vfprintf_internal_r+0x127c>
    27d0:	9d84b03a 	or	r2,r19,r22
    27d4:	10038526 	beq	r2,zero,35ec <___vfprintf_internal_r+0x19e8>
    27d8:	d8c02a17 	ldw	r3,168(sp)
    27dc:	00800c04 	movi	r2,48
    27e0:	d8802705 	stb	r2,156(sp)
    27e4:	dc402745 	stb	r17,157(sp)
    27e8:	d8002785 	stb	zero,158(sp)
    27ec:	90800094 	ori	r2,r18,2
    27f0:	18047916 	blt	r3,zero,39d8 <___vfprintf_internal_r+0x1dd4>
    27f4:	00bfdfc4 	movi	r2,-129
    27f8:	90a4703a 	and	r18,r18,r2
    27fc:	94800094 	ori	r18,r18,2
    2800:	0039883a 	mov	fp,zero
    2804:	d9003917 	ldw	r4,228(sp)
    2808:	dc001e04 	addi	r16,sp,120
    280c:	988003cc 	andi	r2,r19,15
    2810:	b006973a 	slli	r3,r22,28
    2814:	2085883a 	add	r2,r4,r2
    2818:	9826d13a 	srli	r19,r19,4
    281c:	10800003 	ldbu	r2,0(r2)
    2820:	b02cd13a 	srli	r22,r22,4
    2824:	843fffc4 	addi	r16,r16,-1
    2828:	1ce6b03a 	or	r19,r3,r19
    282c:	80800005 	stb	r2,0(r16)
    2830:	9d84b03a 	or	r2,r19,r22
    2834:	103ff51e 	bne	r2,zero,280c <__alt_data_end+0xfffd280c>
    2838:	d8c02817 	ldw	r3,160(sp)
    283c:	1c07c83a 	sub	r3,r3,r16
    2840:	d8c02b15 	stw	r3,172(sp)
    2844:	003ec606 	br	2360 <__alt_data_end+0xfffd2360>
    2848:	8025883a 	mov	r18,r16
    284c:	dc002903 	ldbu	r16,164(sp)
    2850:	e011883a 	mov	r8,fp
    2854:	84003fcc 	andi	r16,r16,255
    2858:	803e9626 	beq	r16,zero,22b4 <__alt_data_end+0xfffd22b4>
    285c:	d8c02b03 	ldbu	r3,172(sp)
    2860:	d8c02785 	stb	r3,158(sp)
    2864:	003e9306 	br	22b4 <__alt_data_end+0xfffd22b4>
    2868:	00c00044 	movi	r3,1
    286c:	d8c02905 	stb	r3,164(sp)
    2870:	00c00ac4 	movi	r3,43
    2874:	d8c02b05 	stb	r3,172(sp)
    2878:	ac400007 	ldb	r17,0(r21)
    287c:	003d4306 	br	1d8c <__alt_data_end+0xfffd1d8c>
    2880:	84000814 	ori	r16,r16,32
    2884:	ac400007 	ldb	r17,0(r21)
    2888:	003d4006 	br	1d8c <__alt_data_end+0xfffd1d8c>
    288c:	d8802e17 	ldw	r2,184(sp)
    2890:	8025883a 	mov	r18,r16
    2894:	d8002785 	stb	zero,158(sp)
    2898:	14000017 	ldw	r16,0(r2)
    289c:	e011883a 	mov	r8,fp
    28a0:	14c00104 	addi	r19,r2,4
    28a4:	80042d26 	beq	r16,zero,395c <___vfprintf_internal_r+0x1d58>
    28a8:	d8c02a17 	ldw	r3,168(sp)
    28ac:	1803e416 	blt	r3,zero,3840 <___vfprintf_internal_r+0x1c3c>
    28b0:	180d883a 	mov	r6,r3
    28b4:	000b883a 	mov	r5,zero
    28b8:	8009883a 	mov	r4,r16
    28bc:	df003d15 	stw	fp,244(sp)
    28c0:	000753c0 	call	753c <memchr>
    28c4:	da003d17 	ldw	r8,244(sp)
    28c8:	10046826 	beq	r2,zero,3a6c <___vfprintf_internal_r+0x1e68>
    28cc:	1405c83a 	sub	r2,r2,r16
    28d0:	d8802b15 	stw	r2,172(sp)
    28d4:	1003e016 	blt	r2,zero,3858 <___vfprintf_internal_r+0x1c54>
    28d8:	df002783 	ldbu	fp,158(sp)
    28dc:	d8802915 	stw	r2,164(sp)
    28e0:	dcc02e15 	stw	r19,184(sp)
    28e4:	d8002a15 	stw	zero,168(sp)
    28e8:	d8003215 	stw	zero,200(sp)
    28ec:	003ea206 	br	2378 <__alt_data_end+0xfffd2378>
    28f0:	8025883a 	mov	r18,r16
    28f4:	dc002903 	ldbu	r16,164(sp)
    28f8:	e011883a 	mov	r8,fp
    28fc:	84003fcc 	andi	r16,r16,255
    2900:	803f8d26 	beq	r16,zero,2738 <__alt_data_end+0xfffd2738>
    2904:	d8c02b03 	ldbu	r3,172(sp)
    2908:	d8c02785 	stb	r3,158(sp)
    290c:	003f8a06 	br	2738 <__alt_data_end+0xfffd2738>
    2910:	8025883a 	mov	r18,r16
    2914:	dc002903 	ldbu	r16,164(sp)
    2918:	e011883a 	mov	r8,fp
    291c:	84003fcc 	andi	r16,r16,255
    2920:	8005661e 	bne	r16,zero,3ebc <___vfprintf_internal_r+0x22b8>
    2924:	010000b4 	movhi	r4,2
    2928:	21257d04 	addi	r4,r4,-27148
    292c:	d9003915 	stw	r4,228(sp)
    2930:	9080080c 	andi	r2,r18,32
    2934:	103f9f1e 	bne	r2,zero,27b4 <__alt_data_end+0xfffd27b4>
    2938:	9080040c 	andi	r2,r18,16
    293c:	1002eb26 	beq	r2,zero,34ec <___vfprintf_internal_r+0x18e8>
    2940:	d8802e17 	ldw	r2,184(sp)
    2944:	002d883a 	mov	r22,zero
    2948:	14c00017 	ldw	r19,0(r2)
    294c:	10800104 	addi	r2,r2,4
    2950:	d8802e15 	stw	r2,184(sp)
    2954:	003f9c06 	br	27c8 <__alt_data_end+0xfffd27c8>
    2958:	d8802b07 	ldb	r2,172(sp)
    295c:	1002e11e 	bne	r2,zero,34e4 <___vfprintf_internal_r+0x18e0>
    2960:	00c00044 	movi	r3,1
    2964:	d8c02905 	stb	r3,164(sp)
    2968:	00c00804 	movi	r3,32
    296c:	d8c02b05 	stb	r3,172(sp)
    2970:	ac400007 	ldb	r17,0(r21)
    2974:	003d0506 	br	1d8c <__alt_data_end+0xfffd1d8c>
    2978:	84000054 	ori	r16,r16,1
    297c:	ac400007 	ldb	r17,0(r21)
    2980:	003d0206 	br	1d8c <__alt_data_end+0xfffd1d8c>
    2984:	8025883a 	mov	r18,r16
    2988:	dc002903 	ldbu	r16,164(sp)
    298c:	e011883a 	mov	r8,fp
    2990:	84003fcc 	andi	r16,r16,255
    2994:	803de726 	beq	r16,zero,2134 <__alt_data_end+0xfffd2134>
    2998:	d8c02b03 	ldbu	r3,172(sp)
    299c:	d8c02785 	stb	r3,158(sp)
    29a0:	003de406 	br	2134 <__alt_data_end+0xfffd2134>
    29a4:	84001014 	ori	r16,r16,64
    29a8:	ac400007 	ldb	r17,0(r21)
    29ac:	003cf706 	br	1d8c <__alt_data_end+0xfffd1d8c>
    29b0:	ac400007 	ldb	r17,0(r21)
    29b4:	00801b04 	movi	r2,108
    29b8:	88838f26 	beq	r17,r2,37f8 <___vfprintf_internal_r+0x1bf4>
    29bc:	84000414 	ori	r16,r16,16
    29c0:	003cf206 	br	1d8c <__alt_data_end+0xfffd1d8c>
    29c4:	8025883a 	mov	r18,r16
    29c8:	dc002903 	ldbu	r16,164(sp)
    29cc:	e011883a 	mov	r8,fp
    29d0:	84003fcc 	andi	r16,r16,255
    29d4:	80053f1e 	bne	r16,zero,3ed4 <___vfprintf_internal_r+0x22d0>
    29d8:	9080080c 	andi	r2,r18,32
    29dc:	1002d226 	beq	r2,zero,3528 <___vfprintf_internal_r+0x1924>
    29e0:	d9002e17 	ldw	r4,184(sp)
    29e4:	d9402f17 	ldw	r5,188(sp)
    29e8:	20800017 	ldw	r2,0(r4)
    29ec:	2807d7fa 	srai	r3,r5,31
    29f0:	21000104 	addi	r4,r4,4
    29f4:	d9002e15 	stw	r4,184(sp)
    29f8:	11400015 	stw	r5,0(r2)
    29fc:	10c00115 	stw	r3,4(r2)
    2a00:	003cb806 	br	1ce4 <__alt_data_end+0xfffd1ce4>
    2a04:	d8c02e17 	ldw	r3,184(sp)
    2a08:	d9002e17 	ldw	r4,184(sp)
    2a0c:	8025883a 	mov	r18,r16
    2a10:	18800017 	ldw	r2,0(r3)
    2a14:	21000104 	addi	r4,r4,4
    2a18:	00c00044 	movi	r3,1
    2a1c:	e011883a 	mov	r8,fp
    2a20:	d8c02915 	stw	r3,164(sp)
    2a24:	d8002785 	stb	zero,158(sp)
    2a28:	d8801405 	stb	r2,80(sp)
    2a2c:	d9002e15 	stw	r4,184(sp)
    2a30:	d8c02b15 	stw	r3,172(sp)
    2a34:	d8002a15 	stw	zero,168(sp)
    2a38:	d8003215 	stw	zero,200(sp)
    2a3c:	dc001404 	addi	r16,sp,80
    2a40:	0039883a 	mov	fp,zero
    2a44:	003e5306 	br	2394 <__alt_data_end+0xfffd2394>
    2a48:	010000b4 	movhi	r4,2
    2a4c:	21257d04 	addi	r4,r4,-27148
    2a50:	0039883a 	mov	fp,zero
    2a54:	d9003915 	stw	r4,228(sp)
    2a58:	04401e04 	movi	r17,120
    2a5c:	003f6906 	br	2804 <__alt_data_end+0xfffd2804>
    2a60:	8025883a 	mov	r18,r16
    2a64:	dc002903 	ldbu	r16,164(sp)
    2a68:	e011883a 	mov	r8,fp
    2a6c:	84003fcc 	andi	r16,r16,255
    2a70:	8005081e 	bne	r16,zero,3e94 <___vfprintf_internal_r+0x2290>
    2a74:	883d6126 	beq	r17,zero,1ffc <__alt_data_end+0xfffd1ffc>
    2a78:	00c00044 	movi	r3,1
    2a7c:	d8c02915 	stw	r3,164(sp)
    2a80:	dc401405 	stb	r17,80(sp)
    2a84:	d8002785 	stb	zero,158(sp)
    2a88:	003fe906 	br	2a30 <__alt_data_end+0xfffd2a30>
    2a8c:	014000b4 	movhi	r5,2
    2a90:	29657d04 	addi	r5,r5,-27148
    2a94:	d9403915 	stw	r5,228(sp)
    2a98:	d8c02e15 	stw	r3,184(sp)
    2a9c:	1025883a 	mov	r18,r2
    2aa0:	04401e04 	movi	r17,120
    2aa4:	9d84b03a 	or	r2,r19,r22
    2aa8:	1000fc1e 	bne	r2,zero,2e9c <___vfprintf_internal_r+0x1298>
    2aac:	0039883a 	mov	fp,zero
    2ab0:	00800084 	movi	r2,2
    2ab4:	10803fcc 	andi	r2,r2,255
    2ab8:	00c00044 	movi	r3,1
    2abc:	10c20f26 	beq	r2,r3,32fc <___vfprintf_internal_r+0x16f8>
    2ac0:	00c00084 	movi	r3,2
    2ac4:	10fd3326 	beq	r2,r3,1f94 <__alt_data_end+0xfffd1f94>
    2ac8:	003e0b06 	br	22f8 <__alt_data_end+0xfffd22f8>
    2acc:	d8c02017 	ldw	r3,128(sp)
    2ad0:	003e7106 	br	2498 <__alt_data_end+0xfffd2498>
    2ad4:	00801944 	movi	r2,101
    2ad8:	14407e0e 	bge	r2,r17,2cd4 <___vfprintf_internal_r+0x10d0>
    2adc:	d9003617 	ldw	r4,216(sp)
    2ae0:	d9403817 	ldw	r5,224(sp)
    2ae4:	000d883a 	mov	r6,zero
    2ae8:	000f883a 	mov	r7,zero
    2aec:	d8c03c15 	stw	r3,240(sp)
    2af0:	da003d15 	stw	r8,244(sp)
    2af4:	000d66c0 	call	d66c <__eqdf2>
    2af8:	d8c03c17 	ldw	r3,240(sp)
    2afc:	da003d17 	ldw	r8,244(sp)
    2b00:	1000f71e 	bne	r2,zero,2ee0 <___vfprintf_internal_r+0x12dc>
    2b04:	d8801f17 	ldw	r2,124(sp)
    2b08:	010000b4 	movhi	r4,2
    2b0c:	21258404 	addi	r4,r4,-27120
    2b10:	18c00044 	addi	r3,r3,1
    2b14:	10800044 	addi	r2,r2,1
    2b18:	41000015 	stw	r4,0(r8)
    2b1c:	01000044 	movi	r4,1
    2b20:	41000115 	stw	r4,4(r8)
    2b24:	d8c02015 	stw	r3,128(sp)
    2b28:	d8801f15 	stw	r2,124(sp)
    2b2c:	010001c4 	movi	r4,7
    2b30:	2082b816 	blt	r4,r2,3614 <___vfprintf_internal_r+0x1a10>
    2b34:	42000204 	addi	r8,r8,8
    2b38:	d8802617 	ldw	r2,152(sp)
    2b3c:	d9403317 	ldw	r5,204(sp)
    2b40:	11400216 	blt	r2,r5,2b4c <___vfprintf_internal_r+0xf48>
    2b44:	9080004c 	andi	r2,r18,1
    2b48:	103eb326 	beq	r2,zero,2618 <__alt_data_end+0xfffd2618>
    2b4c:	d8803717 	ldw	r2,220(sp)
    2b50:	d9003417 	ldw	r4,208(sp)
    2b54:	d9403717 	ldw	r5,220(sp)
    2b58:	1887883a 	add	r3,r3,r2
    2b5c:	d8801f17 	ldw	r2,124(sp)
    2b60:	41000015 	stw	r4,0(r8)
    2b64:	41400115 	stw	r5,4(r8)
    2b68:	10800044 	addi	r2,r2,1
    2b6c:	d8c02015 	stw	r3,128(sp)
    2b70:	d8801f15 	stw	r2,124(sp)
    2b74:	010001c4 	movi	r4,7
    2b78:	20832916 	blt	r4,r2,3820 <___vfprintf_internal_r+0x1c1c>
    2b7c:	42000204 	addi	r8,r8,8
    2b80:	d8803317 	ldw	r2,204(sp)
    2b84:	143fffc4 	addi	r16,r2,-1
    2b88:	043ea30e 	bge	zero,r16,2618 <__alt_data_end+0xfffd2618>
    2b8c:	04400404 	movi	r17,16
    2b90:	d8801f17 	ldw	r2,124(sp)
    2b94:	8c00880e 	bge	r17,r16,2db8 <___vfprintf_internal_r+0x11b4>
    2b98:	014000b4 	movhi	r5,2
    2b9c:	29658484 	addi	r5,r5,-27118
    2ba0:	d9402c15 	stw	r5,176(sp)
    2ba4:	058001c4 	movi	r22,7
    2ba8:	dcc02d17 	ldw	r19,180(sp)
    2bac:	00000306 	br	2bbc <___vfprintf_internal_r+0xfb8>
    2bb0:	42000204 	addi	r8,r8,8
    2bb4:	843ffc04 	addi	r16,r16,-16
    2bb8:	8c00820e 	bge	r17,r16,2dc4 <___vfprintf_internal_r+0x11c0>
    2bbc:	18c00404 	addi	r3,r3,16
    2bc0:	10800044 	addi	r2,r2,1
    2bc4:	45000015 	stw	r20,0(r8)
    2bc8:	44400115 	stw	r17,4(r8)
    2bcc:	d8c02015 	stw	r3,128(sp)
    2bd0:	d8801f15 	stw	r2,124(sp)
    2bd4:	b0bff60e 	bge	r22,r2,2bb0 <__alt_data_end+0xfffd2bb0>
    2bd8:	d9801e04 	addi	r6,sp,120
    2bdc:	b80b883a 	mov	r5,r23
    2be0:	9809883a 	mov	r4,r19
    2be4:	00097b40 	call	97b4 <__sprint_r>
    2be8:	103d0a1e 	bne	r2,zero,2014 <__alt_data_end+0xfffd2014>
    2bec:	d8c02017 	ldw	r3,128(sp)
    2bf0:	d8801f17 	ldw	r2,124(sp)
    2bf4:	da000404 	addi	r8,sp,16
    2bf8:	003fee06 	br	2bb4 <__alt_data_end+0xfffd2bb4>
    2bfc:	d9403117 	ldw	r5,196(sp)
    2c00:	d8802917 	ldw	r2,164(sp)
    2c04:	28adc83a 	sub	r22,r5,r2
    2c08:	05be410e 	bge	zero,r22,2510 <__alt_data_end+0xfffd2510>
    2c0c:	07000404 	movi	fp,16
    2c10:	d8801f17 	ldw	r2,124(sp)
    2c14:	e5838f0e 	bge	fp,r22,3a54 <___vfprintf_internal_r+0x1e50>
    2c18:	014000b4 	movhi	r5,2
    2c1c:	29658484 	addi	r5,r5,-27118
    2c20:	dc403015 	stw	r17,192(sp)
    2c24:	d9402c15 	stw	r5,176(sp)
    2c28:	b023883a 	mov	r17,r22
    2c2c:	04c001c4 	movi	r19,7
    2c30:	a82d883a 	mov	r22,r21
    2c34:	902b883a 	mov	r21,r18
    2c38:	8025883a 	mov	r18,r16
    2c3c:	dc002d17 	ldw	r16,180(sp)
    2c40:	00000306 	br	2c50 <___vfprintf_internal_r+0x104c>
    2c44:	8c7ffc04 	addi	r17,r17,-16
    2c48:	42000204 	addi	r8,r8,8
    2c4c:	e440110e 	bge	fp,r17,2c94 <___vfprintf_internal_r+0x1090>
    2c50:	18c00404 	addi	r3,r3,16
    2c54:	10800044 	addi	r2,r2,1
    2c58:	45000015 	stw	r20,0(r8)
    2c5c:	47000115 	stw	fp,4(r8)
    2c60:	d8c02015 	stw	r3,128(sp)
    2c64:	d8801f15 	stw	r2,124(sp)
    2c68:	98bff60e 	bge	r19,r2,2c44 <__alt_data_end+0xfffd2c44>
    2c6c:	d9801e04 	addi	r6,sp,120
    2c70:	b80b883a 	mov	r5,r23
    2c74:	8009883a 	mov	r4,r16
    2c78:	00097b40 	call	97b4 <__sprint_r>
    2c7c:	103ce51e 	bne	r2,zero,2014 <__alt_data_end+0xfffd2014>
    2c80:	8c7ffc04 	addi	r17,r17,-16
    2c84:	d8c02017 	ldw	r3,128(sp)
    2c88:	d8801f17 	ldw	r2,124(sp)
    2c8c:	da000404 	addi	r8,sp,16
    2c90:	e47fef16 	blt	fp,r17,2c50 <__alt_data_end+0xfffd2c50>
    2c94:	9021883a 	mov	r16,r18
    2c98:	a825883a 	mov	r18,r21
    2c9c:	b02b883a 	mov	r21,r22
    2ca0:	882d883a 	mov	r22,r17
    2ca4:	dc403017 	ldw	r17,192(sp)
    2ca8:	d9002c17 	ldw	r4,176(sp)
    2cac:	1d87883a 	add	r3,r3,r22
    2cb0:	10800044 	addi	r2,r2,1
    2cb4:	41000015 	stw	r4,0(r8)
    2cb8:	45800115 	stw	r22,4(r8)
    2cbc:	d8c02015 	stw	r3,128(sp)
    2cc0:	d8801f15 	stw	r2,124(sp)
    2cc4:	010001c4 	movi	r4,7
    2cc8:	20818e16 	blt	r4,r2,3304 <___vfprintf_internal_r+0x1700>
    2ccc:	42000204 	addi	r8,r8,8
    2cd0:	003e0f06 	br	2510 <__alt_data_end+0xfffd2510>
    2cd4:	d9403317 	ldw	r5,204(sp)
    2cd8:	00800044 	movi	r2,1
    2cdc:	18c00044 	addi	r3,r3,1
    2ce0:	1141530e 	bge	r2,r5,3230 <___vfprintf_internal_r+0x162c>
    2ce4:	dc401f17 	ldw	r17,124(sp)
    2ce8:	00800044 	movi	r2,1
    2cec:	40800115 	stw	r2,4(r8)
    2cf0:	8c400044 	addi	r17,r17,1
    2cf4:	44000015 	stw	r16,0(r8)
    2cf8:	d8c02015 	stw	r3,128(sp)
    2cfc:	dc401f15 	stw	r17,124(sp)
    2d00:	008001c4 	movi	r2,7
    2d04:	14416b16 	blt	r2,r17,32b4 <___vfprintf_internal_r+0x16b0>
    2d08:	42000204 	addi	r8,r8,8
    2d0c:	d8803717 	ldw	r2,220(sp)
    2d10:	d9003417 	ldw	r4,208(sp)
    2d14:	8c400044 	addi	r17,r17,1
    2d18:	10c7883a 	add	r3,r2,r3
    2d1c:	40800115 	stw	r2,4(r8)
    2d20:	41000015 	stw	r4,0(r8)
    2d24:	d8c02015 	stw	r3,128(sp)
    2d28:	dc401f15 	stw	r17,124(sp)
    2d2c:	008001c4 	movi	r2,7
    2d30:	14416916 	blt	r2,r17,32d8 <___vfprintf_internal_r+0x16d4>
    2d34:	45800204 	addi	r22,r8,8
    2d38:	d9003617 	ldw	r4,216(sp)
    2d3c:	d9403817 	ldw	r5,224(sp)
    2d40:	000d883a 	mov	r6,zero
    2d44:	000f883a 	mov	r7,zero
    2d48:	d8c03c15 	stw	r3,240(sp)
    2d4c:	000d66c0 	call	d66c <__eqdf2>
    2d50:	d8c03c17 	ldw	r3,240(sp)
    2d54:	1000bc26 	beq	r2,zero,3048 <___vfprintf_internal_r+0x1444>
    2d58:	d9403317 	ldw	r5,204(sp)
    2d5c:	84000044 	addi	r16,r16,1
    2d60:	8c400044 	addi	r17,r17,1
    2d64:	28bfffc4 	addi	r2,r5,-1
    2d68:	1887883a 	add	r3,r3,r2
    2d6c:	b0800115 	stw	r2,4(r22)
    2d70:	b4000015 	stw	r16,0(r22)
    2d74:	d8c02015 	stw	r3,128(sp)
    2d78:	dc401f15 	stw	r17,124(sp)
    2d7c:	008001c4 	movi	r2,7
    2d80:	14414316 	blt	r2,r17,3290 <___vfprintf_internal_r+0x168c>
    2d84:	b5800204 	addi	r22,r22,8
    2d88:	d9003a17 	ldw	r4,232(sp)
    2d8c:	df0022c4 	addi	fp,sp,139
    2d90:	8c400044 	addi	r17,r17,1
    2d94:	20c7883a 	add	r3,r4,r3
    2d98:	b7000015 	stw	fp,0(r22)
    2d9c:	b1000115 	stw	r4,4(r22)
    2da0:	d8c02015 	stw	r3,128(sp)
    2da4:	dc401f15 	stw	r17,124(sp)
    2da8:	008001c4 	movi	r2,7
    2dac:	14400e16 	blt	r2,r17,2de8 <___vfprintf_internal_r+0x11e4>
    2db0:	b2000204 	addi	r8,r22,8
    2db4:	003e1806 	br	2618 <__alt_data_end+0xfffd2618>
    2db8:	010000b4 	movhi	r4,2
    2dbc:	21258484 	addi	r4,r4,-27118
    2dc0:	d9002c15 	stw	r4,176(sp)
    2dc4:	d9002c17 	ldw	r4,176(sp)
    2dc8:	1c07883a 	add	r3,r3,r16
    2dcc:	44000115 	stw	r16,4(r8)
    2dd0:	41000015 	stw	r4,0(r8)
    2dd4:	10800044 	addi	r2,r2,1
    2dd8:	d8c02015 	stw	r3,128(sp)
    2ddc:	d8801f15 	stw	r2,124(sp)
    2de0:	010001c4 	movi	r4,7
    2de4:	20be0b0e 	bge	r4,r2,2614 <__alt_data_end+0xfffd2614>
    2de8:	d9002d17 	ldw	r4,180(sp)
    2dec:	d9801e04 	addi	r6,sp,120
    2df0:	b80b883a 	mov	r5,r23
    2df4:	00097b40 	call	97b4 <__sprint_r>
    2df8:	103c861e 	bne	r2,zero,2014 <__alt_data_end+0xfffd2014>
    2dfc:	d8c02017 	ldw	r3,128(sp)
    2e00:	da000404 	addi	r8,sp,16
    2e04:	003e0406 	br	2618 <__alt_data_end+0xfffd2618>
    2e08:	d9002d17 	ldw	r4,180(sp)
    2e0c:	d9801e04 	addi	r6,sp,120
    2e10:	b80b883a 	mov	r5,r23
    2e14:	00097b40 	call	97b4 <__sprint_r>
    2e18:	103e3b26 	beq	r2,zero,2708 <__alt_data_end+0xfffd2708>
    2e1c:	003c7d06 	br	2014 <__alt_data_end+0xfffd2014>
    2e20:	d9002d17 	ldw	r4,180(sp)
    2e24:	d9801e04 	addi	r6,sp,120
    2e28:	b80b883a 	mov	r5,r23
    2e2c:	00097b40 	call	97b4 <__sprint_r>
    2e30:	103c781e 	bne	r2,zero,2014 <__alt_data_end+0xfffd2014>
    2e34:	d8c02017 	ldw	r3,128(sp)
    2e38:	da000404 	addi	r8,sp,16
    2e3c:	003de906 	br	25e4 <__alt_data_end+0xfffd25e4>
    2e40:	d9002d17 	ldw	r4,180(sp)
    2e44:	d9801e04 	addi	r6,sp,120
    2e48:	b80b883a 	mov	r5,r23
    2e4c:	00097b40 	call	97b4 <__sprint_r>
    2e50:	103c701e 	bne	r2,zero,2014 <__alt_data_end+0xfffd2014>
    2e54:	d8c02017 	ldw	r3,128(sp)
    2e58:	da000404 	addi	r8,sp,16
    2e5c:	003d9b06 	br	24cc <__alt_data_end+0xfffd24cc>
    2e60:	d9002d17 	ldw	r4,180(sp)
    2e64:	d9801e04 	addi	r6,sp,120
    2e68:	b80b883a 	mov	r5,r23
    2e6c:	00097b40 	call	97b4 <__sprint_r>
    2e70:	103c681e 	bne	r2,zero,2014 <__alt_data_end+0xfffd2014>
    2e74:	d8c02017 	ldw	r3,128(sp)
    2e78:	da000404 	addi	r8,sp,16
    2e7c:	003da106 	br	2504 <__alt_data_end+0xfffd2504>
    2e80:	d9402a17 	ldw	r5,168(sp)
    2e84:	d8002785 	stb	zero,158(sp)
    2e88:	283f0616 	blt	r5,zero,2aa4 <__alt_data_end+0xfffd2aa4>
    2e8c:	00ffdfc4 	movi	r3,-129
    2e90:	9d84b03a 	or	r2,r19,r22
    2e94:	90e4703a 	and	r18,r18,r3
    2e98:	103c3b26 	beq	r2,zero,1f88 <__alt_data_end+0xfffd1f88>
    2e9c:	0039883a 	mov	fp,zero
    2ea0:	003e5806 	br	2804 <__alt_data_end+0xfffd2804>
    2ea4:	9080040c 	andi	r2,r18,16
    2ea8:	1001b326 	beq	r2,zero,3578 <___vfprintf_internal_r+0x1974>
    2eac:	d8c02e17 	ldw	r3,184(sp)
    2eb0:	d9002a17 	ldw	r4,168(sp)
    2eb4:	d8002785 	stb	zero,158(sp)
    2eb8:	18800104 	addi	r2,r3,4
    2ebc:	1cc00017 	ldw	r19,0(r3)
    2ec0:	002d883a 	mov	r22,zero
    2ec4:	2001b516 	blt	r4,zero,359c <___vfprintf_internal_r+0x1998>
    2ec8:	00ffdfc4 	movi	r3,-129
    2ecc:	d8802e15 	stw	r2,184(sp)
    2ed0:	90e4703a 	and	r18,r18,r3
    2ed4:	983d0526 	beq	r19,zero,22ec <__alt_data_end+0xfffd22ec>
    2ed8:	0039883a 	mov	fp,zero
    2edc:	003d0806 	br	2300 <__alt_data_end+0xfffd2300>
    2ee0:	dc402617 	ldw	r17,152(sp)
    2ee4:	0441d30e 	bge	zero,r17,3634 <___vfprintf_internal_r+0x1a30>
    2ee8:	dc403217 	ldw	r17,200(sp)
    2eec:	d8803317 	ldw	r2,204(sp)
    2ef0:	1440010e 	bge	r2,r17,2ef8 <___vfprintf_internal_r+0x12f4>
    2ef4:	1023883a 	mov	r17,r2
    2ef8:	04400a0e 	bge	zero,r17,2f24 <___vfprintf_internal_r+0x1320>
    2efc:	d8801f17 	ldw	r2,124(sp)
    2f00:	1c47883a 	add	r3,r3,r17
    2f04:	44000015 	stw	r16,0(r8)
    2f08:	10800044 	addi	r2,r2,1
    2f0c:	44400115 	stw	r17,4(r8)
    2f10:	d8c02015 	stw	r3,128(sp)
    2f14:	d8801f15 	stw	r2,124(sp)
    2f18:	010001c4 	movi	r4,7
    2f1c:	20826516 	blt	r4,r2,38b4 <___vfprintf_internal_r+0x1cb0>
    2f20:	42000204 	addi	r8,r8,8
    2f24:	88026116 	blt	r17,zero,38ac <___vfprintf_internal_r+0x1ca8>
    2f28:	d9003217 	ldw	r4,200(sp)
    2f2c:	2463c83a 	sub	r17,r4,r17
    2f30:	04407b0e 	bge	zero,r17,3120 <___vfprintf_internal_r+0x151c>
    2f34:	05800404 	movi	r22,16
    2f38:	d8801f17 	ldw	r2,124(sp)
    2f3c:	b4419d0e 	bge	r22,r17,35b4 <___vfprintf_internal_r+0x19b0>
    2f40:	010000b4 	movhi	r4,2
    2f44:	21258484 	addi	r4,r4,-27118
    2f48:	d9002c15 	stw	r4,176(sp)
    2f4c:	070001c4 	movi	fp,7
    2f50:	dcc02d17 	ldw	r19,180(sp)
    2f54:	00000306 	br	2f64 <___vfprintf_internal_r+0x1360>
    2f58:	42000204 	addi	r8,r8,8
    2f5c:	8c7ffc04 	addi	r17,r17,-16
    2f60:	b441970e 	bge	r22,r17,35c0 <___vfprintf_internal_r+0x19bc>
    2f64:	18c00404 	addi	r3,r3,16
    2f68:	10800044 	addi	r2,r2,1
    2f6c:	45000015 	stw	r20,0(r8)
    2f70:	45800115 	stw	r22,4(r8)
    2f74:	d8c02015 	stw	r3,128(sp)
    2f78:	d8801f15 	stw	r2,124(sp)
    2f7c:	e0bff60e 	bge	fp,r2,2f58 <__alt_data_end+0xfffd2f58>
    2f80:	d9801e04 	addi	r6,sp,120
    2f84:	b80b883a 	mov	r5,r23
    2f88:	9809883a 	mov	r4,r19
    2f8c:	00097b40 	call	97b4 <__sprint_r>
    2f90:	103c201e 	bne	r2,zero,2014 <__alt_data_end+0xfffd2014>
    2f94:	d8c02017 	ldw	r3,128(sp)
    2f98:	d8801f17 	ldw	r2,124(sp)
    2f9c:	da000404 	addi	r8,sp,16
    2fa0:	003fee06 	br	2f5c <__alt_data_end+0xfffd2f5c>
    2fa4:	d9002d17 	ldw	r4,180(sp)
    2fa8:	d9801e04 	addi	r6,sp,120
    2fac:	b80b883a 	mov	r5,r23
    2fb0:	00097b40 	call	97b4 <__sprint_r>
    2fb4:	103c171e 	bne	r2,zero,2014 <__alt_data_end+0xfffd2014>
    2fb8:	d8c02017 	ldw	r3,128(sp)
    2fbc:	df002787 	ldb	fp,158(sp)
    2fc0:	da000404 	addi	r8,sp,16
    2fc4:	003d3406 	br	2498 <__alt_data_end+0xfffd2498>
    2fc8:	9080040c 	andi	r2,r18,16
    2fcc:	10016126 	beq	r2,zero,3554 <___vfprintf_internal_r+0x1950>
    2fd0:	d9402e17 	ldw	r5,184(sp)
    2fd4:	2cc00017 	ldw	r19,0(r5)
    2fd8:	29400104 	addi	r5,r5,4
    2fdc:	d9402e15 	stw	r5,184(sp)
    2fe0:	982dd7fa 	srai	r22,r19,31
    2fe4:	b005883a 	mov	r2,r22
    2fe8:	003c5a06 	br	2154 <__alt_data_end+0xfffd2154>
    2fec:	9080040c 	andi	r2,r18,16
    2ff0:	10003526 	beq	r2,zero,30c8 <___vfprintf_internal_r+0x14c4>
    2ff4:	d8c02e17 	ldw	r3,184(sp)
    2ff8:	d9002a17 	ldw	r4,168(sp)
    2ffc:	d8002785 	stb	zero,158(sp)
    3000:	18800104 	addi	r2,r3,4
    3004:	1cc00017 	ldw	r19,0(r3)
    3008:	002d883a 	mov	r22,zero
    300c:	20003716 	blt	r4,zero,30ec <___vfprintf_internal_r+0x14e8>
    3010:	00ffdfc4 	movi	r3,-129
    3014:	d8802e15 	stw	r2,184(sp)
    3018:	90e4703a 	and	r18,r18,r3
    301c:	0039883a 	mov	fp,zero
    3020:	983dd426 	beq	r19,zero,2774 <__alt_data_end+0xfffd2774>
    3024:	00800244 	movi	r2,9
    3028:	14fc5336 	bltu	r2,r19,2178 <__alt_data_end+0xfffd2178>
    302c:	d8c02817 	ldw	r3,160(sp)
    3030:	dc001dc4 	addi	r16,sp,119
    3034:	9cc00c04 	addi	r19,r19,48
    3038:	1c07c83a 	sub	r3,r3,r16
    303c:	dcc01dc5 	stb	r19,119(sp)
    3040:	d8c02b15 	stw	r3,172(sp)
    3044:	003cc606 	br	2360 <__alt_data_end+0xfffd2360>
    3048:	d8803317 	ldw	r2,204(sp)
    304c:	143fffc4 	addi	r16,r2,-1
    3050:	043f4d0e 	bge	zero,r16,2d88 <__alt_data_end+0xfffd2d88>
    3054:	07000404 	movi	fp,16
    3058:	e400810e 	bge	fp,r16,3260 <___vfprintf_internal_r+0x165c>
    305c:	014000b4 	movhi	r5,2
    3060:	29658484 	addi	r5,r5,-27118
    3064:	d9402c15 	stw	r5,176(sp)
    3068:	01c001c4 	movi	r7,7
    306c:	dcc02d17 	ldw	r19,180(sp)
    3070:	00000306 	br	3080 <___vfprintf_internal_r+0x147c>
    3074:	b5800204 	addi	r22,r22,8
    3078:	843ffc04 	addi	r16,r16,-16
    307c:	e4007b0e 	bge	fp,r16,326c <___vfprintf_internal_r+0x1668>
    3080:	18c00404 	addi	r3,r3,16
    3084:	8c400044 	addi	r17,r17,1
    3088:	b5000015 	stw	r20,0(r22)
    308c:	b7000115 	stw	fp,4(r22)
    3090:	d8c02015 	stw	r3,128(sp)
    3094:	dc401f15 	stw	r17,124(sp)
    3098:	3c7ff60e 	bge	r7,r17,3074 <__alt_data_end+0xfffd3074>
    309c:	d9801e04 	addi	r6,sp,120
    30a0:	b80b883a 	mov	r5,r23
    30a4:	9809883a 	mov	r4,r19
    30a8:	d9c03c15 	stw	r7,240(sp)
    30ac:	00097b40 	call	97b4 <__sprint_r>
    30b0:	d9c03c17 	ldw	r7,240(sp)
    30b4:	103bd71e 	bne	r2,zero,2014 <__alt_data_end+0xfffd2014>
    30b8:	d8c02017 	ldw	r3,128(sp)
    30bc:	dc401f17 	ldw	r17,124(sp)
    30c0:	dd800404 	addi	r22,sp,16
    30c4:	003fec06 	br	3078 <__alt_data_end+0xfffd3078>
    30c8:	9080100c 	andi	r2,r18,64
    30cc:	d8002785 	stb	zero,158(sp)
    30d0:	10010e26 	beq	r2,zero,350c <___vfprintf_internal_r+0x1908>
    30d4:	d9402e17 	ldw	r5,184(sp)
    30d8:	d8c02a17 	ldw	r3,168(sp)
    30dc:	002d883a 	mov	r22,zero
    30e0:	28800104 	addi	r2,r5,4
    30e4:	2cc0000b 	ldhu	r19,0(r5)
    30e8:	183fc90e 	bge	r3,zero,3010 <__alt_data_end+0xfffd3010>
    30ec:	d8802e15 	stw	r2,184(sp)
    30f0:	0039883a 	mov	fp,zero
    30f4:	9d84b03a 	or	r2,r19,r22
    30f8:	103c1e1e 	bne	r2,zero,2174 <__alt_data_end+0xfffd2174>
    30fc:	00800044 	movi	r2,1
    3100:	003e6c06 	br	2ab4 <__alt_data_end+0xfffd2ab4>
    3104:	d9002d17 	ldw	r4,180(sp)
    3108:	d9801e04 	addi	r6,sp,120
    310c:	b80b883a 	mov	r5,r23
    3110:	00097b40 	call	97b4 <__sprint_r>
    3114:	103bbf1e 	bne	r2,zero,2014 <__alt_data_end+0xfffd2014>
    3118:	d8c02017 	ldw	r3,128(sp)
    311c:	da000404 	addi	r8,sp,16
    3120:	d9003217 	ldw	r4,200(sp)
    3124:	d8802617 	ldw	r2,152(sp)
    3128:	d9403317 	ldw	r5,204(sp)
    312c:	8123883a 	add	r17,r16,r4
    3130:	11400216 	blt	r2,r5,313c <___vfprintf_internal_r+0x1538>
    3134:	9100004c 	andi	r4,r18,1
    3138:	20000d26 	beq	r4,zero,3170 <___vfprintf_internal_r+0x156c>
    313c:	d9003717 	ldw	r4,220(sp)
    3140:	d9403417 	ldw	r5,208(sp)
    3144:	1907883a 	add	r3,r3,r4
    3148:	d9001f17 	ldw	r4,124(sp)
    314c:	41400015 	stw	r5,0(r8)
    3150:	d9403717 	ldw	r5,220(sp)
    3154:	21000044 	addi	r4,r4,1
    3158:	d8c02015 	stw	r3,128(sp)
    315c:	41400115 	stw	r5,4(r8)
    3160:	d9001f15 	stw	r4,124(sp)
    3164:	014001c4 	movi	r5,7
    3168:	2901e816 	blt	r5,r4,390c <___vfprintf_internal_r+0x1d08>
    316c:	42000204 	addi	r8,r8,8
    3170:	d9003317 	ldw	r4,204(sp)
    3174:	8121883a 	add	r16,r16,r4
    3178:	2085c83a 	sub	r2,r4,r2
    317c:	8461c83a 	sub	r16,r16,r17
    3180:	1400010e 	bge	r2,r16,3188 <___vfprintf_internal_r+0x1584>
    3184:	1021883a 	mov	r16,r2
    3188:	04000a0e 	bge	zero,r16,31b4 <___vfprintf_internal_r+0x15b0>
    318c:	d9001f17 	ldw	r4,124(sp)
    3190:	1c07883a 	add	r3,r3,r16
    3194:	44400015 	stw	r17,0(r8)
    3198:	21000044 	addi	r4,r4,1
    319c:	44000115 	stw	r16,4(r8)
    31a0:	d8c02015 	stw	r3,128(sp)
    31a4:	d9001f15 	stw	r4,124(sp)
    31a8:	014001c4 	movi	r5,7
    31ac:	2901fb16 	blt	r5,r4,399c <___vfprintf_internal_r+0x1d98>
    31b0:	42000204 	addi	r8,r8,8
    31b4:	8001f716 	blt	r16,zero,3994 <___vfprintf_internal_r+0x1d90>
    31b8:	1421c83a 	sub	r16,r2,r16
    31bc:	043d160e 	bge	zero,r16,2618 <__alt_data_end+0xfffd2618>
    31c0:	04400404 	movi	r17,16
    31c4:	d8801f17 	ldw	r2,124(sp)
    31c8:	8c3efb0e 	bge	r17,r16,2db8 <__alt_data_end+0xfffd2db8>
    31cc:	014000b4 	movhi	r5,2
    31d0:	29658484 	addi	r5,r5,-27118
    31d4:	d9402c15 	stw	r5,176(sp)
    31d8:	058001c4 	movi	r22,7
    31dc:	dcc02d17 	ldw	r19,180(sp)
    31e0:	00000306 	br	31f0 <___vfprintf_internal_r+0x15ec>
    31e4:	42000204 	addi	r8,r8,8
    31e8:	843ffc04 	addi	r16,r16,-16
    31ec:	8c3ef50e 	bge	r17,r16,2dc4 <__alt_data_end+0xfffd2dc4>
    31f0:	18c00404 	addi	r3,r3,16
    31f4:	10800044 	addi	r2,r2,1
    31f8:	45000015 	stw	r20,0(r8)
    31fc:	44400115 	stw	r17,4(r8)
    3200:	d8c02015 	stw	r3,128(sp)
    3204:	d8801f15 	stw	r2,124(sp)
    3208:	b0bff60e 	bge	r22,r2,31e4 <__alt_data_end+0xfffd31e4>
    320c:	d9801e04 	addi	r6,sp,120
    3210:	b80b883a 	mov	r5,r23
    3214:	9809883a 	mov	r4,r19
    3218:	00097b40 	call	97b4 <__sprint_r>
    321c:	103b7d1e 	bne	r2,zero,2014 <__alt_data_end+0xfffd2014>
    3220:	d8c02017 	ldw	r3,128(sp)
    3224:	d8801f17 	ldw	r2,124(sp)
    3228:	da000404 	addi	r8,sp,16
    322c:	003fee06 	br	31e8 <__alt_data_end+0xfffd31e8>
    3230:	9088703a 	and	r4,r18,r2
    3234:	203eab1e 	bne	r4,zero,2ce4 <__alt_data_end+0xfffd2ce4>
    3238:	dc401f17 	ldw	r17,124(sp)
    323c:	40800115 	stw	r2,4(r8)
    3240:	44000015 	stw	r16,0(r8)
    3244:	8c400044 	addi	r17,r17,1
    3248:	d8c02015 	stw	r3,128(sp)
    324c:	dc401f15 	stw	r17,124(sp)
    3250:	008001c4 	movi	r2,7
    3254:	14400e16 	blt	r2,r17,3290 <___vfprintf_internal_r+0x168c>
    3258:	45800204 	addi	r22,r8,8
    325c:	003eca06 	br	2d88 <__alt_data_end+0xfffd2d88>
    3260:	010000b4 	movhi	r4,2
    3264:	21258484 	addi	r4,r4,-27118
    3268:	d9002c15 	stw	r4,176(sp)
    326c:	d8802c17 	ldw	r2,176(sp)
    3270:	1c07883a 	add	r3,r3,r16
    3274:	8c400044 	addi	r17,r17,1
    3278:	b0800015 	stw	r2,0(r22)
    327c:	b4000115 	stw	r16,4(r22)
    3280:	d8c02015 	stw	r3,128(sp)
    3284:	dc401f15 	stw	r17,124(sp)
    3288:	008001c4 	movi	r2,7
    328c:	147ebd0e 	bge	r2,r17,2d84 <__alt_data_end+0xfffd2d84>
    3290:	d9002d17 	ldw	r4,180(sp)
    3294:	d9801e04 	addi	r6,sp,120
    3298:	b80b883a 	mov	r5,r23
    329c:	00097b40 	call	97b4 <__sprint_r>
    32a0:	103b5c1e 	bne	r2,zero,2014 <__alt_data_end+0xfffd2014>
    32a4:	d8c02017 	ldw	r3,128(sp)
    32a8:	dc401f17 	ldw	r17,124(sp)
    32ac:	dd800404 	addi	r22,sp,16
    32b0:	003eb506 	br	2d88 <__alt_data_end+0xfffd2d88>
    32b4:	d9002d17 	ldw	r4,180(sp)
    32b8:	d9801e04 	addi	r6,sp,120
    32bc:	b80b883a 	mov	r5,r23
    32c0:	00097b40 	call	97b4 <__sprint_r>
    32c4:	103b531e 	bne	r2,zero,2014 <__alt_data_end+0xfffd2014>
    32c8:	d8c02017 	ldw	r3,128(sp)
    32cc:	dc401f17 	ldw	r17,124(sp)
    32d0:	da000404 	addi	r8,sp,16
    32d4:	003e8d06 	br	2d0c <__alt_data_end+0xfffd2d0c>
    32d8:	d9002d17 	ldw	r4,180(sp)
    32dc:	d9801e04 	addi	r6,sp,120
    32e0:	b80b883a 	mov	r5,r23
    32e4:	00097b40 	call	97b4 <__sprint_r>
    32e8:	103b4a1e 	bne	r2,zero,2014 <__alt_data_end+0xfffd2014>
    32ec:	d8c02017 	ldw	r3,128(sp)
    32f0:	dc401f17 	ldw	r17,124(sp)
    32f4:	dd800404 	addi	r22,sp,16
    32f8:	003e8f06 	br	2d38 <__alt_data_end+0xfffd2d38>
    32fc:	0027883a 	mov	r19,zero
    3300:	003f4a06 	br	302c <__alt_data_end+0xfffd302c>
    3304:	d9002d17 	ldw	r4,180(sp)
    3308:	d9801e04 	addi	r6,sp,120
    330c:	b80b883a 	mov	r5,r23
    3310:	00097b40 	call	97b4 <__sprint_r>
    3314:	103b3f1e 	bne	r2,zero,2014 <__alt_data_end+0xfffd2014>
    3318:	d8c02017 	ldw	r3,128(sp)
    331c:	da000404 	addi	r8,sp,16
    3320:	003c7b06 	br	2510 <__alt_data_end+0xfffd2510>
    3324:	d9402a17 	ldw	r5,168(sp)
    3328:	04e7c83a 	sub	r19,zero,r19
    332c:	07000b44 	movi	fp,45
    3330:	9804c03a 	cmpne	r2,r19,zero
    3334:	05adc83a 	sub	r22,zero,r22
    3338:	df002785 	stb	fp,158(sp)
    333c:	b0adc83a 	sub	r22,r22,r2
    3340:	28017b16 	blt	r5,zero,3930 <___vfprintf_internal_r+0x1d2c>
    3344:	00bfdfc4 	movi	r2,-129
    3348:	90a4703a 	and	r18,r18,r2
    334c:	003b8906 	br	2174 <__alt_data_end+0xfffd2174>
    3350:	d9003617 	ldw	r4,216(sp)
    3354:	d9403817 	ldw	r5,224(sp)
    3358:	da003d15 	stw	r8,244(sp)
    335c:	00092740 	call	9274 <__fpclassifyd>
    3360:	da003d17 	ldw	r8,244(sp)
    3364:	1000f026 	beq	r2,zero,3728 <___vfprintf_internal_r+0x1b24>
    3368:	d9002a17 	ldw	r4,168(sp)
    336c:	05bff7c4 	movi	r22,-33
    3370:	00bfffc4 	movi	r2,-1
    3374:	8dac703a 	and	r22,r17,r22
    3378:	20820026 	beq	r4,r2,3b7c <___vfprintf_internal_r+0x1f78>
    337c:	008011c4 	movi	r2,71
    3380:	b081f726 	beq	r22,r2,3b60 <___vfprintf_internal_r+0x1f5c>
    3384:	d9003817 	ldw	r4,224(sp)
    3388:	90c04014 	ori	r3,r18,256
    338c:	d8c02c15 	stw	r3,176(sp)
    3390:	20021516 	blt	r4,zero,3be8 <___vfprintf_internal_r+0x1fe4>
    3394:	dcc03817 	ldw	r19,224(sp)
    3398:	d8002905 	stb	zero,164(sp)
    339c:	00801984 	movi	r2,102
    33a0:	8881f926 	beq	r17,r2,3b88 <___vfprintf_internal_r+0x1f84>
    33a4:	00801184 	movi	r2,70
    33a8:	88821c26 	beq	r17,r2,3c1c <___vfprintf_internal_r+0x2018>
    33ac:	00801144 	movi	r2,69
    33b0:	b081ef26 	beq	r22,r2,3b70 <___vfprintf_internal_r+0x1f6c>
    33b4:	d8c02a17 	ldw	r3,168(sp)
    33b8:	d8802104 	addi	r2,sp,132
    33bc:	d8800315 	stw	r2,12(sp)
    33c0:	d9403617 	ldw	r5,216(sp)
    33c4:	d8802504 	addi	r2,sp,148
    33c8:	d9002d17 	ldw	r4,180(sp)
    33cc:	d8800215 	stw	r2,8(sp)
    33d0:	d8802604 	addi	r2,sp,152
    33d4:	d8c00015 	stw	r3,0(sp)
    33d8:	d8800115 	stw	r2,4(sp)
    33dc:	01c00084 	movi	r7,2
    33e0:	980d883a 	mov	r6,r19
    33e4:	d8c03c15 	stw	r3,240(sp)
    33e8:	da003d15 	stw	r8,244(sp)
    33ec:	00043340 	call	4334 <_dtoa_r>
    33f0:	1021883a 	mov	r16,r2
    33f4:	008019c4 	movi	r2,103
    33f8:	d8c03c17 	ldw	r3,240(sp)
    33fc:	da003d17 	ldw	r8,244(sp)
    3400:	88817126 	beq	r17,r2,39c8 <___vfprintf_internal_r+0x1dc4>
    3404:	008011c4 	movi	r2,71
    3408:	88829126 	beq	r17,r2,3e50 <___vfprintf_internal_r+0x224c>
    340c:	80f9883a 	add	fp,r16,r3
    3410:	d9003617 	ldw	r4,216(sp)
    3414:	000d883a 	mov	r6,zero
    3418:	000f883a 	mov	r7,zero
    341c:	980b883a 	mov	r5,r19
    3420:	da003d15 	stw	r8,244(sp)
    3424:	000d66c0 	call	d66c <__eqdf2>
    3428:	da003d17 	ldw	r8,244(sp)
    342c:	10018d26 	beq	r2,zero,3a64 <___vfprintf_internal_r+0x1e60>
    3430:	d8802117 	ldw	r2,132(sp)
    3434:	1700062e 	bgeu	r2,fp,3450 <___vfprintf_internal_r+0x184c>
    3438:	01000c04 	movi	r4,48
    343c:	10c00044 	addi	r3,r2,1
    3440:	d8c02115 	stw	r3,132(sp)
    3444:	11000005 	stb	r4,0(r2)
    3448:	d8802117 	ldw	r2,132(sp)
    344c:	173ffb36 	bltu	r2,fp,343c <__alt_data_end+0xfffd343c>
    3450:	1405c83a 	sub	r2,r2,r16
    3454:	d8803315 	stw	r2,204(sp)
    3458:	008011c4 	movi	r2,71
    345c:	b0817626 	beq	r22,r2,3a38 <___vfprintf_internal_r+0x1e34>
    3460:	00801944 	movi	r2,101
    3464:	1442800e 	bge	r2,r17,3e68 <___vfprintf_internal_r+0x2264>
    3468:	d8c02617 	ldw	r3,152(sp)
    346c:	00801984 	movi	r2,102
    3470:	d8c03215 	stw	r3,200(sp)
    3474:	8881fe26 	beq	r17,r2,3c70 <___vfprintf_internal_r+0x206c>
    3478:	d8c03217 	ldw	r3,200(sp)
    347c:	d9003317 	ldw	r4,204(sp)
    3480:	1901dd16 	blt	r3,r4,3bf8 <___vfprintf_internal_r+0x1ff4>
    3484:	9480004c 	andi	r18,r18,1
    3488:	90022b1e 	bne	r18,zero,3d38 <___vfprintf_internal_r+0x2134>
    348c:	1805883a 	mov	r2,r3
    3490:	18028316 	blt	r3,zero,3ea0 <___vfprintf_internal_r+0x229c>
    3494:	d8c03217 	ldw	r3,200(sp)
    3498:	044019c4 	movi	r17,103
    349c:	d8c02b15 	stw	r3,172(sp)
    34a0:	df002907 	ldb	fp,164(sp)
    34a4:	e001531e 	bne	fp,zero,39f4 <___vfprintf_internal_r+0x1df0>
    34a8:	df002783 	ldbu	fp,158(sp)
    34ac:	d8802915 	stw	r2,164(sp)
    34b0:	dc802c17 	ldw	r18,176(sp)
    34b4:	d8002a15 	stw	zero,168(sp)
    34b8:	003baf06 	br	2378 <__alt_data_end+0xfffd2378>
    34bc:	d8c02e17 	ldw	r3,184(sp)
    34c0:	d9002e17 	ldw	r4,184(sp)
    34c4:	d9402e17 	ldw	r5,184(sp)
    34c8:	18c00017 	ldw	r3,0(r3)
    34cc:	21000117 	ldw	r4,4(r4)
    34d0:	29400204 	addi	r5,r5,8
    34d4:	d8c03615 	stw	r3,216(sp)
    34d8:	d9003815 	stw	r4,224(sp)
    34dc:	d9402e15 	stw	r5,184(sp)
    34e0:	003b5006 	br	2224 <__alt_data_end+0xfffd2224>
    34e4:	ac400007 	ldb	r17,0(r21)
    34e8:	003a2806 	br	1d8c <__alt_data_end+0xfffd1d8c>
    34ec:	9080100c 	andi	r2,r18,64
    34f0:	1000a826 	beq	r2,zero,3794 <___vfprintf_internal_r+0x1b90>
    34f4:	d8c02e17 	ldw	r3,184(sp)
    34f8:	002d883a 	mov	r22,zero
    34fc:	1cc0000b 	ldhu	r19,0(r3)
    3500:	18c00104 	addi	r3,r3,4
    3504:	d8c02e15 	stw	r3,184(sp)
    3508:	003caf06 	br	27c8 <__alt_data_end+0xfffd27c8>
    350c:	d9002e17 	ldw	r4,184(sp)
    3510:	d9402a17 	ldw	r5,168(sp)
    3514:	002d883a 	mov	r22,zero
    3518:	20800104 	addi	r2,r4,4
    351c:	24c00017 	ldw	r19,0(r4)
    3520:	283ebb0e 	bge	r5,zero,3010 <__alt_data_end+0xfffd3010>
    3524:	003ef106 	br	30ec <__alt_data_end+0xfffd30ec>
    3528:	9080040c 	andi	r2,r18,16
    352c:	1000921e 	bne	r2,zero,3778 <___vfprintf_internal_r+0x1b74>
    3530:	9480100c 	andi	r18,r18,64
    3534:	90013926 	beq	r18,zero,3a1c <___vfprintf_internal_r+0x1e18>
    3538:	d9402e17 	ldw	r5,184(sp)
    353c:	d8c02f17 	ldw	r3,188(sp)
    3540:	28800017 	ldw	r2,0(r5)
    3544:	29400104 	addi	r5,r5,4
    3548:	d9402e15 	stw	r5,184(sp)
    354c:	10c0000d 	sth	r3,0(r2)
    3550:	0039e406 	br	1ce4 <__alt_data_end+0xfffd1ce4>
    3554:	9080100c 	andi	r2,r18,64
    3558:	10008026 	beq	r2,zero,375c <___vfprintf_internal_r+0x1b58>
    355c:	d8802e17 	ldw	r2,184(sp)
    3560:	14c0000f 	ldh	r19,0(r2)
    3564:	10800104 	addi	r2,r2,4
    3568:	d8802e15 	stw	r2,184(sp)
    356c:	982dd7fa 	srai	r22,r19,31
    3570:	b005883a 	mov	r2,r22
    3574:	003af706 	br	2154 <__alt_data_end+0xfffd2154>
    3578:	9080100c 	andi	r2,r18,64
    357c:	d8002785 	stb	zero,158(sp)
    3580:	10008a1e 	bne	r2,zero,37ac <___vfprintf_internal_r+0x1ba8>
    3584:	d9002e17 	ldw	r4,184(sp)
    3588:	d9402a17 	ldw	r5,168(sp)
    358c:	002d883a 	mov	r22,zero
    3590:	20800104 	addi	r2,r4,4
    3594:	24c00017 	ldw	r19,0(r4)
    3598:	283e4b0e 	bge	r5,zero,2ec8 <__alt_data_end+0xfffd2ec8>
    359c:	9d86b03a 	or	r3,r19,r22
    35a0:	d8802e15 	stw	r2,184(sp)
    35a4:	183e4c1e 	bne	r3,zero,2ed8 <__alt_data_end+0xfffd2ed8>
    35a8:	0039883a 	mov	fp,zero
    35ac:	0005883a 	mov	r2,zero
    35b0:	003d4006 	br	2ab4 <__alt_data_end+0xfffd2ab4>
    35b4:	014000b4 	movhi	r5,2
    35b8:	29658484 	addi	r5,r5,-27118
    35bc:	d9402c15 	stw	r5,176(sp)
    35c0:	d9402c17 	ldw	r5,176(sp)
    35c4:	1c47883a 	add	r3,r3,r17
    35c8:	10800044 	addi	r2,r2,1
    35cc:	41400015 	stw	r5,0(r8)
    35d0:	44400115 	stw	r17,4(r8)
    35d4:	d8c02015 	stw	r3,128(sp)
    35d8:	d8801f15 	stw	r2,124(sp)
    35dc:	010001c4 	movi	r4,7
    35e0:	20bec816 	blt	r4,r2,3104 <__alt_data_end+0xfffd3104>
    35e4:	42000204 	addi	r8,r8,8
    35e8:	003ecd06 	br	3120 <__alt_data_end+0xfffd3120>
    35ec:	d9002a17 	ldw	r4,168(sp)
    35f0:	d8002785 	stb	zero,158(sp)
    35f4:	203d2d16 	blt	r4,zero,2aac <__alt_data_end+0xfffd2aac>
    35f8:	00bfdfc4 	movi	r2,-129
    35fc:	90a4703a 	and	r18,r18,r2
    3600:	003a6106 	br	1f88 <__alt_data_end+0xfffd1f88>
    3604:	010000b4 	movhi	r4,2
    3608:	21258484 	addi	r4,r4,-27118
    360c:	d9002c15 	stw	r4,176(sp)
    3610:	003bea06 	br	25bc <__alt_data_end+0xfffd25bc>
    3614:	d9002d17 	ldw	r4,180(sp)
    3618:	d9801e04 	addi	r6,sp,120
    361c:	b80b883a 	mov	r5,r23
    3620:	00097b40 	call	97b4 <__sprint_r>
    3624:	103a7b1e 	bne	r2,zero,2014 <__alt_data_end+0xfffd2014>
    3628:	d8c02017 	ldw	r3,128(sp)
    362c:	da000404 	addi	r8,sp,16
    3630:	003d4106 	br	2b38 <__alt_data_end+0xfffd2b38>
    3634:	d8801f17 	ldw	r2,124(sp)
    3638:	014000b4 	movhi	r5,2
    363c:	01000044 	movi	r4,1
    3640:	18c00044 	addi	r3,r3,1
    3644:	10800044 	addi	r2,r2,1
    3648:	29658404 	addi	r5,r5,-27120
    364c:	41000115 	stw	r4,4(r8)
    3650:	41400015 	stw	r5,0(r8)
    3654:	d8c02015 	stw	r3,128(sp)
    3658:	d8801f15 	stw	r2,124(sp)
    365c:	010001c4 	movi	r4,7
    3660:	20805c16 	blt	r4,r2,37d4 <___vfprintf_internal_r+0x1bd0>
    3664:	42000204 	addi	r8,r8,8
    3668:	8800041e 	bne	r17,zero,367c <___vfprintf_internal_r+0x1a78>
    366c:	d8803317 	ldw	r2,204(sp)
    3670:	1000021e 	bne	r2,zero,367c <___vfprintf_internal_r+0x1a78>
    3674:	9080004c 	andi	r2,r18,1
    3678:	103be726 	beq	r2,zero,2618 <__alt_data_end+0xfffd2618>
    367c:	d9003717 	ldw	r4,220(sp)
    3680:	d8801f17 	ldw	r2,124(sp)
    3684:	d9403417 	ldw	r5,208(sp)
    3688:	20c7883a 	add	r3,r4,r3
    368c:	10800044 	addi	r2,r2,1
    3690:	41000115 	stw	r4,4(r8)
    3694:	41400015 	stw	r5,0(r8)
    3698:	d8c02015 	stw	r3,128(sp)
    369c:	d8801f15 	stw	r2,124(sp)
    36a0:	010001c4 	movi	r4,7
    36a4:	20812116 	blt	r4,r2,3b2c <___vfprintf_internal_r+0x1f28>
    36a8:	42000204 	addi	r8,r8,8
    36ac:	0463c83a 	sub	r17,zero,r17
    36b0:	0440730e 	bge	zero,r17,3880 <___vfprintf_internal_r+0x1c7c>
    36b4:	05800404 	movi	r22,16
    36b8:	b440860e 	bge	r22,r17,38d4 <___vfprintf_internal_r+0x1cd0>
    36bc:	014000b4 	movhi	r5,2
    36c0:	29658484 	addi	r5,r5,-27118
    36c4:	d9402c15 	stw	r5,176(sp)
    36c8:	070001c4 	movi	fp,7
    36cc:	dcc02d17 	ldw	r19,180(sp)
    36d0:	00000306 	br	36e0 <___vfprintf_internal_r+0x1adc>
    36d4:	42000204 	addi	r8,r8,8
    36d8:	8c7ffc04 	addi	r17,r17,-16
    36dc:	b440800e 	bge	r22,r17,38e0 <___vfprintf_internal_r+0x1cdc>
    36e0:	18c00404 	addi	r3,r3,16
    36e4:	10800044 	addi	r2,r2,1
    36e8:	45000015 	stw	r20,0(r8)
    36ec:	45800115 	stw	r22,4(r8)
    36f0:	d8c02015 	stw	r3,128(sp)
    36f4:	d8801f15 	stw	r2,124(sp)
    36f8:	e0bff60e 	bge	fp,r2,36d4 <__alt_data_end+0xfffd36d4>
    36fc:	d9801e04 	addi	r6,sp,120
    3700:	b80b883a 	mov	r5,r23
    3704:	9809883a 	mov	r4,r19
    3708:	00097b40 	call	97b4 <__sprint_r>
    370c:	103a411e 	bne	r2,zero,2014 <__alt_data_end+0xfffd2014>
    3710:	d8c02017 	ldw	r3,128(sp)
    3714:	d8801f17 	ldw	r2,124(sp)
    3718:	da000404 	addi	r8,sp,16
    371c:	003fee06 	br	36d8 <__alt_data_end+0xfffd36d8>
    3720:	00bfffc4 	movi	r2,-1
    3724:	003a3f06 	br	2024 <__alt_data_end+0xfffd2024>
    3728:	008011c4 	movi	r2,71
    372c:	1440b816 	blt	r2,r17,3a10 <___vfprintf_internal_r+0x1e0c>
    3730:	040000b4 	movhi	r16,2
    3734:	84257604 	addi	r16,r16,-27176
    3738:	00c000c4 	movi	r3,3
    373c:	00bfdfc4 	movi	r2,-129
    3740:	d8c02915 	stw	r3,164(sp)
    3744:	90a4703a 	and	r18,r18,r2
    3748:	df002783 	ldbu	fp,158(sp)
    374c:	d8c02b15 	stw	r3,172(sp)
    3750:	d8002a15 	stw	zero,168(sp)
    3754:	d8003215 	stw	zero,200(sp)
    3758:	003b0706 	br	2378 <__alt_data_end+0xfffd2378>
    375c:	d8c02e17 	ldw	r3,184(sp)
    3760:	1cc00017 	ldw	r19,0(r3)
    3764:	18c00104 	addi	r3,r3,4
    3768:	d8c02e15 	stw	r3,184(sp)
    376c:	982dd7fa 	srai	r22,r19,31
    3770:	b005883a 	mov	r2,r22
    3774:	003a7706 	br	2154 <__alt_data_end+0xfffd2154>
    3778:	d8c02e17 	ldw	r3,184(sp)
    377c:	d9002f17 	ldw	r4,188(sp)
    3780:	18800017 	ldw	r2,0(r3)
    3784:	18c00104 	addi	r3,r3,4
    3788:	d8c02e15 	stw	r3,184(sp)
    378c:	11000015 	stw	r4,0(r2)
    3790:	00395406 	br	1ce4 <__alt_data_end+0xfffd1ce4>
    3794:	d9002e17 	ldw	r4,184(sp)
    3798:	002d883a 	mov	r22,zero
    379c:	24c00017 	ldw	r19,0(r4)
    37a0:	21000104 	addi	r4,r4,4
    37a4:	d9002e15 	stw	r4,184(sp)
    37a8:	003c0706 	br	27c8 <__alt_data_end+0xfffd27c8>
    37ac:	d9402e17 	ldw	r5,184(sp)
    37b0:	d8c02a17 	ldw	r3,168(sp)
    37b4:	002d883a 	mov	r22,zero
    37b8:	28800104 	addi	r2,r5,4
    37bc:	2cc0000b 	ldhu	r19,0(r5)
    37c0:	183dc10e 	bge	r3,zero,2ec8 <__alt_data_end+0xfffd2ec8>
    37c4:	003f7506 	br	359c <__alt_data_end+0xfffd359c>
    37c8:	040000b4 	movhi	r16,2
    37cc:	84257404 	addi	r16,r16,-27184
    37d0:	003aa706 	br	2270 <__alt_data_end+0xfffd2270>
    37d4:	d9002d17 	ldw	r4,180(sp)
    37d8:	d9801e04 	addi	r6,sp,120
    37dc:	b80b883a 	mov	r5,r23
    37e0:	00097b40 	call	97b4 <__sprint_r>
    37e4:	103a0b1e 	bne	r2,zero,2014 <__alt_data_end+0xfffd2014>
    37e8:	dc402617 	ldw	r17,152(sp)
    37ec:	d8c02017 	ldw	r3,128(sp)
    37f0:	da000404 	addi	r8,sp,16
    37f4:	003f9c06 	br	3668 <__alt_data_end+0xfffd3668>
    37f8:	ac400043 	ldbu	r17,1(r21)
    37fc:	84000814 	ori	r16,r16,32
    3800:	ad400044 	addi	r21,r21,1
    3804:	8c403fcc 	andi	r17,r17,255
    3808:	8c40201c 	xori	r17,r17,128
    380c:	8c7fe004 	addi	r17,r17,-128
    3810:	00395e06 	br	1d8c <__alt_data_end+0xfffd1d8c>
    3814:	d8c02e15 	stw	r3,184(sp)
    3818:	0039883a 	mov	fp,zero
    381c:	003e3506 	br	30f4 <__alt_data_end+0xfffd30f4>
    3820:	d9002d17 	ldw	r4,180(sp)
    3824:	d9801e04 	addi	r6,sp,120
    3828:	b80b883a 	mov	r5,r23
    382c:	00097b40 	call	97b4 <__sprint_r>
    3830:	1039f81e 	bne	r2,zero,2014 <__alt_data_end+0xfffd2014>
    3834:	d8c02017 	ldw	r3,128(sp)
    3838:	da000404 	addi	r8,sp,16
    383c:	003cd006 	br	2b80 <__alt_data_end+0xfffd2b80>
    3840:	8009883a 	mov	r4,r16
    3844:	df003d15 	stw	fp,244(sp)
    3848:	000124c0 	call	124c <strlen>
    384c:	d8802b15 	stw	r2,172(sp)
    3850:	da003d17 	ldw	r8,244(sp)
    3854:	103c200e 	bge	r2,zero,28d8 <__alt_data_end+0xfffd28d8>
    3858:	0005883a 	mov	r2,zero
    385c:	003c1e06 	br	28d8 <__alt_data_end+0xfffd28d8>
    3860:	d9002d17 	ldw	r4,180(sp)
    3864:	d9801e04 	addi	r6,sp,120
    3868:	b80b883a 	mov	r5,r23
    386c:	00097b40 	call	97b4 <__sprint_r>
    3870:	1039e81e 	bne	r2,zero,2014 <__alt_data_end+0xfffd2014>
    3874:	d8c02017 	ldw	r3,128(sp)
    3878:	d8801f17 	ldw	r2,124(sp)
    387c:	da000404 	addi	r8,sp,16
    3880:	d9403317 	ldw	r5,204(sp)
    3884:	10800044 	addi	r2,r2,1
    3888:	44000015 	stw	r16,0(r8)
    388c:	28c7883a 	add	r3,r5,r3
    3890:	003b5b06 	br	2600 <__alt_data_end+0xfffd2600>
    3894:	010000b4 	movhi	r4,2
    3898:	21258884 	addi	r4,r4,-27102
    389c:	d9003515 	stw	r4,212(sp)
    38a0:	003af206 	br	246c <__alt_data_end+0xfffd246c>
    38a4:	013fffc4 	movi	r4,-1
    38a8:	003a0806 	br	20cc <__alt_data_end+0xfffd20cc>
    38ac:	0023883a 	mov	r17,zero
    38b0:	003d9d06 	br	2f28 <__alt_data_end+0xfffd2f28>
    38b4:	d9002d17 	ldw	r4,180(sp)
    38b8:	d9801e04 	addi	r6,sp,120
    38bc:	b80b883a 	mov	r5,r23
    38c0:	00097b40 	call	97b4 <__sprint_r>
    38c4:	1039d31e 	bne	r2,zero,2014 <__alt_data_end+0xfffd2014>
    38c8:	d8c02017 	ldw	r3,128(sp)
    38cc:	da000404 	addi	r8,sp,16
    38d0:	003d9406 	br	2f24 <__alt_data_end+0xfffd2f24>
    38d4:	010000b4 	movhi	r4,2
    38d8:	21258484 	addi	r4,r4,-27118
    38dc:	d9002c15 	stw	r4,176(sp)
    38e0:	d9002c17 	ldw	r4,176(sp)
    38e4:	1c47883a 	add	r3,r3,r17
    38e8:	10800044 	addi	r2,r2,1
    38ec:	41000015 	stw	r4,0(r8)
    38f0:	44400115 	stw	r17,4(r8)
    38f4:	d8c02015 	stw	r3,128(sp)
    38f8:	d8801f15 	stw	r2,124(sp)
    38fc:	010001c4 	movi	r4,7
    3900:	20bfd716 	blt	r4,r2,3860 <__alt_data_end+0xfffd3860>
    3904:	42000204 	addi	r8,r8,8
    3908:	003fdd06 	br	3880 <__alt_data_end+0xfffd3880>
    390c:	d9002d17 	ldw	r4,180(sp)
    3910:	d9801e04 	addi	r6,sp,120
    3914:	b80b883a 	mov	r5,r23
    3918:	00097b40 	call	97b4 <__sprint_r>
    391c:	1039bd1e 	bne	r2,zero,2014 <__alt_data_end+0xfffd2014>
    3920:	d8802617 	ldw	r2,152(sp)
    3924:	d8c02017 	ldw	r3,128(sp)
    3928:	da000404 	addi	r8,sp,16
    392c:	003e1006 	br	3170 <__alt_data_end+0xfffd3170>
    3930:	00800044 	movi	r2,1
    3934:	10803fcc 	andi	r2,r2,255
    3938:	00c00044 	movi	r3,1
    393c:	10fa0d26 	beq	r2,r3,2174 <__alt_data_end+0xfffd2174>
    3940:	00c00084 	movi	r3,2
    3944:	10fbaf26 	beq	r2,r3,2804 <__alt_data_end+0xfffd2804>
    3948:	003a6d06 	br	2300 <__alt_data_end+0xfffd2300>
    394c:	010000b4 	movhi	r4,2
    3950:	21258884 	addi	r4,r4,-27102
    3954:	d9003515 	stw	r4,212(sp)
    3958:	003b5406 	br	26ac <__alt_data_end+0xfffd26ac>
    395c:	d8802a17 	ldw	r2,168(sp)
    3960:	00c00184 	movi	r3,6
    3964:	1880012e 	bgeu	r3,r2,396c <___vfprintf_internal_r+0x1d68>
    3968:	1805883a 	mov	r2,r3
    396c:	d8802b15 	stw	r2,172(sp)
    3970:	1000ef16 	blt	r2,zero,3d30 <___vfprintf_internal_r+0x212c>
    3974:	040000b4 	movhi	r16,2
    3978:	d8802915 	stw	r2,164(sp)
    397c:	dcc02e15 	stw	r19,184(sp)
    3980:	d8002a15 	stw	zero,168(sp)
    3984:	d8003215 	stw	zero,200(sp)
    3988:	84258204 	addi	r16,r16,-27128
    398c:	0039883a 	mov	fp,zero
    3990:	003a8006 	br	2394 <__alt_data_end+0xfffd2394>
    3994:	0021883a 	mov	r16,zero
    3998:	003e0706 	br	31b8 <__alt_data_end+0xfffd31b8>
    399c:	d9002d17 	ldw	r4,180(sp)
    39a0:	d9801e04 	addi	r6,sp,120
    39a4:	b80b883a 	mov	r5,r23
    39a8:	00097b40 	call	97b4 <__sprint_r>
    39ac:	1039991e 	bne	r2,zero,2014 <__alt_data_end+0xfffd2014>
    39b0:	d8802617 	ldw	r2,152(sp)
    39b4:	d9403317 	ldw	r5,204(sp)
    39b8:	d8c02017 	ldw	r3,128(sp)
    39bc:	da000404 	addi	r8,sp,16
    39c0:	2885c83a 	sub	r2,r5,r2
    39c4:	003dfb06 	br	31b4 <__alt_data_end+0xfffd31b4>
    39c8:	9080004c 	andi	r2,r18,1
    39cc:	103e8f1e 	bne	r2,zero,340c <__alt_data_end+0xfffd340c>
    39d0:	d8802117 	ldw	r2,132(sp)
    39d4:	003e9e06 	br	3450 <__alt_data_end+0xfffd3450>
    39d8:	1025883a 	mov	r18,r2
    39dc:	0039883a 	mov	fp,zero
    39e0:	00800084 	movi	r2,2
    39e4:	003fd306 	br	3934 <__alt_data_end+0xfffd3934>
    39e8:	07000b44 	movi	fp,45
    39ec:	df002785 	stb	fp,158(sp)
    39f0:	003a1b06 	br	2260 <__alt_data_end+0xfffd2260>
    39f4:	00c00b44 	movi	r3,45
    39f8:	d8c02785 	stb	r3,158(sp)
    39fc:	d8802915 	stw	r2,164(sp)
    3a00:	dc802c17 	ldw	r18,176(sp)
    3a04:	d8002a15 	stw	zero,168(sp)
    3a08:	07000b44 	movi	fp,45
    3a0c:	003a5e06 	br	2388 <__alt_data_end+0xfffd2388>
    3a10:	040000b4 	movhi	r16,2
    3a14:	84257704 	addi	r16,r16,-27172
    3a18:	003f4706 	br	3738 <__alt_data_end+0xfffd3738>
    3a1c:	d9002e17 	ldw	r4,184(sp)
    3a20:	d9402f17 	ldw	r5,188(sp)
    3a24:	20800017 	ldw	r2,0(r4)
    3a28:	21000104 	addi	r4,r4,4
    3a2c:	d9002e15 	stw	r4,184(sp)
    3a30:	11400015 	stw	r5,0(r2)
    3a34:	0038ab06 	br	1ce4 <__alt_data_end+0xfffd1ce4>
    3a38:	dd802617 	ldw	r22,152(sp)
    3a3c:	00bfff44 	movi	r2,-3
    3a40:	b0801c16 	blt	r22,r2,3ab4 <___vfprintf_internal_r+0x1eb0>
    3a44:	d9402a17 	ldw	r5,168(sp)
    3a48:	2d801a16 	blt	r5,r22,3ab4 <___vfprintf_internal_r+0x1eb0>
    3a4c:	dd803215 	stw	r22,200(sp)
    3a50:	003e8906 	br	3478 <__alt_data_end+0xfffd3478>
    3a54:	010000b4 	movhi	r4,2
    3a58:	21258484 	addi	r4,r4,-27118
    3a5c:	d9002c15 	stw	r4,176(sp)
    3a60:	003c9106 	br	2ca8 <__alt_data_end+0xfffd2ca8>
    3a64:	e005883a 	mov	r2,fp
    3a68:	003e7906 	br	3450 <__alt_data_end+0xfffd3450>
    3a6c:	d9002a17 	ldw	r4,168(sp)
    3a70:	df002783 	ldbu	fp,158(sp)
    3a74:	dcc02e15 	stw	r19,184(sp)
    3a78:	d9002915 	stw	r4,164(sp)
    3a7c:	d9002b15 	stw	r4,172(sp)
    3a80:	d8002a15 	stw	zero,168(sp)
    3a84:	d8003215 	stw	zero,200(sp)
    3a88:	003a3b06 	br	2378 <__alt_data_end+0xfffd2378>
    3a8c:	9080004c 	andi	r2,r18,1
    3a90:	0039883a 	mov	fp,zero
    3a94:	10000426 	beq	r2,zero,3aa8 <___vfprintf_internal_r+0x1ea4>
    3a98:	00800c04 	movi	r2,48
    3a9c:	dc001dc4 	addi	r16,sp,119
    3aa0:	d8801dc5 	stb	r2,119(sp)
    3aa4:	003b6406 	br	2838 <__alt_data_end+0xfffd2838>
    3aa8:	d8002b15 	stw	zero,172(sp)
    3aac:	dc001e04 	addi	r16,sp,120
    3ab0:	003a2b06 	br	2360 <__alt_data_end+0xfffd2360>
    3ab4:	8c7fff84 	addi	r17,r17,-2
    3ab8:	b5bfffc4 	addi	r22,r22,-1
    3abc:	dd802615 	stw	r22,152(sp)
    3ac0:	dc4022c5 	stb	r17,139(sp)
    3ac4:	b000bf16 	blt	r22,zero,3dc4 <___vfprintf_internal_r+0x21c0>
    3ac8:	00800ac4 	movi	r2,43
    3acc:	d8802305 	stb	r2,140(sp)
    3ad0:	00800244 	movi	r2,9
    3ad4:	15807016 	blt	r2,r22,3c98 <___vfprintf_internal_r+0x2094>
    3ad8:	00800c04 	movi	r2,48
    3adc:	b5800c04 	addi	r22,r22,48
    3ae0:	d8802345 	stb	r2,141(sp)
    3ae4:	dd802385 	stb	r22,142(sp)
    3ae8:	d88023c4 	addi	r2,sp,143
    3aec:	df0022c4 	addi	fp,sp,139
    3af0:	d8c03317 	ldw	r3,204(sp)
    3af4:	1739c83a 	sub	fp,r2,fp
    3af8:	d9003317 	ldw	r4,204(sp)
    3afc:	e0c7883a 	add	r3,fp,r3
    3b00:	df003a15 	stw	fp,232(sp)
    3b04:	d8c02b15 	stw	r3,172(sp)
    3b08:	00800044 	movi	r2,1
    3b0c:	1100b30e 	bge	r2,r4,3ddc <___vfprintf_internal_r+0x21d8>
    3b10:	d8c02b17 	ldw	r3,172(sp)
    3b14:	18c00044 	addi	r3,r3,1
    3b18:	d8c02b15 	stw	r3,172(sp)
    3b1c:	1805883a 	mov	r2,r3
    3b20:	1800ac16 	blt	r3,zero,3dd4 <___vfprintf_internal_r+0x21d0>
    3b24:	d8003215 	stw	zero,200(sp)
    3b28:	003e5d06 	br	34a0 <__alt_data_end+0xfffd34a0>
    3b2c:	d9002d17 	ldw	r4,180(sp)
    3b30:	d9801e04 	addi	r6,sp,120
    3b34:	b80b883a 	mov	r5,r23
    3b38:	00097b40 	call	97b4 <__sprint_r>
    3b3c:	1039351e 	bne	r2,zero,2014 <__alt_data_end+0xfffd2014>
    3b40:	dc402617 	ldw	r17,152(sp)
    3b44:	d8c02017 	ldw	r3,128(sp)
    3b48:	d8801f17 	ldw	r2,124(sp)
    3b4c:	da000404 	addi	r8,sp,16
    3b50:	003ed606 	br	36ac <__alt_data_end+0xfffd36ac>
    3b54:	182b883a 	mov	r21,r3
    3b58:	d8002a15 	stw	zero,168(sp)
    3b5c:	00388c06 	br	1d90 <__alt_data_end+0xfffd1d90>
    3b60:	d8802a17 	ldw	r2,168(sp)
    3b64:	103e071e 	bne	r2,zero,3384 <__alt_data_end+0xfffd3384>
    3b68:	dc002a15 	stw	r16,168(sp)
    3b6c:	003e0506 	br	3384 <__alt_data_end+0xfffd3384>
    3b70:	d9002a17 	ldw	r4,168(sp)
    3b74:	20c00044 	addi	r3,r4,1
    3b78:	003e0f06 	br	33b8 <__alt_data_end+0xfffd33b8>
    3b7c:	01400184 	movi	r5,6
    3b80:	d9402a15 	stw	r5,168(sp)
    3b84:	003dff06 	br	3384 <__alt_data_end+0xfffd3384>
    3b88:	d8802104 	addi	r2,sp,132
    3b8c:	d8800315 	stw	r2,12(sp)
    3b90:	d8802504 	addi	r2,sp,148
    3b94:	d8800215 	stw	r2,8(sp)
    3b98:	d8802604 	addi	r2,sp,152
    3b9c:	d8800115 	stw	r2,4(sp)
    3ba0:	d8802a17 	ldw	r2,168(sp)
    3ba4:	d9403617 	ldw	r5,216(sp)
    3ba8:	d9002d17 	ldw	r4,180(sp)
    3bac:	d8800015 	stw	r2,0(sp)
    3bb0:	01c000c4 	movi	r7,3
    3bb4:	980d883a 	mov	r6,r19
    3bb8:	da003d15 	stw	r8,244(sp)
    3bbc:	00043340 	call	4334 <_dtoa_r>
    3bc0:	d8c02a17 	ldw	r3,168(sp)
    3bc4:	da003d17 	ldw	r8,244(sp)
    3bc8:	1021883a 	mov	r16,r2
    3bcc:	10f9883a 	add	fp,r2,r3
    3bd0:	81000007 	ldb	r4,0(r16)
    3bd4:	00800c04 	movi	r2,48
    3bd8:	20805e26 	beq	r4,r2,3d54 <___vfprintf_internal_r+0x2150>
    3bdc:	d8c02617 	ldw	r3,152(sp)
    3be0:	e0f9883a 	add	fp,fp,r3
    3be4:	003e0a06 	br	3410 <__alt_data_end+0xfffd3410>
    3be8:	00c00b44 	movi	r3,45
    3bec:	24e0003c 	xorhi	r19,r4,32768
    3bf0:	d8c02905 	stb	r3,164(sp)
    3bf4:	003de906 	br	339c <__alt_data_end+0xfffd339c>
    3bf8:	d8c03217 	ldw	r3,200(sp)
    3bfc:	00c07a0e 	bge	zero,r3,3de8 <___vfprintf_internal_r+0x21e4>
    3c00:	00800044 	movi	r2,1
    3c04:	d9003317 	ldw	r4,204(sp)
    3c08:	1105883a 	add	r2,r2,r4
    3c0c:	d8802b15 	stw	r2,172(sp)
    3c10:	10004e16 	blt	r2,zero,3d4c <___vfprintf_internal_r+0x2148>
    3c14:	044019c4 	movi	r17,103
    3c18:	003e2106 	br	34a0 <__alt_data_end+0xfffd34a0>
    3c1c:	d9002a17 	ldw	r4,168(sp)
    3c20:	d8802104 	addi	r2,sp,132
    3c24:	d8800315 	stw	r2,12(sp)
    3c28:	d9000015 	stw	r4,0(sp)
    3c2c:	d8802504 	addi	r2,sp,148
    3c30:	d9403617 	ldw	r5,216(sp)
    3c34:	d9002d17 	ldw	r4,180(sp)
    3c38:	d8800215 	stw	r2,8(sp)
    3c3c:	d8802604 	addi	r2,sp,152
    3c40:	d8800115 	stw	r2,4(sp)
    3c44:	01c000c4 	movi	r7,3
    3c48:	980d883a 	mov	r6,r19
    3c4c:	da003d15 	stw	r8,244(sp)
    3c50:	00043340 	call	4334 <_dtoa_r>
    3c54:	d8c02a17 	ldw	r3,168(sp)
    3c58:	da003d17 	ldw	r8,244(sp)
    3c5c:	1021883a 	mov	r16,r2
    3c60:	00801184 	movi	r2,70
    3c64:	80f9883a 	add	fp,r16,r3
    3c68:	88bfd926 	beq	r17,r2,3bd0 <__alt_data_end+0xfffd3bd0>
    3c6c:	003de806 	br	3410 <__alt_data_end+0xfffd3410>
    3c70:	d9002a17 	ldw	r4,168(sp)
    3c74:	00c04d0e 	bge	zero,r3,3dac <___vfprintf_internal_r+0x21a8>
    3c78:	2000441e 	bne	r4,zero,3d8c <___vfprintf_internal_r+0x2188>
    3c7c:	9480004c 	andi	r18,r18,1
    3c80:	9000421e 	bne	r18,zero,3d8c <___vfprintf_internal_r+0x2188>
    3c84:	1805883a 	mov	r2,r3
    3c88:	18006f16 	blt	r3,zero,3e48 <___vfprintf_internal_r+0x2244>
    3c8c:	d8c03217 	ldw	r3,200(sp)
    3c90:	d8c02b15 	stw	r3,172(sp)
    3c94:	003e0206 	br	34a0 <__alt_data_end+0xfffd34a0>
    3c98:	df0022c4 	addi	fp,sp,139
    3c9c:	dc002a15 	stw	r16,168(sp)
    3ca0:	4027883a 	mov	r19,r8
    3ca4:	e021883a 	mov	r16,fp
    3ca8:	b009883a 	mov	r4,r22
    3cac:	01400284 	movi	r5,10
    3cb0:	0000d500 	call	d50 <__modsi3>
    3cb4:	10800c04 	addi	r2,r2,48
    3cb8:	843fffc4 	addi	r16,r16,-1
    3cbc:	b009883a 	mov	r4,r22
    3cc0:	01400284 	movi	r5,10
    3cc4:	80800005 	stb	r2,0(r16)
    3cc8:	0000ccc0 	call	ccc <__divsi3>
    3ccc:	102d883a 	mov	r22,r2
    3cd0:	00800244 	movi	r2,9
    3cd4:	15bff416 	blt	r2,r22,3ca8 <__alt_data_end+0xfffd3ca8>
    3cd8:	9811883a 	mov	r8,r19
    3cdc:	b0800c04 	addi	r2,r22,48
    3ce0:	8027883a 	mov	r19,r16
    3ce4:	997fffc4 	addi	r5,r19,-1
    3ce8:	98bfffc5 	stb	r2,-1(r19)
    3cec:	dc002a17 	ldw	r16,168(sp)
    3cf0:	2f006d2e 	bgeu	r5,fp,3ea8 <___vfprintf_internal_r+0x22a4>
    3cf4:	d9c02384 	addi	r7,sp,142
    3cf8:	3ccfc83a 	sub	r7,r7,r19
    3cfc:	d9002344 	addi	r4,sp,141
    3d00:	e1cf883a 	add	r7,fp,r7
    3d04:	00000106 	br	3d0c <___vfprintf_internal_r+0x2108>
    3d08:	28800003 	ldbu	r2,0(r5)
    3d0c:	20800005 	stb	r2,0(r4)
    3d10:	21000044 	addi	r4,r4,1
    3d14:	29400044 	addi	r5,r5,1
    3d18:	393ffb1e 	bne	r7,r4,3d08 <__alt_data_end+0xfffd3d08>
    3d1c:	d8802304 	addi	r2,sp,140
    3d20:	14c5c83a 	sub	r2,r2,r19
    3d24:	d8c02344 	addi	r3,sp,141
    3d28:	1885883a 	add	r2,r3,r2
    3d2c:	003f7006 	br	3af0 <__alt_data_end+0xfffd3af0>
    3d30:	0005883a 	mov	r2,zero
    3d34:	003f0f06 	br	3974 <__alt_data_end+0xfffd3974>
    3d38:	d8c03217 	ldw	r3,200(sp)
    3d3c:	18c00044 	addi	r3,r3,1
    3d40:	d8c02b15 	stw	r3,172(sp)
    3d44:	1805883a 	mov	r2,r3
    3d48:	183fb20e 	bge	r3,zero,3c14 <__alt_data_end+0xfffd3c14>
    3d4c:	0005883a 	mov	r2,zero
    3d50:	003fb006 	br	3c14 <__alt_data_end+0xfffd3c14>
    3d54:	d9003617 	ldw	r4,216(sp)
    3d58:	000d883a 	mov	r6,zero
    3d5c:	000f883a 	mov	r7,zero
    3d60:	980b883a 	mov	r5,r19
    3d64:	d8c03c15 	stw	r3,240(sp)
    3d68:	da003d15 	stw	r8,244(sp)
    3d6c:	000d66c0 	call	d66c <__eqdf2>
    3d70:	d8c03c17 	ldw	r3,240(sp)
    3d74:	da003d17 	ldw	r8,244(sp)
    3d78:	103f9826 	beq	r2,zero,3bdc <__alt_data_end+0xfffd3bdc>
    3d7c:	00800044 	movi	r2,1
    3d80:	10c7c83a 	sub	r3,r2,r3
    3d84:	d8c02615 	stw	r3,152(sp)
    3d88:	003f9506 	br	3be0 <__alt_data_end+0xfffd3be0>
    3d8c:	d9002a17 	ldw	r4,168(sp)
    3d90:	d8c03217 	ldw	r3,200(sp)
    3d94:	20800044 	addi	r2,r4,1
    3d98:	1885883a 	add	r2,r3,r2
    3d9c:	d8802b15 	stw	r2,172(sp)
    3da0:	103dbf0e 	bge	r2,zero,34a0 <__alt_data_end+0xfffd34a0>
    3da4:	0005883a 	mov	r2,zero
    3da8:	003dbd06 	br	34a0 <__alt_data_end+0xfffd34a0>
    3dac:	2000201e 	bne	r4,zero,3e30 <___vfprintf_internal_r+0x222c>
    3db0:	9480004c 	andi	r18,r18,1
    3db4:	90001e1e 	bne	r18,zero,3e30 <___vfprintf_internal_r+0x222c>
    3db8:	00800044 	movi	r2,1
    3dbc:	d8802b15 	stw	r2,172(sp)
    3dc0:	003db706 	br	34a0 <__alt_data_end+0xfffd34a0>
    3dc4:	00800b44 	movi	r2,45
    3dc8:	05adc83a 	sub	r22,zero,r22
    3dcc:	d8802305 	stb	r2,140(sp)
    3dd0:	003f3f06 	br	3ad0 <__alt_data_end+0xfffd3ad0>
    3dd4:	0005883a 	mov	r2,zero
    3dd8:	003f5206 	br	3b24 <__alt_data_end+0xfffd3b24>
    3ddc:	90a4703a 	and	r18,r18,r2
    3de0:	903f4e26 	beq	r18,zero,3b1c <__alt_data_end+0xfffd3b1c>
    3de4:	003f4a06 	br	3b10 <__alt_data_end+0xfffd3b10>
    3de8:	00800084 	movi	r2,2
    3dec:	10c5c83a 	sub	r2,r2,r3
    3df0:	003f8406 	br	3c04 <__alt_data_end+0xfffd3c04>
    3df4:	d9402e17 	ldw	r5,184(sp)
    3df8:	d9002e17 	ldw	r4,184(sp)
    3dfc:	ac400043 	ldbu	r17,1(r21)
    3e00:	29400017 	ldw	r5,0(r5)
    3e04:	20800104 	addi	r2,r4,4
    3e08:	d8802e15 	stw	r2,184(sp)
    3e0c:	d9402a15 	stw	r5,168(sp)
    3e10:	182b883a 	mov	r21,r3
    3e14:	283e7b0e 	bge	r5,zero,3804 <__alt_data_end+0xfffd3804>
    3e18:	8c403fcc 	andi	r17,r17,255
    3e1c:	017fffc4 	movi	r5,-1
    3e20:	8c40201c 	xori	r17,r17,128
    3e24:	d9402a15 	stw	r5,168(sp)
    3e28:	8c7fe004 	addi	r17,r17,-128
    3e2c:	0037d706 	br	1d8c <__alt_data_end+0xfffd1d8c>
    3e30:	d8c02a17 	ldw	r3,168(sp)
    3e34:	18c00084 	addi	r3,r3,2
    3e38:	d8c02b15 	stw	r3,172(sp)
    3e3c:	1805883a 	mov	r2,r3
    3e40:	183d970e 	bge	r3,zero,34a0 <__alt_data_end+0xfffd34a0>
    3e44:	003fd706 	br	3da4 <__alt_data_end+0xfffd3da4>
    3e48:	0005883a 	mov	r2,zero
    3e4c:	003f8f06 	br	3c8c <__alt_data_end+0xfffd3c8c>
    3e50:	9080004c 	andi	r2,r18,1
    3e54:	103f821e 	bne	r2,zero,3c60 <__alt_data_end+0xfffd3c60>
    3e58:	d8802117 	ldw	r2,132(sp)
    3e5c:	1405c83a 	sub	r2,r2,r16
    3e60:	d8803315 	stw	r2,204(sp)
    3e64:	b47ef426 	beq	r22,r17,3a38 <__alt_data_end+0xfffd3a38>
    3e68:	dd802617 	ldw	r22,152(sp)
    3e6c:	003f1206 	br	3ab8 <__alt_data_end+0xfffd3ab8>
    3e70:	d8c02b03 	ldbu	r3,172(sp)
    3e74:	d8c02785 	stb	r3,158(sp)
    3e78:	0038df06 	br	21f8 <__alt_data_end+0xfffd21f8>
    3e7c:	d8c02b03 	ldbu	r3,172(sp)
    3e80:	d8c02785 	stb	r3,158(sp)
    3e84:	0038aa06 	br	2130 <__alt_data_end+0xfffd2130>
    3e88:	d8c02b03 	ldbu	r3,172(sp)
    3e8c:	d8c02785 	stb	r3,158(sp)
    3e90:	003a4306 	br	27a0 <__alt_data_end+0xfffd27a0>
    3e94:	d8c02b03 	ldbu	r3,172(sp)
    3e98:	d8c02785 	stb	r3,158(sp)
    3e9c:	003af506 	br	2a74 <__alt_data_end+0xfffd2a74>
    3ea0:	0005883a 	mov	r2,zero
    3ea4:	003d7b06 	br	3494 <__alt_data_end+0xfffd3494>
    3ea8:	d8802344 	addi	r2,sp,141
    3eac:	003f1006 	br	3af0 <__alt_data_end+0xfffd3af0>
    3eb0:	d8c02b03 	ldbu	r3,172(sp)
    3eb4:	d8c02785 	stb	r3,158(sp)
    3eb8:	0038fd06 	br	22b0 <__alt_data_end+0xfffd22b0>
    3ebc:	d8c02b03 	ldbu	r3,172(sp)
    3ec0:	d8c02785 	stb	r3,158(sp)
    3ec4:	003a9706 	br	2924 <__alt_data_end+0xfffd2924>
    3ec8:	d8c02b03 	ldbu	r3,172(sp)
    3ecc:	d8c02785 	stb	r3,158(sp)
    3ed0:	003a1806 	br	2734 <__alt_data_end+0xfffd2734>
    3ed4:	d8c02b03 	ldbu	r3,172(sp)
    3ed8:	d8c02785 	stb	r3,158(sp)
    3edc:	003abe06 	br	29d8 <__alt_data_end+0xfffd29d8>

00003ee0 <__vfprintf_internal>:
    3ee0:	008000b4 	movhi	r2,2
    3ee4:	10ad2904 	addi	r2,r2,-19292
    3ee8:	300f883a 	mov	r7,r6
    3eec:	280d883a 	mov	r6,r5
    3ef0:	200b883a 	mov	r5,r4
    3ef4:	11000017 	ldw	r4,0(r2)
    3ef8:	0001c041 	jmpi	1c04 <___vfprintf_internal_r>

00003efc <__sbprintf>:
    3efc:	2880030b 	ldhu	r2,12(r5)
    3f00:	2ac01917 	ldw	r11,100(r5)
    3f04:	2a80038b 	ldhu	r10,14(r5)
    3f08:	2a400717 	ldw	r9,28(r5)
    3f0c:	2a000917 	ldw	r8,36(r5)
    3f10:	defee204 	addi	sp,sp,-1144
    3f14:	00c10004 	movi	r3,1024
    3f18:	dc011a15 	stw	r16,1128(sp)
    3f1c:	10bfff4c 	andi	r2,r2,65533
    3f20:	2821883a 	mov	r16,r5
    3f24:	d8cb883a 	add	r5,sp,r3
    3f28:	dc811c15 	stw	r18,1136(sp)
    3f2c:	dc411b15 	stw	r17,1132(sp)
    3f30:	dfc11d15 	stw	ra,1140(sp)
    3f34:	2025883a 	mov	r18,r4
    3f38:	d881030d 	sth	r2,1036(sp)
    3f3c:	dac11915 	stw	r11,1124(sp)
    3f40:	da81038d 	sth	r10,1038(sp)
    3f44:	da410715 	stw	r9,1052(sp)
    3f48:	da010915 	stw	r8,1060(sp)
    3f4c:	dec10015 	stw	sp,1024(sp)
    3f50:	dec10415 	stw	sp,1040(sp)
    3f54:	d8c10215 	stw	r3,1032(sp)
    3f58:	d8c10515 	stw	r3,1044(sp)
    3f5c:	d8010615 	stw	zero,1048(sp)
    3f60:	0001c040 	call	1c04 <___vfprintf_internal_r>
    3f64:	1023883a 	mov	r17,r2
    3f68:	10000416 	blt	r2,zero,3f7c <__sbprintf+0x80>
    3f6c:	d9410004 	addi	r5,sp,1024
    3f70:	9009883a 	mov	r4,r18
    3f74:	0005bd80 	call	5bd8 <_fflush_r>
    3f78:	10000d1e 	bne	r2,zero,3fb0 <__sbprintf+0xb4>
    3f7c:	d881030b 	ldhu	r2,1036(sp)
    3f80:	1080100c 	andi	r2,r2,64
    3f84:	10000326 	beq	r2,zero,3f94 <__sbprintf+0x98>
    3f88:	8080030b 	ldhu	r2,12(r16)
    3f8c:	10801014 	ori	r2,r2,64
    3f90:	8080030d 	sth	r2,12(r16)
    3f94:	8805883a 	mov	r2,r17
    3f98:	dfc11d17 	ldw	ra,1140(sp)
    3f9c:	dc811c17 	ldw	r18,1136(sp)
    3fa0:	dc411b17 	ldw	r17,1132(sp)
    3fa4:	dc011a17 	ldw	r16,1128(sp)
    3fa8:	dec11e04 	addi	sp,sp,1144
    3fac:	f800283a 	ret
    3fb0:	047fffc4 	movi	r17,-1
    3fb4:	003ff106 	br	3f7c <__alt_data_end+0xfffd3f7c>

00003fb8 <__swsetup_r>:
    3fb8:	008000b4 	movhi	r2,2
    3fbc:	defffd04 	addi	sp,sp,-12
    3fc0:	10ad2904 	addi	r2,r2,-19292
    3fc4:	dc400115 	stw	r17,4(sp)
    3fc8:	2023883a 	mov	r17,r4
    3fcc:	11000017 	ldw	r4,0(r2)
    3fd0:	dc000015 	stw	r16,0(sp)
    3fd4:	dfc00215 	stw	ra,8(sp)
    3fd8:	2821883a 	mov	r16,r5
    3fdc:	20000226 	beq	r4,zero,3fe8 <__swsetup_r+0x30>
    3fe0:	20800e17 	ldw	r2,56(r4)
    3fe4:	10003126 	beq	r2,zero,40ac <__swsetup_r+0xf4>
    3fe8:	8080030b 	ldhu	r2,12(r16)
    3fec:	10c0020c 	andi	r3,r2,8
    3ff0:	1009883a 	mov	r4,r2
    3ff4:	18000f26 	beq	r3,zero,4034 <__swsetup_r+0x7c>
    3ff8:	80c00417 	ldw	r3,16(r16)
    3ffc:	18001526 	beq	r3,zero,4054 <__swsetup_r+0x9c>
    4000:	1100004c 	andi	r4,r2,1
    4004:	20001c1e 	bne	r4,zero,4078 <__swsetup_r+0xc0>
    4008:	1080008c 	andi	r2,r2,2
    400c:	1000291e 	bne	r2,zero,40b4 <__swsetup_r+0xfc>
    4010:	80800517 	ldw	r2,20(r16)
    4014:	80800215 	stw	r2,8(r16)
    4018:	18001c26 	beq	r3,zero,408c <__swsetup_r+0xd4>
    401c:	0005883a 	mov	r2,zero
    4020:	dfc00217 	ldw	ra,8(sp)
    4024:	dc400117 	ldw	r17,4(sp)
    4028:	dc000017 	ldw	r16,0(sp)
    402c:	dec00304 	addi	sp,sp,12
    4030:	f800283a 	ret
    4034:	2080040c 	andi	r2,r4,16
    4038:	10002e26 	beq	r2,zero,40f4 <__swsetup_r+0x13c>
    403c:	2080010c 	andi	r2,r4,4
    4040:	10001e1e 	bne	r2,zero,40bc <__swsetup_r+0x104>
    4044:	80c00417 	ldw	r3,16(r16)
    4048:	20800214 	ori	r2,r4,8
    404c:	8080030d 	sth	r2,12(r16)
    4050:	183feb1e 	bne	r3,zero,4000 <__alt_data_end+0xfffd4000>
    4054:	1100a00c 	andi	r4,r2,640
    4058:	01408004 	movi	r5,512
    405c:	217fe826 	beq	r4,r5,4000 <__alt_data_end+0xfffd4000>
    4060:	800b883a 	mov	r5,r16
    4064:	8809883a 	mov	r4,r17
    4068:	0006b740 	call	6b74 <__smakebuf_r>
    406c:	8080030b 	ldhu	r2,12(r16)
    4070:	80c00417 	ldw	r3,16(r16)
    4074:	003fe206 	br	4000 <__alt_data_end+0xfffd4000>
    4078:	80800517 	ldw	r2,20(r16)
    407c:	80000215 	stw	zero,8(r16)
    4080:	0085c83a 	sub	r2,zero,r2
    4084:	80800615 	stw	r2,24(r16)
    4088:	183fe41e 	bne	r3,zero,401c <__alt_data_end+0xfffd401c>
    408c:	80c0030b 	ldhu	r3,12(r16)
    4090:	0005883a 	mov	r2,zero
    4094:	1900200c 	andi	r4,r3,128
    4098:	203fe126 	beq	r4,zero,4020 <__alt_data_end+0xfffd4020>
    409c:	18c01014 	ori	r3,r3,64
    40a0:	80c0030d 	sth	r3,12(r16)
    40a4:	00bfffc4 	movi	r2,-1
    40a8:	003fdd06 	br	4020 <__alt_data_end+0xfffd4020>
    40ac:	0005fc40 	call	5fc4 <__sinit>
    40b0:	003fcd06 	br	3fe8 <__alt_data_end+0xfffd3fe8>
    40b4:	0005883a 	mov	r2,zero
    40b8:	003fd606 	br	4014 <__alt_data_end+0xfffd4014>
    40bc:	81400c17 	ldw	r5,48(r16)
    40c0:	28000626 	beq	r5,zero,40dc <__swsetup_r+0x124>
    40c4:	80801004 	addi	r2,r16,64
    40c8:	28800326 	beq	r5,r2,40d8 <__swsetup_r+0x120>
    40cc:	8809883a 	mov	r4,r17
    40d0:	00061380 	call	6138 <_free_r>
    40d4:	8100030b 	ldhu	r4,12(r16)
    40d8:	80000c15 	stw	zero,48(r16)
    40dc:	80c00417 	ldw	r3,16(r16)
    40e0:	00bff6c4 	movi	r2,-37
    40e4:	1108703a 	and	r4,r2,r4
    40e8:	80000115 	stw	zero,4(r16)
    40ec:	80c00015 	stw	r3,0(r16)
    40f0:	003fd506 	br	4048 <__alt_data_end+0xfffd4048>
    40f4:	00800244 	movi	r2,9
    40f8:	88800015 	stw	r2,0(r17)
    40fc:	20801014 	ori	r2,r4,64
    4100:	8080030d 	sth	r2,12(r16)
    4104:	00bfffc4 	movi	r2,-1
    4108:	003fc506 	br	4020 <__alt_data_end+0xfffd4020>

0000410c <quorem>:
    410c:	defff204 	addi	sp,sp,-56
    4110:	ddc00b15 	stw	r23,44(sp)
    4114:	20800417 	ldw	r2,16(r4)
    4118:	2dc00417 	ldw	r23,16(r5)
    411c:	dfc00d15 	stw	ra,52(sp)
    4120:	df000c15 	stw	fp,48(sp)
    4124:	dd800a15 	stw	r22,40(sp)
    4128:	dd400915 	stw	r21,36(sp)
    412c:	dd000815 	stw	r20,32(sp)
    4130:	dcc00715 	stw	r19,28(sp)
    4134:	dc800615 	stw	r18,24(sp)
    4138:	dc400515 	stw	r17,20(sp)
    413c:	dc000415 	stw	r16,16(sp)
    4140:	15c07a16 	blt	r2,r23,432c <quorem+0x220>
    4144:	bdffffc4 	addi	r23,r23,-1
    4148:	bde9883a 	add	r20,r23,r23
    414c:	28c00504 	addi	r3,r5,20
    4150:	a529883a 	add	r20,r20,r20
    4154:	1d39883a 	add	fp,r3,r20
    4158:	24c00504 	addi	r19,r4,20
    415c:	d9400215 	stw	r5,8(sp)
    4160:	9d29883a 	add	r20,r19,r20
    4164:	e1400017 	ldw	r5,0(fp)
    4168:	d9000015 	stw	r4,0(sp)
    416c:	a1000017 	ldw	r4,0(r20)
    4170:	29400044 	addi	r5,r5,1
    4174:	d8c00115 	stw	r3,4(sp)
    4178:	dd000315 	stw	r20,12(sp)
    417c:	0000dc40 	call	dc4 <__udivsi3>
    4180:	1025883a 	mov	r18,r2
    4184:	10003026 	beq	r2,zero,4248 <quorem+0x13c>
    4188:	dc400117 	ldw	r17,4(sp)
    418c:	9829883a 	mov	r20,r19
    4190:	002d883a 	mov	r22,zero
    4194:	0021883a 	mov	r16,zero
    4198:	8d400017 	ldw	r21,0(r17)
    419c:	900b883a 	mov	r5,r18
    41a0:	8c400104 	addi	r17,r17,4
    41a4:	a93fffcc 	andi	r4,r21,65535
    41a8:	000c3c80 	call	c3c8 <__mulsi3>
    41ac:	a808d43a 	srli	r4,r21,16
    41b0:	900b883a 	mov	r5,r18
    41b4:	15ad883a 	add	r22,r2,r22
    41b8:	000c3c80 	call	c3c8 <__mulsi3>
    41bc:	a1000017 	ldw	r4,0(r20)
    41c0:	b00cd43a 	srli	r6,r22,16
    41c4:	b0ffffcc 	andi	r3,r22,65535
    41c8:	217fffcc 	andi	r5,r4,65535
    41cc:	2c21883a 	add	r16,r5,r16
    41d0:	80c7c83a 	sub	r3,r16,r3
    41d4:	2008d43a 	srli	r4,r4,16
    41d8:	1185883a 	add	r2,r2,r6
    41dc:	1821d43a 	srai	r16,r3,16
    41e0:	117fffcc 	andi	r5,r2,65535
    41e4:	2149c83a 	sub	r4,r4,r5
    41e8:	2421883a 	add	r16,r4,r16
    41ec:	8008943a 	slli	r4,r16,16
    41f0:	18ffffcc 	andi	r3,r3,65535
    41f4:	102cd43a 	srli	r22,r2,16
    41f8:	20c8b03a 	or	r4,r4,r3
    41fc:	a1000015 	stw	r4,0(r20)
    4200:	8021d43a 	srai	r16,r16,16
    4204:	a5000104 	addi	r20,r20,4
    4208:	e47fe32e 	bgeu	fp,r17,4198 <__alt_data_end+0xfffd4198>
    420c:	d8c00317 	ldw	r3,12(sp)
    4210:	18800017 	ldw	r2,0(r3)
    4214:	10000c1e 	bne	r2,zero,4248 <quorem+0x13c>
    4218:	18bfff04 	addi	r2,r3,-4
    421c:	9880082e 	bgeu	r19,r2,4240 <quorem+0x134>
    4220:	18ffff17 	ldw	r3,-4(r3)
    4224:	18000326 	beq	r3,zero,4234 <quorem+0x128>
    4228:	00000506 	br	4240 <quorem+0x134>
    422c:	10c00017 	ldw	r3,0(r2)
    4230:	1800031e 	bne	r3,zero,4240 <quorem+0x134>
    4234:	10bfff04 	addi	r2,r2,-4
    4238:	bdffffc4 	addi	r23,r23,-1
    423c:	98bffb36 	bltu	r19,r2,422c <__alt_data_end+0xfffd422c>
    4240:	d8c00017 	ldw	r3,0(sp)
    4244:	1dc00415 	stw	r23,16(r3)
    4248:	d9400217 	ldw	r5,8(sp)
    424c:	d9000017 	ldw	r4,0(sp)
    4250:	00083ec0 	call	83ec <__mcmp>
    4254:	10002816 	blt	r2,zero,42f8 <quorem+0x1ec>
    4258:	dc400117 	ldw	r17,4(sp)
    425c:	94800044 	addi	r18,r18,1
    4260:	980d883a 	mov	r6,r19
    4264:	0007883a 	mov	r3,zero
    4268:	31000017 	ldw	r4,0(r6)
    426c:	89400017 	ldw	r5,0(r17)
    4270:	31800104 	addi	r6,r6,4
    4274:	20bfffcc 	andi	r2,r4,65535
    4278:	10c7883a 	add	r3,r2,r3
    427c:	28bfffcc 	andi	r2,r5,65535
    4280:	1885c83a 	sub	r2,r3,r2
    4284:	280ad43a 	srli	r5,r5,16
    4288:	2008d43a 	srli	r4,r4,16
    428c:	1007d43a 	srai	r3,r2,16
    4290:	10bfffcc 	andi	r2,r2,65535
    4294:	2149c83a 	sub	r4,r4,r5
    4298:	20c9883a 	add	r4,r4,r3
    429c:	200a943a 	slli	r5,r4,16
    42a0:	8c400104 	addi	r17,r17,4
    42a4:	2007d43a 	srai	r3,r4,16
    42a8:	2884b03a 	or	r2,r5,r2
    42ac:	30bfff15 	stw	r2,-4(r6)
    42b0:	e47fed2e 	bgeu	fp,r17,4268 <__alt_data_end+0xfffd4268>
    42b4:	bdc5883a 	add	r2,r23,r23
    42b8:	1085883a 	add	r2,r2,r2
    42bc:	9887883a 	add	r3,r19,r2
    42c0:	18800017 	ldw	r2,0(r3)
    42c4:	10000c1e 	bne	r2,zero,42f8 <quorem+0x1ec>
    42c8:	18bfff04 	addi	r2,r3,-4
    42cc:	9880082e 	bgeu	r19,r2,42f0 <quorem+0x1e4>
    42d0:	18ffff17 	ldw	r3,-4(r3)
    42d4:	18000326 	beq	r3,zero,42e4 <quorem+0x1d8>
    42d8:	00000506 	br	42f0 <quorem+0x1e4>
    42dc:	10c00017 	ldw	r3,0(r2)
    42e0:	1800031e 	bne	r3,zero,42f0 <quorem+0x1e4>
    42e4:	10bfff04 	addi	r2,r2,-4
    42e8:	bdffffc4 	addi	r23,r23,-1
    42ec:	98bffb36 	bltu	r19,r2,42dc <__alt_data_end+0xfffd42dc>
    42f0:	d8c00017 	ldw	r3,0(sp)
    42f4:	1dc00415 	stw	r23,16(r3)
    42f8:	9005883a 	mov	r2,r18
    42fc:	dfc00d17 	ldw	ra,52(sp)
    4300:	df000c17 	ldw	fp,48(sp)
    4304:	ddc00b17 	ldw	r23,44(sp)
    4308:	dd800a17 	ldw	r22,40(sp)
    430c:	dd400917 	ldw	r21,36(sp)
    4310:	dd000817 	ldw	r20,32(sp)
    4314:	dcc00717 	ldw	r19,28(sp)
    4318:	dc800617 	ldw	r18,24(sp)
    431c:	dc400517 	ldw	r17,20(sp)
    4320:	dc000417 	ldw	r16,16(sp)
    4324:	dec00e04 	addi	sp,sp,56
    4328:	f800283a 	ret
    432c:	0005883a 	mov	r2,zero
    4330:	003ff206 	br	42fc <__alt_data_end+0xfffd42fc>

00004334 <_dtoa_r>:
    4334:	20801017 	ldw	r2,64(r4)
    4338:	deffde04 	addi	sp,sp,-136
    433c:	df002015 	stw	fp,128(sp)
    4340:	dcc01b15 	stw	r19,108(sp)
    4344:	dc801a15 	stw	r18,104(sp)
    4348:	dc401915 	stw	r17,100(sp)
    434c:	dc001815 	stw	r16,96(sp)
    4350:	dfc02115 	stw	ra,132(sp)
    4354:	ddc01f15 	stw	r23,124(sp)
    4358:	dd801e15 	stw	r22,120(sp)
    435c:	dd401d15 	stw	r21,116(sp)
    4360:	dd001c15 	stw	r20,112(sp)
    4364:	d9c00315 	stw	r7,12(sp)
    4368:	2039883a 	mov	fp,r4
    436c:	3023883a 	mov	r17,r6
    4370:	2825883a 	mov	r18,r5
    4374:	dc002417 	ldw	r16,144(sp)
    4378:	3027883a 	mov	r19,r6
    437c:	10000826 	beq	r2,zero,43a0 <_dtoa_r+0x6c>
    4380:	21801117 	ldw	r6,68(r4)
    4384:	00c00044 	movi	r3,1
    4388:	100b883a 	mov	r5,r2
    438c:	1986983a 	sll	r3,r3,r6
    4390:	11800115 	stw	r6,4(r2)
    4394:	10c00215 	stw	r3,8(r2)
    4398:	0007b100 	call	7b10 <_Bfree>
    439c:	e0001015 	stw	zero,64(fp)
    43a0:	88002e16 	blt	r17,zero,445c <_dtoa_r+0x128>
    43a4:	80000015 	stw	zero,0(r16)
    43a8:	889ffc2c 	andhi	r2,r17,32752
    43ac:	00dffc34 	movhi	r3,32752
    43b0:	10c01c26 	beq	r2,r3,4424 <_dtoa_r+0xf0>
    43b4:	000d883a 	mov	r6,zero
    43b8:	000f883a 	mov	r7,zero
    43bc:	9009883a 	mov	r4,r18
    43c0:	980b883a 	mov	r5,r19
    43c4:	000d66c0 	call	d66c <__eqdf2>
    43c8:	10002b1e 	bne	r2,zero,4478 <_dtoa_r+0x144>
    43cc:	d9c02317 	ldw	r7,140(sp)
    43d0:	00800044 	movi	r2,1
    43d4:	38800015 	stw	r2,0(r7)
    43d8:	d8802517 	ldw	r2,148(sp)
    43dc:	10019e26 	beq	r2,zero,4a58 <_dtoa_r+0x724>
    43e0:	d8c02517 	ldw	r3,148(sp)
    43e4:	008000b4 	movhi	r2,2
    43e8:	10a58444 	addi	r2,r2,-27119
    43ec:	18800015 	stw	r2,0(r3)
    43f0:	10bfffc4 	addi	r2,r2,-1
    43f4:	dfc02117 	ldw	ra,132(sp)
    43f8:	df002017 	ldw	fp,128(sp)
    43fc:	ddc01f17 	ldw	r23,124(sp)
    4400:	dd801e17 	ldw	r22,120(sp)
    4404:	dd401d17 	ldw	r21,116(sp)
    4408:	dd001c17 	ldw	r20,112(sp)
    440c:	dcc01b17 	ldw	r19,108(sp)
    4410:	dc801a17 	ldw	r18,104(sp)
    4414:	dc401917 	ldw	r17,100(sp)
    4418:	dc001817 	ldw	r16,96(sp)
    441c:	dec02204 	addi	sp,sp,136
    4420:	f800283a 	ret
    4424:	d8c02317 	ldw	r3,140(sp)
    4428:	0089c3c4 	movi	r2,9999
    442c:	18800015 	stw	r2,0(r3)
    4430:	90017726 	beq	r18,zero,4a10 <_dtoa_r+0x6dc>
    4434:	008000b4 	movhi	r2,2
    4438:	10a59004 	addi	r2,r2,-27072
    443c:	d9002517 	ldw	r4,148(sp)
    4440:	203fec26 	beq	r4,zero,43f4 <__alt_data_end+0xfffd43f4>
    4444:	10c000c7 	ldb	r3,3(r2)
    4448:	1801781e 	bne	r3,zero,4a2c <_dtoa_r+0x6f8>
    444c:	10c000c4 	addi	r3,r2,3
    4450:	d9802517 	ldw	r6,148(sp)
    4454:	30c00015 	stw	r3,0(r6)
    4458:	003fe606 	br	43f4 <__alt_data_end+0xfffd43f4>
    445c:	04e00034 	movhi	r19,32768
    4460:	9cffffc4 	addi	r19,r19,-1
    4464:	00800044 	movi	r2,1
    4468:	8ce6703a 	and	r19,r17,r19
    446c:	80800015 	stw	r2,0(r16)
    4470:	9823883a 	mov	r17,r19
    4474:	003fcc06 	br	43a8 <__alt_data_end+0xfffd43a8>
    4478:	d8800204 	addi	r2,sp,8
    447c:	d8800015 	stw	r2,0(sp)
    4480:	d9c00104 	addi	r7,sp,4
    4484:	900b883a 	mov	r5,r18
    4488:	980d883a 	mov	r6,r19
    448c:	e009883a 	mov	r4,fp
    4490:	8820d53a 	srli	r16,r17,20
    4494:	00087b80 	call	87b8 <__d2b>
    4498:	d8800915 	stw	r2,36(sp)
    449c:	8001651e 	bne	r16,zero,4a34 <_dtoa_r+0x700>
    44a0:	dd800217 	ldw	r22,8(sp)
    44a4:	dc000117 	ldw	r16,4(sp)
    44a8:	00800804 	movi	r2,32
    44ac:	b421883a 	add	r16,r22,r16
    44b0:	80c10c84 	addi	r3,r16,1074
    44b4:	10c2d10e 	bge	r2,r3,4ffc <_dtoa_r+0xcc8>
    44b8:	00801004 	movi	r2,64
    44bc:	81010484 	addi	r4,r16,1042
    44c0:	10c7c83a 	sub	r3,r2,r3
    44c4:	9108d83a 	srl	r4,r18,r4
    44c8:	88e2983a 	sll	r17,r17,r3
    44cc:	2448b03a 	or	r4,r4,r17
    44d0:	000eb880 	call	eb88 <__floatunsidf>
    44d4:	017f8434 	movhi	r5,65040
    44d8:	01800044 	movi	r6,1
    44dc:	1009883a 	mov	r4,r2
    44e0:	194b883a 	add	r5,r3,r5
    44e4:	843fffc4 	addi	r16,r16,-1
    44e8:	d9801115 	stw	r6,68(sp)
    44ec:	000d883a 	mov	r6,zero
    44f0:	01cffe34 	movhi	r7,16376
    44f4:	000e1300 	call	e130 <__subdf3>
    44f8:	0198dbf4 	movhi	r6,25455
    44fc:	01cff4f4 	movhi	r7,16339
    4500:	3190d844 	addi	r6,r6,17249
    4504:	39e1e9c4 	addi	r7,r7,-30809
    4508:	1009883a 	mov	r4,r2
    450c:	180b883a 	mov	r5,r3
    4510:	000d8c40 	call	d8c4 <__muldf3>
    4514:	01a2d874 	movhi	r6,35681
    4518:	01cff1f4 	movhi	r7,16327
    451c:	31b22cc4 	addi	r6,r6,-14157
    4520:	39e28a04 	addi	r7,r7,-30168
    4524:	180b883a 	mov	r5,r3
    4528:	1009883a 	mov	r4,r2
    452c:	000c3f00 	call	c3f0 <__adddf3>
    4530:	8009883a 	mov	r4,r16
    4534:	1029883a 	mov	r20,r2
    4538:	1823883a 	mov	r17,r3
    453c:	000eaac0 	call	eaac <__floatsidf>
    4540:	019427f4 	movhi	r6,20639
    4544:	01cff4f4 	movhi	r7,16339
    4548:	319e7ec4 	addi	r6,r6,31227
    454c:	39d104c4 	addi	r7,r7,17427
    4550:	1009883a 	mov	r4,r2
    4554:	180b883a 	mov	r5,r3
    4558:	000d8c40 	call	d8c4 <__muldf3>
    455c:	100d883a 	mov	r6,r2
    4560:	180f883a 	mov	r7,r3
    4564:	a009883a 	mov	r4,r20
    4568:	880b883a 	mov	r5,r17
    456c:	000c3f00 	call	c3f0 <__adddf3>
    4570:	1009883a 	mov	r4,r2
    4574:	180b883a 	mov	r5,r3
    4578:	1029883a 	mov	r20,r2
    457c:	1823883a 	mov	r17,r3
    4580:	000ea2c0 	call	ea2c <__fixdfsi>
    4584:	000d883a 	mov	r6,zero
    4588:	000f883a 	mov	r7,zero
    458c:	a009883a 	mov	r4,r20
    4590:	880b883a 	mov	r5,r17
    4594:	d8800515 	stw	r2,20(sp)
    4598:	000d7d00 	call	d7d0 <__ledf2>
    459c:	10028716 	blt	r2,zero,4fbc <_dtoa_r+0xc88>
    45a0:	d8c00517 	ldw	r3,20(sp)
    45a4:	00800584 	movi	r2,22
    45a8:	10c27536 	bltu	r2,r3,4f80 <_dtoa_r+0xc4c>
    45ac:	180490fa 	slli	r2,r3,3
    45b0:	00c000b4 	movhi	r3,2
    45b4:	18e5ab04 	addi	r3,r3,-26964
    45b8:	1885883a 	add	r2,r3,r2
    45bc:	11000017 	ldw	r4,0(r2)
    45c0:	11400117 	ldw	r5,4(r2)
    45c4:	900d883a 	mov	r6,r18
    45c8:	980f883a 	mov	r7,r19
    45cc:	000d6f40 	call	d6f4 <__gedf2>
    45d0:	00828d0e 	bge	zero,r2,5008 <_dtoa_r+0xcd4>
    45d4:	d9000517 	ldw	r4,20(sp)
    45d8:	d8000e15 	stw	zero,56(sp)
    45dc:	213fffc4 	addi	r4,r4,-1
    45e0:	d9000515 	stw	r4,20(sp)
    45e4:	b42dc83a 	sub	r22,r22,r16
    45e8:	b5bfffc4 	addi	r22,r22,-1
    45ec:	b0026f16 	blt	r22,zero,4fac <_dtoa_r+0xc78>
    45f0:	d8000815 	stw	zero,32(sp)
    45f4:	d9c00517 	ldw	r7,20(sp)
    45f8:	38026416 	blt	r7,zero,4f8c <_dtoa_r+0xc58>
    45fc:	b1ed883a 	add	r22,r22,r7
    4600:	d9c00d15 	stw	r7,52(sp)
    4604:	d8000a15 	stw	zero,40(sp)
    4608:	d9800317 	ldw	r6,12(sp)
    460c:	00800244 	movi	r2,9
    4610:	11811436 	bltu	r2,r6,4a64 <_dtoa_r+0x730>
    4614:	00800144 	movi	r2,5
    4618:	1184e10e 	bge	r2,r6,59a0 <_dtoa_r+0x166c>
    461c:	31bfff04 	addi	r6,r6,-4
    4620:	d9800315 	stw	r6,12(sp)
    4624:	0023883a 	mov	r17,zero
    4628:	d9800317 	ldw	r6,12(sp)
    462c:	008000c4 	movi	r2,3
    4630:	30836726 	beq	r6,r2,53d0 <_dtoa_r+0x109c>
    4634:	1183410e 	bge	r2,r6,533c <_dtoa_r+0x1008>
    4638:	d9c00317 	ldw	r7,12(sp)
    463c:	00800104 	movi	r2,4
    4640:	38827c26 	beq	r7,r2,5034 <_dtoa_r+0xd00>
    4644:	00800144 	movi	r2,5
    4648:	3884c41e 	bne	r7,r2,595c <_dtoa_r+0x1628>
    464c:	00800044 	movi	r2,1
    4650:	d8800b15 	stw	r2,44(sp)
    4654:	d8c00517 	ldw	r3,20(sp)
    4658:	d9002217 	ldw	r4,136(sp)
    465c:	1907883a 	add	r3,r3,r4
    4660:	19800044 	addi	r6,r3,1
    4664:	d8c00c15 	stw	r3,48(sp)
    4668:	d9800615 	stw	r6,24(sp)
    466c:	0183a40e 	bge	zero,r6,5500 <_dtoa_r+0x11cc>
    4670:	d9800617 	ldw	r6,24(sp)
    4674:	3021883a 	mov	r16,r6
    4678:	e0001115 	stw	zero,68(fp)
    467c:	008005c4 	movi	r2,23
    4680:	1184c92e 	bgeu	r2,r6,59a8 <_dtoa_r+0x1674>
    4684:	00c00044 	movi	r3,1
    4688:	00800104 	movi	r2,4
    468c:	1085883a 	add	r2,r2,r2
    4690:	11000504 	addi	r4,r2,20
    4694:	180b883a 	mov	r5,r3
    4698:	18c00044 	addi	r3,r3,1
    469c:	313ffb2e 	bgeu	r6,r4,468c <__alt_data_end+0xfffd468c>
    46a0:	e1401115 	stw	r5,68(fp)
    46a4:	e009883a 	mov	r4,fp
    46a8:	0007a680 	call	7a68 <_Balloc>
    46ac:	d8800715 	stw	r2,28(sp)
    46b0:	e0801015 	stw	r2,64(fp)
    46b4:	00800384 	movi	r2,14
    46b8:	1400f736 	bltu	r2,r16,4a98 <_dtoa_r+0x764>
    46bc:	8800f626 	beq	r17,zero,4a98 <_dtoa_r+0x764>
    46c0:	d9c00517 	ldw	r7,20(sp)
    46c4:	01c39a0e 	bge	zero,r7,5530 <_dtoa_r+0x11fc>
    46c8:	388003cc 	andi	r2,r7,15
    46cc:	100490fa 	slli	r2,r2,3
    46d0:	382bd13a 	srai	r21,r7,4
    46d4:	00c000b4 	movhi	r3,2
    46d8:	18e5ab04 	addi	r3,r3,-26964
    46dc:	1885883a 	add	r2,r3,r2
    46e0:	a8c0040c 	andi	r3,r21,16
    46e4:	12400017 	ldw	r9,0(r2)
    46e8:	12000117 	ldw	r8,4(r2)
    46ec:	18037926 	beq	r3,zero,54d4 <_dtoa_r+0x11a0>
    46f0:	008000b4 	movhi	r2,2
    46f4:	10a5a104 	addi	r2,r2,-27004
    46f8:	11800817 	ldw	r6,32(r2)
    46fc:	11c00917 	ldw	r7,36(r2)
    4700:	9009883a 	mov	r4,r18
    4704:	980b883a 	mov	r5,r19
    4708:	da001715 	stw	r8,92(sp)
    470c:	da401615 	stw	r9,88(sp)
    4710:	000cc9c0 	call	cc9c <__divdf3>
    4714:	da001717 	ldw	r8,92(sp)
    4718:	da401617 	ldw	r9,88(sp)
    471c:	ad4003cc 	andi	r21,r21,15
    4720:	040000c4 	movi	r16,3
    4724:	1023883a 	mov	r17,r2
    4728:	1829883a 	mov	r20,r3
    472c:	a8001126 	beq	r21,zero,4774 <_dtoa_r+0x440>
    4730:	05c000b4 	movhi	r23,2
    4734:	bde5a104 	addi	r23,r23,-27004
    4738:	4805883a 	mov	r2,r9
    473c:	4007883a 	mov	r3,r8
    4740:	a980004c 	andi	r6,r21,1
    4744:	1009883a 	mov	r4,r2
    4748:	a82bd07a 	srai	r21,r21,1
    474c:	180b883a 	mov	r5,r3
    4750:	30000426 	beq	r6,zero,4764 <_dtoa_r+0x430>
    4754:	b9800017 	ldw	r6,0(r23)
    4758:	b9c00117 	ldw	r7,4(r23)
    475c:	84000044 	addi	r16,r16,1
    4760:	000d8c40 	call	d8c4 <__muldf3>
    4764:	bdc00204 	addi	r23,r23,8
    4768:	a83ff51e 	bne	r21,zero,4740 <__alt_data_end+0xfffd4740>
    476c:	1013883a 	mov	r9,r2
    4770:	1811883a 	mov	r8,r3
    4774:	480d883a 	mov	r6,r9
    4778:	400f883a 	mov	r7,r8
    477c:	8809883a 	mov	r4,r17
    4780:	a00b883a 	mov	r5,r20
    4784:	000cc9c0 	call	cc9c <__divdf3>
    4788:	d8800f15 	stw	r2,60(sp)
    478c:	d8c01015 	stw	r3,64(sp)
    4790:	d8c00e17 	ldw	r3,56(sp)
    4794:	18000626 	beq	r3,zero,47b0 <_dtoa_r+0x47c>
    4798:	d9000f17 	ldw	r4,60(sp)
    479c:	d9401017 	ldw	r5,64(sp)
    47a0:	000d883a 	mov	r6,zero
    47a4:	01cffc34 	movhi	r7,16368
    47a8:	000d7d00 	call	d7d0 <__ledf2>
    47ac:	10040b16 	blt	r2,zero,57dc <_dtoa_r+0x14a8>
    47b0:	8009883a 	mov	r4,r16
    47b4:	000eaac0 	call	eaac <__floatsidf>
    47b8:	d9800f17 	ldw	r6,60(sp)
    47bc:	d9c01017 	ldw	r7,64(sp)
    47c0:	1009883a 	mov	r4,r2
    47c4:	180b883a 	mov	r5,r3
    47c8:	000d8c40 	call	d8c4 <__muldf3>
    47cc:	000d883a 	mov	r6,zero
    47d0:	01d00734 	movhi	r7,16412
    47d4:	1009883a 	mov	r4,r2
    47d8:	180b883a 	mov	r5,r3
    47dc:	000c3f00 	call	c3f0 <__adddf3>
    47e0:	1021883a 	mov	r16,r2
    47e4:	d8800617 	ldw	r2,24(sp)
    47e8:	047f3034 	movhi	r17,64704
    47ec:	1c63883a 	add	r17,r3,r17
    47f0:	10031826 	beq	r2,zero,5454 <_dtoa_r+0x1120>
    47f4:	d8c00517 	ldw	r3,20(sp)
    47f8:	db000617 	ldw	r12,24(sp)
    47fc:	d8c01315 	stw	r3,76(sp)
    4800:	d9000b17 	ldw	r4,44(sp)
    4804:	20038f26 	beq	r4,zero,5644 <_dtoa_r+0x1310>
    4808:	60bfffc4 	addi	r2,r12,-1
    480c:	100490fa 	slli	r2,r2,3
    4810:	00c000b4 	movhi	r3,2
    4814:	18e5ab04 	addi	r3,r3,-26964
    4818:	1885883a 	add	r2,r3,r2
    481c:	11800017 	ldw	r6,0(r2)
    4820:	11c00117 	ldw	r7,4(r2)
    4824:	d8800717 	ldw	r2,28(sp)
    4828:	0009883a 	mov	r4,zero
    482c:	014ff834 	movhi	r5,16352
    4830:	db001615 	stw	r12,88(sp)
    4834:	15c00044 	addi	r23,r2,1
    4838:	000cc9c0 	call	cc9c <__divdf3>
    483c:	800d883a 	mov	r6,r16
    4840:	880f883a 	mov	r7,r17
    4844:	1009883a 	mov	r4,r2
    4848:	180b883a 	mov	r5,r3
    484c:	000e1300 	call	e130 <__subdf3>
    4850:	d9401017 	ldw	r5,64(sp)
    4854:	d9000f17 	ldw	r4,60(sp)
    4858:	102b883a 	mov	r21,r2
    485c:	d8c01215 	stw	r3,72(sp)
    4860:	000ea2c0 	call	ea2c <__fixdfsi>
    4864:	1009883a 	mov	r4,r2
    4868:	1029883a 	mov	r20,r2
    486c:	000eaac0 	call	eaac <__floatsidf>
    4870:	d9000f17 	ldw	r4,60(sp)
    4874:	d9401017 	ldw	r5,64(sp)
    4878:	100d883a 	mov	r6,r2
    487c:	180f883a 	mov	r7,r3
    4880:	000e1300 	call	e130 <__subdf3>
    4884:	1823883a 	mov	r17,r3
    4888:	d8c00717 	ldw	r3,28(sp)
    488c:	d9401217 	ldw	r5,72(sp)
    4890:	a2000c04 	addi	r8,r20,48
    4894:	1021883a 	mov	r16,r2
    4898:	1a000005 	stb	r8,0(r3)
    489c:	800d883a 	mov	r6,r16
    48a0:	880f883a 	mov	r7,r17
    48a4:	a809883a 	mov	r4,r21
    48a8:	4029883a 	mov	r20,r8
    48ac:	000d6f40 	call	d6f4 <__gedf2>
    48b0:	00841d16 	blt	zero,r2,5928 <_dtoa_r+0x15f4>
    48b4:	800d883a 	mov	r6,r16
    48b8:	880f883a 	mov	r7,r17
    48bc:	0009883a 	mov	r4,zero
    48c0:	014ffc34 	movhi	r5,16368
    48c4:	000e1300 	call	e130 <__subdf3>
    48c8:	d9401217 	ldw	r5,72(sp)
    48cc:	100d883a 	mov	r6,r2
    48d0:	180f883a 	mov	r7,r3
    48d4:	a809883a 	mov	r4,r21
    48d8:	000d6f40 	call	d6f4 <__gedf2>
    48dc:	db001617 	ldw	r12,88(sp)
    48e0:	00840e16 	blt	zero,r2,591c <_dtoa_r+0x15e8>
    48e4:	00800044 	movi	r2,1
    48e8:	13006b0e 	bge	r2,r12,4a98 <_dtoa_r+0x764>
    48ec:	d9000717 	ldw	r4,28(sp)
    48f0:	dd800f15 	stw	r22,60(sp)
    48f4:	dcc01015 	stw	r19,64(sp)
    48f8:	2319883a 	add	r12,r4,r12
    48fc:	dcc01217 	ldw	r19,72(sp)
    4900:	602d883a 	mov	r22,r12
    4904:	dc801215 	stw	r18,72(sp)
    4908:	b825883a 	mov	r18,r23
    490c:	00000906 	br	4934 <_dtoa_r+0x600>
    4910:	000e1300 	call	e130 <__subdf3>
    4914:	a80d883a 	mov	r6,r21
    4918:	980f883a 	mov	r7,r19
    491c:	1009883a 	mov	r4,r2
    4920:	180b883a 	mov	r5,r3
    4924:	000d7d00 	call	d7d0 <__ledf2>
    4928:	1003e816 	blt	r2,zero,58cc <_dtoa_r+0x1598>
    492c:	b825883a 	mov	r18,r23
    4930:	bd83e926 	beq	r23,r22,58d8 <_dtoa_r+0x15a4>
    4934:	a809883a 	mov	r4,r21
    4938:	980b883a 	mov	r5,r19
    493c:	000d883a 	mov	r6,zero
    4940:	01d00934 	movhi	r7,16420
    4944:	000d8c40 	call	d8c4 <__muldf3>
    4948:	000d883a 	mov	r6,zero
    494c:	01d00934 	movhi	r7,16420
    4950:	8009883a 	mov	r4,r16
    4954:	880b883a 	mov	r5,r17
    4958:	102b883a 	mov	r21,r2
    495c:	1827883a 	mov	r19,r3
    4960:	000d8c40 	call	d8c4 <__muldf3>
    4964:	180b883a 	mov	r5,r3
    4968:	1009883a 	mov	r4,r2
    496c:	1821883a 	mov	r16,r3
    4970:	1023883a 	mov	r17,r2
    4974:	000ea2c0 	call	ea2c <__fixdfsi>
    4978:	1009883a 	mov	r4,r2
    497c:	1029883a 	mov	r20,r2
    4980:	000eaac0 	call	eaac <__floatsidf>
    4984:	8809883a 	mov	r4,r17
    4988:	800b883a 	mov	r5,r16
    498c:	100d883a 	mov	r6,r2
    4990:	180f883a 	mov	r7,r3
    4994:	000e1300 	call	e130 <__subdf3>
    4998:	a5000c04 	addi	r20,r20,48
    499c:	a80d883a 	mov	r6,r21
    49a0:	980f883a 	mov	r7,r19
    49a4:	1009883a 	mov	r4,r2
    49a8:	180b883a 	mov	r5,r3
    49ac:	95000005 	stb	r20,0(r18)
    49b0:	1021883a 	mov	r16,r2
    49b4:	1823883a 	mov	r17,r3
    49b8:	000d7d00 	call	d7d0 <__ledf2>
    49bc:	bdc00044 	addi	r23,r23,1
    49c0:	800d883a 	mov	r6,r16
    49c4:	880f883a 	mov	r7,r17
    49c8:	0009883a 	mov	r4,zero
    49cc:	014ffc34 	movhi	r5,16368
    49d0:	103fcf0e 	bge	r2,zero,4910 <__alt_data_end+0xfffd4910>
    49d4:	d8c01317 	ldw	r3,76(sp)
    49d8:	d8c00515 	stw	r3,20(sp)
    49dc:	d9400917 	ldw	r5,36(sp)
    49e0:	e009883a 	mov	r4,fp
    49e4:	0007b100 	call	7b10 <_Bfree>
    49e8:	d9000517 	ldw	r4,20(sp)
    49ec:	d9802317 	ldw	r6,140(sp)
    49f0:	d9c02517 	ldw	r7,148(sp)
    49f4:	b8000005 	stb	zero,0(r23)
    49f8:	20800044 	addi	r2,r4,1
    49fc:	30800015 	stw	r2,0(r6)
    4a00:	3802aa26 	beq	r7,zero,54ac <_dtoa_r+0x1178>
    4a04:	3dc00015 	stw	r23,0(r7)
    4a08:	d8800717 	ldw	r2,28(sp)
    4a0c:	003e7906 	br	43f4 <__alt_data_end+0xfffd43f4>
    4a10:	00800434 	movhi	r2,16
    4a14:	10bfffc4 	addi	r2,r2,-1
    4a18:	88a2703a 	and	r17,r17,r2
    4a1c:	883e851e 	bne	r17,zero,4434 <__alt_data_end+0xfffd4434>
    4a20:	008000b4 	movhi	r2,2
    4a24:	10a58d04 	addi	r2,r2,-27084
    4a28:	003e8406 	br	443c <__alt_data_end+0xfffd443c>
    4a2c:	10c00204 	addi	r3,r2,8
    4a30:	003e8706 	br	4450 <__alt_data_end+0xfffd4450>
    4a34:	01400434 	movhi	r5,16
    4a38:	297fffc4 	addi	r5,r5,-1
    4a3c:	994a703a 	and	r5,r19,r5
    4a40:	9009883a 	mov	r4,r18
    4a44:	843f0044 	addi	r16,r16,-1023
    4a48:	294ffc34 	orhi	r5,r5,16368
    4a4c:	dd800217 	ldw	r22,8(sp)
    4a50:	d8001115 	stw	zero,68(sp)
    4a54:	003ea506 	br	44ec <__alt_data_end+0xfffd44ec>
    4a58:	008000b4 	movhi	r2,2
    4a5c:	10a58404 	addi	r2,r2,-27120
    4a60:	003e6406 	br	43f4 <__alt_data_end+0xfffd43f4>
    4a64:	e0001115 	stw	zero,68(fp)
    4a68:	000b883a 	mov	r5,zero
    4a6c:	e009883a 	mov	r4,fp
    4a70:	0007a680 	call	7a68 <_Balloc>
    4a74:	01bfffc4 	movi	r6,-1
    4a78:	01c00044 	movi	r7,1
    4a7c:	d8800715 	stw	r2,28(sp)
    4a80:	d9800c15 	stw	r6,48(sp)
    4a84:	e0801015 	stw	r2,64(fp)
    4a88:	d8000315 	stw	zero,12(sp)
    4a8c:	d9c00b15 	stw	r7,44(sp)
    4a90:	d9800615 	stw	r6,24(sp)
    4a94:	d8002215 	stw	zero,136(sp)
    4a98:	d8800117 	ldw	r2,4(sp)
    4a9c:	10008916 	blt	r2,zero,4cc4 <_dtoa_r+0x990>
    4aa0:	d9000517 	ldw	r4,20(sp)
    4aa4:	00c00384 	movi	r3,14
    4aa8:	19008616 	blt	r3,r4,4cc4 <_dtoa_r+0x990>
    4aac:	200490fa 	slli	r2,r4,3
    4ab0:	00c000b4 	movhi	r3,2
    4ab4:	d9802217 	ldw	r6,136(sp)
    4ab8:	18e5ab04 	addi	r3,r3,-26964
    4abc:	1885883a 	add	r2,r3,r2
    4ac0:	14000017 	ldw	r16,0(r2)
    4ac4:	14400117 	ldw	r17,4(r2)
    4ac8:	30016316 	blt	r6,zero,5058 <_dtoa_r+0xd24>
    4acc:	800d883a 	mov	r6,r16
    4ad0:	880f883a 	mov	r7,r17
    4ad4:	9009883a 	mov	r4,r18
    4ad8:	980b883a 	mov	r5,r19
    4adc:	000cc9c0 	call	cc9c <__divdf3>
    4ae0:	180b883a 	mov	r5,r3
    4ae4:	1009883a 	mov	r4,r2
    4ae8:	000ea2c0 	call	ea2c <__fixdfsi>
    4aec:	1009883a 	mov	r4,r2
    4af0:	102b883a 	mov	r21,r2
    4af4:	000eaac0 	call	eaac <__floatsidf>
    4af8:	800d883a 	mov	r6,r16
    4afc:	880f883a 	mov	r7,r17
    4b00:	1009883a 	mov	r4,r2
    4b04:	180b883a 	mov	r5,r3
    4b08:	000d8c40 	call	d8c4 <__muldf3>
    4b0c:	100d883a 	mov	r6,r2
    4b10:	180f883a 	mov	r7,r3
    4b14:	9009883a 	mov	r4,r18
    4b18:	980b883a 	mov	r5,r19
    4b1c:	000e1300 	call	e130 <__subdf3>
    4b20:	d9c00717 	ldw	r7,28(sp)
    4b24:	1009883a 	mov	r4,r2
    4b28:	a8800c04 	addi	r2,r21,48
    4b2c:	38800005 	stb	r2,0(r7)
    4b30:	3dc00044 	addi	r23,r7,1
    4b34:	d9c00617 	ldw	r7,24(sp)
    4b38:	01800044 	movi	r6,1
    4b3c:	180b883a 	mov	r5,r3
    4b40:	2005883a 	mov	r2,r4
    4b44:	39803826 	beq	r7,r6,4c28 <_dtoa_r+0x8f4>
    4b48:	000d883a 	mov	r6,zero
    4b4c:	01d00934 	movhi	r7,16420
    4b50:	000d8c40 	call	d8c4 <__muldf3>
    4b54:	000d883a 	mov	r6,zero
    4b58:	000f883a 	mov	r7,zero
    4b5c:	1009883a 	mov	r4,r2
    4b60:	180b883a 	mov	r5,r3
    4b64:	1025883a 	mov	r18,r2
    4b68:	1827883a 	mov	r19,r3
    4b6c:	000d66c0 	call	d66c <__eqdf2>
    4b70:	103f9a26 	beq	r2,zero,49dc <__alt_data_end+0xfffd49dc>
    4b74:	d9c00617 	ldw	r7,24(sp)
    4b78:	d8c00717 	ldw	r3,28(sp)
    4b7c:	b829883a 	mov	r20,r23
    4b80:	38bfffc4 	addi	r2,r7,-1
    4b84:	18ad883a 	add	r22,r3,r2
    4b88:	00000a06 	br	4bb4 <_dtoa_r+0x880>
    4b8c:	000d8c40 	call	d8c4 <__muldf3>
    4b90:	000d883a 	mov	r6,zero
    4b94:	000f883a 	mov	r7,zero
    4b98:	1009883a 	mov	r4,r2
    4b9c:	180b883a 	mov	r5,r3
    4ba0:	1025883a 	mov	r18,r2
    4ba4:	1827883a 	mov	r19,r3
    4ba8:	b829883a 	mov	r20,r23
    4bac:	000d66c0 	call	d66c <__eqdf2>
    4bb0:	103f8a26 	beq	r2,zero,49dc <__alt_data_end+0xfffd49dc>
    4bb4:	800d883a 	mov	r6,r16
    4bb8:	880f883a 	mov	r7,r17
    4bbc:	9009883a 	mov	r4,r18
    4bc0:	980b883a 	mov	r5,r19
    4bc4:	000cc9c0 	call	cc9c <__divdf3>
    4bc8:	180b883a 	mov	r5,r3
    4bcc:	1009883a 	mov	r4,r2
    4bd0:	000ea2c0 	call	ea2c <__fixdfsi>
    4bd4:	1009883a 	mov	r4,r2
    4bd8:	102b883a 	mov	r21,r2
    4bdc:	000eaac0 	call	eaac <__floatsidf>
    4be0:	800d883a 	mov	r6,r16
    4be4:	880f883a 	mov	r7,r17
    4be8:	1009883a 	mov	r4,r2
    4bec:	180b883a 	mov	r5,r3
    4bf0:	000d8c40 	call	d8c4 <__muldf3>
    4bf4:	100d883a 	mov	r6,r2
    4bf8:	180f883a 	mov	r7,r3
    4bfc:	9009883a 	mov	r4,r18
    4c00:	980b883a 	mov	r5,r19
    4c04:	000e1300 	call	e130 <__subdf3>
    4c08:	aa000c04 	addi	r8,r21,48
    4c0c:	a2000005 	stb	r8,0(r20)
    4c10:	000d883a 	mov	r6,zero
    4c14:	01d00934 	movhi	r7,16420
    4c18:	1009883a 	mov	r4,r2
    4c1c:	180b883a 	mov	r5,r3
    4c20:	a5c00044 	addi	r23,r20,1
    4c24:	b53fd91e 	bne	r22,r20,4b8c <__alt_data_end+0xfffd4b8c>
    4c28:	100d883a 	mov	r6,r2
    4c2c:	180f883a 	mov	r7,r3
    4c30:	1009883a 	mov	r4,r2
    4c34:	180b883a 	mov	r5,r3
    4c38:	000c3f00 	call	c3f0 <__adddf3>
    4c3c:	100d883a 	mov	r6,r2
    4c40:	180f883a 	mov	r7,r3
    4c44:	8009883a 	mov	r4,r16
    4c48:	880b883a 	mov	r5,r17
    4c4c:	1027883a 	mov	r19,r2
    4c50:	1825883a 	mov	r18,r3
    4c54:	000d7d00 	call	d7d0 <__ledf2>
    4c58:	10000816 	blt	r2,zero,4c7c <_dtoa_r+0x948>
    4c5c:	980d883a 	mov	r6,r19
    4c60:	900f883a 	mov	r7,r18
    4c64:	8009883a 	mov	r4,r16
    4c68:	880b883a 	mov	r5,r17
    4c6c:	000d66c0 	call	d66c <__eqdf2>
    4c70:	103f5a1e 	bne	r2,zero,49dc <__alt_data_end+0xfffd49dc>
    4c74:	ad40004c 	andi	r21,r21,1
    4c78:	a83f5826 	beq	r21,zero,49dc <__alt_data_end+0xfffd49dc>
    4c7c:	bd3fffc3 	ldbu	r20,-1(r23)
    4c80:	b8bfffc4 	addi	r2,r23,-1
    4c84:	1007883a 	mov	r3,r2
    4c88:	01400e44 	movi	r5,57
    4c8c:	d9800717 	ldw	r6,28(sp)
    4c90:	00000506 	br	4ca8 <_dtoa_r+0x974>
    4c94:	18ffffc4 	addi	r3,r3,-1
    4c98:	11824726 	beq	r2,r6,55b8 <_dtoa_r+0x1284>
    4c9c:	1d000003 	ldbu	r20,0(r3)
    4ca0:	102f883a 	mov	r23,r2
    4ca4:	10bfffc4 	addi	r2,r2,-1
    4ca8:	a1003fcc 	andi	r4,r20,255
    4cac:	2100201c 	xori	r4,r4,128
    4cb0:	213fe004 	addi	r4,r4,-128
    4cb4:	217ff726 	beq	r4,r5,4c94 <__alt_data_end+0xfffd4c94>
    4cb8:	a2000044 	addi	r8,r20,1
    4cbc:	12000005 	stb	r8,0(r2)
    4cc0:	003f4606 	br	49dc <__alt_data_end+0xfffd49dc>
    4cc4:	d9000b17 	ldw	r4,44(sp)
    4cc8:	2000c826 	beq	r4,zero,4fec <_dtoa_r+0xcb8>
    4ccc:	d9800317 	ldw	r6,12(sp)
    4cd0:	00c00044 	movi	r3,1
    4cd4:	1980f90e 	bge	r3,r6,50bc <_dtoa_r+0xd88>
    4cd8:	d8800617 	ldw	r2,24(sp)
    4cdc:	d8c00a17 	ldw	r3,40(sp)
    4ce0:	157fffc4 	addi	r21,r2,-1
    4ce4:	1d41f316 	blt	r3,r21,54b4 <_dtoa_r+0x1180>
    4ce8:	1d6bc83a 	sub	r21,r3,r21
    4cec:	d9c00617 	ldw	r7,24(sp)
    4cf0:	3802aa16 	blt	r7,zero,579c <_dtoa_r+0x1468>
    4cf4:	dd000817 	ldw	r20,32(sp)
    4cf8:	d8800617 	ldw	r2,24(sp)
    4cfc:	d8c00817 	ldw	r3,32(sp)
    4d00:	01400044 	movi	r5,1
    4d04:	e009883a 	mov	r4,fp
    4d08:	1887883a 	add	r3,r3,r2
    4d0c:	d8c00815 	stw	r3,32(sp)
    4d10:	b0ad883a 	add	r22,r22,r2
    4d14:	0007e9c0 	call	7e9c <__i2b>
    4d18:	1023883a 	mov	r17,r2
    4d1c:	a0000826 	beq	r20,zero,4d40 <_dtoa_r+0xa0c>
    4d20:	0580070e 	bge	zero,r22,4d40 <_dtoa_r+0xa0c>
    4d24:	a005883a 	mov	r2,r20
    4d28:	b500b916 	blt	r22,r20,5010 <_dtoa_r+0xcdc>
    4d2c:	d9000817 	ldw	r4,32(sp)
    4d30:	a0a9c83a 	sub	r20,r20,r2
    4d34:	b0adc83a 	sub	r22,r22,r2
    4d38:	2089c83a 	sub	r4,r4,r2
    4d3c:	d9000815 	stw	r4,32(sp)
    4d40:	d9800a17 	ldw	r6,40(sp)
    4d44:	0181810e 	bge	zero,r6,534c <_dtoa_r+0x1018>
    4d48:	d9c00b17 	ldw	r7,44(sp)
    4d4c:	3800b326 	beq	r7,zero,501c <_dtoa_r+0xce8>
    4d50:	a800b226 	beq	r21,zero,501c <_dtoa_r+0xce8>
    4d54:	880b883a 	mov	r5,r17
    4d58:	a80d883a 	mov	r6,r21
    4d5c:	e009883a 	mov	r4,fp
    4d60:	00081640 	call	8164 <__pow5mult>
    4d64:	d9800917 	ldw	r6,36(sp)
    4d68:	100b883a 	mov	r5,r2
    4d6c:	e009883a 	mov	r4,fp
    4d70:	1023883a 	mov	r17,r2
    4d74:	0007ed80 	call	7ed8 <__multiply>
    4d78:	1021883a 	mov	r16,r2
    4d7c:	d8800a17 	ldw	r2,40(sp)
    4d80:	d9400917 	ldw	r5,36(sp)
    4d84:	e009883a 	mov	r4,fp
    4d88:	1545c83a 	sub	r2,r2,r21
    4d8c:	d8800a15 	stw	r2,40(sp)
    4d90:	0007b100 	call	7b10 <_Bfree>
    4d94:	d8c00a17 	ldw	r3,40(sp)
    4d98:	18009f1e 	bne	r3,zero,5018 <_dtoa_r+0xce4>
    4d9c:	05c00044 	movi	r23,1
    4da0:	e009883a 	mov	r4,fp
    4da4:	b80b883a 	mov	r5,r23
    4da8:	0007e9c0 	call	7e9c <__i2b>
    4dac:	d9000d17 	ldw	r4,52(sp)
    4db0:	102b883a 	mov	r21,r2
    4db4:	2000ce26 	beq	r4,zero,50f0 <_dtoa_r+0xdbc>
    4db8:	200d883a 	mov	r6,r4
    4dbc:	100b883a 	mov	r5,r2
    4dc0:	e009883a 	mov	r4,fp
    4dc4:	00081640 	call	8164 <__pow5mult>
    4dc8:	d9800317 	ldw	r6,12(sp)
    4dcc:	102b883a 	mov	r21,r2
    4dd0:	b981810e 	bge	r23,r6,53d8 <_dtoa_r+0x10a4>
    4dd4:	0027883a 	mov	r19,zero
    4dd8:	a8800417 	ldw	r2,16(r21)
    4ddc:	05c00804 	movi	r23,32
    4de0:	10800104 	addi	r2,r2,4
    4de4:	1085883a 	add	r2,r2,r2
    4de8:	1085883a 	add	r2,r2,r2
    4dec:	a885883a 	add	r2,r21,r2
    4df0:	11000017 	ldw	r4,0(r2)
    4df4:	0007d840 	call	7d84 <__hi0bits>
    4df8:	b885c83a 	sub	r2,r23,r2
    4dfc:	1585883a 	add	r2,r2,r22
    4e00:	108007cc 	andi	r2,r2,31
    4e04:	1000b326 	beq	r2,zero,50d4 <_dtoa_r+0xda0>
    4e08:	00c00804 	movi	r3,32
    4e0c:	1887c83a 	sub	r3,r3,r2
    4e10:	01000104 	movi	r4,4
    4e14:	20c2cd0e 	bge	r4,r3,594c <_dtoa_r+0x1618>
    4e18:	00c00704 	movi	r3,28
    4e1c:	1885c83a 	sub	r2,r3,r2
    4e20:	d8c00817 	ldw	r3,32(sp)
    4e24:	a0a9883a 	add	r20,r20,r2
    4e28:	b0ad883a 	add	r22,r22,r2
    4e2c:	1887883a 	add	r3,r3,r2
    4e30:	d8c00815 	stw	r3,32(sp)
    4e34:	d9800817 	ldw	r6,32(sp)
    4e38:	0180040e 	bge	zero,r6,4e4c <_dtoa_r+0xb18>
    4e3c:	800b883a 	mov	r5,r16
    4e40:	e009883a 	mov	r4,fp
    4e44:	00082a40 	call	82a4 <__lshift>
    4e48:	1021883a 	mov	r16,r2
    4e4c:	0580050e 	bge	zero,r22,4e64 <_dtoa_r+0xb30>
    4e50:	a80b883a 	mov	r5,r21
    4e54:	b00d883a 	mov	r6,r22
    4e58:	e009883a 	mov	r4,fp
    4e5c:	00082a40 	call	82a4 <__lshift>
    4e60:	102b883a 	mov	r21,r2
    4e64:	d9c00e17 	ldw	r7,56(sp)
    4e68:	3801211e 	bne	r7,zero,52f0 <_dtoa_r+0xfbc>
    4e6c:	d9800617 	ldw	r6,24(sp)
    4e70:	0181380e 	bge	zero,r6,5354 <_dtoa_r+0x1020>
    4e74:	d8c00b17 	ldw	r3,44(sp)
    4e78:	1800ab1e 	bne	r3,zero,5128 <_dtoa_r+0xdf4>
    4e7c:	dc800717 	ldw	r18,28(sp)
    4e80:	dcc00617 	ldw	r19,24(sp)
    4e84:	9029883a 	mov	r20,r18
    4e88:	00000206 	br	4e94 <_dtoa_r+0xb60>
    4e8c:	0007b380 	call	7b38 <__multadd>
    4e90:	1021883a 	mov	r16,r2
    4e94:	a80b883a 	mov	r5,r21
    4e98:	8009883a 	mov	r4,r16
    4e9c:	000410c0 	call	410c <quorem>
    4ea0:	10800c04 	addi	r2,r2,48
    4ea4:	90800005 	stb	r2,0(r18)
    4ea8:	94800044 	addi	r18,r18,1
    4eac:	9507c83a 	sub	r3,r18,r20
    4eb0:	000f883a 	mov	r7,zero
    4eb4:	01800284 	movi	r6,10
    4eb8:	800b883a 	mov	r5,r16
    4ebc:	e009883a 	mov	r4,fp
    4ec0:	1cfff216 	blt	r3,r19,4e8c <__alt_data_end+0xfffd4e8c>
    4ec4:	1011883a 	mov	r8,r2
    4ec8:	d8800617 	ldw	r2,24(sp)
    4ecc:	0082370e 	bge	zero,r2,57ac <_dtoa_r+0x1478>
    4ed0:	d9000717 	ldw	r4,28(sp)
    4ed4:	0025883a 	mov	r18,zero
    4ed8:	20af883a 	add	r23,r4,r2
    4edc:	01800044 	movi	r6,1
    4ee0:	800b883a 	mov	r5,r16
    4ee4:	e009883a 	mov	r4,fp
    4ee8:	da001715 	stw	r8,92(sp)
    4eec:	00082a40 	call	82a4 <__lshift>
    4ef0:	a80b883a 	mov	r5,r21
    4ef4:	1009883a 	mov	r4,r2
    4ef8:	d8800915 	stw	r2,36(sp)
    4efc:	00083ec0 	call	83ec <__mcmp>
    4f00:	da001717 	ldw	r8,92(sp)
    4f04:	0081800e 	bge	zero,r2,5508 <_dtoa_r+0x11d4>
    4f08:	b93fffc3 	ldbu	r4,-1(r23)
    4f0c:	b8bfffc4 	addi	r2,r23,-1
    4f10:	1007883a 	mov	r3,r2
    4f14:	01800e44 	movi	r6,57
    4f18:	d9c00717 	ldw	r7,28(sp)
    4f1c:	00000506 	br	4f34 <_dtoa_r+0xc00>
    4f20:	18ffffc4 	addi	r3,r3,-1
    4f24:	11c12326 	beq	r2,r7,53b4 <_dtoa_r+0x1080>
    4f28:	19000003 	ldbu	r4,0(r3)
    4f2c:	102f883a 	mov	r23,r2
    4f30:	10bfffc4 	addi	r2,r2,-1
    4f34:	21403fcc 	andi	r5,r4,255
    4f38:	2940201c 	xori	r5,r5,128
    4f3c:	297fe004 	addi	r5,r5,-128
    4f40:	29bff726 	beq	r5,r6,4f20 <__alt_data_end+0xfffd4f20>
    4f44:	21000044 	addi	r4,r4,1
    4f48:	11000005 	stb	r4,0(r2)
    4f4c:	a80b883a 	mov	r5,r21
    4f50:	e009883a 	mov	r4,fp
    4f54:	0007b100 	call	7b10 <_Bfree>
    4f58:	883ea026 	beq	r17,zero,49dc <__alt_data_end+0xfffd49dc>
    4f5c:	90000426 	beq	r18,zero,4f70 <_dtoa_r+0xc3c>
    4f60:	94400326 	beq	r18,r17,4f70 <_dtoa_r+0xc3c>
    4f64:	900b883a 	mov	r5,r18
    4f68:	e009883a 	mov	r4,fp
    4f6c:	0007b100 	call	7b10 <_Bfree>
    4f70:	880b883a 	mov	r5,r17
    4f74:	e009883a 	mov	r4,fp
    4f78:	0007b100 	call	7b10 <_Bfree>
    4f7c:	003e9706 	br	49dc <__alt_data_end+0xfffd49dc>
    4f80:	01800044 	movi	r6,1
    4f84:	d9800e15 	stw	r6,56(sp)
    4f88:	003d9606 	br	45e4 <__alt_data_end+0xfffd45e4>
    4f8c:	d8800817 	ldw	r2,32(sp)
    4f90:	d8c00517 	ldw	r3,20(sp)
    4f94:	d8000d15 	stw	zero,52(sp)
    4f98:	10c5c83a 	sub	r2,r2,r3
    4f9c:	00c9c83a 	sub	r4,zero,r3
    4fa0:	d8800815 	stw	r2,32(sp)
    4fa4:	d9000a15 	stw	r4,40(sp)
    4fa8:	003d9706 	br	4608 <__alt_data_end+0xfffd4608>
    4fac:	05adc83a 	sub	r22,zero,r22
    4fb0:	dd800815 	stw	r22,32(sp)
    4fb4:	002d883a 	mov	r22,zero
    4fb8:	003d8e06 	br	45f4 <__alt_data_end+0xfffd45f4>
    4fbc:	d9000517 	ldw	r4,20(sp)
    4fc0:	000eaac0 	call	eaac <__floatsidf>
    4fc4:	100d883a 	mov	r6,r2
    4fc8:	180f883a 	mov	r7,r3
    4fcc:	a009883a 	mov	r4,r20
    4fd0:	880b883a 	mov	r5,r17
    4fd4:	000d66c0 	call	d66c <__eqdf2>
    4fd8:	103d7126 	beq	r2,zero,45a0 <__alt_data_end+0xfffd45a0>
    4fdc:	d9c00517 	ldw	r7,20(sp)
    4fe0:	39ffffc4 	addi	r7,r7,-1
    4fe4:	d9c00515 	stw	r7,20(sp)
    4fe8:	003d6d06 	br	45a0 <__alt_data_end+0xfffd45a0>
    4fec:	dd400a17 	ldw	r21,40(sp)
    4ff0:	dd000817 	ldw	r20,32(sp)
    4ff4:	0023883a 	mov	r17,zero
    4ff8:	003f4806 	br	4d1c <__alt_data_end+0xfffd4d1c>
    4ffc:	10e3c83a 	sub	r17,r2,r3
    5000:	9448983a 	sll	r4,r18,r17
    5004:	003d3206 	br	44d0 <__alt_data_end+0xfffd44d0>
    5008:	d8000e15 	stw	zero,56(sp)
    500c:	003d7506 	br	45e4 <__alt_data_end+0xfffd45e4>
    5010:	b005883a 	mov	r2,r22
    5014:	003f4506 	br	4d2c <__alt_data_end+0xfffd4d2c>
    5018:	dc000915 	stw	r16,36(sp)
    501c:	d9800a17 	ldw	r6,40(sp)
    5020:	d9400917 	ldw	r5,36(sp)
    5024:	e009883a 	mov	r4,fp
    5028:	00081640 	call	8164 <__pow5mult>
    502c:	1021883a 	mov	r16,r2
    5030:	003f5a06 	br	4d9c <__alt_data_end+0xfffd4d9c>
    5034:	01c00044 	movi	r7,1
    5038:	d9c00b15 	stw	r7,44(sp)
    503c:	d8802217 	ldw	r2,136(sp)
    5040:	0081280e 	bge	zero,r2,54e4 <_dtoa_r+0x11b0>
    5044:	100d883a 	mov	r6,r2
    5048:	1021883a 	mov	r16,r2
    504c:	d8800c15 	stw	r2,48(sp)
    5050:	d8800615 	stw	r2,24(sp)
    5054:	003d8806 	br	4678 <__alt_data_end+0xfffd4678>
    5058:	d8800617 	ldw	r2,24(sp)
    505c:	00be9b16 	blt	zero,r2,4acc <__alt_data_end+0xfffd4acc>
    5060:	10010f1e 	bne	r2,zero,54a0 <_dtoa_r+0x116c>
    5064:	880b883a 	mov	r5,r17
    5068:	000d883a 	mov	r6,zero
    506c:	01d00534 	movhi	r7,16404
    5070:	8009883a 	mov	r4,r16
    5074:	000d8c40 	call	d8c4 <__muldf3>
    5078:	900d883a 	mov	r6,r18
    507c:	980f883a 	mov	r7,r19
    5080:	1009883a 	mov	r4,r2
    5084:	180b883a 	mov	r5,r3
    5088:	000d6f40 	call	d6f4 <__gedf2>
    508c:	002b883a 	mov	r21,zero
    5090:	0023883a 	mov	r17,zero
    5094:	1000bf16 	blt	r2,zero,5394 <_dtoa_r+0x1060>
    5098:	d9802217 	ldw	r6,136(sp)
    509c:	ddc00717 	ldw	r23,28(sp)
    50a0:	018c303a 	nor	r6,zero,r6
    50a4:	d9800515 	stw	r6,20(sp)
    50a8:	a80b883a 	mov	r5,r21
    50ac:	e009883a 	mov	r4,fp
    50b0:	0007b100 	call	7b10 <_Bfree>
    50b4:	883e4926 	beq	r17,zero,49dc <__alt_data_end+0xfffd49dc>
    50b8:	003fad06 	br	4f70 <__alt_data_end+0xfffd4f70>
    50bc:	d9c01117 	ldw	r7,68(sp)
    50c0:	3801bc26 	beq	r7,zero,57b4 <_dtoa_r+0x1480>
    50c4:	10810cc4 	addi	r2,r2,1075
    50c8:	dd400a17 	ldw	r21,40(sp)
    50cc:	dd000817 	ldw	r20,32(sp)
    50d0:	003f0a06 	br	4cfc <__alt_data_end+0xfffd4cfc>
    50d4:	00800704 	movi	r2,28
    50d8:	d9000817 	ldw	r4,32(sp)
    50dc:	a0a9883a 	add	r20,r20,r2
    50e0:	b0ad883a 	add	r22,r22,r2
    50e4:	2089883a 	add	r4,r4,r2
    50e8:	d9000815 	stw	r4,32(sp)
    50ec:	003f5106 	br	4e34 <__alt_data_end+0xfffd4e34>
    50f0:	d8c00317 	ldw	r3,12(sp)
    50f4:	b8c1fc0e 	bge	r23,r3,58e8 <_dtoa_r+0x15b4>
    50f8:	0027883a 	mov	r19,zero
    50fc:	b805883a 	mov	r2,r23
    5100:	003f3e06 	br	4dfc <__alt_data_end+0xfffd4dfc>
    5104:	880b883a 	mov	r5,r17
    5108:	e009883a 	mov	r4,fp
    510c:	000f883a 	mov	r7,zero
    5110:	01800284 	movi	r6,10
    5114:	0007b380 	call	7b38 <__multadd>
    5118:	d9000c17 	ldw	r4,48(sp)
    511c:	1023883a 	mov	r17,r2
    5120:	0102040e 	bge	zero,r4,5934 <_dtoa_r+0x1600>
    5124:	d9000615 	stw	r4,24(sp)
    5128:	0500050e 	bge	zero,r20,5140 <_dtoa_r+0xe0c>
    512c:	880b883a 	mov	r5,r17
    5130:	a00d883a 	mov	r6,r20
    5134:	e009883a 	mov	r4,fp
    5138:	00082a40 	call	82a4 <__lshift>
    513c:	1023883a 	mov	r17,r2
    5140:	9801241e 	bne	r19,zero,55d4 <_dtoa_r+0x12a0>
    5144:	8829883a 	mov	r20,r17
    5148:	d9000617 	ldw	r4,24(sp)
    514c:	dcc00717 	ldw	r19,28(sp)
    5150:	9480004c 	andi	r18,r18,1
    5154:	20bfffc4 	addi	r2,r4,-1
    5158:	9885883a 	add	r2,r19,r2
    515c:	d8800415 	stw	r2,16(sp)
    5160:	dc800615 	stw	r18,24(sp)
    5164:	a80b883a 	mov	r5,r21
    5168:	8009883a 	mov	r4,r16
    516c:	000410c0 	call	410c <quorem>
    5170:	880b883a 	mov	r5,r17
    5174:	8009883a 	mov	r4,r16
    5178:	102f883a 	mov	r23,r2
    517c:	00083ec0 	call	83ec <__mcmp>
    5180:	a80b883a 	mov	r5,r21
    5184:	a00d883a 	mov	r6,r20
    5188:	e009883a 	mov	r4,fp
    518c:	102d883a 	mov	r22,r2
    5190:	000844c0 	call	844c <__mdiff>
    5194:	1007883a 	mov	r3,r2
    5198:	10800317 	ldw	r2,12(r2)
    519c:	bc800c04 	addi	r18,r23,48
    51a0:	180b883a 	mov	r5,r3
    51a4:	10004e1e 	bne	r2,zero,52e0 <_dtoa_r+0xfac>
    51a8:	8009883a 	mov	r4,r16
    51ac:	d8c01615 	stw	r3,88(sp)
    51b0:	00083ec0 	call	83ec <__mcmp>
    51b4:	d8c01617 	ldw	r3,88(sp)
    51b8:	e009883a 	mov	r4,fp
    51bc:	d8801615 	stw	r2,88(sp)
    51c0:	180b883a 	mov	r5,r3
    51c4:	0007b100 	call	7b10 <_Bfree>
    51c8:	d8801617 	ldw	r2,88(sp)
    51cc:	1000041e 	bne	r2,zero,51e0 <_dtoa_r+0xeac>
    51d0:	d9800317 	ldw	r6,12(sp)
    51d4:	3000021e 	bne	r6,zero,51e0 <_dtoa_r+0xeac>
    51d8:	d8c00617 	ldw	r3,24(sp)
    51dc:	18003726 	beq	r3,zero,52bc <_dtoa_r+0xf88>
    51e0:	b0002016 	blt	r22,zero,5264 <_dtoa_r+0xf30>
    51e4:	b000041e 	bne	r22,zero,51f8 <_dtoa_r+0xec4>
    51e8:	d9000317 	ldw	r4,12(sp)
    51ec:	2000021e 	bne	r4,zero,51f8 <_dtoa_r+0xec4>
    51f0:	d8c00617 	ldw	r3,24(sp)
    51f4:	18001b26 	beq	r3,zero,5264 <_dtoa_r+0xf30>
    51f8:	00810716 	blt	zero,r2,5618 <_dtoa_r+0x12e4>
    51fc:	d8c00417 	ldw	r3,16(sp)
    5200:	9d800044 	addi	r22,r19,1
    5204:	9c800005 	stb	r18,0(r19)
    5208:	b02f883a 	mov	r23,r22
    520c:	98c10626 	beq	r19,r3,5628 <_dtoa_r+0x12f4>
    5210:	800b883a 	mov	r5,r16
    5214:	000f883a 	mov	r7,zero
    5218:	01800284 	movi	r6,10
    521c:	e009883a 	mov	r4,fp
    5220:	0007b380 	call	7b38 <__multadd>
    5224:	1021883a 	mov	r16,r2
    5228:	000f883a 	mov	r7,zero
    522c:	01800284 	movi	r6,10
    5230:	880b883a 	mov	r5,r17
    5234:	e009883a 	mov	r4,fp
    5238:	8d002526 	beq	r17,r20,52d0 <_dtoa_r+0xf9c>
    523c:	0007b380 	call	7b38 <__multadd>
    5240:	a00b883a 	mov	r5,r20
    5244:	000f883a 	mov	r7,zero
    5248:	01800284 	movi	r6,10
    524c:	e009883a 	mov	r4,fp
    5250:	1023883a 	mov	r17,r2
    5254:	0007b380 	call	7b38 <__multadd>
    5258:	1029883a 	mov	r20,r2
    525c:	b027883a 	mov	r19,r22
    5260:	003fc006 	br	5164 <__alt_data_end+0xfffd5164>
    5264:	9011883a 	mov	r8,r18
    5268:	00800e0e 	bge	zero,r2,52a4 <_dtoa_r+0xf70>
    526c:	800b883a 	mov	r5,r16
    5270:	01800044 	movi	r6,1
    5274:	e009883a 	mov	r4,fp
    5278:	da001715 	stw	r8,92(sp)
    527c:	00082a40 	call	82a4 <__lshift>
    5280:	a80b883a 	mov	r5,r21
    5284:	1009883a 	mov	r4,r2
    5288:	1021883a 	mov	r16,r2
    528c:	00083ec0 	call	83ec <__mcmp>
    5290:	da001717 	ldw	r8,92(sp)
    5294:	0081960e 	bge	zero,r2,58f0 <_dtoa_r+0x15bc>
    5298:	00800e44 	movi	r2,57
    529c:	40817026 	beq	r8,r2,5860 <_dtoa_r+0x152c>
    52a0:	ba000c44 	addi	r8,r23,49
    52a4:	8825883a 	mov	r18,r17
    52a8:	9dc00044 	addi	r23,r19,1
    52ac:	9a000005 	stb	r8,0(r19)
    52b0:	a023883a 	mov	r17,r20
    52b4:	dc000915 	stw	r16,36(sp)
    52b8:	003f2406 	br	4f4c <__alt_data_end+0xfffd4f4c>
    52bc:	00800e44 	movi	r2,57
    52c0:	9011883a 	mov	r8,r18
    52c4:	90816626 	beq	r18,r2,5860 <_dtoa_r+0x152c>
    52c8:	05bff516 	blt	zero,r22,52a0 <__alt_data_end+0xfffd52a0>
    52cc:	003ff506 	br	52a4 <__alt_data_end+0xfffd52a4>
    52d0:	0007b380 	call	7b38 <__multadd>
    52d4:	1023883a 	mov	r17,r2
    52d8:	1029883a 	mov	r20,r2
    52dc:	003fdf06 	br	525c <__alt_data_end+0xfffd525c>
    52e0:	e009883a 	mov	r4,fp
    52e4:	0007b100 	call	7b10 <_Bfree>
    52e8:	00800044 	movi	r2,1
    52ec:	003fbc06 	br	51e0 <__alt_data_end+0xfffd51e0>
    52f0:	a80b883a 	mov	r5,r21
    52f4:	8009883a 	mov	r4,r16
    52f8:	00083ec0 	call	83ec <__mcmp>
    52fc:	103edb0e 	bge	r2,zero,4e6c <__alt_data_end+0xfffd4e6c>
    5300:	800b883a 	mov	r5,r16
    5304:	000f883a 	mov	r7,zero
    5308:	01800284 	movi	r6,10
    530c:	e009883a 	mov	r4,fp
    5310:	0007b380 	call	7b38 <__multadd>
    5314:	1021883a 	mov	r16,r2
    5318:	d8800517 	ldw	r2,20(sp)
    531c:	d8c00b17 	ldw	r3,44(sp)
    5320:	10bfffc4 	addi	r2,r2,-1
    5324:	d8800515 	stw	r2,20(sp)
    5328:	183f761e 	bne	r3,zero,5104 <__alt_data_end+0xfffd5104>
    532c:	d9000c17 	ldw	r4,48(sp)
    5330:	0101730e 	bge	zero,r4,5900 <_dtoa_r+0x15cc>
    5334:	d9000615 	stw	r4,24(sp)
    5338:	003ed006 	br	4e7c <__alt_data_end+0xfffd4e7c>
    533c:	00800084 	movi	r2,2
    5340:	3081861e 	bne	r6,r2,595c <_dtoa_r+0x1628>
    5344:	d8000b15 	stw	zero,44(sp)
    5348:	003f3c06 	br	503c <__alt_data_end+0xfffd503c>
    534c:	dc000917 	ldw	r16,36(sp)
    5350:	003e9206 	br	4d9c <__alt_data_end+0xfffd4d9c>
    5354:	d9c00317 	ldw	r7,12(sp)
    5358:	00800084 	movi	r2,2
    535c:	11fec50e 	bge	r2,r7,4e74 <__alt_data_end+0xfffd4e74>
    5360:	d9000617 	ldw	r4,24(sp)
    5364:	20013c1e 	bne	r4,zero,5858 <_dtoa_r+0x1524>
    5368:	a80b883a 	mov	r5,r21
    536c:	000f883a 	mov	r7,zero
    5370:	01800144 	movi	r6,5
    5374:	e009883a 	mov	r4,fp
    5378:	0007b380 	call	7b38 <__multadd>
    537c:	100b883a 	mov	r5,r2
    5380:	8009883a 	mov	r4,r16
    5384:	102b883a 	mov	r21,r2
    5388:	00083ec0 	call	83ec <__mcmp>
    538c:	dc000915 	stw	r16,36(sp)
    5390:	00bf410e 	bge	zero,r2,5098 <__alt_data_end+0xfffd5098>
    5394:	d9c00717 	ldw	r7,28(sp)
    5398:	00800c44 	movi	r2,49
    539c:	38800005 	stb	r2,0(r7)
    53a0:	d8800517 	ldw	r2,20(sp)
    53a4:	3dc00044 	addi	r23,r7,1
    53a8:	10800044 	addi	r2,r2,1
    53ac:	d8800515 	stw	r2,20(sp)
    53b0:	003f3d06 	br	50a8 <__alt_data_end+0xfffd50a8>
    53b4:	d9800517 	ldw	r6,20(sp)
    53b8:	d9c00717 	ldw	r7,28(sp)
    53bc:	00800c44 	movi	r2,49
    53c0:	31800044 	addi	r6,r6,1
    53c4:	d9800515 	stw	r6,20(sp)
    53c8:	38800005 	stb	r2,0(r7)
    53cc:	003edf06 	br	4f4c <__alt_data_end+0xfffd4f4c>
    53d0:	d8000b15 	stw	zero,44(sp)
    53d4:	003c9f06 	br	4654 <__alt_data_end+0xfffd4654>
    53d8:	903e7e1e 	bne	r18,zero,4dd4 <__alt_data_end+0xfffd4dd4>
    53dc:	00800434 	movhi	r2,16
    53e0:	10bfffc4 	addi	r2,r2,-1
    53e4:	9884703a 	and	r2,r19,r2
    53e8:	1000ea1e 	bne	r2,zero,5794 <_dtoa_r+0x1460>
    53ec:	9cdffc2c 	andhi	r19,r19,32752
    53f0:	9800e826 	beq	r19,zero,5794 <_dtoa_r+0x1460>
    53f4:	d9c00817 	ldw	r7,32(sp)
    53f8:	b5800044 	addi	r22,r22,1
    53fc:	04c00044 	movi	r19,1
    5400:	39c00044 	addi	r7,r7,1
    5404:	d9c00815 	stw	r7,32(sp)
    5408:	d8800d17 	ldw	r2,52(sp)
    540c:	103e721e 	bne	r2,zero,4dd8 <__alt_data_end+0xfffd4dd8>
    5410:	00800044 	movi	r2,1
    5414:	003e7906 	br	4dfc <__alt_data_end+0xfffd4dfc>
    5418:	8009883a 	mov	r4,r16
    541c:	000eaac0 	call	eaac <__floatsidf>
    5420:	d9800f17 	ldw	r6,60(sp)
    5424:	d9c01017 	ldw	r7,64(sp)
    5428:	1009883a 	mov	r4,r2
    542c:	180b883a 	mov	r5,r3
    5430:	000d8c40 	call	d8c4 <__muldf3>
    5434:	000d883a 	mov	r6,zero
    5438:	01d00734 	movhi	r7,16412
    543c:	1009883a 	mov	r4,r2
    5440:	180b883a 	mov	r5,r3
    5444:	000c3f00 	call	c3f0 <__adddf3>
    5448:	047f3034 	movhi	r17,64704
    544c:	1021883a 	mov	r16,r2
    5450:	1c63883a 	add	r17,r3,r17
    5454:	d9000f17 	ldw	r4,60(sp)
    5458:	d9401017 	ldw	r5,64(sp)
    545c:	000d883a 	mov	r6,zero
    5460:	01d00534 	movhi	r7,16404
    5464:	000e1300 	call	e130 <__subdf3>
    5468:	800d883a 	mov	r6,r16
    546c:	880f883a 	mov	r7,r17
    5470:	1009883a 	mov	r4,r2
    5474:	180b883a 	mov	r5,r3
    5478:	102b883a 	mov	r21,r2
    547c:	1829883a 	mov	r20,r3
    5480:	000d6f40 	call	d6f4 <__gedf2>
    5484:	00806c16 	blt	zero,r2,5638 <_dtoa_r+0x1304>
    5488:	89e0003c 	xorhi	r7,r17,32768
    548c:	800d883a 	mov	r6,r16
    5490:	a809883a 	mov	r4,r21
    5494:	a00b883a 	mov	r5,r20
    5498:	000d7d00 	call	d7d0 <__ledf2>
    549c:	103d7e0e 	bge	r2,zero,4a98 <__alt_data_end+0xfffd4a98>
    54a0:	002b883a 	mov	r21,zero
    54a4:	0023883a 	mov	r17,zero
    54a8:	003efb06 	br	5098 <__alt_data_end+0xfffd5098>
    54ac:	d8800717 	ldw	r2,28(sp)
    54b0:	003bd006 	br	43f4 <__alt_data_end+0xfffd43f4>
    54b4:	d9000a17 	ldw	r4,40(sp)
    54b8:	d9800d17 	ldw	r6,52(sp)
    54bc:	dd400a15 	stw	r21,40(sp)
    54c0:	a905c83a 	sub	r2,r21,r4
    54c4:	308d883a 	add	r6,r6,r2
    54c8:	d9800d15 	stw	r6,52(sp)
    54cc:	002b883a 	mov	r21,zero
    54d0:	003e0606 	br	4cec <__alt_data_end+0xfffd4cec>
    54d4:	9023883a 	mov	r17,r18
    54d8:	9829883a 	mov	r20,r19
    54dc:	04000084 	movi	r16,2
    54e0:	003c9206 	br	472c <__alt_data_end+0xfffd472c>
    54e4:	04000044 	movi	r16,1
    54e8:	dc000c15 	stw	r16,48(sp)
    54ec:	dc000615 	stw	r16,24(sp)
    54f0:	dc002215 	stw	r16,136(sp)
    54f4:	e0001115 	stw	zero,68(fp)
    54f8:	000b883a 	mov	r5,zero
    54fc:	003c6906 	br	46a4 <__alt_data_end+0xfffd46a4>
    5500:	3021883a 	mov	r16,r6
    5504:	003ffb06 	br	54f4 <__alt_data_end+0xfffd54f4>
    5508:	1000021e 	bne	r2,zero,5514 <_dtoa_r+0x11e0>
    550c:	4200004c 	andi	r8,r8,1
    5510:	403e7d1e 	bne	r8,zero,4f08 <__alt_data_end+0xfffd4f08>
    5514:	01000c04 	movi	r4,48
    5518:	00000106 	br	5520 <_dtoa_r+0x11ec>
    551c:	102f883a 	mov	r23,r2
    5520:	b8bfffc4 	addi	r2,r23,-1
    5524:	10c00007 	ldb	r3,0(r2)
    5528:	193ffc26 	beq	r3,r4,551c <__alt_data_end+0xfffd551c>
    552c:	003e8706 	br	4f4c <__alt_data_end+0xfffd4f4c>
    5530:	d8800517 	ldw	r2,20(sp)
    5534:	00a3c83a 	sub	r17,zero,r2
    5538:	8800a426 	beq	r17,zero,57cc <_dtoa_r+0x1498>
    553c:	888003cc 	andi	r2,r17,15
    5540:	100490fa 	slli	r2,r2,3
    5544:	00c000b4 	movhi	r3,2
    5548:	18e5ab04 	addi	r3,r3,-26964
    554c:	1885883a 	add	r2,r3,r2
    5550:	11800017 	ldw	r6,0(r2)
    5554:	11c00117 	ldw	r7,4(r2)
    5558:	9009883a 	mov	r4,r18
    555c:	980b883a 	mov	r5,r19
    5560:	8823d13a 	srai	r17,r17,4
    5564:	000d8c40 	call	d8c4 <__muldf3>
    5568:	d8800f15 	stw	r2,60(sp)
    556c:	d8c01015 	stw	r3,64(sp)
    5570:	8800e826 	beq	r17,zero,5914 <_dtoa_r+0x15e0>
    5574:	050000b4 	movhi	r20,2
    5578:	a525a104 	addi	r20,r20,-27004
    557c:	04000084 	movi	r16,2
    5580:	8980004c 	andi	r6,r17,1
    5584:	1009883a 	mov	r4,r2
    5588:	8823d07a 	srai	r17,r17,1
    558c:	180b883a 	mov	r5,r3
    5590:	30000426 	beq	r6,zero,55a4 <_dtoa_r+0x1270>
    5594:	a1800017 	ldw	r6,0(r20)
    5598:	a1c00117 	ldw	r7,4(r20)
    559c:	84000044 	addi	r16,r16,1
    55a0:	000d8c40 	call	d8c4 <__muldf3>
    55a4:	a5000204 	addi	r20,r20,8
    55a8:	883ff51e 	bne	r17,zero,5580 <__alt_data_end+0xfffd5580>
    55ac:	d8800f15 	stw	r2,60(sp)
    55b0:	d8c01015 	stw	r3,64(sp)
    55b4:	003c7606 	br	4790 <__alt_data_end+0xfffd4790>
    55b8:	00c00c04 	movi	r3,48
    55bc:	10c00005 	stb	r3,0(r2)
    55c0:	d8c00517 	ldw	r3,20(sp)
    55c4:	bd3fffc3 	ldbu	r20,-1(r23)
    55c8:	18c00044 	addi	r3,r3,1
    55cc:	d8c00515 	stw	r3,20(sp)
    55d0:	003db906 	br	4cb8 <__alt_data_end+0xfffd4cb8>
    55d4:	89400117 	ldw	r5,4(r17)
    55d8:	e009883a 	mov	r4,fp
    55dc:	0007a680 	call	7a68 <_Balloc>
    55e0:	89800417 	ldw	r6,16(r17)
    55e4:	89400304 	addi	r5,r17,12
    55e8:	11000304 	addi	r4,r2,12
    55ec:	31800084 	addi	r6,r6,2
    55f0:	318d883a 	add	r6,r6,r6
    55f4:	318d883a 	add	r6,r6,r6
    55f8:	1027883a 	mov	r19,r2
    55fc:	000769c0 	call	769c <memcpy>
    5600:	01800044 	movi	r6,1
    5604:	980b883a 	mov	r5,r19
    5608:	e009883a 	mov	r4,fp
    560c:	00082a40 	call	82a4 <__lshift>
    5610:	1029883a 	mov	r20,r2
    5614:	003ecc06 	br	5148 <__alt_data_end+0xfffd5148>
    5618:	00800e44 	movi	r2,57
    561c:	90809026 	beq	r18,r2,5860 <_dtoa_r+0x152c>
    5620:	92000044 	addi	r8,r18,1
    5624:	003f1f06 	br	52a4 <__alt_data_end+0xfffd52a4>
    5628:	9011883a 	mov	r8,r18
    562c:	8825883a 	mov	r18,r17
    5630:	a023883a 	mov	r17,r20
    5634:	003e2906 	br	4edc <__alt_data_end+0xfffd4edc>
    5638:	002b883a 	mov	r21,zero
    563c:	0023883a 	mov	r17,zero
    5640:	003f5406 	br	5394 <__alt_data_end+0xfffd5394>
    5644:	61bfffc4 	addi	r6,r12,-1
    5648:	300490fa 	slli	r2,r6,3
    564c:	00c000b4 	movhi	r3,2
    5650:	18e5ab04 	addi	r3,r3,-26964
    5654:	1885883a 	add	r2,r3,r2
    5658:	11000017 	ldw	r4,0(r2)
    565c:	11400117 	ldw	r5,4(r2)
    5660:	d8800717 	ldw	r2,28(sp)
    5664:	880f883a 	mov	r7,r17
    5668:	d9801215 	stw	r6,72(sp)
    566c:	800d883a 	mov	r6,r16
    5670:	db001615 	stw	r12,88(sp)
    5674:	15c00044 	addi	r23,r2,1
    5678:	000d8c40 	call	d8c4 <__muldf3>
    567c:	d9401017 	ldw	r5,64(sp)
    5680:	d9000f17 	ldw	r4,60(sp)
    5684:	d8c01515 	stw	r3,84(sp)
    5688:	d8801415 	stw	r2,80(sp)
    568c:	000ea2c0 	call	ea2c <__fixdfsi>
    5690:	1009883a 	mov	r4,r2
    5694:	1021883a 	mov	r16,r2
    5698:	000eaac0 	call	eaac <__floatsidf>
    569c:	d9000f17 	ldw	r4,60(sp)
    56a0:	d9401017 	ldw	r5,64(sp)
    56a4:	100d883a 	mov	r6,r2
    56a8:	180f883a 	mov	r7,r3
    56ac:	000e1300 	call	e130 <__subdf3>
    56b0:	1829883a 	mov	r20,r3
    56b4:	d8c00717 	ldw	r3,28(sp)
    56b8:	84000c04 	addi	r16,r16,48
    56bc:	1023883a 	mov	r17,r2
    56c0:	1c000005 	stb	r16,0(r3)
    56c4:	db001617 	ldw	r12,88(sp)
    56c8:	00800044 	movi	r2,1
    56cc:	60802226 	beq	r12,r2,5758 <_dtoa_r+0x1424>
    56d0:	d9c00717 	ldw	r7,28(sp)
    56d4:	8805883a 	mov	r2,r17
    56d8:	b82b883a 	mov	r21,r23
    56dc:	3b19883a 	add	r12,r7,r12
    56e0:	6023883a 	mov	r17,r12
    56e4:	a007883a 	mov	r3,r20
    56e8:	dc800f15 	stw	r18,60(sp)
    56ec:	000d883a 	mov	r6,zero
    56f0:	01d00934 	movhi	r7,16420
    56f4:	1009883a 	mov	r4,r2
    56f8:	180b883a 	mov	r5,r3
    56fc:	000d8c40 	call	d8c4 <__muldf3>
    5700:	180b883a 	mov	r5,r3
    5704:	1009883a 	mov	r4,r2
    5708:	1829883a 	mov	r20,r3
    570c:	1025883a 	mov	r18,r2
    5710:	000ea2c0 	call	ea2c <__fixdfsi>
    5714:	1009883a 	mov	r4,r2
    5718:	1021883a 	mov	r16,r2
    571c:	000eaac0 	call	eaac <__floatsidf>
    5720:	100d883a 	mov	r6,r2
    5724:	180f883a 	mov	r7,r3
    5728:	9009883a 	mov	r4,r18
    572c:	a00b883a 	mov	r5,r20
    5730:	84000c04 	addi	r16,r16,48
    5734:	000e1300 	call	e130 <__subdf3>
    5738:	ad400044 	addi	r21,r21,1
    573c:	ac3fffc5 	stb	r16,-1(r21)
    5740:	ac7fea1e 	bne	r21,r17,56ec <__alt_data_end+0xfffd56ec>
    5744:	1023883a 	mov	r17,r2
    5748:	d8801217 	ldw	r2,72(sp)
    574c:	dc800f17 	ldw	r18,60(sp)
    5750:	1829883a 	mov	r20,r3
    5754:	b8af883a 	add	r23,r23,r2
    5758:	d9001417 	ldw	r4,80(sp)
    575c:	d9401517 	ldw	r5,84(sp)
    5760:	000d883a 	mov	r6,zero
    5764:	01cff834 	movhi	r7,16352
    5768:	000c3f00 	call	c3f0 <__adddf3>
    576c:	880d883a 	mov	r6,r17
    5770:	a00f883a 	mov	r7,r20
    5774:	1009883a 	mov	r4,r2
    5778:	180b883a 	mov	r5,r3
    577c:	000d7d00 	call	d7d0 <__ledf2>
    5780:	10003e0e 	bge	r2,zero,587c <_dtoa_r+0x1548>
    5784:	d9001317 	ldw	r4,76(sp)
    5788:	bd3fffc3 	ldbu	r20,-1(r23)
    578c:	d9000515 	stw	r4,20(sp)
    5790:	003d3b06 	br	4c80 <__alt_data_end+0xfffd4c80>
    5794:	0027883a 	mov	r19,zero
    5798:	003f1b06 	br	5408 <__alt_data_end+0xfffd5408>
    579c:	d8800817 	ldw	r2,32(sp)
    57a0:	11e9c83a 	sub	r20,r2,r7
    57a4:	0005883a 	mov	r2,zero
    57a8:	003d5406 	br	4cfc <__alt_data_end+0xfffd4cfc>
    57ac:	00800044 	movi	r2,1
    57b0:	003dc706 	br	4ed0 <__alt_data_end+0xfffd4ed0>
    57b4:	d8c00217 	ldw	r3,8(sp)
    57b8:	00800d84 	movi	r2,54
    57bc:	dd400a17 	ldw	r21,40(sp)
    57c0:	10c5c83a 	sub	r2,r2,r3
    57c4:	dd000817 	ldw	r20,32(sp)
    57c8:	003d4c06 	br	4cfc <__alt_data_end+0xfffd4cfc>
    57cc:	dc800f15 	stw	r18,60(sp)
    57d0:	dcc01015 	stw	r19,64(sp)
    57d4:	04000084 	movi	r16,2
    57d8:	003bed06 	br	4790 <__alt_data_end+0xfffd4790>
    57dc:	d9000617 	ldw	r4,24(sp)
    57e0:	203f0d26 	beq	r4,zero,5418 <__alt_data_end+0xfffd5418>
    57e4:	d9800c17 	ldw	r6,48(sp)
    57e8:	01bcab0e 	bge	zero,r6,4a98 <__alt_data_end+0xfffd4a98>
    57ec:	d9401017 	ldw	r5,64(sp)
    57f0:	d9000f17 	ldw	r4,60(sp)
    57f4:	000d883a 	mov	r6,zero
    57f8:	01d00934 	movhi	r7,16420
    57fc:	000d8c40 	call	d8c4 <__muldf3>
    5800:	81000044 	addi	r4,r16,1
    5804:	d8800f15 	stw	r2,60(sp)
    5808:	d8c01015 	stw	r3,64(sp)
    580c:	000eaac0 	call	eaac <__floatsidf>
    5810:	d9800f17 	ldw	r6,60(sp)
    5814:	d9c01017 	ldw	r7,64(sp)
    5818:	1009883a 	mov	r4,r2
    581c:	180b883a 	mov	r5,r3
    5820:	000d8c40 	call	d8c4 <__muldf3>
    5824:	01d00734 	movhi	r7,16412
    5828:	000d883a 	mov	r6,zero
    582c:	1009883a 	mov	r4,r2
    5830:	180b883a 	mov	r5,r3
    5834:	000c3f00 	call	c3f0 <__adddf3>
    5838:	d9c00517 	ldw	r7,20(sp)
    583c:	047f3034 	movhi	r17,64704
    5840:	1021883a 	mov	r16,r2
    5844:	39ffffc4 	addi	r7,r7,-1
    5848:	d9c01315 	stw	r7,76(sp)
    584c:	1c63883a 	add	r17,r3,r17
    5850:	db000c17 	ldw	r12,48(sp)
    5854:	003bea06 	br	4800 <__alt_data_end+0xfffd4800>
    5858:	dc000915 	stw	r16,36(sp)
    585c:	003e0e06 	br	5098 <__alt_data_end+0xfffd5098>
    5860:	01000e44 	movi	r4,57
    5864:	8825883a 	mov	r18,r17
    5868:	9dc00044 	addi	r23,r19,1
    586c:	99000005 	stb	r4,0(r19)
    5870:	a023883a 	mov	r17,r20
    5874:	dc000915 	stw	r16,36(sp)
    5878:	003da406 	br	4f0c <__alt_data_end+0xfffd4f0c>
    587c:	d9801417 	ldw	r6,80(sp)
    5880:	d9c01517 	ldw	r7,84(sp)
    5884:	0009883a 	mov	r4,zero
    5888:	014ff834 	movhi	r5,16352
    588c:	000e1300 	call	e130 <__subdf3>
    5890:	880d883a 	mov	r6,r17
    5894:	a00f883a 	mov	r7,r20
    5898:	1009883a 	mov	r4,r2
    589c:	180b883a 	mov	r5,r3
    58a0:	000d6f40 	call	d6f4 <__gedf2>
    58a4:	00bc7c0e 	bge	zero,r2,4a98 <__alt_data_end+0xfffd4a98>
    58a8:	01000c04 	movi	r4,48
    58ac:	00000106 	br	58b4 <_dtoa_r+0x1580>
    58b0:	102f883a 	mov	r23,r2
    58b4:	b8bfffc4 	addi	r2,r23,-1
    58b8:	10c00007 	ldb	r3,0(r2)
    58bc:	193ffc26 	beq	r3,r4,58b0 <__alt_data_end+0xfffd58b0>
    58c0:	d9801317 	ldw	r6,76(sp)
    58c4:	d9800515 	stw	r6,20(sp)
    58c8:	003c4406 	br	49dc <__alt_data_end+0xfffd49dc>
    58cc:	d9801317 	ldw	r6,76(sp)
    58d0:	d9800515 	stw	r6,20(sp)
    58d4:	003cea06 	br	4c80 <__alt_data_end+0xfffd4c80>
    58d8:	dd800f17 	ldw	r22,60(sp)
    58dc:	dcc01017 	ldw	r19,64(sp)
    58e0:	dc801217 	ldw	r18,72(sp)
    58e4:	003c6c06 	br	4a98 <__alt_data_end+0xfffd4a98>
    58e8:	903e031e 	bne	r18,zero,50f8 <__alt_data_end+0xfffd50f8>
    58ec:	003ebb06 	br	53dc <__alt_data_end+0xfffd53dc>
    58f0:	103e6c1e 	bne	r2,zero,52a4 <__alt_data_end+0xfffd52a4>
    58f4:	4080004c 	andi	r2,r8,1
    58f8:	103e6a26 	beq	r2,zero,52a4 <__alt_data_end+0xfffd52a4>
    58fc:	003e6606 	br	5298 <__alt_data_end+0xfffd5298>
    5900:	d8c00317 	ldw	r3,12(sp)
    5904:	00800084 	movi	r2,2
    5908:	10c02916 	blt	r2,r3,59b0 <_dtoa_r+0x167c>
    590c:	d9000c17 	ldw	r4,48(sp)
    5910:	003e8806 	br	5334 <__alt_data_end+0xfffd5334>
    5914:	04000084 	movi	r16,2
    5918:	003b9d06 	br	4790 <__alt_data_end+0xfffd4790>
    591c:	d9001317 	ldw	r4,76(sp)
    5920:	d9000515 	stw	r4,20(sp)
    5924:	003cd606 	br	4c80 <__alt_data_end+0xfffd4c80>
    5928:	d8801317 	ldw	r2,76(sp)
    592c:	d8800515 	stw	r2,20(sp)
    5930:	003c2a06 	br	49dc <__alt_data_end+0xfffd49dc>
    5934:	d9800317 	ldw	r6,12(sp)
    5938:	00800084 	movi	r2,2
    593c:	11801516 	blt	r2,r6,5994 <_dtoa_r+0x1660>
    5940:	d9c00c17 	ldw	r7,48(sp)
    5944:	d9c00615 	stw	r7,24(sp)
    5948:	003df706 	br	5128 <__alt_data_end+0xfffd5128>
    594c:	193d3926 	beq	r3,r4,4e34 <__alt_data_end+0xfffd4e34>
    5950:	00c00f04 	movi	r3,60
    5954:	1885c83a 	sub	r2,r3,r2
    5958:	003ddf06 	br	50d8 <__alt_data_end+0xfffd50d8>
    595c:	e009883a 	mov	r4,fp
    5960:	e0001115 	stw	zero,68(fp)
    5964:	000b883a 	mov	r5,zero
    5968:	0007a680 	call	7a68 <_Balloc>
    596c:	d8800715 	stw	r2,28(sp)
    5970:	d8c00717 	ldw	r3,28(sp)
    5974:	00bfffc4 	movi	r2,-1
    5978:	01000044 	movi	r4,1
    597c:	d8800c15 	stw	r2,48(sp)
    5980:	e0c01015 	stw	r3,64(fp)
    5984:	d9000b15 	stw	r4,44(sp)
    5988:	d8800615 	stw	r2,24(sp)
    598c:	d8002215 	stw	zero,136(sp)
    5990:	003c4106 	br	4a98 <__alt_data_end+0xfffd4a98>
    5994:	d8c00c17 	ldw	r3,48(sp)
    5998:	d8c00615 	stw	r3,24(sp)
    599c:	003e7006 	br	5360 <__alt_data_end+0xfffd5360>
    59a0:	04400044 	movi	r17,1
    59a4:	003b2006 	br	4628 <__alt_data_end+0xfffd4628>
    59a8:	000b883a 	mov	r5,zero
    59ac:	003b3d06 	br	46a4 <__alt_data_end+0xfffd46a4>
    59b0:	d8800c17 	ldw	r2,48(sp)
    59b4:	d8800615 	stw	r2,24(sp)
    59b8:	003e6906 	br	5360 <__alt_data_end+0xfffd5360>

000059bc <__sflush_r>:
    59bc:	2880030b 	ldhu	r2,12(r5)
    59c0:	defffb04 	addi	sp,sp,-20
    59c4:	dcc00315 	stw	r19,12(sp)
    59c8:	dc400115 	stw	r17,4(sp)
    59cc:	dfc00415 	stw	ra,16(sp)
    59d0:	dc800215 	stw	r18,8(sp)
    59d4:	dc000015 	stw	r16,0(sp)
    59d8:	10c0020c 	andi	r3,r2,8
    59dc:	2823883a 	mov	r17,r5
    59e0:	2027883a 	mov	r19,r4
    59e4:	1800311e 	bne	r3,zero,5aac <__sflush_r+0xf0>
    59e8:	28c00117 	ldw	r3,4(r5)
    59ec:	10820014 	ori	r2,r2,2048
    59f0:	2880030d 	sth	r2,12(r5)
    59f4:	00c04b0e 	bge	zero,r3,5b24 <__sflush_r+0x168>
    59f8:	8a000a17 	ldw	r8,40(r17)
    59fc:	40002326 	beq	r8,zero,5a8c <__sflush_r+0xd0>
    5a00:	9c000017 	ldw	r16,0(r19)
    5a04:	10c4000c 	andi	r3,r2,4096
    5a08:	98000015 	stw	zero,0(r19)
    5a0c:	18004826 	beq	r3,zero,5b30 <__sflush_r+0x174>
    5a10:	89801417 	ldw	r6,80(r17)
    5a14:	10c0010c 	andi	r3,r2,4
    5a18:	18000626 	beq	r3,zero,5a34 <__sflush_r+0x78>
    5a1c:	88c00117 	ldw	r3,4(r17)
    5a20:	88800c17 	ldw	r2,48(r17)
    5a24:	30cdc83a 	sub	r6,r6,r3
    5a28:	10000226 	beq	r2,zero,5a34 <__sflush_r+0x78>
    5a2c:	88800f17 	ldw	r2,60(r17)
    5a30:	308dc83a 	sub	r6,r6,r2
    5a34:	89400717 	ldw	r5,28(r17)
    5a38:	000f883a 	mov	r7,zero
    5a3c:	9809883a 	mov	r4,r19
    5a40:	403ee83a 	callr	r8
    5a44:	00ffffc4 	movi	r3,-1
    5a48:	10c04426 	beq	r2,r3,5b5c <__sflush_r+0x1a0>
    5a4c:	88c0030b 	ldhu	r3,12(r17)
    5a50:	89000417 	ldw	r4,16(r17)
    5a54:	88000115 	stw	zero,4(r17)
    5a58:	197dffcc 	andi	r5,r3,63487
    5a5c:	8940030d 	sth	r5,12(r17)
    5a60:	89000015 	stw	r4,0(r17)
    5a64:	18c4000c 	andi	r3,r3,4096
    5a68:	18002c1e 	bne	r3,zero,5b1c <__sflush_r+0x160>
    5a6c:	89400c17 	ldw	r5,48(r17)
    5a70:	9c000015 	stw	r16,0(r19)
    5a74:	28000526 	beq	r5,zero,5a8c <__sflush_r+0xd0>
    5a78:	88801004 	addi	r2,r17,64
    5a7c:	28800226 	beq	r5,r2,5a88 <__sflush_r+0xcc>
    5a80:	9809883a 	mov	r4,r19
    5a84:	00061380 	call	6138 <_free_r>
    5a88:	88000c15 	stw	zero,48(r17)
    5a8c:	0005883a 	mov	r2,zero
    5a90:	dfc00417 	ldw	ra,16(sp)
    5a94:	dcc00317 	ldw	r19,12(sp)
    5a98:	dc800217 	ldw	r18,8(sp)
    5a9c:	dc400117 	ldw	r17,4(sp)
    5aa0:	dc000017 	ldw	r16,0(sp)
    5aa4:	dec00504 	addi	sp,sp,20
    5aa8:	f800283a 	ret
    5aac:	2c800417 	ldw	r18,16(r5)
    5ab0:	903ff626 	beq	r18,zero,5a8c <__alt_data_end+0xfffd5a8c>
    5ab4:	2c000017 	ldw	r16,0(r5)
    5ab8:	108000cc 	andi	r2,r2,3
    5abc:	2c800015 	stw	r18,0(r5)
    5ac0:	84a1c83a 	sub	r16,r16,r18
    5ac4:	1000131e 	bne	r2,zero,5b14 <__sflush_r+0x158>
    5ac8:	28800517 	ldw	r2,20(r5)
    5acc:	88800215 	stw	r2,8(r17)
    5ad0:	04000316 	blt	zero,r16,5ae0 <__sflush_r+0x124>
    5ad4:	003fed06 	br	5a8c <__alt_data_end+0xfffd5a8c>
    5ad8:	90a5883a 	add	r18,r18,r2
    5adc:	043feb0e 	bge	zero,r16,5a8c <__alt_data_end+0xfffd5a8c>
    5ae0:	88800917 	ldw	r2,36(r17)
    5ae4:	89400717 	ldw	r5,28(r17)
    5ae8:	800f883a 	mov	r7,r16
    5aec:	900d883a 	mov	r6,r18
    5af0:	9809883a 	mov	r4,r19
    5af4:	103ee83a 	callr	r2
    5af8:	80a1c83a 	sub	r16,r16,r2
    5afc:	00bff616 	blt	zero,r2,5ad8 <__alt_data_end+0xfffd5ad8>
    5b00:	88c0030b 	ldhu	r3,12(r17)
    5b04:	00bfffc4 	movi	r2,-1
    5b08:	18c01014 	ori	r3,r3,64
    5b0c:	88c0030d 	sth	r3,12(r17)
    5b10:	003fdf06 	br	5a90 <__alt_data_end+0xfffd5a90>
    5b14:	0005883a 	mov	r2,zero
    5b18:	003fec06 	br	5acc <__alt_data_end+0xfffd5acc>
    5b1c:	88801415 	stw	r2,80(r17)
    5b20:	003fd206 	br	5a6c <__alt_data_end+0xfffd5a6c>
    5b24:	28c00f17 	ldw	r3,60(r5)
    5b28:	00ffb316 	blt	zero,r3,59f8 <__alt_data_end+0xfffd59f8>
    5b2c:	003fd706 	br	5a8c <__alt_data_end+0xfffd5a8c>
    5b30:	89400717 	ldw	r5,28(r17)
    5b34:	000d883a 	mov	r6,zero
    5b38:	01c00044 	movi	r7,1
    5b3c:	9809883a 	mov	r4,r19
    5b40:	403ee83a 	callr	r8
    5b44:	100d883a 	mov	r6,r2
    5b48:	00bfffc4 	movi	r2,-1
    5b4c:	30801426 	beq	r6,r2,5ba0 <__sflush_r+0x1e4>
    5b50:	8880030b 	ldhu	r2,12(r17)
    5b54:	8a000a17 	ldw	r8,40(r17)
    5b58:	003fae06 	br	5a14 <__alt_data_end+0xfffd5a14>
    5b5c:	98c00017 	ldw	r3,0(r19)
    5b60:	183fba26 	beq	r3,zero,5a4c <__alt_data_end+0xfffd5a4c>
    5b64:	01000744 	movi	r4,29
    5b68:	19000626 	beq	r3,r4,5b84 <__sflush_r+0x1c8>
    5b6c:	01000584 	movi	r4,22
    5b70:	19000426 	beq	r3,r4,5b84 <__sflush_r+0x1c8>
    5b74:	88c0030b 	ldhu	r3,12(r17)
    5b78:	18c01014 	ori	r3,r3,64
    5b7c:	88c0030d 	sth	r3,12(r17)
    5b80:	003fc306 	br	5a90 <__alt_data_end+0xfffd5a90>
    5b84:	8880030b 	ldhu	r2,12(r17)
    5b88:	88c00417 	ldw	r3,16(r17)
    5b8c:	88000115 	stw	zero,4(r17)
    5b90:	10bdffcc 	andi	r2,r2,63487
    5b94:	8880030d 	sth	r2,12(r17)
    5b98:	88c00015 	stw	r3,0(r17)
    5b9c:	003fb306 	br	5a6c <__alt_data_end+0xfffd5a6c>
    5ba0:	98800017 	ldw	r2,0(r19)
    5ba4:	103fea26 	beq	r2,zero,5b50 <__alt_data_end+0xfffd5b50>
    5ba8:	00c00744 	movi	r3,29
    5bac:	10c00226 	beq	r2,r3,5bb8 <__sflush_r+0x1fc>
    5bb0:	00c00584 	movi	r3,22
    5bb4:	10c0031e 	bne	r2,r3,5bc4 <__sflush_r+0x208>
    5bb8:	9c000015 	stw	r16,0(r19)
    5bbc:	0005883a 	mov	r2,zero
    5bc0:	003fb306 	br	5a90 <__alt_data_end+0xfffd5a90>
    5bc4:	88c0030b 	ldhu	r3,12(r17)
    5bc8:	3005883a 	mov	r2,r6
    5bcc:	18c01014 	ori	r3,r3,64
    5bd0:	88c0030d 	sth	r3,12(r17)
    5bd4:	003fae06 	br	5a90 <__alt_data_end+0xfffd5a90>

00005bd8 <_fflush_r>:
    5bd8:	defffd04 	addi	sp,sp,-12
    5bdc:	dc000115 	stw	r16,4(sp)
    5be0:	dfc00215 	stw	ra,8(sp)
    5be4:	2021883a 	mov	r16,r4
    5be8:	20000226 	beq	r4,zero,5bf4 <_fflush_r+0x1c>
    5bec:	20800e17 	ldw	r2,56(r4)
    5bf0:	10000c26 	beq	r2,zero,5c24 <_fflush_r+0x4c>
    5bf4:	2880030f 	ldh	r2,12(r5)
    5bf8:	1000051e 	bne	r2,zero,5c10 <_fflush_r+0x38>
    5bfc:	0005883a 	mov	r2,zero
    5c00:	dfc00217 	ldw	ra,8(sp)
    5c04:	dc000117 	ldw	r16,4(sp)
    5c08:	dec00304 	addi	sp,sp,12
    5c0c:	f800283a 	ret
    5c10:	8009883a 	mov	r4,r16
    5c14:	dfc00217 	ldw	ra,8(sp)
    5c18:	dc000117 	ldw	r16,4(sp)
    5c1c:	dec00304 	addi	sp,sp,12
    5c20:	00059bc1 	jmpi	59bc <__sflush_r>
    5c24:	d9400015 	stw	r5,0(sp)
    5c28:	0005fc40 	call	5fc4 <__sinit>
    5c2c:	d9400017 	ldw	r5,0(sp)
    5c30:	003ff006 	br	5bf4 <__alt_data_end+0xfffd5bf4>

00005c34 <fflush>:
    5c34:	20000526 	beq	r4,zero,5c4c <fflush+0x18>
    5c38:	008000b4 	movhi	r2,2
    5c3c:	10ad2904 	addi	r2,r2,-19292
    5c40:	200b883a 	mov	r5,r4
    5c44:	11000017 	ldw	r4,0(r2)
    5c48:	0005bd81 	jmpi	5bd8 <_fflush_r>
    5c4c:	008000b4 	movhi	r2,2
    5c50:	10ad2804 	addi	r2,r2,-19296
    5c54:	11000017 	ldw	r4,0(r2)
    5c58:	01400034 	movhi	r5,0
    5c5c:	2956f604 	addi	r5,r5,23512
    5c60:	00069d41 	jmpi	69d4 <_fwalk_reent>

00005c64 <__fp_unlock>:
    5c64:	0005883a 	mov	r2,zero
    5c68:	f800283a 	ret

00005c6c <_cleanup_r>:
    5c6c:	01400074 	movhi	r5,1
    5c70:	296bd004 	addi	r5,r5,-20672
    5c74:	00069d41 	jmpi	69d4 <_fwalk_reent>

00005c78 <__sinit.part.1>:
    5c78:	defff704 	addi	sp,sp,-36
    5c7c:	00c00034 	movhi	r3,0
    5c80:	dfc00815 	stw	ra,32(sp)
    5c84:	ddc00715 	stw	r23,28(sp)
    5c88:	dd800615 	stw	r22,24(sp)
    5c8c:	dd400515 	stw	r21,20(sp)
    5c90:	dd000415 	stw	r20,16(sp)
    5c94:	dcc00315 	stw	r19,12(sp)
    5c98:	dc800215 	stw	r18,8(sp)
    5c9c:	dc400115 	stw	r17,4(sp)
    5ca0:	dc000015 	stw	r16,0(sp)
    5ca4:	18d71b04 	addi	r3,r3,23660
    5ca8:	24000117 	ldw	r16,4(r4)
    5cac:	20c00f15 	stw	r3,60(r4)
    5cb0:	2080bb04 	addi	r2,r4,748
    5cb4:	00c000c4 	movi	r3,3
    5cb8:	20c0b915 	stw	r3,740(r4)
    5cbc:	2080ba15 	stw	r2,744(r4)
    5cc0:	2000b815 	stw	zero,736(r4)
    5cc4:	05c00204 	movi	r23,8
    5cc8:	00800104 	movi	r2,4
    5ccc:	2025883a 	mov	r18,r4
    5cd0:	b80d883a 	mov	r6,r23
    5cd4:	81001704 	addi	r4,r16,92
    5cd8:	000b883a 	mov	r5,zero
    5cdc:	80000015 	stw	zero,0(r16)
    5ce0:	80000115 	stw	zero,4(r16)
    5ce4:	80000215 	stw	zero,8(r16)
    5ce8:	8080030d 	sth	r2,12(r16)
    5cec:	80001915 	stw	zero,100(r16)
    5cf0:	8000038d 	sth	zero,14(r16)
    5cf4:	80000415 	stw	zero,16(r16)
    5cf8:	80000515 	stw	zero,20(r16)
    5cfc:	80000615 	stw	zero,24(r16)
    5d00:	00079400 	call	7940 <memset>
    5d04:	05800074 	movhi	r22,1
    5d08:	94400217 	ldw	r17,8(r18)
    5d0c:	05400074 	movhi	r21,1
    5d10:	05000074 	movhi	r20,1
    5d14:	04c00074 	movhi	r19,1
    5d18:	b5a4cf04 	addi	r22,r22,-27844
    5d1c:	ad64e604 	addi	r21,r21,-27752
    5d20:	a5250504 	addi	r20,r20,-27628
    5d24:	9ce51c04 	addi	r19,r19,-27536
    5d28:	85800815 	stw	r22,32(r16)
    5d2c:	85400915 	stw	r21,36(r16)
    5d30:	85000a15 	stw	r20,40(r16)
    5d34:	84c00b15 	stw	r19,44(r16)
    5d38:	84000715 	stw	r16,28(r16)
    5d3c:	00800284 	movi	r2,10
    5d40:	8880030d 	sth	r2,12(r17)
    5d44:	00800044 	movi	r2,1
    5d48:	b80d883a 	mov	r6,r23
    5d4c:	89001704 	addi	r4,r17,92
    5d50:	000b883a 	mov	r5,zero
    5d54:	88000015 	stw	zero,0(r17)
    5d58:	88000115 	stw	zero,4(r17)
    5d5c:	88000215 	stw	zero,8(r17)
    5d60:	88001915 	stw	zero,100(r17)
    5d64:	8880038d 	sth	r2,14(r17)
    5d68:	88000415 	stw	zero,16(r17)
    5d6c:	88000515 	stw	zero,20(r17)
    5d70:	88000615 	stw	zero,24(r17)
    5d74:	00079400 	call	7940 <memset>
    5d78:	94000317 	ldw	r16,12(r18)
    5d7c:	00800484 	movi	r2,18
    5d80:	8c400715 	stw	r17,28(r17)
    5d84:	8d800815 	stw	r22,32(r17)
    5d88:	8d400915 	stw	r21,36(r17)
    5d8c:	8d000a15 	stw	r20,40(r17)
    5d90:	8cc00b15 	stw	r19,44(r17)
    5d94:	8080030d 	sth	r2,12(r16)
    5d98:	00800084 	movi	r2,2
    5d9c:	80000015 	stw	zero,0(r16)
    5da0:	80000115 	stw	zero,4(r16)
    5da4:	80000215 	stw	zero,8(r16)
    5da8:	80001915 	stw	zero,100(r16)
    5dac:	8080038d 	sth	r2,14(r16)
    5db0:	80000415 	stw	zero,16(r16)
    5db4:	80000515 	stw	zero,20(r16)
    5db8:	80000615 	stw	zero,24(r16)
    5dbc:	b80d883a 	mov	r6,r23
    5dc0:	000b883a 	mov	r5,zero
    5dc4:	81001704 	addi	r4,r16,92
    5dc8:	00079400 	call	7940 <memset>
    5dcc:	00800044 	movi	r2,1
    5dd0:	84000715 	stw	r16,28(r16)
    5dd4:	85800815 	stw	r22,32(r16)
    5dd8:	85400915 	stw	r21,36(r16)
    5ddc:	85000a15 	stw	r20,40(r16)
    5de0:	84c00b15 	stw	r19,44(r16)
    5de4:	90800e15 	stw	r2,56(r18)
    5de8:	dfc00817 	ldw	ra,32(sp)
    5dec:	ddc00717 	ldw	r23,28(sp)
    5df0:	dd800617 	ldw	r22,24(sp)
    5df4:	dd400517 	ldw	r21,20(sp)
    5df8:	dd000417 	ldw	r20,16(sp)
    5dfc:	dcc00317 	ldw	r19,12(sp)
    5e00:	dc800217 	ldw	r18,8(sp)
    5e04:	dc400117 	ldw	r17,4(sp)
    5e08:	dc000017 	ldw	r16,0(sp)
    5e0c:	dec00904 	addi	sp,sp,36
    5e10:	f800283a 	ret

00005e14 <__fp_lock>:
    5e14:	0005883a 	mov	r2,zero
    5e18:	f800283a 	ret

00005e1c <__sfmoreglue>:
    5e1c:	defffc04 	addi	sp,sp,-16
    5e20:	dc800215 	stw	r18,8(sp)
    5e24:	2825883a 	mov	r18,r5
    5e28:	dc000015 	stw	r16,0(sp)
    5e2c:	01401a04 	movi	r5,104
    5e30:	2021883a 	mov	r16,r4
    5e34:	913fffc4 	addi	r4,r18,-1
    5e38:	dfc00315 	stw	ra,12(sp)
    5e3c:	dc400115 	stw	r17,4(sp)
    5e40:	000c3c80 	call	c3c8 <__mulsi3>
    5e44:	8009883a 	mov	r4,r16
    5e48:	11401d04 	addi	r5,r2,116
    5e4c:	1023883a 	mov	r17,r2
    5e50:	0006d300 	call	6d30 <_malloc_r>
    5e54:	1021883a 	mov	r16,r2
    5e58:	10000726 	beq	r2,zero,5e78 <__sfmoreglue+0x5c>
    5e5c:	11000304 	addi	r4,r2,12
    5e60:	10000015 	stw	zero,0(r2)
    5e64:	14800115 	stw	r18,4(r2)
    5e68:	11000215 	stw	r4,8(r2)
    5e6c:	89801a04 	addi	r6,r17,104
    5e70:	000b883a 	mov	r5,zero
    5e74:	00079400 	call	7940 <memset>
    5e78:	8005883a 	mov	r2,r16
    5e7c:	dfc00317 	ldw	ra,12(sp)
    5e80:	dc800217 	ldw	r18,8(sp)
    5e84:	dc400117 	ldw	r17,4(sp)
    5e88:	dc000017 	ldw	r16,0(sp)
    5e8c:	dec00404 	addi	sp,sp,16
    5e90:	f800283a 	ret

00005e94 <__sfp>:
    5e94:	defffb04 	addi	sp,sp,-20
    5e98:	dc000015 	stw	r16,0(sp)
    5e9c:	040000b4 	movhi	r16,2
    5ea0:	842d2804 	addi	r16,r16,-19296
    5ea4:	dcc00315 	stw	r19,12(sp)
    5ea8:	2027883a 	mov	r19,r4
    5eac:	81000017 	ldw	r4,0(r16)
    5eb0:	dfc00415 	stw	ra,16(sp)
    5eb4:	dc800215 	stw	r18,8(sp)
    5eb8:	20800e17 	ldw	r2,56(r4)
    5ebc:	dc400115 	stw	r17,4(sp)
    5ec0:	1000021e 	bne	r2,zero,5ecc <__sfp+0x38>
    5ec4:	0005c780 	call	5c78 <__sinit.part.1>
    5ec8:	81000017 	ldw	r4,0(r16)
    5ecc:	2480b804 	addi	r18,r4,736
    5ed0:	047fffc4 	movi	r17,-1
    5ed4:	91000117 	ldw	r4,4(r18)
    5ed8:	94000217 	ldw	r16,8(r18)
    5edc:	213fffc4 	addi	r4,r4,-1
    5ee0:	20000a16 	blt	r4,zero,5f0c <__sfp+0x78>
    5ee4:	8080030f 	ldh	r2,12(r16)
    5ee8:	10000c26 	beq	r2,zero,5f1c <__sfp+0x88>
    5eec:	80c01d04 	addi	r3,r16,116
    5ef0:	00000206 	br	5efc <__sfp+0x68>
    5ef4:	18bfe60f 	ldh	r2,-104(r3)
    5ef8:	10000826 	beq	r2,zero,5f1c <__sfp+0x88>
    5efc:	213fffc4 	addi	r4,r4,-1
    5f00:	1c3ffd04 	addi	r16,r3,-12
    5f04:	18c01a04 	addi	r3,r3,104
    5f08:	247ffa1e 	bne	r4,r17,5ef4 <__alt_data_end+0xfffd5ef4>
    5f0c:	90800017 	ldw	r2,0(r18)
    5f10:	10001d26 	beq	r2,zero,5f88 <__sfp+0xf4>
    5f14:	1025883a 	mov	r18,r2
    5f18:	003fee06 	br	5ed4 <__alt_data_end+0xfffd5ed4>
    5f1c:	00bfffc4 	movi	r2,-1
    5f20:	8080038d 	sth	r2,14(r16)
    5f24:	00800044 	movi	r2,1
    5f28:	8080030d 	sth	r2,12(r16)
    5f2c:	80001915 	stw	zero,100(r16)
    5f30:	80000015 	stw	zero,0(r16)
    5f34:	80000215 	stw	zero,8(r16)
    5f38:	80000115 	stw	zero,4(r16)
    5f3c:	80000415 	stw	zero,16(r16)
    5f40:	80000515 	stw	zero,20(r16)
    5f44:	80000615 	stw	zero,24(r16)
    5f48:	01800204 	movi	r6,8
    5f4c:	000b883a 	mov	r5,zero
    5f50:	81001704 	addi	r4,r16,92
    5f54:	00079400 	call	7940 <memset>
    5f58:	8005883a 	mov	r2,r16
    5f5c:	80000c15 	stw	zero,48(r16)
    5f60:	80000d15 	stw	zero,52(r16)
    5f64:	80001115 	stw	zero,68(r16)
    5f68:	80001215 	stw	zero,72(r16)
    5f6c:	dfc00417 	ldw	ra,16(sp)
    5f70:	dcc00317 	ldw	r19,12(sp)
    5f74:	dc800217 	ldw	r18,8(sp)
    5f78:	dc400117 	ldw	r17,4(sp)
    5f7c:	dc000017 	ldw	r16,0(sp)
    5f80:	dec00504 	addi	sp,sp,20
    5f84:	f800283a 	ret
    5f88:	01400104 	movi	r5,4
    5f8c:	9809883a 	mov	r4,r19
    5f90:	0005e1c0 	call	5e1c <__sfmoreglue>
    5f94:	90800015 	stw	r2,0(r18)
    5f98:	103fde1e 	bne	r2,zero,5f14 <__alt_data_end+0xfffd5f14>
    5f9c:	00800304 	movi	r2,12
    5fa0:	98800015 	stw	r2,0(r19)
    5fa4:	0005883a 	mov	r2,zero
    5fa8:	003ff006 	br	5f6c <__alt_data_end+0xfffd5f6c>

00005fac <_cleanup>:
    5fac:	008000b4 	movhi	r2,2
    5fb0:	10ad2804 	addi	r2,r2,-19296
    5fb4:	11000017 	ldw	r4,0(r2)
    5fb8:	01400074 	movhi	r5,1
    5fbc:	296bd004 	addi	r5,r5,-20672
    5fc0:	00069d41 	jmpi	69d4 <_fwalk_reent>

00005fc4 <__sinit>:
    5fc4:	20800e17 	ldw	r2,56(r4)
    5fc8:	10000126 	beq	r2,zero,5fd0 <__sinit+0xc>
    5fcc:	f800283a 	ret
    5fd0:	0005c781 	jmpi	5c78 <__sinit.part.1>

00005fd4 <__sfp_lock_acquire>:
    5fd4:	f800283a 	ret

00005fd8 <__sfp_lock_release>:
    5fd8:	f800283a 	ret

00005fdc <__sinit_lock_acquire>:
    5fdc:	f800283a 	ret

00005fe0 <__sinit_lock_release>:
    5fe0:	f800283a 	ret

00005fe4 <__fp_lock_all>:
    5fe4:	008000b4 	movhi	r2,2
    5fe8:	10ad2904 	addi	r2,r2,-19292
    5fec:	11000017 	ldw	r4,0(r2)
    5ff0:	01400034 	movhi	r5,0
    5ff4:	29578504 	addi	r5,r5,24084
    5ff8:	00069101 	jmpi	6910 <_fwalk>

00005ffc <__fp_unlock_all>:
    5ffc:	008000b4 	movhi	r2,2
    6000:	10ad2904 	addi	r2,r2,-19292
    6004:	11000017 	ldw	r4,0(r2)
    6008:	01400034 	movhi	r5,0
    600c:	29571904 	addi	r5,r5,23652
    6010:	00069101 	jmpi	6910 <_fwalk>

00006014 <_malloc_trim_r>:
    6014:	defffb04 	addi	sp,sp,-20
    6018:	dcc00315 	stw	r19,12(sp)
    601c:	04c000b4 	movhi	r19,2
    6020:	dc800215 	stw	r18,8(sp)
    6024:	dc400115 	stw	r17,4(sp)
    6028:	dc000015 	stw	r16,0(sp)
    602c:	dfc00415 	stw	ra,16(sp)
    6030:	2821883a 	mov	r16,r5
    6034:	9ce7a004 	addi	r19,r19,-24960
    6038:	2025883a 	mov	r18,r4
    603c:	000f9e40 	call	f9e4 <__malloc_lock>
    6040:	98800217 	ldw	r2,8(r19)
    6044:	14400117 	ldw	r17,4(r2)
    6048:	00bfff04 	movi	r2,-4
    604c:	88a2703a 	and	r17,r17,r2
    6050:	8c21c83a 	sub	r16,r17,r16
    6054:	8403fbc4 	addi	r16,r16,4079
    6058:	8020d33a 	srli	r16,r16,12
    605c:	0083ffc4 	movi	r2,4095
    6060:	843fffc4 	addi	r16,r16,-1
    6064:	8020933a 	slli	r16,r16,12
    6068:	1400060e 	bge	r2,r16,6084 <_malloc_trim_r+0x70>
    606c:	000b883a 	mov	r5,zero
    6070:	9009883a 	mov	r4,r18
    6074:	00092e80 	call	92e8 <_sbrk_r>
    6078:	98c00217 	ldw	r3,8(r19)
    607c:	1c47883a 	add	r3,r3,r17
    6080:	10c00a26 	beq	r2,r3,60ac <_malloc_trim_r+0x98>
    6084:	9009883a 	mov	r4,r18
    6088:	000fb040 	call	fb04 <__malloc_unlock>
    608c:	0005883a 	mov	r2,zero
    6090:	dfc00417 	ldw	ra,16(sp)
    6094:	dcc00317 	ldw	r19,12(sp)
    6098:	dc800217 	ldw	r18,8(sp)
    609c:	dc400117 	ldw	r17,4(sp)
    60a0:	dc000017 	ldw	r16,0(sp)
    60a4:	dec00504 	addi	sp,sp,20
    60a8:	f800283a 	ret
    60ac:	040bc83a 	sub	r5,zero,r16
    60b0:	9009883a 	mov	r4,r18
    60b4:	00092e80 	call	92e8 <_sbrk_r>
    60b8:	00ffffc4 	movi	r3,-1
    60bc:	10c00d26 	beq	r2,r3,60f4 <_malloc_trim_r+0xe0>
    60c0:	00c000b4 	movhi	r3,2
    60c4:	18fc7604 	addi	r3,r3,-3624
    60c8:	18800017 	ldw	r2,0(r3)
    60cc:	99000217 	ldw	r4,8(r19)
    60d0:	8c23c83a 	sub	r17,r17,r16
    60d4:	8c400054 	ori	r17,r17,1
    60d8:	1421c83a 	sub	r16,r2,r16
    60dc:	24400115 	stw	r17,4(r4)
    60e0:	9009883a 	mov	r4,r18
    60e4:	1c000015 	stw	r16,0(r3)
    60e8:	000fb040 	call	fb04 <__malloc_unlock>
    60ec:	00800044 	movi	r2,1
    60f0:	003fe706 	br	6090 <__alt_data_end+0xfffd6090>
    60f4:	000b883a 	mov	r5,zero
    60f8:	9009883a 	mov	r4,r18
    60fc:	00092e80 	call	92e8 <_sbrk_r>
    6100:	99000217 	ldw	r4,8(r19)
    6104:	014003c4 	movi	r5,15
    6108:	1107c83a 	sub	r3,r2,r4
    610c:	28ffdd0e 	bge	r5,r3,6084 <__alt_data_end+0xfffd6084>
    6110:	014000b4 	movhi	r5,2
    6114:	296d2b04 	addi	r5,r5,-19284
    6118:	29400017 	ldw	r5,0(r5)
    611c:	18c00054 	ori	r3,r3,1
    6120:	20c00115 	stw	r3,4(r4)
    6124:	00c000b4 	movhi	r3,2
    6128:	1145c83a 	sub	r2,r2,r5
    612c:	18fc7604 	addi	r3,r3,-3624
    6130:	18800015 	stw	r2,0(r3)
    6134:	003fd306 	br	6084 <__alt_data_end+0xfffd6084>

00006138 <_free_r>:
    6138:	28004126 	beq	r5,zero,6240 <_free_r+0x108>
    613c:	defffd04 	addi	sp,sp,-12
    6140:	dc400115 	stw	r17,4(sp)
    6144:	dc000015 	stw	r16,0(sp)
    6148:	2023883a 	mov	r17,r4
    614c:	2821883a 	mov	r16,r5
    6150:	dfc00215 	stw	ra,8(sp)
    6154:	000f9e40 	call	f9e4 <__malloc_lock>
    6158:	81ffff17 	ldw	r7,-4(r16)
    615c:	00bfff84 	movi	r2,-2
    6160:	010000b4 	movhi	r4,2
    6164:	81bffe04 	addi	r6,r16,-8
    6168:	3884703a 	and	r2,r7,r2
    616c:	2127a004 	addi	r4,r4,-24960
    6170:	308b883a 	add	r5,r6,r2
    6174:	2a400117 	ldw	r9,4(r5)
    6178:	22000217 	ldw	r8,8(r4)
    617c:	00ffff04 	movi	r3,-4
    6180:	48c6703a 	and	r3,r9,r3
    6184:	2a005726 	beq	r5,r8,62e4 <_free_r+0x1ac>
    6188:	28c00115 	stw	r3,4(r5)
    618c:	39c0004c 	andi	r7,r7,1
    6190:	3800091e 	bne	r7,zero,61b8 <_free_r+0x80>
    6194:	823ffe17 	ldw	r8,-8(r16)
    6198:	22400204 	addi	r9,r4,8
    619c:	320dc83a 	sub	r6,r6,r8
    61a0:	31c00217 	ldw	r7,8(r6)
    61a4:	1205883a 	add	r2,r2,r8
    61a8:	3a406526 	beq	r7,r9,6340 <_free_r+0x208>
    61ac:	32000317 	ldw	r8,12(r6)
    61b0:	3a000315 	stw	r8,12(r7)
    61b4:	41c00215 	stw	r7,8(r8)
    61b8:	28cf883a 	add	r7,r5,r3
    61bc:	39c00117 	ldw	r7,4(r7)
    61c0:	39c0004c 	andi	r7,r7,1
    61c4:	38003a26 	beq	r7,zero,62b0 <_free_r+0x178>
    61c8:	10c00054 	ori	r3,r2,1
    61cc:	30c00115 	stw	r3,4(r6)
    61d0:	3087883a 	add	r3,r6,r2
    61d4:	18800015 	stw	r2,0(r3)
    61d8:	00c07fc4 	movi	r3,511
    61dc:	18801936 	bltu	r3,r2,6244 <_free_r+0x10c>
    61e0:	1004d0fa 	srli	r2,r2,3
    61e4:	01c00044 	movi	r7,1
    61e8:	21400117 	ldw	r5,4(r4)
    61ec:	10c00044 	addi	r3,r2,1
    61f0:	18c7883a 	add	r3,r3,r3
    61f4:	1005d0ba 	srai	r2,r2,2
    61f8:	18c7883a 	add	r3,r3,r3
    61fc:	18c7883a 	add	r3,r3,r3
    6200:	1907883a 	add	r3,r3,r4
    6204:	3884983a 	sll	r2,r7,r2
    6208:	19c00017 	ldw	r7,0(r3)
    620c:	1a3ffe04 	addi	r8,r3,-8
    6210:	1144b03a 	or	r2,r2,r5
    6214:	32000315 	stw	r8,12(r6)
    6218:	31c00215 	stw	r7,8(r6)
    621c:	20800115 	stw	r2,4(r4)
    6220:	19800015 	stw	r6,0(r3)
    6224:	39800315 	stw	r6,12(r7)
    6228:	8809883a 	mov	r4,r17
    622c:	dfc00217 	ldw	ra,8(sp)
    6230:	dc400117 	ldw	r17,4(sp)
    6234:	dc000017 	ldw	r16,0(sp)
    6238:	dec00304 	addi	sp,sp,12
    623c:	000fb041 	jmpi	fb04 <__malloc_unlock>
    6240:	f800283a 	ret
    6244:	100ad27a 	srli	r5,r2,9
    6248:	00c00104 	movi	r3,4
    624c:	19404a36 	bltu	r3,r5,6378 <_free_r+0x240>
    6250:	100ad1ba 	srli	r5,r2,6
    6254:	28c00e44 	addi	r3,r5,57
    6258:	18c7883a 	add	r3,r3,r3
    625c:	29400e04 	addi	r5,r5,56
    6260:	18c7883a 	add	r3,r3,r3
    6264:	18c7883a 	add	r3,r3,r3
    6268:	1909883a 	add	r4,r3,r4
    626c:	20c00017 	ldw	r3,0(r4)
    6270:	01c000b4 	movhi	r7,2
    6274:	213ffe04 	addi	r4,r4,-8
    6278:	39e7a004 	addi	r7,r7,-24960
    627c:	20c04426 	beq	r4,r3,6390 <_free_r+0x258>
    6280:	01ffff04 	movi	r7,-4
    6284:	19400117 	ldw	r5,4(r3)
    6288:	29ca703a 	and	r5,r5,r7
    628c:	1140022e 	bgeu	r2,r5,6298 <_free_r+0x160>
    6290:	18c00217 	ldw	r3,8(r3)
    6294:	20fffb1e 	bne	r4,r3,6284 <__alt_data_end+0xfffd6284>
    6298:	19000317 	ldw	r4,12(r3)
    629c:	31000315 	stw	r4,12(r6)
    62a0:	30c00215 	stw	r3,8(r6)
    62a4:	21800215 	stw	r6,8(r4)
    62a8:	19800315 	stw	r6,12(r3)
    62ac:	003fde06 	br	6228 <__alt_data_end+0xfffd6228>
    62b0:	29c00217 	ldw	r7,8(r5)
    62b4:	10c5883a 	add	r2,r2,r3
    62b8:	00c000b4 	movhi	r3,2
    62bc:	18e7a204 	addi	r3,r3,-24952
    62c0:	38c03b26 	beq	r7,r3,63b0 <_free_r+0x278>
    62c4:	2a000317 	ldw	r8,12(r5)
    62c8:	11400054 	ori	r5,r2,1
    62cc:	3087883a 	add	r3,r6,r2
    62d0:	3a000315 	stw	r8,12(r7)
    62d4:	41c00215 	stw	r7,8(r8)
    62d8:	31400115 	stw	r5,4(r6)
    62dc:	18800015 	stw	r2,0(r3)
    62e0:	003fbd06 	br	61d8 <__alt_data_end+0xfffd61d8>
    62e4:	39c0004c 	andi	r7,r7,1
    62e8:	10c5883a 	add	r2,r2,r3
    62ec:	3800071e 	bne	r7,zero,630c <_free_r+0x1d4>
    62f0:	81fffe17 	ldw	r7,-8(r16)
    62f4:	31cdc83a 	sub	r6,r6,r7
    62f8:	30c00317 	ldw	r3,12(r6)
    62fc:	31400217 	ldw	r5,8(r6)
    6300:	11c5883a 	add	r2,r2,r7
    6304:	28c00315 	stw	r3,12(r5)
    6308:	19400215 	stw	r5,8(r3)
    630c:	10c00054 	ori	r3,r2,1
    6310:	30c00115 	stw	r3,4(r6)
    6314:	00c000b4 	movhi	r3,2
    6318:	18ed2c04 	addi	r3,r3,-19280
    631c:	18c00017 	ldw	r3,0(r3)
    6320:	21800215 	stw	r6,8(r4)
    6324:	10ffc036 	bltu	r2,r3,6228 <__alt_data_end+0xfffd6228>
    6328:	008000b4 	movhi	r2,2
    632c:	10b44004 	addi	r2,r2,-12032
    6330:	11400017 	ldw	r5,0(r2)
    6334:	8809883a 	mov	r4,r17
    6338:	00060140 	call	6014 <_malloc_trim_r>
    633c:	003fba06 	br	6228 <__alt_data_end+0xfffd6228>
    6340:	28c9883a 	add	r4,r5,r3
    6344:	21000117 	ldw	r4,4(r4)
    6348:	2100004c 	andi	r4,r4,1
    634c:	2000391e 	bne	r4,zero,6434 <_free_r+0x2fc>
    6350:	29c00217 	ldw	r7,8(r5)
    6354:	29000317 	ldw	r4,12(r5)
    6358:	1885883a 	add	r2,r3,r2
    635c:	10c00054 	ori	r3,r2,1
    6360:	39000315 	stw	r4,12(r7)
    6364:	21c00215 	stw	r7,8(r4)
    6368:	30c00115 	stw	r3,4(r6)
    636c:	308d883a 	add	r6,r6,r2
    6370:	30800015 	stw	r2,0(r6)
    6374:	003fac06 	br	6228 <__alt_data_end+0xfffd6228>
    6378:	00c00504 	movi	r3,20
    637c:	19401536 	bltu	r3,r5,63d4 <_free_r+0x29c>
    6380:	28c01704 	addi	r3,r5,92
    6384:	18c7883a 	add	r3,r3,r3
    6388:	294016c4 	addi	r5,r5,91
    638c:	003fb406 	br	6260 <__alt_data_end+0xfffd6260>
    6390:	280bd0ba 	srai	r5,r5,2
    6394:	00c00044 	movi	r3,1
    6398:	38800117 	ldw	r2,4(r7)
    639c:	194a983a 	sll	r5,r3,r5
    63a0:	2007883a 	mov	r3,r4
    63a4:	2884b03a 	or	r2,r5,r2
    63a8:	38800115 	stw	r2,4(r7)
    63ac:	003fbb06 	br	629c <__alt_data_end+0xfffd629c>
    63b0:	21800515 	stw	r6,20(r4)
    63b4:	21800415 	stw	r6,16(r4)
    63b8:	10c00054 	ori	r3,r2,1
    63bc:	31c00315 	stw	r7,12(r6)
    63c0:	31c00215 	stw	r7,8(r6)
    63c4:	30c00115 	stw	r3,4(r6)
    63c8:	308d883a 	add	r6,r6,r2
    63cc:	30800015 	stw	r2,0(r6)
    63d0:	003f9506 	br	6228 <__alt_data_end+0xfffd6228>
    63d4:	00c01504 	movi	r3,84
    63d8:	19400536 	bltu	r3,r5,63f0 <_free_r+0x2b8>
    63dc:	100ad33a 	srli	r5,r2,12
    63e0:	28c01bc4 	addi	r3,r5,111
    63e4:	18c7883a 	add	r3,r3,r3
    63e8:	29401b84 	addi	r5,r5,110
    63ec:	003f9c06 	br	6260 <__alt_data_end+0xfffd6260>
    63f0:	00c05504 	movi	r3,340
    63f4:	19400536 	bltu	r3,r5,640c <_free_r+0x2d4>
    63f8:	100ad3fa 	srli	r5,r2,15
    63fc:	28c01e04 	addi	r3,r5,120
    6400:	18c7883a 	add	r3,r3,r3
    6404:	29401dc4 	addi	r5,r5,119
    6408:	003f9506 	br	6260 <__alt_data_end+0xfffd6260>
    640c:	00c15504 	movi	r3,1364
    6410:	19400536 	bltu	r3,r5,6428 <_free_r+0x2f0>
    6414:	100ad4ba 	srli	r5,r2,18
    6418:	28c01f44 	addi	r3,r5,125
    641c:	18c7883a 	add	r3,r3,r3
    6420:	29401f04 	addi	r5,r5,124
    6424:	003f8e06 	br	6260 <__alt_data_end+0xfffd6260>
    6428:	00c03f84 	movi	r3,254
    642c:	01401f84 	movi	r5,126
    6430:	003f8b06 	br	6260 <__alt_data_end+0xfffd6260>
    6434:	10c00054 	ori	r3,r2,1
    6438:	30c00115 	stw	r3,4(r6)
    643c:	308d883a 	add	r6,r6,r2
    6440:	30800015 	stw	r2,0(r6)
    6444:	003f7806 	br	6228 <__alt_data_end+0xfffd6228>

00006448 <__sfvwrite_r>:
    6448:	30800217 	ldw	r2,8(r6)
    644c:	10006726 	beq	r2,zero,65ec <__sfvwrite_r+0x1a4>
    6450:	28c0030b 	ldhu	r3,12(r5)
    6454:	defff404 	addi	sp,sp,-48
    6458:	dd400715 	stw	r21,28(sp)
    645c:	dd000615 	stw	r20,24(sp)
    6460:	dc000215 	stw	r16,8(sp)
    6464:	dfc00b15 	stw	ra,44(sp)
    6468:	df000a15 	stw	fp,40(sp)
    646c:	ddc00915 	stw	r23,36(sp)
    6470:	dd800815 	stw	r22,32(sp)
    6474:	dcc00515 	stw	r19,20(sp)
    6478:	dc800415 	stw	r18,16(sp)
    647c:	dc400315 	stw	r17,12(sp)
    6480:	1880020c 	andi	r2,r3,8
    6484:	2821883a 	mov	r16,r5
    6488:	202b883a 	mov	r21,r4
    648c:	3029883a 	mov	r20,r6
    6490:	10002726 	beq	r2,zero,6530 <__sfvwrite_r+0xe8>
    6494:	28800417 	ldw	r2,16(r5)
    6498:	10002526 	beq	r2,zero,6530 <__sfvwrite_r+0xe8>
    649c:	1880008c 	andi	r2,r3,2
    64a0:	a4400017 	ldw	r17,0(r20)
    64a4:	10002a26 	beq	r2,zero,6550 <__sfvwrite_r+0x108>
    64a8:	05a00034 	movhi	r22,32768
    64ac:	0027883a 	mov	r19,zero
    64b0:	0025883a 	mov	r18,zero
    64b4:	b5bf0004 	addi	r22,r22,-1024
    64b8:	980d883a 	mov	r6,r19
    64bc:	a809883a 	mov	r4,r21
    64c0:	90004626 	beq	r18,zero,65dc <__sfvwrite_r+0x194>
    64c4:	900f883a 	mov	r7,r18
    64c8:	b480022e 	bgeu	r22,r18,64d4 <__sfvwrite_r+0x8c>
    64cc:	01e00034 	movhi	r7,32768
    64d0:	39ff0004 	addi	r7,r7,-1024
    64d4:	80800917 	ldw	r2,36(r16)
    64d8:	81400717 	ldw	r5,28(r16)
    64dc:	103ee83a 	callr	r2
    64e0:	00805a0e 	bge	zero,r2,664c <__sfvwrite_r+0x204>
    64e4:	a0c00217 	ldw	r3,8(r20)
    64e8:	98a7883a 	add	r19,r19,r2
    64ec:	90a5c83a 	sub	r18,r18,r2
    64f0:	1885c83a 	sub	r2,r3,r2
    64f4:	a0800215 	stw	r2,8(r20)
    64f8:	103fef1e 	bne	r2,zero,64b8 <__alt_data_end+0xfffd64b8>
    64fc:	0005883a 	mov	r2,zero
    6500:	dfc00b17 	ldw	ra,44(sp)
    6504:	df000a17 	ldw	fp,40(sp)
    6508:	ddc00917 	ldw	r23,36(sp)
    650c:	dd800817 	ldw	r22,32(sp)
    6510:	dd400717 	ldw	r21,28(sp)
    6514:	dd000617 	ldw	r20,24(sp)
    6518:	dcc00517 	ldw	r19,20(sp)
    651c:	dc800417 	ldw	r18,16(sp)
    6520:	dc400317 	ldw	r17,12(sp)
    6524:	dc000217 	ldw	r16,8(sp)
    6528:	dec00c04 	addi	sp,sp,48
    652c:	f800283a 	ret
    6530:	800b883a 	mov	r5,r16
    6534:	a809883a 	mov	r4,r21
    6538:	0003fb80 	call	3fb8 <__swsetup_r>
    653c:	1000ee1e 	bne	r2,zero,68f8 <__sfvwrite_r+0x4b0>
    6540:	80c0030b 	ldhu	r3,12(r16)
    6544:	a4400017 	ldw	r17,0(r20)
    6548:	1880008c 	andi	r2,r3,2
    654c:	103fd61e 	bne	r2,zero,64a8 <__alt_data_end+0xfffd64a8>
    6550:	1880004c 	andi	r2,r3,1
    6554:	1000421e 	bne	r2,zero,6660 <__sfvwrite_r+0x218>
    6558:	0039883a 	mov	fp,zero
    655c:	0025883a 	mov	r18,zero
    6560:	90001a26 	beq	r18,zero,65cc <__sfvwrite_r+0x184>
    6564:	1880800c 	andi	r2,r3,512
    6568:	84c00217 	ldw	r19,8(r16)
    656c:	10002126 	beq	r2,zero,65f4 <__sfvwrite_r+0x1ac>
    6570:	982f883a 	mov	r23,r19
    6574:	94c09636 	bltu	r18,r19,67d0 <__sfvwrite_r+0x388>
    6578:	1881200c 	andi	r2,r3,1152
    657c:	1000a11e 	bne	r2,zero,6804 <__sfvwrite_r+0x3bc>
    6580:	81000017 	ldw	r4,0(r16)
    6584:	b80d883a 	mov	r6,r23
    6588:	e00b883a 	mov	r5,fp
    658c:	00077e40 	call	77e4 <memmove>
    6590:	80c00217 	ldw	r3,8(r16)
    6594:	81000017 	ldw	r4,0(r16)
    6598:	9005883a 	mov	r2,r18
    659c:	1ce7c83a 	sub	r19,r3,r19
    65a0:	25cf883a 	add	r7,r4,r23
    65a4:	84c00215 	stw	r19,8(r16)
    65a8:	81c00015 	stw	r7,0(r16)
    65ac:	a0c00217 	ldw	r3,8(r20)
    65b0:	e0b9883a 	add	fp,fp,r2
    65b4:	90a5c83a 	sub	r18,r18,r2
    65b8:	18a7c83a 	sub	r19,r3,r2
    65bc:	a4c00215 	stw	r19,8(r20)
    65c0:	983fce26 	beq	r19,zero,64fc <__alt_data_end+0xfffd64fc>
    65c4:	80c0030b 	ldhu	r3,12(r16)
    65c8:	903fe61e 	bne	r18,zero,6564 <__alt_data_end+0xfffd6564>
    65cc:	8f000017 	ldw	fp,0(r17)
    65d0:	8c800117 	ldw	r18,4(r17)
    65d4:	8c400204 	addi	r17,r17,8
    65d8:	003fe106 	br	6560 <__alt_data_end+0xfffd6560>
    65dc:	8cc00017 	ldw	r19,0(r17)
    65e0:	8c800117 	ldw	r18,4(r17)
    65e4:	8c400204 	addi	r17,r17,8
    65e8:	003fb306 	br	64b8 <__alt_data_end+0xfffd64b8>
    65ec:	0005883a 	mov	r2,zero
    65f0:	f800283a 	ret
    65f4:	81000017 	ldw	r4,0(r16)
    65f8:	80800417 	ldw	r2,16(r16)
    65fc:	11005a36 	bltu	r2,r4,6768 <__sfvwrite_r+0x320>
    6600:	85c00517 	ldw	r23,20(r16)
    6604:	95c05836 	bltu	r18,r23,6768 <__sfvwrite_r+0x320>
    6608:	00a00034 	movhi	r2,32768
    660c:	10bfffc4 	addi	r2,r2,-1
    6610:	9009883a 	mov	r4,r18
    6614:	1480012e 	bgeu	r2,r18,661c <__sfvwrite_r+0x1d4>
    6618:	1009883a 	mov	r4,r2
    661c:	b80b883a 	mov	r5,r23
    6620:	0000ccc0 	call	ccc <__divsi3>
    6624:	b80b883a 	mov	r5,r23
    6628:	1009883a 	mov	r4,r2
    662c:	000c3c80 	call	c3c8 <__mulsi3>
    6630:	81400717 	ldw	r5,28(r16)
    6634:	80c00917 	ldw	r3,36(r16)
    6638:	100f883a 	mov	r7,r2
    663c:	e00d883a 	mov	r6,fp
    6640:	a809883a 	mov	r4,r21
    6644:	183ee83a 	callr	r3
    6648:	00bfd816 	blt	zero,r2,65ac <__alt_data_end+0xfffd65ac>
    664c:	8080030b 	ldhu	r2,12(r16)
    6650:	10801014 	ori	r2,r2,64
    6654:	8080030d 	sth	r2,12(r16)
    6658:	00bfffc4 	movi	r2,-1
    665c:	003fa806 	br	6500 <__alt_data_end+0xfffd6500>
    6660:	0027883a 	mov	r19,zero
    6664:	0011883a 	mov	r8,zero
    6668:	0039883a 	mov	fp,zero
    666c:	0025883a 	mov	r18,zero
    6670:	90001f26 	beq	r18,zero,66f0 <__sfvwrite_r+0x2a8>
    6674:	40005a26 	beq	r8,zero,67e0 <__sfvwrite_r+0x398>
    6678:	982d883a 	mov	r22,r19
    667c:	94c0012e 	bgeu	r18,r19,6684 <__sfvwrite_r+0x23c>
    6680:	902d883a 	mov	r22,r18
    6684:	81000017 	ldw	r4,0(r16)
    6688:	80800417 	ldw	r2,16(r16)
    668c:	b02f883a 	mov	r23,r22
    6690:	81c00517 	ldw	r7,20(r16)
    6694:	1100032e 	bgeu	r2,r4,66a4 <__sfvwrite_r+0x25c>
    6698:	80c00217 	ldw	r3,8(r16)
    669c:	38c7883a 	add	r3,r7,r3
    66a0:	1d801816 	blt	r3,r22,6704 <__sfvwrite_r+0x2bc>
    66a4:	b1c03e16 	blt	r22,r7,67a0 <__sfvwrite_r+0x358>
    66a8:	80800917 	ldw	r2,36(r16)
    66ac:	81400717 	ldw	r5,28(r16)
    66b0:	e00d883a 	mov	r6,fp
    66b4:	da000115 	stw	r8,4(sp)
    66b8:	a809883a 	mov	r4,r21
    66bc:	103ee83a 	callr	r2
    66c0:	102f883a 	mov	r23,r2
    66c4:	da000117 	ldw	r8,4(sp)
    66c8:	00bfe00e 	bge	zero,r2,664c <__alt_data_end+0xfffd664c>
    66cc:	9de7c83a 	sub	r19,r19,r23
    66d0:	98001f26 	beq	r19,zero,6750 <__sfvwrite_r+0x308>
    66d4:	a0800217 	ldw	r2,8(r20)
    66d8:	e5f9883a 	add	fp,fp,r23
    66dc:	95e5c83a 	sub	r18,r18,r23
    66e0:	15efc83a 	sub	r23,r2,r23
    66e4:	a5c00215 	stw	r23,8(r20)
    66e8:	b83f8426 	beq	r23,zero,64fc <__alt_data_end+0xfffd64fc>
    66ec:	903fe11e 	bne	r18,zero,6674 <__alt_data_end+0xfffd6674>
    66f0:	8f000017 	ldw	fp,0(r17)
    66f4:	8c800117 	ldw	r18,4(r17)
    66f8:	0011883a 	mov	r8,zero
    66fc:	8c400204 	addi	r17,r17,8
    6700:	003fdb06 	br	6670 <__alt_data_end+0xfffd6670>
    6704:	180d883a 	mov	r6,r3
    6708:	e00b883a 	mov	r5,fp
    670c:	da000115 	stw	r8,4(sp)
    6710:	d8c00015 	stw	r3,0(sp)
    6714:	00077e40 	call	77e4 <memmove>
    6718:	d8c00017 	ldw	r3,0(sp)
    671c:	80800017 	ldw	r2,0(r16)
    6720:	800b883a 	mov	r5,r16
    6724:	a809883a 	mov	r4,r21
    6728:	10c5883a 	add	r2,r2,r3
    672c:	80800015 	stw	r2,0(r16)
    6730:	d8c00015 	stw	r3,0(sp)
    6734:	0005bd80 	call	5bd8 <_fflush_r>
    6738:	d8c00017 	ldw	r3,0(sp)
    673c:	da000117 	ldw	r8,4(sp)
    6740:	103fc21e 	bne	r2,zero,664c <__alt_data_end+0xfffd664c>
    6744:	182f883a 	mov	r23,r3
    6748:	9de7c83a 	sub	r19,r19,r23
    674c:	983fe11e 	bne	r19,zero,66d4 <__alt_data_end+0xfffd66d4>
    6750:	800b883a 	mov	r5,r16
    6754:	a809883a 	mov	r4,r21
    6758:	0005bd80 	call	5bd8 <_fflush_r>
    675c:	103fbb1e 	bne	r2,zero,664c <__alt_data_end+0xfffd664c>
    6760:	0011883a 	mov	r8,zero
    6764:	003fdb06 	br	66d4 <__alt_data_end+0xfffd66d4>
    6768:	94c0012e 	bgeu	r18,r19,6770 <__sfvwrite_r+0x328>
    676c:	9027883a 	mov	r19,r18
    6770:	980d883a 	mov	r6,r19
    6774:	e00b883a 	mov	r5,fp
    6778:	00077e40 	call	77e4 <memmove>
    677c:	80800217 	ldw	r2,8(r16)
    6780:	80c00017 	ldw	r3,0(r16)
    6784:	14c5c83a 	sub	r2,r2,r19
    6788:	1cc7883a 	add	r3,r3,r19
    678c:	80800215 	stw	r2,8(r16)
    6790:	80c00015 	stw	r3,0(r16)
    6794:	10004326 	beq	r2,zero,68a4 <__sfvwrite_r+0x45c>
    6798:	9805883a 	mov	r2,r19
    679c:	003f8306 	br	65ac <__alt_data_end+0xfffd65ac>
    67a0:	b00d883a 	mov	r6,r22
    67a4:	e00b883a 	mov	r5,fp
    67a8:	da000115 	stw	r8,4(sp)
    67ac:	00077e40 	call	77e4 <memmove>
    67b0:	80800217 	ldw	r2,8(r16)
    67b4:	80c00017 	ldw	r3,0(r16)
    67b8:	da000117 	ldw	r8,4(sp)
    67bc:	1585c83a 	sub	r2,r2,r22
    67c0:	1dad883a 	add	r22,r3,r22
    67c4:	80800215 	stw	r2,8(r16)
    67c8:	85800015 	stw	r22,0(r16)
    67cc:	003fbf06 	br	66cc <__alt_data_end+0xfffd66cc>
    67d0:	81000017 	ldw	r4,0(r16)
    67d4:	9027883a 	mov	r19,r18
    67d8:	902f883a 	mov	r23,r18
    67dc:	003f6906 	br	6584 <__alt_data_end+0xfffd6584>
    67e0:	900d883a 	mov	r6,r18
    67e4:	01400284 	movi	r5,10
    67e8:	e009883a 	mov	r4,fp
    67ec:	000753c0 	call	753c <memchr>
    67f0:	10003e26 	beq	r2,zero,68ec <__sfvwrite_r+0x4a4>
    67f4:	10800044 	addi	r2,r2,1
    67f8:	1727c83a 	sub	r19,r2,fp
    67fc:	02000044 	movi	r8,1
    6800:	003f9d06 	br	6678 <__alt_data_end+0xfffd6678>
    6804:	80800517 	ldw	r2,20(r16)
    6808:	81400417 	ldw	r5,16(r16)
    680c:	81c00017 	ldw	r7,0(r16)
    6810:	10a7883a 	add	r19,r2,r2
    6814:	9885883a 	add	r2,r19,r2
    6818:	1026d7fa 	srli	r19,r2,31
    681c:	396dc83a 	sub	r22,r7,r5
    6820:	b1000044 	addi	r4,r22,1
    6824:	9885883a 	add	r2,r19,r2
    6828:	1027d07a 	srai	r19,r2,1
    682c:	2485883a 	add	r2,r4,r18
    6830:	980d883a 	mov	r6,r19
    6834:	9880022e 	bgeu	r19,r2,6840 <__sfvwrite_r+0x3f8>
    6838:	1027883a 	mov	r19,r2
    683c:	100d883a 	mov	r6,r2
    6840:	18c1000c 	andi	r3,r3,1024
    6844:	18001c26 	beq	r3,zero,68b8 <__sfvwrite_r+0x470>
    6848:	300b883a 	mov	r5,r6
    684c:	a809883a 	mov	r4,r21
    6850:	0006d300 	call	6d30 <_malloc_r>
    6854:	102f883a 	mov	r23,r2
    6858:	10002926 	beq	r2,zero,6900 <__sfvwrite_r+0x4b8>
    685c:	81400417 	ldw	r5,16(r16)
    6860:	b00d883a 	mov	r6,r22
    6864:	1009883a 	mov	r4,r2
    6868:	000769c0 	call	769c <memcpy>
    686c:	8080030b 	ldhu	r2,12(r16)
    6870:	00fedfc4 	movi	r3,-1153
    6874:	10c4703a 	and	r2,r2,r3
    6878:	10802014 	ori	r2,r2,128
    687c:	8080030d 	sth	r2,12(r16)
    6880:	bd89883a 	add	r4,r23,r22
    6884:	9d8fc83a 	sub	r7,r19,r22
    6888:	85c00415 	stw	r23,16(r16)
    688c:	84c00515 	stw	r19,20(r16)
    6890:	81000015 	stw	r4,0(r16)
    6894:	9027883a 	mov	r19,r18
    6898:	81c00215 	stw	r7,8(r16)
    689c:	902f883a 	mov	r23,r18
    68a0:	003f3806 	br	6584 <__alt_data_end+0xfffd6584>
    68a4:	800b883a 	mov	r5,r16
    68a8:	a809883a 	mov	r4,r21
    68ac:	0005bd80 	call	5bd8 <_fflush_r>
    68b0:	103fb926 	beq	r2,zero,6798 <__alt_data_end+0xfffd6798>
    68b4:	003f6506 	br	664c <__alt_data_end+0xfffd664c>
    68b8:	a809883a 	mov	r4,r21
    68bc:	0008b200 	call	8b20 <_realloc_r>
    68c0:	102f883a 	mov	r23,r2
    68c4:	103fee1e 	bne	r2,zero,6880 <__alt_data_end+0xfffd6880>
    68c8:	81400417 	ldw	r5,16(r16)
    68cc:	a809883a 	mov	r4,r21
    68d0:	00061380 	call	6138 <_free_r>
    68d4:	8080030b 	ldhu	r2,12(r16)
    68d8:	00ffdfc4 	movi	r3,-129
    68dc:	1884703a 	and	r2,r3,r2
    68e0:	00c00304 	movi	r3,12
    68e4:	a8c00015 	stw	r3,0(r21)
    68e8:	003f5906 	br	6650 <__alt_data_end+0xfffd6650>
    68ec:	94c00044 	addi	r19,r18,1
    68f0:	02000044 	movi	r8,1
    68f4:	003f6006 	br	6678 <__alt_data_end+0xfffd6678>
    68f8:	00bfffc4 	movi	r2,-1
    68fc:	003f0006 	br	6500 <__alt_data_end+0xfffd6500>
    6900:	00800304 	movi	r2,12
    6904:	a8800015 	stw	r2,0(r21)
    6908:	8080030b 	ldhu	r2,12(r16)
    690c:	003f5006 	br	6650 <__alt_data_end+0xfffd6650>

00006910 <_fwalk>:
    6910:	defff704 	addi	sp,sp,-36
    6914:	dd000415 	stw	r20,16(sp)
    6918:	dfc00815 	stw	ra,32(sp)
    691c:	ddc00715 	stw	r23,28(sp)
    6920:	dd800615 	stw	r22,24(sp)
    6924:	dd400515 	stw	r21,20(sp)
    6928:	dcc00315 	stw	r19,12(sp)
    692c:	dc800215 	stw	r18,8(sp)
    6930:	dc400115 	stw	r17,4(sp)
    6934:	dc000015 	stw	r16,0(sp)
    6938:	2500b804 	addi	r20,r4,736
    693c:	a0002326 	beq	r20,zero,69cc <_fwalk+0xbc>
    6940:	282b883a 	mov	r21,r5
    6944:	002f883a 	mov	r23,zero
    6948:	05800044 	movi	r22,1
    694c:	04ffffc4 	movi	r19,-1
    6950:	a4400117 	ldw	r17,4(r20)
    6954:	a4800217 	ldw	r18,8(r20)
    6958:	8c7fffc4 	addi	r17,r17,-1
    695c:	88000d16 	blt	r17,zero,6994 <_fwalk+0x84>
    6960:	94000304 	addi	r16,r18,12
    6964:	94800384 	addi	r18,r18,14
    6968:	8080000b 	ldhu	r2,0(r16)
    696c:	8c7fffc4 	addi	r17,r17,-1
    6970:	813ffd04 	addi	r4,r16,-12
    6974:	b080042e 	bgeu	r22,r2,6988 <_fwalk+0x78>
    6978:	9080000f 	ldh	r2,0(r18)
    697c:	14c00226 	beq	r2,r19,6988 <_fwalk+0x78>
    6980:	a83ee83a 	callr	r21
    6984:	b8aeb03a 	or	r23,r23,r2
    6988:	84001a04 	addi	r16,r16,104
    698c:	94801a04 	addi	r18,r18,104
    6990:	8cfff51e 	bne	r17,r19,6968 <__alt_data_end+0xfffd6968>
    6994:	a5000017 	ldw	r20,0(r20)
    6998:	a03fed1e 	bne	r20,zero,6950 <__alt_data_end+0xfffd6950>
    699c:	b805883a 	mov	r2,r23
    69a0:	dfc00817 	ldw	ra,32(sp)
    69a4:	ddc00717 	ldw	r23,28(sp)
    69a8:	dd800617 	ldw	r22,24(sp)
    69ac:	dd400517 	ldw	r21,20(sp)
    69b0:	dd000417 	ldw	r20,16(sp)
    69b4:	dcc00317 	ldw	r19,12(sp)
    69b8:	dc800217 	ldw	r18,8(sp)
    69bc:	dc400117 	ldw	r17,4(sp)
    69c0:	dc000017 	ldw	r16,0(sp)
    69c4:	dec00904 	addi	sp,sp,36
    69c8:	f800283a 	ret
    69cc:	002f883a 	mov	r23,zero
    69d0:	003ff206 	br	699c <__alt_data_end+0xfffd699c>

000069d4 <_fwalk_reent>:
    69d4:	defff704 	addi	sp,sp,-36
    69d8:	dd000415 	stw	r20,16(sp)
    69dc:	dfc00815 	stw	ra,32(sp)
    69e0:	ddc00715 	stw	r23,28(sp)
    69e4:	dd800615 	stw	r22,24(sp)
    69e8:	dd400515 	stw	r21,20(sp)
    69ec:	dcc00315 	stw	r19,12(sp)
    69f0:	dc800215 	stw	r18,8(sp)
    69f4:	dc400115 	stw	r17,4(sp)
    69f8:	dc000015 	stw	r16,0(sp)
    69fc:	2500b804 	addi	r20,r4,736
    6a00:	a0002326 	beq	r20,zero,6a90 <_fwalk_reent+0xbc>
    6a04:	282b883a 	mov	r21,r5
    6a08:	2027883a 	mov	r19,r4
    6a0c:	002f883a 	mov	r23,zero
    6a10:	05800044 	movi	r22,1
    6a14:	04bfffc4 	movi	r18,-1
    6a18:	a4400117 	ldw	r17,4(r20)
    6a1c:	a4000217 	ldw	r16,8(r20)
    6a20:	8c7fffc4 	addi	r17,r17,-1
    6a24:	88000c16 	blt	r17,zero,6a58 <_fwalk_reent+0x84>
    6a28:	84000304 	addi	r16,r16,12
    6a2c:	8080000b 	ldhu	r2,0(r16)
    6a30:	8c7fffc4 	addi	r17,r17,-1
    6a34:	817ffd04 	addi	r5,r16,-12
    6a38:	b080052e 	bgeu	r22,r2,6a50 <_fwalk_reent+0x7c>
    6a3c:	8080008f 	ldh	r2,2(r16)
    6a40:	9809883a 	mov	r4,r19
    6a44:	14800226 	beq	r2,r18,6a50 <_fwalk_reent+0x7c>
    6a48:	a83ee83a 	callr	r21
    6a4c:	b8aeb03a 	or	r23,r23,r2
    6a50:	84001a04 	addi	r16,r16,104
    6a54:	8cbff51e 	bne	r17,r18,6a2c <__alt_data_end+0xfffd6a2c>
    6a58:	a5000017 	ldw	r20,0(r20)
    6a5c:	a03fee1e 	bne	r20,zero,6a18 <__alt_data_end+0xfffd6a18>
    6a60:	b805883a 	mov	r2,r23
    6a64:	dfc00817 	ldw	ra,32(sp)
    6a68:	ddc00717 	ldw	r23,28(sp)
    6a6c:	dd800617 	ldw	r22,24(sp)
    6a70:	dd400517 	ldw	r21,20(sp)
    6a74:	dd000417 	ldw	r20,16(sp)
    6a78:	dcc00317 	ldw	r19,12(sp)
    6a7c:	dc800217 	ldw	r18,8(sp)
    6a80:	dc400117 	ldw	r17,4(sp)
    6a84:	dc000017 	ldw	r16,0(sp)
    6a88:	dec00904 	addi	sp,sp,36
    6a8c:	f800283a 	ret
    6a90:	002f883a 	mov	r23,zero
    6a94:	003ff206 	br	6a60 <__alt_data_end+0xfffd6a60>

00006a98 <_setlocale_r>:
    6a98:	30001b26 	beq	r6,zero,6b08 <_setlocale_r+0x70>
    6a9c:	014000b4 	movhi	r5,2
    6aa0:	defffe04 	addi	sp,sp,-8
    6aa4:	29659104 	addi	r5,r5,-27068
    6aa8:	3009883a 	mov	r4,r6
    6aac:	dc000015 	stw	r16,0(sp)
    6ab0:	dfc00115 	stw	ra,4(sp)
    6ab4:	3021883a 	mov	r16,r6
    6ab8:	00095dc0 	call	95dc <strcmp>
    6abc:	1000061e 	bne	r2,zero,6ad8 <_setlocale_r+0x40>
    6ac0:	008000b4 	movhi	r2,2
    6ac4:	10a57204 	addi	r2,r2,-27192
    6ac8:	dfc00117 	ldw	ra,4(sp)
    6acc:	dc000017 	ldw	r16,0(sp)
    6ad0:	dec00204 	addi	sp,sp,8
    6ad4:	f800283a 	ret
    6ad8:	014000b4 	movhi	r5,2
    6adc:	29657204 	addi	r5,r5,-27192
    6ae0:	8009883a 	mov	r4,r16
    6ae4:	00095dc0 	call	95dc <strcmp>
    6ae8:	103ff526 	beq	r2,zero,6ac0 <__alt_data_end+0xfffd6ac0>
    6aec:	014000b4 	movhi	r5,2
    6af0:	29657c04 	addi	r5,r5,-27152
    6af4:	8009883a 	mov	r4,r16
    6af8:	00095dc0 	call	95dc <strcmp>
    6afc:	103ff026 	beq	r2,zero,6ac0 <__alt_data_end+0xfffd6ac0>
    6b00:	0005883a 	mov	r2,zero
    6b04:	003ff006 	br	6ac8 <__alt_data_end+0xfffd6ac8>
    6b08:	008000b4 	movhi	r2,2
    6b0c:	10a57204 	addi	r2,r2,-27192
    6b10:	f800283a 	ret

00006b14 <__locale_charset>:
    6b14:	008000b4 	movhi	r2,2
    6b18:	10a78a04 	addi	r2,r2,-25048
    6b1c:	f800283a 	ret

00006b20 <__locale_mb_cur_max>:
    6b20:	008000b4 	movhi	r2,2
    6b24:	10ad2a04 	addi	r2,r2,-19288
    6b28:	10800017 	ldw	r2,0(r2)
    6b2c:	f800283a 	ret

00006b30 <__locale_msgcharset>:
    6b30:	008000b4 	movhi	r2,2
    6b34:	10a78204 	addi	r2,r2,-25080
    6b38:	f800283a 	ret

00006b3c <__locale_cjk_lang>:
    6b3c:	0005883a 	mov	r2,zero
    6b40:	f800283a 	ret

00006b44 <_localeconv_r>:
    6b44:	008000b4 	movhi	r2,2
    6b48:	10a79204 	addi	r2,r2,-25016
    6b4c:	f800283a 	ret

00006b50 <setlocale>:
    6b50:	008000b4 	movhi	r2,2
    6b54:	10ad2904 	addi	r2,r2,-19292
    6b58:	280d883a 	mov	r6,r5
    6b5c:	200b883a 	mov	r5,r4
    6b60:	11000017 	ldw	r4,0(r2)
    6b64:	0006a981 	jmpi	6a98 <_setlocale_r>

00006b68 <localeconv>:
    6b68:	008000b4 	movhi	r2,2
    6b6c:	10a79204 	addi	r2,r2,-25016
    6b70:	f800283a 	ret

00006b74 <__smakebuf_r>:
    6b74:	2880030b 	ldhu	r2,12(r5)
    6b78:	10c0008c 	andi	r3,r2,2
    6b7c:	1800411e 	bne	r3,zero,6c84 <__smakebuf_r+0x110>
    6b80:	deffec04 	addi	sp,sp,-80
    6b84:	dc000f15 	stw	r16,60(sp)
    6b88:	2821883a 	mov	r16,r5
    6b8c:	2940038f 	ldh	r5,14(r5)
    6b90:	dc401015 	stw	r17,64(sp)
    6b94:	dfc01315 	stw	ra,76(sp)
    6b98:	dcc01215 	stw	r19,72(sp)
    6b9c:	dc801115 	stw	r18,68(sp)
    6ba0:	2023883a 	mov	r17,r4
    6ba4:	28001c16 	blt	r5,zero,6c18 <__smakebuf_r+0xa4>
    6ba8:	d80d883a 	mov	r6,sp
    6bac:	000b24c0 	call	b24c <_fstat_r>
    6bb0:	10001816 	blt	r2,zero,6c14 <__smakebuf_r+0xa0>
    6bb4:	d8800117 	ldw	r2,4(sp)
    6bb8:	00e00014 	movui	r3,32768
    6bbc:	10bc000c 	andi	r2,r2,61440
    6bc0:	14c80020 	cmpeqi	r19,r2,8192
    6bc4:	10c03726 	beq	r2,r3,6ca4 <__smakebuf_r+0x130>
    6bc8:	80c0030b 	ldhu	r3,12(r16)
    6bcc:	18c20014 	ori	r3,r3,2048
    6bd0:	80c0030d 	sth	r3,12(r16)
    6bd4:	00c80004 	movi	r3,8192
    6bd8:	10c0521e 	bne	r2,r3,6d24 <__smakebuf_r+0x1b0>
    6bdc:	8140038f 	ldh	r5,14(r16)
    6be0:	8809883a 	mov	r4,r17
    6be4:	000b2a80 	call	b2a8 <_isatty_r>
    6be8:	10004c26 	beq	r2,zero,6d1c <__smakebuf_r+0x1a8>
    6bec:	8080030b 	ldhu	r2,12(r16)
    6bf0:	80c010c4 	addi	r3,r16,67
    6bf4:	80c00015 	stw	r3,0(r16)
    6bf8:	10800054 	ori	r2,r2,1
    6bfc:	8080030d 	sth	r2,12(r16)
    6c00:	00800044 	movi	r2,1
    6c04:	80c00415 	stw	r3,16(r16)
    6c08:	80800515 	stw	r2,20(r16)
    6c0c:	04810004 	movi	r18,1024
    6c10:	00000706 	br	6c30 <__smakebuf_r+0xbc>
    6c14:	8080030b 	ldhu	r2,12(r16)
    6c18:	10c0200c 	andi	r3,r2,128
    6c1c:	18001f1e 	bne	r3,zero,6c9c <__smakebuf_r+0x128>
    6c20:	04810004 	movi	r18,1024
    6c24:	10820014 	ori	r2,r2,2048
    6c28:	8080030d 	sth	r2,12(r16)
    6c2c:	0027883a 	mov	r19,zero
    6c30:	900b883a 	mov	r5,r18
    6c34:	8809883a 	mov	r4,r17
    6c38:	0006d300 	call	6d30 <_malloc_r>
    6c3c:	10002c26 	beq	r2,zero,6cf0 <__smakebuf_r+0x17c>
    6c40:	80c0030b 	ldhu	r3,12(r16)
    6c44:	01000034 	movhi	r4,0
    6c48:	21171b04 	addi	r4,r4,23660
    6c4c:	89000f15 	stw	r4,60(r17)
    6c50:	18c02014 	ori	r3,r3,128
    6c54:	80c0030d 	sth	r3,12(r16)
    6c58:	80800015 	stw	r2,0(r16)
    6c5c:	80800415 	stw	r2,16(r16)
    6c60:	84800515 	stw	r18,20(r16)
    6c64:	98001a1e 	bne	r19,zero,6cd0 <__smakebuf_r+0x15c>
    6c68:	dfc01317 	ldw	ra,76(sp)
    6c6c:	dcc01217 	ldw	r19,72(sp)
    6c70:	dc801117 	ldw	r18,68(sp)
    6c74:	dc401017 	ldw	r17,64(sp)
    6c78:	dc000f17 	ldw	r16,60(sp)
    6c7c:	dec01404 	addi	sp,sp,80
    6c80:	f800283a 	ret
    6c84:	288010c4 	addi	r2,r5,67
    6c88:	28800015 	stw	r2,0(r5)
    6c8c:	28800415 	stw	r2,16(r5)
    6c90:	00800044 	movi	r2,1
    6c94:	28800515 	stw	r2,20(r5)
    6c98:	f800283a 	ret
    6c9c:	04801004 	movi	r18,64
    6ca0:	003fe006 	br	6c24 <__alt_data_end+0xfffd6c24>
    6ca4:	81000a17 	ldw	r4,40(r16)
    6ca8:	00c00074 	movhi	r3,1
    6cac:	18e50504 	addi	r3,r3,-27628
    6cb0:	20ffc51e 	bne	r4,r3,6bc8 <__alt_data_end+0xfffd6bc8>
    6cb4:	8080030b 	ldhu	r2,12(r16)
    6cb8:	04810004 	movi	r18,1024
    6cbc:	84801315 	stw	r18,76(r16)
    6cc0:	1484b03a 	or	r2,r2,r18
    6cc4:	8080030d 	sth	r2,12(r16)
    6cc8:	0027883a 	mov	r19,zero
    6ccc:	003fd806 	br	6c30 <__alt_data_end+0xfffd6c30>
    6cd0:	8140038f 	ldh	r5,14(r16)
    6cd4:	8809883a 	mov	r4,r17
    6cd8:	000b2a80 	call	b2a8 <_isatty_r>
    6cdc:	103fe226 	beq	r2,zero,6c68 <__alt_data_end+0xfffd6c68>
    6ce0:	8080030b 	ldhu	r2,12(r16)
    6ce4:	10800054 	ori	r2,r2,1
    6ce8:	8080030d 	sth	r2,12(r16)
    6cec:	003fde06 	br	6c68 <__alt_data_end+0xfffd6c68>
    6cf0:	8080030b 	ldhu	r2,12(r16)
    6cf4:	10c0800c 	andi	r3,r2,512
    6cf8:	183fdb1e 	bne	r3,zero,6c68 <__alt_data_end+0xfffd6c68>
    6cfc:	10800094 	ori	r2,r2,2
    6d00:	80c010c4 	addi	r3,r16,67
    6d04:	8080030d 	sth	r2,12(r16)
    6d08:	00800044 	movi	r2,1
    6d0c:	80c00015 	stw	r3,0(r16)
    6d10:	80c00415 	stw	r3,16(r16)
    6d14:	80800515 	stw	r2,20(r16)
    6d18:	003fd306 	br	6c68 <__alt_data_end+0xfffd6c68>
    6d1c:	04810004 	movi	r18,1024
    6d20:	003fc306 	br	6c30 <__alt_data_end+0xfffd6c30>
    6d24:	0027883a 	mov	r19,zero
    6d28:	04810004 	movi	r18,1024
    6d2c:	003fc006 	br	6c30 <__alt_data_end+0xfffd6c30>

00006d30 <_malloc_r>:
    6d30:	defff504 	addi	sp,sp,-44
    6d34:	dc800315 	stw	r18,12(sp)
    6d38:	dfc00a15 	stw	ra,40(sp)
    6d3c:	df000915 	stw	fp,36(sp)
    6d40:	ddc00815 	stw	r23,32(sp)
    6d44:	dd800715 	stw	r22,28(sp)
    6d48:	dd400615 	stw	r21,24(sp)
    6d4c:	dd000515 	stw	r20,20(sp)
    6d50:	dcc00415 	stw	r19,16(sp)
    6d54:	dc400215 	stw	r17,8(sp)
    6d58:	dc000115 	stw	r16,4(sp)
    6d5c:	288002c4 	addi	r2,r5,11
    6d60:	00c00584 	movi	r3,22
    6d64:	2025883a 	mov	r18,r4
    6d68:	18807f2e 	bgeu	r3,r2,6f68 <_malloc_r+0x238>
    6d6c:	047ffe04 	movi	r17,-8
    6d70:	1462703a 	and	r17,r2,r17
    6d74:	8800a316 	blt	r17,zero,7004 <_malloc_r+0x2d4>
    6d78:	8940a236 	bltu	r17,r5,7004 <_malloc_r+0x2d4>
    6d7c:	000f9e40 	call	f9e4 <__malloc_lock>
    6d80:	00807dc4 	movi	r2,503
    6d84:	1441e92e 	bgeu	r2,r17,752c <_malloc_r+0x7fc>
    6d88:	8804d27a 	srli	r2,r17,9
    6d8c:	1000a126 	beq	r2,zero,7014 <_malloc_r+0x2e4>
    6d90:	00c00104 	movi	r3,4
    6d94:	18811e36 	bltu	r3,r2,7210 <_malloc_r+0x4e0>
    6d98:	8804d1ba 	srli	r2,r17,6
    6d9c:	12000e44 	addi	r8,r2,57
    6da0:	11c00e04 	addi	r7,r2,56
    6da4:	4209883a 	add	r4,r8,r8
    6da8:	04c000b4 	movhi	r19,2
    6dac:	2109883a 	add	r4,r4,r4
    6db0:	9ce7a004 	addi	r19,r19,-24960
    6db4:	2109883a 	add	r4,r4,r4
    6db8:	9909883a 	add	r4,r19,r4
    6dbc:	24000117 	ldw	r16,4(r4)
    6dc0:	213ffe04 	addi	r4,r4,-8
    6dc4:	24009726 	beq	r4,r16,7024 <_malloc_r+0x2f4>
    6dc8:	80800117 	ldw	r2,4(r16)
    6dcc:	01bfff04 	movi	r6,-4
    6dd0:	014003c4 	movi	r5,15
    6dd4:	1184703a 	and	r2,r2,r6
    6dd8:	1447c83a 	sub	r3,r2,r17
    6ddc:	28c00716 	blt	r5,r3,6dfc <_malloc_r+0xcc>
    6de0:	1800920e 	bge	r3,zero,702c <_malloc_r+0x2fc>
    6de4:	84000317 	ldw	r16,12(r16)
    6de8:	24008e26 	beq	r4,r16,7024 <_malloc_r+0x2f4>
    6dec:	80800117 	ldw	r2,4(r16)
    6df0:	1184703a 	and	r2,r2,r6
    6df4:	1447c83a 	sub	r3,r2,r17
    6df8:	28fff90e 	bge	r5,r3,6de0 <__alt_data_end+0xfffd6de0>
    6dfc:	3809883a 	mov	r4,r7
    6e00:	018000b4 	movhi	r6,2
    6e04:	9c000417 	ldw	r16,16(r19)
    6e08:	31a7a004 	addi	r6,r6,-24960
    6e0c:	32000204 	addi	r8,r6,8
    6e10:	82013426 	beq	r16,r8,72e4 <_malloc_r+0x5b4>
    6e14:	80c00117 	ldw	r3,4(r16)
    6e18:	00bfff04 	movi	r2,-4
    6e1c:	188e703a 	and	r7,r3,r2
    6e20:	3c45c83a 	sub	r2,r7,r17
    6e24:	00c003c4 	movi	r3,15
    6e28:	18811f16 	blt	r3,r2,72a8 <_malloc_r+0x578>
    6e2c:	32000515 	stw	r8,20(r6)
    6e30:	32000415 	stw	r8,16(r6)
    6e34:	10007f0e 	bge	r2,zero,7034 <_malloc_r+0x304>
    6e38:	00807fc4 	movi	r2,511
    6e3c:	11c0fd36 	bltu	r2,r7,7234 <_malloc_r+0x504>
    6e40:	3806d0fa 	srli	r3,r7,3
    6e44:	01c00044 	movi	r7,1
    6e48:	30800117 	ldw	r2,4(r6)
    6e4c:	19400044 	addi	r5,r3,1
    6e50:	294b883a 	add	r5,r5,r5
    6e54:	1807d0ba 	srai	r3,r3,2
    6e58:	294b883a 	add	r5,r5,r5
    6e5c:	294b883a 	add	r5,r5,r5
    6e60:	298b883a 	add	r5,r5,r6
    6e64:	38c6983a 	sll	r3,r7,r3
    6e68:	29c00017 	ldw	r7,0(r5)
    6e6c:	2a7ffe04 	addi	r9,r5,-8
    6e70:	1886b03a 	or	r3,r3,r2
    6e74:	82400315 	stw	r9,12(r16)
    6e78:	81c00215 	stw	r7,8(r16)
    6e7c:	30c00115 	stw	r3,4(r6)
    6e80:	2c000015 	stw	r16,0(r5)
    6e84:	3c000315 	stw	r16,12(r7)
    6e88:	2005d0ba 	srai	r2,r4,2
    6e8c:	01400044 	movi	r5,1
    6e90:	288a983a 	sll	r5,r5,r2
    6e94:	19406f36 	bltu	r3,r5,7054 <_malloc_r+0x324>
    6e98:	28c4703a 	and	r2,r5,r3
    6e9c:	10000a1e 	bne	r2,zero,6ec8 <_malloc_r+0x198>
    6ea0:	00bfff04 	movi	r2,-4
    6ea4:	294b883a 	add	r5,r5,r5
    6ea8:	2088703a 	and	r4,r4,r2
    6eac:	28c4703a 	and	r2,r5,r3
    6eb0:	21000104 	addi	r4,r4,4
    6eb4:	1000041e 	bne	r2,zero,6ec8 <_malloc_r+0x198>
    6eb8:	294b883a 	add	r5,r5,r5
    6ebc:	28c4703a 	and	r2,r5,r3
    6ec0:	21000104 	addi	r4,r4,4
    6ec4:	103ffc26 	beq	r2,zero,6eb8 <__alt_data_end+0xfffd6eb8>
    6ec8:	02bfff04 	movi	r10,-4
    6ecc:	024003c4 	movi	r9,15
    6ed0:	21800044 	addi	r6,r4,1
    6ed4:	318d883a 	add	r6,r6,r6
    6ed8:	318d883a 	add	r6,r6,r6
    6edc:	318d883a 	add	r6,r6,r6
    6ee0:	998d883a 	add	r6,r19,r6
    6ee4:	333ffe04 	addi	r12,r6,-8
    6ee8:	2017883a 	mov	r11,r4
    6eec:	31800104 	addi	r6,r6,4
    6ef0:	34000017 	ldw	r16,0(r6)
    6ef4:	31fffd04 	addi	r7,r6,-12
    6ef8:	81c0041e 	bne	r16,r7,6f0c <_malloc_r+0x1dc>
    6efc:	0000fb06 	br	72ec <_malloc_r+0x5bc>
    6f00:	1801030e 	bge	r3,zero,7310 <_malloc_r+0x5e0>
    6f04:	84000317 	ldw	r16,12(r16)
    6f08:	81c0f826 	beq	r16,r7,72ec <_malloc_r+0x5bc>
    6f0c:	80800117 	ldw	r2,4(r16)
    6f10:	1284703a 	and	r2,r2,r10
    6f14:	1447c83a 	sub	r3,r2,r17
    6f18:	48fff90e 	bge	r9,r3,6f00 <__alt_data_end+0xfffd6f00>
    6f1c:	80800317 	ldw	r2,12(r16)
    6f20:	81000217 	ldw	r4,8(r16)
    6f24:	89400054 	ori	r5,r17,1
    6f28:	81400115 	stw	r5,4(r16)
    6f2c:	20800315 	stw	r2,12(r4)
    6f30:	11000215 	stw	r4,8(r2)
    6f34:	8463883a 	add	r17,r16,r17
    6f38:	9c400515 	stw	r17,20(r19)
    6f3c:	9c400415 	stw	r17,16(r19)
    6f40:	18800054 	ori	r2,r3,1
    6f44:	88800115 	stw	r2,4(r17)
    6f48:	8a000315 	stw	r8,12(r17)
    6f4c:	8a000215 	stw	r8,8(r17)
    6f50:	88e3883a 	add	r17,r17,r3
    6f54:	88c00015 	stw	r3,0(r17)
    6f58:	9009883a 	mov	r4,r18
    6f5c:	000fb040 	call	fb04 <__malloc_unlock>
    6f60:	80800204 	addi	r2,r16,8
    6f64:	00001b06 	br	6fd4 <_malloc_r+0x2a4>
    6f68:	04400404 	movi	r17,16
    6f6c:	89402536 	bltu	r17,r5,7004 <_malloc_r+0x2d4>
    6f70:	000f9e40 	call	f9e4 <__malloc_lock>
    6f74:	00800184 	movi	r2,6
    6f78:	01000084 	movi	r4,2
    6f7c:	04c000b4 	movhi	r19,2
    6f80:	1085883a 	add	r2,r2,r2
    6f84:	9ce7a004 	addi	r19,r19,-24960
    6f88:	1085883a 	add	r2,r2,r2
    6f8c:	9885883a 	add	r2,r19,r2
    6f90:	14000117 	ldw	r16,4(r2)
    6f94:	10fffe04 	addi	r3,r2,-8
    6f98:	80c0d926 	beq	r16,r3,7300 <_malloc_r+0x5d0>
    6f9c:	80c00117 	ldw	r3,4(r16)
    6fa0:	81000317 	ldw	r4,12(r16)
    6fa4:	00bfff04 	movi	r2,-4
    6fa8:	1884703a 	and	r2,r3,r2
    6fac:	81400217 	ldw	r5,8(r16)
    6fb0:	8085883a 	add	r2,r16,r2
    6fb4:	10c00117 	ldw	r3,4(r2)
    6fb8:	29000315 	stw	r4,12(r5)
    6fbc:	21400215 	stw	r5,8(r4)
    6fc0:	18c00054 	ori	r3,r3,1
    6fc4:	10c00115 	stw	r3,4(r2)
    6fc8:	9009883a 	mov	r4,r18
    6fcc:	000fb040 	call	fb04 <__malloc_unlock>
    6fd0:	80800204 	addi	r2,r16,8
    6fd4:	dfc00a17 	ldw	ra,40(sp)
    6fd8:	df000917 	ldw	fp,36(sp)
    6fdc:	ddc00817 	ldw	r23,32(sp)
    6fe0:	dd800717 	ldw	r22,28(sp)
    6fe4:	dd400617 	ldw	r21,24(sp)
    6fe8:	dd000517 	ldw	r20,20(sp)
    6fec:	dcc00417 	ldw	r19,16(sp)
    6ff0:	dc800317 	ldw	r18,12(sp)
    6ff4:	dc400217 	ldw	r17,8(sp)
    6ff8:	dc000117 	ldw	r16,4(sp)
    6ffc:	dec00b04 	addi	sp,sp,44
    7000:	f800283a 	ret
    7004:	00800304 	movi	r2,12
    7008:	90800015 	stw	r2,0(r18)
    700c:	0005883a 	mov	r2,zero
    7010:	003ff006 	br	6fd4 <__alt_data_end+0xfffd6fd4>
    7014:	01002004 	movi	r4,128
    7018:	02001004 	movi	r8,64
    701c:	01c00fc4 	movi	r7,63
    7020:	003f6106 	br	6da8 <__alt_data_end+0xfffd6da8>
    7024:	4009883a 	mov	r4,r8
    7028:	003f7506 	br	6e00 <__alt_data_end+0xfffd6e00>
    702c:	81000317 	ldw	r4,12(r16)
    7030:	003fde06 	br	6fac <__alt_data_end+0xfffd6fac>
    7034:	81c5883a 	add	r2,r16,r7
    7038:	11400117 	ldw	r5,4(r2)
    703c:	9009883a 	mov	r4,r18
    7040:	29400054 	ori	r5,r5,1
    7044:	11400115 	stw	r5,4(r2)
    7048:	000fb040 	call	fb04 <__malloc_unlock>
    704c:	80800204 	addi	r2,r16,8
    7050:	003fe006 	br	6fd4 <__alt_data_end+0xfffd6fd4>
    7054:	9c000217 	ldw	r16,8(r19)
    7058:	00bfff04 	movi	r2,-4
    705c:	85800117 	ldw	r22,4(r16)
    7060:	b0ac703a 	and	r22,r22,r2
    7064:	b4400336 	bltu	r22,r17,7074 <_malloc_r+0x344>
    7068:	b445c83a 	sub	r2,r22,r17
    706c:	00c003c4 	movi	r3,15
    7070:	18805d16 	blt	r3,r2,71e8 <_malloc_r+0x4b8>
    7074:	05c000b4 	movhi	r23,2
    7078:	008000b4 	movhi	r2,2
    707c:	10b44004 	addi	r2,r2,-12032
    7080:	bded2b04 	addi	r23,r23,-19284
    7084:	15400017 	ldw	r21,0(r2)
    7088:	b8c00017 	ldw	r3,0(r23)
    708c:	00bfffc4 	movi	r2,-1
    7090:	858d883a 	add	r6,r16,r22
    7094:	8d6b883a 	add	r21,r17,r21
    7098:	1880ea26 	beq	r3,r2,7444 <_malloc_r+0x714>
    709c:	ad4403c4 	addi	r21,r21,4111
    70a0:	00bc0004 	movi	r2,-4096
    70a4:	a8aa703a 	and	r21,r21,r2
    70a8:	a80b883a 	mov	r5,r21
    70ac:	9009883a 	mov	r4,r18
    70b0:	d9800015 	stw	r6,0(sp)
    70b4:	00092e80 	call	92e8 <_sbrk_r>
    70b8:	1029883a 	mov	r20,r2
    70bc:	00bfffc4 	movi	r2,-1
    70c0:	d9800017 	ldw	r6,0(sp)
    70c4:	a080e826 	beq	r20,r2,7468 <_malloc_r+0x738>
    70c8:	a180a636 	bltu	r20,r6,7364 <_malloc_r+0x634>
    70cc:	070000b4 	movhi	fp,2
    70d0:	e73c7604 	addi	fp,fp,-3624
    70d4:	e0800017 	ldw	r2,0(fp)
    70d8:	a887883a 	add	r3,r21,r2
    70dc:	e0c00015 	stw	r3,0(fp)
    70e0:	3500e626 	beq	r6,r20,747c <_malloc_r+0x74c>
    70e4:	b9000017 	ldw	r4,0(r23)
    70e8:	00bfffc4 	movi	r2,-1
    70ec:	2080ee26 	beq	r4,r2,74a8 <_malloc_r+0x778>
    70f0:	a185c83a 	sub	r2,r20,r6
    70f4:	10c5883a 	add	r2,r2,r3
    70f8:	e0800015 	stw	r2,0(fp)
    70fc:	a0c001cc 	andi	r3,r20,7
    7100:	1800bc26 	beq	r3,zero,73f4 <_malloc_r+0x6c4>
    7104:	a0e9c83a 	sub	r20,r20,r3
    7108:	00840204 	movi	r2,4104
    710c:	a5000204 	addi	r20,r20,8
    7110:	10c7c83a 	sub	r3,r2,r3
    7114:	a545883a 	add	r2,r20,r21
    7118:	1083ffcc 	andi	r2,r2,4095
    711c:	18abc83a 	sub	r21,r3,r2
    7120:	a80b883a 	mov	r5,r21
    7124:	9009883a 	mov	r4,r18
    7128:	00092e80 	call	92e8 <_sbrk_r>
    712c:	00ffffc4 	movi	r3,-1
    7130:	10c0e126 	beq	r2,r3,74b8 <_malloc_r+0x788>
    7134:	1505c83a 	sub	r2,r2,r20
    7138:	1545883a 	add	r2,r2,r21
    713c:	10800054 	ori	r2,r2,1
    7140:	e0c00017 	ldw	r3,0(fp)
    7144:	9d000215 	stw	r20,8(r19)
    7148:	a0800115 	stw	r2,4(r20)
    714c:	a8c7883a 	add	r3,r21,r3
    7150:	e0c00015 	stw	r3,0(fp)
    7154:	84c00e26 	beq	r16,r19,7190 <_malloc_r+0x460>
    7158:	018003c4 	movi	r6,15
    715c:	3580a72e 	bgeu	r6,r22,73fc <_malloc_r+0x6cc>
    7160:	81400117 	ldw	r5,4(r16)
    7164:	013ffe04 	movi	r4,-8
    7168:	b0bffd04 	addi	r2,r22,-12
    716c:	1104703a 	and	r2,r2,r4
    7170:	2900004c 	andi	r4,r5,1
    7174:	2088b03a 	or	r4,r4,r2
    7178:	81000115 	stw	r4,4(r16)
    717c:	01400144 	movi	r5,5
    7180:	8089883a 	add	r4,r16,r2
    7184:	21400115 	stw	r5,4(r4)
    7188:	21400215 	stw	r5,8(r4)
    718c:	3080cd36 	bltu	r6,r2,74c4 <_malloc_r+0x794>
    7190:	008000b4 	movhi	r2,2
    7194:	10b43f04 	addi	r2,r2,-12036
    7198:	11000017 	ldw	r4,0(r2)
    719c:	20c0012e 	bgeu	r4,r3,71a4 <_malloc_r+0x474>
    71a0:	10c00015 	stw	r3,0(r2)
    71a4:	008000b4 	movhi	r2,2
    71a8:	10b43e04 	addi	r2,r2,-12040
    71ac:	11000017 	ldw	r4,0(r2)
    71b0:	9c000217 	ldw	r16,8(r19)
    71b4:	20c0012e 	bgeu	r4,r3,71bc <_malloc_r+0x48c>
    71b8:	10c00015 	stw	r3,0(r2)
    71bc:	80c00117 	ldw	r3,4(r16)
    71c0:	00bfff04 	movi	r2,-4
    71c4:	1886703a 	and	r3,r3,r2
    71c8:	1c45c83a 	sub	r2,r3,r17
    71cc:	1c400236 	bltu	r3,r17,71d8 <_malloc_r+0x4a8>
    71d0:	00c003c4 	movi	r3,15
    71d4:	18800416 	blt	r3,r2,71e8 <_malloc_r+0x4b8>
    71d8:	9009883a 	mov	r4,r18
    71dc:	000fb040 	call	fb04 <__malloc_unlock>
    71e0:	0005883a 	mov	r2,zero
    71e4:	003f7b06 	br	6fd4 <__alt_data_end+0xfffd6fd4>
    71e8:	88c00054 	ori	r3,r17,1
    71ec:	80c00115 	stw	r3,4(r16)
    71f0:	8463883a 	add	r17,r16,r17
    71f4:	10800054 	ori	r2,r2,1
    71f8:	9c400215 	stw	r17,8(r19)
    71fc:	88800115 	stw	r2,4(r17)
    7200:	9009883a 	mov	r4,r18
    7204:	000fb040 	call	fb04 <__malloc_unlock>
    7208:	80800204 	addi	r2,r16,8
    720c:	003f7106 	br	6fd4 <__alt_data_end+0xfffd6fd4>
    7210:	00c00504 	movi	r3,20
    7214:	18804a2e 	bgeu	r3,r2,7340 <_malloc_r+0x610>
    7218:	00c01504 	movi	r3,84
    721c:	18806e36 	bltu	r3,r2,73d8 <_malloc_r+0x6a8>
    7220:	8804d33a 	srli	r2,r17,12
    7224:	12001bc4 	addi	r8,r2,111
    7228:	11c01b84 	addi	r7,r2,110
    722c:	4209883a 	add	r4,r8,r8
    7230:	003edd06 	br	6da8 <__alt_data_end+0xfffd6da8>
    7234:	3804d27a 	srli	r2,r7,9
    7238:	00c00104 	movi	r3,4
    723c:	1880442e 	bgeu	r3,r2,7350 <_malloc_r+0x620>
    7240:	00c00504 	movi	r3,20
    7244:	18808136 	bltu	r3,r2,744c <_malloc_r+0x71c>
    7248:	11401704 	addi	r5,r2,92
    724c:	10c016c4 	addi	r3,r2,91
    7250:	294b883a 	add	r5,r5,r5
    7254:	294b883a 	add	r5,r5,r5
    7258:	294b883a 	add	r5,r5,r5
    725c:	994b883a 	add	r5,r19,r5
    7260:	28800017 	ldw	r2,0(r5)
    7264:	018000b4 	movhi	r6,2
    7268:	297ffe04 	addi	r5,r5,-8
    726c:	31a7a004 	addi	r6,r6,-24960
    7270:	28806526 	beq	r5,r2,7408 <_malloc_r+0x6d8>
    7274:	01bfff04 	movi	r6,-4
    7278:	10c00117 	ldw	r3,4(r2)
    727c:	1986703a 	and	r3,r3,r6
    7280:	38c0022e 	bgeu	r7,r3,728c <_malloc_r+0x55c>
    7284:	10800217 	ldw	r2,8(r2)
    7288:	28bffb1e 	bne	r5,r2,7278 <__alt_data_end+0xfffd7278>
    728c:	11400317 	ldw	r5,12(r2)
    7290:	98c00117 	ldw	r3,4(r19)
    7294:	81400315 	stw	r5,12(r16)
    7298:	80800215 	stw	r2,8(r16)
    729c:	2c000215 	stw	r16,8(r5)
    72a0:	14000315 	stw	r16,12(r2)
    72a4:	003ef806 	br	6e88 <__alt_data_end+0xfffd6e88>
    72a8:	88c00054 	ori	r3,r17,1
    72ac:	80c00115 	stw	r3,4(r16)
    72b0:	8463883a 	add	r17,r16,r17
    72b4:	34400515 	stw	r17,20(r6)
    72b8:	34400415 	stw	r17,16(r6)
    72bc:	10c00054 	ori	r3,r2,1
    72c0:	8a000315 	stw	r8,12(r17)
    72c4:	8a000215 	stw	r8,8(r17)
    72c8:	88c00115 	stw	r3,4(r17)
    72cc:	88a3883a 	add	r17,r17,r2
    72d0:	88800015 	stw	r2,0(r17)
    72d4:	9009883a 	mov	r4,r18
    72d8:	000fb040 	call	fb04 <__malloc_unlock>
    72dc:	80800204 	addi	r2,r16,8
    72e0:	003f3c06 	br	6fd4 <__alt_data_end+0xfffd6fd4>
    72e4:	30c00117 	ldw	r3,4(r6)
    72e8:	003ee706 	br	6e88 <__alt_data_end+0xfffd6e88>
    72ec:	5ac00044 	addi	r11,r11,1
    72f0:	588000cc 	andi	r2,r11,3
    72f4:	31800204 	addi	r6,r6,8
    72f8:	103efd1e 	bne	r2,zero,6ef0 <__alt_data_end+0xfffd6ef0>
    72fc:	00002406 	br	7390 <_malloc_r+0x660>
    7300:	14000317 	ldw	r16,12(r2)
    7304:	143f251e 	bne	r2,r16,6f9c <__alt_data_end+0xfffd6f9c>
    7308:	21000084 	addi	r4,r4,2
    730c:	003ebc06 	br	6e00 <__alt_data_end+0xfffd6e00>
    7310:	8085883a 	add	r2,r16,r2
    7314:	10c00117 	ldw	r3,4(r2)
    7318:	81000317 	ldw	r4,12(r16)
    731c:	81400217 	ldw	r5,8(r16)
    7320:	18c00054 	ori	r3,r3,1
    7324:	10c00115 	stw	r3,4(r2)
    7328:	29000315 	stw	r4,12(r5)
    732c:	21400215 	stw	r5,8(r4)
    7330:	9009883a 	mov	r4,r18
    7334:	000fb040 	call	fb04 <__malloc_unlock>
    7338:	80800204 	addi	r2,r16,8
    733c:	003f2506 	br	6fd4 <__alt_data_end+0xfffd6fd4>
    7340:	12001704 	addi	r8,r2,92
    7344:	11c016c4 	addi	r7,r2,91
    7348:	4209883a 	add	r4,r8,r8
    734c:	003e9606 	br	6da8 <__alt_data_end+0xfffd6da8>
    7350:	3804d1ba 	srli	r2,r7,6
    7354:	11400e44 	addi	r5,r2,57
    7358:	10c00e04 	addi	r3,r2,56
    735c:	294b883a 	add	r5,r5,r5
    7360:	003fbc06 	br	7254 <__alt_data_end+0xfffd7254>
    7364:	84ff5926 	beq	r16,r19,70cc <__alt_data_end+0xfffd70cc>
    7368:	008000b4 	movhi	r2,2
    736c:	10a7a004 	addi	r2,r2,-24960
    7370:	14000217 	ldw	r16,8(r2)
    7374:	00bfff04 	movi	r2,-4
    7378:	80c00117 	ldw	r3,4(r16)
    737c:	1886703a 	and	r3,r3,r2
    7380:	003f9106 	br	71c8 <__alt_data_end+0xfffd71c8>
    7384:	60800217 	ldw	r2,8(r12)
    7388:	213fffc4 	addi	r4,r4,-1
    738c:	1300651e 	bne	r2,r12,7524 <_malloc_r+0x7f4>
    7390:	208000cc 	andi	r2,r4,3
    7394:	633ffe04 	addi	r12,r12,-8
    7398:	103ffa1e 	bne	r2,zero,7384 <__alt_data_end+0xfffd7384>
    739c:	98800117 	ldw	r2,4(r19)
    73a0:	0146303a 	nor	r3,zero,r5
    73a4:	1884703a 	and	r2,r3,r2
    73a8:	98800115 	stw	r2,4(r19)
    73ac:	294b883a 	add	r5,r5,r5
    73b0:	117f2836 	bltu	r2,r5,7054 <__alt_data_end+0xfffd7054>
    73b4:	283f2726 	beq	r5,zero,7054 <__alt_data_end+0xfffd7054>
    73b8:	2886703a 	and	r3,r5,r2
    73bc:	5809883a 	mov	r4,r11
    73c0:	183ec31e 	bne	r3,zero,6ed0 <__alt_data_end+0xfffd6ed0>
    73c4:	294b883a 	add	r5,r5,r5
    73c8:	2886703a 	and	r3,r5,r2
    73cc:	21000104 	addi	r4,r4,4
    73d0:	183ffc26 	beq	r3,zero,73c4 <__alt_data_end+0xfffd73c4>
    73d4:	003ebe06 	br	6ed0 <__alt_data_end+0xfffd6ed0>
    73d8:	00c05504 	movi	r3,340
    73dc:	18801236 	bltu	r3,r2,7428 <_malloc_r+0x6f8>
    73e0:	8804d3fa 	srli	r2,r17,15
    73e4:	12001e04 	addi	r8,r2,120
    73e8:	11c01dc4 	addi	r7,r2,119
    73ec:	4209883a 	add	r4,r8,r8
    73f0:	003e6d06 	br	6da8 <__alt_data_end+0xfffd6da8>
    73f4:	00c40004 	movi	r3,4096
    73f8:	003f4606 	br	7114 <__alt_data_end+0xfffd7114>
    73fc:	00800044 	movi	r2,1
    7400:	a0800115 	stw	r2,4(r20)
    7404:	003f7406 	br	71d8 <__alt_data_end+0xfffd71d8>
    7408:	1805d0ba 	srai	r2,r3,2
    740c:	01c00044 	movi	r7,1
    7410:	30c00117 	ldw	r3,4(r6)
    7414:	388e983a 	sll	r7,r7,r2
    7418:	2805883a 	mov	r2,r5
    741c:	38c6b03a 	or	r3,r7,r3
    7420:	30c00115 	stw	r3,4(r6)
    7424:	003f9b06 	br	7294 <__alt_data_end+0xfffd7294>
    7428:	00c15504 	movi	r3,1364
    742c:	18801a36 	bltu	r3,r2,7498 <_malloc_r+0x768>
    7430:	8804d4ba 	srli	r2,r17,18
    7434:	12001f44 	addi	r8,r2,125
    7438:	11c01f04 	addi	r7,r2,124
    743c:	4209883a 	add	r4,r8,r8
    7440:	003e5906 	br	6da8 <__alt_data_end+0xfffd6da8>
    7444:	ad400404 	addi	r21,r21,16
    7448:	003f1706 	br	70a8 <__alt_data_end+0xfffd70a8>
    744c:	00c01504 	movi	r3,84
    7450:	18802336 	bltu	r3,r2,74e0 <_malloc_r+0x7b0>
    7454:	3804d33a 	srli	r2,r7,12
    7458:	11401bc4 	addi	r5,r2,111
    745c:	10c01b84 	addi	r3,r2,110
    7460:	294b883a 	add	r5,r5,r5
    7464:	003f7b06 	br	7254 <__alt_data_end+0xfffd7254>
    7468:	9c000217 	ldw	r16,8(r19)
    746c:	00bfff04 	movi	r2,-4
    7470:	80c00117 	ldw	r3,4(r16)
    7474:	1886703a 	and	r3,r3,r2
    7478:	003f5306 	br	71c8 <__alt_data_end+0xfffd71c8>
    747c:	3083ffcc 	andi	r2,r6,4095
    7480:	103f181e 	bne	r2,zero,70e4 <__alt_data_end+0xfffd70e4>
    7484:	99000217 	ldw	r4,8(r19)
    7488:	b545883a 	add	r2,r22,r21
    748c:	10800054 	ori	r2,r2,1
    7490:	20800115 	stw	r2,4(r4)
    7494:	003f3e06 	br	7190 <__alt_data_end+0xfffd7190>
    7498:	01003f84 	movi	r4,254
    749c:	02001fc4 	movi	r8,127
    74a0:	01c01f84 	movi	r7,126
    74a4:	003e4006 	br	6da8 <__alt_data_end+0xfffd6da8>
    74a8:	008000b4 	movhi	r2,2
    74ac:	10ad2b04 	addi	r2,r2,-19284
    74b0:	15000015 	stw	r20,0(r2)
    74b4:	003f1106 	br	70fc <__alt_data_end+0xfffd70fc>
    74b8:	00800044 	movi	r2,1
    74bc:	002b883a 	mov	r21,zero
    74c0:	003f1f06 	br	7140 <__alt_data_end+0xfffd7140>
    74c4:	81400204 	addi	r5,r16,8
    74c8:	9009883a 	mov	r4,r18
    74cc:	00061380 	call	6138 <_free_r>
    74d0:	008000b4 	movhi	r2,2
    74d4:	10bc7604 	addi	r2,r2,-3624
    74d8:	10c00017 	ldw	r3,0(r2)
    74dc:	003f2c06 	br	7190 <__alt_data_end+0xfffd7190>
    74e0:	00c05504 	movi	r3,340
    74e4:	18800536 	bltu	r3,r2,74fc <_malloc_r+0x7cc>
    74e8:	3804d3fa 	srli	r2,r7,15
    74ec:	11401e04 	addi	r5,r2,120
    74f0:	10c01dc4 	addi	r3,r2,119
    74f4:	294b883a 	add	r5,r5,r5
    74f8:	003f5606 	br	7254 <__alt_data_end+0xfffd7254>
    74fc:	00c15504 	movi	r3,1364
    7500:	18800536 	bltu	r3,r2,7518 <_malloc_r+0x7e8>
    7504:	3804d4ba 	srli	r2,r7,18
    7508:	11401f44 	addi	r5,r2,125
    750c:	10c01f04 	addi	r3,r2,124
    7510:	294b883a 	add	r5,r5,r5
    7514:	003f4f06 	br	7254 <__alt_data_end+0xfffd7254>
    7518:	01403f84 	movi	r5,254
    751c:	00c01f84 	movi	r3,126
    7520:	003f4c06 	br	7254 <__alt_data_end+0xfffd7254>
    7524:	98800117 	ldw	r2,4(r19)
    7528:	003fa006 	br	73ac <__alt_data_end+0xfffd73ac>
    752c:	8808d0fa 	srli	r4,r17,3
    7530:	20800044 	addi	r2,r4,1
    7534:	1085883a 	add	r2,r2,r2
    7538:	003e9006 	br	6f7c <__alt_data_end+0xfffd6f7c>

0000753c <memchr>:
    753c:	208000cc 	andi	r2,r4,3
    7540:	280f883a 	mov	r7,r5
    7544:	10003426 	beq	r2,zero,7618 <memchr+0xdc>
    7548:	30bfffc4 	addi	r2,r6,-1
    754c:	30001a26 	beq	r6,zero,75b8 <memchr+0x7c>
    7550:	20c00003 	ldbu	r3,0(r4)
    7554:	29803fcc 	andi	r6,r5,255
    7558:	30c0051e 	bne	r6,r3,7570 <memchr+0x34>
    755c:	00001806 	br	75c0 <memchr+0x84>
    7560:	10001526 	beq	r2,zero,75b8 <memchr+0x7c>
    7564:	20c00003 	ldbu	r3,0(r4)
    7568:	10bfffc4 	addi	r2,r2,-1
    756c:	30c01426 	beq	r6,r3,75c0 <memchr+0x84>
    7570:	21000044 	addi	r4,r4,1
    7574:	20c000cc 	andi	r3,r4,3
    7578:	183ff91e 	bne	r3,zero,7560 <__alt_data_end+0xfffd7560>
    757c:	020000c4 	movi	r8,3
    7580:	40801136 	bltu	r8,r2,75c8 <memchr+0x8c>
    7584:	10000c26 	beq	r2,zero,75b8 <memchr+0x7c>
    7588:	20c00003 	ldbu	r3,0(r4)
    758c:	29403fcc 	andi	r5,r5,255
    7590:	28c00b26 	beq	r5,r3,75c0 <memchr+0x84>
    7594:	20c00044 	addi	r3,r4,1
    7598:	39803fcc 	andi	r6,r7,255
    759c:	2089883a 	add	r4,r4,r2
    75a0:	00000306 	br	75b0 <memchr+0x74>
    75a4:	18c00044 	addi	r3,r3,1
    75a8:	197fffc3 	ldbu	r5,-1(r3)
    75ac:	31400526 	beq	r6,r5,75c4 <memchr+0x88>
    75b0:	1805883a 	mov	r2,r3
    75b4:	20fffb1e 	bne	r4,r3,75a4 <__alt_data_end+0xfffd75a4>
    75b8:	0005883a 	mov	r2,zero
    75bc:	f800283a 	ret
    75c0:	2005883a 	mov	r2,r4
    75c4:	f800283a 	ret
    75c8:	28c03fcc 	andi	r3,r5,255
    75cc:	1812923a 	slli	r9,r3,8
    75d0:	02ffbff4 	movhi	r11,65279
    75d4:	02a02074 	movhi	r10,32897
    75d8:	48d2b03a 	or	r9,r9,r3
    75dc:	4806943a 	slli	r3,r9,16
    75e0:	5affbfc4 	addi	r11,r11,-257
    75e4:	52a02004 	addi	r10,r10,-32640
    75e8:	48d2b03a 	or	r9,r9,r3
    75ec:	20c00017 	ldw	r3,0(r4)
    75f0:	48c6f03a 	xor	r3,r9,r3
    75f4:	1acd883a 	add	r6,r3,r11
    75f8:	00c6303a 	nor	r3,zero,r3
    75fc:	30c6703a 	and	r3,r6,r3
    7600:	1a86703a 	and	r3,r3,r10
    7604:	183fe01e 	bne	r3,zero,7588 <__alt_data_end+0xfffd7588>
    7608:	10bfff04 	addi	r2,r2,-4
    760c:	21000104 	addi	r4,r4,4
    7610:	40bff636 	bltu	r8,r2,75ec <__alt_data_end+0xfffd75ec>
    7614:	003fdb06 	br	7584 <__alt_data_end+0xfffd7584>
    7618:	3005883a 	mov	r2,r6
    761c:	003fd706 	br	757c <__alt_data_end+0xfffd757c>

00007620 <memcmp>:
    7620:	01c000c4 	movi	r7,3
    7624:	3980192e 	bgeu	r7,r6,768c <memcmp+0x6c>
    7628:	2144b03a 	or	r2,r4,r5
    762c:	11c4703a 	and	r2,r2,r7
    7630:	10000f26 	beq	r2,zero,7670 <memcmp+0x50>
    7634:	20800003 	ldbu	r2,0(r4)
    7638:	28c00003 	ldbu	r3,0(r5)
    763c:	10c0151e 	bne	r2,r3,7694 <memcmp+0x74>
    7640:	31bfff84 	addi	r6,r6,-2
    7644:	01ffffc4 	movi	r7,-1
    7648:	00000406 	br	765c <memcmp+0x3c>
    764c:	20800003 	ldbu	r2,0(r4)
    7650:	28c00003 	ldbu	r3,0(r5)
    7654:	31bfffc4 	addi	r6,r6,-1
    7658:	10c00e1e 	bne	r2,r3,7694 <memcmp+0x74>
    765c:	21000044 	addi	r4,r4,1
    7660:	29400044 	addi	r5,r5,1
    7664:	31fff91e 	bne	r6,r7,764c <__alt_data_end+0xfffd764c>
    7668:	0005883a 	mov	r2,zero
    766c:	f800283a 	ret
    7670:	20c00017 	ldw	r3,0(r4)
    7674:	28800017 	ldw	r2,0(r5)
    7678:	18bfee1e 	bne	r3,r2,7634 <__alt_data_end+0xfffd7634>
    767c:	31bfff04 	addi	r6,r6,-4
    7680:	21000104 	addi	r4,r4,4
    7684:	29400104 	addi	r5,r5,4
    7688:	39bff936 	bltu	r7,r6,7670 <__alt_data_end+0xfffd7670>
    768c:	303fe91e 	bne	r6,zero,7634 <__alt_data_end+0xfffd7634>
    7690:	003ff506 	br	7668 <__alt_data_end+0xfffd7668>
    7694:	10c5c83a 	sub	r2,r2,r3
    7698:	f800283a 	ret

0000769c <memcpy>:
    769c:	defffd04 	addi	sp,sp,-12
    76a0:	dfc00215 	stw	ra,8(sp)
    76a4:	dc400115 	stw	r17,4(sp)
    76a8:	dc000015 	stw	r16,0(sp)
    76ac:	00c003c4 	movi	r3,15
    76b0:	2005883a 	mov	r2,r4
    76b4:	1980452e 	bgeu	r3,r6,77cc <memcpy+0x130>
    76b8:	2906b03a 	or	r3,r5,r4
    76bc:	18c000cc 	andi	r3,r3,3
    76c0:	1800441e 	bne	r3,zero,77d4 <memcpy+0x138>
    76c4:	347ffc04 	addi	r17,r6,-16
    76c8:	8822d13a 	srli	r17,r17,4
    76cc:	28c00104 	addi	r3,r5,4
    76d0:	23400104 	addi	r13,r4,4
    76d4:	8820913a 	slli	r16,r17,4
    76d8:	2b000204 	addi	r12,r5,8
    76dc:	22c00204 	addi	r11,r4,8
    76e0:	84000504 	addi	r16,r16,20
    76e4:	2a800304 	addi	r10,r5,12
    76e8:	22400304 	addi	r9,r4,12
    76ec:	2c21883a 	add	r16,r5,r16
    76f0:	2811883a 	mov	r8,r5
    76f4:	200f883a 	mov	r7,r4
    76f8:	41000017 	ldw	r4,0(r8)
    76fc:	1fc00017 	ldw	ra,0(r3)
    7700:	63c00017 	ldw	r15,0(r12)
    7704:	39000015 	stw	r4,0(r7)
    7708:	53800017 	ldw	r14,0(r10)
    770c:	6fc00015 	stw	ra,0(r13)
    7710:	5bc00015 	stw	r15,0(r11)
    7714:	4b800015 	stw	r14,0(r9)
    7718:	18c00404 	addi	r3,r3,16
    771c:	39c00404 	addi	r7,r7,16
    7720:	42000404 	addi	r8,r8,16
    7724:	6b400404 	addi	r13,r13,16
    7728:	63000404 	addi	r12,r12,16
    772c:	5ac00404 	addi	r11,r11,16
    7730:	52800404 	addi	r10,r10,16
    7734:	4a400404 	addi	r9,r9,16
    7738:	1c3fef1e 	bne	r3,r16,76f8 <__alt_data_end+0xfffd76f8>
    773c:	89c00044 	addi	r7,r17,1
    7740:	380e913a 	slli	r7,r7,4
    7744:	310003cc 	andi	r4,r6,15
    7748:	02c000c4 	movi	r11,3
    774c:	11c7883a 	add	r3,r2,r7
    7750:	29cb883a 	add	r5,r5,r7
    7754:	5900212e 	bgeu	r11,r4,77dc <memcpy+0x140>
    7758:	1813883a 	mov	r9,r3
    775c:	2811883a 	mov	r8,r5
    7760:	200f883a 	mov	r7,r4
    7764:	42800017 	ldw	r10,0(r8)
    7768:	4a400104 	addi	r9,r9,4
    776c:	39ffff04 	addi	r7,r7,-4
    7770:	4abfff15 	stw	r10,-4(r9)
    7774:	42000104 	addi	r8,r8,4
    7778:	59fffa36 	bltu	r11,r7,7764 <__alt_data_end+0xfffd7764>
    777c:	213fff04 	addi	r4,r4,-4
    7780:	2008d0ba 	srli	r4,r4,2
    7784:	318000cc 	andi	r6,r6,3
    7788:	21000044 	addi	r4,r4,1
    778c:	2109883a 	add	r4,r4,r4
    7790:	2109883a 	add	r4,r4,r4
    7794:	1907883a 	add	r3,r3,r4
    7798:	290b883a 	add	r5,r5,r4
    779c:	30000626 	beq	r6,zero,77b8 <memcpy+0x11c>
    77a0:	198d883a 	add	r6,r3,r6
    77a4:	29c00003 	ldbu	r7,0(r5)
    77a8:	18c00044 	addi	r3,r3,1
    77ac:	29400044 	addi	r5,r5,1
    77b0:	19ffffc5 	stb	r7,-1(r3)
    77b4:	19bffb1e 	bne	r3,r6,77a4 <__alt_data_end+0xfffd77a4>
    77b8:	dfc00217 	ldw	ra,8(sp)
    77bc:	dc400117 	ldw	r17,4(sp)
    77c0:	dc000017 	ldw	r16,0(sp)
    77c4:	dec00304 	addi	sp,sp,12
    77c8:	f800283a 	ret
    77cc:	2007883a 	mov	r3,r4
    77d0:	003ff206 	br	779c <__alt_data_end+0xfffd779c>
    77d4:	2007883a 	mov	r3,r4
    77d8:	003ff106 	br	77a0 <__alt_data_end+0xfffd77a0>
    77dc:	200d883a 	mov	r6,r4
    77e0:	003fee06 	br	779c <__alt_data_end+0xfffd779c>

000077e4 <memmove>:
    77e4:	2005883a 	mov	r2,r4
    77e8:	29000b2e 	bgeu	r5,r4,7818 <memmove+0x34>
    77ec:	298f883a 	add	r7,r5,r6
    77f0:	21c0092e 	bgeu	r4,r7,7818 <memmove+0x34>
    77f4:	2187883a 	add	r3,r4,r6
    77f8:	198bc83a 	sub	r5,r3,r6
    77fc:	30004826 	beq	r6,zero,7920 <memmove+0x13c>
    7800:	39ffffc4 	addi	r7,r7,-1
    7804:	39000003 	ldbu	r4,0(r7)
    7808:	18ffffc4 	addi	r3,r3,-1
    780c:	19000005 	stb	r4,0(r3)
    7810:	28fffb1e 	bne	r5,r3,7800 <__alt_data_end+0xfffd7800>
    7814:	f800283a 	ret
    7818:	00c003c4 	movi	r3,15
    781c:	1980412e 	bgeu	r3,r6,7924 <memmove+0x140>
    7820:	2886b03a 	or	r3,r5,r2
    7824:	18c000cc 	andi	r3,r3,3
    7828:	1800401e 	bne	r3,zero,792c <memmove+0x148>
    782c:	33fffc04 	addi	r15,r6,-16
    7830:	781ed13a 	srli	r15,r15,4
    7834:	28c00104 	addi	r3,r5,4
    7838:	13400104 	addi	r13,r2,4
    783c:	781c913a 	slli	r14,r15,4
    7840:	2b000204 	addi	r12,r5,8
    7844:	12c00204 	addi	r11,r2,8
    7848:	73800504 	addi	r14,r14,20
    784c:	2a800304 	addi	r10,r5,12
    7850:	12400304 	addi	r9,r2,12
    7854:	2b9d883a 	add	r14,r5,r14
    7858:	2811883a 	mov	r8,r5
    785c:	100f883a 	mov	r7,r2
    7860:	41000017 	ldw	r4,0(r8)
    7864:	39c00404 	addi	r7,r7,16
    7868:	18c00404 	addi	r3,r3,16
    786c:	393ffc15 	stw	r4,-16(r7)
    7870:	193ffc17 	ldw	r4,-16(r3)
    7874:	6b400404 	addi	r13,r13,16
    7878:	5ac00404 	addi	r11,r11,16
    787c:	693ffc15 	stw	r4,-16(r13)
    7880:	61000017 	ldw	r4,0(r12)
    7884:	4a400404 	addi	r9,r9,16
    7888:	42000404 	addi	r8,r8,16
    788c:	593ffc15 	stw	r4,-16(r11)
    7890:	51000017 	ldw	r4,0(r10)
    7894:	63000404 	addi	r12,r12,16
    7898:	52800404 	addi	r10,r10,16
    789c:	493ffc15 	stw	r4,-16(r9)
    78a0:	1bbfef1e 	bne	r3,r14,7860 <__alt_data_end+0xfffd7860>
    78a4:	79000044 	addi	r4,r15,1
    78a8:	2008913a 	slli	r4,r4,4
    78ac:	328003cc 	andi	r10,r6,15
    78b0:	02c000c4 	movi	r11,3
    78b4:	1107883a 	add	r3,r2,r4
    78b8:	290b883a 	add	r5,r5,r4
    78bc:	5a801e2e 	bgeu	r11,r10,7938 <memmove+0x154>
    78c0:	1813883a 	mov	r9,r3
    78c4:	2811883a 	mov	r8,r5
    78c8:	500f883a 	mov	r7,r10
    78cc:	41000017 	ldw	r4,0(r8)
    78d0:	4a400104 	addi	r9,r9,4
    78d4:	39ffff04 	addi	r7,r7,-4
    78d8:	493fff15 	stw	r4,-4(r9)
    78dc:	42000104 	addi	r8,r8,4
    78e0:	59fffa36 	bltu	r11,r7,78cc <__alt_data_end+0xfffd78cc>
    78e4:	513fff04 	addi	r4,r10,-4
    78e8:	2008d0ba 	srli	r4,r4,2
    78ec:	318000cc 	andi	r6,r6,3
    78f0:	21000044 	addi	r4,r4,1
    78f4:	2109883a 	add	r4,r4,r4
    78f8:	2109883a 	add	r4,r4,r4
    78fc:	1907883a 	add	r3,r3,r4
    7900:	290b883a 	add	r5,r5,r4
    7904:	30000b26 	beq	r6,zero,7934 <memmove+0x150>
    7908:	198d883a 	add	r6,r3,r6
    790c:	29c00003 	ldbu	r7,0(r5)
    7910:	18c00044 	addi	r3,r3,1
    7914:	29400044 	addi	r5,r5,1
    7918:	19ffffc5 	stb	r7,-1(r3)
    791c:	19bffb1e 	bne	r3,r6,790c <__alt_data_end+0xfffd790c>
    7920:	f800283a 	ret
    7924:	1007883a 	mov	r3,r2
    7928:	003ff606 	br	7904 <__alt_data_end+0xfffd7904>
    792c:	1007883a 	mov	r3,r2
    7930:	003ff506 	br	7908 <__alt_data_end+0xfffd7908>
    7934:	f800283a 	ret
    7938:	500d883a 	mov	r6,r10
    793c:	003ff106 	br	7904 <__alt_data_end+0xfffd7904>

00007940 <memset>:
    7940:	20c000cc 	andi	r3,r4,3
    7944:	2005883a 	mov	r2,r4
    7948:	18004426 	beq	r3,zero,7a5c <memset+0x11c>
    794c:	31ffffc4 	addi	r7,r6,-1
    7950:	30004026 	beq	r6,zero,7a54 <memset+0x114>
    7954:	2813883a 	mov	r9,r5
    7958:	200d883a 	mov	r6,r4
    795c:	2007883a 	mov	r3,r4
    7960:	00000406 	br	7974 <memset+0x34>
    7964:	3a3fffc4 	addi	r8,r7,-1
    7968:	31800044 	addi	r6,r6,1
    796c:	38003926 	beq	r7,zero,7a54 <memset+0x114>
    7970:	400f883a 	mov	r7,r8
    7974:	18c00044 	addi	r3,r3,1
    7978:	32400005 	stb	r9,0(r6)
    797c:	1a0000cc 	andi	r8,r3,3
    7980:	403ff81e 	bne	r8,zero,7964 <__alt_data_end+0xfffd7964>
    7984:	010000c4 	movi	r4,3
    7988:	21c02d2e 	bgeu	r4,r7,7a40 <memset+0x100>
    798c:	29003fcc 	andi	r4,r5,255
    7990:	200c923a 	slli	r6,r4,8
    7994:	3108b03a 	or	r4,r6,r4
    7998:	200c943a 	slli	r6,r4,16
    799c:	218cb03a 	or	r6,r4,r6
    79a0:	010003c4 	movi	r4,15
    79a4:	21c0182e 	bgeu	r4,r7,7a08 <memset+0xc8>
    79a8:	3b3ffc04 	addi	r12,r7,-16
    79ac:	6018d13a 	srli	r12,r12,4
    79b0:	1a000104 	addi	r8,r3,4
    79b4:	1ac00204 	addi	r11,r3,8
    79b8:	6008913a 	slli	r4,r12,4
    79bc:	1a800304 	addi	r10,r3,12
    79c0:	1813883a 	mov	r9,r3
    79c4:	21000504 	addi	r4,r4,20
    79c8:	1909883a 	add	r4,r3,r4
    79cc:	49800015 	stw	r6,0(r9)
    79d0:	41800015 	stw	r6,0(r8)
    79d4:	59800015 	stw	r6,0(r11)
    79d8:	51800015 	stw	r6,0(r10)
    79dc:	42000404 	addi	r8,r8,16
    79e0:	4a400404 	addi	r9,r9,16
    79e4:	5ac00404 	addi	r11,r11,16
    79e8:	52800404 	addi	r10,r10,16
    79ec:	413ff71e 	bne	r8,r4,79cc <__alt_data_end+0xfffd79cc>
    79f0:	63000044 	addi	r12,r12,1
    79f4:	6018913a 	slli	r12,r12,4
    79f8:	39c003cc 	andi	r7,r7,15
    79fc:	010000c4 	movi	r4,3
    7a00:	1b07883a 	add	r3,r3,r12
    7a04:	21c00e2e 	bgeu	r4,r7,7a40 <memset+0x100>
    7a08:	1813883a 	mov	r9,r3
    7a0c:	3811883a 	mov	r8,r7
    7a10:	010000c4 	movi	r4,3
    7a14:	49800015 	stw	r6,0(r9)
    7a18:	423fff04 	addi	r8,r8,-4
    7a1c:	4a400104 	addi	r9,r9,4
    7a20:	223ffc36 	bltu	r4,r8,7a14 <__alt_data_end+0xfffd7a14>
    7a24:	393fff04 	addi	r4,r7,-4
    7a28:	2008d0ba 	srli	r4,r4,2
    7a2c:	39c000cc 	andi	r7,r7,3
    7a30:	21000044 	addi	r4,r4,1
    7a34:	2109883a 	add	r4,r4,r4
    7a38:	2109883a 	add	r4,r4,r4
    7a3c:	1907883a 	add	r3,r3,r4
    7a40:	38000526 	beq	r7,zero,7a58 <memset+0x118>
    7a44:	19cf883a 	add	r7,r3,r7
    7a48:	19400005 	stb	r5,0(r3)
    7a4c:	18c00044 	addi	r3,r3,1
    7a50:	38fffd1e 	bne	r7,r3,7a48 <__alt_data_end+0xfffd7a48>
    7a54:	f800283a 	ret
    7a58:	f800283a 	ret
    7a5c:	2007883a 	mov	r3,r4
    7a60:	300f883a 	mov	r7,r6
    7a64:	003fc706 	br	7984 <__alt_data_end+0xfffd7984>

00007a68 <_Balloc>:
    7a68:	20801317 	ldw	r2,76(r4)
    7a6c:	defffc04 	addi	sp,sp,-16
    7a70:	dc400115 	stw	r17,4(sp)
    7a74:	dc000015 	stw	r16,0(sp)
    7a78:	dfc00315 	stw	ra,12(sp)
    7a7c:	dc800215 	stw	r18,8(sp)
    7a80:	2023883a 	mov	r17,r4
    7a84:	2821883a 	mov	r16,r5
    7a88:	10000f26 	beq	r2,zero,7ac8 <_Balloc+0x60>
    7a8c:	8407883a 	add	r3,r16,r16
    7a90:	18c7883a 	add	r3,r3,r3
    7a94:	10c7883a 	add	r3,r2,r3
    7a98:	18800017 	ldw	r2,0(r3)
    7a9c:	10001126 	beq	r2,zero,7ae4 <_Balloc+0x7c>
    7aa0:	11000017 	ldw	r4,0(r2)
    7aa4:	19000015 	stw	r4,0(r3)
    7aa8:	10000415 	stw	zero,16(r2)
    7aac:	10000315 	stw	zero,12(r2)
    7ab0:	dfc00317 	ldw	ra,12(sp)
    7ab4:	dc800217 	ldw	r18,8(sp)
    7ab8:	dc400117 	ldw	r17,4(sp)
    7abc:	dc000017 	ldw	r16,0(sp)
    7ac0:	dec00404 	addi	sp,sp,16
    7ac4:	f800283a 	ret
    7ac8:	01800844 	movi	r6,33
    7acc:	01400104 	movi	r5,4
    7ad0:	000ae640 	call	ae64 <_calloc_r>
    7ad4:	88801315 	stw	r2,76(r17)
    7ad8:	103fec1e 	bne	r2,zero,7a8c <__alt_data_end+0xfffd7a8c>
    7adc:	0005883a 	mov	r2,zero
    7ae0:	003ff306 	br	7ab0 <__alt_data_end+0xfffd7ab0>
    7ae4:	01400044 	movi	r5,1
    7ae8:	2c24983a 	sll	r18,r5,r16
    7aec:	8809883a 	mov	r4,r17
    7af0:	91800144 	addi	r6,r18,5
    7af4:	318d883a 	add	r6,r6,r6
    7af8:	318d883a 	add	r6,r6,r6
    7afc:	000ae640 	call	ae64 <_calloc_r>
    7b00:	103ff626 	beq	r2,zero,7adc <__alt_data_end+0xfffd7adc>
    7b04:	14000115 	stw	r16,4(r2)
    7b08:	14800215 	stw	r18,8(r2)
    7b0c:	003fe606 	br	7aa8 <__alt_data_end+0xfffd7aa8>

00007b10 <_Bfree>:
    7b10:	28000826 	beq	r5,zero,7b34 <_Bfree+0x24>
    7b14:	28c00117 	ldw	r3,4(r5)
    7b18:	20801317 	ldw	r2,76(r4)
    7b1c:	18c7883a 	add	r3,r3,r3
    7b20:	18c7883a 	add	r3,r3,r3
    7b24:	10c5883a 	add	r2,r2,r3
    7b28:	10c00017 	ldw	r3,0(r2)
    7b2c:	28c00015 	stw	r3,0(r5)
    7b30:	11400015 	stw	r5,0(r2)
    7b34:	f800283a 	ret

00007b38 <__multadd>:
    7b38:	defff704 	addi	sp,sp,-36
    7b3c:	dc800215 	stw	r18,8(sp)
    7b40:	2c800417 	ldw	r18,16(r5)
    7b44:	dd800615 	stw	r22,24(sp)
    7b48:	dd400515 	stw	r21,20(sp)
    7b4c:	dd000415 	stw	r20,16(sp)
    7b50:	dcc00315 	stw	r19,12(sp)
    7b54:	dc400115 	stw	r17,4(sp)
    7b58:	dc000015 	stw	r16,0(sp)
    7b5c:	dfc00815 	stw	ra,32(sp)
    7b60:	ddc00715 	stw	r23,28(sp)
    7b64:	2827883a 	mov	r19,r5
    7b68:	2029883a 	mov	r20,r4
    7b6c:	3023883a 	mov	r17,r6
    7b70:	3821883a 	mov	r16,r7
    7b74:	2d400504 	addi	r21,r5,20
    7b78:	002d883a 	mov	r22,zero
    7b7c:	adc00017 	ldw	r23,0(r21)
    7b80:	880b883a 	mov	r5,r17
    7b84:	ad400104 	addi	r21,r21,4
    7b88:	b93fffcc 	andi	r4,r23,65535
    7b8c:	000c3c80 	call	c3c8 <__mulsi3>
    7b90:	b808d43a 	srli	r4,r23,16
    7b94:	880b883a 	mov	r5,r17
    7b98:	1421883a 	add	r16,r2,r16
    7b9c:	000c3c80 	call	c3c8 <__mulsi3>
    7ba0:	800ed43a 	srli	r7,r16,16
    7ba4:	80ffffcc 	andi	r3,r16,65535
    7ba8:	b5800044 	addi	r22,r22,1
    7bac:	11c5883a 	add	r2,r2,r7
    7bb0:	100e943a 	slli	r7,r2,16
    7bb4:	1020d43a 	srli	r16,r2,16
    7bb8:	38c7883a 	add	r3,r7,r3
    7bbc:	a8ffff15 	stw	r3,-4(r21)
    7bc0:	b4bfee16 	blt	r22,r18,7b7c <__alt_data_end+0xfffd7b7c>
    7bc4:	80000926 	beq	r16,zero,7bec <__multadd+0xb4>
    7bc8:	98800217 	ldw	r2,8(r19)
    7bcc:	9080130e 	bge	r18,r2,7c1c <__multadd+0xe4>
    7bd0:	90800144 	addi	r2,r18,5
    7bd4:	1085883a 	add	r2,r2,r2
    7bd8:	1085883a 	add	r2,r2,r2
    7bdc:	9885883a 	add	r2,r19,r2
    7be0:	14000015 	stw	r16,0(r2)
    7be4:	94800044 	addi	r18,r18,1
    7be8:	9c800415 	stw	r18,16(r19)
    7bec:	9805883a 	mov	r2,r19
    7bf0:	dfc00817 	ldw	ra,32(sp)
    7bf4:	ddc00717 	ldw	r23,28(sp)
    7bf8:	dd800617 	ldw	r22,24(sp)
    7bfc:	dd400517 	ldw	r21,20(sp)
    7c00:	dd000417 	ldw	r20,16(sp)
    7c04:	dcc00317 	ldw	r19,12(sp)
    7c08:	dc800217 	ldw	r18,8(sp)
    7c0c:	dc400117 	ldw	r17,4(sp)
    7c10:	dc000017 	ldw	r16,0(sp)
    7c14:	dec00904 	addi	sp,sp,36
    7c18:	f800283a 	ret
    7c1c:	99400117 	ldw	r5,4(r19)
    7c20:	a009883a 	mov	r4,r20
    7c24:	29400044 	addi	r5,r5,1
    7c28:	0007a680 	call	7a68 <_Balloc>
    7c2c:	99800417 	ldw	r6,16(r19)
    7c30:	99400304 	addi	r5,r19,12
    7c34:	11000304 	addi	r4,r2,12
    7c38:	31800084 	addi	r6,r6,2
    7c3c:	318d883a 	add	r6,r6,r6
    7c40:	318d883a 	add	r6,r6,r6
    7c44:	1023883a 	mov	r17,r2
    7c48:	000769c0 	call	769c <memcpy>
    7c4c:	98000a26 	beq	r19,zero,7c78 <__multadd+0x140>
    7c50:	98c00117 	ldw	r3,4(r19)
    7c54:	a0801317 	ldw	r2,76(r20)
    7c58:	18c7883a 	add	r3,r3,r3
    7c5c:	18c7883a 	add	r3,r3,r3
    7c60:	10c5883a 	add	r2,r2,r3
    7c64:	10c00017 	ldw	r3,0(r2)
    7c68:	98c00015 	stw	r3,0(r19)
    7c6c:	14c00015 	stw	r19,0(r2)
    7c70:	8827883a 	mov	r19,r17
    7c74:	003fd606 	br	7bd0 <__alt_data_end+0xfffd7bd0>
    7c78:	8827883a 	mov	r19,r17
    7c7c:	003fd406 	br	7bd0 <__alt_data_end+0xfffd7bd0>

00007c80 <__s2b>:
    7c80:	defff904 	addi	sp,sp,-28
    7c84:	dc400115 	stw	r17,4(sp)
    7c88:	dc000015 	stw	r16,0(sp)
    7c8c:	2023883a 	mov	r17,r4
    7c90:	2821883a 	mov	r16,r5
    7c94:	39000204 	addi	r4,r7,8
    7c98:	01400244 	movi	r5,9
    7c9c:	dcc00315 	stw	r19,12(sp)
    7ca0:	dc800215 	stw	r18,8(sp)
    7ca4:	dfc00615 	stw	ra,24(sp)
    7ca8:	dd400515 	stw	r21,20(sp)
    7cac:	dd000415 	stw	r20,16(sp)
    7cb0:	3825883a 	mov	r18,r7
    7cb4:	3027883a 	mov	r19,r6
    7cb8:	0000ccc0 	call	ccc <__divsi3>
    7cbc:	00c00044 	movi	r3,1
    7cc0:	000b883a 	mov	r5,zero
    7cc4:	1880030e 	bge	r3,r2,7cd4 <__s2b+0x54>
    7cc8:	18c7883a 	add	r3,r3,r3
    7ccc:	29400044 	addi	r5,r5,1
    7cd0:	18bffd16 	blt	r3,r2,7cc8 <__alt_data_end+0xfffd7cc8>
    7cd4:	8809883a 	mov	r4,r17
    7cd8:	0007a680 	call	7a68 <_Balloc>
    7cdc:	d8c00717 	ldw	r3,28(sp)
    7ce0:	10c00515 	stw	r3,20(r2)
    7ce4:	00c00044 	movi	r3,1
    7ce8:	10c00415 	stw	r3,16(r2)
    7cec:	00c00244 	movi	r3,9
    7cf0:	1cc0210e 	bge	r3,r19,7d78 <__s2b+0xf8>
    7cf4:	80eb883a 	add	r21,r16,r3
    7cf8:	a829883a 	mov	r20,r21
    7cfc:	84e1883a 	add	r16,r16,r19
    7d00:	a1c00007 	ldb	r7,0(r20)
    7d04:	01800284 	movi	r6,10
    7d08:	a5000044 	addi	r20,r20,1
    7d0c:	100b883a 	mov	r5,r2
    7d10:	39fff404 	addi	r7,r7,-48
    7d14:	8809883a 	mov	r4,r17
    7d18:	0007b380 	call	7b38 <__multadd>
    7d1c:	a43ff81e 	bne	r20,r16,7d00 <__alt_data_end+0xfffd7d00>
    7d20:	ace1883a 	add	r16,r21,r19
    7d24:	843ffe04 	addi	r16,r16,-8
    7d28:	9c800a0e 	bge	r19,r18,7d54 <__s2b+0xd4>
    7d2c:	94e5c83a 	sub	r18,r18,r19
    7d30:	84a5883a 	add	r18,r16,r18
    7d34:	81c00007 	ldb	r7,0(r16)
    7d38:	01800284 	movi	r6,10
    7d3c:	84000044 	addi	r16,r16,1
    7d40:	100b883a 	mov	r5,r2
    7d44:	39fff404 	addi	r7,r7,-48
    7d48:	8809883a 	mov	r4,r17
    7d4c:	0007b380 	call	7b38 <__multadd>
    7d50:	84bff81e 	bne	r16,r18,7d34 <__alt_data_end+0xfffd7d34>
    7d54:	dfc00617 	ldw	ra,24(sp)
    7d58:	dd400517 	ldw	r21,20(sp)
    7d5c:	dd000417 	ldw	r20,16(sp)
    7d60:	dcc00317 	ldw	r19,12(sp)
    7d64:	dc800217 	ldw	r18,8(sp)
    7d68:	dc400117 	ldw	r17,4(sp)
    7d6c:	dc000017 	ldw	r16,0(sp)
    7d70:	dec00704 	addi	sp,sp,28
    7d74:	f800283a 	ret
    7d78:	84000284 	addi	r16,r16,10
    7d7c:	1827883a 	mov	r19,r3
    7d80:	003fe906 	br	7d28 <__alt_data_end+0xfffd7d28>

00007d84 <__hi0bits>:
    7d84:	20bfffec 	andhi	r2,r4,65535
    7d88:	1000141e 	bne	r2,zero,7ddc <__hi0bits+0x58>
    7d8c:	2008943a 	slli	r4,r4,16
    7d90:	00800404 	movi	r2,16
    7d94:	20ffc02c 	andhi	r3,r4,65280
    7d98:	1800021e 	bne	r3,zero,7da4 <__hi0bits+0x20>
    7d9c:	2008923a 	slli	r4,r4,8
    7da0:	10800204 	addi	r2,r2,8
    7da4:	20fc002c 	andhi	r3,r4,61440
    7da8:	1800021e 	bne	r3,zero,7db4 <__hi0bits+0x30>
    7dac:	2008913a 	slli	r4,r4,4
    7db0:	10800104 	addi	r2,r2,4
    7db4:	20f0002c 	andhi	r3,r4,49152
    7db8:	1800031e 	bne	r3,zero,7dc8 <__hi0bits+0x44>
    7dbc:	2109883a 	add	r4,r4,r4
    7dc0:	10800084 	addi	r2,r2,2
    7dc4:	2109883a 	add	r4,r4,r4
    7dc8:	20000316 	blt	r4,zero,7dd8 <__hi0bits+0x54>
    7dcc:	2110002c 	andhi	r4,r4,16384
    7dd0:	2000041e 	bne	r4,zero,7de4 <__hi0bits+0x60>
    7dd4:	00800804 	movi	r2,32
    7dd8:	f800283a 	ret
    7ddc:	0005883a 	mov	r2,zero
    7de0:	003fec06 	br	7d94 <__alt_data_end+0xfffd7d94>
    7de4:	10800044 	addi	r2,r2,1
    7de8:	f800283a 	ret

00007dec <__lo0bits>:
    7dec:	20c00017 	ldw	r3,0(r4)
    7df0:	188001cc 	andi	r2,r3,7
    7df4:	10000826 	beq	r2,zero,7e18 <__lo0bits+0x2c>
    7df8:	1880004c 	andi	r2,r3,1
    7dfc:	1000211e 	bne	r2,zero,7e84 <__lo0bits+0x98>
    7e00:	1880008c 	andi	r2,r3,2
    7e04:	1000211e 	bne	r2,zero,7e8c <__lo0bits+0xa0>
    7e08:	1806d0ba 	srli	r3,r3,2
    7e0c:	00800084 	movi	r2,2
    7e10:	20c00015 	stw	r3,0(r4)
    7e14:	f800283a 	ret
    7e18:	18bfffcc 	andi	r2,r3,65535
    7e1c:	10001326 	beq	r2,zero,7e6c <__lo0bits+0x80>
    7e20:	0005883a 	mov	r2,zero
    7e24:	19403fcc 	andi	r5,r3,255
    7e28:	2800021e 	bne	r5,zero,7e34 <__lo0bits+0x48>
    7e2c:	1806d23a 	srli	r3,r3,8
    7e30:	10800204 	addi	r2,r2,8
    7e34:	194003cc 	andi	r5,r3,15
    7e38:	2800021e 	bne	r5,zero,7e44 <__lo0bits+0x58>
    7e3c:	1806d13a 	srli	r3,r3,4
    7e40:	10800104 	addi	r2,r2,4
    7e44:	194000cc 	andi	r5,r3,3
    7e48:	2800021e 	bne	r5,zero,7e54 <__lo0bits+0x68>
    7e4c:	1806d0ba 	srli	r3,r3,2
    7e50:	10800084 	addi	r2,r2,2
    7e54:	1940004c 	andi	r5,r3,1
    7e58:	2800081e 	bne	r5,zero,7e7c <__lo0bits+0x90>
    7e5c:	1806d07a 	srli	r3,r3,1
    7e60:	1800051e 	bne	r3,zero,7e78 <__lo0bits+0x8c>
    7e64:	00800804 	movi	r2,32
    7e68:	f800283a 	ret
    7e6c:	1806d43a 	srli	r3,r3,16
    7e70:	00800404 	movi	r2,16
    7e74:	003feb06 	br	7e24 <__alt_data_end+0xfffd7e24>
    7e78:	10800044 	addi	r2,r2,1
    7e7c:	20c00015 	stw	r3,0(r4)
    7e80:	f800283a 	ret
    7e84:	0005883a 	mov	r2,zero
    7e88:	f800283a 	ret
    7e8c:	1806d07a 	srli	r3,r3,1
    7e90:	00800044 	movi	r2,1
    7e94:	20c00015 	stw	r3,0(r4)
    7e98:	f800283a 	ret

00007e9c <__i2b>:
    7e9c:	defffd04 	addi	sp,sp,-12
    7ea0:	dc000015 	stw	r16,0(sp)
    7ea4:	04000044 	movi	r16,1
    7ea8:	dc400115 	stw	r17,4(sp)
    7eac:	2823883a 	mov	r17,r5
    7eb0:	800b883a 	mov	r5,r16
    7eb4:	dfc00215 	stw	ra,8(sp)
    7eb8:	0007a680 	call	7a68 <_Balloc>
    7ebc:	14400515 	stw	r17,20(r2)
    7ec0:	14000415 	stw	r16,16(r2)
    7ec4:	dfc00217 	ldw	ra,8(sp)
    7ec8:	dc400117 	ldw	r17,4(sp)
    7ecc:	dc000017 	ldw	r16,0(sp)
    7ed0:	dec00304 	addi	sp,sp,12
    7ed4:	f800283a 	ret

00007ed8 <__multiply>:
    7ed8:	deffef04 	addi	sp,sp,-68
    7edc:	dc400815 	stw	r17,32(sp)
    7ee0:	dc000715 	stw	r16,28(sp)
    7ee4:	34400417 	ldw	r17,16(r6)
    7ee8:	2c000417 	ldw	r16,16(r5)
    7eec:	dd800d15 	stw	r22,52(sp)
    7ef0:	dc800915 	stw	r18,36(sp)
    7ef4:	dfc01015 	stw	ra,64(sp)
    7ef8:	df000f15 	stw	fp,60(sp)
    7efc:	ddc00e15 	stw	r23,56(sp)
    7f00:	dd400c15 	stw	r21,48(sp)
    7f04:	dd000b15 	stw	r20,44(sp)
    7f08:	dcc00a15 	stw	r19,40(sp)
    7f0c:	2825883a 	mov	r18,r5
    7f10:	302d883a 	mov	r22,r6
    7f14:	8440050e 	bge	r16,r17,7f2c <__multiply+0x54>
    7f18:	8007883a 	mov	r3,r16
    7f1c:	3025883a 	mov	r18,r6
    7f20:	8821883a 	mov	r16,r17
    7f24:	282d883a 	mov	r22,r5
    7f28:	1823883a 	mov	r17,r3
    7f2c:	90800217 	ldw	r2,8(r18)
    7f30:	8447883a 	add	r3,r16,r17
    7f34:	d8c00215 	stw	r3,8(sp)
    7f38:	91400117 	ldw	r5,4(r18)
    7f3c:	10c0010e 	bge	r2,r3,7f44 <__multiply+0x6c>
    7f40:	29400044 	addi	r5,r5,1
    7f44:	0007a680 	call	7a68 <_Balloc>
    7f48:	d8c00217 	ldw	r3,8(sp)
    7f4c:	d8800615 	stw	r2,24(sp)
    7f50:	18eb883a 	add	r21,r3,r3
    7f54:	ad6b883a 	add	r21,r21,r21
    7f58:	10c00504 	addi	r3,r2,20
    7f5c:	1d6b883a 	add	r21,r3,r21
    7f60:	d8c00115 	stw	r3,4(sp)
    7f64:	dd400315 	stw	r21,12(sp)
    7f68:	1805883a 	mov	r2,r3
    7f6c:	1d40042e 	bgeu	r3,r21,7f80 <__multiply+0xa8>
    7f70:	d8c00317 	ldw	r3,12(sp)
    7f74:	10000015 	stw	zero,0(r2)
    7f78:	10800104 	addi	r2,r2,4
    7f7c:	10fffc36 	bltu	r2,r3,7f70 <__alt_data_end+0xfffd7f70>
    7f80:	8c63883a 	add	r17,r17,r17
    7f84:	b5800504 	addi	r22,r22,20
    7f88:	8c63883a 	add	r17,r17,r17
    7f8c:	94800504 	addi	r18,r18,20
    7f90:	8421883a 	add	r16,r16,r16
    7f94:	b463883a 	add	r17,r22,r17
    7f98:	8421883a 	add	r16,r16,r16
    7f9c:	dd800015 	stw	r22,0(sp)
    7fa0:	dc800415 	stw	r18,16(sp)
    7fa4:	dc400515 	stw	r17,20(sp)
    7fa8:	9429883a 	add	r20,r18,r16
    7fac:	b4404f2e 	bgeu	r22,r17,80ec <__multiply+0x214>
    7fb0:	d8c00017 	ldw	r3,0(sp)
    7fb4:	1c800017 	ldw	r18,0(r3)
    7fb8:	947fffcc 	andi	r17,r18,65535
    7fbc:	88001e26 	beq	r17,zero,8038 <__multiply+0x160>
    7fc0:	dd800117 	ldw	r22,4(sp)
    7fc4:	dd400417 	ldw	r21,16(sp)
    7fc8:	0027883a 	mov	r19,zero
    7fcc:	ac800017 	ldw	r18,0(r21)
    7fd0:	b4000017 	ldw	r16,0(r22)
    7fd4:	880b883a 	mov	r5,r17
    7fd8:	913fffcc 	andi	r4,r18,65535
    7fdc:	000c3c80 	call	c3c8 <__mulsi3>
    7fe0:	9008d43a 	srli	r4,r18,16
    7fe4:	84bfffcc 	andi	r18,r16,65535
    7fe8:	1485883a 	add	r2,r2,r18
    7fec:	14e5883a 	add	r18,r2,r19
    7ff0:	8020d43a 	srli	r16,r16,16
    7ff4:	9026d43a 	srli	r19,r18,16
    7ff8:	880b883a 	mov	r5,r17
    7ffc:	000c3c80 	call	c3c8 <__mulsi3>
    8000:	1405883a 	add	r2,r2,r16
    8004:	14e1883a 	add	r16,r2,r19
    8008:	90ffffcc 	andi	r3,r18,65535
    800c:	8024943a 	slli	r18,r16,16
    8010:	ad400104 	addi	r21,r21,4
    8014:	b005883a 	mov	r2,r22
    8018:	90c6b03a 	or	r3,r18,r3
    801c:	b0c00015 	stw	r3,0(r22)
    8020:	8026d43a 	srli	r19,r16,16
    8024:	b5800104 	addi	r22,r22,4
    8028:	ad3fe836 	bltu	r21,r20,7fcc <__alt_data_end+0xfffd7fcc>
    802c:	d8c00017 	ldw	r3,0(sp)
    8030:	14c00115 	stw	r19,4(r2)
    8034:	1c800017 	ldw	r18,0(r3)
    8038:	9024d43a 	srli	r18,r18,16
    803c:	90002226 	beq	r18,zero,80c8 <__multiply+0x1f0>
    8040:	d8c00117 	ldw	r3,4(sp)
    8044:	dd800417 	ldw	r22,16(sp)
    8048:	002f883a 	mov	r23,zero
    804c:	1f000017 	ldw	fp,0(r3)
    8050:	1823883a 	mov	r17,r3
    8054:	182b883a 	mov	r21,r3
    8058:	e021883a 	mov	r16,fp
    805c:	00000106 	br	8064 <__multiply+0x18c>
    8060:	982b883a 	mov	r21,r19
    8064:	b100000b 	ldhu	r4,0(r22)
    8068:	8020d43a 	srli	r16,r16,16
    806c:	900b883a 	mov	r5,r18
    8070:	000c3c80 	call	c3c8 <__mulsi3>
    8074:	1405883a 	add	r2,r2,r16
    8078:	15ef883a 	add	r23,r2,r23
    807c:	b804943a 	slli	r2,r23,16
    8080:	e0ffffcc 	andi	r3,fp,65535
    8084:	8c400104 	addi	r17,r17,4
    8088:	10c6b03a 	or	r3,r2,r3
    808c:	88ffff15 	stw	r3,-4(r17)
    8090:	b5800104 	addi	r22,r22,4
    8094:	b13fff17 	ldw	r4,-4(r22)
    8098:	acc00104 	addi	r19,r21,4
    809c:	900b883a 	mov	r5,r18
    80a0:	2008d43a 	srli	r4,r4,16
    80a4:	9c000017 	ldw	r16,0(r19)
    80a8:	000c3c80 	call	c3c8 <__mulsi3>
    80ac:	b806d43a 	srli	r3,r23,16
    80b0:	813fffcc 	andi	r4,r16,65535
    80b4:	1105883a 	add	r2,r2,r4
    80b8:	10f9883a 	add	fp,r2,r3
    80bc:	e02ed43a 	srli	r23,fp,16
    80c0:	b53fe736 	bltu	r22,r20,8060 <__alt_data_end+0xfffd8060>
    80c4:	af000115 	stw	fp,4(r21)
    80c8:	d8c00017 	ldw	r3,0(sp)
    80cc:	d9000517 	ldw	r4,20(sp)
    80d0:	18c00104 	addi	r3,r3,4
    80d4:	d8c00015 	stw	r3,0(sp)
    80d8:	d8c00117 	ldw	r3,4(sp)
    80dc:	18c00104 	addi	r3,r3,4
    80e0:	d8c00115 	stw	r3,4(sp)
    80e4:	d8c00017 	ldw	r3,0(sp)
    80e8:	193fb136 	bltu	r3,r4,7fb0 <__alt_data_end+0xfffd7fb0>
    80ec:	d8c00217 	ldw	r3,8(sp)
    80f0:	00c00c0e 	bge	zero,r3,8124 <__multiply+0x24c>
    80f4:	d8c00317 	ldw	r3,12(sp)
    80f8:	18bfff17 	ldw	r2,-4(r3)
    80fc:	1d7fff04 	addi	r21,r3,-4
    8100:	10000326 	beq	r2,zero,8110 <__multiply+0x238>
    8104:	00000706 	br	8124 <__multiply+0x24c>
    8108:	a8800017 	ldw	r2,0(r21)
    810c:	1000051e 	bne	r2,zero,8124 <__multiply+0x24c>
    8110:	d8c00217 	ldw	r3,8(sp)
    8114:	ad7fff04 	addi	r21,r21,-4
    8118:	18ffffc4 	addi	r3,r3,-1
    811c:	d8c00215 	stw	r3,8(sp)
    8120:	183ff91e 	bne	r3,zero,8108 <__alt_data_end+0xfffd8108>
    8124:	d8c00617 	ldw	r3,24(sp)
    8128:	d9000217 	ldw	r4,8(sp)
    812c:	1805883a 	mov	r2,r3
    8130:	19000415 	stw	r4,16(r3)
    8134:	dfc01017 	ldw	ra,64(sp)
    8138:	df000f17 	ldw	fp,60(sp)
    813c:	ddc00e17 	ldw	r23,56(sp)
    8140:	dd800d17 	ldw	r22,52(sp)
    8144:	dd400c17 	ldw	r21,48(sp)
    8148:	dd000b17 	ldw	r20,44(sp)
    814c:	dcc00a17 	ldw	r19,40(sp)
    8150:	dc800917 	ldw	r18,36(sp)
    8154:	dc400817 	ldw	r17,32(sp)
    8158:	dc000717 	ldw	r16,28(sp)
    815c:	dec01104 	addi	sp,sp,68
    8160:	f800283a 	ret

00008164 <__pow5mult>:
    8164:	defffa04 	addi	sp,sp,-24
    8168:	dcc00315 	stw	r19,12(sp)
    816c:	dc000015 	stw	r16,0(sp)
    8170:	dfc00515 	stw	ra,20(sp)
    8174:	dd000415 	stw	r20,16(sp)
    8178:	dc800215 	stw	r18,8(sp)
    817c:	dc400115 	stw	r17,4(sp)
    8180:	308000cc 	andi	r2,r6,3
    8184:	3021883a 	mov	r16,r6
    8188:	2027883a 	mov	r19,r4
    818c:	10002f1e 	bne	r2,zero,824c <__pow5mult+0xe8>
    8190:	2825883a 	mov	r18,r5
    8194:	8021d0ba 	srai	r16,r16,2
    8198:	80001a26 	beq	r16,zero,8204 <__pow5mult+0xa0>
    819c:	9c401217 	ldw	r17,72(r19)
    81a0:	8800061e 	bne	r17,zero,81bc <__pow5mult+0x58>
    81a4:	00003406 	br	8278 <__pow5mult+0x114>
    81a8:	8021d07a 	srai	r16,r16,1
    81ac:	80001526 	beq	r16,zero,8204 <__pow5mult+0xa0>
    81b0:	88800017 	ldw	r2,0(r17)
    81b4:	10001c26 	beq	r2,zero,8228 <__pow5mult+0xc4>
    81b8:	1023883a 	mov	r17,r2
    81bc:	8080004c 	andi	r2,r16,1
    81c0:	103ff926 	beq	r2,zero,81a8 <__alt_data_end+0xfffd81a8>
    81c4:	880d883a 	mov	r6,r17
    81c8:	900b883a 	mov	r5,r18
    81cc:	9809883a 	mov	r4,r19
    81d0:	0007ed80 	call	7ed8 <__multiply>
    81d4:	90001b26 	beq	r18,zero,8244 <__pow5mult+0xe0>
    81d8:	91000117 	ldw	r4,4(r18)
    81dc:	98c01317 	ldw	r3,76(r19)
    81e0:	8021d07a 	srai	r16,r16,1
    81e4:	2109883a 	add	r4,r4,r4
    81e8:	2109883a 	add	r4,r4,r4
    81ec:	1907883a 	add	r3,r3,r4
    81f0:	19000017 	ldw	r4,0(r3)
    81f4:	91000015 	stw	r4,0(r18)
    81f8:	1c800015 	stw	r18,0(r3)
    81fc:	1025883a 	mov	r18,r2
    8200:	803feb1e 	bne	r16,zero,81b0 <__alt_data_end+0xfffd81b0>
    8204:	9005883a 	mov	r2,r18
    8208:	dfc00517 	ldw	ra,20(sp)
    820c:	dd000417 	ldw	r20,16(sp)
    8210:	dcc00317 	ldw	r19,12(sp)
    8214:	dc800217 	ldw	r18,8(sp)
    8218:	dc400117 	ldw	r17,4(sp)
    821c:	dc000017 	ldw	r16,0(sp)
    8220:	dec00604 	addi	sp,sp,24
    8224:	f800283a 	ret
    8228:	880d883a 	mov	r6,r17
    822c:	880b883a 	mov	r5,r17
    8230:	9809883a 	mov	r4,r19
    8234:	0007ed80 	call	7ed8 <__multiply>
    8238:	88800015 	stw	r2,0(r17)
    823c:	10000015 	stw	zero,0(r2)
    8240:	003fdd06 	br	81b8 <__alt_data_end+0xfffd81b8>
    8244:	1025883a 	mov	r18,r2
    8248:	003fd706 	br	81a8 <__alt_data_end+0xfffd81a8>
    824c:	10bfffc4 	addi	r2,r2,-1
    8250:	1085883a 	add	r2,r2,r2
    8254:	00c000b4 	movhi	r3,2
    8258:	18e59404 	addi	r3,r3,-27056
    825c:	1085883a 	add	r2,r2,r2
    8260:	1885883a 	add	r2,r3,r2
    8264:	11800017 	ldw	r6,0(r2)
    8268:	000f883a 	mov	r7,zero
    826c:	0007b380 	call	7b38 <__multadd>
    8270:	1025883a 	mov	r18,r2
    8274:	003fc706 	br	8194 <__alt_data_end+0xfffd8194>
    8278:	05000044 	movi	r20,1
    827c:	a00b883a 	mov	r5,r20
    8280:	9809883a 	mov	r4,r19
    8284:	0007a680 	call	7a68 <_Balloc>
    8288:	1023883a 	mov	r17,r2
    828c:	00809c44 	movi	r2,625
    8290:	88800515 	stw	r2,20(r17)
    8294:	8d000415 	stw	r20,16(r17)
    8298:	9c401215 	stw	r17,72(r19)
    829c:	88000015 	stw	zero,0(r17)
    82a0:	003fc606 	br	81bc <__alt_data_end+0xfffd81bc>

000082a4 <__lshift>:
    82a4:	defff904 	addi	sp,sp,-28
    82a8:	dd400515 	stw	r21,20(sp)
    82ac:	dcc00315 	stw	r19,12(sp)
    82b0:	302bd17a 	srai	r21,r6,5
    82b4:	2cc00417 	ldw	r19,16(r5)
    82b8:	28800217 	ldw	r2,8(r5)
    82bc:	dd000415 	stw	r20,16(sp)
    82c0:	ace7883a 	add	r19,r21,r19
    82c4:	dc800215 	stw	r18,8(sp)
    82c8:	dc400115 	stw	r17,4(sp)
    82cc:	dc000015 	stw	r16,0(sp)
    82d0:	dfc00615 	stw	ra,24(sp)
    82d4:	9c000044 	addi	r16,r19,1
    82d8:	2823883a 	mov	r17,r5
    82dc:	3029883a 	mov	r20,r6
    82e0:	2025883a 	mov	r18,r4
    82e4:	29400117 	ldw	r5,4(r5)
    82e8:	1400030e 	bge	r2,r16,82f8 <__lshift+0x54>
    82ec:	1085883a 	add	r2,r2,r2
    82f0:	29400044 	addi	r5,r5,1
    82f4:	143ffd16 	blt	r2,r16,82ec <__alt_data_end+0xfffd82ec>
    82f8:	9009883a 	mov	r4,r18
    82fc:	0007a680 	call	7a68 <_Balloc>
    8300:	10c00504 	addi	r3,r2,20
    8304:	0540070e 	bge	zero,r21,8324 <__lshift+0x80>
    8308:	ad6b883a 	add	r21,r21,r21
    830c:	ad6b883a 	add	r21,r21,r21
    8310:	1809883a 	mov	r4,r3
    8314:	1d47883a 	add	r3,r3,r21
    8318:	20000015 	stw	zero,0(r4)
    831c:	21000104 	addi	r4,r4,4
    8320:	193ffd1e 	bne	r3,r4,8318 <__alt_data_end+0xfffd8318>
    8324:	8a000417 	ldw	r8,16(r17)
    8328:	89000504 	addi	r4,r17,20
    832c:	a18007cc 	andi	r6,r20,31
    8330:	4211883a 	add	r8,r8,r8
    8334:	4211883a 	add	r8,r8,r8
    8338:	2211883a 	add	r8,r4,r8
    833c:	30002326 	beq	r6,zero,83cc <__lshift+0x128>
    8340:	02400804 	movi	r9,32
    8344:	4993c83a 	sub	r9,r9,r6
    8348:	000b883a 	mov	r5,zero
    834c:	21c00017 	ldw	r7,0(r4)
    8350:	1815883a 	mov	r10,r3
    8354:	18c00104 	addi	r3,r3,4
    8358:	398e983a 	sll	r7,r7,r6
    835c:	21000104 	addi	r4,r4,4
    8360:	394ab03a 	or	r5,r7,r5
    8364:	197fff15 	stw	r5,-4(r3)
    8368:	217fff17 	ldw	r5,-4(r4)
    836c:	2a4ad83a 	srl	r5,r5,r9
    8370:	223ff636 	bltu	r4,r8,834c <__alt_data_end+0xfffd834c>
    8374:	51400115 	stw	r5,4(r10)
    8378:	28001a1e 	bne	r5,zero,83e4 <__lshift+0x140>
    837c:	843fffc4 	addi	r16,r16,-1
    8380:	14000415 	stw	r16,16(r2)
    8384:	88000826 	beq	r17,zero,83a8 <__lshift+0x104>
    8388:	89000117 	ldw	r4,4(r17)
    838c:	90c01317 	ldw	r3,76(r18)
    8390:	2109883a 	add	r4,r4,r4
    8394:	2109883a 	add	r4,r4,r4
    8398:	1907883a 	add	r3,r3,r4
    839c:	19000017 	ldw	r4,0(r3)
    83a0:	89000015 	stw	r4,0(r17)
    83a4:	1c400015 	stw	r17,0(r3)
    83a8:	dfc00617 	ldw	ra,24(sp)
    83ac:	dd400517 	ldw	r21,20(sp)
    83b0:	dd000417 	ldw	r20,16(sp)
    83b4:	dcc00317 	ldw	r19,12(sp)
    83b8:	dc800217 	ldw	r18,8(sp)
    83bc:	dc400117 	ldw	r17,4(sp)
    83c0:	dc000017 	ldw	r16,0(sp)
    83c4:	dec00704 	addi	sp,sp,28
    83c8:	f800283a 	ret
    83cc:	21400017 	ldw	r5,0(r4)
    83d0:	18c00104 	addi	r3,r3,4
    83d4:	21000104 	addi	r4,r4,4
    83d8:	197fff15 	stw	r5,-4(r3)
    83dc:	223ffb36 	bltu	r4,r8,83cc <__alt_data_end+0xfffd83cc>
    83e0:	003fe606 	br	837c <__alt_data_end+0xfffd837c>
    83e4:	9c000084 	addi	r16,r19,2
    83e8:	003fe406 	br	837c <__alt_data_end+0xfffd837c>

000083ec <__mcmp>:
    83ec:	20800417 	ldw	r2,16(r4)
    83f0:	28c00417 	ldw	r3,16(r5)
    83f4:	10c5c83a 	sub	r2,r2,r3
    83f8:	1000111e 	bne	r2,zero,8440 <__mcmp+0x54>
    83fc:	18c7883a 	add	r3,r3,r3
    8400:	18c7883a 	add	r3,r3,r3
    8404:	21000504 	addi	r4,r4,20
    8408:	29400504 	addi	r5,r5,20
    840c:	20c5883a 	add	r2,r4,r3
    8410:	28cb883a 	add	r5,r5,r3
    8414:	00000106 	br	841c <__mcmp+0x30>
    8418:	20800a2e 	bgeu	r4,r2,8444 <__mcmp+0x58>
    841c:	10bfff04 	addi	r2,r2,-4
    8420:	297fff04 	addi	r5,r5,-4
    8424:	11800017 	ldw	r6,0(r2)
    8428:	28c00017 	ldw	r3,0(r5)
    842c:	30fffa26 	beq	r6,r3,8418 <__alt_data_end+0xfffd8418>
    8430:	30c00236 	bltu	r6,r3,843c <__mcmp+0x50>
    8434:	00800044 	movi	r2,1
    8438:	f800283a 	ret
    843c:	00bfffc4 	movi	r2,-1
    8440:	f800283a 	ret
    8444:	0005883a 	mov	r2,zero
    8448:	f800283a 	ret

0000844c <__mdiff>:
    844c:	28c00417 	ldw	r3,16(r5)
    8450:	30800417 	ldw	r2,16(r6)
    8454:	defffa04 	addi	sp,sp,-24
    8458:	dcc00315 	stw	r19,12(sp)
    845c:	dc800215 	stw	r18,8(sp)
    8460:	dfc00515 	stw	ra,20(sp)
    8464:	dd000415 	stw	r20,16(sp)
    8468:	dc400115 	stw	r17,4(sp)
    846c:	dc000015 	stw	r16,0(sp)
    8470:	1887c83a 	sub	r3,r3,r2
    8474:	2825883a 	mov	r18,r5
    8478:	3027883a 	mov	r19,r6
    847c:	1800141e 	bne	r3,zero,84d0 <__mdiff+0x84>
    8480:	1085883a 	add	r2,r2,r2
    8484:	1085883a 	add	r2,r2,r2
    8488:	2a000504 	addi	r8,r5,20
    848c:	34000504 	addi	r16,r6,20
    8490:	4087883a 	add	r3,r8,r2
    8494:	8085883a 	add	r2,r16,r2
    8498:	00000106 	br	84a0 <__mdiff+0x54>
    849c:	40c0592e 	bgeu	r8,r3,8604 <__mdiff+0x1b8>
    84a0:	18ffff04 	addi	r3,r3,-4
    84a4:	10bfff04 	addi	r2,r2,-4
    84a8:	19c00017 	ldw	r7,0(r3)
    84ac:	11400017 	ldw	r5,0(r2)
    84b0:	397ffa26 	beq	r7,r5,849c <__alt_data_end+0xfffd849c>
    84b4:	3940592e 	bgeu	r7,r5,861c <__mdiff+0x1d0>
    84b8:	9005883a 	mov	r2,r18
    84bc:	4023883a 	mov	r17,r8
    84c0:	9825883a 	mov	r18,r19
    84c4:	05000044 	movi	r20,1
    84c8:	1027883a 	mov	r19,r2
    84cc:	00000406 	br	84e0 <__mdiff+0x94>
    84d0:	18005616 	blt	r3,zero,862c <__mdiff+0x1e0>
    84d4:	34400504 	addi	r17,r6,20
    84d8:	2c000504 	addi	r16,r5,20
    84dc:	0029883a 	mov	r20,zero
    84e0:	91400117 	ldw	r5,4(r18)
    84e4:	0007a680 	call	7a68 <_Balloc>
    84e8:	92400417 	ldw	r9,16(r18)
    84ec:	9b000417 	ldw	r12,16(r19)
    84f0:	12c00504 	addi	r11,r2,20
    84f4:	4a51883a 	add	r8,r9,r9
    84f8:	6319883a 	add	r12,r12,r12
    84fc:	4211883a 	add	r8,r8,r8
    8500:	6319883a 	add	r12,r12,r12
    8504:	15000315 	stw	r20,12(r2)
    8508:	8211883a 	add	r8,r16,r8
    850c:	8b19883a 	add	r12,r17,r12
    8510:	0007883a 	mov	r3,zero
    8514:	81400017 	ldw	r5,0(r16)
    8518:	89c00017 	ldw	r7,0(r17)
    851c:	59800104 	addi	r6,r11,4
    8520:	293fffcc 	andi	r4,r5,65535
    8524:	20c7883a 	add	r3,r4,r3
    8528:	393fffcc 	andi	r4,r7,65535
    852c:	1909c83a 	sub	r4,r3,r4
    8530:	280ad43a 	srli	r5,r5,16
    8534:	380ed43a 	srli	r7,r7,16
    8538:	2007d43a 	srai	r3,r4,16
    853c:	213fffcc 	andi	r4,r4,65535
    8540:	29cbc83a 	sub	r5,r5,r7
    8544:	28c7883a 	add	r3,r5,r3
    8548:	180a943a 	slli	r5,r3,16
    854c:	8c400104 	addi	r17,r17,4
    8550:	84000104 	addi	r16,r16,4
    8554:	2908b03a 	or	r4,r5,r4
    8558:	59000015 	stw	r4,0(r11)
    855c:	1807d43a 	srai	r3,r3,16
    8560:	3015883a 	mov	r10,r6
    8564:	3017883a 	mov	r11,r6
    8568:	8b3fea36 	bltu	r17,r12,8514 <__alt_data_end+0xfffd8514>
    856c:	8200162e 	bgeu	r16,r8,85c8 <__mdiff+0x17c>
    8570:	8017883a 	mov	r11,r16
    8574:	59400017 	ldw	r5,0(r11)
    8578:	31800104 	addi	r6,r6,4
    857c:	5ac00104 	addi	r11,r11,4
    8580:	293fffcc 	andi	r4,r5,65535
    8584:	20c7883a 	add	r3,r4,r3
    8588:	280ed43a 	srli	r7,r5,16
    858c:	180bd43a 	srai	r5,r3,16
    8590:	193fffcc 	andi	r4,r3,65535
    8594:	3947883a 	add	r3,r7,r5
    8598:	180a943a 	slli	r5,r3,16
    859c:	1807d43a 	srai	r3,r3,16
    85a0:	2908b03a 	or	r4,r5,r4
    85a4:	313fff15 	stw	r4,-4(r6)
    85a8:	5a3ff236 	bltu	r11,r8,8574 <__alt_data_end+0xfffd8574>
    85ac:	0406303a 	nor	r3,zero,r16
    85b0:	1a07883a 	add	r3,r3,r8
    85b4:	1806d0ba 	srli	r3,r3,2
    85b8:	18c00044 	addi	r3,r3,1
    85bc:	18c7883a 	add	r3,r3,r3
    85c0:	18c7883a 	add	r3,r3,r3
    85c4:	50d5883a 	add	r10,r10,r3
    85c8:	50ffff04 	addi	r3,r10,-4
    85cc:	2000041e 	bne	r4,zero,85e0 <__mdiff+0x194>
    85d0:	18ffff04 	addi	r3,r3,-4
    85d4:	19000017 	ldw	r4,0(r3)
    85d8:	4a7fffc4 	addi	r9,r9,-1
    85dc:	203ffc26 	beq	r4,zero,85d0 <__alt_data_end+0xfffd85d0>
    85e0:	12400415 	stw	r9,16(r2)
    85e4:	dfc00517 	ldw	ra,20(sp)
    85e8:	dd000417 	ldw	r20,16(sp)
    85ec:	dcc00317 	ldw	r19,12(sp)
    85f0:	dc800217 	ldw	r18,8(sp)
    85f4:	dc400117 	ldw	r17,4(sp)
    85f8:	dc000017 	ldw	r16,0(sp)
    85fc:	dec00604 	addi	sp,sp,24
    8600:	f800283a 	ret
    8604:	000b883a 	mov	r5,zero
    8608:	0007a680 	call	7a68 <_Balloc>
    860c:	00c00044 	movi	r3,1
    8610:	10c00415 	stw	r3,16(r2)
    8614:	10000515 	stw	zero,20(r2)
    8618:	003ff206 	br	85e4 <__alt_data_end+0xfffd85e4>
    861c:	8023883a 	mov	r17,r16
    8620:	0029883a 	mov	r20,zero
    8624:	4021883a 	mov	r16,r8
    8628:	003fad06 	br	84e0 <__alt_data_end+0xfffd84e0>
    862c:	9005883a 	mov	r2,r18
    8630:	94400504 	addi	r17,r18,20
    8634:	9c000504 	addi	r16,r19,20
    8638:	9825883a 	mov	r18,r19
    863c:	05000044 	movi	r20,1
    8640:	1027883a 	mov	r19,r2
    8644:	003fa606 	br	84e0 <__alt_data_end+0xfffd84e0>

00008648 <__ulp>:
    8648:	295ffc2c 	andhi	r5,r5,32752
    864c:	00bf3034 	movhi	r2,64704
    8650:	2887883a 	add	r3,r5,r2
    8654:	00c0020e 	bge	zero,r3,8660 <__ulp+0x18>
    8658:	0005883a 	mov	r2,zero
    865c:	f800283a 	ret
    8660:	00c7c83a 	sub	r3,zero,r3
    8664:	1807d53a 	srai	r3,r3,20
    8668:	008004c4 	movi	r2,19
    866c:	10c00b0e 	bge	r2,r3,869c <__ulp+0x54>
    8670:	18bffb04 	addi	r2,r3,-20
    8674:	01000784 	movi	r4,30
    8678:	0007883a 	mov	r3,zero
    867c:	20800516 	blt	r4,r2,8694 <__ulp+0x4c>
    8680:	010007c4 	movi	r4,31
    8684:	2089c83a 	sub	r4,r4,r2
    8688:	00800044 	movi	r2,1
    868c:	1104983a 	sll	r2,r2,r4
    8690:	f800283a 	ret
    8694:	00800044 	movi	r2,1
    8698:	f800283a 	ret
    869c:	01400234 	movhi	r5,8
    86a0:	28c7d83a 	sra	r3,r5,r3
    86a4:	0005883a 	mov	r2,zero
    86a8:	f800283a 	ret

000086ac <__b2d>:
    86ac:	defffa04 	addi	sp,sp,-24
    86b0:	dc000015 	stw	r16,0(sp)
    86b4:	24000417 	ldw	r16,16(r4)
    86b8:	dc400115 	stw	r17,4(sp)
    86bc:	24400504 	addi	r17,r4,20
    86c0:	8421883a 	add	r16,r16,r16
    86c4:	8421883a 	add	r16,r16,r16
    86c8:	8c21883a 	add	r16,r17,r16
    86cc:	dc800215 	stw	r18,8(sp)
    86d0:	84bfff17 	ldw	r18,-4(r16)
    86d4:	dd000415 	stw	r20,16(sp)
    86d8:	dcc00315 	stw	r19,12(sp)
    86dc:	9009883a 	mov	r4,r18
    86e0:	2829883a 	mov	r20,r5
    86e4:	dfc00515 	stw	ra,20(sp)
    86e8:	0007d840 	call	7d84 <__hi0bits>
    86ec:	00c00804 	movi	r3,32
    86f0:	1889c83a 	sub	r4,r3,r2
    86f4:	a1000015 	stw	r4,0(r20)
    86f8:	01000284 	movi	r4,10
    86fc:	84ffff04 	addi	r19,r16,-4
    8700:	20801216 	blt	r4,r2,874c <__b2d+0xa0>
    8704:	018002c4 	movi	r6,11
    8708:	308dc83a 	sub	r6,r6,r2
    870c:	9186d83a 	srl	r3,r18,r6
    8710:	18cffc34 	orhi	r3,r3,16368
    8714:	8cc0212e 	bgeu	r17,r19,879c <__b2d+0xf0>
    8718:	813ffe17 	ldw	r4,-8(r16)
    871c:	218cd83a 	srl	r6,r4,r6
    8720:	10800544 	addi	r2,r2,21
    8724:	9084983a 	sll	r2,r18,r2
    8728:	1184b03a 	or	r2,r2,r6
    872c:	dfc00517 	ldw	ra,20(sp)
    8730:	dd000417 	ldw	r20,16(sp)
    8734:	dcc00317 	ldw	r19,12(sp)
    8738:	dc800217 	ldw	r18,8(sp)
    873c:	dc400117 	ldw	r17,4(sp)
    8740:	dc000017 	ldw	r16,0(sp)
    8744:	dec00604 	addi	sp,sp,24
    8748:	f800283a 	ret
    874c:	8cc00f2e 	bgeu	r17,r19,878c <__b2d+0xe0>
    8750:	117ffd44 	addi	r5,r2,-11
    8754:	80bffe17 	ldw	r2,-8(r16)
    8758:	28000e26 	beq	r5,zero,8794 <__b2d+0xe8>
    875c:	1949c83a 	sub	r4,r3,r5
    8760:	9164983a 	sll	r18,r18,r5
    8764:	1106d83a 	srl	r3,r2,r4
    8768:	81bffe04 	addi	r6,r16,-8
    876c:	948ffc34 	orhi	r18,r18,16368
    8770:	90c6b03a 	or	r3,r18,r3
    8774:	89800e2e 	bgeu	r17,r6,87b0 <__b2d+0x104>
    8778:	81bffd17 	ldw	r6,-12(r16)
    877c:	1144983a 	sll	r2,r2,r5
    8780:	310ad83a 	srl	r5,r6,r4
    8784:	2884b03a 	or	r2,r5,r2
    8788:	003fe806 	br	872c <__alt_data_end+0xfffd872c>
    878c:	10bffd44 	addi	r2,r2,-11
    8790:	1000041e 	bne	r2,zero,87a4 <__b2d+0xf8>
    8794:	90cffc34 	orhi	r3,r18,16368
    8798:	003fe406 	br	872c <__alt_data_end+0xfffd872c>
    879c:	000d883a 	mov	r6,zero
    87a0:	003fdf06 	br	8720 <__alt_data_end+0xfffd8720>
    87a4:	90a4983a 	sll	r18,r18,r2
    87a8:	0005883a 	mov	r2,zero
    87ac:	003ff906 	br	8794 <__alt_data_end+0xfffd8794>
    87b0:	1144983a 	sll	r2,r2,r5
    87b4:	003fdd06 	br	872c <__alt_data_end+0xfffd872c>

000087b8 <__d2b>:
    87b8:	defff804 	addi	sp,sp,-32
    87bc:	dc000215 	stw	r16,8(sp)
    87c0:	3021883a 	mov	r16,r6
    87c4:	dc400315 	stw	r17,12(sp)
    87c8:	8022907a 	slli	r17,r16,1
    87cc:	dd000615 	stw	r20,24(sp)
    87d0:	2829883a 	mov	r20,r5
    87d4:	01400044 	movi	r5,1
    87d8:	dcc00515 	stw	r19,20(sp)
    87dc:	dc800415 	stw	r18,16(sp)
    87e0:	dfc00715 	stw	ra,28(sp)
    87e4:	3825883a 	mov	r18,r7
    87e8:	8822d57a 	srli	r17,r17,21
    87ec:	0007a680 	call	7a68 <_Balloc>
    87f0:	1027883a 	mov	r19,r2
    87f4:	00800434 	movhi	r2,16
    87f8:	10bfffc4 	addi	r2,r2,-1
    87fc:	808c703a 	and	r6,r16,r2
    8800:	88000126 	beq	r17,zero,8808 <__d2b+0x50>
    8804:	31800434 	orhi	r6,r6,16
    8808:	d9800015 	stw	r6,0(sp)
    880c:	a0002426 	beq	r20,zero,88a0 <__d2b+0xe8>
    8810:	d9000104 	addi	r4,sp,4
    8814:	dd000115 	stw	r20,4(sp)
    8818:	0007dec0 	call	7dec <__lo0bits>
    881c:	d8c00017 	ldw	r3,0(sp)
    8820:	10002f1e 	bne	r2,zero,88e0 <__d2b+0x128>
    8824:	d9000117 	ldw	r4,4(sp)
    8828:	99000515 	stw	r4,20(r19)
    882c:	1821003a 	cmpeq	r16,r3,zero
    8830:	01000084 	movi	r4,2
    8834:	2421c83a 	sub	r16,r4,r16
    8838:	98c00615 	stw	r3,24(r19)
    883c:	9c000415 	stw	r16,16(r19)
    8840:	88001f1e 	bne	r17,zero,88c0 <__d2b+0x108>
    8844:	10bef384 	addi	r2,r2,-1074
    8848:	90800015 	stw	r2,0(r18)
    884c:	00900034 	movhi	r2,16384
    8850:	10bfffc4 	addi	r2,r2,-1
    8854:	8085883a 	add	r2,r16,r2
    8858:	1085883a 	add	r2,r2,r2
    885c:	1085883a 	add	r2,r2,r2
    8860:	9885883a 	add	r2,r19,r2
    8864:	11000517 	ldw	r4,20(r2)
    8868:	8020917a 	slli	r16,r16,5
    886c:	0007d840 	call	7d84 <__hi0bits>
    8870:	d8c00817 	ldw	r3,32(sp)
    8874:	8085c83a 	sub	r2,r16,r2
    8878:	18800015 	stw	r2,0(r3)
    887c:	9805883a 	mov	r2,r19
    8880:	dfc00717 	ldw	ra,28(sp)
    8884:	dd000617 	ldw	r20,24(sp)
    8888:	dcc00517 	ldw	r19,20(sp)
    888c:	dc800417 	ldw	r18,16(sp)
    8890:	dc400317 	ldw	r17,12(sp)
    8894:	dc000217 	ldw	r16,8(sp)
    8898:	dec00804 	addi	sp,sp,32
    889c:	f800283a 	ret
    88a0:	d809883a 	mov	r4,sp
    88a4:	0007dec0 	call	7dec <__lo0bits>
    88a8:	d8c00017 	ldw	r3,0(sp)
    88ac:	04000044 	movi	r16,1
    88b0:	9c000415 	stw	r16,16(r19)
    88b4:	98c00515 	stw	r3,20(r19)
    88b8:	10800804 	addi	r2,r2,32
    88bc:	883fe126 	beq	r17,zero,8844 <__alt_data_end+0xfffd8844>
    88c0:	00c00d44 	movi	r3,53
    88c4:	8c7ef344 	addi	r17,r17,-1075
    88c8:	88a3883a 	add	r17,r17,r2
    88cc:	1885c83a 	sub	r2,r3,r2
    88d0:	d8c00817 	ldw	r3,32(sp)
    88d4:	94400015 	stw	r17,0(r18)
    88d8:	18800015 	stw	r2,0(r3)
    88dc:	003fe706 	br	887c <__alt_data_end+0xfffd887c>
    88e0:	01000804 	movi	r4,32
    88e4:	2089c83a 	sub	r4,r4,r2
    88e8:	1908983a 	sll	r4,r3,r4
    88ec:	d9400117 	ldw	r5,4(sp)
    88f0:	1886d83a 	srl	r3,r3,r2
    88f4:	2148b03a 	or	r4,r4,r5
    88f8:	99000515 	stw	r4,20(r19)
    88fc:	d8c00015 	stw	r3,0(sp)
    8900:	003fca06 	br	882c <__alt_data_end+0xfffd882c>

00008904 <__ratio>:
    8904:	defff904 	addi	sp,sp,-28
    8908:	dc400315 	stw	r17,12(sp)
    890c:	2823883a 	mov	r17,r5
    8910:	d9400104 	addi	r5,sp,4
    8914:	dfc00615 	stw	ra,24(sp)
    8918:	dcc00515 	stw	r19,20(sp)
    891c:	dc800415 	stw	r18,16(sp)
    8920:	2027883a 	mov	r19,r4
    8924:	dc000215 	stw	r16,8(sp)
    8928:	00086ac0 	call	86ac <__b2d>
    892c:	d80b883a 	mov	r5,sp
    8930:	8809883a 	mov	r4,r17
    8934:	1025883a 	mov	r18,r2
    8938:	1821883a 	mov	r16,r3
    893c:	00086ac0 	call	86ac <__b2d>
    8940:	8a000417 	ldw	r8,16(r17)
    8944:	99000417 	ldw	r4,16(r19)
    8948:	d9400117 	ldw	r5,4(sp)
    894c:	2209c83a 	sub	r4,r4,r8
    8950:	2010917a 	slli	r8,r4,5
    8954:	d9000017 	ldw	r4,0(sp)
    8958:	2909c83a 	sub	r4,r5,r4
    895c:	4109883a 	add	r4,r8,r4
    8960:	01000e0e 	bge	zero,r4,899c <__ratio+0x98>
    8964:	2008953a 	slli	r4,r4,20
    8968:	2421883a 	add	r16,r4,r16
    896c:	100d883a 	mov	r6,r2
    8970:	180f883a 	mov	r7,r3
    8974:	9009883a 	mov	r4,r18
    8978:	800b883a 	mov	r5,r16
    897c:	000cc9c0 	call	cc9c <__divdf3>
    8980:	dfc00617 	ldw	ra,24(sp)
    8984:	dcc00517 	ldw	r19,20(sp)
    8988:	dc800417 	ldw	r18,16(sp)
    898c:	dc400317 	ldw	r17,12(sp)
    8990:	dc000217 	ldw	r16,8(sp)
    8994:	dec00704 	addi	sp,sp,28
    8998:	f800283a 	ret
    899c:	2008953a 	slli	r4,r4,20
    89a0:	1907c83a 	sub	r3,r3,r4
    89a4:	003ff106 	br	896c <__alt_data_end+0xfffd896c>

000089a8 <_mprec_log10>:
    89a8:	defffe04 	addi	sp,sp,-8
    89ac:	dc000015 	stw	r16,0(sp)
    89b0:	dfc00115 	stw	ra,4(sp)
    89b4:	008005c4 	movi	r2,23
    89b8:	2021883a 	mov	r16,r4
    89bc:	11000d0e 	bge	r2,r4,89f4 <_mprec_log10+0x4c>
    89c0:	0005883a 	mov	r2,zero
    89c4:	00cffc34 	movhi	r3,16368
    89c8:	843fffc4 	addi	r16,r16,-1
    89cc:	000d883a 	mov	r6,zero
    89d0:	01d00934 	movhi	r7,16420
    89d4:	1009883a 	mov	r4,r2
    89d8:	180b883a 	mov	r5,r3
    89dc:	000d8c40 	call	d8c4 <__muldf3>
    89e0:	803ff91e 	bne	r16,zero,89c8 <__alt_data_end+0xfffd89c8>
    89e4:	dfc00117 	ldw	ra,4(sp)
    89e8:	dc000017 	ldw	r16,0(sp)
    89ec:	dec00204 	addi	sp,sp,8
    89f0:	f800283a 	ret
    89f4:	202090fa 	slli	r16,r4,3
    89f8:	008000b4 	movhi	r2,2
    89fc:	10a5ab04 	addi	r2,r2,-26964
    8a00:	1421883a 	add	r16,r2,r16
    8a04:	80800017 	ldw	r2,0(r16)
    8a08:	80c00117 	ldw	r3,4(r16)
    8a0c:	dfc00117 	ldw	ra,4(sp)
    8a10:	dc000017 	ldw	r16,0(sp)
    8a14:	dec00204 	addi	sp,sp,8
    8a18:	f800283a 	ret

00008a1c <__copybits>:
    8a1c:	297fffc4 	addi	r5,r5,-1
    8a20:	280fd17a 	srai	r7,r5,5
    8a24:	30c00417 	ldw	r3,16(r6)
    8a28:	30800504 	addi	r2,r6,20
    8a2c:	39c00044 	addi	r7,r7,1
    8a30:	18c7883a 	add	r3,r3,r3
    8a34:	39cf883a 	add	r7,r7,r7
    8a38:	18c7883a 	add	r3,r3,r3
    8a3c:	39cf883a 	add	r7,r7,r7
    8a40:	10c7883a 	add	r3,r2,r3
    8a44:	21cf883a 	add	r7,r4,r7
    8a48:	10c00d2e 	bgeu	r2,r3,8a80 <__copybits+0x64>
    8a4c:	200b883a 	mov	r5,r4
    8a50:	12000017 	ldw	r8,0(r2)
    8a54:	29400104 	addi	r5,r5,4
    8a58:	10800104 	addi	r2,r2,4
    8a5c:	2a3fff15 	stw	r8,-4(r5)
    8a60:	10fffb36 	bltu	r2,r3,8a50 <__alt_data_end+0xfffd8a50>
    8a64:	1985c83a 	sub	r2,r3,r6
    8a68:	10bffac4 	addi	r2,r2,-21
    8a6c:	1004d0ba 	srli	r2,r2,2
    8a70:	10800044 	addi	r2,r2,1
    8a74:	1085883a 	add	r2,r2,r2
    8a78:	1085883a 	add	r2,r2,r2
    8a7c:	2089883a 	add	r4,r4,r2
    8a80:	21c0032e 	bgeu	r4,r7,8a90 <__copybits+0x74>
    8a84:	20000015 	stw	zero,0(r4)
    8a88:	21000104 	addi	r4,r4,4
    8a8c:	21fffd36 	bltu	r4,r7,8a84 <__alt_data_end+0xfffd8a84>
    8a90:	f800283a 	ret

00008a94 <__any_on>:
    8a94:	20c00417 	ldw	r3,16(r4)
    8a98:	2805d17a 	srai	r2,r5,5
    8a9c:	21000504 	addi	r4,r4,20
    8aa0:	18800d0e 	bge	r3,r2,8ad8 <__any_on+0x44>
    8aa4:	18c7883a 	add	r3,r3,r3
    8aa8:	18c7883a 	add	r3,r3,r3
    8aac:	20c7883a 	add	r3,r4,r3
    8ab0:	20c0192e 	bgeu	r4,r3,8b18 <__any_on+0x84>
    8ab4:	18bfff17 	ldw	r2,-4(r3)
    8ab8:	18ffff04 	addi	r3,r3,-4
    8abc:	1000041e 	bne	r2,zero,8ad0 <__any_on+0x3c>
    8ac0:	20c0142e 	bgeu	r4,r3,8b14 <__any_on+0x80>
    8ac4:	18ffff04 	addi	r3,r3,-4
    8ac8:	19400017 	ldw	r5,0(r3)
    8acc:	283ffc26 	beq	r5,zero,8ac0 <__alt_data_end+0xfffd8ac0>
    8ad0:	00800044 	movi	r2,1
    8ad4:	f800283a 	ret
    8ad8:	10c00a0e 	bge	r2,r3,8b04 <__any_on+0x70>
    8adc:	1085883a 	add	r2,r2,r2
    8ae0:	1085883a 	add	r2,r2,r2
    8ae4:	294007cc 	andi	r5,r5,31
    8ae8:	2087883a 	add	r3,r4,r2
    8aec:	283ff026 	beq	r5,zero,8ab0 <__alt_data_end+0xfffd8ab0>
    8af0:	19800017 	ldw	r6,0(r3)
    8af4:	3144d83a 	srl	r2,r6,r5
    8af8:	114a983a 	sll	r5,r2,r5
    8afc:	317ff41e 	bne	r6,r5,8ad0 <__alt_data_end+0xfffd8ad0>
    8b00:	003feb06 	br	8ab0 <__alt_data_end+0xfffd8ab0>
    8b04:	1085883a 	add	r2,r2,r2
    8b08:	1085883a 	add	r2,r2,r2
    8b0c:	2087883a 	add	r3,r4,r2
    8b10:	003fe706 	br	8ab0 <__alt_data_end+0xfffd8ab0>
    8b14:	f800283a 	ret
    8b18:	0005883a 	mov	r2,zero
    8b1c:	f800283a 	ret

00008b20 <_realloc_r>:
    8b20:	defff604 	addi	sp,sp,-40
    8b24:	dc800215 	stw	r18,8(sp)
    8b28:	dfc00915 	stw	ra,36(sp)
    8b2c:	df000815 	stw	fp,32(sp)
    8b30:	ddc00715 	stw	r23,28(sp)
    8b34:	dd800615 	stw	r22,24(sp)
    8b38:	dd400515 	stw	r21,20(sp)
    8b3c:	dd000415 	stw	r20,16(sp)
    8b40:	dcc00315 	stw	r19,12(sp)
    8b44:	dc400115 	stw	r17,4(sp)
    8b48:	dc000015 	stw	r16,0(sp)
    8b4c:	3025883a 	mov	r18,r6
    8b50:	2800b726 	beq	r5,zero,8e30 <_realloc_r+0x310>
    8b54:	282b883a 	mov	r21,r5
    8b58:	2029883a 	mov	r20,r4
    8b5c:	000f9e40 	call	f9e4 <__malloc_lock>
    8b60:	a8bfff17 	ldw	r2,-4(r21)
    8b64:	043fff04 	movi	r16,-4
    8b68:	90c002c4 	addi	r3,r18,11
    8b6c:	01000584 	movi	r4,22
    8b70:	acfffe04 	addi	r19,r21,-8
    8b74:	1420703a 	and	r16,r2,r16
    8b78:	20c0332e 	bgeu	r4,r3,8c48 <_realloc_r+0x128>
    8b7c:	047ffe04 	movi	r17,-8
    8b80:	1c62703a 	and	r17,r3,r17
    8b84:	8807883a 	mov	r3,r17
    8b88:	88005816 	blt	r17,zero,8cec <_realloc_r+0x1cc>
    8b8c:	8c805736 	bltu	r17,r18,8cec <_realloc_r+0x1cc>
    8b90:	80c0300e 	bge	r16,r3,8c54 <_realloc_r+0x134>
    8b94:	070000b4 	movhi	fp,2
    8b98:	e727a004 	addi	fp,fp,-24960
    8b9c:	e1c00217 	ldw	r7,8(fp)
    8ba0:	9c09883a 	add	r4,r19,r16
    8ba4:	22000117 	ldw	r8,4(r4)
    8ba8:	21c06326 	beq	r4,r7,8d38 <_realloc_r+0x218>
    8bac:	017fff84 	movi	r5,-2
    8bb0:	414a703a 	and	r5,r8,r5
    8bb4:	214b883a 	add	r5,r4,r5
    8bb8:	29800117 	ldw	r6,4(r5)
    8bbc:	3180004c 	andi	r6,r6,1
    8bc0:	30003f26 	beq	r6,zero,8cc0 <_realloc_r+0x1a0>
    8bc4:	1080004c 	andi	r2,r2,1
    8bc8:	10008326 	beq	r2,zero,8dd8 <_realloc_r+0x2b8>
    8bcc:	900b883a 	mov	r5,r18
    8bd0:	a009883a 	mov	r4,r20
    8bd4:	0006d300 	call	6d30 <_malloc_r>
    8bd8:	1025883a 	mov	r18,r2
    8bdc:	10011e26 	beq	r2,zero,9058 <_realloc_r+0x538>
    8be0:	a93fff17 	ldw	r4,-4(r21)
    8be4:	10fffe04 	addi	r3,r2,-8
    8be8:	00bfff84 	movi	r2,-2
    8bec:	2084703a 	and	r2,r4,r2
    8bf0:	9885883a 	add	r2,r19,r2
    8bf4:	1880ee26 	beq	r3,r2,8fb0 <_realloc_r+0x490>
    8bf8:	81bfff04 	addi	r6,r16,-4
    8bfc:	00800904 	movi	r2,36
    8c00:	1180b836 	bltu	r2,r6,8ee4 <_realloc_r+0x3c4>
    8c04:	00c004c4 	movi	r3,19
    8c08:	19809636 	bltu	r3,r6,8e64 <_realloc_r+0x344>
    8c0c:	9005883a 	mov	r2,r18
    8c10:	a807883a 	mov	r3,r21
    8c14:	19000017 	ldw	r4,0(r3)
    8c18:	11000015 	stw	r4,0(r2)
    8c1c:	19000117 	ldw	r4,4(r3)
    8c20:	11000115 	stw	r4,4(r2)
    8c24:	18c00217 	ldw	r3,8(r3)
    8c28:	10c00215 	stw	r3,8(r2)
    8c2c:	a80b883a 	mov	r5,r21
    8c30:	a009883a 	mov	r4,r20
    8c34:	00061380 	call	6138 <_free_r>
    8c38:	a009883a 	mov	r4,r20
    8c3c:	000fb040 	call	fb04 <__malloc_unlock>
    8c40:	9005883a 	mov	r2,r18
    8c44:	00001206 	br	8c90 <_realloc_r+0x170>
    8c48:	00c00404 	movi	r3,16
    8c4c:	1823883a 	mov	r17,r3
    8c50:	003fce06 	br	8b8c <__alt_data_end+0xfffd8b8c>
    8c54:	a825883a 	mov	r18,r21
    8c58:	8445c83a 	sub	r2,r16,r17
    8c5c:	00c003c4 	movi	r3,15
    8c60:	18802636 	bltu	r3,r2,8cfc <_realloc_r+0x1dc>
    8c64:	99800117 	ldw	r6,4(r19)
    8c68:	9c07883a 	add	r3,r19,r16
    8c6c:	3180004c 	andi	r6,r6,1
    8c70:	3420b03a 	or	r16,r6,r16
    8c74:	9c000115 	stw	r16,4(r19)
    8c78:	18800117 	ldw	r2,4(r3)
    8c7c:	10800054 	ori	r2,r2,1
    8c80:	18800115 	stw	r2,4(r3)
    8c84:	a009883a 	mov	r4,r20
    8c88:	000fb040 	call	fb04 <__malloc_unlock>
    8c8c:	9005883a 	mov	r2,r18
    8c90:	dfc00917 	ldw	ra,36(sp)
    8c94:	df000817 	ldw	fp,32(sp)
    8c98:	ddc00717 	ldw	r23,28(sp)
    8c9c:	dd800617 	ldw	r22,24(sp)
    8ca0:	dd400517 	ldw	r21,20(sp)
    8ca4:	dd000417 	ldw	r20,16(sp)
    8ca8:	dcc00317 	ldw	r19,12(sp)
    8cac:	dc800217 	ldw	r18,8(sp)
    8cb0:	dc400117 	ldw	r17,4(sp)
    8cb4:	dc000017 	ldw	r16,0(sp)
    8cb8:	dec00a04 	addi	sp,sp,40
    8cbc:	f800283a 	ret
    8cc0:	017fff04 	movi	r5,-4
    8cc4:	414a703a 	and	r5,r8,r5
    8cc8:	814d883a 	add	r6,r16,r5
    8ccc:	30c01f16 	blt	r6,r3,8d4c <_realloc_r+0x22c>
    8cd0:	20800317 	ldw	r2,12(r4)
    8cd4:	20c00217 	ldw	r3,8(r4)
    8cd8:	a825883a 	mov	r18,r21
    8cdc:	3021883a 	mov	r16,r6
    8ce0:	18800315 	stw	r2,12(r3)
    8ce4:	10c00215 	stw	r3,8(r2)
    8ce8:	003fdb06 	br	8c58 <__alt_data_end+0xfffd8c58>
    8cec:	00800304 	movi	r2,12
    8cf0:	a0800015 	stw	r2,0(r20)
    8cf4:	0005883a 	mov	r2,zero
    8cf8:	003fe506 	br	8c90 <__alt_data_end+0xfffd8c90>
    8cfc:	98c00117 	ldw	r3,4(r19)
    8d00:	9c4b883a 	add	r5,r19,r17
    8d04:	11000054 	ori	r4,r2,1
    8d08:	18c0004c 	andi	r3,r3,1
    8d0c:	1c62b03a 	or	r17,r3,r17
    8d10:	9c400115 	stw	r17,4(r19)
    8d14:	29000115 	stw	r4,4(r5)
    8d18:	2885883a 	add	r2,r5,r2
    8d1c:	10c00117 	ldw	r3,4(r2)
    8d20:	29400204 	addi	r5,r5,8
    8d24:	a009883a 	mov	r4,r20
    8d28:	18c00054 	ori	r3,r3,1
    8d2c:	10c00115 	stw	r3,4(r2)
    8d30:	00061380 	call	6138 <_free_r>
    8d34:	003fd306 	br	8c84 <__alt_data_end+0xfffd8c84>
    8d38:	017fff04 	movi	r5,-4
    8d3c:	414a703a 	and	r5,r8,r5
    8d40:	89800404 	addi	r6,r17,16
    8d44:	8151883a 	add	r8,r16,r5
    8d48:	4180590e 	bge	r8,r6,8eb0 <_realloc_r+0x390>
    8d4c:	1080004c 	andi	r2,r2,1
    8d50:	103f9e1e 	bne	r2,zero,8bcc <__alt_data_end+0xfffd8bcc>
    8d54:	adbffe17 	ldw	r22,-8(r21)
    8d58:	00bfff04 	movi	r2,-4
    8d5c:	9dadc83a 	sub	r22,r19,r22
    8d60:	b1800117 	ldw	r6,4(r22)
    8d64:	3084703a 	and	r2,r6,r2
    8d68:	20002026 	beq	r4,zero,8dec <_realloc_r+0x2cc>
    8d6c:	80af883a 	add	r23,r16,r2
    8d70:	b96f883a 	add	r23,r23,r5
    8d74:	21c05f26 	beq	r4,r7,8ef4 <_realloc_r+0x3d4>
    8d78:	b8c01c16 	blt	r23,r3,8dec <_realloc_r+0x2cc>
    8d7c:	20800317 	ldw	r2,12(r4)
    8d80:	20c00217 	ldw	r3,8(r4)
    8d84:	81bfff04 	addi	r6,r16,-4
    8d88:	01000904 	movi	r4,36
    8d8c:	18800315 	stw	r2,12(r3)
    8d90:	10c00215 	stw	r3,8(r2)
    8d94:	b0c00217 	ldw	r3,8(r22)
    8d98:	b0800317 	ldw	r2,12(r22)
    8d9c:	b4800204 	addi	r18,r22,8
    8da0:	18800315 	stw	r2,12(r3)
    8da4:	10c00215 	stw	r3,8(r2)
    8da8:	21801b36 	bltu	r4,r6,8e18 <_realloc_r+0x2f8>
    8dac:	008004c4 	movi	r2,19
    8db0:	1180352e 	bgeu	r2,r6,8e88 <_realloc_r+0x368>
    8db4:	a8800017 	ldw	r2,0(r21)
    8db8:	b0800215 	stw	r2,8(r22)
    8dbc:	a8800117 	ldw	r2,4(r21)
    8dc0:	b0800315 	stw	r2,12(r22)
    8dc4:	008006c4 	movi	r2,27
    8dc8:	11807f36 	bltu	r2,r6,8fc8 <_realloc_r+0x4a8>
    8dcc:	b0800404 	addi	r2,r22,16
    8dd0:	ad400204 	addi	r21,r21,8
    8dd4:	00002d06 	br	8e8c <_realloc_r+0x36c>
    8dd8:	adbffe17 	ldw	r22,-8(r21)
    8ddc:	00bfff04 	movi	r2,-4
    8de0:	9dadc83a 	sub	r22,r19,r22
    8de4:	b1000117 	ldw	r4,4(r22)
    8de8:	2084703a 	and	r2,r4,r2
    8dec:	b03f7726 	beq	r22,zero,8bcc <__alt_data_end+0xfffd8bcc>
    8df0:	80af883a 	add	r23,r16,r2
    8df4:	b8ff7516 	blt	r23,r3,8bcc <__alt_data_end+0xfffd8bcc>
    8df8:	b0800317 	ldw	r2,12(r22)
    8dfc:	b0c00217 	ldw	r3,8(r22)
    8e00:	81bfff04 	addi	r6,r16,-4
    8e04:	01000904 	movi	r4,36
    8e08:	18800315 	stw	r2,12(r3)
    8e0c:	10c00215 	stw	r3,8(r2)
    8e10:	b4800204 	addi	r18,r22,8
    8e14:	21bfe52e 	bgeu	r4,r6,8dac <__alt_data_end+0xfffd8dac>
    8e18:	a80b883a 	mov	r5,r21
    8e1c:	9009883a 	mov	r4,r18
    8e20:	00077e40 	call	77e4 <memmove>
    8e24:	b821883a 	mov	r16,r23
    8e28:	b027883a 	mov	r19,r22
    8e2c:	003f8a06 	br	8c58 <__alt_data_end+0xfffd8c58>
    8e30:	300b883a 	mov	r5,r6
    8e34:	dfc00917 	ldw	ra,36(sp)
    8e38:	df000817 	ldw	fp,32(sp)
    8e3c:	ddc00717 	ldw	r23,28(sp)
    8e40:	dd800617 	ldw	r22,24(sp)
    8e44:	dd400517 	ldw	r21,20(sp)
    8e48:	dd000417 	ldw	r20,16(sp)
    8e4c:	dcc00317 	ldw	r19,12(sp)
    8e50:	dc800217 	ldw	r18,8(sp)
    8e54:	dc400117 	ldw	r17,4(sp)
    8e58:	dc000017 	ldw	r16,0(sp)
    8e5c:	dec00a04 	addi	sp,sp,40
    8e60:	0006d301 	jmpi	6d30 <_malloc_r>
    8e64:	a8c00017 	ldw	r3,0(r21)
    8e68:	90c00015 	stw	r3,0(r18)
    8e6c:	a8c00117 	ldw	r3,4(r21)
    8e70:	90c00115 	stw	r3,4(r18)
    8e74:	00c006c4 	movi	r3,27
    8e78:	19804536 	bltu	r3,r6,8f90 <_realloc_r+0x470>
    8e7c:	90800204 	addi	r2,r18,8
    8e80:	a8c00204 	addi	r3,r21,8
    8e84:	003f6306 	br	8c14 <__alt_data_end+0xfffd8c14>
    8e88:	9005883a 	mov	r2,r18
    8e8c:	a8c00017 	ldw	r3,0(r21)
    8e90:	b821883a 	mov	r16,r23
    8e94:	b027883a 	mov	r19,r22
    8e98:	10c00015 	stw	r3,0(r2)
    8e9c:	a8c00117 	ldw	r3,4(r21)
    8ea0:	10c00115 	stw	r3,4(r2)
    8ea4:	a8c00217 	ldw	r3,8(r21)
    8ea8:	10c00215 	stw	r3,8(r2)
    8eac:	003f6a06 	br	8c58 <__alt_data_end+0xfffd8c58>
    8eb0:	9c67883a 	add	r19,r19,r17
    8eb4:	4445c83a 	sub	r2,r8,r17
    8eb8:	e4c00215 	stw	r19,8(fp)
    8ebc:	10800054 	ori	r2,r2,1
    8ec0:	98800115 	stw	r2,4(r19)
    8ec4:	a8bfff17 	ldw	r2,-4(r21)
    8ec8:	a009883a 	mov	r4,r20
    8ecc:	1080004c 	andi	r2,r2,1
    8ed0:	1462b03a 	or	r17,r2,r17
    8ed4:	ac7fff15 	stw	r17,-4(r21)
    8ed8:	000fb040 	call	fb04 <__malloc_unlock>
    8edc:	a805883a 	mov	r2,r21
    8ee0:	003f6b06 	br	8c90 <__alt_data_end+0xfffd8c90>
    8ee4:	a80b883a 	mov	r5,r21
    8ee8:	9009883a 	mov	r4,r18
    8eec:	00077e40 	call	77e4 <memmove>
    8ef0:	003f4e06 	br	8c2c <__alt_data_end+0xfffd8c2c>
    8ef4:	89000404 	addi	r4,r17,16
    8ef8:	b93fbc16 	blt	r23,r4,8dec <__alt_data_end+0xfffd8dec>
    8efc:	b0800317 	ldw	r2,12(r22)
    8f00:	b0c00217 	ldw	r3,8(r22)
    8f04:	81bfff04 	addi	r6,r16,-4
    8f08:	01000904 	movi	r4,36
    8f0c:	18800315 	stw	r2,12(r3)
    8f10:	10c00215 	stw	r3,8(r2)
    8f14:	b4800204 	addi	r18,r22,8
    8f18:	21804336 	bltu	r4,r6,9028 <_realloc_r+0x508>
    8f1c:	008004c4 	movi	r2,19
    8f20:	11803f2e 	bgeu	r2,r6,9020 <_realloc_r+0x500>
    8f24:	a8800017 	ldw	r2,0(r21)
    8f28:	b0800215 	stw	r2,8(r22)
    8f2c:	a8800117 	ldw	r2,4(r21)
    8f30:	b0800315 	stw	r2,12(r22)
    8f34:	008006c4 	movi	r2,27
    8f38:	11803f36 	bltu	r2,r6,9038 <_realloc_r+0x518>
    8f3c:	b0800404 	addi	r2,r22,16
    8f40:	ad400204 	addi	r21,r21,8
    8f44:	a8c00017 	ldw	r3,0(r21)
    8f48:	10c00015 	stw	r3,0(r2)
    8f4c:	a8c00117 	ldw	r3,4(r21)
    8f50:	10c00115 	stw	r3,4(r2)
    8f54:	a8c00217 	ldw	r3,8(r21)
    8f58:	10c00215 	stw	r3,8(r2)
    8f5c:	b447883a 	add	r3,r22,r17
    8f60:	bc45c83a 	sub	r2,r23,r17
    8f64:	e0c00215 	stw	r3,8(fp)
    8f68:	10800054 	ori	r2,r2,1
    8f6c:	18800115 	stw	r2,4(r3)
    8f70:	b0800117 	ldw	r2,4(r22)
    8f74:	a009883a 	mov	r4,r20
    8f78:	1080004c 	andi	r2,r2,1
    8f7c:	1462b03a 	or	r17,r2,r17
    8f80:	b4400115 	stw	r17,4(r22)
    8f84:	000fb040 	call	fb04 <__malloc_unlock>
    8f88:	9005883a 	mov	r2,r18
    8f8c:	003f4006 	br	8c90 <__alt_data_end+0xfffd8c90>
    8f90:	a8c00217 	ldw	r3,8(r21)
    8f94:	90c00215 	stw	r3,8(r18)
    8f98:	a8c00317 	ldw	r3,12(r21)
    8f9c:	90c00315 	stw	r3,12(r18)
    8fa0:	30801126 	beq	r6,r2,8fe8 <_realloc_r+0x4c8>
    8fa4:	90800404 	addi	r2,r18,16
    8fa8:	a8c00404 	addi	r3,r21,16
    8fac:	003f1906 	br	8c14 <__alt_data_end+0xfffd8c14>
    8fb0:	90ffff17 	ldw	r3,-4(r18)
    8fb4:	00bfff04 	movi	r2,-4
    8fb8:	a825883a 	mov	r18,r21
    8fbc:	1884703a 	and	r2,r3,r2
    8fc0:	80a1883a 	add	r16,r16,r2
    8fc4:	003f2406 	br	8c58 <__alt_data_end+0xfffd8c58>
    8fc8:	a8800217 	ldw	r2,8(r21)
    8fcc:	b0800415 	stw	r2,16(r22)
    8fd0:	a8800317 	ldw	r2,12(r21)
    8fd4:	b0800515 	stw	r2,20(r22)
    8fd8:	31000a26 	beq	r6,r4,9004 <_realloc_r+0x4e4>
    8fdc:	b0800604 	addi	r2,r22,24
    8fe0:	ad400404 	addi	r21,r21,16
    8fe4:	003fa906 	br	8e8c <__alt_data_end+0xfffd8e8c>
    8fe8:	a9000417 	ldw	r4,16(r21)
    8fec:	90800604 	addi	r2,r18,24
    8ff0:	a8c00604 	addi	r3,r21,24
    8ff4:	91000415 	stw	r4,16(r18)
    8ff8:	a9000517 	ldw	r4,20(r21)
    8ffc:	91000515 	stw	r4,20(r18)
    9000:	003f0406 	br	8c14 <__alt_data_end+0xfffd8c14>
    9004:	a8c00417 	ldw	r3,16(r21)
    9008:	ad400604 	addi	r21,r21,24
    900c:	b0800804 	addi	r2,r22,32
    9010:	b0c00615 	stw	r3,24(r22)
    9014:	a8ffff17 	ldw	r3,-4(r21)
    9018:	b0c00715 	stw	r3,28(r22)
    901c:	003f9b06 	br	8e8c <__alt_data_end+0xfffd8e8c>
    9020:	9005883a 	mov	r2,r18
    9024:	003fc706 	br	8f44 <__alt_data_end+0xfffd8f44>
    9028:	a80b883a 	mov	r5,r21
    902c:	9009883a 	mov	r4,r18
    9030:	00077e40 	call	77e4 <memmove>
    9034:	003fc906 	br	8f5c <__alt_data_end+0xfffd8f5c>
    9038:	a8800217 	ldw	r2,8(r21)
    903c:	b0800415 	stw	r2,16(r22)
    9040:	a8800317 	ldw	r2,12(r21)
    9044:	b0800515 	stw	r2,20(r22)
    9048:	31000726 	beq	r6,r4,9068 <_realloc_r+0x548>
    904c:	b0800604 	addi	r2,r22,24
    9050:	ad400404 	addi	r21,r21,16
    9054:	003fbb06 	br	8f44 <__alt_data_end+0xfffd8f44>
    9058:	a009883a 	mov	r4,r20
    905c:	000fb040 	call	fb04 <__malloc_unlock>
    9060:	0005883a 	mov	r2,zero
    9064:	003f0a06 	br	8c90 <__alt_data_end+0xfffd8c90>
    9068:	a8c00417 	ldw	r3,16(r21)
    906c:	ad400604 	addi	r21,r21,24
    9070:	b0800804 	addi	r2,r22,32
    9074:	b0c00615 	stw	r3,24(r22)
    9078:	a8ffff17 	ldw	r3,-4(r21)
    907c:	b0c00715 	stw	r3,28(r22)
    9080:	003fb006 	br	8f44 <__alt_data_end+0xfffd8f44>

00009084 <lflush>:
    9084:	2080030b 	ldhu	r2,12(r4)
    9088:	00c00244 	movi	r3,9
    908c:	1080024c 	andi	r2,r2,9
    9090:	10c00226 	beq	r2,r3,909c <lflush+0x18>
    9094:	0005883a 	mov	r2,zero
    9098:	f800283a 	ret
    909c:	0005c341 	jmpi	5c34 <fflush>

000090a0 <__srefill_r>:
    90a0:	defffc04 	addi	sp,sp,-16
    90a4:	dc400115 	stw	r17,4(sp)
    90a8:	dc000015 	stw	r16,0(sp)
    90ac:	dfc00315 	stw	ra,12(sp)
    90b0:	dc800215 	stw	r18,8(sp)
    90b4:	2023883a 	mov	r17,r4
    90b8:	2821883a 	mov	r16,r5
    90bc:	20000226 	beq	r4,zero,90c8 <__srefill_r+0x28>
    90c0:	20800e17 	ldw	r2,56(r4)
    90c4:	10003c26 	beq	r2,zero,91b8 <__srefill_r+0x118>
    90c8:	80c0030b 	ldhu	r3,12(r16)
    90cc:	1908000c 	andi	r4,r3,8192
    90d0:	1805883a 	mov	r2,r3
    90d4:	2000071e 	bne	r4,zero,90f4 <__srefill_r+0x54>
    90d8:	81001917 	ldw	r4,100(r16)
    90dc:	18880014 	ori	r2,r3,8192
    90e0:	00f7ffc4 	movi	r3,-8193
    90e4:	20c8703a 	and	r4,r4,r3
    90e8:	8080030d 	sth	r2,12(r16)
    90ec:	1007883a 	mov	r3,r2
    90f0:	81001915 	stw	r4,100(r16)
    90f4:	80000115 	stw	zero,4(r16)
    90f8:	1100080c 	andi	r4,r2,32
    90fc:	2000571e 	bne	r4,zero,925c <__srefill_r+0x1bc>
    9100:	1100010c 	andi	r4,r2,4
    9104:	20001f26 	beq	r4,zero,9184 <__srefill_r+0xe4>
    9108:	81400c17 	ldw	r5,48(r16)
    910c:	28000826 	beq	r5,zero,9130 <__srefill_r+0x90>
    9110:	80801004 	addi	r2,r16,64
    9114:	28800226 	beq	r5,r2,9120 <__srefill_r+0x80>
    9118:	8809883a 	mov	r4,r17
    911c:	00061380 	call	6138 <_free_r>
    9120:	80800f17 	ldw	r2,60(r16)
    9124:	80000c15 	stw	zero,48(r16)
    9128:	80800115 	stw	r2,4(r16)
    912c:	1000391e 	bne	r2,zero,9214 <__srefill_r+0x174>
    9130:	80800417 	ldw	r2,16(r16)
    9134:	10004b26 	beq	r2,zero,9264 <__srefill_r+0x1c4>
    9138:	8480030b 	ldhu	r18,12(r16)
    913c:	908000cc 	andi	r2,r18,3
    9140:	10001f1e 	bne	r2,zero,91c0 <__srefill_r+0x120>
    9144:	81800417 	ldw	r6,16(r16)
    9148:	80800817 	ldw	r2,32(r16)
    914c:	81c00517 	ldw	r7,20(r16)
    9150:	81400717 	ldw	r5,28(r16)
    9154:	81800015 	stw	r6,0(r16)
    9158:	8809883a 	mov	r4,r17
    915c:	103ee83a 	callr	r2
    9160:	80800115 	stw	r2,4(r16)
    9164:	00800e0e 	bge	zero,r2,91a0 <__srefill_r+0x100>
    9168:	0005883a 	mov	r2,zero
    916c:	dfc00317 	ldw	ra,12(sp)
    9170:	dc800217 	ldw	r18,8(sp)
    9174:	dc400117 	ldw	r17,4(sp)
    9178:	dc000017 	ldw	r16,0(sp)
    917c:	dec00404 	addi	sp,sp,16
    9180:	f800283a 	ret
    9184:	1100040c 	andi	r4,r2,16
    9188:	20003026 	beq	r4,zero,924c <__srefill_r+0x1ac>
    918c:	1080020c 	andi	r2,r2,8
    9190:	1000241e 	bne	r2,zero,9224 <__srefill_r+0x184>
    9194:	18c00114 	ori	r3,r3,4
    9198:	80c0030d 	sth	r3,12(r16)
    919c:	003fe406 	br	9130 <__alt_data_end+0xfffd9130>
    91a0:	80c0030b 	ldhu	r3,12(r16)
    91a4:	1000161e 	bne	r2,zero,9200 <__srefill_r+0x160>
    91a8:	18c00814 	ori	r3,r3,32
    91ac:	00bfffc4 	movi	r2,-1
    91b0:	80c0030d 	sth	r3,12(r16)
    91b4:	003fed06 	br	916c <__alt_data_end+0xfffd916c>
    91b8:	0005fc40 	call	5fc4 <__sinit>
    91bc:	003fc206 	br	90c8 <__alt_data_end+0xfffd90c8>
    91c0:	008000b4 	movhi	r2,2
    91c4:	10ad2804 	addi	r2,r2,-19296
    91c8:	11000017 	ldw	r4,0(r2)
    91cc:	01400074 	movhi	r5,1
    91d0:	00800044 	movi	r2,1
    91d4:	29642104 	addi	r5,r5,-28540
    91d8:	8080030d 	sth	r2,12(r16)
    91dc:	00069100 	call	6910 <_fwalk>
    91e0:	00800244 	movi	r2,9
    91e4:	8480030d 	sth	r18,12(r16)
    91e8:	9480024c 	andi	r18,r18,9
    91ec:	90bfd51e 	bne	r18,r2,9144 <__alt_data_end+0xfffd9144>
    91f0:	800b883a 	mov	r5,r16
    91f4:	8809883a 	mov	r4,r17
    91f8:	00059bc0 	call	59bc <__sflush_r>
    91fc:	003fd106 	br	9144 <__alt_data_end+0xfffd9144>
    9200:	18c01014 	ori	r3,r3,64
    9204:	80000115 	stw	zero,4(r16)
    9208:	00bfffc4 	movi	r2,-1
    920c:	80c0030d 	sth	r3,12(r16)
    9210:	003fd606 	br	916c <__alt_data_end+0xfffd916c>
    9214:	80c00e17 	ldw	r3,56(r16)
    9218:	0005883a 	mov	r2,zero
    921c:	80c00015 	stw	r3,0(r16)
    9220:	003fd206 	br	916c <__alt_data_end+0xfffd916c>
    9224:	800b883a 	mov	r5,r16
    9228:	8809883a 	mov	r4,r17
    922c:	0005bd80 	call	5bd8 <_fflush_r>
    9230:	10000a1e 	bne	r2,zero,925c <__srefill_r+0x1bc>
    9234:	8080030b 	ldhu	r2,12(r16)
    9238:	00fffdc4 	movi	r3,-9
    923c:	80000215 	stw	zero,8(r16)
    9240:	1886703a 	and	r3,r3,r2
    9244:	80000615 	stw	zero,24(r16)
    9248:	003fd206 	br	9194 <__alt_data_end+0xfffd9194>
    924c:	00800244 	movi	r2,9
    9250:	88800015 	stw	r2,0(r17)
    9254:	18c01014 	ori	r3,r3,64
    9258:	80c0030d 	sth	r3,12(r16)
    925c:	00bfffc4 	movi	r2,-1
    9260:	003fc206 	br	916c <__alt_data_end+0xfffd916c>
    9264:	800b883a 	mov	r5,r16
    9268:	8809883a 	mov	r4,r17
    926c:	0006b740 	call	6b74 <__smakebuf_r>
    9270:	003fb106 	br	9138 <__alt_data_end+0xfffd9138>

00009274 <__fpclassifyd>:
    9274:	00a00034 	movhi	r2,32768
    9278:	10bfffc4 	addi	r2,r2,-1
    927c:	2884703a 	and	r2,r5,r2
    9280:	10000726 	beq	r2,zero,92a0 <__fpclassifyd+0x2c>
    9284:	00fffc34 	movhi	r3,65520
    9288:	019ff834 	movhi	r6,32736
    928c:	28c7883a 	add	r3,r5,r3
    9290:	31bfffc4 	addi	r6,r6,-1
    9294:	30c00536 	bltu	r6,r3,92ac <__fpclassifyd+0x38>
    9298:	00800104 	movi	r2,4
    929c:	f800283a 	ret
    92a0:	2000021e 	bne	r4,zero,92ac <__fpclassifyd+0x38>
    92a4:	00800084 	movi	r2,2
    92a8:	f800283a 	ret
    92ac:	00dffc34 	movhi	r3,32752
    92b0:	019ff834 	movhi	r6,32736
    92b4:	28cb883a 	add	r5,r5,r3
    92b8:	31bfffc4 	addi	r6,r6,-1
    92bc:	317ff62e 	bgeu	r6,r5,9298 <__alt_data_end+0xfffd9298>
    92c0:	01400434 	movhi	r5,16
    92c4:	297fffc4 	addi	r5,r5,-1
    92c8:	28800236 	bltu	r5,r2,92d4 <__fpclassifyd+0x60>
    92cc:	008000c4 	movi	r2,3
    92d0:	f800283a 	ret
    92d4:	10c00226 	beq	r2,r3,92e0 <__fpclassifyd+0x6c>
    92d8:	0005883a 	mov	r2,zero
    92dc:	f800283a 	ret
    92e0:	2005003a 	cmpeq	r2,r4,zero
    92e4:	f800283a 	ret

000092e8 <_sbrk_r>:
    92e8:	defffd04 	addi	sp,sp,-12
    92ec:	dc000015 	stw	r16,0(sp)
    92f0:	040000b4 	movhi	r16,2
    92f4:	dc400115 	stw	r17,4(sp)
    92f8:	84344104 	addi	r16,r16,-12028
    92fc:	2023883a 	mov	r17,r4
    9300:	2809883a 	mov	r4,r5
    9304:	dfc00215 	stw	ra,8(sp)
    9308:	80000015 	stw	zero,0(r16)
    930c:	000f6d40 	call	f6d4 <sbrk>
    9310:	00ffffc4 	movi	r3,-1
    9314:	10c00526 	beq	r2,r3,932c <_sbrk_r+0x44>
    9318:	dfc00217 	ldw	ra,8(sp)
    931c:	dc400117 	ldw	r17,4(sp)
    9320:	dc000017 	ldw	r16,0(sp)
    9324:	dec00304 	addi	sp,sp,12
    9328:	f800283a 	ret
    932c:	80c00017 	ldw	r3,0(r16)
    9330:	183ff926 	beq	r3,zero,9318 <__alt_data_end+0xfffd9318>
    9334:	88c00015 	stw	r3,0(r17)
    9338:	003ff706 	br	9318 <__alt_data_end+0xfffd9318>

0000933c <__sread>:
    933c:	defffe04 	addi	sp,sp,-8
    9340:	dc000015 	stw	r16,0(sp)
    9344:	2821883a 	mov	r16,r5
    9348:	2940038f 	ldh	r5,14(r5)
    934c:	dfc00115 	stw	ra,4(sp)
    9350:	000b35c0 	call	b35c <_read_r>
    9354:	10000716 	blt	r2,zero,9374 <__sread+0x38>
    9358:	80c01417 	ldw	r3,80(r16)
    935c:	1887883a 	add	r3,r3,r2
    9360:	80c01415 	stw	r3,80(r16)
    9364:	dfc00117 	ldw	ra,4(sp)
    9368:	dc000017 	ldw	r16,0(sp)
    936c:	dec00204 	addi	sp,sp,8
    9370:	f800283a 	ret
    9374:	80c0030b 	ldhu	r3,12(r16)
    9378:	18fbffcc 	andi	r3,r3,61439
    937c:	80c0030d 	sth	r3,12(r16)
    9380:	dfc00117 	ldw	ra,4(sp)
    9384:	dc000017 	ldw	r16,0(sp)
    9388:	dec00204 	addi	sp,sp,8
    938c:	f800283a 	ret

00009390 <__seofread>:
    9390:	0005883a 	mov	r2,zero
    9394:	f800283a 	ret

00009398 <__swrite>:
    9398:	2880030b 	ldhu	r2,12(r5)
    939c:	defffb04 	addi	sp,sp,-20
    93a0:	dcc00315 	stw	r19,12(sp)
    93a4:	dc800215 	stw	r18,8(sp)
    93a8:	dc400115 	stw	r17,4(sp)
    93ac:	dc000015 	stw	r16,0(sp)
    93b0:	dfc00415 	stw	ra,16(sp)
    93b4:	10c0400c 	andi	r3,r2,256
    93b8:	2821883a 	mov	r16,r5
    93bc:	2023883a 	mov	r17,r4
    93c0:	3025883a 	mov	r18,r6
    93c4:	3827883a 	mov	r19,r7
    93c8:	18000526 	beq	r3,zero,93e0 <__swrite+0x48>
    93cc:	2940038f 	ldh	r5,14(r5)
    93d0:	01c00084 	movi	r7,2
    93d4:	000d883a 	mov	r6,zero
    93d8:	000b2fc0 	call	b2fc <_lseek_r>
    93dc:	8080030b 	ldhu	r2,12(r16)
    93e0:	8140038f 	ldh	r5,14(r16)
    93e4:	10bbffcc 	andi	r2,r2,61439
    93e8:	980f883a 	mov	r7,r19
    93ec:	900d883a 	mov	r6,r18
    93f0:	8809883a 	mov	r4,r17
    93f4:	8080030d 	sth	r2,12(r16)
    93f8:	dfc00417 	ldw	ra,16(sp)
    93fc:	dcc00317 	ldw	r19,12(sp)
    9400:	dc800217 	ldw	r18,8(sp)
    9404:	dc400117 	ldw	r17,4(sp)
    9408:	dc000017 	ldw	r16,0(sp)
    940c:	dec00504 	addi	sp,sp,20
    9410:	000adb01 	jmpi	adb0 <_write_r>

00009414 <__sseek>:
    9414:	defffe04 	addi	sp,sp,-8
    9418:	dc000015 	stw	r16,0(sp)
    941c:	2821883a 	mov	r16,r5
    9420:	2940038f 	ldh	r5,14(r5)
    9424:	dfc00115 	stw	ra,4(sp)
    9428:	000b2fc0 	call	b2fc <_lseek_r>
    942c:	00ffffc4 	movi	r3,-1
    9430:	10c00826 	beq	r2,r3,9454 <__sseek+0x40>
    9434:	80c0030b 	ldhu	r3,12(r16)
    9438:	80801415 	stw	r2,80(r16)
    943c:	18c40014 	ori	r3,r3,4096
    9440:	80c0030d 	sth	r3,12(r16)
    9444:	dfc00117 	ldw	ra,4(sp)
    9448:	dc000017 	ldw	r16,0(sp)
    944c:	dec00204 	addi	sp,sp,8
    9450:	f800283a 	ret
    9454:	80c0030b 	ldhu	r3,12(r16)
    9458:	18fbffcc 	andi	r3,r3,61439
    945c:	80c0030d 	sth	r3,12(r16)
    9460:	dfc00117 	ldw	ra,4(sp)
    9464:	dc000017 	ldw	r16,0(sp)
    9468:	dec00204 	addi	sp,sp,8
    946c:	f800283a 	ret

00009470 <__sclose>:
    9470:	2940038f 	ldh	r5,14(r5)
    9474:	000ae101 	jmpi	ae10 <_close_r>

00009478 <strchr>:
    9478:	2ac03fcc 	andi	r11,r5,255
    947c:	2813883a 	mov	r9,r5
    9480:	208000cc 	andi	r2,r4,3
    9484:	58003726 	beq	r11,zero,9564 <strchr+0xec>
    9488:	10000b26 	beq	r2,zero,94b8 <strchr+0x40>
    948c:	20800003 	ldbu	r2,0(r4)
    9490:	10003226 	beq	r2,zero,955c <strchr+0xe4>
    9494:	28c03fcc 	andi	r3,r5,255
    9498:	5880041e 	bne	r11,r2,94ac <strchr+0x34>
    949c:	00004d06 	br	95d4 <strchr+0x15c>
    94a0:	20800003 	ldbu	r2,0(r4)
    94a4:	10002d26 	beq	r2,zero,955c <strchr+0xe4>
    94a8:	18804a26 	beq	r3,r2,95d4 <strchr+0x15c>
    94ac:	21000044 	addi	r4,r4,1
    94b0:	208000cc 	andi	r2,r4,3
    94b4:	103ffa1e 	bne	r2,zero,94a0 <__alt_data_end+0xfffd94a0>
    94b8:	29403fcc 	andi	r5,r5,255
    94bc:	2814923a 	slli	r10,r5,8
    94c0:	20800017 	ldw	r2,0(r4)
    94c4:	01bfbff4 	movhi	r6,65279
    94c8:	2a8ab03a 	or	r5,r5,r10
    94cc:	2814943a 	slli	r10,r5,16
    94d0:	31bfbfc4 	addi	r6,r6,-257
    94d4:	119b883a 	add	r13,r2,r6
    94d8:	5154b03a 	or	r10,r10,r5
    94dc:	008e303a 	nor	r7,zero,r2
    94e0:	5084f03a 	xor	r2,r10,r2
    94e4:	1191883a 	add	r8,r2,r6
    94e8:	0086303a 	nor	r3,zero,r2
    94ec:	03202074 	movhi	r12,32897
    94f0:	69ca703a 	and	r5,r13,r7
    94f4:	40c4703a 	and	r2,r8,r3
    94f8:	63202004 	addi	r12,r12,-32640
    94fc:	2884b03a 	or	r2,r5,r2
    9500:	1304703a 	and	r2,r2,r12
    9504:	10000c1e 	bne	r2,zero,9538 <strchr+0xc0>
    9508:	21000104 	addi	r4,r4,4
    950c:	20c00017 	ldw	r3,0(r4)
    9510:	50c4f03a 	xor	r2,r10,r3
    9514:	1991883a 	add	r8,r3,r6
    9518:	00ca303a 	nor	r5,zero,r3
    951c:	118f883a 	add	r7,r2,r6
    9520:	0086303a 	nor	r3,zero,r2
    9524:	414a703a 	and	r5,r8,r5
    9528:	38c4703a 	and	r2,r7,r3
    952c:	2884b03a 	or	r2,r5,r2
    9530:	1304703a 	and	r2,r2,r12
    9534:	103ff426 	beq	r2,zero,9508 <__alt_data_end+0xfffd9508>
    9538:	20800003 	ldbu	r2,0(r4)
    953c:	10000726 	beq	r2,zero,955c <strchr+0xe4>
    9540:	58802426 	beq	r11,r2,95d4 <strchr+0x15c>
    9544:	48c03fcc 	andi	r3,r9,255
    9548:	00000106 	br	9550 <strchr+0xd8>
    954c:	18802126 	beq	r3,r2,95d4 <strchr+0x15c>
    9550:	21000044 	addi	r4,r4,1
    9554:	20800003 	ldbu	r2,0(r4)
    9558:	103ffc1e 	bne	r2,zero,954c <__alt_data_end+0xfffd954c>
    955c:	0005883a 	mov	r2,zero
    9560:	f800283a 	ret
    9564:	10000526 	beq	r2,zero,957c <strchr+0x104>
    9568:	20800003 	ldbu	r2,0(r4)
    956c:	10001926 	beq	r2,zero,95d4 <strchr+0x15c>
    9570:	21000044 	addi	r4,r4,1
    9574:	208000cc 	andi	r2,r4,3
    9578:	103ffb1e 	bne	r2,zero,9568 <__alt_data_end+0xfffd9568>
    957c:	20800017 	ldw	r2,0(r4)
    9580:	01bfbff4 	movhi	r6,65279
    9584:	31bfbfc4 	addi	r6,r6,-257
    9588:	0086303a 	nor	r3,zero,r2
    958c:	01602074 	movhi	r5,32897
    9590:	1185883a 	add	r2,r2,r6
    9594:	29602004 	addi	r5,r5,-32640
    9598:	10c4703a 	and	r2,r2,r3
    959c:	1144703a 	and	r2,r2,r5
    95a0:	1000071e 	bne	r2,zero,95c0 <strchr+0x148>
    95a4:	21000104 	addi	r4,r4,4
    95a8:	20800017 	ldw	r2,0(r4)
    95ac:	1187883a 	add	r3,r2,r6
    95b0:	0084303a 	nor	r2,zero,r2
    95b4:	1884703a 	and	r2,r3,r2
    95b8:	1144703a 	and	r2,r2,r5
    95bc:	103ff926 	beq	r2,zero,95a4 <__alt_data_end+0xfffd95a4>
    95c0:	20800003 	ldbu	r2,0(r4)
    95c4:	10000326 	beq	r2,zero,95d4 <strchr+0x15c>
    95c8:	21000044 	addi	r4,r4,1
    95cc:	20800003 	ldbu	r2,0(r4)
    95d0:	103ffd1e 	bne	r2,zero,95c8 <__alt_data_end+0xfffd95c8>
    95d4:	2005883a 	mov	r2,r4
    95d8:	f800283a 	ret

000095dc <strcmp>:
    95dc:	2144b03a 	or	r2,r4,r5
    95e0:	108000cc 	andi	r2,r2,3
    95e4:	1000171e 	bne	r2,zero,9644 <strcmp+0x68>
    95e8:	20800017 	ldw	r2,0(r4)
    95ec:	28c00017 	ldw	r3,0(r5)
    95f0:	10c0141e 	bne	r2,r3,9644 <strcmp+0x68>
    95f4:	027fbff4 	movhi	r9,65279
    95f8:	4a7fbfc4 	addi	r9,r9,-257
    95fc:	0086303a 	nor	r3,zero,r2
    9600:	02202074 	movhi	r8,32897
    9604:	1245883a 	add	r2,r2,r9
    9608:	42202004 	addi	r8,r8,-32640
    960c:	10c4703a 	and	r2,r2,r3
    9610:	1204703a 	and	r2,r2,r8
    9614:	10000226 	beq	r2,zero,9620 <strcmp+0x44>
    9618:	00002306 	br	96a8 <strcmp+0xcc>
    961c:	1000221e 	bne	r2,zero,96a8 <strcmp+0xcc>
    9620:	21000104 	addi	r4,r4,4
    9624:	20c00017 	ldw	r3,0(r4)
    9628:	29400104 	addi	r5,r5,4
    962c:	29800017 	ldw	r6,0(r5)
    9630:	1a4f883a 	add	r7,r3,r9
    9634:	00c4303a 	nor	r2,zero,r3
    9638:	3884703a 	and	r2,r7,r2
    963c:	1204703a 	and	r2,r2,r8
    9640:	19bff626 	beq	r3,r6,961c <__alt_data_end+0xfffd961c>
    9644:	20800003 	ldbu	r2,0(r4)
    9648:	10c03fcc 	andi	r3,r2,255
    964c:	18c0201c 	xori	r3,r3,128
    9650:	18ffe004 	addi	r3,r3,-128
    9654:	18000c26 	beq	r3,zero,9688 <strcmp+0xac>
    9658:	29800007 	ldb	r6,0(r5)
    965c:	19800326 	beq	r3,r6,966c <strcmp+0x90>
    9660:	00001306 	br	96b0 <strcmp+0xd4>
    9664:	29800007 	ldb	r6,0(r5)
    9668:	11800b1e 	bne	r2,r6,9698 <strcmp+0xbc>
    966c:	21000044 	addi	r4,r4,1
    9670:	20c00003 	ldbu	r3,0(r4)
    9674:	29400044 	addi	r5,r5,1
    9678:	18803fcc 	andi	r2,r3,255
    967c:	1080201c 	xori	r2,r2,128
    9680:	10bfe004 	addi	r2,r2,-128
    9684:	103ff71e 	bne	r2,zero,9664 <__alt_data_end+0xfffd9664>
    9688:	0007883a 	mov	r3,zero
    968c:	28800003 	ldbu	r2,0(r5)
    9690:	1885c83a 	sub	r2,r3,r2
    9694:	f800283a 	ret
    9698:	28800003 	ldbu	r2,0(r5)
    969c:	18c03fcc 	andi	r3,r3,255
    96a0:	1885c83a 	sub	r2,r3,r2
    96a4:	f800283a 	ret
    96a8:	0005883a 	mov	r2,zero
    96ac:	f800283a 	ret
    96b0:	10c03fcc 	andi	r3,r2,255
    96b4:	003ff506 	br	968c <__alt_data_end+0xfffd968c>

000096b8 <__sprint_r.part.0>:
    96b8:	28801917 	ldw	r2,100(r5)
    96bc:	defff604 	addi	sp,sp,-40
    96c0:	dd400515 	stw	r21,20(sp)
    96c4:	dfc00915 	stw	ra,36(sp)
    96c8:	df000815 	stw	fp,32(sp)
    96cc:	ddc00715 	stw	r23,28(sp)
    96d0:	dd800615 	stw	r22,24(sp)
    96d4:	dd000415 	stw	r20,16(sp)
    96d8:	dcc00315 	stw	r19,12(sp)
    96dc:	dc800215 	stw	r18,8(sp)
    96e0:	dc400115 	stw	r17,4(sp)
    96e4:	dc000015 	stw	r16,0(sp)
    96e8:	1088000c 	andi	r2,r2,8192
    96ec:	302b883a 	mov	r21,r6
    96f0:	10002e26 	beq	r2,zero,97ac <__sprint_r.part.0+0xf4>
    96f4:	30800217 	ldw	r2,8(r6)
    96f8:	35800017 	ldw	r22,0(r6)
    96fc:	10002926 	beq	r2,zero,97a4 <__sprint_r.part.0+0xec>
    9700:	2827883a 	mov	r19,r5
    9704:	2029883a 	mov	r20,r4
    9708:	b5c00104 	addi	r23,r22,4
    970c:	04bfffc4 	movi	r18,-1
    9710:	bc400017 	ldw	r17,0(r23)
    9714:	b4000017 	ldw	r16,0(r22)
    9718:	0039883a 	mov	fp,zero
    971c:	8822d0ba 	srli	r17,r17,2
    9720:	8800031e 	bne	r17,zero,9730 <__sprint_r.part.0+0x78>
    9724:	00001806 	br	9788 <__sprint_r.part.0+0xd0>
    9728:	84000104 	addi	r16,r16,4
    972c:	8f001526 	beq	r17,fp,9784 <__sprint_r.part.0+0xcc>
    9730:	81400017 	ldw	r5,0(r16)
    9734:	980d883a 	mov	r6,r19
    9738:	a009883a 	mov	r4,r20
    973c:	000b1a80 	call	b1a8 <_fputwc_r>
    9740:	e7000044 	addi	fp,fp,1
    9744:	14bff81e 	bne	r2,r18,9728 <__alt_data_end+0xfffd9728>
    9748:	9005883a 	mov	r2,r18
    974c:	a8000215 	stw	zero,8(r21)
    9750:	a8000115 	stw	zero,4(r21)
    9754:	dfc00917 	ldw	ra,36(sp)
    9758:	df000817 	ldw	fp,32(sp)
    975c:	ddc00717 	ldw	r23,28(sp)
    9760:	dd800617 	ldw	r22,24(sp)
    9764:	dd400517 	ldw	r21,20(sp)
    9768:	dd000417 	ldw	r20,16(sp)
    976c:	dcc00317 	ldw	r19,12(sp)
    9770:	dc800217 	ldw	r18,8(sp)
    9774:	dc400117 	ldw	r17,4(sp)
    9778:	dc000017 	ldw	r16,0(sp)
    977c:	dec00a04 	addi	sp,sp,40
    9780:	f800283a 	ret
    9784:	a8800217 	ldw	r2,8(r21)
    9788:	8c63883a 	add	r17,r17,r17
    978c:	8c63883a 	add	r17,r17,r17
    9790:	1445c83a 	sub	r2,r2,r17
    9794:	a8800215 	stw	r2,8(r21)
    9798:	b5800204 	addi	r22,r22,8
    979c:	bdc00204 	addi	r23,r23,8
    97a0:	103fdb1e 	bne	r2,zero,9710 <__alt_data_end+0xfffd9710>
    97a4:	0005883a 	mov	r2,zero
    97a8:	003fe806 	br	974c <__alt_data_end+0xfffd974c>
    97ac:	00064480 	call	6448 <__sfvwrite_r>
    97b0:	003fe606 	br	974c <__alt_data_end+0xfffd974c>

000097b4 <__sprint_r>:
    97b4:	30c00217 	ldw	r3,8(r6)
    97b8:	18000126 	beq	r3,zero,97c0 <__sprint_r+0xc>
    97bc:	00096b81 	jmpi	96b8 <__sprint_r.part.0>
    97c0:	30000115 	stw	zero,4(r6)
    97c4:	0005883a 	mov	r2,zero
    97c8:	f800283a 	ret

000097cc <___vfiprintf_internal_r>:
    97cc:	deffca04 	addi	sp,sp,-216
    97d0:	dd403115 	stw	r21,196(sp)
    97d4:	dfc03515 	stw	ra,212(sp)
    97d8:	df003415 	stw	fp,208(sp)
    97dc:	ddc03315 	stw	r23,204(sp)
    97e0:	dd803215 	stw	r22,200(sp)
    97e4:	dd003015 	stw	r20,192(sp)
    97e8:	dcc02f15 	stw	r19,188(sp)
    97ec:	dc802e15 	stw	r18,184(sp)
    97f0:	dc402d15 	stw	r17,180(sp)
    97f4:	dc002c15 	stw	r16,176(sp)
    97f8:	d9002115 	stw	r4,132(sp)
    97fc:	d9402015 	stw	r5,128(sp)
    9800:	d9c02215 	stw	r7,136(sp)
    9804:	302b883a 	mov	r21,r6
    9808:	20000226 	beq	r4,zero,9814 <___vfiprintf_internal_r+0x48>
    980c:	20800e17 	ldw	r2,56(r4)
    9810:	1000cf26 	beq	r2,zero,9b50 <___vfiprintf_internal_r+0x384>
    9814:	d8c02017 	ldw	r3,128(sp)
    9818:	1880030b 	ldhu	r2,12(r3)
    981c:	10c8000c 	andi	r3,r2,8192
    9820:	1800071e 	bne	r3,zero,9840 <___vfiprintf_internal_r+0x74>
    9824:	d9402017 	ldw	r5,128(sp)
    9828:	00f7ffc4 	movi	r3,-8193
    982c:	10880014 	ori	r2,r2,8192
    9830:	29001917 	ldw	r4,100(r5)
    9834:	2880030d 	sth	r2,12(r5)
    9838:	20c6703a 	and	r3,r4,r3
    983c:	28c01915 	stw	r3,100(r5)
    9840:	10c0020c 	andi	r3,r2,8
    9844:	1800a526 	beq	r3,zero,9adc <___vfiprintf_internal_r+0x310>
    9848:	d9002017 	ldw	r4,128(sp)
    984c:	20c00417 	ldw	r3,16(r4)
    9850:	1800a226 	beq	r3,zero,9adc <___vfiprintf_internal_r+0x310>
    9854:	1080068c 	andi	r2,r2,26
    9858:	00c00284 	movi	r3,10
    985c:	10c0a826 	beq	r2,r3,9b00 <___vfiprintf_internal_r+0x334>
    9860:	d9001a04 	addi	r4,sp,104
    9864:	d94019c4 	addi	r5,sp,103
    9868:	048000b4 	movhi	r18,2
    986c:	2145c83a 	sub	r2,r4,r5
    9870:	94a5dd04 	addi	r18,r18,-26764
    9874:	d9001e15 	stw	r4,120(sp)
    9878:	d9401f15 	stw	r5,124(sp)
    987c:	dec01a15 	stw	sp,104(sp)
    9880:	d8001c15 	stw	zero,112(sp)
    9884:	d8001b15 	stw	zero,108(sp)
    9888:	d811883a 	mov	r8,sp
    988c:	d8002615 	stw	zero,152(sp)
    9890:	d8002415 	stw	zero,144(sp)
    9894:	d8802815 	stw	r2,160(sp)
    9898:	a82d883a 	mov	r22,r21
    989c:	b0800007 	ldb	r2,0(r22)
    98a0:	10040d26 	beq	r2,zero,a8d8 <___vfiprintf_internal_r+0x110c>
    98a4:	00c00944 	movi	r3,37
    98a8:	b029883a 	mov	r20,r22
    98ac:	10c0021e 	bne	r2,r3,98b8 <___vfiprintf_internal_r+0xec>
    98b0:	00001606 	br	990c <___vfiprintf_internal_r+0x140>
    98b4:	10c00326 	beq	r2,r3,98c4 <___vfiprintf_internal_r+0xf8>
    98b8:	a5000044 	addi	r20,r20,1
    98bc:	a0800007 	ldb	r2,0(r20)
    98c0:	103ffc1e 	bne	r2,zero,98b4 <__alt_data_end+0xfffd98b4>
    98c4:	a5a1c83a 	sub	r16,r20,r22
    98c8:	80001026 	beq	r16,zero,990c <___vfiprintf_internal_r+0x140>
    98cc:	d8c01c17 	ldw	r3,112(sp)
    98d0:	d8801b17 	ldw	r2,108(sp)
    98d4:	45800015 	stw	r22,0(r8)
    98d8:	80c7883a 	add	r3,r16,r3
    98dc:	10800044 	addi	r2,r2,1
    98e0:	44000115 	stw	r16,4(r8)
    98e4:	d8c01c15 	stw	r3,112(sp)
    98e8:	d8801b15 	stw	r2,108(sp)
    98ec:	010001c4 	movi	r4,7
    98f0:	2080750e 	bge	r4,r2,9ac8 <___vfiprintf_internal_r+0x2fc>
    98f4:	1803951e 	bne	r3,zero,a74c <___vfiprintf_internal_r+0xf80>
    98f8:	d8c02417 	ldw	r3,144(sp)
    98fc:	d8001b15 	stw	zero,108(sp)
    9900:	d811883a 	mov	r8,sp
    9904:	1c07883a 	add	r3,r3,r16
    9908:	d8c02415 	stw	r3,144(sp)
    990c:	a0800007 	ldb	r2,0(r20)
    9910:	1002e026 	beq	r2,zero,a494 <___vfiprintf_internal_r+0xcc8>
    9914:	a5800044 	addi	r22,r20,1
    9918:	a0c00047 	ldb	r3,1(r20)
    991c:	d8001d85 	stb	zero,118(sp)
    9920:	0027883a 	mov	r19,zero
    9924:	d8002305 	stb	zero,140(sp)
    9928:	043fffc4 	movi	r16,-1
    992c:	d8002515 	stw	zero,148(sp)
    9930:	0023883a 	mov	r17,zero
    9934:	05001604 	movi	r20,88
    9938:	05400244 	movi	r21,9
    993c:	402f883a 	mov	r23,r8
    9940:	b5800044 	addi	r22,r22,1
    9944:	18bff804 	addi	r2,r3,-32
    9948:	a0827736 	bltu	r20,r2,a328 <___vfiprintf_internal_r+0xb5c>
    994c:	100490ba 	slli	r2,r2,2
    9950:	01000074 	movhi	r4,1
    9954:	21265904 	addi	r4,r4,-26268
    9958:	1105883a 	add	r2,r2,r4
    995c:	10800017 	ldw	r2,0(r2)
    9960:	1000683a 	jmp	r2
    9964:	0000a028 	cmpgeui	zero,zero,640
    9968:	0000a328 	cmpgeui	zero,zero,652
    996c:	0000a328 	cmpgeui	zero,zero,652
    9970:	0000a044 	movi	zero,641
    9974:	0000a328 	cmpgeui	zero,zero,652
    9978:	0000a328 	cmpgeui	zero,zero,652
    997c:	0000a328 	cmpgeui	zero,zero,652
    9980:	0000a328 	cmpgeui	zero,zero,652
    9984:	0000a328 	cmpgeui	zero,zero,652
    9988:	0000a328 	cmpgeui	zero,zero,652
    998c:	0000a24c 	andi	zero,zero,649
    9990:	0000a270 	cmpltui	zero,zero,649
    9994:	0000a328 	cmpgeui	zero,zero,652
    9998:	00009b68 	cmpgeui	zero,zero,621
    999c:	0000a284 	movi	zero,650
    99a0:	0000a328 	cmpgeui	zero,zero,652
    99a4:	0000a050 	cmplti	zero,zero,641
    99a8:	0000a05c 	xori	zero,zero,641
    99ac:	0000a05c 	xori	zero,zero,641
    99b0:	0000a05c 	xori	zero,zero,641
    99b4:	0000a05c 	xori	zero,zero,641
    99b8:	0000a05c 	xori	zero,zero,641
    99bc:	0000a05c 	xori	zero,zero,641
    99c0:	0000a05c 	xori	zero,zero,641
    99c4:	0000a05c 	xori	zero,zero,641
    99c8:	0000a05c 	xori	zero,zero,641
    99cc:	0000a328 	cmpgeui	zero,zero,652
    99d0:	0000a328 	cmpgeui	zero,zero,652
    99d4:	0000a328 	cmpgeui	zero,zero,652
    99d8:	0000a328 	cmpgeui	zero,zero,652
    99dc:	0000a328 	cmpgeui	zero,zero,652
    99e0:	0000a328 	cmpgeui	zero,zero,652
    99e4:	0000a328 	cmpgeui	zero,zero,652
    99e8:	0000a328 	cmpgeui	zero,zero,652
    99ec:	0000a328 	cmpgeui	zero,zero,652
    99f0:	0000a328 	cmpgeui	zero,zero,652
    99f4:	0000a09c 	xori	zero,zero,642
    99f8:	0000a328 	cmpgeui	zero,zero,652
    99fc:	0000a328 	cmpgeui	zero,zero,652
    9a00:	0000a328 	cmpgeui	zero,zero,652
    9a04:	0000a328 	cmpgeui	zero,zero,652
    9a08:	0000a328 	cmpgeui	zero,zero,652
    9a0c:	0000a328 	cmpgeui	zero,zero,652
    9a10:	0000a328 	cmpgeui	zero,zero,652
    9a14:	0000a328 	cmpgeui	zero,zero,652
    9a18:	0000a328 	cmpgeui	zero,zero,652
    9a1c:	0000a328 	cmpgeui	zero,zero,652
    9a20:	0000a0d8 	cmpnei	zero,zero,643
    9a24:	0000a328 	cmpgeui	zero,zero,652
    9a28:	0000a328 	cmpgeui	zero,zero,652
    9a2c:	0000a328 	cmpgeui	zero,zero,652
    9a30:	0000a328 	cmpgeui	zero,zero,652
    9a34:	0000a328 	cmpgeui	zero,zero,652
    9a38:	0000a134 	movhi	zero,644
    9a3c:	0000a328 	cmpgeui	zero,zero,652
    9a40:	0000a328 	cmpgeui	zero,zero,652
    9a44:	0000a1a8 	cmpgeui	zero,zero,646
    9a48:	0000a328 	cmpgeui	zero,zero,652
    9a4c:	0000a328 	cmpgeui	zero,zero,652
    9a50:	0000a328 	cmpgeui	zero,zero,652
    9a54:	0000a328 	cmpgeui	zero,zero,652
    9a58:	0000a328 	cmpgeui	zero,zero,652
    9a5c:	0000a328 	cmpgeui	zero,zero,652
    9a60:	0000a328 	cmpgeui	zero,zero,652
    9a64:	0000a328 	cmpgeui	zero,zero,652
    9a68:	0000a328 	cmpgeui	zero,zero,652
    9a6c:	0000a328 	cmpgeui	zero,zero,652
    9a70:	00009f50 	cmplti	zero,zero,637
    9a74:	00009f80 	call	9f8 <main+0x58>
    9a78:	0000a328 	cmpgeui	zero,zero,652
    9a7c:	0000a328 	cmpgeui	zero,zero,652
    9a80:	0000a328 	cmpgeui	zero,zero,652
    9a84:	0000a2d0 	cmplti	zero,zero,651
    9a88:	00009f80 	call	9f8 <main+0x58>
    9a8c:	0000a328 	cmpgeui	zero,zero,652
    9a90:	0000a328 	cmpgeui	zero,zero,652
    9a94:	00009e28 	cmpgeui	zero,zero,632
    9a98:	0000a328 	cmpgeui	zero,zero,652
    9a9c:	00009e3c 	xorhi	zero,zero,632
    9aa0:	00009e74 	movhi	zero,633
    9aa4:	00009b74 	movhi	zero,621
    9aa8:	00009e1c 	xori	zero,zero,632
    9aac:	0000a328 	cmpgeui	zero,zero,652
    9ab0:	0000a1e8 	cmpgeui	zero,zero,647
    9ab4:	0000a328 	cmpgeui	zero,zero,652
    9ab8:	0000a234 	movhi	zero,648
    9abc:	0000a328 	cmpgeui	zero,zero,652
    9ac0:	0000a328 	cmpgeui	zero,zero,652
    9ac4:	00009ef8 	rdprs	zero,zero,635
    9ac8:	42000204 	addi	r8,r8,8
    9acc:	d8c02417 	ldw	r3,144(sp)
    9ad0:	1c07883a 	add	r3,r3,r16
    9ad4:	d8c02415 	stw	r3,144(sp)
    9ad8:	003f8c06 	br	990c <__alt_data_end+0xfffd990c>
    9adc:	d9402017 	ldw	r5,128(sp)
    9ae0:	d9002117 	ldw	r4,132(sp)
    9ae4:	0003fb80 	call	3fb8 <__swsetup_r>
    9ae8:	1003c11e 	bne	r2,zero,a9f0 <___vfiprintf_internal_r+0x1224>
    9aec:	d9402017 	ldw	r5,128(sp)
    9af0:	00c00284 	movi	r3,10
    9af4:	2880030b 	ldhu	r2,12(r5)
    9af8:	1080068c 	andi	r2,r2,26
    9afc:	10ff581e 	bne	r2,r3,9860 <__alt_data_end+0xfffd9860>
    9b00:	d8c02017 	ldw	r3,128(sp)
    9b04:	1880038f 	ldh	r2,14(r3)
    9b08:	103f5516 	blt	r2,zero,9860 <__alt_data_end+0xfffd9860>
    9b0c:	d9c02217 	ldw	r7,136(sp)
    9b10:	d9002117 	ldw	r4,132(sp)
    9b14:	a80d883a 	mov	r6,r21
    9b18:	180b883a 	mov	r5,r3
    9b1c:	000acf40 	call	acf4 <__sbprintf>
    9b20:	dfc03517 	ldw	ra,212(sp)
    9b24:	df003417 	ldw	fp,208(sp)
    9b28:	ddc03317 	ldw	r23,204(sp)
    9b2c:	dd803217 	ldw	r22,200(sp)
    9b30:	dd403117 	ldw	r21,196(sp)
    9b34:	dd003017 	ldw	r20,192(sp)
    9b38:	dcc02f17 	ldw	r19,188(sp)
    9b3c:	dc802e17 	ldw	r18,184(sp)
    9b40:	dc402d17 	ldw	r17,180(sp)
    9b44:	dc002c17 	ldw	r16,176(sp)
    9b48:	dec03604 	addi	sp,sp,216
    9b4c:	f800283a 	ret
    9b50:	0005fc40 	call	5fc4 <__sinit>
    9b54:	003f2f06 	br	9814 <__alt_data_end+0xfffd9814>
    9b58:	d8c02517 	ldw	r3,148(sp)
    9b5c:	d8802215 	stw	r2,136(sp)
    9b60:	00c7c83a 	sub	r3,zero,r3
    9b64:	d8c02515 	stw	r3,148(sp)
    9b68:	8c400114 	ori	r17,r17,4
    9b6c:	b0c00007 	ldb	r3,0(r22)
    9b70:	003f7306 	br	9940 <__alt_data_end+0xfffd9940>
    9b74:	00800c04 	movi	r2,48
    9b78:	d9402217 	ldw	r5,136(sp)
    9b7c:	d8801d05 	stb	r2,116(sp)
    9b80:	00801e04 	movi	r2,120
    9b84:	d8801d45 	stb	r2,117(sp)
    9b88:	d8001d85 	stb	zero,118(sp)
    9b8c:	b811883a 	mov	r8,r23
    9b90:	28c00104 	addi	r3,r5,4
    9b94:	2cc00017 	ldw	r19,0(r5)
    9b98:	0029883a 	mov	r20,zero
    9b9c:	88800094 	ori	r2,r17,2
    9ba0:	80032516 	blt	r16,zero,a838 <___vfiprintf_internal_r+0x106c>
    9ba4:	00bfdfc4 	movi	r2,-129
    9ba8:	88a2703a 	and	r17,r17,r2
    9bac:	d8c02215 	stw	r3,136(sp)
    9bb0:	8c400094 	ori	r17,r17,2
    9bb4:	98032a1e 	bne	r19,zero,a860 <___vfiprintf_internal_r+0x1094>
    9bb8:	008000b4 	movhi	r2,2
    9bbc:	10a57d04 	addi	r2,r2,-27148
    9bc0:	d8802615 	stw	r2,152(sp)
    9bc4:	002b883a 	mov	r21,zero
    9bc8:	8001741e 	bne	r16,zero,a19c <___vfiprintf_internal_r+0x9d0>
    9bcc:	0021883a 	mov	r16,zero
    9bd0:	0029883a 	mov	r20,zero
    9bd4:	ddc01a04 	addi	r23,sp,104
    9bd8:	8027883a 	mov	r19,r16
    9bdc:	8500010e 	bge	r16,r20,9be4 <___vfiprintf_internal_r+0x418>
    9be0:	a027883a 	mov	r19,r20
    9be4:	ad403fcc 	andi	r21,r21,255
    9be8:	ad40201c 	xori	r21,r21,128
    9bec:	ad7fe004 	addi	r21,r21,-128
    9bf0:	a8000126 	beq	r21,zero,9bf8 <___vfiprintf_internal_r+0x42c>
    9bf4:	9cc00044 	addi	r19,r19,1
    9bf8:	89c0008c 	andi	r7,r17,2
    9bfc:	38000126 	beq	r7,zero,9c04 <___vfiprintf_internal_r+0x438>
    9c00:	9cc00084 	addi	r19,r19,2
    9c04:	88c0210c 	andi	r3,r17,132
    9c08:	1801dd1e 	bne	r3,zero,a380 <___vfiprintf_internal_r+0xbb4>
    9c0c:	d9402517 	ldw	r5,148(sp)
    9c10:	2cebc83a 	sub	r21,r5,r19
    9c14:	0541da0e 	bge	zero,r21,a380 <___vfiprintf_internal_r+0xbb4>
    9c18:	07000404 	movi	fp,16
    9c1c:	d8801c17 	ldw	r2,112(sp)
    9c20:	e543be0e 	bge	fp,r21,ab1c <___vfiprintf_internal_r+0x1350>
    9c24:	014000b4 	movhi	r5,2
    9c28:	2965e104 	addi	r5,r5,-26748
    9c2c:	dc002715 	stw	r16,156(sp)
    9c30:	d9801b17 	ldw	r6,108(sp)
    9c34:	a821883a 	mov	r16,r21
    9c38:	d9402315 	stw	r5,140(sp)
    9c3c:	028001c4 	movi	r10,7
    9c40:	d9c02915 	stw	r7,164(sp)
    9c44:	182b883a 	mov	r21,r3
    9c48:	00000506 	br	9c60 <___vfiprintf_internal_r+0x494>
    9c4c:	31000084 	addi	r4,r6,2
    9c50:	42000204 	addi	r8,r8,8
    9c54:	180d883a 	mov	r6,r3
    9c58:	843ffc04 	addi	r16,r16,-16
    9c5c:	e4000f0e 	bge	fp,r16,9c9c <___vfiprintf_internal_r+0x4d0>
    9c60:	010000b4 	movhi	r4,2
    9c64:	10800404 	addi	r2,r2,16
    9c68:	30c00044 	addi	r3,r6,1
    9c6c:	2125e104 	addi	r4,r4,-26748
    9c70:	41000015 	stw	r4,0(r8)
    9c74:	47000115 	stw	fp,4(r8)
    9c78:	d8801c15 	stw	r2,112(sp)
    9c7c:	d8c01b15 	stw	r3,108(sp)
    9c80:	50fff20e 	bge	r10,r3,9c4c <__alt_data_end+0xfffd9c4c>
    9c84:	1001b21e 	bne	r2,zero,a350 <___vfiprintf_internal_r+0xb84>
    9c88:	843ffc04 	addi	r16,r16,-16
    9c8c:	000d883a 	mov	r6,zero
    9c90:	01000044 	movi	r4,1
    9c94:	d811883a 	mov	r8,sp
    9c98:	e43ff116 	blt	fp,r16,9c60 <__alt_data_end+0xfffd9c60>
    9c9c:	a807883a 	mov	r3,r21
    9ca0:	d9c02917 	ldw	r7,164(sp)
    9ca4:	802b883a 	mov	r21,r16
    9ca8:	dc002717 	ldw	r16,156(sp)
    9cac:	d9402317 	ldw	r5,140(sp)
    9cb0:	a885883a 	add	r2,r21,r2
    9cb4:	45400115 	stw	r21,4(r8)
    9cb8:	41400015 	stw	r5,0(r8)
    9cbc:	d8801c15 	stw	r2,112(sp)
    9cc0:	d9001b15 	stw	r4,108(sp)
    9cc4:	014001c4 	movi	r5,7
    9cc8:	29026216 	blt	r5,r4,a654 <___vfiprintf_internal_r+0xe88>
    9ccc:	d9801d87 	ldb	r6,118(sp)
    9cd0:	42000204 	addi	r8,r8,8
    9cd4:	21400044 	addi	r5,r4,1
    9cd8:	3001ae1e 	bne	r6,zero,a394 <___vfiprintf_internal_r+0xbc8>
    9cdc:	3801bb26 	beq	r7,zero,a3cc <___vfiprintf_internal_r+0xc00>
    9ce0:	d9001d04 	addi	r4,sp,116
    9ce4:	10800084 	addi	r2,r2,2
    9ce8:	41000015 	stw	r4,0(r8)
    9cec:	01000084 	movi	r4,2
    9cf0:	41000115 	stw	r4,4(r8)
    9cf4:	d8801c15 	stw	r2,112(sp)
    9cf8:	d9401b15 	stw	r5,108(sp)
    9cfc:	010001c4 	movi	r4,7
    9d00:	2142680e 	bge	r4,r5,a6a4 <___vfiprintf_internal_r+0xed8>
    9d04:	1002b11e 	bne	r2,zero,a7cc <___vfiprintf_internal_r+0x1000>
    9d08:	01802004 	movi	r6,128
    9d0c:	01400044 	movi	r5,1
    9d10:	0009883a 	mov	r4,zero
    9d14:	d811883a 	mov	r8,sp
    9d18:	1981ae1e 	bne	r3,r6,a3d4 <___vfiprintf_internal_r+0xc08>
    9d1c:	d8c02517 	ldw	r3,148(sp)
    9d20:	1cf9c83a 	sub	fp,r3,r19
    9d24:	0701ab0e 	bge	zero,fp,a3d4 <___vfiprintf_internal_r+0xc08>
    9d28:	05400404 	movi	r21,16
    9d2c:	af03a90e 	bge	r21,fp,abd4 <___vfiprintf_internal_r+0x1408>
    9d30:	014000b4 	movhi	r5,2
    9d34:	2965dd04 	addi	r5,r5,-26764
    9d38:	d9402315 	stw	r5,140(sp)
    9d3c:	01c001c4 	movi	r7,7
    9d40:	00000506 	br	9d58 <___vfiprintf_internal_r+0x58c>
    9d44:	21800084 	addi	r6,r4,2
    9d48:	42000204 	addi	r8,r8,8
    9d4c:	1809883a 	mov	r4,r3
    9d50:	e73ffc04 	addi	fp,fp,-16
    9d54:	af000d0e 	bge	r21,fp,9d8c <___vfiprintf_internal_r+0x5c0>
    9d58:	10800404 	addi	r2,r2,16
    9d5c:	20c00044 	addi	r3,r4,1
    9d60:	44800015 	stw	r18,0(r8)
    9d64:	45400115 	stw	r21,4(r8)
    9d68:	d8801c15 	stw	r2,112(sp)
    9d6c:	d8c01b15 	stw	r3,108(sp)
    9d70:	38fff40e 	bge	r7,r3,9d44 <__alt_data_end+0xfffd9d44>
    9d74:	10022b1e 	bne	r2,zero,a624 <___vfiprintf_internal_r+0xe58>
    9d78:	e73ffc04 	addi	fp,fp,-16
    9d7c:	01800044 	movi	r6,1
    9d80:	0009883a 	mov	r4,zero
    9d84:	d811883a 	mov	r8,sp
    9d88:	af3ff316 	blt	r21,fp,9d58 <__alt_data_end+0xfffd9d58>
    9d8c:	d8c02317 	ldw	r3,140(sp)
    9d90:	1705883a 	add	r2,r2,fp
    9d94:	47000115 	stw	fp,4(r8)
    9d98:	40c00015 	stw	r3,0(r8)
    9d9c:	d8801c15 	stw	r2,112(sp)
    9da0:	d9801b15 	stw	r6,108(sp)
    9da4:	00c001c4 	movi	r3,7
    9da8:	19829416 	blt	r3,r6,a7fc <___vfiprintf_internal_r+0x1030>
    9dac:	8521c83a 	sub	r16,r16,r20
    9db0:	42000204 	addi	r8,r8,8
    9db4:	31400044 	addi	r5,r6,1
    9db8:	3009883a 	mov	r4,r6
    9dbc:	04018716 	blt	zero,r16,a3dc <___vfiprintf_internal_r+0xc10>
    9dc0:	a085883a 	add	r2,r20,r2
    9dc4:	45c00015 	stw	r23,0(r8)
    9dc8:	45000115 	stw	r20,4(r8)
    9dcc:	d8801c15 	stw	r2,112(sp)
    9dd0:	d9401b15 	stw	r5,108(sp)
    9dd4:	00c001c4 	movi	r3,7
    9dd8:	1941c20e 	bge	r3,r5,a4e4 <___vfiprintf_internal_r+0xd18>
    9ddc:	1002531e 	bne	r2,zero,a72c <___vfiprintf_internal_r+0xf60>
    9de0:	d8001b15 	stw	zero,108(sp)
    9de4:	8c40010c 	andi	r17,r17,4
    9de8:	88023226 	beq	r17,zero,a6b4 <___vfiprintf_internal_r+0xee8>
    9dec:	d9002517 	ldw	r4,148(sp)
    9df0:	24e3c83a 	sub	r17,r4,r19
    9df4:	04432916 	blt	zero,r17,aa9c <___vfiprintf_internal_r+0x12d0>
    9df8:	d8802517 	ldw	r2,148(sp)
    9dfc:	14c0010e 	bge	r2,r19,9e04 <___vfiprintf_internal_r+0x638>
    9e00:	9805883a 	mov	r2,r19
    9e04:	d8c02417 	ldw	r3,144(sp)
    9e08:	1887883a 	add	r3,r3,r2
    9e0c:	d8c02415 	stw	r3,144(sp)
    9e10:	d8001b15 	stw	zero,108(sp)
    9e14:	d811883a 	mov	r8,sp
    9e18:	003ea006 	br	989c <__alt_data_end+0xfffd989c>
    9e1c:	8c400814 	ori	r17,r17,32
    9e20:	b0c00007 	ldb	r3,0(r22)
    9e24:	003ec606 	br	9940 <__alt_data_end+0xfffd9940>
    9e28:	b0c00007 	ldb	r3,0(r22)
    9e2c:	00801b04 	movi	r2,108
    9e30:	18832026 	beq	r3,r2,aab4 <___vfiprintf_internal_r+0x12e8>
    9e34:	8c400414 	ori	r17,r17,16
    9e38:	003ec106 	br	9940 <__alt_data_end+0xfffd9940>
    9e3c:	9cc03fcc 	andi	r19,r19,255
    9e40:	b811883a 	mov	r8,r23
    9e44:	9803981e 	bne	r19,zero,aca8 <___vfiprintf_internal_r+0x14dc>
    9e48:	8880080c 	andi	r2,r17,32
    9e4c:	1002be26 	beq	r2,zero,a948 <___vfiprintf_internal_r+0x117c>
    9e50:	d9002217 	ldw	r4,136(sp)
    9e54:	d9402417 	ldw	r5,144(sp)
    9e58:	20800017 	ldw	r2,0(r4)
    9e5c:	2807d7fa 	srai	r3,r5,31
    9e60:	21000104 	addi	r4,r4,4
    9e64:	d9002215 	stw	r4,136(sp)
    9e68:	11400015 	stw	r5,0(r2)
    9e6c:	10c00115 	stw	r3,4(r2)
    9e70:	003e8a06 	br	989c <__alt_data_end+0xfffd989c>
    9e74:	9cc03fcc 	andi	r19,r19,255
    9e78:	b811883a 	mov	r8,r23
    9e7c:	9803871e 	bne	r19,zero,ac9c <___vfiprintf_internal_r+0x14d0>
    9e80:	8880080c 	andi	r2,r17,32
    9e84:	10009a26 	beq	r2,zero,a0f0 <___vfiprintf_internal_r+0x924>
    9e88:	d9002217 	ldw	r4,136(sp)
    9e8c:	d8001d85 	stb	zero,118(sp)
    9e90:	20800204 	addi	r2,r4,8
    9e94:	24c00017 	ldw	r19,0(r4)
    9e98:	25000117 	ldw	r20,4(r4)
    9e9c:	8002a416 	blt	r16,zero,a930 <___vfiprintf_internal_r+0x1164>
    9ea0:	013fdfc4 	movi	r4,-129
    9ea4:	9d06b03a 	or	r3,r19,r20
    9ea8:	d8802215 	stw	r2,136(sp)
    9eac:	8922703a 	and	r17,r17,r4
    9eb0:	18009b26 	beq	r3,zero,a120 <___vfiprintf_internal_r+0x954>
    9eb4:	002b883a 	mov	r21,zero
    9eb8:	ddc01a04 	addi	r23,sp,104
    9ebc:	9806d0fa 	srli	r3,r19,3
    9ec0:	a008977a 	slli	r4,r20,29
    9ec4:	a028d0fa 	srli	r20,r20,3
    9ec8:	9cc001cc 	andi	r19,r19,7
    9ecc:	98800c04 	addi	r2,r19,48
    9ed0:	bdffffc4 	addi	r23,r23,-1
    9ed4:	20e6b03a 	or	r19,r4,r3
    9ed8:	b8800005 	stb	r2,0(r23)
    9edc:	9d06b03a 	or	r3,r19,r20
    9ee0:	183ff61e 	bne	r3,zero,9ebc <__alt_data_end+0xfffd9ebc>
    9ee4:	88c0004c 	andi	r3,r17,1
    9ee8:	18021f1e 	bne	r3,zero,a768 <___vfiprintf_internal_r+0xf9c>
    9eec:	d9401e17 	ldw	r5,120(sp)
    9ef0:	2de9c83a 	sub	r20,r5,r23
    9ef4:	003f3806 	br	9bd8 <__alt_data_end+0xfffd9bd8>
    9ef8:	9cc03fcc 	andi	r19,r19,255
    9efc:	b811883a 	mov	r8,r23
    9f00:	98034f1e 	bne	r19,zero,ac40 <___vfiprintf_internal_r+0x1474>
    9f04:	008000b4 	movhi	r2,2
    9f08:	10a57d04 	addi	r2,r2,-27148
    9f0c:	d8802615 	stw	r2,152(sp)
    9f10:	8880080c 	andi	r2,r17,32
    9f14:	1000ac26 	beq	r2,zero,a1c8 <___vfiprintf_internal_r+0x9fc>
    9f18:	d9002217 	ldw	r4,136(sp)
    9f1c:	24c00017 	ldw	r19,0(r4)
    9f20:	25000117 	ldw	r20,4(r4)
    9f24:	21000204 	addi	r4,r4,8
    9f28:	d9002215 	stw	r4,136(sp)
    9f2c:	8880004c 	andi	r2,r17,1
    9f30:	1001e726 	beq	r2,zero,a6d0 <___vfiprintf_internal_r+0xf04>
    9f34:	9d04b03a 	or	r2,r19,r20
    9f38:	10025c1e 	bne	r2,zero,a8ac <___vfiprintf_internal_r+0x10e0>
    9f3c:	d8001d85 	stb	zero,118(sp)
    9f40:	80024416 	blt	r16,zero,a854 <___vfiprintf_internal_r+0x1088>
    9f44:	00bfdfc4 	movi	r2,-129
    9f48:	88a2703a 	and	r17,r17,r2
    9f4c:	003f1d06 	br	9bc4 <__alt_data_end+0xfffd9bc4>
    9f50:	d8c02217 	ldw	r3,136(sp)
    9f54:	04c00044 	movi	r19,1
    9f58:	b811883a 	mov	r8,r23
    9f5c:	18800017 	ldw	r2,0(r3)
    9f60:	18c00104 	addi	r3,r3,4
    9f64:	d8001d85 	stb	zero,118(sp)
    9f68:	d8801005 	stb	r2,64(sp)
    9f6c:	d8c02215 	stw	r3,136(sp)
    9f70:	9829883a 	mov	r20,r19
    9f74:	ddc01004 	addi	r23,sp,64
    9f78:	0021883a 	mov	r16,zero
    9f7c:	003f1e06 	br	9bf8 <__alt_data_end+0xfffd9bf8>
    9f80:	9cc03fcc 	andi	r19,r19,255
    9f84:	b811883a 	mov	r8,r23
    9f88:	9803331e 	bne	r19,zero,ac58 <___vfiprintf_internal_r+0x148c>
    9f8c:	8880080c 	andi	r2,r17,32
    9f90:	10004826 	beq	r2,zero,a0b4 <___vfiprintf_internal_r+0x8e8>
    9f94:	d9002217 	ldw	r4,136(sp)
    9f98:	20800117 	ldw	r2,4(r4)
    9f9c:	24c00017 	ldw	r19,0(r4)
    9fa0:	21000204 	addi	r4,r4,8
    9fa4:	d9002215 	stw	r4,136(sp)
    9fa8:	1029883a 	mov	r20,r2
    9fac:	10024c16 	blt	r2,zero,a8e0 <___vfiprintf_internal_r+0x1114>
    9fb0:	dd401d83 	ldbu	r21,118(sp)
    9fb4:	80007116 	blt	r16,zero,a17c <___vfiprintf_internal_r+0x9b0>
    9fb8:	00ffdfc4 	movi	r3,-129
    9fbc:	9d04b03a 	or	r2,r19,r20
    9fc0:	88e2703a 	and	r17,r17,r3
    9fc4:	1000d126 	beq	r2,zero,a30c <___vfiprintf_internal_r+0xb40>
    9fc8:	a0023526 	beq	r20,zero,a8a0 <___vfiprintf_internal_r+0x10d4>
    9fcc:	ddc01a04 	addi	r23,sp,104
    9fd0:	4039883a 	mov	fp,r8
    9fd4:	9809883a 	mov	r4,r19
    9fd8:	a00b883a 	mov	r5,r20
    9fdc:	01800284 	movi	r6,10
    9fe0:	000f883a 	mov	r7,zero
    9fe4:	000be040 	call	be04 <__umoddi3>
    9fe8:	10800c04 	addi	r2,r2,48
    9fec:	bdffffc4 	addi	r23,r23,-1
    9ff0:	9809883a 	mov	r4,r19
    9ff4:	a00b883a 	mov	r5,r20
    9ff8:	b8800005 	stb	r2,0(r23)
    9ffc:	01800284 	movi	r6,10
    a000:	000f883a 	mov	r7,zero
    a004:	000b8080 	call	b808 <__udivdi3>
    a008:	1027883a 	mov	r19,r2
    a00c:	10c4b03a 	or	r2,r2,r3
    a010:	1829883a 	mov	r20,r3
    a014:	103fef1e 	bne	r2,zero,9fd4 <__alt_data_end+0xfffd9fd4>
    a018:	d9001e17 	ldw	r4,120(sp)
    a01c:	e011883a 	mov	r8,fp
    a020:	25e9c83a 	sub	r20,r4,r23
    a024:	003eec06 	br	9bd8 <__alt_data_end+0xfffd9bd8>
    a028:	d8802307 	ldb	r2,140(sp)
    a02c:	1002361e 	bne	r2,zero,a908 <___vfiprintf_internal_r+0x113c>
    a030:	00c00804 	movi	r3,32
    a034:	d8c02305 	stb	r3,140(sp)
    a038:	04c00044 	movi	r19,1
    a03c:	b0c00007 	ldb	r3,0(r22)
    a040:	003e3f06 	br	9940 <__alt_data_end+0xfffd9940>
    a044:	8c400054 	ori	r17,r17,1
    a048:	b0c00007 	ldb	r3,0(r22)
    a04c:	003e3c06 	br	9940 <__alt_data_end+0xfffd9940>
    a050:	8c402014 	ori	r17,r17,128
    a054:	b0c00007 	ldb	r3,0(r22)
    a058:	003e3906 	br	9940 <__alt_data_end+0xfffd9940>
    a05c:	dc002715 	stw	r16,156(sp)
    a060:	d8002515 	stw	zero,148(sp)
    a064:	1f3ff404 	addi	fp,r3,-48
    a068:	0009883a 	mov	r4,zero
    a06c:	b021883a 	mov	r16,r22
    a070:	01400284 	movi	r5,10
    a074:	000c3c80 	call	c3c8 <__mulsi3>
    a078:	80c00007 	ldb	r3,0(r16)
    a07c:	e089883a 	add	r4,fp,r2
    a080:	b5800044 	addi	r22,r22,1
    a084:	1f3ff404 	addi	fp,r3,-48
    a088:	b021883a 	mov	r16,r22
    a08c:	af3ff82e 	bgeu	r21,fp,a070 <__alt_data_end+0xfffda070>
    a090:	d9002515 	stw	r4,148(sp)
    a094:	dc002717 	ldw	r16,156(sp)
    a098:	003e2a06 	br	9944 <__alt_data_end+0xfffd9944>
    a09c:	9cc03fcc 	andi	r19,r19,255
    a0a0:	b811883a 	mov	r8,r23
    a0a4:	9802e91e 	bne	r19,zero,ac4c <___vfiprintf_internal_r+0x1480>
    a0a8:	8c400414 	ori	r17,r17,16
    a0ac:	8880080c 	andi	r2,r17,32
    a0b0:	103fb81e 	bne	r2,zero,9f94 <__alt_data_end+0xfffd9f94>
    a0b4:	8880040c 	andi	r2,r17,16
    a0b8:	10022e26 	beq	r2,zero,a974 <___vfiprintf_internal_r+0x11a8>
    a0bc:	d9402217 	ldw	r5,136(sp)
    a0c0:	2cc00017 	ldw	r19,0(r5)
    a0c4:	29400104 	addi	r5,r5,4
    a0c8:	d9402215 	stw	r5,136(sp)
    a0cc:	9829d7fa 	srai	r20,r19,31
    a0d0:	a005883a 	mov	r2,r20
    a0d4:	003fb506 	br	9fac <__alt_data_end+0xfffd9fac>
    a0d8:	9cc03fcc 	andi	r19,r19,255
    a0dc:	b811883a 	mov	r8,r23
    a0e0:	9802fa1e 	bne	r19,zero,accc <___vfiprintf_internal_r+0x1500>
    a0e4:	8c400414 	ori	r17,r17,16
    a0e8:	8880080c 	andi	r2,r17,32
    a0ec:	103f661e 	bne	r2,zero,9e88 <__alt_data_end+0xfffd9e88>
    a0f0:	8880040c 	andi	r2,r17,16
    a0f4:	10020626 	beq	r2,zero,a910 <___vfiprintf_internal_r+0x1144>
    a0f8:	d9402217 	ldw	r5,136(sp)
    a0fc:	d8001d85 	stb	zero,118(sp)
    a100:	0029883a 	mov	r20,zero
    a104:	28800104 	addi	r2,r5,4
    a108:	2cc00017 	ldw	r19,0(r5)
    a10c:	80020816 	blt	r16,zero,a930 <___vfiprintf_internal_r+0x1164>
    a110:	00ffdfc4 	movi	r3,-129
    a114:	d8802215 	stw	r2,136(sp)
    a118:	88e2703a 	and	r17,r17,r3
    a11c:	983f651e 	bne	r19,zero,9eb4 <__alt_data_end+0xfffd9eb4>
    a120:	002b883a 	mov	r21,zero
    a124:	8002cf26 	beq	r16,zero,ac64 <___vfiprintf_internal_r+0x1498>
    a128:	0027883a 	mov	r19,zero
    a12c:	0029883a 	mov	r20,zero
    a130:	003f6106 	br	9eb8 <__alt_data_end+0xfffd9eb8>
    a134:	9cc03fcc 	andi	r19,r19,255
    a138:	b811883a 	mov	r8,r23
    a13c:	9802e01e 	bne	r19,zero,acc0 <___vfiprintf_internal_r+0x14f4>
    a140:	8c400414 	ori	r17,r17,16
    a144:	8880080c 	andi	r2,r17,32
    a148:	1000641e 	bne	r2,zero,a2dc <___vfiprintf_internal_r+0xb10>
    a14c:	8880040c 	andi	r2,r17,16
    a150:	1001c81e 	bne	r2,zero,a874 <___vfiprintf_internal_r+0x10a8>
    a154:	8880100c 	andi	r2,r17,64
    a158:	d8001d85 	stb	zero,118(sp)
    a15c:	1002281e 	bne	r2,zero,aa00 <___vfiprintf_internal_r+0x1234>
    a160:	d9002217 	ldw	r4,136(sp)
    a164:	0029883a 	mov	r20,zero
    a168:	20800104 	addi	r2,r4,4
    a16c:	24c00017 	ldw	r19,0(r4)
    a170:	8001c60e 	bge	r16,zero,a88c <___vfiprintf_internal_r+0x10c0>
    a174:	d8802215 	stw	r2,136(sp)
    a178:	002b883a 	mov	r21,zero
    a17c:	9d04b03a 	or	r2,r19,r20
    a180:	103f911e 	bne	r2,zero,9fc8 <__alt_data_end+0xfffd9fc8>
    a184:	00800044 	movi	r2,1
    a188:	10803fcc 	andi	r2,r2,255
    a18c:	00c00044 	movi	r3,1
    a190:	10c05f26 	beq	r2,r3,a310 <___vfiprintf_internal_r+0xb44>
    a194:	00c00084 	movi	r3,2
    a198:	10ffe31e 	bne	r2,r3,a128 <__alt_data_end+0xfffda128>
    a19c:	0027883a 	mov	r19,zero
    a1a0:	0029883a 	mov	r20,zero
    a1a4:	00015106 	br	a6ec <___vfiprintf_internal_r+0xf20>
    a1a8:	9cc03fcc 	andi	r19,r19,255
    a1ac:	b811883a 	mov	r8,r23
    a1b0:	9802c01e 	bne	r19,zero,acb4 <___vfiprintf_internal_r+0x14e8>
    a1b4:	014000b4 	movhi	r5,2
    a1b8:	29657804 	addi	r5,r5,-27168
    a1bc:	d9402615 	stw	r5,152(sp)
    a1c0:	8880080c 	andi	r2,r17,32
    a1c4:	103f541e 	bne	r2,zero,9f18 <__alt_data_end+0xfffd9f18>
    a1c8:	8880040c 	andi	r2,r17,16
    a1cc:	1001f226 	beq	r2,zero,a998 <___vfiprintf_internal_r+0x11cc>
    a1d0:	d9402217 	ldw	r5,136(sp)
    a1d4:	0029883a 	mov	r20,zero
    a1d8:	2cc00017 	ldw	r19,0(r5)
    a1dc:	29400104 	addi	r5,r5,4
    a1e0:	d9402215 	stw	r5,136(sp)
    a1e4:	003f5106 	br	9f2c <__alt_data_end+0xfffd9f2c>
    a1e8:	d8c02217 	ldw	r3,136(sp)
    a1ec:	b811883a 	mov	r8,r23
    a1f0:	d8001d85 	stb	zero,118(sp)
    a1f4:	1dc00017 	ldw	r23,0(r3)
    a1f8:	1f000104 	addi	fp,r3,4
    a1fc:	b8025926 	beq	r23,zero,ab64 <___vfiprintf_internal_r+0x1398>
    a200:	80023316 	blt	r16,zero,aad0 <___vfiprintf_internal_r+0x1304>
    a204:	800d883a 	mov	r6,r16
    a208:	000b883a 	mov	r5,zero
    a20c:	b809883a 	mov	r4,r23
    a210:	da002a15 	stw	r8,168(sp)
    a214:	000753c0 	call	753c <memchr>
    a218:	da002a17 	ldw	r8,168(sp)
    a21c:	10026826 	beq	r2,zero,abc0 <___vfiprintf_internal_r+0x13f4>
    a220:	15e9c83a 	sub	r20,r2,r23
    a224:	dd401d83 	ldbu	r21,118(sp)
    a228:	df002215 	stw	fp,136(sp)
    a22c:	0021883a 	mov	r16,zero
    a230:	003e6906 	br	9bd8 <__alt_data_end+0xfffd9bd8>
    a234:	9cc03fcc 	andi	r19,r19,255
    a238:	b811883a 	mov	r8,r23
    a23c:	983fc126 	beq	r19,zero,a144 <__alt_data_end+0xfffda144>
    a240:	d8c02303 	ldbu	r3,140(sp)
    a244:	d8c01d85 	stb	r3,118(sp)
    a248:	003fbe06 	br	a144 <__alt_data_end+0xfffda144>
    a24c:	d9002217 	ldw	r4,136(sp)
    a250:	d9402217 	ldw	r5,136(sp)
    a254:	21000017 	ldw	r4,0(r4)
    a258:	28800104 	addi	r2,r5,4
    a25c:	d9002515 	stw	r4,148(sp)
    a260:	203e3d16 	blt	r4,zero,9b58 <__alt_data_end+0xfffd9b58>
    a264:	d8802215 	stw	r2,136(sp)
    a268:	b0c00007 	ldb	r3,0(r22)
    a26c:	003db406 	br	9940 <__alt_data_end+0xfffd9940>
    a270:	00c00ac4 	movi	r3,43
    a274:	d8c02305 	stb	r3,140(sp)
    a278:	04c00044 	movi	r19,1
    a27c:	b0c00007 	ldb	r3,0(r22)
    a280:	003daf06 	br	9940 <__alt_data_end+0xfffd9940>
    a284:	b0c00007 	ldb	r3,0(r22)
    a288:	01000a84 	movi	r4,42
    a28c:	b4000044 	addi	r16,r22,1
    a290:	19025e26 	beq	r3,r4,ac0c <___vfiprintf_internal_r+0x1440>
    a294:	1f3ff404 	addi	fp,r3,-48
    a298:	0009883a 	mov	r4,zero
    a29c:	af025236 	bltu	r21,fp,abe8 <___vfiprintf_internal_r+0x141c>
    a2a0:	01400284 	movi	r5,10
    a2a4:	000c3c80 	call	c3c8 <__mulsi3>
    a2a8:	80c00007 	ldb	r3,0(r16)
    a2ac:	1709883a 	add	r4,r2,fp
    a2b0:	85800044 	addi	r22,r16,1
    a2b4:	1f3ff404 	addi	fp,r3,-48
    a2b8:	b021883a 	mov	r16,r22
    a2bc:	af3ff82e 	bgeu	r21,fp,a2a0 <__alt_data_end+0xfffda2a0>
    a2c0:	2021883a 	mov	r16,r4
    a2c4:	203d9f0e 	bge	r4,zero,9944 <__alt_data_end+0xfffd9944>
    a2c8:	043fffc4 	movi	r16,-1
    a2cc:	003d9d06 	br	9944 <__alt_data_end+0xfffd9944>
    a2d0:	8c401014 	ori	r17,r17,64
    a2d4:	b0c00007 	ldb	r3,0(r22)
    a2d8:	003d9906 	br	9940 <__alt_data_end+0xfffd9940>
    a2dc:	d9002217 	ldw	r4,136(sp)
    a2e0:	d8001d85 	stb	zero,118(sp)
    a2e4:	20c00204 	addi	r3,r4,8
    a2e8:	24c00017 	ldw	r19,0(r4)
    a2ec:	25000117 	ldw	r20,4(r4)
    a2f0:	8001e716 	blt	r16,zero,aa90 <___vfiprintf_internal_r+0x12c4>
    a2f4:	013fdfc4 	movi	r4,-129
    a2f8:	9d04b03a 	or	r2,r19,r20
    a2fc:	d8c02215 	stw	r3,136(sp)
    a300:	8922703a 	and	r17,r17,r4
    a304:	002b883a 	mov	r21,zero
    a308:	103f2f1e 	bne	r2,zero,9fc8 <__alt_data_end+0xfffd9fc8>
    a30c:	803e2f26 	beq	r16,zero,9bcc <__alt_data_end+0xfffd9bcc>
    a310:	0027883a 	mov	r19,zero
    a314:	9cc00c04 	addi	r19,r19,48
    a318:	dcc019c5 	stb	r19,103(sp)
    a31c:	dd002817 	ldw	r20,160(sp)
    a320:	ddc019c4 	addi	r23,sp,103
    a324:	003e2c06 	br	9bd8 <__alt_data_end+0xfffd9bd8>
    a328:	9cc03fcc 	andi	r19,r19,255
    a32c:	b811883a 	mov	r8,r23
    a330:	9802571e 	bne	r19,zero,ac90 <___vfiprintf_internal_r+0x14c4>
    a334:	18005726 	beq	r3,zero,a494 <___vfiprintf_internal_r+0xcc8>
    a338:	04c00044 	movi	r19,1
    a33c:	d8c01005 	stb	r3,64(sp)
    a340:	d8001d85 	stb	zero,118(sp)
    a344:	9829883a 	mov	r20,r19
    a348:	ddc01004 	addi	r23,sp,64
    a34c:	003f0a06 	br	9f78 <__alt_data_end+0xfffd9f78>
    a350:	d9402017 	ldw	r5,128(sp)
    a354:	d9002117 	ldw	r4,132(sp)
    a358:	d9801a04 	addi	r6,sp,104
    a35c:	da802a15 	stw	r10,168(sp)
    a360:	00096b80 	call	96b8 <__sprint_r.part.0>
    a364:	da802a17 	ldw	r10,168(sp)
    a368:	1000501e 	bne	r2,zero,a4ac <___vfiprintf_internal_r+0xce0>
    a36c:	d9801b17 	ldw	r6,108(sp)
    a370:	d8801c17 	ldw	r2,112(sp)
    a374:	d811883a 	mov	r8,sp
    a378:	31000044 	addi	r4,r6,1
    a37c:	003e3606 	br	9c58 <__alt_data_end+0xfffd9c58>
    a380:	d9001b17 	ldw	r4,108(sp)
    a384:	d8801c17 	ldw	r2,112(sp)
    a388:	21400044 	addi	r5,r4,1
    a38c:	d9801d87 	ldb	r6,118(sp)
    a390:	303e5226 	beq	r6,zero,9cdc <__alt_data_end+0xfffd9cdc>
    a394:	01800044 	movi	r6,1
    a398:	d9001d84 	addi	r4,sp,118
    a39c:	1185883a 	add	r2,r2,r6
    a3a0:	41000015 	stw	r4,0(r8)
    a3a4:	41800115 	stw	r6,4(r8)
    a3a8:	d8801c15 	stw	r2,112(sp)
    a3ac:	d9401b15 	stw	r5,108(sp)
    a3b0:	010001c4 	movi	r4,7
    a3b4:	2140b00e 	bge	r4,r5,a678 <___vfiprintf_internal_r+0xeac>
    a3b8:	1000f61e 	bne	r2,zero,a794 <___vfiprintf_internal_r+0xfc8>
    a3bc:	3800b31e 	bne	r7,zero,a68c <___vfiprintf_internal_r+0xec0>
    a3c0:	0009883a 	mov	r4,zero
    a3c4:	300b883a 	mov	r5,r6
    a3c8:	d811883a 	mov	r8,sp
    a3cc:	01802004 	movi	r6,128
    a3d0:	19be5226 	beq	r3,r6,9d1c <__alt_data_end+0xfffd9d1c>
    a3d4:	8521c83a 	sub	r16,r16,r20
    a3d8:	043e790e 	bge	zero,r16,9dc0 <__alt_data_end+0xfffd9dc0>
    a3dc:	05400404 	movi	r21,16
    a3e0:	ac01b00e 	bge	r21,r16,aaa4 <___vfiprintf_internal_r+0x12d8>
    a3e4:	014000b4 	movhi	r5,2
    a3e8:	2965dd04 	addi	r5,r5,-26764
    a3ec:	d9402315 	stw	r5,140(sp)
    a3f0:	070001c4 	movi	fp,7
    a3f4:	00000506 	br	a40c <___vfiprintf_internal_r+0xc40>
    a3f8:	21400084 	addi	r5,r4,2
    a3fc:	42000204 	addi	r8,r8,8
    a400:	1809883a 	mov	r4,r3
    a404:	843ffc04 	addi	r16,r16,-16
    a408:	ac000d0e 	bge	r21,r16,a440 <___vfiprintf_internal_r+0xc74>
    a40c:	10800404 	addi	r2,r2,16
    a410:	20c00044 	addi	r3,r4,1
    a414:	44800015 	stw	r18,0(r8)
    a418:	45400115 	stw	r21,4(r8)
    a41c:	d8801c15 	stw	r2,112(sp)
    a420:	d8c01b15 	stw	r3,108(sp)
    a424:	e0fff40e 	bge	fp,r3,a3f8 <__alt_data_end+0xfffda3f8>
    a428:	1000101e 	bne	r2,zero,a46c <___vfiprintf_internal_r+0xca0>
    a42c:	843ffc04 	addi	r16,r16,-16
    a430:	01400044 	movi	r5,1
    a434:	0009883a 	mov	r4,zero
    a438:	d811883a 	mov	r8,sp
    a43c:	ac3ff316 	blt	r21,r16,a40c <__alt_data_end+0xfffda40c>
    a440:	d8c02317 	ldw	r3,140(sp)
    a444:	1405883a 	add	r2,r2,r16
    a448:	44000115 	stw	r16,4(r8)
    a44c:	40c00015 	stw	r3,0(r8)
    a450:	d8801c15 	stw	r2,112(sp)
    a454:	d9401b15 	stw	r5,108(sp)
    a458:	00c001c4 	movi	r3,7
    a45c:	19401916 	blt	r3,r5,a4c4 <___vfiprintf_internal_r+0xcf8>
    a460:	42000204 	addi	r8,r8,8
    a464:	29400044 	addi	r5,r5,1
    a468:	003e5506 	br	9dc0 <__alt_data_end+0xfffd9dc0>
    a46c:	d9402017 	ldw	r5,128(sp)
    a470:	d9002117 	ldw	r4,132(sp)
    a474:	d9801a04 	addi	r6,sp,104
    a478:	00096b80 	call	96b8 <__sprint_r.part.0>
    a47c:	10000b1e 	bne	r2,zero,a4ac <___vfiprintf_internal_r+0xce0>
    a480:	d9001b17 	ldw	r4,108(sp)
    a484:	d8801c17 	ldw	r2,112(sp)
    a488:	d811883a 	mov	r8,sp
    a48c:	21400044 	addi	r5,r4,1
    a490:	003fdc06 	br	a404 <__alt_data_end+0xfffda404>
    a494:	d8801c17 	ldw	r2,112(sp)
    a498:	10000426 	beq	r2,zero,a4ac <___vfiprintf_internal_r+0xce0>
    a49c:	d9402017 	ldw	r5,128(sp)
    a4a0:	d9002117 	ldw	r4,132(sp)
    a4a4:	d9801a04 	addi	r6,sp,104
    a4a8:	00096b80 	call	96b8 <__sprint_r.part.0>
    a4ac:	d9402017 	ldw	r5,128(sp)
    a4b0:	2880030b 	ldhu	r2,12(r5)
    a4b4:	1080100c 	andi	r2,r2,64
    a4b8:	10014d1e 	bne	r2,zero,a9f0 <___vfiprintf_internal_r+0x1224>
    a4bc:	d8802417 	ldw	r2,144(sp)
    a4c0:	003d9706 	br	9b20 <__alt_data_end+0xfffd9b20>
    a4c4:	1000d21e 	bne	r2,zero,a810 <___vfiprintf_internal_r+0x1044>
    a4c8:	00c00044 	movi	r3,1
    a4cc:	a005883a 	mov	r2,r20
    a4d0:	ddc00015 	stw	r23,0(sp)
    a4d4:	dd000115 	stw	r20,4(sp)
    a4d8:	dd001c15 	stw	r20,112(sp)
    a4dc:	d8c01b15 	stw	r3,108(sp)
    a4e0:	d811883a 	mov	r8,sp
    a4e4:	42000204 	addi	r8,r8,8
    a4e8:	8c40010c 	andi	r17,r17,4
    a4ec:	88004026 	beq	r17,zero,a5f0 <___vfiprintf_internal_r+0xe24>
    a4f0:	d9002517 	ldw	r4,148(sp)
    a4f4:	24e3c83a 	sub	r17,r4,r19
    a4f8:	04403d0e 	bge	zero,r17,a5f0 <___vfiprintf_internal_r+0xe24>
    a4fc:	04000404 	movi	r16,16
    a500:	8441a90e 	bge	r16,r17,aba8 <___vfiprintf_internal_r+0x13dc>
    a504:	00c000b4 	movhi	r3,2
    a508:	18e5e104 	addi	r3,r3,-26748
    a50c:	d9001b17 	ldw	r4,108(sp)
    a510:	d8c02315 	stw	r3,140(sp)
    a514:	050001c4 	movi	r20,7
    a518:	dd402117 	ldw	r21,132(sp)
    a51c:	ddc02017 	ldw	r23,128(sp)
    a520:	00000506 	br	a538 <___vfiprintf_internal_r+0xd6c>
    a524:	21400084 	addi	r5,r4,2
    a528:	42000204 	addi	r8,r8,8
    a52c:	1809883a 	mov	r4,r3
    a530:	8c7ffc04 	addi	r17,r17,-16
    a534:	84400f0e 	bge	r16,r17,a574 <___vfiprintf_internal_r+0xda8>
    a538:	014000b4 	movhi	r5,2
    a53c:	10800404 	addi	r2,r2,16
    a540:	20c00044 	addi	r3,r4,1
    a544:	2965e104 	addi	r5,r5,-26748
    a548:	41400015 	stw	r5,0(r8)
    a54c:	44000115 	stw	r16,4(r8)
    a550:	d8801c15 	stw	r2,112(sp)
    a554:	d8c01b15 	stw	r3,108(sp)
    a558:	a0fff20e 	bge	r20,r3,a524 <__alt_data_end+0xfffda524>
    a55c:	1000141e 	bne	r2,zero,a5b0 <___vfiprintf_internal_r+0xde4>
    a560:	8c7ffc04 	addi	r17,r17,-16
    a564:	01400044 	movi	r5,1
    a568:	0009883a 	mov	r4,zero
    a56c:	d811883a 	mov	r8,sp
    a570:	847ff116 	blt	r16,r17,a538 <__alt_data_end+0xfffda538>
    a574:	d8c02317 	ldw	r3,140(sp)
    a578:	1445883a 	add	r2,r2,r17
    a57c:	44400115 	stw	r17,4(r8)
    a580:	40c00015 	stw	r3,0(r8)
    a584:	d8801c15 	stw	r2,112(sp)
    a588:	d9401b15 	stw	r5,108(sp)
    a58c:	00c001c4 	movi	r3,7
    a590:	1940170e 	bge	r3,r5,a5f0 <___vfiprintf_internal_r+0xe24>
    a594:	1000101e 	bne	r2,zero,a5d8 <___vfiprintf_internal_r+0xe0c>
    a598:	d8802517 	ldw	r2,148(sp)
    a59c:	14c11616 	blt	r2,r19,a9f8 <___vfiprintf_internal_r+0x122c>
    a5a0:	d9002417 	ldw	r4,144(sp)
    a5a4:	2089883a 	add	r4,r4,r2
    a5a8:	d9002415 	stw	r4,144(sp)
    a5ac:	003e1806 	br	9e10 <__alt_data_end+0xfffd9e10>
    a5b0:	d9801a04 	addi	r6,sp,104
    a5b4:	b80b883a 	mov	r5,r23
    a5b8:	a809883a 	mov	r4,r21
    a5bc:	00096b80 	call	96b8 <__sprint_r.part.0>
    a5c0:	103fba1e 	bne	r2,zero,a4ac <__alt_data_end+0xfffda4ac>
    a5c4:	d9001b17 	ldw	r4,108(sp)
    a5c8:	d8801c17 	ldw	r2,112(sp)
    a5cc:	d811883a 	mov	r8,sp
    a5d0:	21400044 	addi	r5,r4,1
    a5d4:	003fd606 	br	a530 <__alt_data_end+0xfffda530>
    a5d8:	d9402017 	ldw	r5,128(sp)
    a5dc:	d9002117 	ldw	r4,132(sp)
    a5e0:	d9801a04 	addi	r6,sp,104
    a5e4:	00096b80 	call	96b8 <__sprint_r.part.0>
    a5e8:	103fb01e 	bne	r2,zero,a4ac <__alt_data_end+0xfffda4ac>
    a5ec:	d8801c17 	ldw	r2,112(sp)
    a5f0:	d8c02517 	ldw	r3,148(sp)
    a5f4:	1cc0010e 	bge	r3,r19,a5fc <___vfiprintf_internal_r+0xe30>
    a5f8:	9807883a 	mov	r3,r19
    a5fc:	d9002417 	ldw	r4,144(sp)
    a600:	20c9883a 	add	r4,r4,r3
    a604:	d9002415 	stw	r4,144(sp)
    a608:	103e0126 	beq	r2,zero,9e10 <__alt_data_end+0xfffd9e10>
    a60c:	d9402017 	ldw	r5,128(sp)
    a610:	d9002117 	ldw	r4,132(sp)
    a614:	d9801a04 	addi	r6,sp,104
    a618:	00096b80 	call	96b8 <__sprint_r.part.0>
    a61c:	103dfc26 	beq	r2,zero,9e10 <__alt_data_end+0xfffd9e10>
    a620:	003fa206 	br	a4ac <__alt_data_end+0xfffda4ac>
    a624:	d9402017 	ldw	r5,128(sp)
    a628:	d9002117 	ldw	r4,132(sp)
    a62c:	d9801a04 	addi	r6,sp,104
    a630:	d9c02b15 	stw	r7,172(sp)
    a634:	00096b80 	call	96b8 <__sprint_r.part.0>
    a638:	d9c02b17 	ldw	r7,172(sp)
    a63c:	103f9b1e 	bne	r2,zero,a4ac <__alt_data_end+0xfffda4ac>
    a640:	d9001b17 	ldw	r4,108(sp)
    a644:	d8801c17 	ldw	r2,112(sp)
    a648:	d811883a 	mov	r8,sp
    a64c:	21800044 	addi	r6,r4,1
    a650:	003dbf06 	br	9d50 <__alt_data_end+0xfffd9d50>
    a654:	1000d81e 	bne	r2,zero,a9b8 <___vfiprintf_internal_r+0x11ec>
    a658:	d9001d87 	ldb	r4,118(sp)
    a65c:	20000a26 	beq	r4,zero,a688 <___vfiprintf_internal_r+0xebc>
    a660:	00800044 	movi	r2,1
    a664:	d9001d84 	addi	r4,sp,118
    a668:	100b883a 	mov	r5,r2
    a66c:	d9000015 	stw	r4,0(sp)
    a670:	d8800115 	stw	r2,4(sp)
    a674:	d811883a 	mov	r8,sp
    a678:	2809883a 	mov	r4,r5
    a67c:	42000204 	addi	r8,r8,8
    a680:	29400044 	addi	r5,r5,1
    a684:	003d9506 	br	9cdc <__alt_data_end+0xfffd9cdc>
    a688:	3800fd26 	beq	r7,zero,aa80 <___vfiprintf_internal_r+0x12b4>
    a68c:	00800084 	movi	r2,2
    a690:	d9001d04 	addi	r4,sp,116
    a694:	d9000015 	stw	r4,0(sp)
    a698:	d8800115 	stw	r2,4(sp)
    a69c:	01400044 	movi	r5,1
    a6a0:	d811883a 	mov	r8,sp
    a6a4:	2809883a 	mov	r4,r5
    a6a8:	42000204 	addi	r8,r8,8
    a6ac:	29400044 	addi	r5,r5,1
    a6b0:	003f4606 	br	a3cc <__alt_data_end+0xfffda3cc>
    a6b4:	d8802517 	ldw	r2,148(sp)
    a6b8:	14c0010e 	bge	r2,r19,a6c0 <___vfiprintf_internal_r+0xef4>
    a6bc:	9805883a 	mov	r2,r19
    a6c0:	d9402417 	ldw	r5,144(sp)
    a6c4:	288b883a 	add	r5,r5,r2
    a6c8:	d9402415 	stw	r5,144(sp)
    a6cc:	003dd006 	br	9e10 <__alt_data_end+0xfffd9e10>
    a6d0:	d8001d85 	stb	zero,118(sp)
    a6d4:	80005d16 	blt	r16,zero,a84c <___vfiprintf_internal_r+0x1080>
    a6d8:	00ffdfc4 	movi	r3,-129
    a6dc:	9d04b03a 	or	r2,r19,r20
    a6e0:	88e2703a 	and	r17,r17,r3
    a6e4:	103d3726 	beq	r2,zero,9bc4 <__alt_data_end+0xfffd9bc4>
    a6e8:	002b883a 	mov	r21,zero
    a6ec:	d9002617 	ldw	r4,152(sp)
    a6f0:	ddc01a04 	addi	r23,sp,104
    a6f4:	988003cc 	andi	r2,r19,15
    a6f8:	a006973a 	slli	r3,r20,28
    a6fc:	2085883a 	add	r2,r4,r2
    a700:	9826d13a 	srli	r19,r19,4
    a704:	10800003 	ldbu	r2,0(r2)
    a708:	a028d13a 	srli	r20,r20,4
    a70c:	bdffffc4 	addi	r23,r23,-1
    a710:	1ce6b03a 	or	r19,r3,r19
    a714:	b8800005 	stb	r2,0(r23)
    a718:	9d04b03a 	or	r2,r19,r20
    a71c:	103ff51e 	bne	r2,zero,a6f4 <__alt_data_end+0xfffda6f4>
    a720:	d8801e17 	ldw	r2,120(sp)
    a724:	15e9c83a 	sub	r20,r2,r23
    a728:	003d2b06 	br	9bd8 <__alt_data_end+0xfffd9bd8>
    a72c:	d9402017 	ldw	r5,128(sp)
    a730:	d9002117 	ldw	r4,132(sp)
    a734:	d9801a04 	addi	r6,sp,104
    a738:	00096b80 	call	96b8 <__sprint_r.part.0>
    a73c:	103f5b1e 	bne	r2,zero,a4ac <__alt_data_end+0xfffda4ac>
    a740:	d8801c17 	ldw	r2,112(sp)
    a744:	d811883a 	mov	r8,sp
    a748:	003f6706 	br	a4e8 <__alt_data_end+0xfffda4e8>
    a74c:	d9402017 	ldw	r5,128(sp)
    a750:	d9002117 	ldw	r4,132(sp)
    a754:	d9801a04 	addi	r6,sp,104
    a758:	00096b80 	call	96b8 <__sprint_r.part.0>
    a75c:	103f531e 	bne	r2,zero,a4ac <__alt_data_end+0xfffda4ac>
    a760:	d811883a 	mov	r8,sp
    a764:	003cd906 	br	9acc <__alt_data_end+0xfffd9acc>
    a768:	10803fcc 	andi	r2,r2,255
    a76c:	1080201c 	xori	r2,r2,128
    a770:	10bfe004 	addi	r2,r2,-128
    a774:	00c00c04 	movi	r3,48
    a778:	10ffe926 	beq	r2,r3,a720 <__alt_data_end+0xfffda720>
    a77c:	b8ffffc5 	stb	r3,-1(r23)
    a780:	d8c01e17 	ldw	r3,120(sp)
    a784:	b8bfffc4 	addi	r2,r23,-1
    a788:	102f883a 	mov	r23,r2
    a78c:	18a9c83a 	sub	r20,r3,r2
    a790:	003d1106 	br	9bd8 <__alt_data_end+0xfffd9bd8>
    a794:	d9402017 	ldw	r5,128(sp)
    a798:	d9002117 	ldw	r4,132(sp)
    a79c:	d9801a04 	addi	r6,sp,104
    a7a0:	d8c02a15 	stw	r3,168(sp)
    a7a4:	d9c02b15 	stw	r7,172(sp)
    a7a8:	00096b80 	call	96b8 <__sprint_r.part.0>
    a7ac:	d8c02a17 	ldw	r3,168(sp)
    a7b0:	d9c02b17 	ldw	r7,172(sp)
    a7b4:	103f3d1e 	bne	r2,zero,a4ac <__alt_data_end+0xfffda4ac>
    a7b8:	d9001b17 	ldw	r4,108(sp)
    a7bc:	d8801c17 	ldw	r2,112(sp)
    a7c0:	d811883a 	mov	r8,sp
    a7c4:	21400044 	addi	r5,r4,1
    a7c8:	003d4406 	br	9cdc <__alt_data_end+0xfffd9cdc>
    a7cc:	d9402017 	ldw	r5,128(sp)
    a7d0:	d9002117 	ldw	r4,132(sp)
    a7d4:	d9801a04 	addi	r6,sp,104
    a7d8:	d8c02a15 	stw	r3,168(sp)
    a7dc:	00096b80 	call	96b8 <__sprint_r.part.0>
    a7e0:	d8c02a17 	ldw	r3,168(sp)
    a7e4:	103f311e 	bne	r2,zero,a4ac <__alt_data_end+0xfffda4ac>
    a7e8:	d9001b17 	ldw	r4,108(sp)
    a7ec:	d8801c17 	ldw	r2,112(sp)
    a7f0:	d811883a 	mov	r8,sp
    a7f4:	21400044 	addi	r5,r4,1
    a7f8:	003ef406 	br	a3cc <__alt_data_end+0xfffda3cc>
    a7fc:	1000bd1e 	bne	r2,zero,aaf4 <___vfiprintf_internal_r+0x1328>
    a800:	01400044 	movi	r5,1
    a804:	0009883a 	mov	r4,zero
    a808:	d811883a 	mov	r8,sp
    a80c:	003ef106 	br	a3d4 <__alt_data_end+0xfffda3d4>
    a810:	d9402017 	ldw	r5,128(sp)
    a814:	d9002117 	ldw	r4,132(sp)
    a818:	d9801a04 	addi	r6,sp,104
    a81c:	00096b80 	call	96b8 <__sprint_r.part.0>
    a820:	103f221e 	bne	r2,zero,a4ac <__alt_data_end+0xfffda4ac>
    a824:	d9401b17 	ldw	r5,108(sp)
    a828:	d8801c17 	ldw	r2,112(sp)
    a82c:	d811883a 	mov	r8,sp
    a830:	29400044 	addi	r5,r5,1
    a834:	003d6206 	br	9dc0 <__alt_data_end+0xfffd9dc0>
    a838:	014000b4 	movhi	r5,2
    a83c:	29657d04 	addi	r5,r5,-27148
    a840:	d9402615 	stw	r5,152(sp)
    a844:	d8c02215 	stw	r3,136(sp)
    a848:	1023883a 	mov	r17,r2
    a84c:	9d04b03a 	or	r2,r19,r20
    a850:	103fa51e 	bne	r2,zero,a6e8 <__alt_data_end+0xfffda6e8>
    a854:	002b883a 	mov	r21,zero
    a858:	00800084 	movi	r2,2
    a85c:	003e4a06 	br	a188 <__alt_data_end+0xfffda188>
    a860:	014000b4 	movhi	r5,2
    a864:	29657d04 	addi	r5,r5,-27148
    a868:	002b883a 	mov	r21,zero
    a86c:	d9402615 	stw	r5,152(sp)
    a870:	003f9e06 	br	a6ec <__alt_data_end+0xfffda6ec>
    a874:	d9402217 	ldw	r5,136(sp)
    a878:	d8001d85 	stb	zero,118(sp)
    a87c:	0029883a 	mov	r20,zero
    a880:	28800104 	addi	r2,r5,4
    a884:	2cc00017 	ldw	r19,0(r5)
    a888:	803e3a16 	blt	r16,zero,a174 <__alt_data_end+0xfffda174>
    a88c:	00ffdfc4 	movi	r3,-129
    a890:	d8802215 	stw	r2,136(sp)
    a894:	88e2703a 	and	r17,r17,r3
    a898:	002b883a 	mov	r21,zero
    a89c:	983e9b26 	beq	r19,zero,a30c <__alt_data_end+0xfffda30c>
    a8a0:	00800244 	movi	r2,9
    a8a4:	14fdc936 	bltu	r2,r19,9fcc <__alt_data_end+0xfffd9fcc>
    a8a8:	003e9a06 	br	a314 <__alt_data_end+0xfffda314>
    a8ac:	00800c04 	movi	r2,48
    a8b0:	d8c01d45 	stb	r3,117(sp)
    a8b4:	d8801d05 	stb	r2,116(sp)
    a8b8:	d8001d85 	stb	zero,118(sp)
    a8bc:	88c00094 	ori	r3,r17,2
    a8c0:	80009c16 	blt	r16,zero,ab34 <___vfiprintf_internal_r+0x1368>
    a8c4:	00bfdfc4 	movi	r2,-129
    a8c8:	88a2703a 	and	r17,r17,r2
    a8cc:	8c400094 	ori	r17,r17,2
    a8d0:	002b883a 	mov	r21,zero
    a8d4:	003f8506 	br	a6ec <__alt_data_end+0xfffda6ec>
    a8d8:	b029883a 	mov	r20,r22
    a8dc:	003c0b06 	br	990c <__alt_data_end+0xfffd990c>
    a8e0:	04e7c83a 	sub	r19,zero,r19
    a8e4:	05400b44 	movi	r21,45
    a8e8:	9804c03a 	cmpne	r2,r19,zero
    a8ec:	0529c83a 	sub	r20,zero,r20
    a8f0:	dd401d85 	stb	r21,118(sp)
    a8f4:	a0a9c83a 	sub	r20,r20,r2
    a8f8:	80009716 	blt	r16,zero,ab58 <___vfiprintf_internal_r+0x138c>
    a8fc:	00bfdfc4 	movi	r2,-129
    a900:	88a2703a 	and	r17,r17,r2
    a904:	003db006 	br	9fc8 <__alt_data_end+0xfffd9fc8>
    a908:	b0c00007 	ldb	r3,0(r22)
    a90c:	003c0c06 	br	9940 <__alt_data_end+0xfffd9940>
    a910:	8880100c 	andi	r2,r17,64
    a914:	d8001d85 	stb	zero,118(sp)
    a918:	1000461e 	bne	r2,zero,aa34 <___vfiprintf_internal_r+0x1268>
    a91c:	d9002217 	ldw	r4,136(sp)
    a920:	0029883a 	mov	r20,zero
    a924:	20800104 	addi	r2,r4,4
    a928:	24c00017 	ldw	r19,0(r4)
    a92c:	803df80e 	bge	r16,zero,a110 <__alt_data_end+0xfffda110>
    a930:	9d06b03a 	or	r3,r19,r20
    a934:	d8802215 	stw	r2,136(sp)
    a938:	183d5e1e 	bne	r3,zero,9eb4 <__alt_data_end+0xfffd9eb4>
    a93c:	002b883a 	mov	r21,zero
    a940:	0005883a 	mov	r2,zero
    a944:	003e1006 	br	a188 <__alt_data_end+0xfffda188>
    a948:	8880040c 	andi	r2,r17,16
    a94c:	1000321e 	bne	r2,zero,aa18 <___vfiprintf_internal_r+0x124c>
    a950:	8c40100c 	andi	r17,r17,64
    a954:	88008d26 	beq	r17,zero,ab8c <___vfiprintf_internal_r+0x13c0>
    a958:	d9402217 	ldw	r5,136(sp)
    a95c:	d8c02417 	ldw	r3,144(sp)
    a960:	28800017 	ldw	r2,0(r5)
    a964:	29400104 	addi	r5,r5,4
    a968:	d9402215 	stw	r5,136(sp)
    a96c:	10c0000d 	sth	r3,0(r2)
    a970:	003bca06 	br	989c <__alt_data_end+0xfffd989c>
    a974:	8880100c 	andi	r2,r17,64
    a978:	10003a26 	beq	r2,zero,aa64 <___vfiprintf_internal_r+0x1298>
    a97c:	d8802217 	ldw	r2,136(sp)
    a980:	14c0000f 	ldh	r19,0(r2)
    a984:	10800104 	addi	r2,r2,4
    a988:	d8802215 	stw	r2,136(sp)
    a98c:	9829d7fa 	srai	r20,r19,31
    a990:	a005883a 	mov	r2,r20
    a994:	003d8506 	br	9fac <__alt_data_end+0xfffd9fac>
    a998:	8880100c 	andi	r2,r17,64
    a99c:	10002b26 	beq	r2,zero,aa4c <___vfiprintf_internal_r+0x1280>
    a9a0:	d8802217 	ldw	r2,136(sp)
    a9a4:	0029883a 	mov	r20,zero
    a9a8:	14c0000b 	ldhu	r19,0(r2)
    a9ac:	10800104 	addi	r2,r2,4
    a9b0:	d8802215 	stw	r2,136(sp)
    a9b4:	003d5d06 	br	9f2c <__alt_data_end+0xfffd9f2c>
    a9b8:	d9402017 	ldw	r5,128(sp)
    a9bc:	d9002117 	ldw	r4,132(sp)
    a9c0:	d9801a04 	addi	r6,sp,104
    a9c4:	d8c02a15 	stw	r3,168(sp)
    a9c8:	d9c02b15 	stw	r7,172(sp)
    a9cc:	00096b80 	call	96b8 <__sprint_r.part.0>
    a9d0:	d8c02a17 	ldw	r3,168(sp)
    a9d4:	d9c02b17 	ldw	r7,172(sp)
    a9d8:	103eb41e 	bne	r2,zero,a4ac <__alt_data_end+0xfffda4ac>
    a9dc:	d9001b17 	ldw	r4,108(sp)
    a9e0:	d8801c17 	ldw	r2,112(sp)
    a9e4:	d811883a 	mov	r8,sp
    a9e8:	21400044 	addi	r5,r4,1
    a9ec:	003e6706 	br	a38c <__alt_data_end+0xfffda38c>
    a9f0:	00bfffc4 	movi	r2,-1
    a9f4:	003c4a06 	br	9b20 <__alt_data_end+0xfffd9b20>
    a9f8:	9805883a 	mov	r2,r19
    a9fc:	003ee806 	br	a5a0 <__alt_data_end+0xfffda5a0>
    aa00:	d8c02217 	ldw	r3,136(sp)
    aa04:	0029883a 	mov	r20,zero
    aa08:	18800104 	addi	r2,r3,4
    aa0c:	1cc0000b 	ldhu	r19,0(r3)
    aa10:	803f9e0e 	bge	r16,zero,a88c <__alt_data_end+0xfffda88c>
    aa14:	003dd706 	br	a174 <__alt_data_end+0xfffda174>
    aa18:	d8c02217 	ldw	r3,136(sp)
    aa1c:	d9002417 	ldw	r4,144(sp)
    aa20:	18800017 	ldw	r2,0(r3)
    aa24:	18c00104 	addi	r3,r3,4
    aa28:	d8c02215 	stw	r3,136(sp)
    aa2c:	11000015 	stw	r4,0(r2)
    aa30:	003b9a06 	br	989c <__alt_data_end+0xfffd989c>
    aa34:	d8c02217 	ldw	r3,136(sp)
    aa38:	0029883a 	mov	r20,zero
    aa3c:	18800104 	addi	r2,r3,4
    aa40:	1cc0000b 	ldhu	r19,0(r3)
    aa44:	803db20e 	bge	r16,zero,a110 <__alt_data_end+0xfffda110>
    aa48:	003fb906 	br	a930 <__alt_data_end+0xfffda930>
    aa4c:	d9002217 	ldw	r4,136(sp)
    aa50:	0029883a 	mov	r20,zero
    aa54:	24c00017 	ldw	r19,0(r4)
    aa58:	21000104 	addi	r4,r4,4
    aa5c:	d9002215 	stw	r4,136(sp)
    aa60:	003d3206 	br	9f2c <__alt_data_end+0xfffd9f2c>
    aa64:	d8c02217 	ldw	r3,136(sp)
    aa68:	1cc00017 	ldw	r19,0(r3)
    aa6c:	18c00104 	addi	r3,r3,4
    aa70:	d8c02215 	stw	r3,136(sp)
    aa74:	9829d7fa 	srai	r20,r19,31
    aa78:	a005883a 	mov	r2,r20
    aa7c:	003d4b06 	br	9fac <__alt_data_end+0xfffd9fac>
    aa80:	0009883a 	mov	r4,zero
    aa84:	01400044 	movi	r5,1
    aa88:	d811883a 	mov	r8,sp
    aa8c:	003e4f06 	br	a3cc <__alt_data_end+0xfffda3cc>
    aa90:	d8c02215 	stw	r3,136(sp)
    aa94:	002b883a 	mov	r21,zero
    aa98:	003db806 	br	a17c <__alt_data_end+0xfffda17c>
    aa9c:	d811883a 	mov	r8,sp
    aaa0:	003e9606 	br	a4fc <__alt_data_end+0xfffda4fc>
    aaa4:	010000b4 	movhi	r4,2
    aaa8:	2125dd04 	addi	r4,r4,-26764
    aaac:	d9002315 	stw	r4,140(sp)
    aab0:	003e6306 	br	a440 <__alt_data_end+0xfffda440>
    aab4:	b0c00043 	ldbu	r3,1(r22)
    aab8:	8c400814 	ori	r17,r17,32
    aabc:	b5800044 	addi	r22,r22,1
    aac0:	18c03fcc 	andi	r3,r3,255
    aac4:	18c0201c 	xori	r3,r3,128
    aac8:	18ffe004 	addi	r3,r3,-128
    aacc:	003b9c06 	br	9940 <__alt_data_end+0xfffd9940>
    aad0:	b809883a 	mov	r4,r23
    aad4:	da002a15 	stw	r8,168(sp)
    aad8:	000124c0 	call	124c <strlen>
    aadc:	1029883a 	mov	r20,r2
    aae0:	dd401d83 	ldbu	r21,118(sp)
    aae4:	df002215 	stw	fp,136(sp)
    aae8:	0021883a 	mov	r16,zero
    aaec:	da002a17 	ldw	r8,168(sp)
    aaf0:	003c3906 	br	9bd8 <__alt_data_end+0xfffd9bd8>
    aaf4:	d9402017 	ldw	r5,128(sp)
    aaf8:	d9002117 	ldw	r4,132(sp)
    aafc:	d9801a04 	addi	r6,sp,104
    ab00:	00096b80 	call	96b8 <__sprint_r.part.0>
    ab04:	103e691e 	bne	r2,zero,a4ac <__alt_data_end+0xfffda4ac>
    ab08:	d9001b17 	ldw	r4,108(sp)
    ab0c:	d8801c17 	ldw	r2,112(sp)
    ab10:	d811883a 	mov	r8,sp
    ab14:	21400044 	addi	r5,r4,1
    ab18:	003e2e06 	br	a3d4 <__alt_data_end+0xfffda3d4>
    ab1c:	010000b4 	movhi	r4,2
    ab20:	2125e104 	addi	r4,r4,-26748
    ab24:	d9002315 	stw	r4,140(sp)
    ab28:	d9001b17 	ldw	r4,108(sp)
    ab2c:	21000044 	addi	r4,r4,1
    ab30:	003c5e06 	br	9cac <__alt_data_end+0xfffd9cac>
    ab34:	002b883a 	mov	r21,zero
    ab38:	00800084 	movi	r2,2
    ab3c:	10803fcc 	andi	r2,r2,255
    ab40:	01000044 	movi	r4,1
    ab44:	11002b26 	beq	r2,r4,abf4 <___vfiprintf_internal_r+0x1428>
    ab48:	01000084 	movi	r4,2
    ab4c:	11002b1e 	bne	r2,r4,abfc <___vfiprintf_internal_r+0x1430>
    ab50:	1823883a 	mov	r17,r3
    ab54:	003ee506 	br	a6ec <__alt_data_end+0xfffda6ec>
    ab58:	8807883a 	mov	r3,r17
    ab5c:	00800044 	movi	r2,1
    ab60:	003ff606 	br	ab3c <__alt_data_end+0xfffdab3c>
    ab64:	00800184 	movi	r2,6
    ab68:	1400012e 	bgeu	r2,r16,ab70 <___vfiprintf_internal_r+0x13a4>
    ab6c:	1021883a 	mov	r16,r2
    ab70:	8029883a 	mov	r20,r16
    ab74:	8027883a 	mov	r19,r16
    ab78:	80002216 	blt	r16,zero,ac04 <___vfiprintf_internal_r+0x1438>
    ab7c:	05c000b4 	movhi	r23,2
    ab80:	df002215 	stw	fp,136(sp)
    ab84:	bde58204 	addi	r23,r23,-27128
    ab88:	003cfb06 	br	9f78 <__alt_data_end+0xfffd9f78>
    ab8c:	d9002217 	ldw	r4,136(sp)
    ab90:	d9402417 	ldw	r5,144(sp)
    ab94:	20800017 	ldw	r2,0(r4)
    ab98:	21000104 	addi	r4,r4,4
    ab9c:	d9002215 	stw	r4,136(sp)
    aba0:	11400015 	stw	r5,0(r2)
    aba4:	003b3d06 	br	989c <__alt_data_end+0xfffd989c>
    aba8:	014000b4 	movhi	r5,2
    abac:	2965e104 	addi	r5,r5,-26748
    abb0:	d9402315 	stw	r5,140(sp)
    abb4:	d9401b17 	ldw	r5,108(sp)
    abb8:	29400044 	addi	r5,r5,1
    abbc:	003e6d06 	br	a574 <__alt_data_end+0xfffda574>
    abc0:	8029883a 	mov	r20,r16
    abc4:	dd401d83 	ldbu	r21,118(sp)
    abc8:	df002215 	stw	fp,136(sp)
    abcc:	0021883a 	mov	r16,zero
    abd0:	003c0106 	br	9bd8 <__alt_data_end+0xfffd9bd8>
    abd4:	00c000b4 	movhi	r3,2
    abd8:	18e5dd04 	addi	r3,r3,-26764
    abdc:	d8c02315 	stw	r3,140(sp)
    abe0:	280d883a 	mov	r6,r5
    abe4:	003c6906 	br	9d8c <__alt_data_end+0xfffd9d8c>
    abe8:	802d883a 	mov	r22,r16
    abec:	0021883a 	mov	r16,zero
    abf0:	003b5406 	br	9944 <__alt_data_end+0xfffd9944>
    abf4:	1823883a 	mov	r17,r3
    abf8:	003cf306 	br	9fc8 <__alt_data_end+0xfffd9fc8>
    abfc:	1823883a 	mov	r17,r3
    ac00:	003cad06 	br	9eb8 <__alt_data_end+0xfffd9eb8>
    ac04:	0027883a 	mov	r19,zero
    ac08:	003fdc06 	br	ab7c <__alt_data_end+0xfffdab7c>
    ac0c:	d9402217 	ldw	r5,136(sp)
    ac10:	8005883a 	mov	r2,r16
    ac14:	b0c00043 	ldbu	r3,1(r22)
    ac18:	2c000017 	ldw	r16,0(r5)
    ac1c:	29000104 	addi	r4,r5,4
    ac20:	d9002215 	stw	r4,136(sp)
    ac24:	102d883a 	mov	r22,r2
    ac28:	803fa50e 	bge	r16,zero,aac0 <__alt_data_end+0xfffdaac0>
    ac2c:	18c03fcc 	andi	r3,r3,255
    ac30:	18c0201c 	xori	r3,r3,128
    ac34:	043fffc4 	movi	r16,-1
    ac38:	18ffe004 	addi	r3,r3,-128
    ac3c:	003b4006 	br	9940 <__alt_data_end+0xfffd9940>
    ac40:	d9402303 	ldbu	r5,140(sp)
    ac44:	d9401d85 	stb	r5,118(sp)
    ac48:	003cae06 	br	9f04 <__alt_data_end+0xfffd9f04>
    ac4c:	d8c02303 	ldbu	r3,140(sp)
    ac50:	d8c01d85 	stb	r3,118(sp)
    ac54:	003d1406 	br	a0a8 <__alt_data_end+0xfffda0a8>
    ac58:	d8c02303 	ldbu	r3,140(sp)
    ac5c:	d8c01d85 	stb	r3,118(sp)
    ac60:	003cca06 	br	9f8c <__alt_data_end+0xfffd9f8c>
    ac64:	8880004c 	andi	r2,r17,1
    ac68:	002b883a 	mov	r21,zero
    ac6c:	10000526 	beq	r2,zero,ac84 <___vfiprintf_internal_r+0x14b8>
    ac70:	00800c04 	movi	r2,48
    ac74:	d88019c5 	stb	r2,103(sp)
    ac78:	dd002817 	ldw	r20,160(sp)
    ac7c:	ddc019c4 	addi	r23,sp,103
    ac80:	003bd506 	br	9bd8 <__alt_data_end+0xfffd9bd8>
    ac84:	0029883a 	mov	r20,zero
    ac88:	ddc01a04 	addi	r23,sp,104
    ac8c:	003bd206 	br	9bd8 <__alt_data_end+0xfffd9bd8>
    ac90:	d9002303 	ldbu	r4,140(sp)
    ac94:	d9001d85 	stb	r4,118(sp)
    ac98:	003da606 	br	a334 <__alt_data_end+0xfffda334>
    ac9c:	d8c02303 	ldbu	r3,140(sp)
    aca0:	d8c01d85 	stb	r3,118(sp)
    aca4:	003c7606 	br	9e80 <__alt_data_end+0xfffd9e80>
    aca8:	d8c02303 	ldbu	r3,140(sp)
    acac:	d8c01d85 	stb	r3,118(sp)
    acb0:	003c6506 	br	9e48 <__alt_data_end+0xfffd9e48>
    acb4:	d9002303 	ldbu	r4,140(sp)
    acb8:	d9001d85 	stb	r4,118(sp)
    acbc:	003d3d06 	br	a1b4 <__alt_data_end+0xfffda1b4>
    acc0:	d8c02303 	ldbu	r3,140(sp)
    acc4:	d8c01d85 	stb	r3,118(sp)
    acc8:	003d1d06 	br	a140 <__alt_data_end+0xfffda140>
    accc:	d8c02303 	ldbu	r3,140(sp)
    acd0:	d8c01d85 	stb	r3,118(sp)
    acd4:	003d0306 	br	a0e4 <__alt_data_end+0xfffda0e4>

0000acd8 <__vfiprintf_internal>:
    acd8:	008000b4 	movhi	r2,2
    acdc:	10ad2904 	addi	r2,r2,-19292
    ace0:	300f883a 	mov	r7,r6
    ace4:	280d883a 	mov	r6,r5
    ace8:	200b883a 	mov	r5,r4
    acec:	11000017 	ldw	r4,0(r2)
    acf0:	00097cc1 	jmpi	97cc <___vfiprintf_internal_r>

0000acf4 <__sbprintf>:
    acf4:	2880030b 	ldhu	r2,12(r5)
    acf8:	2ac01917 	ldw	r11,100(r5)
    acfc:	2a80038b 	ldhu	r10,14(r5)
    ad00:	2a400717 	ldw	r9,28(r5)
    ad04:	2a000917 	ldw	r8,36(r5)
    ad08:	defee204 	addi	sp,sp,-1144
    ad0c:	00c10004 	movi	r3,1024
    ad10:	dc011a15 	stw	r16,1128(sp)
    ad14:	10bfff4c 	andi	r2,r2,65533
    ad18:	2821883a 	mov	r16,r5
    ad1c:	d8cb883a 	add	r5,sp,r3
    ad20:	dc811c15 	stw	r18,1136(sp)
    ad24:	dc411b15 	stw	r17,1132(sp)
    ad28:	dfc11d15 	stw	ra,1140(sp)
    ad2c:	2025883a 	mov	r18,r4
    ad30:	d881030d 	sth	r2,1036(sp)
    ad34:	dac11915 	stw	r11,1124(sp)
    ad38:	da81038d 	sth	r10,1038(sp)
    ad3c:	da410715 	stw	r9,1052(sp)
    ad40:	da010915 	stw	r8,1060(sp)
    ad44:	dec10015 	stw	sp,1024(sp)
    ad48:	dec10415 	stw	sp,1040(sp)
    ad4c:	d8c10215 	stw	r3,1032(sp)
    ad50:	d8c10515 	stw	r3,1044(sp)
    ad54:	d8010615 	stw	zero,1048(sp)
    ad58:	00097cc0 	call	97cc <___vfiprintf_internal_r>
    ad5c:	1023883a 	mov	r17,r2
    ad60:	10000416 	blt	r2,zero,ad74 <__sbprintf+0x80>
    ad64:	d9410004 	addi	r5,sp,1024
    ad68:	9009883a 	mov	r4,r18
    ad6c:	0005bd80 	call	5bd8 <_fflush_r>
    ad70:	10000d1e 	bne	r2,zero,ada8 <__sbprintf+0xb4>
    ad74:	d881030b 	ldhu	r2,1036(sp)
    ad78:	1080100c 	andi	r2,r2,64
    ad7c:	10000326 	beq	r2,zero,ad8c <__sbprintf+0x98>
    ad80:	8080030b 	ldhu	r2,12(r16)
    ad84:	10801014 	ori	r2,r2,64
    ad88:	8080030d 	sth	r2,12(r16)
    ad8c:	8805883a 	mov	r2,r17
    ad90:	dfc11d17 	ldw	ra,1140(sp)
    ad94:	dc811c17 	ldw	r18,1136(sp)
    ad98:	dc411b17 	ldw	r17,1132(sp)
    ad9c:	dc011a17 	ldw	r16,1128(sp)
    ada0:	dec11e04 	addi	sp,sp,1144
    ada4:	f800283a 	ret
    ada8:	047fffc4 	movi	r17,-1
    adac:	003ff106 	br	ad74 <__alt_data_end+0xfffdad74>

0000adb0 <_write_r>:
    adb0:	defffd04 	addi	sp,sp,-12
    adb4:	2805883a 	mov	r2,r5
    adb8:	dc000015 	stw	r16,0(sp)
    adbc:	040000b4 	movhi	r16,2
    adc0:	dc400115 	stw	r17,4(sp)
    adc4:	300b883a 	mov	r5,r6
    adc8:	84344104 	addi	r16,r16,-12028
    adcc:	2023883a 	mov	r17,r4
    add0:	380d883a 	mov	r6,r7
    add4:	1009883a 	mov	r4,r2
    add8:	dfc00215 	stw	ra,8(sp)
    addc:	80000015 	stw	zero,0(r16)
    ade0:	000f7c00 	call	f7c0 <write>
    ade4:	00ffffc4 	movi	r3,-1
    ade8:	10c00526 	beq	r2,r3,ae00 <_write_r+0x50>
    adec:	dfc00217 	ldw	ra,8(sp)
    adf0:	dc400117 	ldw	r17,4(sp)
    adf4:	dc000017 	ldw	r16,0(sp)
    adf8:	dec00304 	addi	sp,sp,12
    adfc:	f800283a 	ret
    ae00:	80c00017 	ldw	r3,0(r16)
    ae04:	183ff926 	beq	r3,zero,adec <__alt_data_end+0xfffdadec>
    ae08:	88c00015 	stw	r3,0(r17)
    ae0c:	003ff706 	br	adec <__alt_data_end+0xfffdadec>

0000ae10 <_close_r>:
    ae10:	defffd04 	addi	sp,sp,-12
    ae14:	dc000015 	stw	r16,0(sp)
    ae18:	040000b4 	movhi	r16,2
    ae1c:	dc400115 	stw	r17,4(sp)
    ae20:	84344104 	addi	r16,r16,-12028
    ae24:	2023883a 	mov	r17,r4
    ae28:	2809883a 	mov	r4,r5
    ae2c:	dfc00215 	stw	ra,8(sp)
    ae30:	80000015 	stw	zero,0(r16)
    ae34:	000ecd00 	call	ecd0 <close>
    ae38:	00ffffc4 	movi	r3,-1
    ae3c:	10c00526 	beq	r2,r3,ae54 <_close_r+0x44>
    ae40:	dfc00217 	ldw	ra,8(sp)
    ae44:	dc400117 	ldw	r17,4(sp)
    ae48:	dc000017 	ldw	r16,0(sp)
    ae4c:	dec00304 	addi	sp,sp,12
    ae50:	f800283a 	ret
    ae54:	80c00017 	ldw	r3,0(r16)
    ae58:	183ff926 	beq	r3,zero,ae40 <__alt_data_end+0xfffdae40>
    ae5c:	88c00015 	stw	r3,0(r17)
    ae60:	003ff706 	br	ae40 <__alt_data_end+0xfffdae40>

0000ae64 <_calloc_r>:
    ae64:	defffe04 	addi	sp,sp,-8
    ae68:	2805883a 	mov	r2,r5
    ae6c:	dc000015 	stw	r16,0(sp)
    ae70:	300b883a 	mov	r5,r6
    ae74:	2021883a 	mov	r16,r4
    ae78:	1009883a 	mov	r4,r2
    ae7c:	dfc00115 	stw	ra,4(sp)
    ae80:	000c3c80 	call	c3c8 <__mulsi3>
    ae84:	100b883a 	mov	r5,r2
    ae88:	8009883a 	mov	r4,r16
    ae8c:	0006d300 	call	6d30 <_malloc_r>
    ae90:	10002926 	beq	r2,zero,af38 <_calloc_r+0xd4>
    ae94:	11bfff17 	ldw	r6,-4(r2)
    ae98:	1021883a 	mov	r16,r2
    ae9c:	00bfff04 	movi	r2,-4
    aea0:	308c703a 	and	r6,r6,r2
    aea4:	00c00904 	movi	r3,36
    aea8:	308d883a 	add	r6,r6,r2
    aeac:	19801636 	bltu	r3,r6,af08 <_calloc_r+0xa4>
    aeb0:	008004c4 	movi	r2,19
    aeb4:	11800b2e 	bgeu	r2,r6,aee4 <_calloc_r+0x80>
    aeb8:	80000015 	stw	zero,0(r16)
    aebc:	80000115 	stw	zero,4(r16)
    aec0:	008006c4 	movi	r2,27
    aec4:	11801a2e 	bgeu	r2,r6,af30 <_calloc_r+0xcc>
    aec8:	80000215 	stw	zero,8(r16)
    aecc:	80000315 	stw	zero,12(r16)
    aed0:	30c0151e 	bne	r6,r3,af28 <_calloc_r+0xc4>
    aed4:	80000415 	stw	zero,16(r16)
    aed8:	80800604 	addi	r2,r16,24
    aedc:	80000515 	stw	zero,20(r16)
    aee0:	00000106 	br	aee8 <_calloc_r+0x84>
    aee4:	8005883a 	mov	r2,r16
    aee8:	10000015 	stw	zero,0(r2)
    aeec:	10000115 	stw	zero,4(r2)
    aef0:	10000215 	stw	zero,8(r2)
    aef4:	8005883a 	mov	r2,r16
    aef8:	dfc00117 	ldw	ra,4(sp)
    aefc:	dc000017 	ldw	r16,0(sp)
    af00:	dec00204 	addi	sp,sp,8
    af04:	f800283a 	ret
    af08:	000b883a 	mov	r5,zero
    af0c:	8009883a 	mov	r4,r16
    af10:	00079400 	call	7940 <memset>
    af14:	8005883a 	mov	r2,r16
    af18:	dfc00117 	ldw	ra,4(sp)
    af1c:	dc000017 	ldw	r16,0(sp)
    af20:	dec00204 	addi	sp,sp,8
    af24:	f800283a 	ret
    af28:	80800404 	addi	r2,r16,16
    af2c:	003fee06 	br	aee8 <__alt_data_end+0xfffdaee8>
    af30:	80800204 	addi	r2,r16,8
    af34:	003fec06 	br	aee8 <__alt_data_end+0xfffdaee8>
    af38:	0005883a 	mov	r2,zero
    af3c:	003fee06 	br	aef8 <__alt_data_end+0xfffdaef8>

0000af40 <_fclose_r>:
    af40:	28003926 	beq	r5,zero,b028 <_fclose_r+0xe8>
    af44:	defffc04 	addi	sp,sp,-16
    af48:	dc400115 	stw	r17,4(sp)
    af4c:	dc000015 	stw	r16,0(sp)
    af50:	dfc00315 	stw	ra,12(sp)
    af54:	dc800215 	stw	r18,8(sp)
    af58:	2023883a 	mov	r17,r4
    af5c:	2821883a 	mov	r16,r5
    af60:	20000226 	beq	r4,zero,af6c <_fclose_r+0x2c>
    af64:	20800e17 	ldw	r2,56(r4)
    af68:	10002726 	beq	r2,zero,b008 <_fclose_r+0xc8>
    af6c:	8080030f 	ldh	r2,12(r16)
    af70:	1000071e 	bne	r2,zero,af90 <_fclose_r+0x50>
    af74:	0005883a 	mov	r2,zero
    af78:	dfc00317 	ldw	ra,12(sp)
    af7c:	dc800217 	ldw	r18,8(sp)
    af80:	dc400117 	ldw	r17,4(sp)
    af84:	dc000017 	ldw	r16,0(sp)
    af88:	dec00404 	addi	sp,sp,16
    af8c:	f800283a 	ret
    af90:	800b883a 	mov	r5,r16
    af94:	8809883a 	mov	r4,r17
    af98:	00059bc0 	call	59bc <__sflush_r>
    af9c:	1025883a 	mov	r18,r2
    afa0:	80800b17 	ldw	r2,44(r16)
    afa4:	10000426 	beq	r2,zero,afb8 <_fclose_r+0x78>
    afa8:	81400717 	ldw	r5,28(r16)
    afac:	8809883a 	mov	r4,r17
    afb0:	103ee83a 	callr	r2
    afb4:	10001616 	blt	r2,zero,b010 <_fclose_r+0xd0>
    afb8:	8080030b 	ldhu	r2,12(r16)
    afbc:	1080200c 	andi	r2,r2,128
    afc0:	1000151e 	bne	r2,zero,b018 <_fclose_r+0xd8>
    afc4:	81400c17 	ldw	r5,48(r16)
    afc8:	28000526 	beq	r5,zero,afe0 <_fclose_r+0xa0>
    afcc:	80801004 	addi	r2,r16,64
    afd0:	28800226 	beq	r5,r2,afdc <_fclose_r+0x9c>
    afd4:	8809883a 	mov	r4,r17
    afd8:	00061380 	call	6138 <_free_r>
    afdc:	80000c15 	stw	zero,48(r16)
    afe0:	81401117 	ldw	r5,68(r16)
    afe4:	28000326 	beq	r5,zero,aff4 <_fclose_r+0xb4>
    afe8:	8809883a 	mov	r4,r17
    afec:	00061380 	call	6138 <_free_r>
    aff0:	80001115 	stw	zero,68(r16)
    aff4:	0005fd40 	call	5fd4 <__sfp_lock_acquire>
    aff8:	8000030d 	sth	zero,12(r16)
    affc:	0005fd80 	call	5fd8 <__sfp_lock_release>
    b000:	9005883a 	mov	r2,r18
    b004:	003fdc06 	br	af78 <__alt_data_end+0xfffdaf78>
    b008:	0005fc40 	call	5fc4 <__sinit>
    b00c:	003fd706 	br	af6c <__alt_data_end+0xfffdaf6c>
    b010:	04bfffc4 	movi	r18,-1
    b014:	003fe806 	br	afb8 <__alt_data_end+0xfffdafb8>
    b018:	81400417 	ldw	r5,16(r16)
    b01c:	8809883a 	mov	r4,r17
    b020:	00061380 	call	6138 <_free_r>
    b024:	003fe706 	br	afc4 <__alt_data_end+0xfffdafc4>
    b028:	0005883a 	mov	r2,zero
    b02c:	f800283a 	ret

0000b030 <fclose>:
    b030:	008000b4 	movhi	r2,2
    b034:	10ad2904 	addi	r2,r2,-19292
    b038:	200b883a 	mov	r5,r4
    b03c:	11000017 	ldw	r4,0(r2)
    b040:	000af401 	jmpi	af40 <_fclose_r>

0000b044 <__fputwc>:
    b044:	defff804 	addi	sp,sp,-32
    b048:	dcc00415 	stw	r19,16(sp)
    b04c:	dc800315 	stw	r18,12(sp)
    b050:	dc000115 	stw	r16,4(sp)
    b054:	dfc00715 	stw	ra,28(sp)
    b058:	dd400615 	stw	r21,24(sp)
    b05c:	dd000515 	stw	r20,20(sp)
    b060:	dc400215 	stw	r17,8(sp)
    b064:	2027883a 	mov	r19,r4
    b068:	2825883a 	mov	r18,r5
    b06c:	3021883a 	mov	r16,r6
    b070:	0006b200 	call	6b20 <__locale_mb_cur_max>
    b074:	00c00044 	movi	r3,1
    b078:	10c03e26 	beq	r2,r3,b174 <__fputwc+0x130>
    b07c:	81c01704 	addi	r7,r16,92
    b080:	900d883a 	mov	r6,r18
    b084:	d80b883a 	mov	r5,sp
    b088:	9809883a 	mov	r4,r19
    b08c:	000b5140 	call	b514 <_wcrtomb_r>
    b090:	1029883a 	mov	r20,r2
    b094:	00bfffc4 	movi	r2,-1
    b098:	a0802026 	beq	r20,r2,b11c <__fputwc+0xd8>
    b09c:	d9400003 	ldbu	r5,0(sp)
    b0a0:	a0001c26 	beq	r20,zero,b114 <__fputwc+0xd0>
    b0a4:	0023883a 	mov	r17,zero
    b0a8:	05400284 	movi	r21,10
    b0ac:	00000906 	br	b0d4 <__fputwc+0x90>
    b0b0:	80800017 	ldw	r2,0(r16)
    b0b4:	11400005 	stb	r5,0(r2)
    b0b8:	80c00017 	ldw	r3,0(r16)
    b0bc:	18c00044 	addi	r3,r3,1
    b0c0:	80c00015 	stw	r3,0(r16)
    b0c4:	8c400044 	addi	r17,r17,1
    b0c8:	dc45883a 	add	r2,sp,r17
    b0cc:	8d00112e 	bgeu	r17,r20,b114 <__fputwc+0xd0>
    b0d0:	11400003 	ldbu	r5,0(r2)
    b0d4:	80c00217 	ldw	r3,8(r16)
    b0d8:	18ffffc4 	addi	r3,r3,-1
    b0dc:	80c00215 	stw	r3,8(r16)
    b0e0:	183ff30e 	bge	r3,zero,b0b0 <__alt_data_end+0xfffdb0b0>
    b0e4:	80800617 	ldw	r2,24(r16)
    b0e8:	18801916 	blt	r3,r2,b150 <__fputwc+0x10c>
    b0ec:	80800017 	ldw	r2,0(r16)
    b0f0:	11400005 	stb	r5,0(r2)
    b0f4:	80800017 	ldw	r2,0(r16)
    b0f8:	10c00003 	ldbu	r3,0(r2)
    b0fc:	10800044 	addi	r2,r2,1
    b100:	1d402326 	beq	r3,r21,b190 <__fputwc+0x14c>
    b104:	80800015 	stw	r2,0(r16)
    b108:	8c400044 	addi	r17,r17,1
    b10c:	dc45883a 	add	r2,sp,r17
    b110:	8d3fef36 	bltu	r17,r20,b0d0 <__alt_data_end+0xfffdb0d0>
    b114:	9005883a 	mov	r2,r18
    b118:	00000406 	br	b12c <__fputwc+0xe8>
    b11c:	80c0030b 	ldhu	r3,12(r16)
    b120:	a005883a 	mov	r2,r20
    b124:	18c01014 	ori	r3,r3,64
    b128:	80c0030d 	sth	r3,12(r16)
    b12c:	dfc00717 	ldw	ra,28(sp)
    b130:	dd400617 	ldw	r21,24(sp)
    b134:	dd000517 	ldw	r20,20(sp)
    b138:	dcc00417 	ldw	r19,16(sp)
    b13c:	dc800317 	ldw	r18,12(sp)
    b140:	dc400217 	ldw	r17,8(sp)
    b144:	dc000117 	ldw	r16,4(sp)
    b148:	dec00804 	addi	sp,sp,32
    b14c:	f800283a 	ret
    b150:	800d883a 	mov	r6,r16
    b154:	29403fcc 	andi	r5,r5,255
    b158:	9809883a 	mov	r4,r19
    b15c:	000b3bc0 	call	b3bc <__swbuf_r>
    b160:	10bfffe0 	cmpeqi	r2,r2,-1
    b164:	10803fcc 	andi	r2,r2,255
    b168:	103fd626 	beq	r2,zero,b0c4 <__alt_data_end+0xfffdb0c4>
    b16c:	00bfffc4 	movi	r2,-1
    b170:	003fee06 	br	b12c <__alt_data_end+0xfffdb12c>
    b174:	90ffffc4 	addi	r3,r18,-1
    b178:	01003f84 	movi	r4,254
    b17c:	20ffbf36 	bltu	r4,r3,b07c <__alt_data_end+0xfffdb07c>
    b180:	900b883a 	mov	r5,r18
    b184:	dc800005 	stb	r18,0(sp)
    b188:	1029883a 	mov	r20,r2
    b18c:	003fc506 	br	b0a4 <__alt_data_end+0xfffdb0a4>
    b190:	800d883a 	mov	r6,r16
    b194:	a80b883a 	mov	r5,r21
    b198:	9809883a 	mov	r4,r19
    b19c:	000b3bc0 	call	b3bc <__swbuf_r>
    b1a0:	10bfffe0 	cmpeqi	r2,r2,-1
    b1a4:	003fef06 	br	b164 <__alt_data_end+0xfffdb164>

0000b1a8 <_fputwc_r>:
    b1a8:	3080030b 	ldhu	r2,12(r6)
    b1ac:	10c8000c 	andi	r3,r2,8192
    b1b0:	1800051e 	bne	r3,zero,b1c8 <_fputwc_r+0x20>
    b1b4:	30c01917 	ldw	r3,100(r6)
    b1b8:	10880014 	ori	r2,r2,8192
    b1bc:	3080030d 	sth	r2,12(r6)
    b1c0:	18880014 	ori	r2,r3,8192
    b1c4:	30801915 	stw	r2,100(r6)
    b1c8:	000b0441 	jmpi	b044 <__fputwc>

0000b1cc <fputwc>:
    b1cc:	008000b4 	movhi	r2,2
    b1d0:	defffc04 	addi	sp,sp,-16
    b1d4:	10ad2904 	addi	r2,r2,-19292
    b1d8:	dc000115 	stw	r16,4(sp)
    b1dc:	14000017 	ldw	r16,0(r2)
    b1e0:	dc400215 	stw	r17,8(sp)
    b1e4:	dfc00315 	stw	ra,12(sp)
    b1e8:	2023883a 	mov	r17,r4
    b1ec:	80000226 	beq	r16,zero,b1f8 <fputwc+0x2c>
    b1f0:	80800e17 	ldw	r2,56(r16)
    b1f4:	10001026 	beq	r2,zero,b238 <fputwc+0x6c>
    b1f8:	2880030b 	ldhu	r2,12(r5)
    b1fc:	10c8000c 	andi	r3,r2,8192
    b200:	1800051e 	bne	r3,zero,b218 <fputwc+0x4c>
    b204:	28c01917 	ldw	r3,100(r5)
    b208:	10880014 	ori	r2,r2,8192
    b20c:	2880030d 	sth	r2,12(r5)
    b210:	18880014 	ori	r2,r3,8192
    b214:	28801915 	stw	r2,100(r5)
    b218:	280d883a 	mov	r6,r5
    b21c:	8009883a 	mov	r4,r16
    b220:	880b883a 	mov	r5,r17
    b224:	dfc00317 	ldw	ra,12(sp)
    b228:	dc400217 	ldw	r17,8(sp)
    b22c:	dc000117 	ldw	r16,4(sp)
    b230:	dec00404 	addi	sp,sp,16
    b234:	000b0441 	jmpi	b044 <__fputwc>
    b238:	8009883a 	mov	r4,r16
    b23c:	d9400015 	stw	r5,0(sp)
    b240:	0005fc40 	call	5fc4 <__sinit>
    b244:	d9400017 	ldw	r5,0(sp)
    b248:	003feb06 	br	b1f8 <__alt_data_end+0xfffdb1f8>

0000b24c <_fstat_r>:
    b24c:	defffd04 	addi	sp,sp,-12
    b250:	2805883a 	mov	r2,r5
    b254:	dc000015 	stw	r16,0(sp)
    b258:	040000b4 	movhi	r16,2
    b25c:	dc400115 	stw	r17,4(sp)
    b260:	84344104 	addi	r16,r16,-12028
    b264:	2023883a 	mov	r17,r4
    b268:	300b883a 	mov	r5,r6
    b26c:	1009883a 	mov	r4,r2
    b270:	dfc00215 	stw	ra,8(sp)
    b274:	80000015 	stw	zero,0(r16)
    b278:	000ee100 	call	ee10 <fstat>
    b27c:	00ffffc4 	movi	r3,-1
    b280:	10c00526 	beq	r2,r3,b298 <_fstat_r+0x4c>
    b284:	dfc00217 	ldw	ra,8(sp)
    b288:	dc400117 	ldw	r17,4(sp)
    b28c:	dc000017 	ldw	r16,0(sp)
    b290:	dec00304 	addi	sp,sp,12
    b294:	f800283a 	ret
    b298:	80c00017 	ldw	r3,0(r16)
    b29c:	183ff926 	beq	r3,zero,b284 <__alt_data_end+0xfffdb284>
    b2a0:	88c00015 	stw	r3,0(r17)
    b2a4:	003ff706 	br	b284 <__alt_data_end+0xfffdb284>

0000b2a8 <_isatty_r>:
    b2a8:	defffd04 	addi	sp,sp,-12
    b2ac:	dc000015 	stw	r16,0(sp)
    b2b0:	040000b4 	movhi	r16,2
    b2b4:	dc400115 	stw	r17,4(sp)
    b2b8:	84344104 	addi	r16,r16,-12028
    b2bc:	2023883a 	mov	r17,r4
    b2c0:	2809883a 	mov	r4,r5
    b2c4:	dfc00215 	stw	ra,8(sp)
    b2c8:	80000015 	stw	zero,0(r16)
    b2cc:	000f1a40 	call	f1a4 <isatty>
    b2d0:	00ffffc4 	movi	r3,-1
    b2d4:	10c00526 	beq	r2,r3,b2ec <_isatty_r+0x44>
    b2d8:	dfc00217 	ldw	ra,8(sp)
    b2dc:	dc400117 	ldw	r17,4(sp)
    b2e0:	dc000017 	ldw	r16,0(sp)
    b2e4:	dec00304 	addi	sp,sp,12
    b2e8:	f800283a 	ret
    b2ec:	80c00017 	ldw	r3,0(r16)
    b2f0:	183ff926 	beq	r3,zero,b2d8 <__alt_data_end+0xfffdb2d8>
    b2f4:	88c00015 	stw	r3,0(r17)
    b2f8:	003ff706 	br	b2d8 <__alt_data_end+0xfffdb2d8>

0000b2fc <_lseek_r>:
    b2fc:	defffd04 	addi	sp,sp,-12
    b300:	2805883a 	mov	r2,r5
    b304:	dc000015 	stw	r16,0(sp)
    b308:	040000b4 	movhi	r16,2
    b30c:	dc400115 	stw	r17,4(sp)
    b310:	300b883a 	mov	r5,r6
    b314:	84344104 	addi	r16,r16,-12028
    b318:	2023883a 	mov	r17,r4
    b31c:	380d883a 	mov	r6,r7
    b320:	1009883a 	mov	r4,r2
    b324:	dfc00215 	stw	ra,8(sp)
    b328:	80000015 	stw	zero,0(r16)
    b32c:	000f3780 	call	f378 <lseek>
    b330:	00ffffc4 	movi	r3,-1
    b334:	10c00526 	beq	r2,r3,b34c <_lseek_r+0x50>
    b338:	dfc00217 	ldw	ra,8(sp)
    b33c:	dc400117 	ldw	r17,4(sp)
    b340:	dc000017 	ldw	r16,0(sp)
    b344:	dec00304 	addi	sp,sp,12
    b348:	f800283a 	ret
    b34c:	80c00017 	ldw	r3,0(r16)
    b350:	183ff926 	beq	r3,zero,b338 <__alt_data_end+0xfffdb338>
    b354:	88c00015 	stw	r3,0(r17)
    b358:	003ff706 	br	b338 <__alt_data_end+0xfffdb338>

0000b35c <_read_r>:
    b35c:	defffd04 	addi	sp,sp,-12
    b360:	2805883a 	mov	r2,r5
    b364:	dc000015 	stw	r16,0(sp)
    b368:	040000b4 	movhi	r16,2
    b36c:	dc400115 	stw	r17,4(sp)
    b370:	300b883a 	mov	r5,r6
    b374:	84344104 	addi	r16,r16,-12028
    b378:	2023883a 	mov	r17,r4
    b37c:	380d883a 	mov	r6,r7
    b380:	1009883a 	mov	r4,r2
    b384:	dfc00215 	stw	ra,8(sp)
    b388:	80000015 	stw	zero,0(r16)
    b38c:	000f54c0 	call	f54c <read>
    b390:	00ffffc4 	movi	r3,-1
    b394:	10c00526 	beq	r2,r3,b3ac <_read_r+0x50>
    b398:	dfc00217 	ldw	ra,8(sp)
    b39c:	dc400117 	ldw	r17,4(sp)
    b3a0:	dc000017 	ldw	r16,0(sp)
    b3a4:	dec00304 	addi	sp,sp,12
    b3a8:	f800283a 	ret
    b3ac:	80c00017 	ldw	r3,0(r16)
    b3b0:	183ff926 	beq	r3,zero,b398 <__alt_data_end+0xfffdb398>
    b3b4:	88c00015 	stw	r3,0(r17)
    b3b8:	003ff706 	br	b398 <__alt_data_end+0xfffdb398>

0000b3bc <__swbuf_r>:
    b3bc:	defffb04 	addi	sp,sp,-20
    b3c0:	dcc00315 	stw	r19,12(sp)
    b3c4:	dc800215 	stw	r18,8(sp)
    b3c8:	dc000015 	stw	r16,0(sp)
    b3cc:	dfc00415 	stw	ra,16(sp)
    b3d0:	dc400115 	stw	r17,4(sp)
    b3d4:	2025883a 	mov	r18,r4
    b3d8:	2827883a 	mov	r19,r5
    b3dc:	3021883a 	mov	r16,r6
    b3e0:	20000226 	beq	r4,zero,b3ec <__swbuf_r+0x30>
    b3e4:	20800e17 	ldw	r2,56(r4)
    b3e8:	10004226 	beq	r2,zero,b4f4 <__swbuf_r+0x138>
    b3ec:	80800617 	ldw	r2,24(r16)
    b3f0:	8100030b 	ldhu	r4,12(r16)
    b3f4:	80800215 	stw	r2,8(r16)
    b3f8:	2080020c 	andi	r2,r4,8
    b3fc:	10003626 	beq	r2,zero,b4d8 <__swbuf_r+0x11c>
    b400:	80c00417 	ldw	r3,16(r16)
    b404:	18003426 	beq	r3,zero,b4d8 <__swbuf_r+0x11c>
    b408:	2088000c 	andi	r2,r4,8192
    b40c:	9c403fcc 	andi	r17,r19,255
    b410:	10001a26 	beq	r2,zero,b47c <__swbuf_r+0xc0>
    b414:	80800017 	ldw	r2,0(r16)
    b418:	81000517 	ldw	r4,20(r16)
    b41c:	10c7c83a 	sub	r3,r2,r3
    b420:	1900200e 	bge	r3,r4,b4a4 <__swbuf_r+0xe8>
    b424:	18c00044 	addi	r3,r3,1
    b428:	81000217 	ldw	r4,8(r16)
    b42c:	11400044 	addi	r5,r2,1
    b430:	81400015 	stw	r5,0(r16)
    b434:	213fffc4 	addi	r4,r4,-1
    b438:	81000215 	stw	r4,8(r16)
    b43c:	14c00005 	stb	r19,0(r2)
    b440:	80800517 	ldw	r2,20(r16)
    b444:	10c01e26 	beq	r2,r3,b4c0 <__swbuf_r+0x104>
    b448:	8080030b 	ldhu	r2,12(r16)
    b44c:	1080004c 	andi	r2,r2,1
    b450:	10000226 	beq	r2,zero,b45c <__swbuf_r+0xa0>
    b454:	00800284 	movi	r2,10
    b458:	88801926 	beq	r17,r2,b4c0 <__swbuf_r+0x104>
    b45c:	8805883a 	mov	r2,r17
    b460:	dfc00417 	ldw	ra,16(sp)
    b464:	dcc00317 	ldw	r19,12(sp)
    b468:	dc800217 	ldw	r18,8(sp)
    b46c:	dc400117 	ldw	r17,4(sp)
    b470:	dc000017 	ldw	r16,0(sp)
    b474:	dec00504 	addi	sp,sp,20
    b478:	f800283a 	ret
    b47c:	81401917 	ldw	r5,100(r16)
    b480:	00b7ffc4 	movi	r2,-8193
    b484:	21080014 	ori	r4,r4,8192
    b488:	2884703a 	and	r2,r5,r2
    b48c:	80801915 	stw	r2,100(r16)
    b490:	80800017 	ldw	r2,0(r16)
    b494:	8100030d 	sth	r4,12(r16)
    b498:	81000517 	ldw	r4,20(r16)
    b49c:	10c7c83a 	sub	r3,r2,r3
    b4a0:	193fe016 	blt	r3,r4,b424 <__alt_data_end+0xfffdb424>
    b4a4:	800b883a 	mov	r5,r16
    b4a8:	9009883a 	mov	r4,r18
    b4ac:	0005bd80 	call	5bd8 <_fflush_r>
    b4b0:	1000071e 	bne	r2,zero,b4d0 <__swbuf_r+0x114>
    b4b4:	80800017 	ldw	r2,0(r16)
    b4b8:	00c00044 	movi	r3,1
    b4bc:	003fda06 	br	b428 <__alt_data_end+0xfffdb428>
    b4c0:	800b883a 	mov	r5,r16
    b4c4:	9009883a 	mov	r4,r18
    b4c8:	0005bd80 	call	5bd8 <_fflush_r>
    b4cc:	103fe326 	beq	r2,zero,b45c <__alt_data_end+0xfffdb45c>
    b4d0:	00bfffc4 	movi	r2,-1
    b4d4:	003fe206 	br	b460 <__alt_data_end+0xfffdb460>
    b4d8:	800b883a 	mov	r5,r16
    b4dc:	9009883a 	mov	r4,r18
    b4e0:	0003fb80 	call	3fb8 <__swsetup_r>
    b4e4:	103ffa1e 	bne	r2,zero,b4d0 <__alt_data_end+0xfffdb4d0>
    b4e8:	8100030b 	ldhu	r4,12(r16)
    b4ec:	80c00417 	ldw	r3,16(r16)
    b4f0:	003fc506 	br	b408 <__alt_data_end+0xfffdb408>
    b4f4:	0005fc40 	call	5fc4 <__sinit>
    b4f8:	003fbc06 	br	b3ec <__alt_data_end+0xfffdb3ec>

0000b4fc <__swbuf>:
    b4fc:	008000b4 	movhi	r2,2
    b500:	10ad2904 	addi	r2,r2,-19292
    b504:	280d883a 	mov	r6,r5
    b508:	200b883a 	mov	r5,r4
    b50c:	11000017 	ldw	r4,0(r2)
    b510:	000b3bc1 	jmpi	b3bc <__swbuf_r>

0000b514 <_wcrtomb_r>:
    b514:	defff604 	addi	sp,sp,-40
    b518:	008000b4 	movhi	r2,2
    b51c:	dc800815 	stw	r18,32(sp)
    b520:	dc400715 	stw	r17,28(sp)
    b524:	dc000615 	stw	r16,24(sp)
    b528:	10ad2d04 	addi	r2,r2,-19276
    b52c:	dfc00915 	stw	ra,36(sp)
    b530:	2021883a 	mov	r16,r4
    b534:	3823883a 	mov	r17,r7
    b538:	14800017 	ldw	r18,0(r2)
    b53c:	28001426 	beq	r5,zero,b590 <_wcrtomb_r+0x7c>
    b540:	d9400415 	stw	r5,16(sp)
    b544:	d9800515 	stw	r6,20(sp)
    b548:	0006b140 	call	6b14 <__locale_charset>
    b54c:	d9800517 	ldw	r6,20(sp)
    b550:	d9400417 	ldw	r5,16(sp)
    b554:	100f883a 	mov	r7,r2
    b558:	dc400015 	stw	r17,0(sp)
    b55c:	8009883a 	mov	r4,r16
    b560:	903ee83a 	callr	r18
    b564:	00ffffc4 	movi	r3,-1
    b568:	10c0031e 	bne	r2,r3,b578 <_wcrtomb_r+0x64>
    b56c:	88000015 	stw	zero,0(r17)
    b570:	00c02284 	movi	r3,138
    b574:	80c00015 	stw	r3,0(r16)
    b578:	dfc00917 	ldw	ra,36(sp)
    b57c:	dc800817 	ldw	r18,32(sp)
    b580:	dc400717 	ldw	r17,28(sp)
    b584:	dc000617 	ldw	r16,24(sp)
    b588:	dec00a04 	addi	sp,sp,40
    b58c:	f800283a 	ret
    b590:	0006b140 	call	6b14 <__locale_charset>
    b594:	100f883a 	mov	r7,r2
    b598:	dc400015 	stw	r17,0(sp)
    b59c:	000d883a 	mov	r6,zero
    b5a0:	d9400104 	addi	r5,sp,4
    b5a4:	8009883a 	mov	r4,r16
    b5a8:	903ee83a 	callr	r18
    b5ac:	003fed06 	br	b564 <__alt_data_end+0xfffdb564>

0000b5b0 <wcrtomb>:
    b5b0:	defff604 	addi	sp,sp,-40
    b5b4:	008000b4 	movhi	r2,2
    b5b8:	dc800615 	stw	r18,24(sp)
    b5bc:	dc400515 	stw	r17,20(sp)
    b5c0:	10ad2904 	addi	r2,r2,-19292
    b5c4:	dfc00915 	stw	ra,36(sp)
    b5c8:	dd000815 	stw	r20,32(sp)
    b5cc:	dcc00715 	stw	r19,28(sp)
    b5d0:	dc000415 	stw	r16,16(sp)
    b5d4:	3025883a 	mov	r18,r6
    b5d8:	14400017 	ldw	r17,0(r2)
    b5dc:	20001926 	beq	r4,zero,b644 <wcrtomb+0x94>
    b5e0:	008000b4 	movhi	r2,2
    b5e4:	10ad2d04 	addi	r2,r2,-19276
    b5e8:	15000017 	ldw	r20,0(r2)
    b5ec:	2021883a 	mov	r16,r4
    b5f0:	2827883a 	mov	r19,r5
    b5f4:	0006b140 	call	6b14 <__locale_charset>
    b5f8:	100f883a 	mov	r7,r2
    b5fc:	dc800015 	stw	r18,0(sp)
    b600:	980d883a 	mov	r6,r19
    b604:	800b883a 	mov	r5,r16
    b608:	8809883a 	mov	r4,r17
    b60c:	a03ee83a 	callr	r20
    b610:	00ffffc4 	movi	r3,-1
    b614:	10c0031e 	bne	r2,r3,b624 <wcrtomb+0x74>
    b618:	90000015 	stw	zero,0(r18)
    b61c:	00c02284 	movi	r3,138
    b620:	88c00015 	stw	r3,0(r17)
    b624:	dfc00917 	ldw	ra,36(sp)
    b628:	dd000817 	ldw	r20,32(sp)
    b62c:	dcc00717 	ldw	r19,28(sp)
    b630:	dc800617 	ldw	r18,24(sp)
    b634:	dc400517 	ldw	r17,20(sp)
    b638:	dc000417 	ldw	r16,16(sp)
    b63c:	dec00a04 	addi	sp,sp,40
    b640:	f800283a 	ret
    b644:	008000b4 	movhi	r2,2
    b648:	10ad2d04 	addi	r2,r2,-19276
    b64c:	14000017 	ldw	r16,0(r2)
    b650:	0006b140 	call	6b14 <__locale_charset>
    b654:	100f883a 	mov	r7,r2
    b658:	dc800015 	stw	r18,0(sp)
    b65c:	000d883a 	mov	r6,zero
    b660:	d9400104 	addi	r5,sp,4
    b664:	8809883a 	mov	r4,r17
    b668:	803ee83a 	callr	r16
    b66c:	003fe806 	br	b610 <__alt_data_end+0xfffdb610>

0000b670 <__ascii_wctomb>:
    b670:	28000526 	beq	r5,zero,b688 <__ascii_wctomb+0x18>
    b674:	00803fc4 	movi	r2,255
    b678:	11800536 	bltu	r2,r6,b690 <__ascii_wctomb+0x20>
    b67c:	29800005 	stb	r6,0(r5)
    b680:	00800044 	movi	r2,1
    b684:	f800283a 	ret
    b688:	0005883a 	mov	r2,zero
    b68c:	f800283a 	ret
    b690:	00802284 	movi	r2,138
    b694:	20800015 	stw	r2,0(r4)
    b698:	00bfffc4 	movi	r2,-1
    b69c:	f800283a 	ret

0000b6a0 <_wctomb_r>:
    b6a0:	008000b4 	movhi	r2,2
    b6a4:	defff904 	addi	sp,sp,-28
    b6a8:	10ad2d04 	addi	r2,r2,-19276
    b6ac:	dfc00615 	stw	ra,24(sp)
    b6b0:	dc400515 	stw	r17,20(sp)
    b6b4:	dc000415 	stw	r16,16(sp)
    b6b8:	3823883a 	mov	r17,r7
    b6bc:	14000017 	ldw	r16,0(r2)
    b6c0:	d9000115 	stw	r4,4(sp)
    b6c4:	d9400215 	stw	r5,8(sp)
    b6c8:	d9800315 	stw	r6,12(sp)
    b6cc:	0006b140 	call	6b14 <__locale_charset>
    b6d0:	d9800317 	ldw	r6,12(sp)
    b6d4:	d9400217 	ldw	r5,8(sp)
    b6d8:	d9000117 	ldw	r4,4(sp)
    b6dc:	100f883a 	mov	r7,r2
    b6e0:	dc400015 	stw	r17,0(sp)
    b6e4:	803ee83a 	callr	r16
    b6e8:	dfc00617 	ldw	ra,24(sp)
    b6ec:	dc400517 	ldw	r17,20(sp)
    b6f0:	dc000417 	ldw	r16,16(sp)
    b6f4:	dec00704 	addi	sp,sp,28
    b6f8:	f800283a 	ret

0000b6fc <__muldi3>:
    b6fc:	defff604 	addi	sp,sp,-40
    b700:	dd800615 	stw	r22,24(sp)
    b704:	dd400515 	stw	r21,20(sp)
    b708:	dc400115 	stw	r17,4(sp)
    b70c:	357fffcc 	andi	r21,r6,65535
    b710:	2022d43a 	srli	r17,r4,16
    b714:	25bfffcc 	andi	r22,r4,65535
    b718:	dcc00315 	stw	r19,12(sp)
    b71c:	dc800215 	stw	r18,8(sp)
    b720:	2027883a 	mov	r19,r4
    b724:	2825883a 	mov	r18,r5
    b728:	b009883a 	mov	r4,r22
    b72c:	a80b883a 	mov	r5,r21
    b730:	dfc00915 	stw	ra,36(sp)
    b734:	df000815 	stw	fp,32(sp)
    b738:	ddc00715 	stw	r23,28(sp)
    b73c:	3839883a 	mov	fp,r7
    b740:	302ed43a 	srli	r23,r6,16
    b744:	dd000415 	stw	r20,16(sp)
    b748:	dc000015 	stw	r16,0(sp)
    b74c:	3029883a 	mov	r20,r6
    b750:	000c3c80 	call	c3c8 <__mulsi3>
    b754:	a80b883a 	mov	r5,r21
    b758:	8809883a 	mov	r4,r17
    b75c:	1021883a 	mov	r16,r2
    b760:	000c3c80 	call	c3c8 <__mulsi3>
    b764:	8809883a 	mov	r4,r17
    b768:	b80b883a 	mov	r5,r23
    b76c:	102b883a 	mov	r21,r2
    b770:	000c3c80 	call	c3c8 <__mulsi3>
    b774:	b80b883a 	mov	r5,r23
    b778:	b009883a 	mov	r4,r22
    b77c:	1023883a 	mov	r17,r2
    b780:	000c3c80 	call	c3c8 <__mulsi3>
    b784:	8006d43a 	srli	r3,r16,16
    b788:	1545883a 	add	r2,r2,r21
    b78c:	1885883a 	add	r2,r3,r2
    b790:	1540022e 	bgeu	r2,r21,b79c <__muldi3+0xa0>
    b794:	00c00074 	movhi	r3,1
    b798:	88e3883a 	add	r17,r17,r3
    b79c:	1006d43a 	srli	r3,r2,16
    b7a0:	1004943a 	slli	r2,r2,16
    b7a4:	e00b883a 	mov	r5,fp
    b7a8:	9809883a 	mov	r4,r19
    b7ac:	843fffcc 	andi	r16,r16,65535
    b7b0:	1c63883a 	add	r17,r3,r17
    b7b4:	1421883a 	add	r16,r2,r16
    b7b8:	000c3c80 	call	c3c8 <__mulsi3>
    b7bc:	900b883a 	mov	r5,r18
    b7c0:	a009883a 	mov	r4,r20
    b7c4:	1027883a 	mov	r19,r2
    b7c8:	000c3c80 	call	c3c8 <__mulsi3>
    b7cc:	9885883a 	add	r2,r19,r2
    b7d0:	1447883a 	add	r3,r2,r17
    b7d4:	8005883a 	mov	r2,r16
    b7d8:	dfc00917 	ldw	ra,36(sp)
    b7dc:	df000817 	ldw	fp,32(sp)
    b7e0:	ddc00717 	ldw	r23,28(sp)
    b7e4:	dd800617 	ldw	r22,24(sp)
    b7e8:	dd400517 	ldw	r21,20(sp)
    b7ec:	dd000417 	ldw	r20,16(sp)
    b7f0:	dcc00317 	ldw	r19,12(sp)
    b7f4:	dc800217 	ldw	r18,8(sp)
    b7f8:	dc400117 	ldw	r17,4(sp)
    b7fc:	dc000017 	ldw	r16,0(sp)
    b800:	dec00a04 	addi	sp,sp,40
    b804:	f800283a 	ret

0000b808 <__udivdi3>:
    b808:	defff404 	addi	sp,sp,-48
    b80c:	dcc00515 	stw	r19,20(sp)
    b810:	dc000215 	stw	r16,8(sp)
    b814:	dfc00b15 	stw	ra,44(sp)
    b818:	df000a15 	stw	fp,40(sp)
    b81c:	ddc00915 	stw	r23,36(sp)
    b820:	dd800815 	stw	r22,32(sp)
    b824:	dd400715 	stw	r21,28(sp)
    b828:	dd000615 	stw	r20,24(sp)
    b82c:	dc800415 	stw	r18,16(sp)
    b830:	dc400315 	stw	r17,12(sp)
    b834:	2027883a 	mov	r19,r4
    b838:	2821883a 	mov	r16,r5
    b83c:	3800461e 	bne	r7,zero,b958 <__udivdi3+0x150>
    b840:	3023883a 	mov	r17,r6
    b844:	2025883a 	mov	r18,r4
    b848:	2980572e 	bgeu	r5,r6,b9a8 <__udivdi3+0x1a0>
    b84c:	00bfffd4 	movui	r2,65535
    b850:	282d883a 	mov	r22,r5
    b854:	1180b236 	bltu	r2,r6,bb20 <__udivdi3+0x318>
    b858:	00803fc4 	movi	r2,255
    b85c:	1185803a 	cmpltu	r2,r2,r6
    b860:	100490fa 	slli	r2,r2,3
    b864:	3086d83a 	srl	r3,r6,r2
    b868:	010000b4 	movhi	r4,2
    b86c:	2125e504 	addi	r4,r4,-26732
    b870:	20c7883a 	add	r3,r4,r3
    b874:	18c00003 	ldbu	r3,0(r3)
    b878:	1885883a 	add	r2,r3,r2
    b87c:	00c00804 	movi	r3,32
    b880:	1887c83a 	sub	r3,r3,r2
    b884:	18000526 	beq	r3,zero,b89c <__udivdi3+0x94>
    b888:	80e0983a 	sll	r16,r16,r3
    b88c:	9884d83a 	srl	r2,r19,r2
    b890:	30e2983a 	sll	r17,r6,r3
    b894:	98e4983a 	sll	r18,r19,r3
    b898:	142cb03a 	or	r22,r2,r16
    b89c:	882ad43a 	srli	r21,r17,16
    b8a0:	b009883a 	mov	r4,r22
    b8a4:	8d3fffcc 	andi	r20,r17,65535
    b8a8:	a80b883a 	mov	r5,r21
    b8ac:	0000e280 	call	e28 <__umodsi3>
    b8b0:	b009883a 	mov	r4,r22
    b8b4:	a80b883a 	mov	r5,r21
    b8b8:	1027883a 	mov	r19,r2
    b8bc:	0000dc40 	call	dc4 <__udivsi3>
    b8c0:	100b883a 	mov	r5,r2
    b8c4:	a009883a 	mov	r4,r20
    b8c8:	102d883a 	mov	r22,r2
    b8cc:	000c3c80 	call	c3c8 <__mulsi3>
    b8d0:	9826943a 	slli	r19,r19,16
    b8d4:	9006d43a 	srli	r3,r18,16
    b8d8:	1cc6b03a 	or	r3,r3,r19
    b8dc:	1880052e 	bgeu	r3,r2,b8f4 <__udivdi3+0xec>
    b8e0:	1c47883a 	add	r3,r3,r17
    b8e4:	b13fffc4 	addi	r4,r22,-1
    b8e8:	1c400136 	bltu	r3,r17,b8f0 <__udivdi3+0xe8>
    b8ec:	18814236 	bltu	r3,r2,bdf8 <__udivdi3+0x5f0>
    b8f0:	202d883a 	mov	r22,r4
    b8f4:	18a1c83a 	sub	r16,r3,r2
    b8f8:	8009883a 	mov	r4,r16
    b8fc:	a80b883a 	mov	r5,r21
    b900:	0000e280 	call	e28 <__umodsi3>
    b904:	1027883a 	mov	r19,r2
    b908:	8009883a 	mov	r4,r16
    b90c:	a80b883a 	mov	r5,r21
    b910:	9826943a 	slli	r19,r19,16
    b914:	0000dc40 	call	dc4 <__udivsi3>
    b918:	100b883a 	mov	r5,r2
    b91c:	a009883a 	mov	r4,r20
    b920:	94bfffcc 	andi	r18,r18,65535
    b924:	1021883a 	mov	r16,r2
    b928:	94e4b03a 	or	r18,r18,r19
    b92c:	000c3c80 	call	c3c8 <__mulsi3>
    b930:	9080052e 	bgeu	r18,r2,b948 <__udivdi3+0x140>
    b934:	8ca5883a 	add	r18,r17,r18
    b938:	80ffffc4 	addi	r3,r16,-1
    b93c:	94410c36 	bltu	r18,r17,bd70 <__udivdi3+0x568>
    b940:	90810b2e 	bgeu	r18,r2,bd70 <__udivdi3+0x568>
    b944:	843fff84 	addi	r16,r16,-2
    b948:	b004943a 	slli	r2,r22,16
    b94c:	0007883a 	mov	r3,zero
    b950:	1404b03a 	or	r2,r2,r16
    b954:	00005e06 	br	bad0 <__udivdi3+0x2c8>
    b958:	29c05b36 	bltu	r5,r7,bac8 <__udivdi3+0x2c0>
    b95c:	00bfffd4 	movui	r2,65535
    b960:	11c0672e 	bgeu	r2,r7,bb00 <__udivdi3+0x2f8>
    b964:	00804034 	movhi	r2,256
    b968:	10bfffc4 	addi	r2,r2,-1
    b96c:	11c10a36 	bltu	r2,r7,bd98 <__udivdi3+0x590>
    b970:	00800404 	movi	r2,16
    b974:	3886d83a 	srl	r3,r7,r2
    b978:	010000b4 	movhi	r4,2
    b97c:	2125e504 	addi	r4,r4,-26732
    b980:	20c7883a 	add	r3,r4,r3
    b984:	18c00003 	ldbu	r3,0(r3)
    b988:	05c00804 	movi	r23,32
    b98c:	1885883a 	add	r2,r3,r2
    b990:	b8afc83a 	sub	r23,r23,r2
    b994:	b800671e 	bne	r23,zero,bb34 <__udivdi3+0x32c>
    b998:	3c010536 	bltu	r7,r16,bdb0 <__udivdi3+0x5a8>
    b99c:	9985403a 	cmpgeu	r2,r19,r6
    b9a0:	0007883a 	mov	r3,zero
    b9a4:	00004a06 	br	bad0 <__udivdi3+0x2c8>
    b9a8:	3000041e 	bne	r6,zero,b9bc <__udivdi3+0x1b4>
    b9ac:	000b883a 	mov	r5,zero
    b9b0:	01000044 	movi	r4,1
    b9b4:	0000dc40 	call	dc4 <__udivsi3>
    b9b8:	1023883a 	mov	r17,r2
    b9bc:	00bfffd4 	movui	r2,65535
    b9c0:	1440532e 	bgeu	r2,r17,bb10 <__udivdi3+0x308>
    b9c4:	00804034 	movhi	r2,256
    b9c8:	10bfffc4 	addi	r2,r2,-1
    b9cc:	1440f436 	bltu	r2,r17,bda0 <__udivdi3+0x598>
    b9d0:	00800404 	movi	r2,16
    b9d4:	8886d83a 	srl	r3,r17,r2
    b9d8:	010000b4 	movhi	r4,2
    b9dc:	2125e504 	addi	r4,r4,-26732
    b9e0:	20c7883a 	add	r3,r4,r3
    b9e4:	18c00003 	ldbu	r3,0(r3)
    b9e8:	1885883a 	add	r2,r3,r2
    b9ec:	00c00804 	movi	r3,32
    b9f0:	1887c83a 	sub	r3,r3,r2
    b9f4:	1800a51e 	bne	r3,zero,bc8c <__udivdi3+0x484>
    b9f8:	882ad43a 	srli	r21,r17,16
    b9fc:	8461c83a 	sub	r16,r16,r17
    ba00:	8d3fffcc 	andi	r20,r17,65535
    ba04:	00c00044 	movi	r3,1
    ba08:	a80b883a 	mov	r5,r21
    ba0c:	8009883a 	mov	r4,r16
    ba10:	d8c00115 	stw	r3,4(sp)
    ba14:	0000e280 	call	e28 <__umodsi3>
    ba18:	a80b883a 	mov	r5,r21
    ba1c:	8009883a 	mov	r4,r16
    ba20:	1027883a 	mov	r19,r2
    ba24:	0000dc40 	call	dc4 <__udivsi3>
    ba28:	a00b883a 	mov	r5,r20
    ba2c:	1009883a 	mov	r4,r2
    ba30:	102d883a 	mov	r22,r2
    ba34:	000c3c80 	call	c3c8 <__mulsi3>
    ba38:	9826943a 	slli	r19,r19,16
    ba3c:	900ed43a 	srli	r7,r18,16
    ba40:	d8c00117 	ldw	r3,4(sp)
    ba44:	3cceb03a 	or	r7,r7,r19
    ba48:	3880052e 	bgeu	r7,r2,ba60 <__udivdi3+0x258>
    ba4c:	3c4f883a 	add	r7,r7,r17
    ba50:	b13fffc4 	addi	r4,r22,-1
    ba54:	3c400136 	bltu	r7,r17,ba5c <__udivdi3+0x254>
    ba58:	3880e436 	bltu	r7,r2,bdec <__udivdi3+0x5e4>
    ba5c:	202d883a 	mov	r22,r4
    ba60:	38a1c83a 	sub	r16,r7,r2
    ba64:	8009883a 	mov	r4,r16
    ba68:	a80b883a 	mov	r5,r21
    ba6c:	d8c00115 	stw	r3,4(sp)
    ba70:	0000e280 	call	e28 <__umodsi3>
    ba74:	1027883a 	mov	r19,r2
    ba78:	8009883a 	mov	r4,r16
    ba7c:	a80b883a 	mov	r5,r21
    ba80:	9826943a 	slli	r19,r19,16
    ba84:	0000dc40 	call	dc4 <__udivsi3>
    ba88:	a00b883a 	mov	r5,r20
    ba8c:	1009883a 	mov	r4,r2
    ba90:	94bfffcc 	andi	r18,r18,65535
    ba94:	1021883a 	mov	r16,r2
    ba98:	94e4b03a 	or	r18,r18,r19
    ba9c:	000c3c80 	call	c3c8 <__mulsi3>
    baa0:	d8c00117 	ldw	r3,4(sp)
    baa4:	9080052e 	bgeu	r18,r2,babc <__udivdi3+0x2b4>
    baa8:	8ca5883a 	add	r18,r17,r18
    baac:	813fffc4 	addi	r4,r16,-1
    bab0:	9440ad36 	bltu	r18,r17,bd68 <__udivdi3+0x560>
    bab4:	9080ac2e 	bgeu	r18,r2,bd68 <__udivdi3+0x560>
    bab8:	843fff84 	addi	r16,r16,-2
    babc:	b004943a 	slli	r2,r22,16
    bac0:	1404b03a 	or	r2,r2,r16
    bac4:	00000206 	br	bad0 <__udivdi3+0x2c8>
    bac8:	0007883a 	mov	r3,zero
    bacc:	0005883a 	mov	r2,zero
    bad0:	dfc00b17 	ldw	ra,44(sp)
    bad4:	df000a17 	ldw	fp,40(sp)
    bad8:	ddc00917 	ldw	r23,36(sp)
    badc:	dd800817 	ldw	r22,32(sp)
    bae0:	dd400717 	ldw	r21,28(sp)
    bae4:	dd000617 	ldw	r20,24(sp)
    bae8:	dcc00517 	ldw	r19,20(sp)
    baec:	dc800417 	ldw	r18,16(sp)
    baf0:	dc400317 	ldw	r17,12(sp)
    baf4:	dc000217 	ldw	r16,8(sp)
    baf8:	dec00c04 	addi	sp,sp,48
    bafc:	f800283a 	ret
    bb00:	00803fc4 	movi	r2,255
    bb04:	11c5803a 	cmpltu	r2,r2,r7
    bb08:	100490fa 	slli	r2,r2,3
    bb0c:	003f9906 	br	b974 <__alt_data_end+0xfffdb974>
    bb10:	00803fc4 	movi	r2,255
    bb14:	1445803a 	cmpltu	r2,r2,r17
    bb18:	100490fa 	slli	r2,r2,3
    bb1c:	003fad06 	br	b9d4 <__alt_data_end+0xfffdb9d4>
    bb20:	00804034 	movhi	r2,256
    bb24:	10bfffc4 	addi	r2,r2,-1
    bb28:	11809f36 	bltu	r2,r6,bda8 <__udivdi3+0x5a0>
    bb2c:	00800404 	movi	r2,16
    bb30:	003f4c06 	br	b864 <__alt_data_end+0xfffdb864>
    bb34:	3dce983a 	sll	r7,r7,r23
    bb38:	30b8d83a 	srl	fp,r6,r2
    bb3c:	80a2d83a 	srl	r17,r16,r2
    bb40:	35cc983a 	sll	r6,r6,r23
    bb44:	3f38b03a 	or	fp,r7,fp
    bb48:	e024d43a 	srli	r18,fp,16
    bb4c:	9884d83a 	srl	r2,r19,r2
    bb50:	85e0983a 	sll	r16,r16,r23
    bb54:	8809883a 	mov	r4,r17
    bb58:	900b883a 	mov	r5,r18
    bb5c:	d9800015 	stw	r6,0(sp)
    bb60:	1420b03a 	or	r16,r2,r16
    bb64:	0000e280 	call	e28 <__umodsi3>
    bb68:	900b883a 	mov	r5,r18
    bb6c:	8809883a 	mov	r4,r17
    bb70:	1029883a 	mov	r20,r2
    bb74:	e5bfffcc 	andi	r22,fp,65535
    bb78:	0000dc40 	call	dc4 <__udivsi3>
    bb7c:	100b883a 	mov	r5,r2
    bb80:	b009883a 	mov	r4,r22
    bb84:	102b883a 	mov	r21,r2
    bb88:	000c3c80 	call	c3c8 <__mulsi3>
    bb8c:	a028943a 	slli	r20,r20,16
    bb90:	8006d43a 	srli	r3,r16,16
    bb94:	1d06b03a 	or	r3,r3,r20
    bb98:	1880042e 	bgeu	r3,r2,bbac <__udivdi3+0x3a4>
    bb9c:	1f07883a 	add	r3,r3,fp
    bba0:	a93fffc4 	addi	r4,r21,-1
    bba4:	1f00892e 	bgeu	r3,fp,bdcc <__udivdi3+0x5c4>
    bba8:	202b883a 	mov	r21,r4
    bbac:	18a3c83a 	sub	r17,r3,r2
    bbb0:	8809883a 	mov	r4,r17
    bbb4:	900b883a 	mov	r5,r18
    bbb8:	0000e280 	call	e28 <__umodsi3>
    bbbc:	1029883a 	mov	r20,r2
    bbc0:	8809883a 	mov	r4,r17
    bbc4:	900b883a 	mov	r5,r18
    bbc8:	a028943a 	slli	r20,r20,16
    bbcc:	0000dc40 	call	dc4 <__udivsi3>
    bbd0:	100b883a 	mov	r5,r2
    bbd4:	b009883a 	mov	r4,r22
    bbd8:	843fffcc 	andi	r16,r16,65535
    bbdc:	1023883a 	mov	r17,r2
    bbe0:	8520b03a 	or	r16,r16,r20
    bbe4:	000c3c80 	call	c3c8 <__mulsi3>
    bbe8:	8080042e 	bgeu	r16,r2,bbfc <__udivdi3+0x3f4>
    bbec:	8721883a 	add	r16,r16,fp
    bbf0:	88ffffc4 	addi	r3,r17,-1
    bbf4:	8700712e 	bgeu	r16,fp,bdbc <__udivdi3+0x5b4>
    bbf8:	1823883a 	mov	r17,r3
    bbfc:	a80e943a 	slli	r7,r21,16
    bc00:	d8c00017 	ldw	r3,0(sp)
    bc04:	80a1c83a 	sub	r16,r16,r2
    bc08:	3c64b03a 	or	r18,r7,r17
    bc0c:	1d3fffcc 	andi	r20,r3,65535
    bc10:	9022d43a 	srli	r17,r18,16
    bc14:	95bfffcc 	andi	r22,r18,65535
    bc18:	a00b883a 	mov	r5,r20
    bc1c:	b009883a 	mov	r4,r22
    bc20:	182ad43a 	srli	r21,r3,16
    bc24:	000c3c80 	call	c3c8 <__mulsi3>
    bc28:	a00b883a 	mov	r5,r20
    bc2c:	8809883a 	mov	r4,r17
    bc30:	1039883a 	mov	fp,r2
    bc34:	000c3c80 	call	c3c8 <__mulsi3>
    bc38:	8809883a 	mov	r4,r17
    bc3c:	a80b883a 	mov	r5,r21
    bc40:	1029883a 	mov	r20,r2
    bc44:	000c3c80 	call	c3c8 <__mulsi3>
    bc48:	a80b883a 	mov	r5,r21
    bc4c:	b009883a 	mov	r4,r22
    bc50:	1023883a 	mov	r17,r2
    bc54:	000c3c80 	call	c3c8 <__mulsi3>
    bc58:	e006d43a 	srli	r3,fp,16
    bc5c:	1505883a 	add	r2,r2,r20
    bc60:	1887883a 	add	r3,r3,r2
    bc64:	1d00022e 	bgeu	r3,r20,bc70 <__udivdi3+0x468>
    bc68:	00800074 	movhi	r2,1
    bc6c:	88a3883a 	add	r17,r17,r2
    bc70:	1804d43a 	srli	r2,r3,16
    bc74:	1463883a 	add	r17,r2,r17
    bc78:	84404436 	bltu	r16,r17,bd8c <__udivdi3+0x584>
    bc7c:	84403e26 	beq	r16,r17,bd78 <__udivdi3+0x570>
    bc80:	9005883a 	mov	r2,r18
    bc84:	0007883a 	mov	r3,zero
    bc88:	003f9106 	br	bad0 <__alt_data_end+0xfffdbad0>
    bc8c:	88e2983a 	sll	r17,r17,r3
    bc90:	80aed83a 	srl	r23,r16,r2
    bc94:	80e0983a 	sll	r16,r16,r3
    bc98:	882ad43a 	srli	r21,r17,16
    bc9c:	9884d83a 	srl	r2,r19,r2
    bca0:	b809883a 	mov	r4,r23
    bca4:	a80b883a 	mov	r5,r21
    bca8:	98e4983a 	sll	r18,r19,r3
    bcac:	142cb03a 	or	r22,r2,r16
    bcb0:	0000e280 	call	e28 <__umodsi3>
    bcb4:	b809883a 	mov	r4,r23
    bcb8:	a80b883a 	mov	r5,r21
    bcbc:	1027883a 	mov	r19,r2
    bcc0:	8d3fffcc 	andi	r20,r17,65535
    bcc4:	0000dc40 	call	dc4 <__udivsi3>
    bcc8:	a009883a 	mov	r4,r20
    bccc:	100b883a 	mov	r5,r2
    bcd0:	102f883a 	mov	r23,r2
    bcd4:	000c3c80 	call	c3c8 <__mulsi3>
    bcd8:	9826943a 	slli	r19,r19,16
    bcdc:	b008d43a 	srli	r4,r22,16
    bce0:	24c8b03a 	or	r4,r4,r19
    bce4:	2080062e 	bgeu	r4,r2,bd00 <__udivdi3+0x4f8>
    bce8:	2449883a 	add	r4,r4,r17
    bcec:	b8ffffc4 	addi	r3,r23,-1
    bcf0:	24403c36 	bltu	r4,r17,bde4 <__udivdi3+0x5dc>
    bcf4:	20803b2e 	bgeu	r4,r2,bde4 <__udivdi3+0x5dc>
    bcf8:	bdffff84 	addi	r23,r23,-2
    bcfc:	2449883a 	add	r4,r4,r17
    bd00:	20a1c83a 	sub	r16,r4,r2
    bd04:	a80b883a 	mov	r5,r21
    bd08:	8009883a 	mov	r4,r16
    bd0c:	0000e280 	call	e28 <__umodsi3>
    bd10:	a80b883a 	mov	r5,r21
    bd14:	8009883a 	mov	r4,r16
    bd18:	1027883a 	mov	r19,r2
    bd1c:	0000dc40 	call	dc4 <__udivsi3>
    bd20:	a009883a 	mov	r4,r20
    bd24:	100b883a 	mov	r5,r2
    bd28:	9826943a 	slli	r19,r19,16
    bd2c:	1039883a 	mov	fp,r2
    bd30:	000c3c80 	call	c3c8 <__mulsi3>
    bd34:	b13fffcc 	andi	r4,r22,65535
    bd38:	24c8b03a 	or	r4,r4,r19
    bd3c:	2080062e 	bgeu	r4,r2,bd58 <__udivdi3+0x550>
    bd40:	2449883a 	add	r4,r4,r17
    bd44:	e0ffffc4 	addi	r3,fp,-1
    bd48:	24402436 	bltu	r4,r17,bddc <__udivdi3+0x5d4>
    bd4c:	2080232e 	bgeu	r4,r2,bddc <__udivdi3+0x5d4>
    bd50:	e73fff84 	addi	fp,fp,-2
    bd54:	2449883a 	add	r4,r4,r17
    bd58:	b82e943a 	slli	r23,r23,16
    bd5c:	20a1c83a 	sub	r16,r4,r2
    bd60:	bf06b03a 	or	r3,r23,fp
    bd64:	003f2806 	br	ba08 <__alt_data_end+0xfffdba08>
    bd68:	2021883a 	mov	r16,r4
    bd6c:	003f5306 	br	babc <__alt_data_end+0xfffdbabc>
    bd70:	1821883a 	mov	r16,r3
    bd74:	003ef406 	br	b948 <__alt_data_end+0xfffdb948>
    bd78:	1806943a 	slli	r3,r3,16
    bd7c:	9de6983a 	sll	r19,r19,r23
    bd80:	e73fffcc 	andi	fp,fp,65535
    bd84:	1f07883a 	add	r3,r3,fp
    bd88:	98ffbd2e 	bgeu	r19,r3,bc80 <__alt_data_end+0xfffdbc80>
    bd8c:	90bfffc4 	addi	r2,r18,-1
    bd90:	0007883a 	mov	r3,zero
    bd94:	003f4e06 	br	bad0 <__alt_data_end+0xfffdbad0>
    bd98:	00800604 	movi	r2,24
    bd9c:	003ef506 	br	b974 <__alt_data_end+0xfffdb974>
    bda0:	00800604 	movi	r2,24
    bda4:	003f0b06 	br	b9d4 <__alt_data_end+0xfffdb9d4>
    bda8:	00800604 	movi	r2,24
    bdac:	003ead06 	br	b864 <__alt_data_end+0xfffdb864>
    bdb0:	0007883a 	mov	r3,zero
    bdb4:	00800044 	movi	r2,1
    bdb8:	003f4506 	br	bad0 <__alt_data_end+0xfffdbad0>
    bdbc:	80bf8e2e 	bgeu	r16,r2,bbf8 <__alt_data_end+0xfffdbbf8>
    bdc0:	8c7fff84 	addi	r17,r17,-2
    bdc4:	8721883a 	add	r16,r16,fp
    bdc8:	003f8c06 	br	bbfc <__alt_data_end+0xfffdbbfc>
    bdcc:	18bf762e 	bgeu	r3,r2,bba8 <__alt_data_end+0xfffdbba8>
    bdd0:	ad7fff84 	addi	r21,r21,-2
    bdd4:	1f07883a 	add	r3,r3,fp
    bdd8:	003f7406 	br	bbac <__alt_data_end+0xfffdbbac>
    bddc:	1839883a 	mov	fp,r3
    bde0:	003fdd06 	br	bd58 <__alt_data_end+0xfffdbd58>
    bde4:	182f883a 	mov	r23,r3
    bde8:	003fc506 	br	bd00 <__alt_data_end+0xfffdbd00>
    bdec:	b5bfff84 	addi	r22,r22,-2
    bdf0:	3c4f883a 	add	r7,r7,r17
    bdf4:	003f1a06 	br	ba60 <__alt_data_end+0xfffdba60>
    bdf8:	b5bfff84 	addi	r22,r22,-2
    bdfc:	1c47883a 	add	r3,r3,r17
    be00:	003ebc06 	br	b8f4 <__alt_data_end+0xfffdb8f4>

0000be04 <__umoddi3>:
    be04:	defff304 	addi	sp,sp,-52
    be08:	df000b15 	stw	fp,44(sp)
    be0c:	dc400415 	stw	r17,16(sp)
    be10:	dc000315 	stw	r16,12(sp)
    be14:	dfc00c15 	stw	ra,48(sp)
    be18:	ddc00a15 	stw	r23,40(sp)
    be1c:	dd800915 	stw	r22,36(sp)
    be20:	dd400815 	stw	r21,32(sp)
    be24:	dd000715 	stw	r20,28(sp)
    be28:	dcc00615 	stw	r19,24(sp)
    be2c:	dc800515 	stw	r18,20(sp)
    be30:	2021883a 	mov	r16,r4
    be34:	2823883a 	mov	r17,r5
    be38:	2839883a 	mov	fp,r5
    be3c:	3800401e 	bne	r7,zero,bf40 <__umoddi3+0x13c>
    be40:	3027883a 	mov	r19,r6
    be44:	2029883a 	mov	r20,r4
    be48:	2980552e 	bgeu	r5,r6,bfa0 <__umoddi3+0x19c>
    be4c:	00bfffd4 	movui	r2,65535
    be50:	1180a236 	bltu	r2,r6,c0dc <__umoddi3+0x2d8>
    be54:	01003fc4 	movi	r4,255
    be58:	2189803a 	cmpltu	r4,r4,r6
    be5c:	200890fa 	slli	r4,r4,3
    be60:	3104d83a 	srl	r2,r6,r4
    be64:	00c000b4 	movhi	r3,2
    be68:	18e5e504 	addi	r3,r3,-26732
    be6c:	1885883a 	add	r2,r3,r2
    be70:	10c00003 	ldbu	r3,0(r2)
    be74:	00800804 	movi	r2,32
    be78:	1909883a 	add	r4,r3,r4
    be7c:	1125c83a 	sub	r18,r2,r4
    be80:	90000526 	beq	r18,zero,be98 <__umoddi3+0x94>
    be84:	8ca2983a 	sll	r17,r17,r18
    be88:	8108d83a 	srl	r4,r16,r4
    be8c:	34a6983a 	sll	r19,r6,r18
    be90:	84a8983a 	sll	r20,r16,r18
    be94:	2478b03a 	or	fp,r4,r17
    be98:	982cd43a 	srli	r22,r19,16
    be9c:	e009883a 	mov	r4,fp
    bea0:	9dffffcc 	andi	r23,r19,65535
    bea4:	b00b883a 	mov	r5,r22
    bea8:	0000e280 	call	e28 <__umodsi3>
    beac:	b00b883a 	mov	r5,r22
    beb0:	e009883a 	mov	r4,fp
    beb4:	102b883a 	mov	r21,r2
    beb8:	0000dc40 	call	dc4 <__udivsi3>
    bebc:	100b883a 	mov	r5,r2
    bec0:	b809883a 	mov	r4,r23
    bec4:	000c3c80 	call	c3c8 <__mulsi3>
    bec8:	a82a943a 	slli	r21,r21,16
    becc:	a006d43a 	srli	r3,r20,16
    bed0:	1d46b03a 	or	r3,r3,r21
    bed4:	1880032e 	bgeu	r3,r2,bee4 <__umoddi3+0xe0>
    bed8:	1cc7883a 	add	r3,r3,r19
    bedc:	1cc00136 	bltu	r3,r19,bee4 <__umoddi3+0xe0>
    bee0:	18813136 	bltu	r3,r2,c3a8 <__umoddi3+0x5a4>
    bee4:	18a1c83a 	sub	r16,r3,r2
    bee8:	b00b883a 	mov	r5,r22
    beec:	8009883a 	mov	r4,r16
    bef0:	0000e280 	call	e28 <__umodsi3>
    bef4:	b00b883a 	mov	r5,r22
    bef8:	8009883a 	mov	r4,r16
    befc:	1023883a 	mov	r17,r2
    bf00:	0000dc40 	call	dc4 <__udivsi3>
    bf04:	100b883a 	mov	r5,r2
    bf08:	b809883a 	mov	r4,r23
    bf0c:	8822943a 	slli	r17,r17,16
    bf10:	000c3c80 	call	c3c8 <__mulsi3>
    bf14:	a0ffffcc 	andi	r3,r20,65535
    bf18:	1c46b03a 	or	r3,r3,r17
    bf1c:	1880042e 	bgeu	r3,r2,bf30 <__umoddi3+0x12c>
    bf20:	1cc7883a 	add	r3,r3,r19
    bf24:	1cc00236 	bltu	r3,r19,bf30 <__umoddi3+0x12c>
    bf28:	1880012e 	bgeu	r3,r2,bf30 <__umoddi3+0x12c>
    bf2c:	1cc7883a 	add	r3,r3,r19
    bf30:	1885c83a 	sub	r2,r3,r2
    bf34:	1484d83a 	srl	r2,r2,r18
    bf38:	0007883a 	mov	r3,zero
    bf3c:	00005306 	br	c08c <__umoddi3+0x288>
    bf40:	29c05036 	bltu	r5,r7,c084 <__umoddi3+0x280>
    bf44:	00bfffd4 	movui	r2,65535
    bf48:	11c05c2e 	bgeu	r2,r7,c0bc <__umoddi3+0x2b8>
    bf4c:	00804034 	movhi	r2,256
    bf50:	10bfffc4 	addi	r2,r2,-1
    bf54:	11c10636 	bltu	r2,r7,c370 <__umoddi3+0x56c>
    bf58:	01000404 	movi	r4,16
    bf5c:	3904d83a 	srl	r2,r7,r4
    bf60:	00c000b4 	movhi	r3,2
    bf64:	18e5e504 	addi	r3,r3,-26732
    bf68:	1885883a 	add	r2,r3,r2
    bf6c:	14c00003 	ldbu	r19,0(r2)
    bf70:	00c00804 	movi	r3,32
    bf74:	9927883a 	add	r19,r19,r4
    bf78:	1ce9c83a 	sub	r20,r3,r19
    bf7c:	a0005c1e 	bne	r20,zero,c0f0 <__umoddi3+0x2ec>
    bf80:	3c400136 	bltu	r7,r17,bf88 <__umoddi3+0x184>
    bf84:	81810a36 	bltu	r16,r6,c3b0 <__umoddi3+0x5ac>
    bf88:	8185c83a 	sub	r2,r16,r6
    bf8c:	89e3c83a 	sub	r17,r17,r7
    bf90:	8089803a 	cmpltu	r4,r16,r2
    bf94:	8939c83a 	sub	fp,r17,r4
    bf98:	e007883a 	mov	r3,fp
    bf9c:	00003b06 	br	c08c <__umoddi3+0x288>
    bfa0:	3000041e 	bne	r6,zero,bfb4 <__umoddi3+0x1b0>
    bfa4:	000b883a 	mov	r5,zero
    bfa8:	01000044 	movi	r4,1
    bfac:	0000dc40 	call	dc4 <__udivsi3>
    bfb0:	1027883a 	mov	r19,r2
    bfb4:	00bfffd4 	movui	r2,65535
    bfb8:	14c0442e 	bgeu	r2,r19,c0cc <__umoddi3+0x2c8>
    bfbc:	00804034 	movhi	r2,256
    bfc0:	10bfffc4 	addi	r2,r2,-1
    bfc4:	14c0ec36 	bltu	r2,r19,c378 <__umoddi3+0x574>
    bfc8:	00800404 	movi	r2,16
    bfcc:	9886d83a 	srl	r3,r19,r2
    bfd0:	010000b4 	movhi	r4,2
    bfd4:	2125e504 	addi	r4,r4,-26732
    bfd8:	20c7883a 	add	r3,r4,r3
    bfdc:	18c00003 	ldbu	r3,0(r3)
    bfe0:	1887883a 	add	r3,r3,r2
    bfe4:	00800804 	movi	r2,32
    bfe8:	10e5c83a 	sub	r18,r2,r3
    bfec:	9000ab1e 	bne	r18,zero,c29c <__umoddi3+0x498>
    bff0:	982cd43a 	srli	r22,r19,16
    bff4:	8ce3c83a 	sub	r17,r17,r19
    bff8:	9dffffcc 	andi	r23,r19,65535
    bffc:	b00b883a 	mov	r5,r22
    c000:	8809883a 	mov	r4,r17
    c004:	0000e280 	call	e28 <__umodsi3>
    c008:	b00b883a 	mov	r5,r22
    c00c:	8809883a 	mov	r4,r17
    c010:	102b883a 	mov	r21,r2
    c014:	0000dc40 	call	dc4 <__udivsi3>
    c018:	b80b883a 	mov	r5,r23
    c01c:	1009883a 	mov	r4,r2
    c020:	000c3c80 	call	c3c8 <__mulsi3>
    c024:	a82a943a 	slli	r21,r21,16
    c028:	a006d43a 	srli	r3,r20,16
    c02c:	1d46b03a 	or	r3,r3,r21
    c030:	1880042e 	bgeu	r3,r2,c044 <__umoddi3+0x240>
    c034:	1cc7883a 	add	r3,r3,r19
    c038:	1cc00236 	bltu	r3,r19,c044 <__umoddi3+0x240>
    c03c:	1880012e 	bgeu	r3,r2,c044 <__umoddi3+0x240>
    c040:	1cc7883a 	add	r3,r3,r19
    c044:	18a1c83a 	sub	r16,r3,r2
    c048:	b00b883a 	mov	r5,r22
    c04c:	8009883a 	mov	r4,r16
    c050:	0000e280 	call	e28 <__umodsi3>
    c054:	1023883a 	mov	r17,r2
    c058:	b00b883a 	mov	r5,r22
    c05c:	8009883a 	mov	r4,r16
    c060:	0000dc40 	call	dc4 <__udivsi3>
    c064:	8822943a 	slli	r17,r17,16
    c068:	b80b883a 	mov	r5,r23
    c06c:	1009883a 	mov	r4,r2
    c070:	000c3c80 	call	c3c8 <__mulsi3>
    c074:	a53fffcc 	andi	r20,r20,65535
    c078:	a446b03a 	or	r3,r20,r17
    c07c:	18bfac2e 	bgeu	r3,r2,bf30 <__alt_data_end+0xfffdbf30>
    c080:	003fa706 	br	bf20 <__alt_data_end+0xfffdbf20>
    c084:	2005883a 	mov	r2,r4
    c088:	2807883a 	mov	r3,r5
    c08c:	dfc00c17 	ldw	ra,48(sp)
    c090:	df000b17 	ldw	fp,44(sp)
    c094:	ddc00a17 	ldw	r23,40(sp)
    c098:	dd800917 	ldw	r22,36(sp)
    c09c:	dd400817 	ldw	r21,32(sp)
    c0a0:	dd000717 	ldw	r20,28(sp)
    c0a4:	dcc00617 	ldw	r19,24(sp)
    c0a8:	dc800517 	ldw	r18,20(sp)
    c0ac:	dc400417 	ldw	r17,16(sp)
    c0b0:	dc000317 	ldw	r16,12(sp)
    c0b4:	dec00d04 	addi	sp,sp,52
    c0b8:	f800283a 	ret
    c0bc:	04c03fc4 	movi	r19,255
    c0c0:	99c9803a 	cmpltu	r4,r19,r7
    c0c4:	200890fa 	slli	r4,r4,3
    c0c8:	003fa406 	br	bf5c <__alt_data_end+0xfffdbf5c>
    c0cc:	00803fc4 	movi	r2,255
    c0d0:	14c5803a 	cmpltu	r2,r2,r19
    c0d4:	100490fa 	slli	r2,r2,3
    c0d8:	003fbc06 	br	bfcc <__alt_data_end+0xfffdbfcc>
    c0dc:	00804034 	movhi	r2,256
    c0e0:	10bfffc4 	addi	r2,r2,-1
    c0e4:	1180a636 	bltu	r2,r6,c380 <__umoddi3+0x57c>
    c0e8:	01000404 	movi	r4,16
    c0ec:	003f5c06 	br	be60 <__alt_data_end+0xfffdbe60>
    c0f0:	3d0e983a 	sll	r7,r7,r20
    c0f4:	34ead83a 	srl	r21,r6,r19
    c0f8:	8cc6d83a 	srl	r3,r17,r19
    c0fc:	8d10983a 	sll	r8,r17,r20
    c100:	3d6ab03a 	or	r21,r7,r21
    c104:	a82cd43a 	srli	r22,r21,16
    c108:	84e2d83a 	srl	r17,r16,r19
    c10c:	1809883a 	mov	r4,r3
    c110:	b00b883a 	mov	r5,r22
    c114:	8a22b03a 	or	r17,r17,r8
    c118:	3524983a 	sll	r18,r6,r20
    c11c:	dc400015 	stw	r17,0(sp)
    c120:	d8c00115 	stw	r3,4(sp)
    c124:	0000e280 	call	e28 <__umodsi3>
    c128:	d8c00117 	ldw	r3,4(sp)
    c12c:	b00b883a 	mov	r5,r22
    c130:	1039883a 	mov	fp,r2
    c134:	1809883a 	mov	r4,r3
    c138:	0000dc40 	call	dc4 <__udivsi3>
    c13c:	adffffcc 	andi	r23,r21,65535
    c140:	100b883a 	mov	r5,r2
    c144:	b809883a 	mov	r4,r23
    c148:	1023883a 	mov	r17,r2
    c14c:	000c3c80 	call	c3c8 <__mulsi3>
    c150:	d9400017 	ldw	r5,0(sp)
    c154:	e008943a 	slli	r4,fp,16
    c158:	8520983a 	sll	r16,r16,r20
    c15c:	2806d43a 	srli	r3,r5,16
    c160:	1906b03a 	or	r3,r3,r4
    c164:	1880042e 	bgeu	r3,r2,c178 <__umoddi3+0x374>
    c168:	1d47883a 	add	r3,r3,r21
    c16c:	893fffc4 	addi	r4,r17,-1
    c170:	1d40892e 	bgeu	r3,r21,c398 <__umoddi3+0x594>
    c174:	2023883a 	mov	r17,r4
    c178:	18b9c83a 	sub	fp,r3,r2
    c17c:	b00b883a 	mov	r5,r22
    c180:	e009883a 	mov	r4,fp
    c184:	0000e280 	call	e28 <__umodsi3>
    c188:	b00b883a 	mov	r5,r22
    c18c:	e009883a 	mov	r4,fp
    c190:	d8800215 	stw	r2,8(sp)
    c194:	0000dc40 	call	dc4 <__udivsi3>
    c198:	100b883a 	mov	r5,r2
    c19c:	b809883a 	mov	r4,r23
    c1a0:	102d883a 	mov	r22,r2
    c1a4:	000c3c80 	call	c3c8 <__mulsi3>
    c1a8:	d9800217 	ldw	r6,8(sp)
    c1ac:	d8c00017 	ldw	r3,0(sp)
    c1b0:	300c943a 	slli	r6,r6,16
    c1b4:	1a3fffcc 	andi	r8,r3,65535
    c1b8:	4190b03a 	or	r8,r8,r6
    c1bc:	4080042e 	bgeu	r8,r2,c1d0 <__umoddi3+0x3cc>
    c1c0:	4551883a 	add	r8,r8,r21
    c1c4:	b0ffffc4 	addi	r3,r22,-1
    c1c8:	45406f2e 	bgeu	r8,r21,c388 <__umoddi3+0x584>
    c1cc:	182d883a 	mov	r22,r3
    c1d0:	880e943a 	slli	r7,r17,16
    c1d4:	9006d43a 	srli	r3,r18,16
    c1d8:	91bfffcc 	andi	r6,r18,65535
    c1dc:	3dacb03a 	or	r22,r7,r22
    c1e0:	b02ed43a 	srli	r23,r22,16
    c1e4:	b5bfffcc 	andi	r22,r22,65535
    c1e8:	300b883a 	mov	r5,r6
    c1ec:	b009883a 	mov	r4,r22
    c1f0:	40a3c83a 	sub	r17,r8,r2
    c1f4:	d8c00115 	stw	r3,4(sp)
    c1f8:	d9800215 	stw	r6,8(sp)
    c1fc:	000c3c80 	call	c3c8 <__mulsi3>
    c200:	d9800217 	ldw	r6,8(sp)
    c204:	b809883a 	mov	r4,r23
    c208:	1039883a 	mov	fp,r2
    c20c:	300b883a 	mov	r5,r6
    c210:	000c3c80 	call	c3c8 <__mulsi3>
    c214:	d8c00117 	ldw	r3,4(sp)
    c218:	b809883a 	mov	r4,r23
    c21c:	d8800215 	stw	r2,8(sp)
    c220:	180b883a 	mov	r5,r3
    c224:	000c3c80 	call	c3c8 <__mulsi3>
    c228:	d8c00117 	ldw	r3,4(sp)
    c22c:	b009883a 	mov	r4,r22
    c230:	102f883a 	mov	r23,r2
    c234:	180b883a 	mov	r5,r3
    c238:	000c3c80 	call	c3c8 <__mulsi3>
    c23c:	d9800217 	ldw	r6,8(sp)
    c240:	e006d43a 	srli	r3,fp,16
    c244:	1185883a 	add	r2,r2,r6
    c248:	1885883a 	add	r2,r3,r2
    c24c:	1180022e 	bgeu	r2,r6,c258 <__umoddi3+0x454>
    c250:	00c00074 	movhi	r3,1
    c254:	b8ef883a 	add	r23,r23,r3
    c258:	1006d43a 	srli	r3,r2,16
    c25c:	1004943a 	slli	r2,r2,16
    c260:	e73fffcc 	andi	fp,fp,65535
    c264:	1dc7883a 	add	r3,r3,r23
    c268:	1739883a 	add	fp,r2,fp
    c26c:	88c03a36 	bltu	r17,r3,c358 <__umoddi3+0x554>
    c270:	88c05126 	beq	r17,r3,c3b8 <__umoddi3+0x5b4>
    c274:	88c9c83a 	sub	r4,r17,r3
    c278:	e00f883a 	mov	r7,fp
    c27c:	81cfc83a 	sub	r7,r16,r7
    c280:	81c7803a 	cmpltu	r3,r16,r7
    c284:	20c7c83a 	sub	r3,r4,r3
    c288:	1cc4983a 	sll	r2,r3,r19
    c28c:	3d0ed83a 	srl	r7,r7,r20
    c290:	1d06d83a 	srl	r3,r3,r20
    c294:	11c4b03a 	or	r2,r2,r7
    c298:	003f7c06 	br	c08c <__alt_data_end+0xfffdc08c>
    c29c:	9ca6983a 	sll	r19,r19,r18
    c2a0:	88f8d83a 	srl	fp,r17,r3
    c2a4:	80c4d83a 	srl	r2,r16,r3
    c2a8:	982cd43a 	srli	r22,r19,16
    c2ac:	8ca2983a 	sll	r17,r17,r18
    c2b0:	e009883a 	mov	r4,fp
    c2b4:	b00b883a 	mov	r5,r22
    c2b8:	146ab03a 	or	r21,r2,r17
    c2bc:	0000e280 	call	e28 <__umodsi3>
    c2c0:	b00b883a 	mov	r5,r22
    c2c4:	e009883a 	mov	r4,fp
    c2c8:	1029883a 	mov	r20,r2
    c2cc:	9dffffcc 	andi	r23,r19,65535
    c2d0:	0000dc40 	call	dc4 <__udivsi3>
    c2d4:	b809883a 	mov	r4,r23
    c2d8:	100b883a 	mov	r5,r2
    c2dc:	000c3c80 	call	c3c8 <__mulsi3>
    c2e0:	a008943a 	slli	r4,r20,16
    c2e4:	a806d43a 	srli	r3,r21,16
    c2e8:	84a8983a 	sll	r20,r16,r18
    c2ec:	1906b03a 	or	r3,r3,r4
    c2f0:	1880042e 	bgeu	r3,r2,c304 <__umoddi3+0x500>
    c2f4:	1cc7883a 	add	r3,r3,r19
    c2f8:	1cc00236 	bltu	r3,r19,c304 <__umoddi3+0x500>
    c2fc:	1880012e 	bgeu	r3,r2,c304 <__umoddi3+0x500>
    c300:	1cc7883a 	add	r3,r3,r19
    c304:	18a3c83a 	sub	r17,r3,r2
    c308:	b00b883a 	mov	r5,r22
    c30c:	8809883a 	mov	r4,r17
    c310:	0000e280 	call	e28 <__umodsi3>
    c314:	b00b883a 	mov	r5,r22
    c318:	8809883a 	mov	r4,r17
    c31c:	1021883a 	mov	r16,r2
    c320:	0000dc40 	call	dc4 <__udivsi3>
    c324:	100b883a 	mov	r5,r2
    c328:	b809883a 	mov	r4,r23
    c32c:	8020943a 	slli	r16,r16,16
    c330:	000c3c80 	call	c3c8 <__mulsi3>
    c334:	a8ffffcc 	andi	r3,r21,65535
    c338:	1c06b03a 	or	r3,r3,r16
    c33c:	1880042e 	bgeu	r3,r2,c350 <__umoddi3+0x54c>
    c340:	1cc7883a 	add	r3,r3,r19
    c344:	1cc00236 	bltu	r3,r19,c350 <__umoddi3+0x54c>
    c348:	1880012e 	bgeu	r3,r2,c350 <__umoddi3+0x54c>
    c34c:	1cc7883a 	add	r3,r3,r19
    c350:	18a3c83a 	sub	r17,r3,r2
    c354:	003f2906 	br	bffc <__alt_data_end+0xfffdbffc>
    c358:	e48fc83a 	sub	r7,fp,r18
    c35c:	1d49c83a 	sub	r4,r3,r21
    c360:	e1f9803a 	cmpltu	fp,fp,r7
    c364:	2739c83a 	sub	fp,r4,fp
    c368:	8f09c83a 	sub	r4,r17,fp
    c36c:	003fc306 	br	c27c <__alt_data_end+0xfffdc27c>
    c370:	01000604 	movi	r4,24
    c374:	003ef906 	br	bf5c <__alt_data_end+0xfffdbf5c>
    c378:	00800604 	movi	r2,24
    c37c:	003f1306 	br	bfcc <__alt_data_end+0xfffdbfcc>
    c380:	01000604 	movi	r4,24
    c384:	003eb606 	br	be60 <__alt_data_end+0xfffdbe60>
    c388:	40bf902e 	bgeu	r8,r2,c1cc <__alt_data_end+0xfffdc1cc>
    c38c:	b5bfff84 	addi	r22,r22,-2
    c390:	4551883a 	add	r8,r8,r21
    c394:	003f8e06 	br	c1d0 <__alt_data_end+0xfffdc1d0>
    c398:	18bf762e 	bgeu	r3,r2,c174 <__alt_data_end+0xfffdc174>
    c39c:	8c7fff84 	addi	r17,r17,-2
    c3a0:	1d47883a 	add	r3,r3,r21
    c3a4:	003f7406 	br	c178 <__alt_data_end+0xfffdc178>
    c3a8:	1cc7883a 	add	r3,r3,r19
    c3ac:	003ecd06 	br	bee4 <__alt_data_end+0xfffdbee4>
    c3b0:	8005883a 	mov	r2,r16
    c3b4:	003ef806 	br	bf98 <__alt_data_end+0xfffdbf98>
    c3b8:	873fe736 	bltu	r16,fp,c358 <__alt_data_end+0xfffdc358>
    c3bc:	e00f883a 	mov	r7,fp
    c3c0:	0009883a 	mov	r4,zero
    c3c4:	003fad06 	br	c27c <__alt_data_end+0xfffdc27c>

0000c3c8 <__mulsi3>:
    c3c8:	0005883a 	mov	r2,zero
    c3cc:	20000726 	beq	r4,zero,c3ec <__mulsi3+0x24>
    c3d0:	20c0004c 	andi	r3,r4,1
    c3d4:	2008d07a 	srli	r4,r4,1
    c3d8:	18000126 	beq	r3,zero,c3e0 <__mulsi3+0x18>
    c3dc:	1145883a 	add	r2,r2,r5
    c3e0:	294b883a 	add	r5,r5,r5
    c3e4:	203ffa1e 	bne	r4,zero,c3d0 <__alt_data_end+0xfffdc3d0>
    c3e8:	f800283a 	ret
    c3ec:	f800283a 	ret

0000c3f0 <__adddf3>:
    c3f0:	02c00434 	movhi	r11,16
    c3f4:	5affffc4 	addi	r11,r11,-1
    c3f8:	2806d7fa 	srli	r3,r5,31
    c3fc:	2ad4703a 	and	r10,r5,r11
    c400:	3ad2703a 	and	r9,r7,r11
    c404:	3804d53a 	srli	r2,r7,20
    c408:	3018d77a 	srli	r12,r6,29
    c40c:	280ad53a 	srli	r5,r5,20
    c410:	501490fa 	slli	r10,r10,3
    c414:	2010d77a 	srli	r8,r4,29
    c418:	481290fa 	slli	r9,r9,3
    c41c:	380ed7fa 	srli	r7,r7,31
    c420:	defffb04 	addi	sp,sp,-20
    c424:	dc800215 	stw	r18,8(sp)
    c428:	dc400115 	stw	r17,4(sp)
    c42c:	dc000015 	stw	r16,0(sp)
    c430:	dfc00415 	stw	ra,16(sp)
    c434:	dcc00315 	stw	r19,12(sp)
    c438:	1c803fcc 	andi	r18,r3,255
    c43c:	2c01ffcc 	andi	r16,r5,2047
    c440:	5210b03a 	or	r8,r10,r8
    c444:	202290fa 	slli	r17,r4,3
    c448:	1081ffcc 	andi	r2,r2,2047
    c44c:	4b12b03a 	or	r9,r9,r12
    c450:	300c90fa 	slli	r6,r6,3
    c454:	91c07526 	beq	r18,r7,c62c <__adddf3+0x23c>
    c458:	8087c83a 	sub	r3,r16,r2
    c45c:	00c0ab0e 	bge	zero,r3,c70c <__adddf3+0x31c>
    c460:	10002a1e 	bne	r2,zero,c50c <__adddf3+0x11c>
    c464:	4984b03a 	or	r2,r9,r6
    c468:	1000961e 	bne	r2,zero,c6c4 <__adddf3+0x2d4>
    c46c:	888001cc 	andi	r2,r17,7
    c470:	10000726 	beq	r2,zero,c490 <__adddf3+0xa0>
    c474:	888003cc 	andi	r2,r17,15
    c478:	00c00104 	movi	r3,4
    c47c:	10c00426 	beq	r2,r3,c490 <__adddf3+0xa0>
    c480:	88c7883a 	add	r3,r17,r3
    c484:	1c63803a 	cmpltu	r17,r3,r17
    c488:	4451883a 	add	r8,r8,r17
    c48c:	1823883a 	mov	r17,r3
    c490:	4080202c 	andhi	r2,r8,128
    c494:	10005926 	beq	r2,zero,c5fc <__adddf3+0x20c>
    c498:	84000044 	addi	r16,r16,1
    c49c:	0081ffc4 	movi	r2,2047
    c4a0:	8080ba26 	beq	r16,r2,c78c <__adddf3+0x39c>
    c4a4:	00bfe034 	movhi	r2,65408
    c4a8:	10bfffc4 	addi	r2,r2,-1
    c4ac:	4090703a 	and	r8,r8,r2
    c4b0:	4004977a 	slli	r2,r8,29
    c4b4:	4010927a 	slli	r8,r8,9
    c4b8:	8822d0fa 	srli	r17,r17,3
    c4bc:	8401ffcc 	andi	r16,r16,2047
    c4c0:	4010d33a 	srli	r8,r8,12
    c4c4:	9007883a 	mov	r3,r18
    c4c8:	1444b03a 	or	r2,r2,r17
    c4cc:	8401ffcc 	andi	r16,r16,2047
    c4d0:	8020953a 	slli	r16,r16,20
    c4d4:	18c03fcc 	andi	r3,r3,255
    c4d8:	01000434 	movhi	r4,16
    c4dc:	213fffc4 	addi	r4,r4,-1
    c4e0:	180697fa 	slli	r3,r3,31
    c4e4:	4110703a 	and	r8,r8,r4
    c4e8:	4410b03a 	or	r8,r8,r16
    c4ec:	40c6b03a 	or	r3,r8,r3
    c4f0:	dfc00417 	ldw	ra,16(sp)
    c4f4:	dcc00317 	ldw	r19,12(sp)
    c4f8:	dc800217 	ldw	r18,8(sp)
    c4fc:	dc400117 	ldw	r17,4(sp)
    c500:	dc000017 	ldw	r16,0(sp)
    c504:	dec00504 	addi	sp,sp,20
    c508:	f800283a 	ret
    c50c:	0081ffc4 	movi	r2,2047
    c510:	80bfd626 	beq	r16,r2,c46c <__alt_data_end+0xfffdc46c>
    c514:	4a402034 	orhi	r9,r9,128
    c518:	00800e04 	movi	r2,56
    c51c:	10c09f16 	blt	r2,r3,c79c <__adddf3+0x3ac>
    c520:	008007c4 	movi	r2,31
    c524:	10c0c216 	blt	r2,r3,c830 <__adddf3+0x440>
    c528:	00800804 	movi	r2,32
    c52c:	10c5c83a 	sub	r2,r2,r3
    c530:	488a983a 	sll	r5,r9,r2
    c534:	30c8d83a 	srl	r4,r6,r3
    c538:	3084983a 	sll	r2,r6,r2
    c53c:	48c6d83a 	srl	r3,r9,r3
    c540:	290cb03a 	or	r6,r5,r4
    c544:	1004c03a 	cmpne	r2,r2,zero
    c548:	308cb03a 	or	r6,r6,r2
    c54c:	898dc83a 	sub	r6,r17,r6
    c550:	89a3803a 	cmpltu	r17,r17,r6
    c554:	40d1c83a 	sub	r8,r8,r3
    c558:	4451c83a 	sub	r8,r8,r17
    c55c:	3023883a 	mov	r17,r6
    c560:	4080202c 	andhi	r2,r8,128
    c564:	10002326 	beq	r2,zero,c5f4 <__adddf3+0x204>
    c568:	04c02034 	movhi	r19,128
    c56c:	9cffffc4 	addi	r19,r19,-1
    c570:	44e6703a 	and	r19,r8,r19
    c574:	98007626 	beq	r19,zero,c750 <__adddf3+0x360>
    c578:	9809883a 	mov	r4,r19
    c57c:	000ec300 	call	ec30 <__clzsi2>
    c580:	10fffe04 	addi	r3,r2,-8
    c584:	010007c4 	movi	r4,31
    c588:	20c07716 	blt	r4,r3,c768 <__adddf3+0x378>
    c58c:	00800804 	movi	r2,32
    c590:	10c5c83a 	sub	r2,r2,r3
    c594:	8884d83a 	srl	r2,r17,r2
    c598:	98d0983a 	sll	r8,r19,r3
    c59c:	88e2983a 	sll	r17,r17,r3
    c5a0:	1204b03a 	or	r2,r2,r8
    c5a4:	1c007416 	blt	r3,r16,c778 <__adddf3+0x388>
    c5a8:	1c21c83a 	sub	r16,r3,r16
    c5ac:	82000044 	addi	r8,r16,1
    c5b0:	00c007c4 	movi	r3,31
    c5b4:	1a009116 	blt	r3,r8,c7fc <__adddf3+0x40c>
    c5b8:	00c00804 	movi	r3,32
    c5bc:	1a07c83a 	sub	r3,r3,r8
    c5c0:	8a08d83a 	srl	r4,r17,r8
    c5c4:	88e2983a 	sll	r17,r17,r3
    c5c8:	10c6983a 	sll	r3,r2,r3
    c5cc:	1210d83a 	srl	r8,r2,r8
    c5d0:	8804c03a 	cmpne	r2,r17,zero
    c5d4:	1906b03a 	or	r3,r3,r4
    c5d8:	18a2b03a 	or	r17,r3,r2
    c5dc:	0021883a 	mov	r16,zero
    c5e0:	003fa206 	br	c46c <__alt_data_end+0xfffdc46c>
    c5e4:	1890b03a 	or	r8,r3,r2
    c5e8:	40017d26 	beq	r8,zero,cbe0 <__adddf3+0x7f0>
    c5ec:	1011883a 	mov	r8,r2
    c5f0:	1823883a 	mov	r17,r3
    c5f4:	888001cc 	andi	r2,r17,7
    c5f8:	103f9e1e 	bne	r2,zero,c474 <__alt_data_end+0xfffdc474>
    c5fc:	4004977a 	slli	r2,r8,29
    c600:	8822d0fa 	srli	r17,r17,3
    c604:	4010d0fa 	srli	r8,r8,3
    c608:	9007883a 	mov	r3,r18
    c60c:	1444b03a 	or	r2,r2,r17
    c610:	0101ffc4 	movi	r4,2047
    c614:	81002426 	beq	r16,r4,c6a8 <__adddf3+0x2b8>
    c618:	8120703a 	and	r16,r16,r4
    c61c:	01000434 	movhi	r4,16
    c620:	213fffc4 	addi	r4,r4,-1
    c624:	4110703a 	and	r8,r8,r4
    c628:	003fa806 	br	c4cc <__alt_data_end+0xfffdc4cc>
    c62c:	8089c83a 	sub	r4,r16,r2
    c630:	01005e0e 	bge	zero,r4,c7ac <__adddf3+0x3bc>
    c634:	10002b26 	beq	r2,zero,c6e4 <__adddf3+0x2f4>
    c638:	0081ffc4 	movi	r2,2047
    c63c:	80bf8b26 	beq	r16,r2,c46c <__alt_data_end+0xfffdc46c>
    c640:	4a402034 	orhi	r9,r9,128
    c644:	00800e04 	movi	r2,56
    c648:	1100a40e 	bge	r2,r4,c8dc <__adddf3+0x4ec>
    c64c:	498cb03a 	or	r6,r9,r6
    c650:	300ac03a 	cmpne	r5,r6,zero
    c654:	0013883a 	mov	r9,zero
    c658:	2c4b883a 	add	r5,r5,r17
    c65c:	2c63803a 	cmpltu	r17,r5,r17
    c660:	4a11883a 	add	r8,r9,r8
    c664:	8a11883a 	add	r8,r17,r8
    c668:	2823883a 	mov	r17,r5
    c66c:	4080202c 	andhi	r2,r8,128
    c670:	103fe026 	beq	r2,zero,c5f4 <__alt_data_end+0xfffdc5f4>
    c674:	84000044 	addi	r16,r16,1
    c678:	0081ffc4 	movi	r2,2047
    c67c:	8080d226 	beq	r16,r2,c9c8 <__adddf3+0x5d8>
    c680:	00bfe034 	movhi	r2,65408
    c684:	10bfffc4 	addi	r2,r2,-1
    c688:	4090703a 	and	r8,r8,r2
    c68c:	880ad07a 	srli	r5,r17,1
    c690:	400897fa 	slli	r4,r8,31
    c694:	88c0004c 	andi	r3,r17,1
    c698:	28e2b03a 	or	r17,r5,r3
    c69c:	4010d07a 	srli	r8,r8,1
    c6a0:	2462b03a 	or	r17,r4,r17
    c6a4:	003f7106 	br	c46c <__alt_data_end+0xfffdc46c>
    c6a8:	4088b03a 	or	r4,r8,r2
    c6ac:	20014526 	beq	r4,zero,cbc4 <__adddf3+0x7d4>
    c6b0:	01000434 	movhi	r4,16
    c6b4:	42000234 	orhi	r8,r8,8
    c6b8:	213fffc4 	addi	r4,r4,-1
    c6bc:	4110703a 	and	r8,r8,r4
    c6c0:	003f8206 	br	c4cc <__alt_data_end+0xfffdc4cc>
    c6c4:	18ffffc4 	addi	r3,r3,-1
    c6c8:	1800491e 	bne	r3,zero,c7f0 <__adddf3+0x400>
    c6cc:	898bc83a 	sub	r5,r17,r6
    c6d0:	8963803a 	cmpltu	r17,r17,r5
    c6d4:	4251c83a 	sub	r8,r8,r9
    c6d8:	4451c83a 	sub	r8,r8,r17
    c6dc:	2823883a 	mov	r17,r5
    c6e0:	003f9f06 	br	c560 <__alt_data_end+0xfffdc560>
    c6e4:	4984b03a 	or	r2,r9,r6
    c6e8:	103f6026 	beq	r2,zero,c46c <__alt_data_end+0xfffdc46c>
    c6ec:	213fffc4 	addi	r4,r4,-1
    c6f0:	2000931e 	bne	r4,zero,c940 <__adddf3+0x550>
    c6f4:	898d883a 	add	r6,r17,r6
    c6f8:	3463803a 	cmpltu	r17,r6,r17
    c6fc:	4251883a 	add	r8,r8,r9
    c700:	8a11883a 	add	r8,r17,r8
    c704:	3023883a 	mov	r17,r6
    c708:	003fd806 	br	c66c <__alt_data_end+0xfffdc66c>
    c70c:	1800541e 	bne	r3,zero,c860 <__adddf3+0x470>
    c710:	80800044 	addi	r2,r16,1
    c714:	1081ffcc 	andi	r2,r2,2047
    c718:	00c00044 	movi	r3,1
    c71c:	1880a00e 	bge	r3,r2,c9a0 <__adddf3+0x5b0>
    c720:	8989c83a 	sub	r4,r17,r6
    c724:	8905803a 	cmpltu	r2,r17,r4
    c728:	4267c83a 	sub	r19,r8,r9
    c72c:	98a7c83a 	sub	r19,r19,r2
    c730:	9880202c 	andhi	r2,r19,128
    c734:	10006326 	beq	r2,zero,c8c4 <__adddf3+0x4d4>
    c738:	3463c83a 	sub	r17,r6,r17
    c73c:	4a07c83a 	sub	r3,r9,r8
    c740:	344d803a 	cmpltu	r6,r6,r17
    c744:	19a7c83a 	sub	r19,r3,r6
    c748:	3825883a 	mov	r18,r7
    c74c:	983f8a1e 	bne	r19,zero,c578 <__alt_data_end+0xfffdc578>
    c750:	8809883a 	mov	r4,r17
    c754:	000ec300 	call	ec30 <__clzsi2>
    c758:	10800804 	addi	r2,r2,32
    c75c:	10fffe04 	addi	r3,r2,-8
    c760:	010007c4 	movi	r4,31
    c764:	20ff890e 	bge	r4,r3,c58c <__alt_data_end+0xfffdc58c>
    c768:	10bff604 	addi	r2,r2,-40
    c76c:	8884983a 	sll	r2,r17,r2
    c770:	0023883a 	mov	r17,zero
    c774:	1c3f8c0e 	bge	r3,r16,c5a8 <__alt_data_end+0xfffdc5a8>
    c778:	023fe034 	movhi	r8,65408
    c77c:	423fffc4 	addi	r8,r8,-1
    c780:	80e1c83a 	sub	r16,r16,r3
    c784:	1210703a 	and	r8,r2,r8
    c788:	003f3806 	br	c46c <__alt_data_end+0xfffdc46c>
    c78c:	9007883a 	mov	r3,r18
    c790:	0011883a 	mov	r8,zero
    c794:	0005883a 	mov	r2,zero
    c798:	003f4c06 	br	c4cc <__alt_data_end+0xfffdc4cc>
    c79c:	498cb03a 	or	r6,r9,r6
    c7a0:	300cc03a 	cmpne	r6,r6,zero
    c7a4:	0007883a 	mov	r3,zero
    c7a8:	003f6806 	br	c54c <__alt_data_end+0xfffdc54c>
    c7ac:	20009c1e 	bne	r4,zero,ca20 <__adddf3+0x630>
    c7b0:	80800044 	addi	r2,r16,1
    c7b4:	1141ffcc 	andi	r5,r2,2047
    c7b8:	01000044 	movi	r4,1
    c7bc:	2140670e 	bge	r4,r5,c95c <__adddf3+0x56c>
    c7c0:	0101ffc4 	movi	r4,2047
    c7c4:	11007f26 	beq	r2,r4,c9c4 <__adddf3+0x5d4>
    c7c8:	898d883a 	add	r6,r17,r6
    c7cc:	4247883a 	add	r3,r8,r9
    c7d0:	3451803a 	cmpltu	r8,r6,r17
    c7d4:	40d1883a 	add	r8,r8,r3
    c7d8:	402297fa 	slli	r17,r8,31
    c7dc:	300cd07a 	srli	r6,r6,1
    c7e0:	4010d07a 	srli	r8,r8,1
    c7e4:	1021883a 	mov	r16,r2
    c7e8:	89a2b03a 	or	r17,r17,r6
    c7ec:	003f1f06 	br	c46c <__alt_data_end+0xfffdc46c>
    c7f0:	0081ffc4 	movi	r2,2047
    c7f4:	80bf481e 	bne	r16,r2,c518 <__alt_data_end+0xfffdc518>
    c7f8:	003f1c06 	br	c46c <__alt_data_end+0xfffdc46c>
    c7fc:	843ff844 	addi	r16,r16,-31
    c800:	01000804 	movi	r4,32
    c804:	1406d83a 	srl	r3,r2,r16
    c808:	41005026 	beq	r8,r4,c94c <__adddf3+0x55c>
    c80c:	01001004 	movi	r4,64
    c810:	2211c83a 	sub	r8,r4,r8
    c814:	1204983a 	sll	r2,r2,r8
    c818:	88a2b03a 	or	r17,r17,r2
    c81c:	8822c03a 	cmpne	r17,r17,zero
    c820:	1c62b03a 	or	r17,r3,r17
    c824:	0011883a 	mov	r8,zero
    c828:	0021883a 	mov	r16,zero
    c82c:	003f7106 	br	c5f4 <__alt_data_end+0xfffdc5f4>
    c830:	193ff804 	addi	r4,r3,-32
    c834:	00800804 	movi	r2,32
    c838:	4908d83a 	srl	r4,r9,r4
    c83c:	18804526 	beq	r3,r2,c954 <__adddf3+0x564>
    c840:	00801004 	movi	r2,64
    c844:	10c5c83a 	sub	r2,r2,r3
    c848:	4886983a 	sll	r3,r9,r2
    c84c:	198cb03a 	or	r6,r3,r6
    c850:	300cc03a 	cmpne	r6,r6,zero
    c854:	218cb03a 	or	r6,r4,r6
    c858:	0007883a 	mov	r3,zero
    c85c:	003f3b06 	br	c54c <__alt_data_end+0xfffdc54c>
    c860:	80002a26 	beq	r16,zero,c90c <__adddf3+0x51c>
    c864:	0101ffc4 	movi	r4,2047
    c868:	11006826 	beq	r2,r4,ca0c <__adddf3+0x61c>
    c86c:	00c7c83a 	sub	r3,zero,r3
    c870:	42002034 	orhi	r8,r8,128
    c874:	01000e04 	movi	r4,56
    c878:	20c07c16 	blt	r4,r3,ca6c <__adddf3+0x67c>
    c87c:	010007c4 	movi	r4,31
    c880:	20c0da16 	blt	r4,r3,cbec <__adddf3+0x7fc>
    c884:	01000804 	movi	r4,32
    c888:	20c9c83a 	sub	r4,r4,r3
    c88c:	4114983a 	sll	r10,r8,r4
    c890:	88cad83a 	srl	r5,r17,r3
    c894:	8908983a 	sll	r4,r17,r4
    c898:	40c6d83a 	srl	r3,r8,r3
    c89c:	5162b03a 	or	r17,r10,r5
    c8a0:	2008c03a 	cmpne	r4,r4,zero
    c8a4:	8922b03a 	or	r17,r17,r4
    c8a8:	3463c83a 	sub	r17,r6,r17
    c8ac:	48c7c83a 	sub	r3,r9,r3
    c8b0:	344d803a 	cmpltu	r6,r6,r17
    c8b4:	1991c83a 	sub	r8,r3,r6
    c8b8:	1021883a 	mov	r16,r2
    c8bc:	3825883a 	mov	r18,r7
    c8c0:	003f2706 	br	c560 <__alt_data_end+0xfffdc560>
    c8c4:	24d0b03a 	or	r8,r4,r19
    c8c8:	40001b1e 	bne	r8,zero,c938 <__adddf3+0x548>
    c8cc:	0005883a 	mov	r2,zero
    c8d0:	0007883a 	mov	r3,zero
    c8d4:	0021883a 	mov	r16,zero
    c8d8:	003f4d06 	br	c610 <__alt_data_end+0xfffdc610>
    c8dc:	008007c4 	movi	r2,31
    c8e0:	11003c16 	blt	r2,r4,c9d4 <__adddf3+0x5e4>
    c8e4:	00800804 	movi	r2,32
    c8e8:	1105c83a 	sub	r2,r2,r4
    c8ec:	488e983a 	sll	r7,r9,r2
    c8f0:	310ad83a 	srl	r5,r6,r4
    c8f4:	3084983a 	sll	r2,r6,r2
    c8f8:	4912d83a 	srl	r9,r9,r4
    c8fc:	394ab03a 	or	r5,r7,r5
    c900:	1004c03a 	cmpne	r2,r2,zero
    c904:	288ab03a 	or	r5,r5,r2
    c908:	003f5306 	br	c658 <__alt_data_end+0xfffdc658>
    c90c:	4448b03a 	or	r4,r8,r17
    c910:	20003e26 	beq	r4,zero,ca0c <__adddf3+0x61c>
    c914:	00c6303a 	nor	r3,zero,r3
    c918:	18003a1e 	bne	r3,zero,ca04 <__adddf3+0x614>
    c91c:	3463c83a 	sub	r17,r6,r17
    c920:	4a07c83a 	sub	r3,r9,r8
    c924:	344d803a 	cmpltu	r6,r6,r17
    c928:	1991c83a 	sub	r8,r3,r6
    c92c:	1021883a 	mov	r16,r2
    c930:	3825883a 	mov	r18,r7
    c934:	003f0a06 	br	c560 <__alt_data_end+0xfffdc560>
    c938:	2023883a 	mov	r17,r4
    c93c:	003f0d06 	br	c574 <__alt_data_end+0xfffdc574>
    c940:	0081ffc4 	movi	r2,2047
    c944:	80bf3f1e 	bne	r16,r2,c644 <__alt_data_end+0xfffdc644>
    c948:	003ec806 	br	c46c <__alt_data_end+0xfffdc46c>
    c94c:	0005883a 	mov	r2,zero
    c950:	003fb106 	br	c818 <__alt_data_end+0xfffdc818>
    c954:	0007883a 	mov	r3,zero
    c958:	003fbc06 	br	c84c <__alt_data_end+0xfffdc84c>
    c95c:	4444b03a 	or	r2,r8,r17
    c960:	8000871e 	bne	r16,zero,cb80 <__adddf3+0x790>
    c964:	1000ba26 	beq	r2,zero,cc50 <__adddf3+0x860>
    c968:	4984b03a 	or	r2,r9,r6
    c96c:	103ebf26 	beq	r2,zero,c46c <__alt_data_end+0xfffdc46c>
    c970:	8985883a 	add	r2,r17,r6
    c974:	4247883a 	add	r3,r8,r9
    c978:	1451803a 	cmpltu	r8,r2,r17
    c97c:	40d1883a 	add	r8,r8,r3
    c980:	40c0202c 	andhi	r3,r8,128
    c984:	1023883a 	mov	r17,r2
    c988:	183f1a26 	beq	r3,zero,c5f4 <__alt_data_end+0xfffdc5f4>
    c98c:	00bfe034 	movhi	r2,65408
    c990:	10bfffc4 	addi	r2,r2,-1
    c994:	2021883a 	mov	r16,r4
    c998:	4090703a 	and	r8,r8,r2
    c99c:	003eb306 	br	c46c <__alt_data_end+0xfffdc46c>
    c9a0:	4444b03a 	or	r2,r8,r17
    c9a4:	8000291e 	bne	r16,zero,ca4c <__adddf3+0x65c>
    c9a8:	10004b1e 	bne	r2,zero,cad8 <__adddf3+0x6e8>
    c9ac:	4990b03a 	or	r8,r9,r6
    c9b0:	40008b26 	beq	r8,zero,cbe0 <__adddf3+0x7f0>
    c9b4:	4811883a 	mov	r8,r9
    c9b8:	3023883a 	mov	r17,r6
    c9bc:	3825883a 	mov	r18,r7
    c9c0:	003eaa06 	br	c46c <__alt_data_end+0xfffdc46c>
    c9c4:	1021883a 	mov	r16,r2
    c9c8:	0011883a 	mov	r8,zero
    c9cc:	0005883a 	mov	r2,zero
    c9d0:	003f0f06 	br	c610 <__alt_data_end+0xfffdc610>
    c9d4:	217ff804 	addi	r5,r4,-32
    c9d8:	00800804 	movi	r2,32
    c9dc:	494ad83a 	srl	r5,r9,r5
    c9e0:	20807d26 	beq	r4,r2,cbd8 <__adddf3+0x7e8>
    c9e4:	00801004 	movi	r2,64
    c9e8:	1109c83a 	sub	r4,r2,r4
    c9ec:	4912983a 	sll	r9,r9,r4
    c9f0:	498cb03a 	or	r6,r9,r6
    c9f4:	300cc03a 	cmpne	r6,r6,zero
    c9f8:	298ab03a 	or	r5,r5,r6
    c9fc:	0013883a 	mov	r9,zero
    ca00:	003f1506 	br	c658 <__alt_data_end+0xfffdc658>
    ca04:	0101ffc4 	movi	r4,2047
    ca08:	113f9a1e 	bne	r2,r4,c874 <__alt_data_end+0xfffdc874>
    ca0c:	4811883a 	mov	r8,r9
    ca10:	3023883a 	mov	r17,r6
    ca14:	1021883a 	mov	r16,r2
    ca18:	3825883a 	mov	r18,r7
    ca1c:	003e9306 	br	c46c <__alt_data_end+0xfffdc46c>
    ca20:	8000161e 	bne	r16,zero,ca7c <__adddf3+0x68c>
    ca24:	444ab03a 	or	r5,r8,r17
    ca28:	28005126 	beq	r5,zero,cb70 <__adddf3+0x780>
    ca2c:	0108303a 	nor	r4,zero,r4
    ca30:	20004d1e 	bne	r4,zero,cb68 <__adddf3+0x778>
    ca34:	89a3883a 	add	r17,r17,r6
    ca38:	4253883a 	add	r9,r8,r9
    ca3c:	898d803a 	cmpltu	r6,r17,r6
    ca40:	3251883a 	add	r8,r6,r9
    ca44:	1021883a 	mov	r16,r2
    ca48:	003f0806 	br	c66c <__alt_data_end+0xfffdc66c>
    ca4c:	1000301e 	bne	r2,zero,cb10 <__adddf3+0x720>
    ca50:	4984b03a 	or	r2,r9,r6
    ca54:	10007126 	beq	r2,zero,cc1c <__adddf3+0x82c>
    ca58:	4811883a 	mov	r8,r9
    ca5c:	3023883a 	mov	r17,r6
    ca60:	3825883a 	mov	r18,r7
    ca64:	0401ffc4 	movi	r16,2047
    ca68:	003e8006 	br	c46c <__alt_data_end+0xfffdc46c>
    ca6c:	4462b03a 	or	r17,r8,r17
    ca70:	8822c03a 	cmpne	r17,r17,zero
    ca74:	0007883a 	mov	r3,zero
    ca78:	003f8b06 	br	c8a8 <__alt_data_end+0xfffdc8a8>
    ca7c:	0141ffc4 	movi	r5,2047
    ca80:	11403b26 	beq	r2,r5,cb70 <__adddf3+0x780>
    ca84:	0109c83a 	sub	r4,zero,r4
    ca88:	42002034 	orhi	r8,r8,128
    ca8c:	01400e04 	movi	r5,56
    ca90:	29006716 	blt	r5,r4,cc30 <__adddf3+0x840>
    ca94:	014007c4 	movi	r5,31
    ca98:	29007016 	blt	r5,r4,cc5c <__adddf3+0x86c>
    ca9c:	01400804 	movi	r5,32
    caa0:	290bc83a 	sub	r5,r5,r4
    caa4:	4154983a 	sll	r10,r8,r5
    caa8:	890ed83a 	srl	r7,r17,r4
    caac:	894a983a 	sll	r5,r17,r5
    cab0:	4108d83a 	srl	r4,r8,r4
    cab4:	51e2b03a 	or	r17,r10,r7
    cab8:	280ac03a 	cmpne	r5,r5,zero
    cabc:	8962b03a 	or	r17,r17,r5
    cac0:	89a3883a 	add	r17,r17,r6
    cac4:	2253883a 	add	r9,r4,r9
    cac8:	898d803a 	cmpltu	r6,r17,r6
    cacc:	3251883a 	add	r8,r6,r9
    cad0:	1021883a 	mov	r16,r2
    cad4:	003ee506 	br	c66c <__alt_data_end+0xfffdc66c>
    cad8:	4984b03a 	or	r2,r9,r6
    cadc:	103e6326 	beq	r2,zero,c46c <__alt_data_end+0xfffdc46c>
    cae0:	8987c83a 	sub	r3,r17,r6
    cae4:	88c9803a 	cmpltu	r4,r17,r3
    cae8:	4245c83a 	sub	r2,r8,r9
    caec:	1105c83a 	sub	r2,r2,r4
    caf0:	1100202c 	andhi	r4,r2,128
    caf4:	203ebb26 	beq	r4,zero,c5e4 <__alt_data_end+0xfffdc5e4>
    caf8:	3463c83a 	sub	r17,r6,r17
    cafc:	4a07c83a 	sub	r3,r9,r8
    cb00:	344d803a 	cmpltu	r6,r6,r17
    cb04:	1991c83a 	sub	r8,r3,r6
    cb08:	3825883a 	mov	r18,r7
    cb0c:	003e5706 	br	c46c <__alt_data_end+0xfffdc46c>
    cb10:	4984b03a 	or	r2,r9,r6
    cb14:	10002e26 	beq	r2,zero,cbd0 <__adddf3+0x7e0>
    cb18:	4004d0fa 	srli	r2,r8,3
    cb1c:	8822d0fa 	srli	r17,r17,3
    cb20:	4010977a 	slli	r8,r8,29
    cb24:	10c0022c 	andhi	r3,r2,8
    cb28:	4462b03a 	or	r17,r8,r17
    cb2c:	18000826 	beq	r3,zero,cb50 <__adddf3+0x760>
    cb30:	4808d0fa 	srli	r4,r9,3
    cb34:	20c0022c 	andhi	r3,r4,8
    cb38:	1800051e 	bne	r3,zero,cb50 <__adddf3+0x760>
    cb3c:	300cd0fa 	srli	r6,r6,3
    cb40:	4806977a 	slli	r3,r9,29
    cb44:	2005883a 	mov	r2,r4
    cb48:	3825883a 	mov	r18,r7
    cb4c:	19a2b03a 	or	r17,r3,r6
    cb50:	8810d77a 	srli	r8,r17,29
    cb54:	100490fa 	slli	r2,r2,3
    cb58:	882290fa 	slli	r17,r17,3
    cb5c:	0401ffc4 	movi	r16,2047
    cb60:	4090b03a 	or	r8,r8,r2
    cb64:	003e4106 	br	c46c <__alt_data_end+0xfffdc46c>
    cb68:	0141ffc4 	movi	r5,2047
    cb6c:	117fc71e 	bne	r2,r5,ca8c <__alt_data_end+0xfffdca8c>
    cb70:	4811883a 	mov	r8,r9
    cb74:	3023883a 	mov	r17,r6
    cb78:	1021883a 	mov	r16,r2
    cb7c:	003e3b06 	br	c46c <__alt_data_end+0xfffdc46c>
    cb80:	10002f26 	beq	r2,zero,cc40 <__adddf3+0x850>
    cb84:	4984b03a 	or	r2,r9,r6
    cb88:	10001126 	beq	r2,zero,cbd0 <__adddf3+0x7e0>
    cb8c:	4004d0fa 	srli	r2,r8,3
    cb90:	8822d0fa 	srli	r17,r17,3
    cb94:	4010977a 	slli	r8,r8,29
    cb98:	10c0022c 	andhi	r3,r2,8
    cb9c:	4462b03a 	or	r17,r8,r17
    cba0:	183feb26 	beq	r3,zero,cb50 <__alt_data_end+0xfffdcb50>
    cba4:	4808d0fa 	srli	r4,r9,3
    cba8:	20c0022c 	andhi	r3,r4,8
    cbac:	183fe81e 	bne	r3,zero,cb50 <__alt_data_end+0xfffdcb50>
    cbb0:	300cd0fa 	srli	r6,r6,3
    cbb4:	4806977a 	slli	r3,r9,29
    cbb8:	2005883a 	mov	r2,r4
    cbbc:	19a2b03a 	or	r17,r3,r6
    cbc0:	003fe306 	br	cb50 <__alt_data_end+0xfffdcb50>
    cbc4:	0011883a 	mov	r8,zero
    cbc8:	0005883a 	mov	r2,zero
    cbcc:	003e3f06 	br	c4cc <__alt_data_end+0xfffdc4cc>
    cbd0:	0401ffc4 	movi	r16,2047
    cbd4:	003e2506 	br	c46c <__alt_data_end+0xfffdc46c>
    cbd8:	0013883a 	mov	r9,zero
    cbdc:	003f8406 	br	c9f0 <__alt_data_end+0xfffdc9f0>
    cbe0:	0005883a 	mov	r2,zero
    cbe4:	0007883a 	mov	r3,zero
    cbe8:	003e8906 	br	c610 <__alt_data_end+0xfffdc610>
    cbec:	197ff804 	addi	r5,r3,-32
    cbf0:	01000804 	movi	r4,32
    cbf4:	414ad83a 	srl	r5,r8,r5
    cbf8:	19002426 	beq	r3,r4,cc8c <__adddf3+0x89c>
    cbfc:	01001004 	movi	r4,64
    cc00:	20c7c83a 	sub	r3,r4,r3
    cc04:	40c6983a 	sll	r3,r8,r3
    cc08:	1c46b03a 	or	r3,r3,r17
    cc0c:	1806c03a 	cmpne	r3,r3,zero
    cc10:	28e2b03a 	or	r17,r5,r3
    cc14:	0007883a 	mov	r3,zero
    cc18:	003f2306 	br	c8a8 <__alt_data_end+0xfffdc8a8>
    cc1c:	0007883a 	mov	r3,zero
    cc20:	5811883a 	mov	r8,r11
    cc24:	00bfffc4 	movi	r2,-1
    cc28:	0401ffc4 	movi	r16,2047
    cc2c:	003e7806 	br	c610 <__alt_data_end+0xfffdc610>
    cc30:	4462b03a 	or	r17,r8,r17
    cc34:	8822c03a 	cmpne	r17,r17,zero
    cc38:	0009883a 	mov	r4,zero
    cc3c:	003fa006 	br	cac0 <__alt_data_end+0xfffdcac0>
    cc40:	4811883a 	mov	r8,r9
    cc44:	3023883a 	mov	r17,r6
    cc48:	0401ffc4 	movi	r16,2047
    cc4c:	003e0706 	br	c46c <__alt_data_end+0xfffdc46c>
    cc50:	4811883a 	mov	r8,r9
    cc54:	3023883a 	mov	r17,r6
    cc58:	003e0406 	br	c46c <__alt_data_end+0xfffdc46c>
    cc5c:	21fff804 	addi	r7,r4,-32
    cc60:	01400804 	movi	r5,32
    cc64:	41ced83a 	srl	r7,r8,r7
    cc68:	21400a26 	beq	r4,r5,cc94 <__adddf3+0x8a4>
    cc6c:	01401004 	movi	r5,64
    cc70:	2909c83a 	sub	r4,r5,r4
    cc74:	4108983a 	sll	r4,r8,r4
    cc78:	2448b03a 	or	r4,r4,r17
    cc7c:	2008c03a 	cmpne	r4,r4,zero
    cc80:	3922b03a 	or	r17,r7,r4
    cc84:	0009883a 	mov	r4,zero
    cc88:	003f8d06 	br	cac0 <__alt_data_end+0xfffdcac0>
    cc8c:	0007883a 	mov	r3,zero
    cc90:	003fdd06 	br	cc08 <__alt_data_end+0xfffdcc08>
    cc94:	0009883a 	mov	r4,zero
    cc98:	003ff706 	br	cc78 <__alt_data_end+0xfffdcc78>

0000cc9c <__divdf3>:
    cc9c:	defff004 	addi	sp,sp,-64
    cca0:	dc800815 	stw	r18,32(sp)
    cca4:	2824d53a 	srli	r18,r5,20
    cca8:	dd800c15 	stw	r22,48(sp)
    ccac:	282cd7fa 	srli	r22,r5,31
    ccb0:	dc000615 	stw	r16,24(sp)
    ccb4:	04000434 	movhi	r16,16
    ccb8:	843fffc4 	addi	r16,r16,-1
    ccbc:	dfc00f15 	stw	ra,60(sp)
    ccc0:	df000e15 	stw	fp,56(sp)
    ccc4:	ddc00d15 	stw	r23,52(sp)
    ccc8:	dd400b15 	stw	r21,44(sp)
    cccc:	dd000a15 	stw	r20,40(sp)
    ccd0:	dcc00915 	stw	r19,36(sp)
    ccd4:	dc400715 	stw	r17,28(sp)
    ccd8:	9481ffcc 	andi	r18,r18,2047
    ccdc:	2c20703a 	and	r16,r5,r16
    cce0:	b2003fcc 	andi	r8,r22,255
    cce4:	90006126 	beq	r18,zero,ce6c <__divdf3+0x1d0>
    cce8:	0081ffc4 	movi	r2,2047
    ccec:	202b883a 	mov	r21,r4
    ccf0:	90803726 	beq	r18,r2,cdd0 <__divdf3+0x134>
    ccf4:	80800434 	orhi	r2,r16,16
    ccf8:	100490fa 	slli	r2,r2,3
    ccfc:	2020d77a 	srli	r16,r4,29
    cd00:	202a90fa 	slli	r21,r4,3
    cd04:	94bf0044 	addi	r18,r18,-1023
    cd08:	80a0b03a 	or	r16,r16,r2
    cd0c:	0013883a 	mov	r9,zero
    cd10:	000b883a 	mov	r5,zero
    cd14:	3806d53a 	srli	r3,r7,20
    cd18:	382ed7fa 	srli	r23,r7,31
    cd1c:	04400434 	movhi	r17,16
    cd20:	8c7fffc4 	addi	r17,r17,-1
    cd24:	18c1ffcc 	andi	r3,r3,2047
    cd28:	3029883a 	mov	r20,r6
    cd2c:	3c62703a 	and	r17,r7,r17
    cd30:	bf003fcc 	andi	fp,r23,255
    cd34:	18006e26 	beq	r3,zero,cef0 <__divdf3+0x254>
    cd38:	0081ffc4 	movi	r2,2047
    cd3c:	18806626 	beq	r3,r2,ced8 <__divdf3+0x23c>
    cd40:	88800434 	orhi	r2,r17,16
    cd44:	100490fa 	slli	r2,r2,3
    cd48:	3022d77a 	srli	r17,r6,29
    cd4c:	302890fa 	slli	r20,r6,3
    cd50:	18ff0044 	addi	r3,r3,-1023
    cd54:	88a2b03a 	or	r17,r17,r2
    cd58:	000f883a 	mov	r7,zero
    cd5c:	b5e6f03a 	xor	r19,r22,r23
    cd60:	3a4cb03a 	or	r6,r7,r9
    cd64:	008003c4 	movi	r2,15
    cd68:	9809883a 	mov	r4,r19
    cd6c:	90c7c83a 	sub	r3,r18,r3
    cd70:	9cc03fcc 	andi	r19,r19,255
    cd74:	11809636 	bltu	r2,r6,cfd0 <__divdf3+0x334>
    cd78:	300c90ba 	slli	r6,r6,2
    cd7c:	00800074 	movhi	r2,1
    cd80:	10b36404 	addi	r2,r2,-12912
    cd84:	308d883a 	add	r6,r6,r2
    cd88:	30800017 	ldw	r2,0(r6)
    cd8c:	1000683a 	jmp	r2
    cd90:	0000cfd0 	cmplti	zero,zero,831
    cd94:	0000ce08 	cmpgei	zero,zero,824
    cd98:	0000cfc0 	call	cfc <__divsi3+0x30>
    cd9c:	0000cdfc 	xorhi	zero,zero,823
    cda0:	0000cfc0 	call	cfc <__divsi3+0x30>
    cda4:	0000cf94 	movui	zero,830
    cda8:	0000cfc0 	call	cfc <__divsi3+0x30>
    cdac:	0000cdfc 	xorhi	zero,zero,823
    cdb0:	0000ce08 	cmpgei	zero,zero,824
    cdb4:	0000ce08 	cmpgei	zero,zero,824
    cdb8:	0000cf94 	movui	zero,830
    cdbc:	0000cdfc 	xorhi	zero,zero,823
    cdc0:	0000cdec 	andhi	zero,zero,823
    cdc4:	0000cdec 	andhi	zero,zero,823
    cdc8:	0000cdec 	andhi	zero,zero,823
    cdcc:	0000d358 	cmpnei	zero,zero,845
    cdd0:	2404b03a 	or	r2,r4,r16
    cdd4:	10006c1e 	bne	r2,zero,cf88 <__divdf3+0x2ec>
    cdd8:	02400204 	movi	r9,8
    cddc:	0021883a 	mov	r16,zero
    cde0:	002b883a 	mov	r21,zero
    cde4:	01400084 	movi	r5,2
    cde8:	003fca06 	br	cd14 <__alt_data_end+0xfffdcd14>
    cdec:	8023883a 	mov	r17,r16
    cdf0:	a829883a 	mov	r20,r21
    cdf4:	4039883a 	mov	fp,r8
    cdf8:	280f883a 	mov	r7,r5
    cdfc:	00800084 	movi	r2,2
    ce00:	3881601e 	bne	r7,r2,d384 <__divdf3+0x6e8>
    ce04:	e027883a 	mov	r19,fp
    ce08:	9900004c 	andi	r4,r19,1
    ce0c:	0081ffc4 	movi	r2,2047
    ce10:	0021883a 	mov	r16,zero
    ce14:	002b883a 	mov	r21,zero
    ce18:	1004953a 	slli	r2,r2,20
    ce1c:	20c03fcc 	andi	r3,r4,255
    ce20:	01400434 	movhi	r5,16
    ce24:	297fffc4 	addi	r5,r5,-1
    ce28:	180697fa 	slli	r3,r3,31
    ce2c:	8160703a 	and	r16,r16,r5
    ce30:	80a0b03a 	or	r16,r16,r2
    ce34:	80c6b03a 	or	r3,r16,r3
    ce38:	a805883a 	mov	r2,r21
    ce3c:	dfc00f17 	ldw	ra,60(sp)
    ce40:	df000e17 	ldw	fp,56(sp)
    ce44:	ddc00d17 	ldw	r23,52(sp)
    ce48:	dd800c17 	ldw	r22,48(sp)
    ce4c:	dd400b17 	ldw	r21,44(sp)
    ce50:	dd000a17 	ldw	r20,40(sp)
    ce54:	dcc00917 	ldw	r19,36(sp)
    ce58:	dc800817 	ldw	r18,32(sp)
    ce5c:	dc400717 	ldw	r17,28(sp)
    ce60:	dc000617 	ldw	r16,24(sp)
    ce64:	dec01004 	addi	sp,sp,64
    ce68:	f800283a 	ret
    ce6c:	2404b03a 	or	r2,r4,r16
    ce70:	2023883a 	mov	r17,r4
    ce74:	10003f26 	beq	r2,zero,cf74 <__divdf3+0x2d8>
    ce78:	80015e26 	beq	r16,zero,d3f4 <__divdf3+0x758>
    ce7c:	8009883a 	mov	r4,r16
    ce80:	d9800215 	stw	r6,8(sp)
    ce84:	d9c00515 	stw	r7,20(sp)
    ce88:	da000415 	stw	r8,16(sp)
    ce8c:	000ec300 	call	ec30 <__clzsi2>
    ce90:	d9800217 	ldw	r6,8(sp)
    ce94:	d9c00517 	ldw	r7,20(sp)
    ce98:	da000417 	ldw	r8,16(sp)
    ce9c:	113ffd44 	addi	r4,r2,-11
    cea0:	00c00704 	movi	r3,28
    cea4:	19014f16 	blt	r3,r4,d3e4 <__divdf3+0x748>
    cea8:	00c00744 	movi	r3,29
    ceac:	157ffe04 	addi	r21,r2,-8
    ceb0:	1907c83a 	sub	r3,r3,r4
    ceb4:	8560983a 	sll	r16,r16,r21
    ceb8:	88c6d83a 	srl	r3,r17,r3
    cebc:	8d6a983a 	sll	r21,r17,r21
    cec0:	1c20b03a 	or	r16,r3,r16
    cec4:	1080fcc4 	addi	r2,r2,1011
    cec8:	00a5c83a 	sub	r18,zero,r2
    cecc:	0013883a 	mov	r9,zero
    ced0:	000b883a 	mov	r5,zero
    ced4:	003f8f06 	br	cd14 <__alt_data_end+0xfffdcd14>
    ced8:	3444b03a 	or	r2,r6,r17
    cedc:	1000231e 	bne	r2,zero,cf6c <__divdf3+0x2d0>
    cee0:	0023883a 	mov	r17,zero
    cee4:	0029883a 	mov	r20,zero
    cee8:	01c00084 	movi	r7,2
    ceec:	003f9b06 	br	cd5c <__alt_data_end+0xfffdcd5c>
    cef0:	3444b03a 	or	r2,r6,r17
    cef4:	10001926 	beq	r2,zero,cf5c <__divdf3+0x2c0>
    cef8:	88014b26 	beq	r17,zero,d428 <__divdf3+0x78c>
    cefc:	8809883a 	mov	r4,r17
    cf00:	d9400115 	stw	r5,4(sp)
    cf04:	d9800215 	stw	r6,8(sp)
    cf08:	da000415 	stw	r8,16(sp)
    cf0c:	da400315 	stw	r9,12(sp)
    cf10:	000ec300 	call	ec30 <__clzsi2>
    cf14:	d9400117 	ldw	r5,4(sp)
    cf18:	d9800217 	ldw	r6,8(sp)
    cf1c:	da000417 	ldw	r8,16(sp)
    cf20:	da400317 	ldw	r9,12(sp)
    cf24:	113ffd44 	addi	r4,r2,-11
    cf28:	00c00704 	movi	r3,28
    cf2c:	19013a16 	blt	r3,r4,d418 <__divdf3+0x77c>
    cf30:	00c00744 	movi	r3,29
    cf34:	153ffe04 	addi	r20,r2,-8
    cf38:	1907c83a 	sub	r3,r3,r4
    cf3c:	8d22983a 	sll	r17,r17,r20
    cf40:	30c6d83a 	srl	r3,r6,r3
    cf44:	3528983a 	sll	r20,r6,r20
    cf48:	1c62b03a 	or	r17,r3,r17
    cf4c:	1080fcc4 	addi	r2,r2,1011
    cf50:	0087c83a 	sub	r3,zero,r2
    cf54:	000f883a 	mov	r7,zero
    cf58:	003f8006 	br	cd5c <__alt_data_end+0xfffdcd5c>
    cf5c:	0023883a 	mov	r17,zero
    cf60:	0029883a 	mov	r20,zero
    cf64:	01c00044 	movi	r7,1
    cf68:	003f7c06 	br	cd5c <__alt_data_end+0xfffdcd5c>
    cf6c:	01c000c4 	movi	r7,3
    cf70:	003f7a06 	br	cd5c <__alt_data_end+0xfffdcd5c>
    cf74:	02400104 	movi	r9,4
    cf78:	0021883a 	mov	r16,zero
    cf7c:	002b883a 	mov	r21,zero
    cf80:	01400044 	movi	r5,1
    cf84:	003f6306 	br	cd14 <__alt_data_end+0xfffdcd14>
    cf88:	02400304 	movi	r9,12
    cf8c:	014000c4 	movi	r5,3
    cf90:	003f6006 	br	cd14 <__alt_data_end+0xfffdcd14>
    cf94:	04000434 	movhi	r16,16
    cf98:	0009883a 	mov	r4,zero
    cf9c:	843fffc4 	addi	r16,r16,-1
    cfa0:	057fffc4 	movi	r21,-1
    cfa4:	0081ffc4 	movi	r2,2047
    cfa8:	003f9b06 	br	ce18 <__alt_data_end+0xfffdce18>
    cfac:	00c00044 	movi	r3,1
    cfb0:	1887c83a 	sub	r3,r3,r2
    cfb4:	01000e04 	movi	r4,56
    cfb8:	20c1530e 	bge	r4,r3,d508 <__divdf3+0x86c>
    cfbc:	9900004c 	andi	r4,r19,1
    cfc0:	0005883a 	mov	r2,zero
    cfc4:	0021883a 	mov	r16,zero
    cfc8:	002b883a 	mov	r21,zero
    cfcc:	003f9206 	br	ce18 <__alt_data_end+0xfffdce18>
    cfd0:	8c012e36 	bltu	r17,r16,d48c <__divdf3+0x7f0>
    cfd4:	84412c26 	beq	r16,r17,d488 <__divdf3+0x7ec>
    cfd8:	a82f883a 	mov	r23,r21
    cfdc:	18ffffc4 	addi	r3,r3,-1
    cfe0:	002b883a 	mov	r21,zero
    cfe4:	a004d63a 	srli	r2,r20,24
    cfe8:	8822923a 	slli	r17,r17,8
    cfec:	a028923a 	slli	r20,r20,8
    cff0:	8009883a 	mov	r4,r16
    cff4:	88acb03a 	or	r22,r17,r2
    cff8:	dd000015 	stw	r20,0(sp)
    cffc:	b028d43a 	srli	r20,r22,16
    d000:	d8c00215 	stw	r3,8(sp)
    d004:	b4bfffcc 	andi	r18,r22,65535
    d008:	a00b883a 	mov	r5,r20
    d00c:	0000dc40 	call	dc4 <__udivsi3>
    d010:	100b883a 	mov	r5,r2
    d014:	9009883a 	mov	r4,r18
    d018:	1023883a 	mov	r17,r2
    d01c:	000c3c80 	call	c3c8 <__mulsi3>
    d020:	8009883a 	mov	r4,r16
    d024:	a00b883a 	mov	r5,r20
    d028:	1039883a 	mov	fp,r2
    d02c:	0000e280 	call	e28 <__umodsi3>
    d030:	1004943a 	slli	r2,r2,16
    d034:	b808d43a 	srli	r4,r23,16
    d038:	d8c00217 	ldw	r3,8(sp)
    d03c:	2084b03a 	or	r2,r4,r2
    d040:	1700062e 	bgeu	r2,fp,d05c <__divdf3+0x3c0>
    d044:	1585883a 	add	r2,r2,r22
    d048:	893fffc4 	addi	r4,r17,-1
    d04c:	15811d36 	bltu	r2,r22,d4c4 <__divdf3+0x828>
    d050:	17011c2e 	bgeu	r2,fp,d4c4 <__divdf3+0x828>
    d054:	8c7fff84 	addi	r17,r17,-2
    d058:	1585883a 	add	r2,r2,r22
    d05c:	1739c83a 	sub	fp,r2,fp
    d060:	a00b883a 	mov	r5,r20
    d064:	e009883a 	mov	r4,fp
    d068:	d8c00215 	stw	r3,8(sp)
    d06c:	0000dc40 	call	dc4 <__udivsi3>
    d070:	100b883a 	mov	r5,r2
    d074:	9009883a 	mov	r4,r18
    d078:	1021883a 	mov	r16,r2
    d07c:	000c3c80 	call	c3c8 <__mulsi3>
    d080:	a00b883a 	mov	r5,r20
    d084:	e009883a 	mov	r4,fp
    d088:	d8800415 	stw	r2,16(sp)
    d08c:	0000e280 	call	e28 <__umodsi3>
    d090:	1004943a 	slli	r2,r2,16
    d094:	da000417 	ldw	r8,16(sp)
    d098:	bdffffcc 	andi	r23,r23,65535
    d09c:	b884b03a 	or	r2,r23,r2
    d0a0:	d8c00217 	ldw	r3,8(sp)
    d0a4:	1200062e 	bgeu	r2,r8,d0c0 <__divdf3+0x424>
    d0a8:	1585883a 	add	r2,r2,r22
    d0ac:	813fffc4 	addi	r4,r16,-1
    d0b0:	15810236 	bltu	r2,r22,d4bc <__divdf3+0x820>
    d0b4:	1201012e 	bgeu	r2,r8,d4bc <__divdf3+0x820>
    d0b8:	843fff84 	addi	r16,r16,-2
    d0bc:	1585883a 	add	r2,r2,r22
    d0c0:	8822943a 	slli	r17,r17,16
    d0c4:	d9800017 	ldw	r6,0(sp)
    d0c8:	1211c83a 	sub	r8,r2,r8
    d0cc:	8c22b03a 	or	r17,r17,r16
    d0d0:	373fffcc 	andi	fp,r6,65535
    d0d4:	8abfffcc 	andi	r10,r17,65535
    d0d8:	8820d43a 	srli	r16,r17,16
    d0dc:	5009883a 	mov	r4,r10
    d0e0:	e00b883a 	mov	r5,fp
    d0e4:	302ed43a 	srli	r23,r6,16
    d0e8:	d8c00215 	stw	r3,8(sp)
    d0ec:	da000415 	stw	r8,16(sp)
    d0f0:	da800115 	stw	r10,4(sp)
    d0f4:	000c3c80 	call	c3c8 <__mulsi3>
    d0f8:	800b883a 	mov	r5,r16
    d0fc:	e009883a 	mov	r4,fp
    d100:	d8800515 	stw	r2,20(sp)
    d104:	000c3c80 	call	c3c8 <__mulsi3>
    d108:	8009883a 	mov	r4,r16
    d10c:	b80b883a 	mov	r5,r23
    d110:	d8800315 	stw	r2,12(sp)
    d114:	000c3c80 	call	c3c8 <__mulsi3>
    d118:	da800117 	ldw	r10,4(sp)
    d11c:	b80b883a 	mov	r5,r23
    d120:	1021883a 	mov	r16,r2
    d124:	5009883a 	mov	r4,r10
    d128:	000c3c80 	call	c3c8 <__mulsi3>
    d12c:	d9c00517 	ldw	r7,20(sp)
    d130:	da400317 	ldw	r9,12(sp)
    d134:	d8c00217 	ldw	r3,8(sp)
    d138:	3808d43a 	srli	r4,r7,16
    d13c:	1245883a 	add	r2,r2,r9
    d140:	da000417 	ldw	r8,16(sp)
    d144:	2085883a 	add	r2,r4,r2
    d148:	1240022e 	bgeu	r2,r9,d154 <__divdf3+0x4b8>
    d14c:	01000074 	movhi	r4,1
    d150:	8121883a 	add	r16,r16,r4
    d154:	1008d43a 	srli	r4,r2,16
    d158:	1004943a 	slli	r2,r2,16
    d15c:	39ffffcc 	andi	r7,r7,65535
    d160:	2409883a 	add	r4,r4,r16
    d164:	11c5883a 	add	r2,r2,r7
    d168:	4100bb36 	bltu	r8,r4,d458 <__divdf3+0x7bc>
    d16c:	4100d726 	beq	r8,r4,d4cc <__divdf3+0x830>
    d170:	4109c83a 	sub	r4,r8,r4
    d174:	a8a1c83a 	sub	r16,r21,r2
    d178:	ac2b803a 	cmpltu	r21,r21,r16
    d17c:	256bc83a 	sub	r21,r4,r21
    d180:	b540d926 	beq	r22,r21,d4e8 <__divdf3+0x84c>
    d184:	a00b883a 	mov	r5,r20
    d188:	a809883a 	mov	r4,r21
    d18c:	d8c00215 	stw	r3,8(sp)
    d190:	0000dc40 	call	dc4 <__udivsi3>
    d194:	100b883a 	mov	r5,r2
    d198:	9009883a 	mov	r4,r18
    d19c:	d8800515 	stw	r2,20(sp)
    d1a0:	000c3c80 	call	c3c8 <__mulsi3>
    d1a4:	a809883a 	mov	r4,r21
    d1a8:	a00b883a 	mov	r5,r20
    d1ac:	d8800415 	stw	r2,16(sp)
    d1b0:	0000e280 	call	e28 <__umodsi3>
    d1b4:	1004943a 	slli	r2,r2,16
    d1b8:	8008d43a 	srli	r4,r16,16
    d1bc:	da000417 	ldw	r8,16(sp)
    d1c0:	d8c00217 	ldw	r3,8(sp)
    d1c4:	2084b03a 	or	r2,r4,r2
    d1c8:	d9c00517 	ldw	r7,20(sp)
    d1cc:	1200062e 	bgeu	r2,r8,d1e8 <__divdf3+0x54c>
    d1d0:	1585883a 	add	r2,r2,r22
    d1d4:	393fffc4 	addi	r4,r7,-1
    d1d8:	1580c536 	bltu	r2,r22,d4f0 <__divdf3+0x854>
    d1dc:	1200c42e 	bgeu	r2,r8,d4f0 <__divdf3+0x854>
    d1e0:	39ffff84 	addi	r7,r7,-2
    d1e4:	1585883a 	add	r2,r2,r22
    d1e8:	122bc83a 	sub	r21,r2,r8
    d1ec:	a00b883a 	mov	r5,r20
    d1f0:	a809883a 	mov	r4,r21
    d1f4:	d8c00215 	stw	r3,8(sp)
    d1f8:	d9c00515 	stw	r7,20(sp)
    d1fc:	0000dc40 	call	dc4 <__udivsi3>
    d200:	9009883a 	mov	r4,r18
    d204:	100b883a 	mov	r5,r2
    d208:	d8800415 	stw	r2,16(sp)
    d20c:	000c3c80 	call	c3c8 <__mulsi3>
    d210:	a809883a 	mov	r4,r21
    d214:	a00b883a 	mov	r5,r20
    d218:	1025883a 	mov	r18,r2
    d21c:	0000e280 	call	e28 <__umodsi3>
    d220:	1004943a 	slli	r2,r2,16
    d224:	813fffcc 	andi	r4,r16,65535
    d228:	d8c00217 	ldw	r3,8(sp)
    d22c:	20a0b03a 	or	r16,r4,r2
    d230:	d9c00517 	ldw	r7,20(sp)
    d234:	da000417 	ldw	r8,16(sp)
    d238:	8480062e 	bgeu	r16,r18,d254 <__divdf3+0x5b8>
    d23c:	85a1883a 	add	r16,r16,r22
    d240:	40bfffc4 	addi	r2,r8,-1
    d244:	8580ac36 	bltu	r16,r22,d4f8 <__divdf3+0x85c>
    d248:	8480ab2e 	bgeu	r16,r18,d4f8 <__divdf3+0x85c>
    d24c:	423fff84 	addi	r8,r8,-2
    d250:	85a1883a 	add	r16,r16,r22
    d254:	3804943a 	slli	r2,r7,16
    d258:	84a1c83a 	sub	r16,r16,r18
    d25c:	e009883a 	mov	r4,fp
    d260:	1228b03a 	or	r20,r2,r8
    d264:	a1ffffcc 	andi	r7,r20,65535
    d268:	a024d43a 	srli	r18,r20,16
    d26c:	380b883a 	mov	r5,r7
    d270:	d8c00215 	stw	r3,8(sp)
    d274:	d9c00515 	stw	r7,20(sp)
    d278:	000c3c80 	call	c3c8 <__mulsi3>
    d27c:	900b883a 	mov	r5,r18
    d280:	e009883a 	mov	r4,fp
    d284:	102b883a 	mov	r21,r2
    d288:	000c3c80 	call	c3c8 <__mulsi3>
    d28c:	900b883a 	mov	r5,r18
    d290:	b809883a 	mov	r4,r23
    d294:	1039883a 	mov	fp,r2
    d298:	000c3c80 	call	c3c8 <__mulsi3>
    d29c:	d9c00517 	ldw	r7,20(sp)
    d2a0:	b80b883a 	mov	r5,r23
    d2a4:	1025883a 	mov	r18,r2
    d2a8:	3809883a 	mov	r4,r7
    d2ac:	000c3c80 	call	c3c8 <__mulsi3>
    d2b0:	a808d43a 	srli	r4,r21,16
    d2b4:	1705883a 	add	r2,r2,fp
    d2b8:	d8c00217 	ldw	r3,8(sp)
    d2bc:	2085883a 	add	r2,r4,r2
    d2c0:	1700022e 	bgeu	r2,fp,d2cc <__divdf3+0x630>
    d2c4:	01000074 	movhi	r4,1
    d2c8:	9125883a 	add	r18,r18,r4
    d2cc:	1008d43a 	srli	r4,r2,16
    d2d0:	1004943a 	slli	r2,r2,16
    d2d4:	ad7fffcc 	andi	r21,r21,65535
    d2d8:	2489883a 	add	r4,r4,r18
    d2dc:	1545883a 	add	r2,r2,r21
    d2e0:	81003836 	bltu	r16,r4,d3c4 <__divdf3+0x728>
    d2e4:	81003626 	beq	r16,r4,d3c0 <__divdf3+0x724>
    d2e8:	a5000054 	ori	r20,r20,1
    d2ec:	1880ffc4 	addi	r2,r3,1023
    d2f0:	00bf2e0e 	bge	zero,r2,cfac <__alt_data_end+0xfffdcfac>
    d2f4:	a10001cc 	andi	r4,r20,7
    d2f8:	20000726 	beq	r4,zero,d318 <__divdf3+0x67c>
    d2fc:	a10003cc 	andi	r4,r20,15
    d300:	01400104 	movi	r5,4
    d304:	21400426 	beq	r4,r5,d318 <__divdf3+0x67c>
    d308:	a149883a 	add	r4,r20,r5
    d30c:	2529803a 	cmpltu	r20,r4,r20
    d310:	8d23883a 	add	r17,r17,r20
    d314:	2029883a 	mov	r20,r4
    d318:	8900402c 	andhi	r4,r17,256
    d31c:	20000426 	beq	r4,zero,d330 <__divdf3+0x694>
    d320:	18810004 	addi	r2,r3,1024
    d324:	00ffc034 	movhi	r3,65280
    d328:	18ffffc4 	addi	r3,r3,-1
    d32c:	88e2703a 	and	r17,r17,r3
    d330:	00c1ff84 	movi	r3,2046
    d334:	18beb416 	blt	r3,r2,ce08 <__alt_data_end+0xfffdce08>
    d338:	a028d0fa 	srli	r20,r20,3
    d33c:	882a977a 	slli	r21,r17,29
    d340:	8820927a 	slli	r16,r17,9
    d344:	1081ffcc 	andi	r2,r2,2047
    d348:	ad2ab03a 	or	r21,r21,r20
    d34c:	8020d33a 	srli	r16,r16,12
    d350:	9900004c 	andi	r4,r19,1
    d354:	003eb006 	br	ce18 <__alt_data_end+0xfffdce18>
    d358:	8080022c 	andhi	r2,r16,8
    d35c:	10001226 	beq	r2,zero,d3a8 <__divdf3+0x70c>
    d360:	8880022c 	andhi	r2,r17,8
    d364:	1000101e 	bne	r2,zero,d3a8 <__divdf3+0x70c>
    d368:	00800434 	movhi	r2,16
    d36c:	8c000234 	orhi	r16,r17,8
    d370:	10bfffc4 	addi	r2,r2,-1
    d374:	b809883a 	mov	r4,r23
    d378:	80a0703a 	and	r16,r16,r2
    d37c:	a02b883a 	mov	r21,r20
    d380:	003f0806 	br	cfa4 <__alt_data_end+0xfffdcfa4>
    d384:	008000c4 	movi	r2,3
    d388:	3880b126 	beq	r7,r2,d650 <__divdf3+0x9b4>
    d38c:	00800044 	movi	r2,1
    d390:	38805b1e 	bne	r7,r2,d500 <__divdf3+0x864>
    d394:	e009883a 	mov	r4,fp
    d398:	0005883a 	mov	r2,zero
    d39c:	0021883a 	mov	r16,zero
    d3a0:	002b883a 	mov	r21,zero
    d3a4:	003e9c06 	br	ce18 <__alt_data_end+0xfffdce18>
    d3a8:	00800434 	movhi	r2,16
    d3ac:	84000234 	orhi	r16,r16,8
    d3b0:	10bfffc4 	addi	r2,r2,-1
    d3b4:	b009883a 	mov	r4,r22
    d3b8:	80a0703a 	and	r16,r16,r2
    d3bc:	003ef906 	br	cfa4 <__alt_data_end+0xfffdcfa4>
    d3c0:	103fca26 	beq	r2,zero,d2ec <__alt_data_end+0xfffdd2ec>
    d3c4:	b421883a 	add	r16,r22,r16
    d3c8:	a17fffc4 	addi	r5,r20,-1
    d3cc:	8580422e 	bgeu	r16,r22,d4d8 <__divdf3+0x83c>
    d3d0:	2829883a 	mov	r20,r5
    d3d4:	813fc41e 	bne	r16,r4,d2e8 <__alt_data_end+0xfffdd2e8>
    d3d8:	d9800017 	ldw	r6,0(sp)
    d3dc:	30bfc21e 	bne	r6,r2,d2e8 <__alt_data_end+0xfffdd2e8>
    d3e0:	003fc206 	br	d2ec <__alt_data_end+0xfffdd2ec>
    d3e4:	143ff604 	addi	r16,r2,-40
    d3e8:	8c20983a 	sll	r16,r17,r16
    d3ec:	002b883a 	mov	r21,zero
    d3f0:	003eb406 	br	cec4 <__alt_data_end+0xfffdcec4>
    d3f4:	d9800215 	stw	r6,8(sp)
    d3f8:	d9c00515 	stw	r7,20(sp)
    d3fc:	da000415 	stw	r8,16(sp)
    d400:	000ec300 	call	ec30 <__clzsi2>
    d404:	10800804 	addi	r2,r2,32
    d408:	da000417 	ldw	r8,16(sp)
    d40c:	d9c00517 	ldw	r7,20(sp)
    d410:	d9800217 	ldw	r6,8(sp)
    d414:	003ea106 	br	ce9c <__alt_data_end+0xfffdce9c>
    d418:	147ff604 	addi	r17,r2,-40
    d41c:	3462983a 	sll	r17,r6,r17
    d420:	0029883a 	mov	r20,zero
    d424:	003ec906 	br	cf4c <__alt_data_end+0xfffdcf4c>
    d428:	3009883a 	mov	r4,r6
    d42c:	d9400115 	stw	r5,4(sp)
    d430:	d9800215 	stw	r6,8(sp)
    d434:	da000415 	stw	r8,16(sp)
    d438:	da400315 	stw	r9,12(sp)
    d43c:	000ec300 	call	ec30 <__clzsi2>
    d440:	10800804 	addi	r2,r2,32
    d444:	da400317 	ldw	r9,12(sp)
    d448:	da000417 	ldw	r8,16(sp)
    d44c:	d9800217 	ldw	r6,8(sp)
    d450:	d9400117 	ldw	r5,4(sp)
    d454:	003eb306 	br	cf24 <__alt_data_end+0xfffdcf24>
    d458:	d9800017 	ldw	r6,0(sp)
    d45c:	a9ab883a 	add	r21,r21,r6
    d460:	a98b803a 	cmpltu	r5,r21,r6
    d464:	2d8b883a 	add	r5,r5,r22
    d468:	2a11883a 	add	r8,r5,r8
    d46c:	897fffc4 	addi	r5,r17,-1
    d470:	b2000c2e 	bgeu	r22,r8,d4a4 <__divdf3+0x808>
    d474:	41003f36 	bltu	r8,r4,d574 <__divdf3+0x8d8>
    d478:	22006c26 	beq	r4,r8,d62c <__divdf3+0x990>
    d47c:	4109c83a 	sub	r4,r8,r4
    d480:	2823883a 	mov	r17,r5
    d484:	003f3b06 	br	d174 <__alt_data_end+0xfffdd174>
    d488:	ad3ed336 	bltu	r21,r20,cfd8 <__alt_data_end+0xfffdcfd8>
    d48c:	a804d07a 	srli	r2,r21,1
    d490:	802e97fa 	slli	r23,r16,31
    d494:	a82a97fa 	slli	r21,r21,31
    d498:	8020d07a 	srli	r16,r16,1
    d49c:	b8aeb03a 	or	r23,r23,r2
    d4a0:	003ed006 	br	cfe4 <__alt_data_end+0xfffdcfe4>
    d4a4:	b23ff51e 	bne	r22,r8,d47c <__alt_data_end+0xfffdd47c>
    d4a8:	d9800017 	ldw	r6,0(sp)
    d4ac:	a9bff12e 	bgeu	r21,r6,d474 <__alt_data_end+0xfffdd474>
    d4b0:	b109c83a 	sub	r4,r22,r4
    d4b4:	2823883a 	mov	r17,r5
    d4b8:	003f2e06 	br	d174 <__alt_data_end+0xfffdd174>
    d4bc:	2021883a 	mov	r16,r4
    d4c0:	003eff06 	br	d0c0 <__alt_data_end+0xfffdd0c0>
    d4c4:	2023883a 	mov	r17,r4
    d4c8:	003ee406 	br	d05c <__alt_data_end+0xfffdd05c>
    d4cc:	a8bfe236 	bltu	r21,r2,d458 <__alt_data_end+0xfffdd458>
    d4d0:	0009883a 	mov	r4,zero
    d4d4:	003f2706 	br	d174 <__alt_data_end+0xfffdd174>
    d4d8:	81002d36 	bltu	r16,r4,d590 <__divdf3+0x8f4>
    d4dc:	24005626 	beq	r4,r16,d638 <__divdf3+0x99c>
    d4e0:	2829883a 	mov	r20,r5
    d4e4:	003f8006 	br	d2e8 <__alt_data_end+0xfffdd2e8>
    d4e8:	053fffc4 	movi	r20,-1
    d4ec:	003f7f06 	br	d2ec <__alt_data_end+0xfffdd2ec>
    d4f0:	200f883a 	mov	r7,r4
    d4f4:	003f3c06 	br	d1e8 <__alt_data_end+0xfffdd1e8>
    d4f8:	1011883a 	mov	r8,r2
    d4fc:	003f5506 	br	d254 <__alt_data_end+0xfffdd254>
    d500:	e027883a 	mov	r19,fp
    d504:	003f7906 	br	d2ec <__alt_data_end+0xfffdd2ec>
    d508:	010007c4 	movi	r4,31
    d50c:	20c02816 	blt	r4,r3,d5b0 <__divdf3+0x914>
    d510:	00800804 	movi	r2,32
    d514:	10c5c83a 	sub	r2,r2,r3
    d518:	888a983a 	sll	r5,r17,r2
    d51c:	a0c8d83a 	srl	r4,r20,r3
    d520:	a084983a 	sll	r2,r20,r2
    d524:	88e2d83a 	srl	r17,r17,r3
    d528:	2906b03a 	or	r3,r5,r4
    d52c:	1004c03a 	cmpne	r2,r2,zero
    d530:	1886b03a 	or	r3,r3,r2
    d534:	188001cc 	andi	r2,r3,7
    d538:	10000726 	beq	r2,zero,d558 <__divdf3+0x8bc>
    d53c:	188003cc 	andi	r2,r3,15
    d540:	01000104 	movi	r4,4
    d544:	11000426 	beq	r2,r4,d558 <__divdf3+0x8bc>
    d548:	1805883a 	mov	r2,r3
    d54c:	10c00104 	addi	r3,r2,4
    d550:	1885803a 	cmpltu	r2,r3,r2
    d554:	88a3883a 	add	r17,r17,r2
    d558:	8880202c 	andhi	r2,r17,128
    d55c:	10002926 	beq	r2,zero,d604 <__divdf3+0x968>
    d560:	9900004c 	andi	r4,r19,1
    d564:	00800044 	movi	r2,1
    d568:	0021883a 	mov	r16,zero
    d56c:	002b883a 	mov	r21,zero
    d570:	003e2906 	br	ce18 <__alt_data_end+0xfffdce18>
    d574:	d9800017 	ldw	r6,0(sp)
    d578:	8c7fff84 	addi	r17,r17,-2
    d57c:	a9ab883a 	add	r21,r21,r6
    d580:	a98b803a 	cmpltu	r5,r21,r6
    d584:	2d8b883a 	add	r5,r5,r22
    d588:	2a11883a 	add	r8,r5,r8
    d58c:	003ef806 	br	d170 <__alt_data_end+0xfffdd170>
    d590:	d9800017 	ldw	r6,0(sp)
    d594:	318f883a 	add	r7,r6,r6
    d598:	398b803a 	cmpltu	r5,r7,r6
    d59c:	2d8d883a 	add	r6,r5,r22
    d5a0:	81a1883a 	add	r16,r16,r6
    d5a4:	a17fff84 	addi	r5,r20,-2
    d5a8:	d9c00015 	stw	r7,0(sp)
    d5ac:	003f8806 	br	d3d0 <__alt_data_end+0xfffdd3d0>
    d5b0:	013ff844 	movi	r4,-31
    d5b4:	2085c83a 	sub	r2,r4,r2
    d5b8:	8888d83a 	srl	r4,r17,r2
    d5bc:	00800804 	movi	r2,32
    d5c0:	18802126 	beq	r3,r2,d648 <__divdf3+0x9ac>
    d5c4:	04001004 	movi	r16,64
    d5c8:	80c7c83a 	sub	r3,r16,r3
    d5cc:	88e0983a 	sll	r16,r17,r3
    d5d0:	8504b03a 	or	r2,r16,r20
    d5d4:	1004c03a 	cmpne	r2,r2,zero
    d5d8:	2084b03a 	or	r2,r4,r2
    d5dc:	144001cc 	andi	r17,r2,7
    d5e0:	88000d1e 	bne	r17,zero,d618 <__divdf3+0x97c>
    d5e4:	0021883a 	mov	r16,zero
    d5e8:	102ad0fa 	srli	r21,r2,3
    d5ec:	9900004c 	andi	r4,r19,1
    d5f0:	0005883a 	mov	r2,zero
    d5f4:	ac6ab03a 	or	r21,r21,r17
    d5f8:	003e0706 	br	ce18 <__alt_data_end+0xfffdce18>
    d5fc:	1007883a 	mov	r3,r2
    d600:	0023883a 	mov	r17,zero
    d604:	8820927a 	slli	r16,r17,9
    d608:	1805883a 	mov	r2,r3
    d60c:	8822977a 	slli	r17,r17,29
    d610:	8020d33a 	srli	r16,r16,12
    d614:	003ff406 	br	d5e8 <__alt_data_end+0xfffdd5e8>
    d618:	10c003cc 	andi	r3,r2,15
    d61c:	01000104 	movi	r4,4
    d620:	193ff626 	beq	r3,r4,d5fc <__alt_data_end+0xfffdd5fc>
    d624:	0023883a 	mov	r17,zero
    d628:	003fc806 	br	d54c <__alt_data_end+0xfffdd54c>
    d62c:	a8bfd136 	bltu	r21,r2,d574 <__alt_data_end+0xfffdd574>
    d630:	2823883a 	mov	r17,r5
    d634:	003fa606 	br	d4d0 <__alt_data_end+0xfffdd4d0>
    d638:	d9800017 	ldw	r6,0(sp)
    d63c:	30bfd436 	bltu	r6,r2,d590 <__alt_data_end+0xfffdd590>
    d640:	2829883a 	mov	r20,r5
    d644:	003f6406 	br	d3d8 <__alt_data_end+0xfffdd3d8>
    d648:	0021883a 	mov	r16,zero
    d64c:	003fe006 	br	d5d0 <__alt_data_end+0xfffdd5d0>
    d650:	00800434 	movhi	r2,16
    d654:	8c000234 	orhi	r16,r17,8
    d658:	10bfffc4 	addi	r2,r2,-1
    d65c:	e009883a 	mov	r4,fp
    d660:	80a0703a 	and	r16,r16,r2
    d664:	a02b883a 	mov	r21,r20
    d668:	003e4e06 	br	cfa4 <__alt_data_end+0xfffdcfa4>

0000d66c <__eqdf2>:
    d66c:	2804d53a 	srli	r2,r5,20
    d670:	3806d53a 	srli	r3,r7,20
    d674:	02000434 	movhi	r8,16
    d678:	423fffc4 	addi	r8,r8,-1
    d67c:	1081ffcc 	andi	r2,r2,2047
    d680:	0281ffc4 	movi	r10,2047
    d684:	2a12703a 	and	r9,r5,r8
    d688:	18c1ffcc 	andi	r3,r3,2047
    d68c:	3a10703a 	and	r8,r7,r8
    d690:	280ad7fa 	srli	r5,r5,31
    d694:	380ed7fa 	srli	r7,r7,31
    d698:	12801026 	beq	r2,r10,d6dc <__eqdf2+0x70>
    d69c:	0281ffc4 	movi	r10,2047
    d6a0:	1a800a26 	beq	r3,r10,d6cc <__eqdf2+0x60>
    d6a4:	10c00226 	beq	r2,r3,d6b0 <__eqdf2+0x44>
    d6a8:	00800044 	movi	r2,1
    d6ac:	f800283a 	ret
    d6b0:	4a3ffd1e 	bne	r9,r8,d6a8 <__alt_data_end+0xfffdd6a8>
    d6b4:	21bffc1e 	bne	r4,r6,d6a8 <__alt_data_end+0xfffdd6a8>
    d6b8:	29c00c26 	beq	r5,r7,d6ec <__eqdf2+0x80>
    d6bc:	103ffa1e 	bne	r2,zero,d6a8 <__alt_data_end+0xfffdd6a8>
    d6c0:	2244b03a 	or	r2,r4,r9
    d6c4:	1004c03a 	cmpne	r2,r2,zero
    d6c8:	f800283a 	ret
    d6cc:	3214b03a 	or	r10,r6,r8
    d6d0:	503ff426 	beq	r10,zero,d6a4 <__alt_data_end+0xfffdd6a4>
    d6d4:	00800044 	movi	r2,1
    d6d8:	f800283a 	ret
    d6dc:	2254b03a 	or	r10,r4,r9
    d6e0:	503fee26 	beq	r10,zero,d69c <__alt_data_end+0xfffdd69c>
    d6e4:	00800044 	movi	r2,1
    d6e8:	f800283a 	ret
    d6ec:	0005883a 	mov	r2,zero
    d6f0:	f800283a 	ret

0000d6f4 <__gedf2>:
    d6f4:	2804d53a 	srli	r2,r5,20
    d6f8:	3806d53a 	srli	r3,r7,20
    d6fc:	02000434 	movhi	r8,16
    d700:	423fffc4 	addi	r8,r8,-1
    d704:	1081ffcc 	andi	r2,r2,2047
    d708:	0241ffc4 	movi	r9,2047
    d70c:	2a14703a 	and	r10,r5,r8
    d710:	18c1ffcc 	andi	r3,r3,2047
    d714:	3a10703a 	and	r8,r7,r8
    d718:	280ad7fa 	srli	r5,r5,31
    d71c:	380ed7fa 	srli	r7,r7,31
    d720:	12401d26 	beq	r2,r9,d798 <__gedf2+0xa4>
    d724:	0241ffc4 	movi	r9,2047
    d728:	1a401226 	beq	r3,r9,d774 <__gedf2+0x80>
    d72c:	1000081e 	bne	r2,zero,d750 <__gedf2+0x5c>
    d730:	2296b03a 	or	r11,r4,r10
    d734:	5813003a 	cmpeq	r9,r11,zero
    d738:	1800091e 	bne	r3,zero,d760 <__gedf2+0x6c>
    d73c:	3218b03a 	or	r12,r6,r8
    d740:	6000071e 	bne	r12,zero,d760 <__gedf2+0x6c>
    d744:	0005883a 	mov	r2,zero
    d748:	5800101e 	bne	r11,zero,d78c <__gedf2+0x98>
    d74c:	f800283a 	ret
    d750:	18000c1e 	bne	r3,zero,d784 <__gedf2+0x90>
    d754:	3212b03a 	or	r9,r6,r8
    d758:	48000c26 	beq	r9,zero,d78c <__gedf2+0x98>
    d75c:	0013883a 	mov	r9,zero
    d760:	39c03fcc 	andi	r7,r7,255
    d764:	48000826 	beq	r9,zero,d788 <__gedf2+0x94>
    d768:	38000926 	beq	r7,zero,d790 <__gedf2+0x9c>
    d76c:	00800044 	movi	r2,1
    d770:	f800283a 	ret
    d774:	3212b03a 	or	r9,r6,r8
    d778:	483fec26 	beq	r9,zero,d72c <__alt_data_end+0xfffdd72c>
    d77c:	00bfff84 	movi	r2,-2
    d780:	f800283a 	ret
    d784:	39c03fcc 	andi	r7,r7,255
    d788:	29c00626 	beq	r5,r7,d7a4 <__gedf2+0xb0>
    d78c:	283ff726 	beq	r5,zero,d76c <__alt_data_end+0xfffdd76c>
    d790:	00bfffc4 	movi	r2,-1
    d794:	f800283a 	ret
    d798:	2292b03a 	or	r9,r4,r10
    d79c:	483fe126 	beq	r9,zero,d724 <__alt_data_end+0xfffdd724>
    d7a0:	003ff606 	br	d77c <__alt_data_end+0xfffdd77c>
    d7a4:	18bff916 	blt	r3,r2,d78c <__alt_data_end+0xfffdd78c>
    d7a8:	10c00316 	blt	r2,r3,d7b8 <__gedf2+0xc4>
    d7ac:	42bff736 	bltu	r8,r10,d78c <__alt_data_end+0xfffdd78c>
    d7b0:	52000326 	beq	r10,r8,d7c0 <__gedf2+0xcc>
    d7b4:	5200042e 	bgeu	r10,r8,d7c8 <__gedf2+0xd4>
    d7b8:	283fec1e 	bne	r5,zero,d76c <__alt_data_end+0xfffdd76c>
    d7bc:	003ff406 	br	d790 <__alt_data_end+0xfffdd790>
    d7c0:	313ff236 	bltu	r6,r4,d78c <__alt_data_end+0xfffdd78c>
    d7c4:	21bffc36 	bltu	r4,r6,d7b8 <__alt_data_end+0xfffdd7b8>
    d7c8:	0005883a 	mov	r2,zero
    d7cc:	f800283a 	ret

0000d7d0 <__ledf2>:
    d7d0:	2804d53a 	srli	r2,r5,20
    d7d4:	3810d53a 	srli	r8,r7,20
    d7d8:	00c00434 	movhi	r3,16
    d7dc:	18ffffc4 	addi	r3,r3,-1
    d7e0:	1081ffcc 	andi	r2,r2,2047
    d7e4:	0241ffc4 	movi	r9,2047
    d7e8:	28d4703a 	and	r10,r5,r3
    d7ec:	4201ffcc 	andi	r8,r8,2047
    d7f0:	38c6703a 	and	r3,r7,r3
    d7f4:	280ad7fa 	srli	r5,r5,31
    d7f8:	380ed7fa 	srli	r7,r7,31
    d7fc:	12401f26 	beq	r2,r9,d87c <__ledf2+0xac>
    d800:	0241ffc4 	movi	r9,2047
    d804:	42401426 	beq	r8,r9,d858 <__ledf2+0x88>
    d808:	1000091e 	bne	r2,zero,d830 <__ledf2+0x60>
    d80c:	2296b03a 	or	r11,r4,r10
    d810:	5813003a 	cmpeq	r9,r11,zero
    d814:	29403fcc 	andi	r5,r5,255
    d818:	40000a1e 	bne	r8,zero,d844 <__ledf2+0x74>
    d81c:	30d8b03a 	or	r12,r6,r3
    d820:	6000081e 	bne	r12,zero,d844 <__ledf2+0x74>
    d824:	0005883a 	mov	r2,zero
    d828:	5800111e 	bne	r11,zero,d870 <__ledf2+0xa0>
    d82c:	f800283a 	ret
    d830:	29403fcc 	andi	r5,r5,255
    d834:	40000c1e 	bne	r8,zero,d868 <__ledf2+0x98>
    d838:	30d2b03a 	or	r9,r6,r3
    d83c:	48000c26 	beq	r9,zero,d870 <__ledf2+0xa0>
    d840:	0013883a 	mov	r9,zero
    d844:	39c03fcc 	andi	r7,r7,255
    d848:	48000826 	beq	r9,zero,d86c <__ledf2+0x9c>
    d84c:	38001126 	beq	r7,zero,d894 <__ledf2+0xc4>
    d850:	00800044 	movi	r2,1
    d854:	f800283a 	ret
    d858:	30d2b03a 	or	r9,r6,r3
    d85c:	483fea26 	beq	r9,zero,d808 <__alt_data_end+0xfffdd808>
    d860:	00800084 	movi	r2,2
    d864:	f800283a 	ret
    d868:	39c03fcc 	andi	r7,r7,255
    d86c:	39400726 	beq	r7,r5,d88c <__ledf2+0xbc>
    d870:	2800081e 	bne	r5,zero,d894 <__ledf2+0xc4>
    d874:	00800044 	movi	r2,1
    d878:	f800283a 	ret
    d87c:	2292b03a 	or	r9,r4,r10
    d880:	483fdf26 	beq	r9,zero,d800 <__alt_data_end+0xfffdd800>
    d884:	00800084 	movi	r2,2
    d888:	f800283a 	ret
    d88c:	4080030e 	bge	r8,r2,d89c <__ledf2+0xcc>
    d890:	383fef26 	beq	r7,zero,d850 <__alt_data_end+0xfffdd850>
    d894:	00bfffc4 	movi	r2,-1
    d898:	f800283a 	ret
    d89c:	123feb16 	blt	r2,r8,d84c <__alt_data_end+0xfffdd84c>
    d8a0:	1abff336 	bltu	r3,r10,d870 <__alt_data_end+0xfffdd870>
    d8a4:	50c00326 	beq	r10,r3,d8b4 <__ledf2+0xe4>
    d8a8:	50c0042e 	bgeu	r10,r3,d8bc <__ledf2+0xec>
    d8ac:	283fe81e 	bne	r5,zero,d850 <__alt_data_end+0xfffdd850>
    d8b0:	003ff806 	br	d894 <__alt_data_end+0xfffdd894>
    d8b4:	313fee36 	bltu	r6,r4,d870 <__alt_data_end+0xfffdd870>
    d8b8:	21bffc36 	bltu	r4,r6,d8ac <__alt_data_end+0xfffdd8ac>
    d8bc:	0005883a 	mov	r2,zero
    d8c0:	f800283a 	ret

0000d8c4 <__muldf3>:
    d8c4:	deffee04 	addi	sp,sp,-72
    d8c8:	dd000c15 	stw	r20,48(sp)
    d8cc:	2828d53a 	srli	r20,r5,20
    d8d0:	ddc00f15 	stw	r23,60(sp)
    d8d4:	282ed7fa 	srli	r23,r5,31
    d8d8:	dc000815 	stw	r16,32(sp)
    d8dc:	04000434 	movhi	r16,16
    d8e0:	dcc00b15 	stw	r19,44(sp)
    d8e4:	843fffc4 	addi	r16,r16,-1
    d8e8:	dfc01115 	stw	ra,68(sp)
    d8ec:	df001015 	stw	fp,64(sp)
    d8f0:	dd800e15 	stw	r22,56(sp)
    d8f4:	dd400d15 	stw	r21,52(sp)
    d8f8:	dc800a15 	stw	r18,40(sp)
    d8fc:	dc400915 	stw	r17,36(sp)
    d900:	a501ffcc 	andi	r20,r20,2047
    d904:	2c20703a 	and	r16,r5,r16
    d908:	b827883a 	mov	r19,r23
    d90c:	ba403fcc 	andi	r9,r23,255
    d910:	a0006026 	beq	r20,zero,da94 <__muldf3+0x1d0>
    d914:	0081ffc4 	movi	r2,2047
    d918:	202d883a 	mov	r22,r4
    d91c:	a0803626 	beq	r20,r2,d9f8 <__muldf3+0x134>
    d920:	84000434 	orhi	r16,r16,16
    d924:	200ad77a 	srli	r5,r4,29
    d928:	800490fa 	slli	r2,r16,3
    d92c:	202c90fa 	slli	r22,r4,3
    d930:	a53f0044 	addi	r20,r20,-1023
    d934:	28a0b03a 	or	r16,r5,r2
    d938:	002b883a 	mov	r21,zero
    d93c:	000b883a 	mov	r5,zero
    d940:	3804d53a 	srli	r2,r7,20
    d944:	3838d7fa 	srli	fp,r7,31
    d948:	04400434 	movhi	r17,16
    d94c:	8c7fffc4 	addi	r17,r17,-1
    d950:	1081ffcc 	andi	r2,r2,2047
    d954:	3025883a 	mov	r18,r6
    d958:	3c62703a 	and	r17,r7,r17
    d95c:	e2803fcc 	andi	r10,fp,255
    d960:	10006d26 	beq	r2,zero,db18 <__muldf3+0x254>
    d964:	00c1ffc4 	movi	r3,2047
    d968:	10c06526 	beq	r2,r3,db00 <__muldf3+0x23c>
    d96c:	8c400434 	orhi	r17,r17,16
    d970:	300ed77a 	srli	r7,r6,29
    d974:	880690fa 	slli	r3,r17,3
    d978:	302490fa 	slli	r18,r6,3
    d97c:	10bf0044 	addi	r2,r2,-1023
    d980:	38e2b03a 	or	r17,r7,r3
    d984:	000f883a 	mov	r7,zero
    d988:	a087883a 	add	r3,r20,r2
    d98c:	010003c4 	movi	r4,15
    d990:	3d44b03a 	or	r2,r7,r21
    d994:	e5ccf03a 	xor	r6,fp,r23
    d998:	1a000044 	addi	r8,r3,1
    d99c:	20809b36 	bltu	r4,r2,dc0c <__muldf3+0x348>
    d9a0:	100490ba 	slli	r2,r2,2
    d9a4:	01000074 	movhi	r4,1
    d9a8:	21366e04 	addi	r4,r4,-9800
    d9ac:	1105883a 	add	r2,r2,r4
    d9b0:	10800017 	ldw	r2,0(r2)
    d9b4:	1000683a 	jmp	r2
    d9b8:	0000dc0c 	andi	zero,zero,880
    d9bc:	0000da18 	cmpnei	zero,zero,872
    d9c0:	0000da18 	cmpnei	zero,zero,872
    d9c4:	0000da14 	movui	zero,872
    d9c8:	0000dbe8 	cmpgeui	zero,zero,879
    d9cc:	0000dbe8 	cmpgeui	zero,zero,879
    d9d0:	0000dbd0 	cmplti	zero,zero,879
    d9d4:	0000da14 	movui	zero,872
    d9d8:	0000dbe8 	cmpgeui	zero,zero,879
    d9dc:	0000dbd0 	cmplti	zero,zero,879
    d9e0:	0000dbe8 	cmpgeui	zero,zero,879
    d9e4:	0000da14 	movui	zero,872
    d9e8:	0000dbf8 	rdprs	zero,zero,879
    d9ec:	0000dbf8 	rdprs	zero,zero,879
    d9f0:	0000dbf8 	rdprs	zero,zero,879
    d9f4:	0000df58 	cmpnei	zero,zero,893
    d9f8:	2404b03a 	or	r2,r4,r16
    d9fc:	1000711e 	bne	r2,zero,dbc4 <__muldf3+0x300>
    da00:	05400204 	movi	r21,8
    da04:	0021883a 	mov	r16,zero
    da08:	002d883a 	mov	r22,zero
    da0c:	01400084 	movi	r5,2
    da10:	003fcb06 	br	d940 <__alt_data_end+0xfffdd940>
    da14:	500d883a 	mov	r6,r10
    da18:	00800084 	movi	r2,2
    da1c:	38805926 	beq	r7,r2,db84 <__muldf3+0x2c0>
    da20:	008000c4 	movi	r2,3
    da24:	3881bb26 	beq	r7,r2,e114 <__muldf3+0x850>
    da28:	00800044 	movi	r2,1
    da2c:	3881961e 	bne	r7,r2,e088 <__muldf3+0x7c4>
    da30:	3027883a 	mov	r19,r6
    da34:	0005883a 	mov	r2,zero
    da38:	0021883a 	mov	r16,zero
    da3c:	002d883a 	mov	r22,zero
    da40:	1004953a 	slli	r2,r2,20
    da44:	98c03fcc 	andi	r3,r19,255
    da48:	04400434 	movhi	r17,16
    da4c:	8c7fffc4 	addi	r17,r17,-1
    da50:	180697fa 	slli	r3,r3,31
    da54:	8460703a 	and	r16,r16,r17
    da58:	80a0b03a 	or	r16,r16,r2
    da5c:	80c6b03a 	or	r3,r16,r3
    da60:	b005883a 	mov	r2,r22
    da64:	dfc01117 	ldw	ra,68(sp)
    da68:	df001017 	ldw	fp,64(sp)
    da6c:	ddc00f17 	ldw	r23,60(sp)
    da70:	dd800e17 	ldw	r22,56(sp)
    da74:	dd400d17 	ldw	r21,52(sp)
    da78:	dd000c17 	ldw	r20,48(sp)
    da7c:	dcc00b17 	ldw	r19,44(sp)
    da80:	dc800a17 	ldw	r18,40(sp)
    da84:	dc400917 	ldw	r17,36(sp)
    da88:	dc000817 	ldw	r16,32(sp)
    da8c:	dec01204 	addi	sp,sp,72
    da90:	f800283a 	ret
    da94:	2404b03a 	or	r2,r4,r16
    da98:	202b883a 	mov	r21,r4
    da9c:	10004426 	beq	r2,zero,dbb0 <__muldf3+0x2ec>
    daa0:	80015126 	beq	r16,zero,dfe8 <__muldf3+0x724>
    daa4:	8009883a 	mov	r4,r16
    daa8:	d9800715 	stw	r6,28(sp)
    daac:	d9c00215 	stw	r7,8(sp)
    dab0:	da400415 	stw	r9,16(sp)
    dab4:	000ec300 	call	ec30 <__clzsi2>
    dab8:	d9800717 	ldw	r6,28(sp)
    dabc:	d9c00217 	ldw	r7,8(sp)
    dac0:	da400417 	ldw	r9,16(sp)
    dac4:	113ffd44 	addi	r4,r2,-11
    dac8:	00c00704 	movi	r3,28
    dacc:	19014216 	blt	r3,r4,dfd8 <__muldf3+0x714>
    dad0:	00c00744 	movi	r3,29
    dad4:	15bffe04 	addi	r22,r2,-8
    dad8:	1907c83a 	sub	r3,r3,r4
    dadc:	85a0983a 	sll	r16,r16,r22
    dae0:	a8c6d83a 	srl	r3,r21,r3
    dae4:	adac983a 	sll	r22,r21,r22
    dae8:	1c20b03a 	or	r16,r3,r16
    daec:	1080fcc4 	addi	r2,r2,1011
    daf0:	00a9c83a 	sub	r20,zero,r2
    daf4:	002b883a 	mov	r21,zero
    daf8:	000b883a 	mov	r5,zero
    dafc:	003f9006 	br	d940 <__alt_data_end+0xfffdd940>
    db00:	3446b03a 	or	r3,r6,r17
    db04:	1800281e 	bne	r3,zero,dba8 <__muldf3+0x2e4>
    db08:	0023883a 	mov	r17,zero
    db0c:	0025883a 	mov	r18,zero
    db10:	01c00084 	movi	r7,2
    db14:	003f9c06 	br	d988 <__alt_data_end+0xfffdd988>
    db18:	3446b03a 	or	r3,r6,r17
    db1c:	18001e26 	beq	r3,zero,db98 <__muldf3+0x2d4>
    db20:	88012126 	beq	r17,zero,dfa8 <__muldf3+0x6e4>
    db24:	8809883a 	mov	r4,r17
    db28:	d9400215 	stw	r5,8(sp)
    db2c:	d9800715 	stw	r6,28(sp)
    db30:	da400415 	stw	r9,16(sp)
    db34:	da800315 	stw	r10,12(sp)
    db38:	000ec300 	call	ec30 <__clzsi2>
    db3c:	d9400217 	ldw	r5,8(sp)
    db40:	d9800717 	ldw	r6,28(sp)
    db44:	da400417 	ldw	r9,16(sp)
    db48:	da800317 	ldw	r10,12(sp)
    db4c:	113ffd44 	addi	r4,r2,-11
    db50:	00c00704 	movi	r3,28
    db54:	19011016 	blt	r3,r4,df98 <__muldf3+0x6d4>
    db58:	00c00744 	movi	r3,29
    db5c:	14bffe04 	addi	r18,r2,-8
    db60:	1907c83a 	sub	r3,r3,r4
    db64:	8ca2983a 	sll	r17,r17,r18
    db68:	30c6d83a 	srl	r3,r6,r3
    db6c:	34a4983a 	sll	r18,r6,r18
    db70:	1c62b03a 	or	r17,r3,r17
    db74:	1080fcc4 	addi	r2,r2,1011
    db78:	0085c83a 	sub	r2,zero,r2
    db7c:	000f883a 	mov	r7,zero
    db80:	003f8106 	br	d988 <__alt_data_end+0xfffdd988>
    db84:	3027883a 	mov	r19,r6
    db88:	0081ffc4 	movi	r2,2047
    db8c:	0021883a 	mov	r16,zero
    db90:	002d883a 	mov	r22,zero
    db94:	003faa06 	br	da40 <__alt_data_end+0xfffdda40>
    db98:	0023883a 	mov	r17,zero
    db9c:	0025883a 	mov	r18,zero
    dba0:	01c00044 	movi	r7,1
    dba4:	003f7806 	br	d988 <__alt_data_end+0xfffdd988>
    dba8:	01c000c4 	movi	r7,3
    dbac:	003f7606 	br	d988 <__alt_data_end+0xfffdd988>
    dbb0:	05400104 	movi	r21,4
    dbb4:	0021883a 	mov	r16,zero
    dbb8:	002d883a 	mov	r22,zero
    dbbc:	01400044 	movi	r5,1
    dbc0:	003f5f06 	br	d940 <__alt_data_end+0xfffdd940>
    dbc4:	05400304 	movi	r21,12
    dbc8:	014000c4 	movi	r5,3
    dbcc:	003f5c06 	br	d940 <__alt_data_end+0xfffdd940>
    dbd0:	04000434 	movhi	r16,16
    dbd4:	0027883a 	mov	r19,zero
    dbd8:	843fffc4 	addi	r16,r16,-1
    dbdc:	05bfffc4 	movi	r22,-1
    dbe0:	0081ffc4 	movi	r2,2047
    dbe4:	003f9606 	br	da40 <__alt_data_end+0xfffdda40>
    dbe8:	8023883a 	mov	r17,r16
    dbec:	b025883a 	mov	r18,r22
    dbf0:	280f883a 	mov	r7,r5
    dbf4:	003f8806 	br	da18 <__alt_data_end+0xfffdda18>
    dbf8:	8023883a 	mov	r17,r16
    dbfc:	b025883a 	mov	r18,r22
    dc00:	480d883a 	mov	r6,r9
    dc04:	280f883a 	mov	r7,r5
    dc08:	003f8306 	br	da18 <__alt_data_end+0xfffdda18>
    dc0c:	b026d43a 	srli	r19,r22,16
    dc10:	902ed43a 	srli	r23,r18,16
    dc14:	b5bfffcc 	andi	r22,r22,65535
    dc18:	94bfffcc 	andi	r18,r18,65535
    dc1c:	b00b883a 	mov	r5,r22
    dc20:	9009883a 	mov	r4,r18
    dc24:	d8c00515 	stw	r3,20(sp)
    dc28:	d9800715 	stw	r6,28(sp)
    dc2c:	da000615 	stw	r8,24(sp)
    dc30:	000c3c80 	call	c3c8 <__mulsi3>
    dc34:	980b883a 	mov	r5,r19
    dc38:	9009883a 	mov	r4,r18
    dc3c:	1029883a 	mov	r20,r2
    dc40:	000c3c80 	call	c3c8 <__mulsi3>
    dc44:	b80b883a 	mov	r5,r23
    dc48:	9809883a 	mov	r4,r19
    dc4c:	102b883a 	mov	r21,r2
    dc50:	000c3c80 	call	c3c8 <__mulsi3>
    dc54:	b809883a 	mov	r4,r23
    dc58:	b00b883a 	mov	r5,r22
    dc5c:	1039883a 	mov	fp,r2
    dc60:	000c3c80 	call	c3c8 <__mulsi3>
    dc64:	a008d43a 	srli	r4,r20,16
    dc68:	1545883a 	add	r2,r2,r21
    dc6c:	d8c00517 	ldw	r3,20(sp)
    dc70:	2085883a 	add	r2,r4,r2
    dc74:	d9800717 	ldw	r6,28(sp)
    dc78:	da000617 	ldw	r8,24(sp)
    dc7c:	1540022e 	bgeu	r2,r21,dc88 <__muldf3+0x3c4>
    dc80:	01000074 	movhi	r4,1
    dc84:	e139883a 	add	fp,fp,r4
    dc88:	100e943a 	slli	r7,r2,16
    dc8c:	1004d43a 	srli	r2,r2,16
    dc90:	882ad43a 	srli	r21,r17,16
    dc94:	a53fffcc 	andi	r20,r20,65535
    dc98:	8c7fffcc 	andi	r17,r17,65535
    dc9c:	3d29883a 	add	r20,r7,r20
    dca0:	b00b883a 	mov	r5,r22
    dca4:	8809883a 	mov	r4,r17
    dca8:	d8c00515 	stw	r3,20(sp)
    dcac:	d9800715 	stw	r6,28(sp)
    dcb0:	da000615 	stw	r8,24(sp)
    dcb4:	dd000115 	stw	r20,4(sp)
    dcb8:	d8800015 	stw	r2,0(sp)
    dcbc:	000c3c80 	call	c3c8 <__mulsi3>
    dcc0:	980b883a 	mov	r5,r19
    dcc4:	8809883a 	mov	r4,r17
    dcc8:	d8800215 	stw	r2,8(sp)
    dccc:	000c3c80 	call	c3c8 <__mulsi3>
    dcd0:	9809883a 	mov	r4,r19
    dcd4:	a80b883a 	mov	r5,r21
    dcd8:	1029883a 	mov	r20,r2
    dcdc:	000c3c80 	call	c3c8 <__mulsi3>
    dce0:	b00b883a 	mov	r5,r22
    dce4:	a809883a 	mov	r4,r21
    dce8:	d8800415 	stw	r2,16(sp)
    dcec:	000c3c80 	call	c3c8 <__mulsi3>
    dcf0:	d9c00217 	ldw	r7,8(sp)
    dcf4:	1505883a 	add	r2,r2,r20
    dcf8:	d8c00517 	ldw	r3,20(sp)
    dcfc:	3826d43a 	srli	r19,r7,16
    dd00:	d9800717 	ldw	r6,28(sp)
    dd04:	da000617 	ldw	r8,24(sp)
    dd08:	9885883a 	add	r2,r19,r2
    dd0c:	da400417 	ldw	r9,16(sp)
    dd10:	1500022e 	bgeu	r2,r20,dd1c <__muldf3+0x458>
    dd14:	01000074 	movhi	r4,1
    dd18:	4913883a 	add	r9,r9,r4
    dd1c:	1028d43a 	srli	r20,r2,16
    dd20:	1004943a 	slli	r2,r2,16
    dd24:	802cd43a 	srli	r22,r16,16
    dd28:	843fffcc 	andi	r16,r16,65535
    dd2c:	3cffffcc 	andi	r19,r7,65535
    dd30:	9009883a 	mov	r4,r18
    dd34:	800b883a 	mov	r5,r16
    dd38:	a269883a 	add	r20,r20,r9
    dd3c:	d8c00515 	stw	r3,20(sp)
    dd40:	d9800715 	stw	r6,28(sp)
    dd44:	da000615 	stw	r8,24(sp)
    dd48:	14e7883a 	add	r19,r2,r19
    dd4c:	000c3c80 	call	c3c8 <__mulsi3>
    dd50:	9009883a 	mov	r4,r18
    dd54:	b00b883a 	mov	r5,r22
    dd58:	d8800315 	stw	r2,12(sp)
    dd5c:	000c3c80 	call	c3c8 <__mulsi3>
    dd60:	b809883a 	mov	r4,r23
    dd64:	b00b883a 	mov	r5,r22
    dd68:	d8800215 	stw	r2,8(sp)
    dd6c:	000c3c80 	call	c3c8 <__mulsi3>
    dd70:	b80b883a 	mov	r5,r23
    dd74:	8009883a 	mov	r4,r16
    dd78:	d8800415 	stw	r2,16(sp)
    dd7c:	000c3c80 	call	c3c8 <__mulsi3>
    dd80:	da800317 	ldw	r10,12(sp)
    dd84:	d9c00217 	ldw	r7,8(sp)
    dd88:	d9000017 	ldw	r4,0(sp)
    dd8c:	502ed43a 	srli	r23,r10,16
    dd90:	11c5883a 	add	r2,r2,r7
    dd94:	24e5883a 	add	r18,r4,r19
    dd98:	b885883a 	add	r2,r23,r2
    dd9c:	d8c00517 	ldw	r3,20(sp)
    dda0:	d9800717 	ldw	r6,28(sp)
    dda4:	da000617 	ldw	r8,24(sp)
    dda8:	da400417 	ldw	r9,16(sp)
    ddac:	11c0022e 	bgeu	r2,r7,ddb8 <__muldf3+0x4f4>
    ddb0:	01000074 	movhi	r4,1
    ddb4:	4913883a 	add	r9,r9,r4
    ddb8:	100ed43a 	srli	r7,r2,16
    ddbc:	1004943a 	slli	r2,r2,16
    ddc0:	55ffffcc 	andi	r23,r10,65535
    ddc4:	3a53883a 	add	r9,r7,r9
    ddc8:	8809883a 	mov	r4,r17
    ddcc:	800b883a 	mov	r5,r16
    ddd0:	d8c00515 	stw	r3,20(sp)
    ddd4:	d9800715 	stw	r6,28(sp)
    ddd8:	da000615 	stw	r8,24(sp)
    dddc:	da400415 	stw	r9,16(sp)
    dde0:	15ef883a 	add	r23,r2,r23
    dde4:	000c3c80 	call	c3c8 <__mulsi3>
    dde8:	8809883a 	mov	r4,r17
    ddec:	b00b883a 	mov	r5,r22
    ddf0:	d8800215 	stw	r2,8(sp)
    ddf4:	000c3c80 	call	c3c8 <__mulsi3>
    ddf8:	b00b883a 	mov	r5,r22
    ddfc:	a809883a 	mov	r4,r21
    de00:	d8800315 	stw	r2,12(sp)
    de04:	000c3c80 	call	c3c8 <__mulsi3>
    de08:	8009883a 	mov	r4,r16
    de0c:	a80b883a 	mov	r5,r21
    de10:	1023883a 	mov	r17,r2
    de14:	000c3c80 	call	c3c8 <__mulsi3>
    de18:	d9c00217 	ldw	r7,8(sp)
    de1c:	da800317 	ldw	r10,12(sp)
    de20:	d8c00517 	ldw	r3,20(sp)
    de24:	3808d43a 	srli	r4,r7,16
    de28:	1285883a 	add	r2,r2,r10
    de2c:	d9800717 	ldw	r6,28(sp)
    de30:	2085883a 	add	r2,r4,r2
    de34:	da000617 	ldw	r8,24(sp)
    de38:	da400417 	ldw	r9,16(sp)
    de3c:	1280022e 	bgeu	r2,r10,de48 <__muldf3+0x584>
    de40:	01000074 	movhi	r4,1
    de44:	8923883a 	add	r17,r17,r4
    de48:	1008943a 	slli	r4,r2,16
    de4c:	39ffffcc 	andi	r7,r7,65535
    de50:	e4b9883a 	add	fp,fp,r18
    de54:	21cf883a 	add	r7,r4,r7
    de58:	e4e7803a 	cmpltu	r19,fp,r19
    de5c:	3d0f883a 	add	r7,r7,r20
    de60:	bf39883a 	add	fp,r23,fp
    de64:	99c9883a 	add	r4,r19,r7
    de68:	e5ef803a 	cmpltu	r23,fp,r23
    de6c:	490b883a 	add	r5,r9,r4
    de70:	1004d43a 	srli	r2,r2,16
    de74:	b965883a 	add	r18,r23,r5
    de78:	24c9803a 	cmpltu	r4,r4,r19
    de7c:	3d29803a 	cmpltu	r20,r7,r20
    de80:	a128b03a 	or	r20,r20,r4
    de84:	95ef803a 	cmpltu	r23,r18,r23
    de88:	2a53803a 	cmpltu	r9,r5,r9
    de8c:	a0a9883a 	add	r20,r20,r2
    de90:	4deeb03a 	or	r23,r9,r23
    de94:	a5ef883a 	add	r23,r20,r23
    de98:	bc63883a 	add	r17,r23,r17
    de9c:	e004927a 	slli	r2,fp,9
    dea0:	d9000117 	ldw	r4,4(sp)
    dea4:	882e927a 	slli	r23,r17,9
    dea8:	9022d5fa 	srli	r17,r18,23
    deac:	e038d5fa 	srli	fp,fp,23
    deb0:	1104b03a 	or	r2,r2,r4
    deb4:	9024927a 	slli	r18,r18,9
    deb8:	1004c03a 	cmpne	r2,r2,zero
    debc:	bc62b03a 	or	r17,r23,r17
    dec0:	1738b03a 	or	fp,r2,fp
    dec4:	8880402c 	andhi	r2,r17,256
    dec8:	e4a4b03a 	or	r18,fp,r18
    decc:	10000726 	beq	r2,zero,deec <__muldf3+0x628>
    ded0:	9006d07a 	srli	r3,r18,1
    ded4:	880497fa 	slli	r2,r17,31
    ded8:	9480004c 	andi	r18,r18,1
    dedc:	8822d07a 	srli	r17,r17,1
    dee0:	1ca4b03a 	or	r18,r3,r18
    dee4:	14a4b03a 	or	r18,r2,r18
    dee8:	4007883a 	mov	r3,r8
    deec:	1880ffc4 	addi	r2,r3,1023
    def0:	0080460e 	bge	zero,r2,e00c <__muldf3+0x748>
    def4:	910001cc 	andi	r4,r18,7
    def8:	20000726 	beq	r4,zero,df18 <__muldf3+0x654>
    defc:	910003cc 	andi	r4,r18,15
    df00:	01400104 	movi	r5,4
    df04:	21400426 	beq	r4,r5,df18 <__muldf3+0x654>
    df08:	9149883a 	add	r4,r18,r5
    df0c:	24a5803a 	cmpltu	r18,r4,r18
    df10:	8ca3883a 	add	r17,r17,r18
    df14:	2025883a 	mov	r18,r4
    df18:	8900402c 	andhi	r4,r17,256
    df1c:	20000426 	beq	r4,zero,df30 <__muldf3+0x66c>
    df20:	18810004 	addi	r2,r3,1024
    df24:	00ffc034 	movhi	r3,65280
    df28:	18ffffc4 	addi	r3,r3,-1
    df2c:	88e2703a 	and	r17,r17,r3
    df30:	00c1ff84 	movi	r3,2046
    df34:	18bf1316 	blt	r3,r2,db84 <__alt_data_end+0xfffddb84>
    df38:	882c977a 	slli	r22,r17,29
    df3c:	9024d0fa 	srli	r18,r18,3
    df40:	8822927a 	slli	r17,r17,9
    df44:	1081ffcc 	andi	r2,r2,2047
    df48:	b4acb03a 	or	r22,r22,r18
    df4c:	8820d33a 	srli	r16,r17,12
    df50:	3027883a 	mov	r19,r6
    df54:	003eba06 	br	da40 <__alt_data_end+0xfffdda40>
    df58:	8080022c 	andhi	r2,r16,8
    df5c:	10000926 	beq	r2,zero,df84 <__muldf3+0x6c0>
    df60:	8880022c 	andhi	r2,r17,8
    df64:	1000071e 	bne	r2,zero,df84 <__muldf3+0x6c0>
    df68:	00800434 	movhi	r2,16
    df6c:	8c000234 	orhi	r16,r17,8
    df70:	10bfffc4 	addi	r2,r2,-1
    df74:	e027883a 	mov	r19,fp
    df78:	80a0703a 	and	r16,r16,r2
    df7c:	902d883a 	mov	r22,r18
    df80:	003f1706 	br	dbe0 <__alt_data_end+0xfffddbe0>
    df84:	00800434 	movhi	r2,16
    df88:	84000234 	orhi	r16,r16,8
    df8c:	10bfffc4 	addi	r2,r2,-1
    df90:	80a0703a 	and	r16,r16,r2
    df94:	003f1206 	br	dbe0 <__alt_data_end+0xfffddbe0>
    df98:	147ff604 	addi	r17,r2,-40
    df9c:	3462983a 	sll	r17,r6,r17
    dfa0:	0025883a 	mov	r18,zero
    dfa4:	003ef306 	br	db74 <__alt_data_end+0xfffddb74>
    dfa8:	3009883a 	mov	r4,r6
    dfac:	d9400215 	stw	r5,8(sp)
    dfb0:	d9800715 	stw	r6,28(sp)
    dfb4:	da400415 	stw	r9,16(sp)
    dfb8:	da800315 	stw	r10,12(sp)
    dfbc:	000ec300 	call	ec30 <__clzsi2>
    dfc0:	10800804 	addi	r2,r2,32
    dfc4:	da800317 	ldw	r10,12(sp)
    dfc8:	da400417 	ldw	r9,16(sp)
    dfcc:	d9800717 	ldw	r6,28(sp)
    dfd0:	d9400217 	ldw	r5,8(sp)
    dfd4:	003edd06 	br	db4c <__alt_data_end+0xfffddb4c>
    dfd8:	143ff604 	addi	r16,r2,-40
    dfdc:	ac20983a 	sll	r16,r21,r16
    dfe0:	002d883a 	mov	r22,zero
    dfe4:	003ec106 	br	daec <__alt_data_end+0xfffddaec>
    dfe8:	d9800715 	stw	r6,28(sp)
    dfec:	d9c00215 	stw	r7,8(sp)
    dff0:	da400415 	stw	r9,16(sp)
    dff4:	000ec300 	call	ec30 <__clzsi2>
    dff8:	10800804 	addi	r2,r2,32
    dffc:	da400417 	ldw	r9,16(sp)
    e000:	d9c00217 	ldw	r7,8(sp)
    e004:	d9800717 	ldw	r6,28(sp)
    e008:	003eae06 	br	dac4 <__alt_data_end+0xfffddac4>
    e00c:	00c00044 	movi	r3,1
    e010:	1887c83a 	sub	r3,r3,r2
    e014:	01000e04 	movi	r4,56
    e018:	20fe8516 	blt	r4,r3,da30 <__alt_data_end+0xfffdda30>
    e01c:	010007c4 	movi	r4,31
    e020:	20c01b16 	blt	r4,r3,e090 <__muldf3+0x7cc>
    e024:	00800804 	movi	r2,32
    e028:	10c5c83a 	sub	r2,r2,r3
    e02c:	888a983a 	sll	r5,r17,r2
    e030:	90c8d83a 	srl	r4,r18,r3
    e034:	9084983a 	sll	r2,r18,r2
    e038:	88e2d83a 	srl	r17,r17,r3
    e03c:	2906b03a 	or	r3,r5,r4
    e040:	1004c03a 	cmpne	r2,r2,zero
    e044:	1886b03a 	or	r3,r3,r2
    e048:	188001cc 	andi	r2,r3,7
    e04c:	10000726 	beq	r2,zero,e06c <__muldf3+0x7a8>
    e050:	188003cc 	andi	r2,r3,15
    e054:	01000104 	movi	r4,4
    e058:	11000426 	beq	r2,r4,e06c <__muldf3+0x7a8>
    e05c:	1805883a 	mov	r2,r3
    e060:	10c00104 	addi	r3,r2,4
    e064:	1885803a 	cmpltu	r2,r3,r2
    e068:	88a3883a 	add	r17,r17,r2
    e06c:	8880202c 	andhi	r2,r17,128
    e070:	10001c26 	beq	r2,zero,e0e4 <__muldf3+0x820>
    e074:	3027883a 	mov	r19,r6
    e078:	00800044 	movi	r2,1
    e07c:	0021883a 	mov	r16,zero
    e080:	002d883a 	mov	r22,zero
    e084:	003e6e06 	br	da40 <__alt_data_end+0xfffdda40>
    e088:	4007883a 	mov	r3,r8
    e08c:	003f9706 	br	deec <__alt_data_end+0xfffddeec>
    e090:	017ff844 	movi	r5,-31
    e094:	2885c83a 	sub	r2,r5,r2
    e098:	888ad83a 	srl	r5,r17,r2
    e09c:	00800804 	movi	r2,32
    e0a0:	18801a26 	beq	r3,r2,e10c <__muldf3+0x848>
    e0a4:	01001004 	movi	r4,64
    e0a8:	20c7c83a 	sub	r3,r4,r3
    e0ac:	88e2983a 	sll	r17,r17,r3
    e0b0:	8ca4b03a 	or	r18,r17,r18
    e0b4:	9004c03a 	cmpne	r2,r18,zero
    e0b8:	2884b03a 	or	r2,r5,r2
    e0bc:	144001cc 	andi	r17,r2,7
    e0c0:	88000d1e 	bne	r17,zero,e0f8 <__muldf3+0x834>
    e0c4:	0021883a 	mov	r16,zero
    e0c8:	102cd0fa 	srli	r22,r2,3
    e0cc:	3027883a 	mov	r19,r6
    e0d0:	0005883a 	mov	r2,zero
    e0d4:	b46cb03a 	or	r22,r22,r17
    e0d8:	003e5906 	br	da40 <__alt_data_end+0xfffdda40>
    e0dc:	1007883a 	mov	r3,r2
    e0e0:	0023883a 	mov	r17,zero
    e0e4:	8820927a 	slli	r16,r17,9
    e0e8:	1805883a 	mov	r2,r3
    e0ec:	8822977a 	slli	r17,r17,29
    e0f0:	8020d33a 	srli	r16,r16,12
    e0f4:	003ff406 	br	e0c8 <__alt_data_end+0xfffde0c8>
    e0f8:	10c003cc 	andi	r3,r2,15
    e0fc:	01000104 	movi	r4,4
    e100:	193ff626 	beq	r3,r4,e0dc <__alt_data_end+0xfffde0dc>
    e104:	0023883a 	mov	r17,zero
    e108:	003fd506 	br	e060 <__alt_data_end+0xfffde060>
    e10c:	0023883a 	mov	r17,zero
    e110:	003fe706 	br	e0b0 <__alt_data_end+0xfffde0b0>
    e114:	00800434 	movhi	r2,16
    e118:	8c000234 	orhi	r16,r17,8
    e11c:	10bfffc4 	addi	r2,r2,-1
    e120:	3027883a 	mov	r19,r6
    e124:	80a0703a 	and	r16,r16,r2
    e128:	902d883a 	mov	r22,r18
    e12c:	003eac06 	br	dbe0 <__alt_data_end+0xfffddbe0>

0000e130 <__subdf3>:
    e130:	02000434 	movhi	r8,16
    e134:	423fffc4 	addi	r8,r8,-1
    e138:	defffb04 	addi	sp,sp,-20
    e13c:	2a14703a 	and	r10,r5,r8
    e140:	3812d53a 	srli	r9,r7,20
    e144:	3a10703a 	and	r8,r7,r8
    e148:	2006d77a 	srli	r3,r4,29
    e14c:	3004d77a 	srli	r2,r6,29
    e150:	dc000015 	stw	r16,0(sp)
    e154:	501490fa 	slli	r10,r10,3
    e158:	2820d53a 	srli	r16,r5,20
    e15c:	401090fa 	slli	r8,r8,3
    e160:	dc800215 	stw	r18,8(sp)
    e164:	dc400115 	stw	r17,4(sp)
    e168:	dfc00415 	stw	ra,16(sp)
    e16c:	202290fa 	slli	r17,r4,3
    e170:	dcc00315 	stw	r19,12(sp)
    e174:	4a41ffcc 	andi	r9,r9,2047
    e178:	0101ffc4 	movi	r4,2047
    e17c:	2824d7fa 	srli	r18,r5,31
    e180:	8401ffcc 	andi	r16,r16,2047
    e184:	50c6b03a 	or	r3,r10,r3
    e188:	380ed7fa 	srli	r7,r7,31
    e18c:	408ab03a 	or	r5,r8,r2
    e190:	300c90fa 	slli	r6,r6,3
    e194:	49009626 	beq	r9,r4,e3f0 <__subdf3+0x2c0>
    e198:	39c0005c 	xori	r7,r7,1
    e19c:	8245c83a 	sub	r2,r16,r9
    e1a0:	3c807426 	beq	r7,r18,e374 <__subdf3+0x244>
    e1a4:	0080af0e 	bge	zero,r2,e464 <__subdf3+0x334>
    e1a8:	48002a1e 	bne	r9,zero,e254 <__subdf3+0x124>
    e1ac:	2988b03a 	or	r4,r5,r6
    e1b0:	20009a1e 	bne	r4,zero,e41c <__subdf3+0x2ec>
    e1b4:	888001cc 	andi	r2,r17,7
    e1b8:	10000726 	beq	r2,zero,e1d8 <__subdf3+0xa8>
    e1bc:	888003cc 	andi	r2,r17,15
    e1c0:	01000104 	movi	r4,4
    e1c4:	11000426 	beq	r2,r4,e1d8 <__subdf3+0xa8>
    e1c8:	890b883a 	add	r5,r17,r4
    e1cc:	2c63803a 	cmpltu	r17,r5,r17
    e1d0:	1c47883a 	add	r3,r3,r17
    e1d4:	2823883a 	mov	r17,r5
    e1d8:	1880202c 	andhi	r2,r3,128
    e1dc:	10005926 	beq	r2,zero,e344 <__subdf3+0x214>
    e1e0:	84000044 	addi	r16,r16,1
    e1e4:	0081ffc4 	movi	r2,2047
    e1e8:	8080be26 	beq	r16,r2,e4e4 <__subdf3+0x3b4>
    e1ec:	017fe034 	movhi	r5,65408
    e1f0:	297fffc4 	addi	r5,r5,-1
    e1f4:	1946703a 	and	r3,r3,r5
    e1f8:	1804977a 	slli	r2,r3,29
    e1fc:	1806927a 	slli	r3,r3,9
    e200:	8822d0fa 	srli	r17,r17,3
    e204:	8401ffcc 	andi	r16,r16,2047
    e208:	180ad33a 	srli	r5,r3,12
    e20c:	9100004c 	andi	r4,r18,1
    e210:	1444b03a 	or	r2,r2,r17
    e214:	80c1ffcc 	andi	r3,r16,2047
    e218:	1820953a 	slli	r16,r3,20
    e21c:	20c03fcc 	andi	r3,r4,255
    e220:	180897fa 	slli	r4,r3,31
    e224:	00c00434 	movhi	r3,16
    e228:	18ffffc4 	addi	r3,r3,-1
    e22c:	28c6703a 	and	r3,r5,r3
    e230:	1c06b03a 	or	r3,r3,r16
    e234:	1906b03a 	or	r3,r3,r4
    e238:	dfc00417 	ldw	ra,16(sp)
    e23c:	dcc00317 	ldw	r19,12(sp)
    e240:	dc800217 	ldw	r18,8(sp)
    e244:	dc400117 	ldw	r17,4(sp)
    e248:	dc000017 	ldw	r16,0(sp)
    e24c:	dec00504 	addi	sp,sp,20
    e250:	f800283a 	ret
    e254:	0101ffc4 	movi	r4,2047
    e258:	813fd626 	beq	r16,r4,e1b4 <__alt_data_end+0xfffde1b4>
    e25c:	29402034 	orhi	r5,r5,128
    e260:	01000e04 	movi	r4,56
    e264:	2080a316 	blt	r4,r2,e4f4 <__subdf3+0x3c4>
    e268:	010007c4 	movi	r4,31
    e26c:	2080c616 	blt	r4,r2,e588 <__subdf3+0x458>
    e270:	01000804 	movi	r4,32
    e274:	2089c83a 	sub	r4,r4,r2
    e278:	2910983a 	sll	r8,r5,r4
    e27c:	308ed83a 	srl	r7,r6,r2
    e280:	3108983a 	sll	r4,r6,r4
    e284:	2884d83a 	srl	r2,r5,r2
    e288:	41ccb03a 	or	r6,r8,r7
    e28c:	2008c03a 	cmpne	r4,r4,zero
    e290:	310cb03a 	or	r6,r6,r4
    e294:	898dc83a 	sub	r6,r17,r6
    e298:	89a3803a 	cmpltu	r17,r17,r6
    e29c:	1887c83a 	sub	r3,r3,r2
    e2a0:	1c47c83a 	sub	r3,r3,r17
    e2a4:	3023883a 	mov	r17,r6
    e2a8:	1880202c 	andhi	r2,r3,128
    e2ac:	10002326 	beq	r2,zero,e33c <__subdf3+0x20c>
    e2b0:	04c02034 	movhi	r19,128
    e2b4:	9cffffc4 	addi	r19,r19,-1
    e2b8:	1ce6703a 	and	r19,r3,r19
    e2bc:	98007a26 	beq	r19,zero,e4a8 <__subdf3+0x378>
    e2c0:	9809883a 	mov	r4,r19
    e2c4:	000ec300 	call	ec30 <__clzsi2>
    e2c8:	113ffe04 	addi	r4,r2,-8
    e2cc:	00c007c4 	movi	r3,31
    e2d0:	19007b16 	blt	r3,r4,e4c0 <__subdf3+0x390>
    e2d4:	00800804 	movi	r2,32
    e2d8:	1105c83a 	sub	r2,r2,r4
    e2dc:	8884d83a 	srl	r2,r17,r2
    e2e0:	9906983a 	sll	r3,r19,r4
    e2e4:	8922983a 	sll	r17,r17,r4
    e2e8:	10c4b03a 	or	r2,r2,r3
    e2ec:	24007816 	blt	r4,r16,e4d0 <__subdf3+0x3a0>
    e2f0:	2421c83a 	sub	r16,r4,r16
    e2f4:	80c00044 	addi	r3,r16,1
    e2f8:	010007c4 	movi	r4,31
    e2fc:	20c09516 	blt	r4,r3,e554 <__subdf3+0x424>
    e300:	01400804 	movi	r5,32
    e304:	28cbc83a 	sub	r5,r5,r3
    e308:	88c8d83a 	srl	r4,r17,r3
    e30c:	8962983a 	sll	r17,r17,r5
    e310:	114a983a 	sll	r5,r2,r5
    e314:	10c6d83a 	srl	r3,r2,r3
    e318:	8804c03a 	cmpne	r2,r17,zero
    e31c:	290ab03a 	or	r5,r5,r4
    e320:	28a2b03a 	or	r17,r5,r2
    e324:	0021883a 	mov	r16,zero
    e328:	003fa206 	br	e1b4 <__alt_data_end+0xfffde1b4>
    e32c:	2090b03a 	or	r8,r4,r2
    e330:	40018e26 	beq	r8,zero,e96c <__subdf3+0x83c>
    e334:	1007883a 	mov	r3,r2
    e338:	2023883a 	mov	r17,r4
    e33c:	888001cc 	andi	r2,r17,7
    e340:	103f9e1e 	bne	r2,zero,e1bc <__alt_data_end+0xfffde1bc>
    e344:	1804977a 	slli	r2,r3,29
    e348:	8822d0fa 	srli	r17,r17,3
    e34c:	1810d0fa 	srli	r8,r3,3
    e350:	9100004c 	andi	r4,r18,1
    e354:	1444b03a 	or	r2,r2,r17
    e358:	00c1ffc4 	movi	r3,2047
    e35c:	80c02826 	beq	r16,r3,e400 <__subdf3+0x2d0>
    e360:	01400434 	movhi	r5,16
    e364:	297fffc4 	addi	r5,r5,-1
    e368:	80e0703a 	and	r16,r16,r3
    e36c:	414a703a 	and	r5,r8,r5
    e370:	003fa806 	br	e214 <__alt_data_end+0xfffde214>
    e374:	0080630e 	bge	zero,r2,e504 <__subdf3+0x3d4>
    e378:	48003026 	beq	r9,zero,e43c <__subdf3+0x30c>
    e37c:	0101ffc4 	movi	r4,2047
    e380:	813f8c26 	beq	r16,r4,e1b4 <__alt_data_end+0xfffde1b4>
    e384:	29402034 	orhi	r5,r5,128
    e388:	01000e04 	movi	r4,56
    e38c:	2080a90e 	bge	r4,r2,e634 <__subdf3+0x504>
    e390:	298cb03a 	or	r6,r5,r6
    e394:	3012c03a 	cmpne	r9,r6,zero
    e398:	0005883a 	mov	r2,zero
    e39c:	4c53883a 	add	r9,r9,r17
    e3a0:	4c63803a 	cmpltu	r17,r9,r17
    e3a4:	10c7883a 	add	r3,r2,r3
    e3a8:	88c7883a 	add	r3,r17,r3
    e3ac:	4823883a 	mov	r17,r9
    e3b0:	1880202c 	andhi	r2,r3,128
    e3b4:	1000d026 	beq	r2,zero,e6f8 <__subdf3+0x5c8>
    e3b8:	84000044 	addi	r16,r16,1
    e3bc:	0081ffc4 	movi	r2,2047
    e3c0:	8080fe26 	beq	r16,r2,e7bc <__subdf3+0x68c>
    e3c4:	00bfe034 	movhi	r2,65408
    e3c8:	10bfffc4 	addi	r2,r2,-1
    e3cc:	1886703a 	and	r3,r3,r2
    e3d0:	880ad07a 	srli	r5,r17,1
    e3d4:	180497fa 	slli	r2,r3,31
    e3d8:	8900004c 	andi	r4,r17,1
    e3dc:	2922b03a 	or	r17,r5,r4
    e3e0:	1806d07a 	srli	r3,r3,1
    e3e4:	1462b03a 	or	r17,r2,r17
    e3e8:	3825883a 	mov	r18,r7
    e3ec:	003f7106 	br	e1b4 <__alt_data_end+0xfffde1b4>
    e3f0:	2984b03a 	or	r2,r5,r6
    e3f4:	103f6826 	beq	r2,zero,e198 <__alt_data_end+0xfffde198>
    e3f8:	39c03fcc 	andi	r7,r7,255
    e3fc:	003f6706 	br	e19c <__alt_data_end+0xfffde19c>
    e400:	4086b03a 	or	r3,r8,r2
    e404:	18015226 	beq	r3,zero,e950 <__subdf3+0x820>
    e408:	00c00434 	movhi	r3,16
    e40c:	41400234 	orhi	r5,r8,8
    e410:	18ffffc4 	addi	r3,r3,-1
    e414:	28ca703a 	and	r5,r5,r3
    e418:	003f7e06 	br	e214 <__alt_data_end+0xfffde214>
    e41c:	10bfffc4 	addi	r2,r2,-1
    e420:	1000491e 	bne	r2,zero,e548 <__subdf3+0x418>
    e424:	898fc83a 	sub	r7,r17,r6
    e428:	89e3803a 	cmpltu	r17,r17,r7
    e42c:	1947c83a 	sub	r3,r3,r5
    e430:	1c47c83a 	sub	r3,r3,r17
    e434:	3823883a 	mov	r17,r7
    e438:	003f9b06 	br	e2a8 <__alt_data_end+0xfffde2a8>
    e43c:	2988b03a 	or	r4,r5,r6
    e440:	203f5c26 	beq	r4,zero,e1b4 <__alt_data_end+0xfffde1b4>
    e444:	10bfffc4 	addi	r2,r2,-1
    e448:	1000931e 	bne	r2,zero,e698 <__subdf3+0x568>
    e44c:	898d883a 	add	r6,r17,r6
    e450:	3463803a 	cmpltu	r17,r6,r17
    e454:	1947883a 	add	r3,r3,r5
    e458:	88c7883a 	add	r3,r17,r3
    e45c:	3023883a 	mov	r17,r6
    e460:	003fd306 	br	e3b0 <__alt_data_end+0xfffde3b0>
    e464:	1000541e 	bne	r2,zero,e5b8 <__subdf3+0x488>
    e468:	80800044 	addi	r2,r16,1
    e46c:	1081ffcc 	andi	r2,r2,2047
    e470:	01000044 	movi	r4,1
    e474:	2080a20e 	bge	r4,r2,e700 <__subdf3+0x5d0>
    e478:	8989c83a 	sub	r4,r17,r6
    e47c:	8905803a 	cmpltu	r2,r17,r4
    e480:	1967c83a 	sub	r19,r3,r5
    e484:	98a7c83a 	sub	r19,r19,r2
    e488:	9880202c 	andhi	r2,r19,128
    e48c:	10006326 	beq	r2,zero,e61c <__subdf3+0x4ec>
    e490:	3463c83a 	sub	r17,r6,r17
    e494:	28c7c83a 	sub	r3,r5,r3
    e498:	344d803a 	cmpltu	r6,r6,r17
    e49c:	19a7c83a 	sub	r19,r3,r6
    e4a0:	3825883a 	mov	r18,r7
    e4a4:	983f861e 	bne	r19,zero,e2c0 <__alt_data_end+0xfffde2c0>
    e4a8:	8809883a 	mov	r4,r17
    e4ac:	000ec300 	call	ec30 <__clzsi2>
    e4b0:	10800804 	addi	r2,r2,32
    e4b4:	113ffe04 	addi	r4,r2,-8
    e4b8:	00c007c4 	movi	r3,31
    e4bc:	193f850e 	bge	r3,r4,e2d4 <__alt_data_end+0xfffde2d4>
    e4c0:	10bff604 	addi	r2,r2,-40
    e4c4:	8884983a 	sll	r2,r17,r2
    e4c8:	0023883a 	mov	r17,zero
    e4cc:	243f880e 	bge	r4,r16,e2f0 <__alt_data_end+0xfffde2f0>
    e4d0:	00ffe034 	movhi	r3,65408
    e4d4:	18ffffc4 	addi	r3,r3,-1
    e4d8:	8121c83a 	sub	r16,r16,r4
    e4dc:	10c6703a 	and	r3,r2,r3
    e4e0:	003f3406 	br	e1b4 <__alt_data_end+0xfffde1b4>
    e4e4:	9100004c 	andi	r4,r18,1
    e4e8:	000b883a 	mov	r5,zero
    e4ec:	0005883a 	mov	r2,zero
    e4f0:	003f4806 	br	e214 <__alt_data_end+0xfffde214>
    e4f4:	298cb03a 	or	r6,r5,r6
    e4f8:	300cc03a 	cmpne	r6,r6,zero
    e4fc:	0005883a 	mov	r2,zero
    e500:	003f6406 	br	e294 <__alt_data_end+0xfffde294>
    e504:	10009a1e 	bne	r2,zero,e770 <__subdf3+0x640>
    e508:	82400044 	addi	r9,r16,1
    e50c:	4881ffcc 	andi	r2,r9,2047
    e510:	02800044 	movi	r10,1
    e514:	5080670e 	bge	r10,r2,e6b4 <__subdf3+0x584>
    e518:	0081ffc4 	movi	r2,2047
    e51c:	4880af26 	beq	r9,r2,e7dc <__subdf3+0x6ac>
    e520:	898d883a 	add	r6,r17,r6
    e524:	1945883a 	add	r2,r3,r5
    e528:	3447803a 	cmpltu	r3,r6,r17
    e52c:	1887883a 	add	r3,r3,r2
    e530:	182297fa 	slli	r17,r3,31
    e534:	300cd07a 	srli	r6,r6,1
    e538:	1806d07a 	srli	r3,r3,1
    e53c:	4821883a 	mov	r16,r9
    e540:	89a2b03a 	or	r17,r17,r6
    e544:	003f1b06 	br	e1b4 <__alt_data_end+0xfffde1b4>
    e548:	0101ffc4 	movi	r4,2047
    e54c:	813f441e 	bne	r16,r4,e260 <__alt_data_end+0xfffde260>
    e550:	003f1806 	br	e1b4 <__alt_data_end+0xfffde1b4>
    e554:	843ff844 	addi	r16,r16,-31
    e558:	01400804 	movi	r5,32
    e55c:	1408d83a 	srl	r4,r2,r16
    e560:	19405026 	beq	r3,r5,e6a4 <__subdf3+0x574>
    e564:	01401004 	movi	r5,64
    e568:	28c7c83a 	sub	r3,r5,r3
    e56c:	10c4983a 	sll	r2,r2,r3
    e570:	88a2b03a 	or	r17,r17,r2
    e574:	8822c03a 	cmpne	r17,r17,zero
    e578:	2462b03a 	or	r17,r4,r17
    e57c:	0007883a 	mov	r3,zero
    e580:	0021883a 	mov	r16,zero
    e584:	003f6d06 	br	e33c <__alt_data_end+0xfffde33c>
    e588:	11fff804 	addi	r7,r2,-32
    e58c:	01000804 	movi	r4,32
    e590:	29ced83a 	srl	r7,r5,r7
    e594:	11004526 	beq	r2,r4,e6ac <__subdf3+0x57c>
    e598:	01001004 	movi	r4,64
    e59c:	2089c83a 	sub	r4,r4,r2
    e5a0:	2904983a 	sll	r2,r5,r4
    e5a4:	118cb03a 	or	r6,r2,r6
    e5a8:	300cc03a 	cmpne	r6,r6,zero
    e5ac:	398cb03a 	or	r6,r7,r6
    e5b0:	0005883a 	mov	r2,zero
    e5b4:	003f3706 	br	e294 <__alt_data_end+0xfffde294>
    e5b8:	80002a26 	beq	r16,zero,e664 <__subdf3+0x534>
    e5bc:	0101ffc4 	movi	r4,2047
    e5c0:	49006626 	beq	r9,r4,e75c <__subdf3+0x62c>
    e5c4:	0085c83a 	sub	r2,zero,r2
    e5c8:	18c02034 	orhi	r3,r3,128
    e5cc:	01000e04 	movi	r4,56
    e5d0:	20807e16 	blt	r4,r2,e7cc <__subdf3+0x69c>
    e5d4:	010007c4 	movi	r4,31
    e5d8:	2080e716 	blt	r4,r2,e978 <__subdf3+0x848>
    e5dc:	01000804 	movi	r4,32
    e5e0:	2089c83a 	sub	r4,r4,r2
    e5e4:	1914983a 	sll	r10,r3,r4
    e5e8:	8890d83a 	srl	r8,r17,r2
    e5ec:	8908983a 	sll	r4,r17,r4
    e5f0:	1884d83a 	srl	r2,r3,r2
    e5f4:	5222b03a 	or	r17,r10,r8
    e5f8:	2006c03a 	cmpne	r3,r4,zero
    e5fc:	88e2b03a 	or	r17,r17,r3
    e600:	3463c83a 	sub	r17,r6,r17
    e604:	2885c83a 	sub	r2,r5,r2
    e608:	344d803a 	cmpltu	r6,r6,r17
    e60c:	1187c83a 	sub	r3,r2,r6
    e610:	4821883a 	mov	r16,r9
    e614:	3825883a 	mov	r18,r7
    e618:	003f2306 	br	e2a8 <__alt_data_end+0xfffde2a8>
    e61c:	24d0b03a 	or	r8,r4,r19
    e620:	40001b1e 	bne	r8,zero,e690 <__subdf3+0x560>
    e624:	0005883a 	mov	r2,zero
    e628:	0009883a 	mov	r4,zero
    e62c:	0021883a 	mov	r16,zero
    e630:	003f4906 	br	e358 <__alt_data_end+0xfffde358>
    e634:	010007c4 	movi	r4,31
    e638:	20803a16 	blt	r4,r2,e724 <__subdf3+0x5f4>
    e63c:	01000804 	movi	r4,32
    e640:	2089c83a 	sub	r4,r4,r2
    e644:	2912983a 	sll	r9,r5,r4
    e648:	3090d83a 	srl	r8,r6,r2
    e64c:	3108983a 	sll	r4,r6,r4
    e650:	2884d83a 	srl	r2,r5,r2
    e654:	4a12b03a 	or	r9,r9,r8
    e658:	2008c03a 	cmpne	r4,r4,zero
    e65c:	4912b03a 	or	r9,r9,r4
    e660:	003f4e06 	br	e39c <__alt_data_end+0xfffde39c>
    e664:	1c48b03a 	or	r4,r3,r17
    e668:	20003c26 	beq	r4,zero,e75c <__subdf3+0x62c>
    e66c:	0084303a 	nor	r2,zero,r2
    e670:	1000381e 	bne	r2,zero,e754 <__subdf3+0x624>
    e674:	3463c83a 	sub	r17,r6,r17
    e678:	28c5c83a 	sub	r2,r5,r3
    e67c:	344d803a 	cmpltu	r6,r6,r17
    e680:	1187c83a 	sub	r3,r2,r6
    e684:	4821883a 	mov	r16,r9
    e688:	3825883a 	mov	r18,r7
    e68c:	003f0606 	br	e2a8 <__alt_data_end+0xfffde2a8>
    e690:	2023883a 	mov	r17,r4
    e694:	003f0906 	br	e2bc <__alt_data_end+0xfffde2bc>
    e698:	0101ffc4 	movi	r4,2047
    e69c:	813f3a1e 	bne	r16,r4,e388 <__alt_data_end+0xfffde388>
    e6a0:	003ec406 	br	e1b4 <__alt_data_end+0xfffde1b4>
    e6a4:	0005883a 	mov	r2,zero
    e6a8:	003fb106 	br	e570 <__alt_data_end+0xfffde570>
    e6ac:	0005883a 	mov	r2,zero
    e6b0:	003fbc06 	br	e5a4 <__alt_data_end+0xfffde5a4>
    e6b4:	1c44b03a 	or	r2,r3,r17
    e6b8:	80008e1e 	bne	r16,zero,e8f4 <__subdf3+0x7c4>
    e6bc:	1000c826 	beq	r2,zero,e9e0 <__subdf3+0x8b0>
    e6c0:	2984b03a 	or	r2,r5,r6
    e6c4:	103ebb26 	beq	r2,zero,e1b4 <__alt_data_end+0xfffde1b4>
    e6c8:	8989883a 	add	r4,r17,r6
    e6cc:	1945883a 	add	r2,r3,r5
    e6d0:	2447803a 	cmpltu	r3,r4,r17
    e6d4:	1887883a 	add	r3,r3,r2
    e6d8:	1880202c 	andhi	r2,r3,128
    e6dc:	2023883a 	mov	r17,r4
    e6e0:	103f1626 	beq	r2,zero,e33c <__alt_data_end+0xfffde33c>
    e6e4:	00bfe034 	movhi	r2,65408
    e6e8:	10bfffc4 	addi	r2,r2,-1
    e6ec:	5021883a 	mov	r16,r10
    e6f0:	1886703a 	and	r3,r3,r2
    e6f4:	003eaf06 	br	e1b4 <__alt_data_end+0xfffde1b4>
    e6f8:	3825883a 	mov	r18,r7
    e6fc:	003f0f06 	br	e33c <__alt_data_end+0xfffde33c>
    e700:	1c44b03a 	or	r2,r3,r17
    e704:	8000251e 	bne	r16,zero,e79c <__subdf3+0x66c>
    e708:	1000661e 	bne	r2,zero,e8a4 <__subdf3+0x774>
    e70c:	2990b03a 	or	r8,r5,r6
    e710:	40009626 	beq	r8,zero,e96c <__subdf3+0x83c>
    e714:	2807883a 	mov	r3,r5
    e718:	3023883a 	mov	r17,r6
    e71c:	3825883a 	mov	r18,r7
    e720:	003ea406 	br	e1b4 <__alt_data_end+0xfffde1b4>
    e724:	127ff804 	addi	r9,r2,-32
    e728:	01000804 	movi	r4,32
    e72c:	2a52d83a 	srl	r9,r5,r9
    e730:	11008c26 	beq	r2,r4,e964 <__subdf3+0x834>
    e734:	01001004 	movi	r4,64
    e738:	2085c83a 	sub	r2,r4,r2
    e73c:	2884983a 	sll	r2,r5,r2
    e740:	118cb03a 	or	r6,r2,r6
    e744:	300cc03a 	cmpne	r6,r6,zero
    e748:	4992b03a 	or	r9,r9,r6
    e74c:	0005883a 	mov	r2,zero
    e750:	003f1206 	br	e39c <__alt_data_end+0xfffde39c>
    e754:	0101ffc4 	movi	r4,2047
    e758:	493f9c1e 	bne	r9,r4,e5cc <__alt_data_end+0xfffde5cc>
    e75c:	2807883a 	mov	r3,r5
    e760:	3023883a 	mov	r17,r6
    e764:	4821883a 	mov	r16,r9
    e768:	3825883a 	mov	r18,r7
    e76c:	003e9106 	br	e1b4 <__alt_data_end+0xfffde1b4>
    e770:	80001f1e 	bne	r16,zero,e7f0 <__subdf3+0x6c0>
    e774:	1c48b03a 	or	r4,r3,r17
    e778:	20005a26 	beq	r4,zero,e8e4 <__subdf3+0x7b4>
    e77c:	0084303a 	nor	r2,zero,r2
    e780:	1000561e 	bne	r2,zero,e8dc <__subdf3+0x7ac>
    e784:	89a3883a 	add	r17,r17,r6
    e788:	1945883a 	add	r2,r3,r5
    e78c:	898d803a 	cmpltu	r6,r17,r6
    e790:	3087883a 	add	r3,r6,r2
    e794:	4821883a 	mov	r16,r9
    e798:	003f0506 	br	e3b0 <__alt_data_end+0xfffde3b0>
    e79c:	10002b1e 	bne	r2,zero,e84c <__subdf3+0x71c>
    e7a0:	2984b03a 	or	r2,r5,r6
    e7a4:	10008026 	beq	r2,zero,e9a8 <__subdf3+0x878>
    e7a8:	2807883a 	mov	r3,r5
    e7ac:	3023883a 	mov	r17,r6
    e7b0:	3825883a 	mov	r18,r7
    e7b4:	0401ffc4 	movi	r16,2047
    e7b8:	003e7e06 	br	e1b4 <__alt_data_end+0xfffde1b4>
    e7bc:	3809883a 	mov	r4,r7
    e7c0:	0011883a 	mov	r8,zero
    e7c4:	0005883a 	mov	r2,zero
    e7c8:	003ee306 	br	e358 <__alt_data_end+0xfffde358>
    e7cc:	1c62b03a 	or	r17,r3,r17
    e7d0:	8822c03a 	cmpne	r17,r17,zero
    e7d4:	0005883a 	mov	r2,zero
    e7d8:	003f8906 	br	e600 <__alt_data_end+0xfffde600>
    e7dc:	3809883a 	mov	r4,r7
    e7e0:	4821883a 	mov	r16,r9
    e7e4:	0011883a 	mov	r8,zero
    e7e8:	0005883a 	mov	r2,zero
    e7ec:	003eda06 	br	e358 <__alt_data_end+0xfffde358>
    e7f0:	0101ffc4 	movi	r4,2047
    e7f4:	49003b26 	beq	r9,r4,e8e4 <__subdf3+0x7b4>
    e7f8:	0085c83a 	sub	r2,zero,r2
    e7fc:	18c02034 	orhi	r3,r3,128
    e800:	01000e04 	movi	r4,56
    e804:	20806e16 	blt	r4,r2,e9c0 <__subdf3+0x890>
    e808:	010007c4 	movi	r4,31
    e80c:	20807716 	blt	r4,r2,e9ec <__subdf3+0x8bc>
    e810:	01000804 	movi	r4,32
    e814:	2089c83a 	sub	r4,r4,r2
    e818:	1914983a 	sll	r10,r3,r4
    e81c:	8890d83a 	srl	r8,r17,r2
    e820:	8908983a 	sll	r4,r17,r4
    e824:	1884d83a 	srl	r2,r3,r2
    e828:	5222b03a 	or	r17,r10,r8
    e82c:	2006c03a 	cmpne	r3,r4,zero
    e830:	88e2b03a 	or	r17,r17,r3
    e834:	89a3883a 	add	r17,r17,r6
    e838:	1145883a 	add	r2,r2,r5
    e83c:	898d803a 	cmpltu	r6,r17,r6
    e840:	3087883a 	add	r3,r6,r2
    e844:	4821883a 	mov	r16,r9
    e848:	003ed906 	br	e3b0 <__alt_data_end+0xfffde3b0>
    e84c:	2984b03a 	or	r2,r5,r6
    e850:	10004226 	beq	r2,zero,e95c <__subdf3+0x82c>
    e854:	1808d0fa 	srli	r4,r3,3
    e858:	8822d0fa 	srli	r17,r17,3
    e85c:	1806977a 	slli	r3,r3,29
    e860:	2080022c 	andhi	r2,r4,8
    e864:	1c62b03a 	or	r17,r3,r17
    e868:	10000826 	beq	r2,zero,e88c <__subdf3+0x75c>
    e86c:	2812d0fa 	srli	r9,r5,3
    e870:	4880022c 	andhi	r2,r9,8
    e874:	1000051e 	bne	r2,zero,e88c <__subdf3+0x75c>
    e878:	300cd0fa 	srli	r6,r6,3
    e87c:	2804977a 	slli	r2,r5,29
    e880:	4809883a 	mov	r4,r9
    e884:	3825883a 	mov	r18,r7
    e888:	11a2b03a 	or	r17,r2,r6
    e88c:	8806d77a 	srli	r3,r17,29
    e890:	200890fa 	slli	r4,r4,3
    e894:	882290fa 	slli	r17,r17,3
    e898:	0401ffc4 	movi	r16,2047
    e89c:	1906b03a 	or	r3,r3,r4
    e8a0:	003e4406 	br	e1b4 <__alt_data_end+0xfffde1b4>
    e8a4:	2984b03a 	or	r2,r5,r6
    e8a8:	103e4226 	beq	r2,zero,e1b4 <__alt_data_end+0xfffde1b4>
    e8ac:	8989c83a 	sub	r4,r17,r6
    e8b0:	8911803a 	cmpltu	r8,r17,r4
    e8b4:	1945c83a 	sub	r2,r3,r5
    e8b8:	1205c83a 	sub	r2,r2,r8
    e8bc:	1200202c 	andhi	r8,r2,128
    e8c0:	403e9a26 	beq	r8,zero,e32c <__alt_data_end+0xfffde32c>
    e8c4:	3463c83a 	sub	r17,r6,r17
    e8c8:	28c5c83a 	sub	r2,r5,r3
    e8cc:	344d803a 	cmpltu	r6,r6,r17
    e8d0:	1187c83a 	sub	r3,r2,r6
    e8d4:	3825883a 	mov	r18,r7
    e8d8:	003e3606 	br	e1b4 <__alt_data_end+0xfffde1b4>
    e8dc:	0101ffc4 	movi	r4,2047
    e8e0:	493fc71e 	bne	r9,r4,e800 <__alt_data_end+0xfffde800>
    e8e4:	2807883a 	mov	r3,r5
    e8e8:	3023883a 	mov	r17,r6
    e8ec:	4821883a 	mov	r16,r9
    e8f0:	003e3006 	br	e1b4 <__alt_data_end+0xfffde1b4>
    e8f4:	10003626 	beq	r2,zero,e9d0 <__subdf3+0x8a0>
    e8f8:	2984b03a 	or	r2,r5,r6
    e8fc:	10001726 	beq	r2,zero,e95c <__subdf3+0x82c>
    e900:	1808d0fa 	srli	r4,r3,3
    e904:	8822d0fa 	srli	r17,r17,3
    e908:	1806977a 	slli	r3,r3,29
    e90c:	2080022c 	andhi	r2,r4,8
    e910:	1c62b03a 	or	r17,r3,r17
    e914:	10000726 	beq	r2,zero,e934 <__subdf3+0x804>
    e918:	2812d0fa 	srli	r9,r5,3
    e91c:	4880022c 	andhi	r2,r9,8
    e920:	1000041e 	bne	r2,zero,e934 <__subdf3+0x804>
    e924:	300cd0fa 	srli	r6,r6,3
    e928:	2804977a 	slli	r2,r5,29
    e92c:	4809883a 	mov	r4,r9
    e930:	11a2b03a 	or	r17,r2,r6
    e934:	8806d77a 	srli	r3,r17,29
    e938:	200890fa 	slli	r4,r4,3
    e93c:	882290fa 	slli	r17,r17,3
    e940:	3825883a 	mov	r18,r7
    e944:	1906b03a 	or	r3,r3,r4
    e948:	0401ffc4 	movi	r16,2047
    e94c:	003e1906 	br	e1b4 <__alt_data_end+0xfffde1b4>
    e950:	000b883a 	mov	r5,zero
    e954:	0005883a 	mov	r2,zero
    e958:	003e2e06 	br	e214 <__alt_data_end+0xfffde214>
    e95c:	0401ffc4 	movi	r16,2047
    e960:	003e1406 	br	e1b4 <__alt_data_end+0xfffde1b4>
    e964:	0005883a 	mov	r2,zero
    e968:	003f7506 	br	e740 <__alt_data_end+0xfffde740>
    e96c:	0005883a 	mov	r2,zero
    e970:	0009883a 	mov	r4,zero
    e974:	003e7806 	br	e358 <__alt_data_end+0xfffde358>
    e978:	123ff804 	addi	r8,r2,-32
    e97c:	01000804 	movi	r4,32
    e980:	1a10d83a 	srl	r8,r3,r8
    e984:	11002526 	beq	r2,r4,ea1c <__subdf3+0x8ec>
    e988:	01001004 	movi	r4,64
    e98c:	2085c83a 	sub	r2,r4,r2
    e990:	1884983a 	sll	r2,r3,r2
    e994:	1444b03a 	or	r2,r2,r17
    e998:	1004c03a 	cmpne	r2,r2,zero
    e99c:	40a2b03a 	or	r17,r8,r2
    e9a0:	0005883a 	mov	r2,zero
    e9a4:	003f1606 	br	e600 <__alt_data_end+0xfffde600>
    e9a8:	02000434 	movhi	r8,16
    e9ac:	0009883a 	mov	r4,zero
    e9b0:	423fffc4 	addi	r8,r8,-1
    e9b4:	00bfffc4 	movi	r2,-1
    e9b8:	0401ffc4 	movi	r16,2047
    e9bc:	003e6606 	br	e358 <__alt_data_end+0xfffde358>
    e9c0:	1c62b03a 	or	r17,r3,r17
    e9c4:	8822c03a 	cmpne	r17,r17,zero
    e9c8:	0005883a 	mov	r2,zero
    e9cc:	003f9906 	br	e834 <__alt_data_end+0xfffde834>
    e9d0:	2807883a 	mov	r3,r5
    e9d4:	3023883a 	mov	r17,r6
    e9d8:	0401ffc4 	movi	r16,2047
    e9dc:	003df506 	br	e1b4 <__alt_data_end+0xfffde1b4>
    e9e0:	2807883a 	mov	r3,r5
    e9e4:	3023883a 	mov	r17,r6
    e9e8:	003df206 	br	e1b4 <__alt_data_end+0xfffde1b4>
    e9ec:	123ff804 	addi	r8,r2,-32
    e9f0:	01000804 	movi	r4,32
    e9f4:	1a10d83a 	srl	r8,r3,r8
    e9f8:	11000a26 	beq	r2,r4,ea24 <__subdf3+0x8f4>
    e9fc:	01001004 	movi	r4,64
    ea00:	2085c83a 	sub	r2,r4,r2
    ea04:	1884983a 	sll	r2,r3,r2
    ea08:	1444b03a 	or	r2,r2,r17
    ea0c:	1004c03a 	cmpne	r2,r2,zero
    ea10:	40a2b03a 	or	r17,r8,r2
    ea14:	0005883a 	mov	r2,zero
    ea18:	003f8606 	br	e834 <__alt_data_end+0xfffde834>
    ea1c:	0005883a 	mov	r2,zero
    ea20:	003fdc06 	br	e994 <__alt_data_end+0xfffde994>
    ea24:	0005883a 	mov	r2,zero
    ea28:	003ff706 	br	ea08 <__alt_data_end+0xfffdea08>

0000ea2c <__fixdfsi>:
    ea2c:	280cd53a 	srli	r6,r5,20
    ea30:	00c00434 	movhi	r3,16
    ea34:	18ffffc4 	addi	r3,r3,-1
    ea38:	3181ffcc 	andi	r6,r6,2047
    ea3c:	01c0ff84 	movi	r7,1022
    ea40:	28c6703a 	and	r3,r5,r3
    ea44:	280ad7fa 	srli	r5,r5,31
    ea48:	3980120e 	bge	r7,r6,ea94 <__fixdfsi+0x68>
    ea4c:	00810744 	movi	r2,1053
    ea50:	11800c16 	blt	r2,r6,ea84 <__fixdfsi+0x58>
    ea54:	00810cc4 	movi	r2,1075
    ea58:	1185c83a 	sub	r2,r2,r6
    ea5c:	01c007c4 	movi	r7,31
    ea60:	18c00434 	orhi	r3,r3,16
    ea64:	38800d16 	blt	r7,r2,ea9c <__fixdfsi+0x70>
    ea68:	31befb44 	addi	r6,r6,-1043
    ea6c:	2084d83a 	srl	r2,r4,r2
    ea70:	1986983a 	sll	r3,r3,r6
    ea74:	1884b03a 	or	r2,r3,r2
    ea78:	28000726 	beq	r5,zero,ea98 <__fixdfsi+0x6c>
    ea7c:	0085c83a 	sub	r2,zero,r2
    ea80:	f800283a 	ret
    ea84:	00a00034 	movhi	r2,32768
    ea88:	10bfffc4 	addi	r2,r2,-1
    ea8c:	2885883a 	add	r2,r5,r2
    ea90:	f800283a 	ret
    ea94:	0005883a 	mov	r2,zero
    ea98:	f800283a 	ret
    ea9c:	008104c4 	movi	r2,1043
    eaa0:	1185c83a 	sub	r2,r2,r6
    eaa4:	1884d83a 	srl	r2,r3,r2
    eaa8:	003ff306 	br	ea78 <__alt_data_end+0xfffdea78>

0000eaac <__floatsidf>:
    eaac:	defffd04 	addi	sp,sp,-12
    eab0:	dfc00215 	stw	ra,8(sp)
    eab4:	dc400115 	stw	r17,4(sp)
    eab8:	dc000015 	stw	r16,0(sp)
    eabc:	20002b26 	beq	r4,zero,eb6c <__floatsidf+0xc0>
    eac0:	2023883a 	mov	r17,r4
    eac4:	2020d7fa 	srli	r16,r4,31
    eac8:	20002d16 	blt	r4,zero,eb80 <__floatsidf+0xd4>
    eacc:	8809883a 	mov	r4,r17
    ead0:	000ec300 	call	ec30 <__clzsi2>
    ead4:	01410784 	movi	r5,1054
    ead8:	288bc83a 	sub	r5,r5,r2
    eadc:	01010cc4 	movi	r4,1075
    eae0:	2149c83a 	sub	r4,r4,r5
    eae4:	00c007c4 	movi	r3,31
    eae8:	1900160e 	bge	r3,r4,eb44 <__floatsidf+0x98>
    eaec:	00c104c4 	movi	r3,1043
    eaf0:	1947c83a 	sub	r3,r3,r5
    eaf4:	88c6983a 	sll	r3,r17,r3
    eaf8:	00800434 	movhi	r2,16
    eafc:	10bfffc4 	addi	r2,r2,-1
    eb00:	1886703a 	and	r3,r3,r2
    eb04:	2941ffcc 	andi	r5,r5,2047
    eb08:	800d883a 	mov	r6,r16
    eb0c:	0005883a 	mov	r2,zero
    eb10:	280a953a 	slli	r5,r5,20
    eb14:	31803fcc 	andi	r6,r6,255
    eb18:	01000434 	movhi	r4,16
    eb1c:	300c97fa 	slli	r6,r6,31
    eb20:	213fffc4 	addi	r4,r4,-1
    eb24:	1906703a 	and	r3,r3,r4
    eb28:	1946b03a 	or	r3,r3,r5
    eb2c:	1986b03a 	or	r3,r3,r6
    eb30:	dfc00217 	ldw	ra,8(sp)
    eb34:	dc400117 	ldw	r17,4(sp)
    eb38:	dc000017 	ldw	r16,0(sp)
    eb3c:	dec00304 	addi	sp,sp,12
    eb40:	f800283a 	ret
    eb44:	00c002c4 	movi	r3,11
    eb48:	1887c83a 	sub	r3,r3,r2
    eb4c:	88c6d83a 	srl	r3,r17,r3
    eb50:	8904983a 	sll	r2,r17,r4
    eb54:	01000434 	movhi	r4,16
    eb58:	213fffc4 	addi	r4,r4,-1
    eb5c:	2941ffcc 	andi	r5,r5,2047
    eb60:	1906703a 	and	r3,r3,r4
    eb64:	800d883a 	mov	r6,r16
    eb68:	003fe906 	br	eb10 <__alt_data_end+0xfffdeb10>
    eb6c:	000d883a 	mov	r6,zero
    eb70:	000b883a 	mov	r5,zero
    eb74:	0007883a 	mov	r3,zero
    eb78:	0005883a 	mov	r2,zero
    eb7c:	003fe406 	br	eb10 <__alt_data_end+0xfffdeb10>
    eb80:	0123c83a 	sub	r17,zero,r4
    eb84:	003fd106 	br	eacc <__alt_data_end+0xfffdeacc>

0000eb88 <__floatunsidf>:
    eb88:	defffe04 	addi	sp,sp,-8
    eb8c:	dc000015 	stw	r16,0(sp)
    eb90:	dfc00115 	stw	ra,4(sp)
    eb94:	2021883a 	mov	r16,r4
    eb98:	20002226 	beq	r4,zero,ec24 <__floatunsidf+0x9c>
    eb9c:	000ec300 	call	ec30 <__clzsi2>
    eba0:	01010784 	movi	r4,1054
    eba4:	2089c83a 	sub	r4,r4,r2
    eba8:	01810cc4 	movi	r6,1075
    ebac:	310dc83a 	sub	r6,r6,r4
    ebb0:	00c007c4 	movi	r3,31
    ebb4:	1980120e 	bge	r3,r6,ec00 <__floatunsidf+0x78>
    ebb8:	00c104c4 	movi	r3,1043
    ebbc:	1907c83a 	sub	r3,r3,r4
    ebc0:	80ca983a 	sll	r5,r16,r3
    ebc4:	00800434 	movhi	r2,16
    ebc8:	10bfffc4 	addi	r2,r2,-1
    ebcc:	2101ffcc 	andi	r4,r4,2047
    ebd0:	0021883a 	mov	r16,zero
    ebd4:	288a703a 	and	r5,r5,r2
    ebd8:	2008953a 	slli	r4,r4,20
    ebdc:	00c00434 	movhi	r3,16
    ebe0:	18ffffc4 	addi	r3,r3,-1
    ebe4:	28c6703a 	and	r3,r5,r3
    ebe8:	8005883a 	mov	r2,r16
    ebec:	1906b03a 	or	r3,r3,r4
    ebf0:	dfc00117 	ldw	ra,4(sp)
    ebf4:	dc000017 	ldw	r16,0(sp)
    ebf8:	dec00204 	addi	sp,sp,8
    ebfc:	f800283a 	ret
    ec00:	00c002c4 	movi	r3,11
    ec04:	188bc83a 	sub	r5,r3,r2
    ec08:	814ad83a 	srl	r5,r16,r5
    ec0c:	00c00434 	movhi	r3,16
    ec10:	18ffffc4 	addi	r3,r3,-1
    ec14:	81a0983a 	sll	r16,r16,r6
    ec18:	2101ffcc 	andi	r4,r4,2047
    ec1c:	28ca703a 	and	r5,r5,r3
    ec20:	003fed06 	br	ebd8 <__alt_data_end+0xfffdebd8>
    ec24:	0009883a 	mov	r4,zero
    ec28:	000b883a 	mov	r5,zero
    ec2c:	003fea06 	br	ebd8 <__alt_data_end+0xfffdebd8>

0000ec30 <__clzsi2>:
    ec30:	00bfffd4 	movui	r2,65535
    ec34:	11000536 	bltu	r2,r4,ec4c <__clzsi2+0x1c>
    ec38:	00803fc4 	movi	r2,255
    ec3c:	11000f36 	bltu	r2,r4,ec7c <__clzsi2+0x4c>
    ec40:	00800804 	movi	r2,32
    ec44:	0007883a 	mov	r3,zero
    ec48:	00000506 	br	ec60 <__clzsi2+0x30>
    ec4c:	00804034 	movhi	r2,256
    ec50:	10bfffc4 	addi	r2,r2,-1
    ec54:	11000c2e 	bgeu	r2,r4,ec88 <__clzsi2+0x58>
    ec58:	00800204 	movi	r2,8
    ec5c:	00c00604 	movi	r3,24
    ec60:	20c8d83a 	srl	r4,r4,r3
    ec64:	00c000b4 	movhi	r3,2
    ec68:	18e5e504 	addi	r3,r3,-26732
    ec6c:	1909883a 	add	r4,r3,r4
    ec70:	20c00003 	ldbu	r3,0(r4)
    ec74:	10c5c83a 	sub	r2,r2,r3
    ec78:	f800283a 	ret
    ec7c:	00800604 	movi	r2,24
    ec80:	00c00204 	movi	r3,8
    ec84:	003ff606 	br	ec60 <__alt_data_end+0xfffdec60>
    ec88:	00800404 	movi	r2,16
    ec8c:	1007883a 	mov	r3,r2
    ec90:	003ff306 	br	ec60 <__alt_data_end+0xfffdec60>

0000ec94 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    ec94:	defffe04 	addi	sp,sp,-8
    ec98:	dfc00115 	stw	ra,4(sp)
    ec9c:	df000015 	stw	fp,0(sp)
    eca0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    eca4:	d0a00c17 	ldw	r2,-32720(gp)
    eca8:	10000326 	beq	r2,zero,ecb8 <alt_get_errno+0x24>
    ecac:	d0a00c17 	ldw	r2,-32720(gp)
    ecb0:	103ee83a 	callr	r2
    ecb4:	00000106 	br	ecbc <alt_get_errno+0x28>
    ecb8:	d0a71a04 	addi	r2,gp,-25496
}
    ecbc:	e037883a 	mov	sp,fp
    ecc0:	dfc00117 	ldw	ra,4(sp)
    ecc4:	df000017 	ldw	fp,0(sp)
    ecc8:	dec00204 	addi	sp,sp,8
    eccc:	f800283a 	ret

0000ecd0 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
    ecd0:	defffb04 	addi	sp,sp,-20
    ecd4:	dfc00415 	stw	ra,16(sp)
    ecd8:	df000315 	stw	fp,12(sp)
    ecdc:	df000304 	addi	fp,sp,12
    ece0:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
    ece4:	e0bfff17 	ldw	r2,-4(fp)
    ece8:	10000816 	blt	r2,zero,ed0c <close+0x3c>
    ecec:	01400304 	movi	r5,12
    ecf0:	e13fff17 	ldw	r4,-4(fp)
    ecf4:	000c3c80 	call	c3c8 <__mulsi3>
    ecf8:	1007883a 	mov	r3,r2
    ecfc:	008000b4 	movhi	r2,2
    ed00:	10a8ac04 	addi	r2,r2,-23888
    ed04:	1885883a 	add	r2,r3,r2
    ed08:	00000106 	br	ed10 <close+0x40>
    ed0c:	0005883a 	mov	r2,zero
    ed10:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
    ed14:	e0bffd17 	ldw	r2,-12(fp)
    ed18:	10001926 	beq	r2,zero,ed80 <close+0xb0>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
    ed1c:	e0bffd17 	ldw	r2,-12(fp)
    ed20:	10800017 	ldw	r2,0(r2)
    ed24:	10800417 	ldw	r2,16(r2)
    ed28:	10000626 	beq	r2,zero,ed44 <close+0x74>
    ed2c:	e0bffd17 	ldw	r2,-12(fp)
    ed30:	10800017 	ldw	r2,0(r2)
    ed34:	10800417 	ldw	r2,16(r2)
    ed38:	e13ffd17 	ldw	r4,-12(fp)
    ed3c:	103ee83a 	callr	r2
    ed40:	00000106 	br	ed48 <close+0x78>
    ed44:	0005883a 	mov	r2,zero
    ed48:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
    ed4c:	e13fff17 	ldw	r4,-4(fp)
    ed50:	000f6500 	call	f650 <alt_release_fd>
    if (rval < 0)
    ed54:	e0bffe17 	ldw	r2,-8(fp)
    ed58:	1000070e 	bge	r2,zero,ed78 <close+0xa8>
    {
      ALT_ERRNO = -rval;
    ed5c:	000ec940 	call	ec94 <alt_get_errno>
    ed60:	1007883a 	mov	r3,r2
    ed64:	e0bffe17 	ldw	r2,-8(fp)
    ed68:	0085c83a 	sub	r2,zero,r2
    ed6c:	18800015 	stw	r2,0(r3)
      return -1;
    ed70:	00bfffc4 	movi	r2,-1
    ed74:	00000706 	br	ed94 <close+0xc4>
    }
    return 0;
    ed78:	0005883a 	mov	r2,zero
    ed7c:	00000506 	br	ed94 <close+0xc4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
    ed80:	000ec940 	call	ec94 <alt_get_errno>
    ed84:	1007883a 	mov	r3,r2
    ed88:	00801444 	movi	r2,81
    ed8c:	18800015 	stw	r2,0(r3)
    return -1;
    ed90:	00bfffc4 	movi	r2,-1
  }
}
    ed94:	e037883a 	mov	sp,fp
    ed98:	dfc00117 	ldw	ra,4(sp)
    ed9c:	df000017 	ldw	fp,0(sp)
    eda0:	dec00204 	addi	sp,sp,8
    eda4:	f800283a 	ret

0000eda8 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
    eda8:	defffc04 	addi	sp,sp,-16
    edac:	df000315 	stw	fp,12(sp)
    edb0:	df000304 	addi	fp,sp,12
    edb4:	e13ffd15 	stw	r4,-12(fp)
    edb8:	e17ffe15 	stw	r5,-8(fp)
    edbc:	e1bfff15 	stw	r6,-4(fp)
  return len;
    edc0:	e0bfff17 	ldw	r2,-4(fp)
}
    edc4:	e037883a 	mov	sp,fp
    edc8:	df000017 	ldw	fp,0(sp)
    edcc:	dec00104 	addi	sp,sp,4
    edd0:	f800283a 	ret

0000edd4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    edd4:	defffe04 	addi	sp,sp,-8
    edd8:	dfc00115 	stw	ra,4(sp)
    eddc:	df000015 	stw	fp,0(sp)
    ede0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    ede4:	d0a00c17 	ldw	r2,-32720(gp)
    ede8:	10000326 	beq	r2,zero,edf8 <alt_get_errno+0x24>
    edec:	d0a00c17 	ldw	r2,-32720(gp)
    edf0:	103ee83a 	callr	r2
    edf4:	00000106 	br	edfc <alt_get_errno+0x28>
    edf8:	d0a71a04 	addi	r2,gp,-25496
}
    edfc:	e037883a 	mov	sp,fp
    ee00:	dfc00117 	ldw	ra,4(sp)
    ee04:	df000017 	ldw	fp,0(sp)
    ee08:	dec00204 	addi	sp,sp,8
    ee0c:	f800283a 	ret

0000ee10 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
    ee10:	defffb04 	addi	sp,sp,-20
    ee14:	dfc00415 	stw	ra,16(sp)
    ee18:	df000315 	stw	fp,12(sp)
    ee1c:	df000304 	addi	fp,sp,12
    ee20:	e13ffe15 	stw	r4,-8(fp)
    ee24:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    ee28:	e0bffe17 	ldw	r2,-8(fp)
    ee2c:	10000816 	blt	r2,zero,ee50 <fstat+0x40>
    ee30:	01400304 	movi	r5,12
    ee34:	e13ffe17 	ldw	r4,-8(fp)
    ee38:	000c3c80 	call	c3c8 <__mulsi3>
    ee3c:	1007883a 	mov	r3,r2
    ee40:	008000b4 	movhi	r2,2
    ee44:	10a8ac04 	addi	r2,r2,-23888
    ee48:	1885883a 	add	r2,r3,r2
    ee4c:	00000106 	br	ee54 <fstat+0x44>
    ee50:	0005883a 	mov	r2,zero
    ee54:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
    ee58:	e0bffd17 	ldw	r2,-12(fp)
    ee5c:	10001026 	beq	r2,zero,eea0 <fstat+0x90>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
    ee60:	e0bffd17 	ldw	r2,-12(fp)
    ee64:	10800017 	ldw	r2,0(r2)
    ee68:	10800817 	ldw	r2,32(r2)
    ee6c:	10000726 	beq	r2,zero,ee8c <fstat+0x7c>
    {
      return fd->dev->fstat(fd, st);
    ee70:	e0bffd17 	ldw	r2,-12(fp)
    ee74:	10800017 	ldw	r2,0(r2)
    ee78:	10800817 	ldw	r2,32(r2)
    ee7c:	e17fff17 	ldw	r5,-4(fp)
    ee80:	e13ffd17 	ldw	r4,-12(fp)
    ee84:	103ee83a 	callr	r2
    ee88:	00000a06 	br	eeb4 <fstat+0xa4>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
    ee8c:	e0bfff17 	ldw	r2,-4(fp)
    ee90:	00c80004 	movi	r3,8192
    ee94:	10c00115 	stw	r3,4(r2)
      return 0;
    ee98:	0005883a 	mov	r2,zero
    ee9c:	00000506 	br	eeb4 <fstat+0xa4>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
    eea0:	000edd40 	call	edd4 <alt_get_errno>
    eea4:	1007883a 	mov	r3,r2
    eea8:	00801444 	movi	r2,81
    eeac:	18800015 	stw	r2,0(r3)
    return -1;
    eeb0:	00bfffc4 	movi	r2,-1
  }
}
    eeb4:	e037883a 	mov	sp,fp
    eeb8:	dfc00117 	ldw	ra,4(sp)
    eebc:	df000017 	ldw	fp,0(sp)
    eec0:	dec00204 	addi	sp,sp,8
    eec4:	f800283a 	ret

0000eec8 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
    eec8:	defff904 	addi	sp,sp,-28
    eecc:	dfc00615 	stw	ra,24(sp)
    eed0:	df000515 	stw	fp,20(sp)
    eed4:	df000504 	addi	fp,sp,20
    eed8:	e13ffc15 	stw	r4,-16(fp)
    eedc:	e17ffd15 	stw	r5,-12(fp)
    eee0:	e1bffe15 	stw	r6,-8(fp)
    eee4:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
    eee8:	e0800217 	ldw	r2,8(fp)
    eeec:	d8800015 	stw	r2,0(sp)
    eef0:	e1ffff17 	ldw	r7,-4(fp)
    eef4:	e1bffe17 	ldw	r6,-8(fp)
    eef8:	e17ffd17 	ldw	r5,-12(fp)
    eefc:	e13ffc17 	ldw	r4,-16(fp)
    ef00:	000f0780 	call	f078 <alt_iic_isr_register>
}  
    ef04:	e037883a 	mov	sp,fp
    ef08:	dfc00117 	ldw	ra,4(sp)
    ef0c:	df000017 	ldw	fp,0(sp)
    ef10:	dec00204 	addi	sp,sp,8
    ef14:	f800283a 	ret

0000ef18 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
    ef18:	defff904 	addi	sp,sp,-28
    ef1c:	df000615 	stw	fp,24(sp)
    ef20:	df000604 	addi	fp,sp,24
    ef24:	e13ffe15 	stw	r4,-8(fp)
    ef28:	e17fff15 	stw	r5,-4(fp)
    ef2c:	e0bfff17 	ldw	r2,-4(fp)
    ef30:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    ef34:	0005303a 	rdctl	r2,status
    ef38:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    ef3c:	e0fffb17 	ldw	r3,-20(fp)
    ef40:	00bfff84 	movi	r2,-2
    ef44:	1884703a 	and	r2,r3,r2
    ef48:	1001703a 	wrctl	status,r2
  
  return context;
    ef4c:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
    ef50:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
    ef54:	00c00044 	movi	r3,1
    ef58:	e0bffa17 	ldw	r2,-24(fp)
    ef5c:	1884983a 	sll	r2,r3,r2
    ef60:	1007883a 	mov	r3,r2
    ef64:	d0a71c17 	ldw	r2,-25488(gp)
    ef68:	1884b03a 	or	r2,r3,r2
    ef6c:	d0a71c15 	stw	r2,-25488(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
    ef70:	d0a71c17 	ldw	r2,-25488(gp)
    ef74:	100170fa 	wrctl	ienable,r2
    ef78:	e0bffc17 	ldw	r2,-16(fp)
    ef7c:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    ef80:	e0bffd17 	ldw	r2,-12(fp)
    ef84:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
    ef88:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
    ef8c:	0001883a 	nop
}
    ef90:	e037883a 	mov	sp,fp
    ef94:	df000017 	ldw	fp,0(sp)
    ef98:	dec00104 	addi	sp,sp,4
    ef9c:	f800283a 	ret

0000efa0 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
    efa0:	defff904 	addi	sp,sp,-28
    efa4:	df000615 	stw	fp,24(sp)
    efa8:	df000604 	addi	fp,sp,24
    efac:	e13ffe15 	stw	r4,-8(fp)
    efb0:	e17fff15 	stw	r5,-4(fp)
    efb4:	e0bfff17 	ldw	r2,-4(fp)
    efb8:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    efbc:	0005303a 	rdctl	r2,status
    efc0:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    efc4:	e0fffb17 	ldw	r3,-20(fp)
    efc8:	00bfff84 	movi	r2,-2
    efcc:	1884703a 	and	r2,r3,r2
    efd0:	1001703a 	wrctl	status,r2
  
  return context;
    efd4:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
    efd8:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
    efdc:	00c00044 	movi	r3,1
    efe0:	e0bffa17 	ldw	r2,-24(fp)
    efe4:	1884983a 	sll	r2,r3,r2
    efe8:	0084303a 	nor	r2,zero,r2
    efec:	1007883a 	mov	r3,r2
    eff0:	d0a71c17 	ldw	r2,-25488(gp)
    eff4:	1884703a 	and	r2,r3,r2
    eff8:	d0a71c15 	stw	r2,-25488(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
    effc:	d0a71c17 	ldw	r2,-25488(gp)
    f000:	100170fa 	wrctl	ienable,r2
    f004:	e0bffc17 	ldw	r2,-16(fp)
    f008:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    f00c:	e0bffd17 	ldw	r2,-12(fp)
    f010:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
    f014:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
    f018:	0001883a 	nop
}
    f01c:	e037883a 	mov	sp,fp
    f020:	df000017 	ldw	fp,0(sp)
    f024:	dec00104 	addi	sp,sp,4
    f028:	f800283a 	ret

0000f02c <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
    f02c:	defffc04 	addi	sp,sp,-16
    f030:	df000315 	stw	fp,12(sp)
    f034:	df000304 	addi	fp,sp,12
    f038:	e13ffe15 	stw	r4,-8(fp)
    f03c:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
    f040:	000530fa 	rdctl	r2,ienable
    f044:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
    f048:	00c00044 	movi	r3,1
    f04c:	e0bfff17 	ldw	r2,-4(fp)
    f050:	1884983a 	sll	r2,r3,r2
    f054:	1007883a 	mov	r3,r2
    f058:	e0bffd17 	ldw	r2,-12(fp)
    f05c:	1884703a 	and	r2,r3,r2
    f060:	1004c03a 	cmpne	r2,r2,zero
    f064:	10803fcc 	andi	r2,r2,255
}
    f068:	e037883a 	mov	sp,fp
    f06c:	df000017 	ldw	fp,0(sp)
    f070:	dec00104 	addi	sp,sp,4
    f074:	f800283a 	ret

0000f078 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
    f078:	defff504 	addi	sp,sp,-44
    f07c:	dfc00a15 	stw	ra,40(sp)
    f080:	df000915 	stw	fp,36(sp)
    f084:	df000904 	addi	fp,sp,36
    f088:	e13ffc15 	stw	r4,-16(fp)
    f08c:	e17ffd15 	stw	r5,-12(fp)
    f090:	e1bffe15 	stw	r6,-8(fp)
    f094:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
    f098:	00bffa84 	movi	r2,-22
    f09c:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
    f0a0:	e0bffd17 	ldw	r2,-12(fp)
    f0a4:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
    f0a8:	e0bff817 	ldw	r2,-32(fp)
    f0ac:	10800808 	cmpgei	r2,r2,32
    f0b0:	1000271e 	bne	r2,zero,f150 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    f0b4:	0005303a 	rdctl	r2,status
    f0b8:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    f0bc:	e0fffb17 	ldw	r3,-20(fp)
    f0c0:	00bfff84 	movi	r2,-2
    f0c4:	1884703a 	and	r2,r3,r2
    f0c8:	1001703a 	wrctl	status,r2
  
  return context;
    f0cc:	e0bffb17 	ldw	r2,-20(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
    f0d0:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = isr;
    f0d4:	008000b4 	movhi	r2,2
    f0d8:	10bc8004 	addi	r2,r2,-3584
    f0dc:	e0fff817 	ldw	r3,-32(fp)
    f0e0:	180690fa 	slli	r3,r3,3
    f0e4:	10c5883a 	add	r2,r2,r3
    f0e8:	e0fffe17 	ldw	r3,-8(fp)
    f0ec:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
    f0f0:	008000b4 	movhi	r2,2
    f0f4:	10bc8004 	addi	r2,r2,-3584
    f0f8:	e0fff817 	ldw	r3,-32(fp)
    f0fc:	180690fa 	slli	r3,r3,3
    f100:	10c5883a 	add	r2,r2,r3
    f104:	10800104 	addi	r2,r2,4
    f108:	e0ffff17 	ldw	r3,-4(fp)
    f10c:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
    f110:	e0bffe17 	ldw	r2,-8(fp)
    f114:	10000526 	beq	r2,zero,f12c <alt_iic_isr_register+0xb4>
    f118:	e0bff817 	ldw	r2,-32(fp)
    f11c:	100b883a 	mov	r5,r2
    f120:	e13ffc17 	ldw	r4,-16(fp)
    f124:	000ef180 	call	ef18 <alt_ic_irq_enable>
    f128:	00000406 	br	f13c <alt_iic_isr_register+0xc4>
    f12c:	e0bff817 	ldw	r2,-32(fp)
    f130:	100b883a 	mov	r5,r2
    f134:	e13ffc17 	ldw	r4,-16(fp)
    f138:	000efa00 	call	efa0 <alt_ic_irq_disable>
    f13c:	e0bff715 	stw	r2,-36(fp)
    f140:	e0bffa17 	ldw	r2,-24(fp)
    f144:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    f148:	e0bff917 	ldw	r2,-28(fp)
    f14c:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
    f150:	e0bff717 	ldw	r2,-36(fp)
}
    f154:	e037883a 	mov	sp,fp
    f158:	dfc00117 	ldw	ra,4(sp)
    f15c:	df000017 	ldw	fp,0(sp)
    f160:	dec00204 	addi	sp,sp,8
    f164:	f800283a 	ret

0000f168 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    f168:	defffe04 	addi	sp,sp,-8
    f16c:	dfc00115 	stw	ra,4(sp)
    f170:	df000015 	stw	fp,0(sp)
    f174:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    f178:	d0a00c17 	ldw	r2,-32720(gp)
    f17c:	10000326 	beq	r2,zero,f18c <alt_get_errno+0x24>
    f180:	d0a00c17 	ldw	r2,-32720(gp)
    f184:	103ee83a 	callr	r2
    f188:	00000106 	br	f190 <alt_get_errno+0x28>
    f18c:	d0a71a04 	addi	r2,gp,-25496
}
    f190:	e037883a 	mov	sp,fp
    f194:	dfc00117 	ldw	ra,4(sp)
    f198:	df000017 	ldw	fp,0(sp)
    f19c:	dec00204 	addi	sp,sp,8
    f1a0:	f800283a 	ret

0000f1a4 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
    f1a4:	deffed04 	addi	sp,sp,-76
    f1a8:	dfc01215 	stw	ra,72(sp)
    f1ac:	df001115 	stw	fp,68(sp)
    f1b0:	df001104 	addi	fp,sp,68
    f1b4:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    f1b8:	e0bfff17 	ldw	r2,-4(fp)
    f1bc:	10000816 	blt	r2,zero,f1e0 <isatty+0x3c>
    f1c0:	01400304 	movi	r5,12
    f1c4:	e13fff17 	ldw	r4,-4(fp)
    f1c8:	000c3c80 	call	c3c8 <__mulsi3>
    f1cc:	1007883a 	mov	r3,r2
    f1d0:	008000b4 	movhi	r2,2
    f1d4:	10a8ac04 	addi	r2,r2,-23888
    f1d8:	1885883a 	add	r2,r3,r2
    f1dc:	00000106 	br	f1e4 <isatty+0x40>
    f1e0:	0005883a 	mov	r2,zero
    f1e4:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
    f1e8:	e0bfef17 	ldw	r2,-68(fp)
    f1ec:	10000e26 	beq	r2,zero,f228 <isatty+0x84>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
    f1f0:	e0bfef17 	ldw	r2,-68(fp)
    f1f4:	10800017 	ldw	r2,0(r2)
    f1f8:	10800817 	ldw	r2,32(r2)
    f1fc:	1000021e 	bne	r2,zero,f208 <isatty+0x64>
    {
      return 1;
    f200:	00800044 	movi	r2,1
    f204:	00000d06 	br	f23c <isatty+0x98>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
    f208:	e0bff004 	addi	r2,fp,-64
    f20c:	100b883a 	mov	r5,r2
    f210:	e13fff17 	ldw	r4,-4(fp)
    f214:	000ee100 	call	ee10 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
    f218:	e0bff117 	ldw	r2,-60(fp)
    f21c:	10880020 	cmpeqi	r2,r2,8192
    f220:	10803fcc 	andi	r2,r2,255
    f224:	00000506 	br	f23c <isatty+0x98>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
    f228:	000f1680 	call	f168 <alt_get_errno>
    f22c:	1007883a 	mov	r3,r2
    f230:	00801444 	movi	r2,81
    f234:	18800015 	stw	r2,0(r3)
    return 0;
    f238:	0005883a 	mov	r2,zero
  }
}
    f23c:	e037883a 	mov	sp,fp
    f240:	dfc00117 	ldw	ra,4(sp)
    f244:	df000017 	ldw	fp,0(sp)
    f248:	dec00204 	addi	sp,sp,8
    f24c:	f800283a 	ret

0000f250 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
    f250:	defffc04 	addi	sp,sp,-16
    f254:	df000315 	stw	fp,12(sp)
    f258:	df000304 	addi	fp,sp,12
    f25c:	e13ffd15 	stw	r4,-12(fp)
    f260:	e17ffe15 	stw	r5,-8(fp)
    f264:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
    f268:	e0fffe17 	ldw	r3,-8(fp)
    f26c:	e0bffd17 	ldw	r2,-12(fp)
    f270:	18800c26 	beq	r3,r2,f2a4 <alt_load_section+0x54>
  {
    while( to != end )
    f274:	00000806 	br	f298 <alt_load_section+0x48>
    {
      *to++ = *from++;
    f278:	e0bffe17 	ldw	r2,-8(fp)
    f27c:	10c00104 	addi	r3,r2,4
    f280:	e0fffe15 	stw	r3,-8(fp)
    f284:	e0fffd17 	ldw	r3,-12(fp)
    f288:	19000104 	addi	r4,r3,4
    f28c:	e13ffd15 	stw	r4,-12(fp)
    f290:	18c00017 	ldw	r3,0(r3)
    f294:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
    f298:	e0fffe17 	ldw	r3,-8(fp)
    f29c:	e0bfff17 	ldw	r2,-4(fp)
    f2a0:	18bff51e 	bne	r3,r2,f278 <__alt_data_end+0xfffdf278>
    {
      *to++ = *from++;
    }
  }
}
    f2a4:	0001883a 	nop
    f2a8:	e037883a 	mov	sp,fp
    f2ac:	df000017 	ldw	fp,0(sp)
    f2b0:	dec00104 	addi	sp,sp,4
    f2b4:	f800283a 	ret

0000f2b8 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
    f2b8:	defffe04 	addi	sp,sp,-8
    f2bc:	dfc00115 	stw	ra,4(sp)
    f2c0:	df000015 	stw	fp,0(sp)
    f2c4:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
    f2c8:	018000b4 	movhi	r6,2
    f2cc:	31ad5704 	addi	r6,r6,-19108
    f2d0:	014000b4 	movhi	r5,2
    f2d4:	29667904 	addi	r5,r5,-26140
    f2d8:	010000b4 	movhi	r4,2
    f2dc:	212d5704 	addi	r4,r4,-19108
    f2e0:	000f2500 	call	f250 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
    f2e4:	01800034 	movhi	r6,0
    f2e8:	31807004 	addi	r6,r6,448
    f2ec:	01400034 	movhi	r5,0
    f2f0:	29400804 	addi	r5,r5,32
    f2f4:	01000034 	movhi	r4,0
    f2f8:	21000804 	addi	r4,r4,32
    f2fc:	000f2500 	call	f250 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
    f300:	018000b4 	movhi	r6,2
    f304:	31a67904 	addi	r6,r6,-26140
    f308:	014000b4 	movhi	r5,2
    f30c:	29651c04 	addi	r5,r5,-27536
    f310:	010000b4 	movhi	r4,2
    f314:	21251c04 	addi	r4,r4,-27536
    f318:	000f2500 	call	f250 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
    f31c:	00183e40 	call	183e4 <alt_dcache_flush_all>
  alt_icache_flush_all();
    f320:	00185a40 	call	185a4 <alt_icache_flush_all>
}
    f324:	0001883a 	nop
    f328:	e037883a 	mov	sp,fp
    f32c:	dfc00117 	ldw	ra,4(sp)
    f330:	df000017 	ldw	fp,0(sp)
    f334:	dec00204 	addi	sp,sp,8
    f338:	f800283a 	ret

0000f33c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    f33c:	defffe04 	addi	sp,sp,-8
    f340:	dfc00115 	stw	ra,4(sp)
    f344:	df000015 	stw	fp,0(sp)
    f348:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    f34c:	d0a00c17 	ldw	r2,-32720(gp)
    f350:	10000326 	beq	r2,zero,f360 <alt_get_errno+0x24>
    f354:	d0a00c17 	ldw	r2,-32720(gp)
    f358:	103ee83a 	callr	r2
    f35c:	00000106 	br	f364 <alt_get_errno+0x28>
    f360:	d0a71a04 	addi	r2,gp,-25496
}
    f364:	e037883a 	mov	sp,fp
    f368:	dfc00117 	ldw	ra,4(sp)
    f36c:	df000017 	ldw	fp,0(sp)
    f370:	dec00204 	addi	sp,sp,8
    f374:	f800283a 	ret

0000f378 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
    f378:	defff904 	addi	sp,sp,-28
    f37c:	dfc00615 	stw	ra,24(sp)
    f380:	df000515 	stw	fp,20(sp)
    f384:	df000504 	addi	fp,sp,20
    f388:	e13ffd15 	stw	r4,-12(fp)
    f38c:	e17ffe15 	stw	r5,-8(fp)
    f390:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
    f394:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    f398:	e0bffd17 	ldw	r2,-12(fp)
    f39c:	10000816 	blt	r2,zero,f3c0 <lseek+0x48>
    f3a0:	01400304 	movi	r5,12
    f3a4:	e13ffd17 	ldw	r4,-12(fp)
    f3a8:	000c3c80 	call	c3c8 <__mulsi3>
    f3ac:	1007883a 	mov	r3,r2
    f3b0:	008000b4 	movhi	r2,2
    f3b4:	10a8ac04 	addi	r2,r2,-23888
    f3b8:	1885883a 	add	r2,r3,r2
    f3bc:	00000106 	br	f3c4 <lseek+0x4c>
    f3c0:	0005883a 	mov	r2,zero
    f3c4:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
    f3c8:	e0bffc17 	ldw	r2,-16(fp)
    f3cc:	10001026 	beq	r2,zero,f410 <lseek+0x98>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
    f3d0:	e0bffc17 	ldw	r2,-16(fp)
    f3d4:	10800017 	ldw	r2,0(r2)
    f3d8:	10800717 	ldw	r2,28(r2)
    f3dc:	10000926 	beq	r2,zero,f404 <lseek+0x8c>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
    f3e0:	e0bffc17 	ldw	r2,-16(fp)
    f3e4:	10800017 	ldw	r2,0(r2)
    f3e8:	10800717 	ldw	r2,28(r2)
    f3ec:	e1bfff17 	ldw	r6,-4(fp)
    f3f0:	e17ffe17 	ldw	r5,-8(fp)
    f3f4:	e13ffc17 	ldw	r4,-16(fp)
    f3f8:	103ee83a 	callr	r2
    f3fc:	e0bffb15 	stw	r2,-20(fp)
    f400:	00000506 	br	f418 <lseek+0xa0>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
    f404:	00bfde84 	movi	r2,-134
    f408:	e0bffb15 	stw	r2,-20(fp)
    f40c:	00000206 	br	f418 <lseek+0xa0>
    }
  }
  else  
  {
    rc = -EBADFD;
    f410:	00bfebc4 	movi	r2,-81
    f414:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
    f418:	e0bffb17 	ldw	r2,-20(fp)
    f41c:	1000070e 	bge	r2,zero,f43c <lseek+0xc4>
  {
    ALT_ERRNO = -rc;
    f420:	000f33c0 	call	f33c <alt_get_errno>
    f424:	1007883a 	mov	r3,r2
    f428:	e0bffb17 	ldw	r2,-20(fp)
    f42c:	0085c83a 	sub	r2,zero,r2
    f430:	18800015 	stw	r2,0(r3)
    rc = -1;
    f434:	00bfffc4 	movi	r2,-1
    f438:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
    f43c:	e0bffb17 	ldw	r2,-20(fp)
}
    f440:	e037883a 	mov	sp,fp
    f444:	dfc00117 	ldw	ra,4(sp)
    f448:	df000017 	ldw	fp,0(sp)
    f44c:	dec00204 	addi	sp,sp,8
    f450:	f800283a 	ret

0000f454 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    f454:	defff904 	addi	sp,sp,-28
    f458:	dfc00615 	stw	ra,24(sp)
    f45c:	df000515 	stw	fp,20(sp)
    f460:	df000504 	addi	fp,sp,20
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    f464:	0009883a 	mov	r4,zero
    f468:	00173fc0 	call	173fc <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
    f46c:	00104400 	call	10440 <OSInit>
    f470:	01000044 	movi	r4,1
    f474:	0014d9c0 	call	14d9c <OSSemCreate>
    f478:	d0a72115 	stw	r2,-25468(gp)
    f47c:	01000044 	movi	r4,1
    f480:	0014d9c0 	call	14d9c <OSSemCreate>
    f484:	d0a72315 	stw	r2,-25460(gp)
    f488:	d0a71b04 	addi	r2,gp,-25492
    f48c:	e0bffc15 	stw	r2,-16(fp)
    f490:	00800044 	movi	r2,1
    f494:	e0bffd0d 	sth	r2,-12(fp)
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sem_create (OS_EVENT** sem, 
              INT16U value)
{
  *sem = OSSemCreate (value);
    f498:	e0bffd0b 	ldhu	r2,-12(fp)
    f49c:	1009883a 	mov	r4,r2
    f4a0:	0014d9c0 	call	14d9c <OSSemCreate>
    f4a4:	1007883a 	mov	r3,r2
    f4a8:	e0bffc17 	ldw	r2,-16(fp)
    f4ac:	10c00015 	stw	r3,0(r2)
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
    f4b0:	00174340 	call	17434 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
    f4b4:	018000b4 	movhi	r6,2
    f4b8:	31a62804 	addi	r6,r6,-26464
    f4bc:	014000b4 	movhi	r5,2
    f4c0:	29662804 	addi	r5,r5,-26464
    f4c4:	010000b4 	movhi	r4,2
    f4c8:	21262804 	addi	r4,r4,-26464
    f4cc:	00186a80 	call	186a8 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
    f4d0:	00184e40 	call	184e4 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
    f4d4:	010000b4 	movhi	r4,2
    f4d8:	21215104 	addi	r4,r4,-31420
    f4dc:	00191540 	call	19154 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
    f4e0:	d0a71d17 	ldw	r2,-25484(gp)
    f4e4:	d0e71e17 	ldw	r3,-25480(gp)
    f4e8:	d1271f17 	ldw	r4,-25476(gp)
    f4ec:	200d883a 	mov	r6,r4
    f4f0:	180b883a 	mov	r5,r3
    f4f4:	1009883a 	mov	r4,r2
    f4f8:	00009a00 	call	9a0 <main>
    f4fc:	e0bffb15 	stw	r2,-20(fp)
  close(STDOUT_FILENO);
    f500:	01000044 	movi	r4,1
    f504:	000ecd00 	call	ecd0 <close>
  exit (result);
    f508:	e13ffb17 	ldw	r4,-20(fp)
    f50c:	00191680 	call	19168 <exit>

0000f510 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    f510:	defffe04 	addi	sp,sp,-8
    f514:	dfc00115 	stw	ra,4(sp)
    f518:	df000015 	stw	fp,0(sp)
    f51c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    f520:	d0a00c17 	ldw	r2,-32720(gp)
    f524:	10000326 	beq	r2,zero,f534 <alt_get_errno+0x24>
    f528:	d0a00c17 	ldw	r2,-32720(gp)
    f52c:	103ee83a 	callr	r2
    f530:	00000106 	br	f538 <alt_get_errno+0x28>
    f534:	d0a71a04 	addi	r2,gp,-25496
}
    f538:	e037883a 	mov	sp,fp
    f53c:	dfc00117 	ldw	ra,4(sp)
    f540:	df000017 	ldw	fp,0(sp)
    f544:	dec00204 	addi	sp,sp,8
    f548:	f800283a 	ret

0000f54c <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
    f54c:	defff904 	addi	sp,sp,-28
    f550:	dfc00615 	stw	ra,24(sp)
    f554:	df000515 	stw	fp,20(sp)
    f558:	df000504 	addi	fp,sp,20
    f55c:	e13ffd15 	stw	r4,-12(fp)
    f560:	e17ffe15 	stw	r5,-8(fp)
    f564:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    f568:	e0bffd17 	ldw	r2,-12(fp)
    f56c:	10000816 	blt	r2,zero,f590 <read+0x44>
    f570:	01400304 	movi	r5,12
    f574:	e13ffd17 	ldw	r4,-12(fp)
    f578:	000c3c80 	call	c3c8 <__mulsi3>
    f57c:	1007883a 	mov	r3,r2
    f580:	008000b4 	movhi	r2,2
    f584:	10a8ac04 	addi	r2,r2,-23888
    f588:	1885883a 	add	r2,r3,r2
    f58c:	00000106 	br	f594 <read+0x48>
    f590:	0005883a 	mov	r2,zero
    f594:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
    f598:	e0bffb17 	ldw	r2,-20(fp)
    f59c:	10002226 	beq	r2,zero,f628 <read+0xdc>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
    f5a0:	e0bffb17 	ldw	r2,-20(fp)
    f5a4:	10800217 	ldw	r2,8(r2)
    f5a8:	108000cc 	andi	r2,r2,3
    f5ac:	10800060 	cmpeqi	r2,r2,1
    f5b0:	1000181e 	bne	r2,zero,f614 <read+0xc8>
        (fd->dev->read))
    f5b4:	e0bffb17 	ldw	r2,-20(fp)
    f5b8:	10800017 	ldw	r2,0(r2)
    f5bc:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
    f5c0:	10001426 	beq	r2,zero,f614 <read+0xc8>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
    f5c4:	e0bffb17 	ldw	r2,-20(fp)
    f5c8:	10800017 	ldw	r2,0(r2)
    f5cc:	10800517 	ldw	r2,20(r2)
    f5d0:	e0ffff17 	ldw	r3,-4(fp)
    f5d4:	180d883a 	mov	r6,r3
    f5d8:	e17ffe17 	ldw	r5,-8(fp)
    f5dc:	e13ffb17 	ldw	r4,-20(fp)
    f5e0:	103ee83a 	callr	r2
    f5e4:	e0bffc15 	stw	r2,-16(fp)
    f5e8:	e0bffc17 	ldw	r2,-16(fp)
    f5ec:	1000070e 	bge	r2,zero,f60c <read+0xc0>
        {
          ALT_ERRNO = -rval;
    f5f0:	000f5100 	call	f510 <alt_get_errno>
    f5f4:	1007883a 	mov	r3,r2
    f5f8:	e0bffc17 	ldw	r2,-16(fp)
    f5fc:	0085c83a 	sub	r2,zero,r2
    f600:	18800015 	stw	r2,0(r3)
          return -1;
    f604:	00bfffc4 	movi	r2,-1
    f608:	00000c06 	br	f63c <read+0xf0>
        }
        return rval;
    f60c:	e0bffc17 	ldw	r2,-16(fp)
    f610:	00000a06 	br	f63c <read+0xf0>
      }
      else
      {
        ALT_ERRNO = EACCES;
    f614:	000f5100 	call	f510 <alt_get_errno>
    f618:	1007883a 	mov	r3,r2
    f61c:	00800344 	movi	r2,13
    f620:	18800015 	stw	r2,0(r3)
    f624:	00000406 	br	f638 <read+0xec>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
    f628:	000f5100 	call	f510 <alt_get_errno>
    f62c:	1007883a 	mov	r3,r2
    f630:	00801444 	movi	r2,81
    f634:	18800015 	stw	r2,0(r3)
  }
  return -1;
    f638:	00bfffc4 	movi	r2,-1
}
    f63c:	e037883a 	mov	sp,fp
    f640:	dfc00117 	ldw	ra,4(sp)
    f644:	df000017 	ldw	fp,0(sp)
    f648:	dec00204 	addi	sp,sp,8
    f64c:	f800283a 	ret

0000f650 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
    f650:	defffc04 	addi	sp,sp,-16
    f654:	dfc00315 	stw	ra,12(sp)
    f658:	df000215 	stw	fp,8(sp)
    f65c:	dc000115 	stw	r16,4(sp)
    f660:	df000204 	addi	fp,sp,8
    f664:	e13ffe15 	stw	r4,-8(fp)
  if (fd > 2)
    f668:	e0bffe17 	ldw	r2,-8(fp)
    f66c:	108000d0 	cmplti	r2,r2,3
    f670:	1000111e 	bne	r2,zero,f6b8 <alt_release_fd+0x68>
  {
    alt_fd_list[fd].fd_flags = 0;
    f674:	040000b4 	movhi	r16,2
    f678:	8428ac04 	addi	r16,r16,-23888
    f67c:	e0bffe17 	ldw	r2,-8(fp)
    f680:	01400304 	movi	r5,12
    f684:	1009883a 	mov	r4,r2
    f688:	000c3c80 	call	c3c8 <__mulsi3>
    f68c:	8085883a 	add	r2,r16,r2
    f690:	10800204 	addi	r2,r2,8
    f694:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
    f698:	040000b4 	movhi	r16,2
    f69c:	8428ac04 	addi	r16,r16,-23888
    f6a0:	e0bffe17 	ldw	r2,-8(fp)
    f6a4:	01400304 	movi	r5,12
    f6a8:	1009883a 	mov	r4,r2
    f6ac:	000c3c80 	call	c3c8 <__mulsi3>
    f6b0:	8085883a 	add	r2,r16,r2
    f6b4:	10000015 	stw	zero,0(r2)
  }
}
    f6b8:	0001883a 	nop
    f6bc:	e6ffff04 	addi	sp,fp,-4
    f6c0:	dfc00217 	ldw	ra,8(sp)
    f6c4:	df000117 	ldw	fp,4(sp)
    f6c8:	dc000017 	ldw	r16,0(sp)
    f6cc:	dec00304 	addi	sp,sp,12
    f6d0:	f800283a 	ret

0000f6d4 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
    f6d4:	defff904 	addi	sp,sp,-28
    f6d8:	df000615 	stw	fp,24(sp)
    f6dc:	df000604 	addi	fp,sp,24
    f6e0:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    f6e4:	0005303a 	rdctl	r2,status
    f6e8:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    f6ec:	e0fffe17 	ldw	r3,-8(fp)
    f6f0:	00bfff84 	movi	r2,-2
    f6f4:	1884703a 	and	r2,r3,r2
    f6f8:	1001703a 	wrctl	status,r2
  
  return context;
    f6fc:	e0bffe17 	ldw	r2,-8(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
    f700:	e0bffb15 	stw	r2,-20(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
    f704:	d0a00e17 	ldw	r2,-32712(gp)
    f708:	10c000c4 	addi	r3,r2,3
    f70c:	00bfff04 	movi	r2,-4
    f710:	1884703a 	and	r2,r3,r2
    f714:	d0a00e15 	stw	r2,-32712(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
    f718:	d0e00e17 	ldw	r3,-32712(gp)
    f71c:	e0bfff17 	ldw	r2,-4(fp)
    f720:	1887883a 	add	r3,r3,r2
    f724:	008000f4 	movhi	r2,3
    f728:	10800004 	addi	r2,r2,0
    f72c:	10c0062e 	bgeu	r2,r3,f748 <sbrk+0x74>
    f730:	e0bffb17 	ldw	r2,-20(fp)
    f734:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    f738:	e0bffa17 	ldw	r2,-24(fp)
    f73c:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
    f740:	00bfffc4 	movi	r2,-1
    f744:	00000b06 	br	f774 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
    f748:	d0a00e17 	ldw	r2,-32712(gp)
    f74c:	e0bffd15 	stw	r2,-12(fp)
  heap_end += incr; 
    f750:	d0e00e17 	ldw	r3,-32712(gp)
    f754:	e0bfff17 	ldw	r2,-4(fp)
    f758:	1885883a 	add	r2,r3,r2
    f75c:	d0a00e15 	stw	r2,-32712(gp)
    f760:	e0bffb17 	ldw	r2,-20(fp)
    f764:	e0bffc15 	stw	r2,-16(fp)
    f768:	e0bffc17 	ldw	r2,-16(fp)
    f76c:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
    f770:	e0bffd17 	ldw	r2,-12(fp)
} 
    f774:	e037883a 	mov	sp,fp
    f778:	df000017 	ldw	fp,0(sp)
    f77c:	dec00104 	addi	sp,sp,4
    f780:	f800283a 	ret

0000f784 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    f784:	defffe04 	addi	sp,sp,-8
    f788:	dfc00115 	stw	ra,4(sp)
    f78c:	df000015 	stw	fp,0(sp)
    f790:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    f794:	d0a00c17 	ldw	r2,-32720(gp)
    f798:	10000326 	beq	r2,zero,f7a8 <alt_get_errno+0x24>
    f79c:	d0a00c17 	ldw	r2,-32720(gp)
    f7a0:	103ee83a 	callr	r2
    f7a4:	00000106 	br	f7ac <alt_get_errno+0x28>
    f7a8:	d0a71a04 	addi	r2,gp,-25496
}
    f7ac:	e037883a 	mov	sp,fp
    f7b0:	dfc00117 	ldw	ra,4(sp)
    f7b4:	df000017 	ldw	fp,0(sp)
    f7b8:	dec00204 	addi	sp,sp,8
    f7bc:	f800283a 	ret

0000f7c0 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
    f7c0:	defff904 	addi	sp,sp,-28
    f7c4:	dfc00615 	stw	ra,24(sp)
    f7c8:	df000515 	stw	fp,20(sp)
    f7cc:	df000504 	addi	fp,sp,20
    f7d0:	e13ffd15 	stw	r4,-12(fp)
    f7d4:	e17ffe15 	stw	r5,-8(fp)
    f7d8:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    f7dc:	e0bffd17 	ldw	r2,-12(fp)
    f7e0:	10000816 	blt	r2,zero,f804 <write+0x44>
    f7e4:	01400304 	movi	r5,12
    f7e8:	e13ffd17 	ldw	r4,-12(fp)
    f7ec:	000c3c80 	call	c3c8 <__mulsi3>
    f7f0:	1007883a 	mov	r3,r2
    f7f4:	008000b4 	movhi	r2,2
    f7f8:	10a8ac04 	addi	r2,r2,-23888
    f7fc:	1885883a 	add	r2,r3,r2
    f800:	00000106 	br	f808 <write+0x48>
    f804:	0005883a 	mov	r2,zero
    f808:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
    f80c:	e0bffb17 	ldw	r2,-20(fp)
    f810:	10002126 	beq	r2,zero,f898 <write+0xd8>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
    f814:	e0bffb17 	ldw	r2,-20(fp)
    f818:	10800217 	ldw	r2,8(r2)
    f81c:	108000cc 	andi	r2,r2,3
    f820:	10001826 	beq	r2,zero,f884 <write+0xc4>
    f824:	e0bffb17 	ldw	r2,-20(fp)
    f828:	10800017 	ldw	r2,0(r2)
    f82c:	10800617 	ldw	r2,24(r2)
    f830:	10001426 	beq	r2,zero,f884 <write+0xc4>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
    f834:	e0bffb17 	ldw	r2,-20(fp)
    f838:	10800017 	ldw	r2,0(r2)
    f83c:	10800617 	ldw	r2,24(r2)
    f840:	e0ffff17 	ldw	r3,-4(fp)
    f844:	180d883a 	mov	r6,r3
    f848:	e17ffe17 	ldw	r5,-8(fp)
    f84c:	e13ffb17 	ldw	r4,-20(fp)
    f850:	103ee83a 	callr	r2
    f854:	e0bffc15 	stw	r2,-16(fp)
    f858:	e0bffc17 	ldw	r2,-16(fp)
    f85c:	1000070e 	bge	r2,zero,f87c <write+0xbc>
      {
        ALT_ERRNO = -rval;
    f860:	000f7840 	call	f784 <alt_get_errno>
    f864:	1007883a 	mov	r3,r2
    f868:	e0bffc17 	ldw	r2,-16(fp)
    f86c:	0085c83a 	sub	r2,zero,r2
    f870:	18800015 	stw	r2,0(r3)
        return -1;
    f874:	00bfffc4 	movi	r2,-1
    f878:	00000c06 	br	f8ac <write+0xec>
      }
      return rval;
    f87c:	e0bffc17 	ldw	r2,-16(fp)
    f880:	00000a06 	br	f8ac <write+0xec>
    }
    else
    {
      ALT_ERRNO = EACCES;
    f884:	000f7840 	call	f784 <alt_get_errno>
    f888:	1007883a 	mov	r3,r2
    f88c:	00800344 	movi	r2,13
    f890:	18800015 	stw	r2,0(r3)
    f894:	00000406 	br	f8a8 <write+0xe8>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
    f898:	000f7840 	call	f784 <alt_get_errno>
    f89c:	1007883a 	mov	r3,r2
    f8a0:	00801444 	movi	r2,81
    f8a4:	18800015 	stw	r2,0(r3)
  }
  return -1;
    f8a8:	00bfffc4 	movi	r2,-1
}
    f8ac:	e037883a 	mov	sp,fp
    f8b0:	dfc00117 	ldw	ra,4(sp)
    f8b4:	df000017 	ldw	fp,0(sp)
    f8b8:	dec00204 	addi	sp,sp,8
    f8bc:	f800283a 	ret

0000f8c0 <__env_lock>:
/*
 *
 */

void __env_lock ( struct _reent *_r )
{
    f8c0:	deffdf04 	addi	sp,sp,-132
    f8c4:	dfc02015 	stw	ra,128(sp)
    f8c8:	df001f15 	stw	fp,124(sp)
    f8cc:	df001f04 	addi	fp,sp,124
    f8d0:	e13fff15 	stw	r4,-4(fp)
  INT8U err;
  int id;

  /* use our priority as a task id */

  err = OSTaskQuery( OS_PRIO_SELF, &tcb );
    f8d4:	e0bfe204 	addi	r2,fp,-120
    f8d8:	100b883a 	mov	r5,r2
    f8dc:	01003fc4 	movi	r4,255
    f8e0:	0016d240 	call	16d24 <OSTaskQuery>
    f8e4:	e0bffe85 	stb	r2,-6(fp)
  if (err != OS_NO_ERR)
    f8e8:	e0bffe83 	ldbu	r2,-6(fp)
    f8ec:	10803fcc 	andi	r2,r2,255
    f8f0:	10001e1e 	bne	r2,zero,f96c <__env_lock+0xac>
    return;

  id = tcb.OSTCBPrio;
    f8f4:	e0bfee83 	ldbu	r2,-70(fp)
    f8f8:	10803fcc 	andi	r2,r2,255
    f8fc:	e0bfe115 	stw	r2,-124(fp)
   
  /* see if we own the environment already */

  OSSemQuery( alt_envsem, &semdata );
    f900:	d0a72117 	ldw	r2,-25468(gp)
    f904:	e0fffd04 	addi	r3,fp,-12
    f908:	180b883a 	mov	r5,r3
    f90c:	1009883a 	mov	r4,r2
    f910:	001553c0 	call	1553c <OSSemQuery>
  if( semdata.OSEventGrp && id == lockid ) 
    f914:	e0bffe43 	ldbu	r2,-7(fp)
    f918:	10803fcc 	andi	r2,r2,255
    f91c:	10000726 	beq	r2,zero,f93c <__env_lock+0x7c>
    f920:	d0a00f17 	ldw	r2,-32708(gp)
    f924:	e0ffe117 	ldw	r3,-124(fp)
    f928:	1880041e 	bne	r3,r2,f93c <__env_lock+0x7c>
  {
    /* we do; just count the recursion */

    locks++;
    f92c:	d0a72017 	ldw	r2,-25472(gp)
    f930:	10800044 	addi	r2,r2,1
    f934:	d0a72015 	stw	r2,-25472(gp)
    f938:	00000a06 	br	f964 <__env_lock+0xa4>
  }
  else 
  {
    /* wait on the other task to yield, then claim ownership */

    OSSemPend( alt_envsem, 0, &err );
    f93c:	d0a72117 	ldw	r2,-25468(gp)
    f940:	e0fffe84 	addi	r3,fp,-6
    f944:	180d883a 	mov	r6,r3
    f948:	000b883a 	mov	r5,zero
    f94c:	1009883a 	mov	r4,r2
    f950:	00150b40 	call	150b4 <OSSemPend>
    locks  = 1;
    f954:	00800044 	movi	r2,1
    f958:	d0a72015 	stw	r2,-25472(gp)
    lockid = id;
    f95c:	e0bfe117 	ldw	r2,-124(fp)
    f960:	d0a00f15 	stw	r2,-32708(gp)
  }

#endif /* OS_THREAD_SAFE_NEWLIB */
  return;
    f964:	0001883a 	nop
    f968:	00000106 	br	f970 <__env_lock+0xb0>

  /* use our priority as a task id */

  err = OSTaskQuery( OS_PRIO_SELF, &tcb );
  if (err != OS_NO_ERR)
    return;
    f96c:	0001883a 	nop
    lockid = id;
  }

#endif /* OS_THREAD_SAFE_NEWLIB */
  return;
}
    f970:	e037883a 	mov	sp,fp
    f974:	dfc00117 	ldw	ra,4(sp)
    f978:	df000017 	ldw	fp,0(sp)
    f97c:	dec00204 	addi	sp,sp,8
    f980:	f800283a 	ret

0000f984 <__env_unlock>:
/*
 *
 */

void __env_unlock ( struct _reent *_r )
{
    f984:	defffd04 	addi	sp,sp,-12
    f988:	dfc00215 	stw	ra,8(sp)
    f98c:	df000115 	stw	fp,4(sp)
    f990:	df000104 	addi	fp,sp,4
    f994:	e13fff15 	stw	r4,-4(fp)
#if OS_THREAD_SAFE_NEWLIB
  if (locks == 0)
    f998:	d0a72017 	ldw	r2,-25472(gp)
    f99c:	10000b26 	beq	r2,zero,f9cc <__env_unlock+0x48>
   /* 
    * release the environment once the number of locks == the number 
    * of unlocks 
    */

  if( (--locks) == 0 ) 
    f9a0:	d0a72017 	ldw	r2,-25472(gp)
    f9a4:	10bfffc4 	addi	r2,r2,-1
    f9a8:	d0a72015 	stw	r2,-25472(gp)
    f9ac:	d0a72017 	ldw	r2,-25472(gp)
    f9b0:	1000071e 	bne	r2,zero,f9d0 <__env_unlock+0x4c>
  {
    lockid = -1;
    f9b4:	00bfffc4 	movi	r2,-1
    f9b8:	d0a00f15 	stw	r2,-32708(gp)
    OSSemPost( alt_envsem );
    f9bc:	d0a72117 	ldw	r2,-25468(gp)
    f9c0:	1009883a 	mov	r4,r2
    f9c4:	001542c0 	call	1542c <OSSemPost>
    f9c8:	00000106 	br	f9d0 <__env_unlock+0x4c>

void __env_unlock ( struct _reent *_r )
{
#if OS_THREAD_SAFE_NEWLIB
  if (locks == 0)
    return;
    f9cc:	0001883a 	nop
  {
    lockid = -1;
    OSSemPost( alt_envsem );
  }
#endif /* OS_THREAD_SAFE_NEWLIB */
}
    f9d0:	e037883a 	mov	sp,fp
    f9d4:	dfc00117 	ldw	ra,4(sp)
    f9d8:	df000017 	ldw	fp,0(sp)
    f9dc:	dec00204 	addi	sp,sp,8
    f9e0:	f800283a 	ret

0000f9e4 <__malloc_lock>:
/*
 *
 */

void __malloc_lock ( struct _reent *_r )
{
    f9e4:	deffdb04 	addi	sp,sp,-148
    f9e8:	dfc02415 	stw	ra,144(sp)
    f9ec:	df002315 	stw	fp,140(sp)
    f9f0:	df002304 	addi	fp,sp,140
    f9f4:	e13fff15 	stw	r4,-4(fp)
  OS_TCB tcb;
  OS_SEM_DATA semdata;
  INT8U err;
  int id;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    f9f8:	e03fdd15 	stw	zero,-140(fp)
#endif  
  
  if (OSRunning != OS_TRUE)
    f9fc:	d0a72443 	ldbu	r2,-25455(gp)
    fa00:	10803fcc 	andi	r2,r2,255
    fa04:	10800060 	cmpeqi	r2,r2,1
    fa08:	10003626 	beq	r2,zero,fae4 <__malloc_lock+0x100>
      return;

  /* use our priority as a task id */

  err = OSTaskQuery( OS_PRIO_SELF, &tcb );
    fa0c:	e0bfe204 	addi	r2,fp,-120
    fa10:	100b883a 	mov	r5,r2
    fa14:	01003fc4 	movi	r4,255
    fa18:	0016d240 	call	16d24 <OSTaskQuery>
    fa1c:	e0bffe85 	stb	r2,-6(fp)
  if (err != OS_NO_ERR)
    fa20:	e0bffe83 	ldbu	r2,-6(fp)
    fa24:	10803fcc 	andi	r2,r2,255
    fa28:	1000301e 	bne	r2,zero,faec <__malloc_lock+0x108>
    return;

  id = tcb.OSTCBPrio;
    fa2c:	e0bfee83 	ldbu	r2,-70(fp)
    fa30:	10803fcc 	andi	r2,r2,255
    fa34:	e0bfde15 	stw	r2,-136(fp)
   
  /* see if we own the heap already */

  OSSemQuery( alt_heapsem, &semdata );
    fa38:	d0a72317 	ldw	r2,-25460(gp)
    fa3c:	e0fffd04 	addi	r3,fp,-12
    fa40:	180b883a 	mov	r5,r3
    fa44:	1009883a 	mov	r4,r2
    fa48:	001553c0 	call	1553c <OSSemQuery>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    fa4c:	0005303a 	rdctl	r2,status
    fa50:	e0bfe115 	stw	r2,-124(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    fa54:	e0ffe117 	ldw	r3,-124(fp)
    fa58:	00bfff84 	movi	r2,-2
    fa5c:	1884703a 	and	r2,r3,r2
    fa60:	1001703a 	wrctl	status,r2
  
  return context;
    fa64:	e0bfe117 	ldw	r2,-124(fp)
  
  OS_ENTER_CRITICAL();
    fa68:	e0bfdd15 	stw	r2,-140(fp)

  if( !semdata.OSCnt && id == lockid ) 
    fa6c:	e0bffd0b 	ldhu	r2,-12(fp)
    fa70:	10bfffcc 	andi	r2,r2,65535
    fa74:	10000b1e 	bne	r2,zero,faa4 <__malloc_lock+0xc0>
    fa78:	d0a01017 	ldw	r2,-32704(gp)
    fa7c:	e0ffde17 	ldw	r3,-136(fp)
    fa80:	1880081e 	bne	r3,r2,faa4 <__malloc_lock+0xc0>
  {
    /* we do; just count the recursion */
    locks++;
    fa84:	d0a72217 	ldw	r2,-25464(gp)
    fa88:	10800044 	addi	r2,r2,1
    fa8c:	d0a72215 	stw	r2,-25464(gp)
    fa90:	e0bfdd17 	ldw	r2,-140(fp)
    fa94:	e0bfdf15 	stw	r2,-132(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    fa98:	e0bfdf17 	ldw	r2,-132(fp)
    fa9c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    faa0:	00000e06 	br	fadc <__malloc_lock+0xf8>
    faa4:	e0bfdd17 	ldw	r2,-140(fp)
    faa8:	e0bfe015 	stw	r2,-128(fp)
    faac:	e0bfe017 	ldw	r2,-128(fp)
    fab0:	1001703a 	wrctl	status,r2
  else 
  {
    /* wait on the other task to yield the heap, then claim ownership of it */
    OS_EXIT_CRITICAL();

    OSSemPend( alt_heapsem, 0, &err );
    fab4:	d0a72317 	ldw	r2,-25460(gp)
    fab8:	e0fffe84 	addi	r3,fp,-6
    fabc:	180d883a 	mov	r6,r3
    fac0:	000b883a 	mov	r5,zero
    fac4:	1009883a 	mov	r4,r2
    fac8:	00150b40 	call	150b4 <OSSemPend>
    locks  = 1;
    facc:	00800044 	movi	r2,1
    fad0:	d0a72215 	stw	r2,-25464(gp)
    lockid = id;
    fad4:	e0bfde17 	ldw	r2,-136(fp)
    fad8:	d0a01015 	stw	r2,-32704(gp)
  }

#endif /* OS_THREAD_SAFE_NEWLIB */
  return;
    fadc:	0001883a 	nop
    fae0:	00000306 	br	faf0 <__malloc_lock+0x10c>
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
#endif  
  
  if (OSRunning != OS_TRUE)
      return;
    fae4:	0001883a 	nop
    fae8:	00000106 	br	faf0 <__malloc_lock+0x10c>

  /* use our priority as a task id */

  err = OSTaskQuery( OS_PRIO_SELF, &tcb );
  if (err != OS_NO_ERR)
    return;
    faec:	0001883a 	nop
    lockid = id;
  }

#endif /* OS_THREAD_SAFE_NEWLIB */
  return;
}
    faf0:	e037883a 	mov	sp,fp
    faf4:	dfc00117 	ldw	ra,4(sp)
    faf8:	df000017 	ldw	fp,0(sp)
    fafc:	dec00204 	addi	sp,sp,8
    fb00:	f800283a 	ret

0000fb04 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
    fb04:	defff804 	addi	sp,sp,-32
    fb08:	dfc00715 	stw	ra,28(sp)
    fb0c:	df000615 	stw	fp,24(sp)
    fb10:	df000604 	addi	fp,sp,24
    fb14:	e13fff15 	stw	r4,-4(fp)
#if OS_THREAD_SAFE_NEWLIB

#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    fb18:	e03ffa15 	stw	zero,-24(fp)
#endif 

  if (OSRunning != OS_TRUE)
    fb1c:	d0a72443 	ldbu	r2,-25455(gp)
    fb20:	10803fcc 	andi	r2,r2,255
    fb24:	10800060 	cmpeqi	r2,r2,1
    fb28:	10002326 	beq	r2,zero,fbb8 <__malloc_unlock+0xb4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    fb2c:	0005303a 	rdctl	r2,status
    fb30:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    fb34:	e0fffe17 	ldw	r3,-8(fp)
    fb38:	00bfff84 	movi	r2,-2
    fb3c:	1884703a 	and	r2,r3,r2
    fb40:	1001703a 	wrctl	status,r2
  
  return context;
    fb44:	e0bffe17 	ldw	r2,-8(fp)
      return;

  OS_ENTER_CRITICAL();
    fb48:	e0bffa15 	stw	r2,-24(fp)
  if (locks == 0)
    fb4c:	d0a72217 	ldw	r2,-25464(gp)
    fb50:	1000051e 	bne	r2,zero,fb68 <__malloc_unlock+0x64>
    fb54:	e0bffa17 	ldw	r2,-24(fp)
    fb58:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    fb5c:	e0bffb17 	ldw	r2,-20(fp)
    fb60:	1001703a 	wrctl	status,r2
  {
      OS_EXIT_CRITICAL();
      return;
    fb64:	00001506 	br	fbbc <__malloc_unlock+0xb8>
  }

  /* release the heap once the number of locks == the number of unlocks */
  if( (--locks) == 0 ) 
    fb68:	d0a72217 	ldw	r2,-25464(gp)
    fb6c:	10bfffc4 	addi	r2,r2,-1
    fb70:	d0a72215 	stw	r2,-25464(gp)
    fb74:	d0a72217 	ldw	r2,-25464(gp)
    fb78:	10000a1e 	bne	r2,zero,fba4 <__malloc_unlock+0xa0>
  {
    lockid = -1;
    fb7c:	00bfffc4 	movi	r2,-1
    fb80:	d0a01015 	stw	r2,-32704(gp)
    fb84:	e0bffa17 	ldw	r2,-24(fp)
    fb88:	e0bffc15 	stw	r2,-16(fp)
    fb8c:	e0bffc17 	ldw	r2,-16(fp)
    fb90:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OSSemPost( alt_heapsem );
    fb94:	d0a72317 	ldw	r2,-25460(gp)
    fb98:	1009883a 	mov	r4,r2
    fb9c:	001542c0 	call	1542c <OSSemPost>
    fba0:	00000606 	br	fbbc <__malloc_unlock+0xb8>
    fba4:	e0bffa17 	ldw	r2,-24(fp)
    fba8:	e0bffd15 	stw	r2,-12(fp)
    fbac:	e0bffd17 	ldw	r2,-12(fp)
    fbb0:	1001703a 	wrctl	status,r2
    fbb4:	00000106 	br	fbbc <__malloc_unlock+0xb8>
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
#endif 

  if (OSRunning != OS_TRUE)
      return;
    fbb8:	0001883a 	nop
  {
      OS_EXIT_CRITICAL();
  }
  
#endif /* OS_THREAD_SAFE_NEWLIB */
}
    fbbc:	e037883a 	mov	sp,fp
    fbc0:	dfc00117 	ldw	ra,4(sp)
    fbc4:	df000017 	ldw	fp,0(sp)
    fbc8:	dec00204 	addi	sp,sp,8
    fbcc:	f800283a 	ret

0000fbd0 <OSEventNameGet>:
*********************************************************************************************************
*/

#if (OS_EVENT_EN) && (OS_EVENT_NAME_SIZE > 1)
INT8U  OSEventNameGet (OS_EVENT *pevent, INT8U *pname, INT8U *perr)
{
    fbd0:	defff704 	addi	sp,sp,-36
    fbd4:	dfc00815 	stw	ra,32(sp)
    fbd8:	df000715 	stw	fp,28(sp)
    fbdc:	df000704 	addi	fp,sp,28
    fbe0:	e13ffd15 	stw	r4,-12(fp)
    fbe4:	e17ffe15 	stw	r5,-8(fp)
    fbe8:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    fbec:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
    fbf0:	e0bfff17 	ldw	r2,-4(fp)
    fbf4:	1000021e 	bne	r2,zero,fc00 <OSEventNameGet+0x30>
        return (0);
    fbf8:	0005883a 	mov	r2,zero
    fbfc:	00003706 	br	fcdc <OSEventNameGet+0x10c>
    }
    if (pevent == (OS_EVENT *)0) {               /* Is 'pevent' a NULL pointer?                        */
    fc00:	e0bffd17 	ldw	r2,-12(fp)
    fc04:	1000051e 	bne	r2,zero,fc1c <OSEventNameGet+0x4c>
        *perr = OS_ERR_PEVENT_NULL;
    fc08:	e0bfff17 	ldw	r2,-4(fp)
    fc0c:	00c00104 	movi	r3,4
    fc10:	10c00005 	stb	r3,0(r2)
        return (0);
    fc14:	0005883a 	mov	r2,zero
    fc18:	00003006 	br	fcdc <OSEventNameGet+0x10c>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
    fc1c:	e0bffe17 	ldw	r2,-8(fp)
    fc20:	1000051e 	bne	r2,zero,fc38 <OSEventNameGet+0x68>
        *perr = OS_ERR_PNAME_NULL;
    fc24:	e0bfff17 	ldw	r2,-4(fp)
    fc28:	00c00304 	movi	r3,12
    fc2c:	10c00005 	stb	r3,0(r2)
        return (0);
    fc30:	0005883a 	mov	r2,zero
    fc34:	00002906 	br	fcdc <OSEventNameGet+0x10c>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
    fc38:	d0a73203 	ldbu	r2,-25400(gp)
    fc3c:	10803fcc 	andi	r2,r2,255
    fc40:	10000526 	beq	r2,zero,fc58 <OSEventNameGet+0x88>
        *perr  = OS_ERR_NAME_GET_ISR;
    fc44:	e0bfff17 	ldw	r2,-4(fp)
    fc48:	00c00444 	movi	r3,17
    fc4c:	10c00005 	stb	r3,0(r2)
        return (0);
    fc50:	0005883a 	mov	r2,zero
    fc54:	00002106 	br	fcdc <OSEventNameGet+0x10c>
    }
    switch (pevent->OSEventType) {
    fc58:	e0bffd17 	ldw	r2,-12(fp)
    fc5c:	10800003 	ldbu	r2,0(r2)
    fc60:	10803fcc 	andi	r2,r2,255
    fc64:	10bfffc4 	addi	r2,r2,-1
    fc68:	10800128 	cmpgeui	r2,r2,4
    fc6c:	10000526 	beq	r2,zero,fc84 <OSEventNameGet+0xb4>
        case OS_EVENT_TYPE_MBOX:
        case OS_EVENT_TYPE_Q:
             break;

        default:
             *perr = OS_ERR_EVENT_TYPE;
    fc70:	e0bfff17 	ldw	r2,-4(fp)
    fc74:	00c00044 	movi	r3,1
    fc78:	10c00005 	stb	r3,0(r2)
             return (0);
    fc7c:	0005883a 	mov	r2,zero
    fc80:	00001606 	br	fcdc <OSEventNameGet+0x10c>
    switch (pevent->OSEventType) {
        case OS_EVENT_TYPE_SEM:
        case OS_EVENT_TYPE_MUTEX:
        case OS_EVENT_TYPE_MBOX:
        case OS_EVENT_TYPE_Q:
             break;
    fc84:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    fc88:	0005303a 	rdctl	r2,status
    fc8c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    fc90:	e0fffb17 	ldw	r3,-20(fp)
    fc94:	00bfff84 	movi	r2,-2
    fc98:	1884703a 	and	r2,r3,r2
    fc9c:	1001703a 	wrctl	status,r2
  
  return context;
    fca0:	e0bffb17 	ldw	r2,-20(fp)

        default:
             *perr = OS_ERR_EVENT_TYPE;
             return (0);
    }
    OS_ENTER_CRITICAL();
    fca4:	e0bff915 	stw	r2,-28(fp)
    len   = OS_StrCopy(pname, pevent->OSEventName);   /* Copy name from OS_EVENT                       */
    fca8:	e0bffd17 	ldw	r2,-12(fp)
    fcac:	10800384 	addi	r2,r2,14
    fcb0:	100b883a 	mov	r5,r2
    fcb4:	e13ffe17 	ldw	r4,-8(fp)
    fcb8:	00116540 	call	11654 <OS_StrCopy>
    fcbc:	e0bffa05 	stb	r2,-24(fp)
    fcc0:	e0bff917 	ldw	r2,-28(fp)
    fcc4:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    fcc8:	e0bffc17 	ldw	r2,-16(fp)
    fccc:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
    fcd0:	e0bfff17 	ldw	r2,-4(fp)
    fcd4:	10000005 	stb	zero,0(r2)
    return (len);
    fcd8:	e0bffa03 	ldbu	r2,-24(fp)
}
    fcdc:	e037883a 	mov	sp,fp
    fce0:	dfc00117 	ldw	ra,4(sp)
    fce4:	df000017 	ldw	fp,0(sp)
    fce8:	dec00204 	addi	sp,sp,8
    fcec:	f800283a 	ret

0000fcf0 <OSEventNameSet>:
*********************************************************************************************************
*/

#if (OS_EVENT_EN) && (OS_EVENT_NAME_SIZE > 1)
void  OSEventNameSet (OS_EVENT *pevent, INT8U *pname, INT8U *perr)
{
    fcf0:	defff604 	addi	sp,sp,-40
    fcf4:	dfc00915 	stw	ra,36(sp)
    fcf8:	df000815 	stw	fp,32(sp)
    fcfc:	df000804 	addi	fp,sp,32
    fd00:	e13ffd15 	stw	r4,-12(fp)
    fd04:	e17ffe15 	stw	r5,-8(fp)
    fd08:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    fd0c:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
    fd10:	e0bfff17 	ldw	r2,-4(fp)
    fd14:	10004026 	beq	r2,zero,fe18 <OSEventNameSet+0x128>
        return;
    }
    if (pevent == (OS_EVENT *)0) {               /* Is 'pevent' a NULL pointer?                        */
    fd18:	e0bffd17 	ldw	r2,-12(fp)
    fd1c:	1000041e 	bne	r2,zero,fd30 <OSEventNameSet+0x40>
        *perr = OS_ERR_PEVENT_NULL;
    fd20:	e0bfff17 	ldw	r2,-4(fp)
    fd24:	00c00104 	movi	r3,4
    fd28:	10c00005 	stb	r3,0(r2)
        return;
    fd2c:	00003b06 	br	fe1c <OSEventNameSet+0x12c>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
    fd30:	e0bffe17 	ldw	r2,-8(fp)
    fd34:	1000041e 	bne	r2,zero,fd48 <OSEventNameSet+0x58>
        *perr = OS_ERR_PNAME_NULL;
    fd38:	e0bfff17 	ldw	r2,-4(fp)
    fd3c:	00c00304 	movi	r3,12
    fd40:	10c00005 	stb	r3,0(r2)
        return;
    fd44:	00003506 	br	fe1c <OSEventNameSet+0x12c>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
    fd48:	d0a73203 	ldbu	r2,-25400(gp)
    fd4c:	10803fcc 	andi	r2,r2,255
    fd50:	10000426 	beq	r2,zero,fd64 <OSEventNameSet+0x74>
        *perr = OS_ERR_NAME_SET_ISR;
    fd54:	e0bfff17 	ldw	r2,-4(fp)
    fd58:	00c00484 	movi	r3,18
    fd5c:	10c00005 	stb	r3,0(r2)
        return;
    fd60:	00002e06 	br	fe1c <OSEventNameSet+0x12c>
    }
    switch (pevent->OSEventType) {
    fd64:	e0bffd17 	ldw	r2,-12(fp)
    fd68:	10800003 	ldbu	r2,0(r2)
    fd6c:	10803fcc 	andi	r2,r2,255
    fd70:	10bfffc4 	addi	r2,r2,-1
    fd74:	10800128 	cmpgeui	r2,r2,4
    fd78:	10000426 	beq	r2,zero,fd8c <OSEventNameSet+0x9c>
        case OS_EVENT_TYPE_MBOX:
        case OS_EVENT_TYPE_Q:
             break;

        default:
             *perr = OS_ERR_EVENT_TYPE;
    fd7c:	e0bfff17 	ldw	r2,-4(fp)
    fd80:	00c00044 	movi	r3,1
    fd84:	10c00005 	stb	r3,0(r2)
             return;
    fd88:	00002406 	br	fe1c <OSEventNameSet+0x12c>
    switch (pevent->OSEventType) {
        case OS_EVENT_TYPE_SEM:
        case OS_EVENT_TYPE_MUTEX:
        case OS_EVENT_TYPE_MBOX:
        case OS_EVENT_TYPE_Q:
             break;
    fd8c:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    fd90:	0005303a 	rdctl	r2,status
    fd94:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    fd98:	e0fffc17 	ldw	r3,-16(fp)
    fd9c:	00bfff84 	movi	r2,-2
    fda0:	1884703a 	and	r2,r3,r2
    fda4:	1001703a 	wrctl	status,r2
  
  return context;
    fda8:	e0bffc17 	ldw	r2,-16(fp)

        default:
             *perr = OS_ERR_EVENT_TYPE;
             return;
    }
    OS_ENTER_CRITICAL();
    fdac:	e0bff815 	stw	r2,-32(fp)
    len = OS_StrLen(pname);                           /* Can we fit the string in the storage area?    */
    fdb0:	e13ffe17 	ldw	r4,-8(fp)
    fdb4:	00116c80 	call	116c8 <OS_StrLen>
    fdb8:	e0bffa05 	stb	r2,-24(fp)
    if (len > (OS_EVENT_NAME_SIZE - 1)) {             /* No                                            */
    fdbc:	e0bffa03 	ldbu	r2,-24(fp)
    fdc0:	10800830 	cmpltui	r2,r2,32
    fdc4:	1000081e 	bne	r2,zero,fde8 <OSEventNameSet+0xf8>
    fdc8:	e0bff817 	ldw	r2,-32(fp)
    fdcc:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    fdd0:	e0bff917 	ldw	r2,-28(fp)
    fdd4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_EVENT_NAME_TOO_LONG;
    fdd8:	e0bfff17 	ldw	r2,-4(fp)
    fddc:	00c002c4 	movi	r3,11
    fde0:	10c00005 	stb	r3,0(r2)
        return;
    fde4:	00000d06 	br	fe1c <OSEventNameSet+0x12c>
    }
    (void)OS_StrCopy(pevent->OSEventName, pname);     /* Yes, copy name to the event control block     */
    fde8:	e0bffd17 	ldw	r2,-12(fp)
    fdec:	10800384 	addi	r2,r2,14
    fdf0:	e17ffe17 	ldw	r5,-8(fp)
    fdf4:	1009883a 	mov	r4,r2
    fdf8:	00116540 	call	11654 <OS_StrCopy>
    fdfc:	e0bff817 	ldw	r2,-32(fp)
    fe00:	e0bffb15 	stw	r2,-20(fp)
    fe04:	e0bffb17 	ldw	r2,-20(fp)
    fe08:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
    fe0c:	e0bfff17 	ldw	r2,-4(fp)
    fe10:	10000005 	stb	zero,0(r2)
    fe14:	00000106 	br	fe1c <OSEventNameSet+0x12c>



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
        return;
    fe18:	0001883a 	nop
        return;
    }
    (void)OS_StrCopy(pevent->OSEventName, pname);     /* Yes, copy name to the event control block     */
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
}
    fe1c:	e037883a 	mov	sp,fp
    fe20:	dfc00117 	ldw	ra,4(sp)
    fe24:	df000017 	ldw	fp,0(sp)
    fe28:	dec00204 	addi	sp,sp,8
    fe2c:	f800283a 	ret

0000fe30 <OSEventPendMulti>:
*********************************************************************************************************
*/
/*$PAGE*/
#if ((OS_EVENT_EN) && (OS_EVENT_MULTI_EN > 0))
INT16U  OSEventPendMulti (OS_EVENT **pevents_pend, OS_EVENT **pevents_rdy, void **pmsgs_rdy, INT16U timeout, INT8U *perr)
{
    fe30:	deffed04 	addi	sp,sp,-76
    fe34:	dfc01215 	stw	ra,72(sp)
    fe38:	df001115 	stw	fp,68(sp)
    fe3c:	df001104 	addi	fp,sp,68
    fe40:	e13ffc15 	stw	r4,-16(fp)
    fe44:	e17ffd15 	stw	r5,-12(fp)
    fe48:	e1bffe15 	stw	r6,-8(fp)
    fe4c:	3805883a 	mov	r2,r7
    fe50:	e0bfff0d 	sth	r2,-4(fp)
#endif
    BOOLEAN     events_rdy;
    INT16U      events_rdy_nbr;
    INT8U       events_stat;
#if (OS_CRITICAL_METHOD == 3)                           /* Allocate storage for CPU status register    */
    OS_CPU_SR   cpu_sr = 0;
    fe54:	e03ff315 	stw	zero,-52(fp)
#endif



#if (OS_ARG_CHK_EN > 0)
    if (perr == (INT8U *)0) {                           /* Validate 'perr'                             */
    fe58:	e0800217 	ldw	r2,8(fp)
    fe5c:	1000021e 	bne	r2,zero,fe68 <OSEventPendMulti+0x38>
        return (0);
    fe60:	0005883a 	mov	r2,zero
    fe64:	00017106 	br	1042c <OSEventPendMulti+0x5fc>
    }
    if (pevents_pend == (OS_EVENT **)0) {               /* Validate 'pevents_pend'                     */
    fe68:	e0bffc17 	ldw	r2,-16(fp)
    fe6c:	1000051e 	bne	r2,zero,fe84 <OSEventPendMulti+0x54>
       *perr =  OS_ERR_PEVENT_NULL;
    fe70:	e0800217 	ldw	r2,8(fp)
    fe74:	00c00104 	movi	r3,4
    fe78:	10c00005 	stb	r3,0(r2)
        return (0);
    fe7c:	0005883a 	mov	r2,zero
    fe80:	00016a06 	br	1042c <OSEventPendMulti+0x5fc>
    }
    if (pevents_rdy  == (OS_EVENT **)0) {               /* Validate 'pevents_rdy'                      */
    fe84:	e0bffd17 	ldw	r2,-12(fp)
    fe88:	1000051e 	bne	r2,zero,fea0 <OSEventPendMulti+0x70>
       *perr =  OS_ERR_PEVENT_NULL;
    fe8c:	e0800217 	ldw	r2,8(fp)
    fe90:	00c00104 	movi	r3,4
    fe94:	10c00005 	stb	r3,0(r2)
        return (0);
    fe98:	0005883a 	mov	r2,zero
    fe9c:	00016306 	br	1042c <OSEventPendMulti+0x5fc>
    }
    if (pmsgs_rdy == (void **)0) {                      /* Validate 'pmsgs_rdy'                        */
    fea0:	e0bffe17 	ldw	r2,-8(fp)
    fea4:	1000051e 	bne	r2,zero,febc <OSEventPendMulti+0x8c>
       *perr =  OS_ERR_PEVENT_NULL;
    fea8:	e0800217 	ldw	r2,8(fp)
    feac:	00c00104 	movi	r3,4
    feb0:	10c00005 	stb	r3,0(r2)
        return (0);
    feb4:	0005883a 	mov	r2,zero
    feb8:	00015c06 	br	1042c <OSEventPendMulti+0x5fc>
    }
#endif

   *pevents_rdy = (OS_EVENT *)0;                        /* Init array to NULL in case of errors        */
    febc:	e0bffd17 	ldw	r2,-12(fp)
    fec0:	10000015 	stw	zero,0(r2)

    pevents     =  pevents_pend;
    fec4:	e0bffc17 	ldw	r2,-16(fp)
    fec8:	e0bfef15 	stw	r2,-68(fp)
    pevent      = *pevents;
    fecc:	e0bfef17 	ldw	r2,-68(fp)
    fed0:	10800017 	ldw	r2,0(r2)
    fed4:	e0bff015 	stw	r2,-64(fp)
    while  (pevent != (OS_EVENT *)0) {
    fed8:	00001906 	br	ff40 <OSEventPendMulti+0x110>
        switch (pevent->OSEventType) {                  /* Validate event block types                  */
    fedc:	e0bff017 	ldw	r2,-64(fp)
    fee0:	10800003 	ldbu	r2,0(r2)
    fee4:	10803fcc 	andi	r2,r2,255
    fee8:	10c000a0 	cmpeqi	r3,r2,2
    feec:	1800091e 	bne	r3,zero,ff14 <OSEventPendMulti+0xe4>
    fef0:	10c000e0 	cmpeqi	r3,r2,3
    fef4:	1800091e 	bne	r3,zero,ff1c <OSEventPendMulti+0xec>
    fef8:	10800060 	cmpeqi	r2,r2,1
    fefc:	1000091e 	bne	r2,zero,ff24 <OSEventPendMulti+0xf4>
#endif

            case OS_EVENT_TYPE_MUTEX:                                            
            case OS_EVENT_TYPE_FLAG:
            default:           
                *perr = OS_ERR_EVENT_TYPE;
    ff00:	e0800217 	ldw	r2,8(fp)
    ff04:	00c00044 	movi	r3,1
    ff08:	10c00005 	stb	r3,0(r2)
                 return (0);
    ff0c:	0005883a 	mov	r2,zero
    ff10:	00014606 	br	1042c <OSEventPendMulti+0x5fc>
            case OS_EVENT_TYPE_MBOX:
                 break;
#endif
#if ((OS_Q_EN   > 0) && (OS_MAX_QS > 0))
            case OS_EVENT_TYPE_Q:
                 break;
    ff14:	0001883a 	nop
    ff18:	00000306 	br	ff28 <OSEventPendMulti+0xf8>
    pevent      = *pevents;
    while  (pevent != (OS_EVENT *)0) {
        switch (pevent->OSEventType) {                  /* Validate event block types                  */
#if (OS_SEM_EN  > 0)
            case OS_EVENT_TYPE_SEM:
                 break;
    ff1c:	0001883a 	nop
    ff20:	00000106 	br	ff28 <OSEventPendMulti+0xf8>
#endif
#if (OS_MBOX_EN > 0)
            case OS_EVENT_TYPE_MBOX:
                 break;
    ff24:	0001883a 	nop
            case OS_EVENT_TYPE_FLAG:
            default:           
                *perr = OS_ERR_EVENT_TYPE;
                 return (0);
        }
        pevents++;
    ff28:	e0bfef17 	ldw	r2,-68(fp)
    ff2c:	10800104 	addi	r2,r2,4
    ff30:	e0bfef15 	stw	r2,-68(fp)
        pevent = *pevents;
    ff34:	e0bfef17 	ldw	r2,-68(fp)
    ff38:	10800017 	ldw	r2,0(r2)
    ff3c:	e0bff015 	stw	r2,-64(fp)

   *pevents_rdy = (OS_EVENT *)0;                        /* Init array to NULL in case of errors        */

    pevents     =  pevents_pend;
    pevent      = *pevents;
    while  (pevent != (OS_EVENT *)0) {
    ff40:	e0bff017 	ldw	r2,-64(fp)
    ff44:	103fe51e 	bne	r2,zero,fedc <__alt_data_end+0xfffdfedc>
        }
        pevents++;
        pevent = *pevents;
    }

    if (OSIntNesting  > 0) {                            /* See if called from ISR ...                  */
    ff48:	d0a73203 	ldbu	r2,-25400(gp)
    ff4c:	10803fcc 	andi	r2,r2,255
    ff50:	10000526 	beq	r2,zero,ff68 <OSEventPendMulti+0x138>
       *perr =  OS_ERR_PEND_ISR;                        /* ... can't PEND from an ISR                  */
    ff54:	e0800217 	ldw	r2,8(fp)
    ff58:	00c00084 	movi	r3,2
    ff5c:	10c00005 	stb	r3,0(r2)
        return (0);
    ff60:	0005883a 	mov	r2,zero
    ff64:	00013106 	br	1042c <OSEventPendMulti+0x5fc>
    }
    if (OSLockNesting > 0) {                            /* See if called with scheduler locked ...     */
    ff68:	d0a72403 	ldbu	r2,-25456(gp)
    ff6c:	10803fcc 	andi	r2,r2,255
    ff70:	10000526 	beq	r2,zero,ff88 <OSEventPendMulti+0x158>
       *perr =  OS_ERR_PEND_LOCKED;                     /* ... can't PEND when locked                  */
    ff74:	e0800217 	ldw	r2,8(fp)
    ff78:	00c00344 	movi	r3,13
    ff7c:	10c00005 	stb	r3,0(r2)
        return (0);
    ff80:	0005883a 	mov	r2,zero
    ff84:	00012906 	br	1042c <OSEventPendMulti+0x5fc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    ff88:	0005303a 	rdctl	r2,status
    ff8c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    ff90:	e0fffb17 	ldw	r3,-20(fp)
    ff94:	00bfff84 	movi	r2,-2
    ff98:	1884703a 	and	r2,r3,r2
    ff9c:	1001703a 	wrctl	status,r2
  
  return context;
    ffa0:	e0bffb17 	ldw	r2,-20(fp)
    }

/*$PAGE*/
    OS_ENTER_CRITICAL();
    ffa4:	e0bff315 	stw	r2,-52(fp)
    events_rdy     =  OS_FALSE;
    ffa8:	e03ff105 	stb	zero,-60(fp)
    events_rdy_nbr =  0;
    ffac:	e03ff18d 	sth	zero,-58(fp)
    events_stat    =  OS_STAT_RDY;
    ffb0:	e03ff205 	stb	zero,-56(fp)
    pevents        =  pevents_pend;
    ffb4:	e0bffc17 	ldw	r2,-16(fp)
    ffb8:	e0bfef15 	stw	r2,-68(fp)
    pevent         = *pevents;
    ffbc:	e0bfef17 	ldw	r2,-68(fp)
    ffc0:	10800017 	ldw	r2,0(r2)
    ffc4:	e0bff015 	stw	r2,-64(fp)
    while (pevent != (OS_EVENT *)0) {                   /* See if any events already available         */
    ffc8:	00008106 	br	101d0 <OSEventPendMulti+0x3a0>
        switch (pevent->OSEventType) {
    ffcc:	e0bff017 	ldw	r2,-64(fp)
    ffd0:	10800003 	ldbu	r2,0(r2)
    ffd4:	10803fcc 	andi	r2,r2,255
    ffd8:	10c000a0 	cmpeqi	r3,r2,2
    ffdc:	18003c1e 	bne	r3,zero,100d0 <OSEventPendMulti+0x2a0>
    ffe0:	10c000e0 	cmpeqi	r3,r2,3
    ffe4:	1800031e 	bne	r3,zero,fff4 <OSEventPendMulti+0x1c4>
    ffe8:	10800060 	cmpeqi	r2,r2,1
    ffec:	10001e1e 	bne	r2,zero,10068 <OSEventPendMulti+0x238>
    fff0:	00006606 	br	1018c <OSEventPendMulti+0x35c>
#if (OS_SEM_EN > 0)
            case OS_EVENT_TYPE_SEM:
                 if (pevent->OSEventCnt > 0) {          /* If semaphore count > 0, resource available; */
    fff4:	e0bff017 	ldw	r2,-64(fp)
    fff8:	1080020b 	ldhu	r2,8(r2)
    fffc:	10bfffcc 	andi	r2,r2,65535
   10000:	10001526 	beq	r2,zero,10058 <OSEventPendMulti+0x228>
                     pevent->OSEventCnt--;              /* ... decrement semaphore,                ... */
   10004:	e0bff017 	ldw	r2,-64(fp)
   10008:	1080020b 	ldhu	r2,8(r2)
   1000c:	10bfffc4 	addi	r2,r2,-1
   10010:	1007883a 	mov	r3,r2
   10014:	e0bff017 	ldw	r2,-64(fp)
   10018:	10c0020d 	sth	r3,8(r2)
                    *pevents_rdy++ =  pevent;           /* ... and return available semaphore event    */
   1001c:	e0bffd17 	ldw	r2,-12(fp)
   10020:	10c00104 	addi	r3,r2,4
   10024:	e0fffd15 	stw	r3,-12(fp)
   10028:	e0fff017 	ldw	r3,-64(fp)
   1002c:	10c00015 	stw	r3,0(r2)
                      events_rdy   =  OS_TRUE;
   10030:	00800044 	movi	r2,1
   10034:	e0bff105 	stb	r2,-60(fp)
                    *pmsgs_rdy++   = (void *)0;         /* NO message returned  for semaphores         */
   10038:	e0bffe17 	ldw	r2,-8(fp)
   1003c:	10c00104 	addi	r3,r2,4
   10040:	e0fffe15 	stw	r3,-8(fp)
   10044:	10000015 	stw	zero,0(r2)
                      events_rdy_nbr++;
   10048:	e0bff18b 	ldhu	r2,-58(fp)
   1004c:	10800044 	addi	r2,r2,1
   10050:	e0bff18d 	sth	r2,-58(fp)

                 } else {
                      events_stat |=  OS_STAT_SEM;      /* Configure multi-pend for semaphore events   */
                 }
                 break;
   10054:	00005806 	br	101b8 <OSEventPendMulti+0x388>
                      events_rdy   =  OS_TRUE;
                    *pmsgs_rdy++   = (void *)0;         /* NO message returned  for semaphores         */
                      events_rdy_nbr++;

                 } else {
                      events_stat |=  OS_STAT_SEM;      /* Configure multi-pend for semaphore events   */
   10058:	e0bff203 	ldbu	r2,-56(fp)
   1005c:	10800054 	ori	r2,r2,1
   10060:	e0bff205 	stb	r2,-56(fp)
                 }
                 break;
   10064:	00005406 	br	101b8 <OSEventPendMulti+0x388>
#endif

#if (OS_MBOX_EN > 0)
            case OS_EVENT_TYPE_MBOX:
                 if (pevent->OSEventPtr != (void *)0) { /* If mailbox NOT empty;                   ... */
   10068:	e0bff017 	ldw	r2,-64(fp)
   1006c:	10800117 	ldw	r2,4(r2)
   10070:	10001326 	beq	r2,zero,100c0 <OSEventPendMulti+0x290>
                                                        /* ... return available message,           ... */
                    *pmsgs_rdy++         = (void *)pevent->OSEventPtr;
   10074:	e0bffe17 	ldw	r2,-8(fp)
   10078:	10c00104 	addi	r3,r2,4
   1007c:	e0fffe15 	stw	r3,-8(fp)
   10080:	e0fff017 	ldw	r3,-64(fp)
   10084:	18c00117 	ldw	r3,4(r3)
   10088:	10c00015 	stw	r3,0(r2)
                     pevent->OSEventPtr  = (void *)0;
   1008c:	e0bff017 	ldw	r2,-64(fp)
   10090:	10000115 	stw	zero,4(r2)
                    *pevents_rdy++       =  pevent;     /* ... and return available mailbox event      */
   10094:	e0bffd17 	ldw	r2,-12(fp)
   10098:	10c00104 	addi	r3,r2,4
   1009c:	e0fffd15 	stw	r3,-12(fp)
   100a0:	e0fff017 	ldw	r3,-64(fp)
   100a4:	10c00015 	stw	r3,0(r2)
                      events_rdy         =  OS_TRUE;
   100a8:	00800044 	movi	r2,1
   100ac:	e0bff105 	stb	r2,-60(fp)
                      events_rdy_nbr++;
   100b0:	e0bff18b 	ldhu	r2,-58(fp)
   100b4:	10800044 	addi	r2,r2,1
   100b8:	e0bff18d 	sth	r2,-58(fp)

                 } else {
                      events_stat |= OS_STAT_MBOX;      /* Configure multi-pend for mailbox events     */
                 }
                 break;
   100bc:	00003e06 	br	101b8 <OSEventPendMulti+0x388>
                    *pevents_rdy++       =  pevent;     /* ... and return available mailbox event      */
                      events_rdy         =  OS_TRUE;
                      events_rdy_nbr++;

                 } else {
                      events_stat |= OS_STAT_MBOX;      /* Configure multi-pend for mailbox events     */
   100c0:	e0bff203 	ldbu	r2,-56(fp)
   100c4:	10800094 	ori	r2,r2,2
   100c8:	e0bff205 	stb	r2,-56(fp)
                 }
                 break;
   100cc:	00003a06 	br	101b8 <OSEventPendMulti+0x388>
#endif

#if ((OS_Q_EN > 0) && (OS_MAX_QS > 0))
            case OS_EVENT_TYPE_Q:
                 pq = (OS_Q *)pevent->OSEventPtr;
   100d0:	e0bff017 	ldw	r2,-64(fp)
   100d4:	10800117 	ldw	r2,4(r2)
   100d8:	e0bff515 	stw	r2,-44(fp)
                 if (pq->OSQEntries > 0) {              /* If queue NOT empty;                     ... */
   100dc:	e0bff517 	ldw	r2,-44(fp)
   100e0:	1080058b 	ldhu	r2,22(r2)
   100e4:	10bfffcc 	andi	r2,r2,65535
   100e8:	10002426 	beq	r2,zero,1017c <OSEventPendMulti+0x34c>
                                                        /* ... return available message,           ... */
                    *pmsgs_rdy++ = (void *)*pq->OSQOut++;
   100ec:	e0bffe17 	ldw	r2,-8(fp)
   100f0:	10c00104 	addi	r3,r2,4
   100f4:	e0fffe15 	stw	r3,-8(fp)
   100f8:	e0fff517 	ldw	r3,-44(fp)
   100fc:	18c00417 	ldw	r3,16(r3)
   10100:	19400104 	addi	r5,r3,4
   10104:	e13ff517 	ldw	r4,-44(fp)
   10108:	21400415 	stw	r5,16(r4)
   1010c:	18c00017 	ldw	r3,0(r3)
   10110:	10c00015 	stw	r3,0(r2)
                     if (pq->OSQOut == pq->OSQEnd) {    /* If OUT ptr at queue end, ...                */
   10114:	e0bff517 	ldw	r2,-44(fp)
   10118:	10c00417 	ldw	r3,16(r2)
   1011c:	e0bff517 	ldw	r2,-44(fp)
   10120:	10800217 	ldw	r2,8(r2)
   10124:	1880041e 	bne	r3,r2,10138 <OSEventPendMulti+0x308>
                         pq->OSQOut  = pq->OSQStart;    /* ... wrap   to queue start                   */
   10128:	e0bff517 	ldw	r2,-44(fp)
   1012c:	10c00117 	ldw	r3,4(r2)
   10130:	e0bff517 	ldw	r2,-44(fp)
   10134:	10c00415 	stw	r3,16(r2)
                     }
                     pq->OSQEntries--;                  /* Update number of queue entries              */
   10138:	e0bff517 	ldw	r2,-44(fp)
   1013c:	1080058b 	ldhu	r2,22(r2)
   10140:	10bfffc4 	addi	r2,r2,-1
   10144:	1007883a 	mov	r3,r2
   10148:	e0bff517 	ldw	r2,-44(fp)
   1014c:	10c0058d 	sth	r3,22(r2)
                    *pevents_rdy++ = pevent;            /* ... and return available queue event        */
   10150:	e0bffd17 	ldw	r2,-12(fp)
   10154:	10c00104 	addi	r3,r2,4
   10158:	e0fffd15 	stw	r3,-12(fp)
   1015c:	e0fff017 	ldw	r3,-64(fp)
   10160:	10c00015 	stw	r3,0(r2)
                      events_rdy   = OS_TRUE;
   10164:	00800044 	movi	r2,1
   10168:	e0bff105 	stb	r2,-60(fp)
                      events_rdy_nbr++;
   1016c:	e0bff18b 	ldhu	r2,-58(fp)
   10170:	10800044 	addi	r2,r2,1
   10174:	e0bff18d 	sth	r2,-58(fp)

                 } else {
                      events_stat |= OS_STAT_Q;         /* Configure multi-pend for queue events       */
                 }
                 break;
   10178:	00000f06 	br	101b8 <OSEventPendMulti+0x388>
                    *pevents_rdy++ = pevent;            /* ... and return available queue event        */
                      events_rdy   = OS_TRUE;
                      events_rdy_nbr++;

                 } else {
                      events_stat |= OS_STAT_Q;         /* Configure multi-pend for queue events       */
   1017c:	e0bff203 	ldbu	r2,-56(fp)
   10180:	10800114 	ori	r2,r2,4
   10184:	e0bff205 	stb	r2,-56(fp)
                 }
                 break;
   10188:	00000b06 	br	101b8 <OSEventPendMulti+0x388>
   1018c:	e0bff317 	ldw	r2,-52(fp)
   10190:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   10194:	e0bff417 	ldw	r2,-48(fp)
   10198:	1001703a 	wrctl	status,r2

            case OS_EVENT_TYPE_MUTEX:                                            
            case OS_EVENT_TYPE_FLAG:
            default:           
                 OS_EXIT_CRITICAL();
                *pevents_rdy = (OS_EVENT *)0;           /* NULL terminate return event array           */
   1019c:	e0bffd17 	ldw	r2,-12(fp)
   101a0:	10000015 	stw	zero,0(r2)
                *perr        =  OS_ERR_EVENT_TYPE;
   101a4:	e0800217 	ldw	r2,8(fp)
   101a8:	00c00044 	movi	r3,1
   101ac:	10c00005 	stb	r3,0(r2)
                 return (events_rdy_nbr);
   101b0:	e0bff18b 	ldhu	r2,-58(fp)
   101b4:	00009d06 	br	1042c <OSEventPendMulti+0x5fc>
        }
        pevents++;
   101b8:	e0bfef17 	ldw	r2,-68(fp)
   101bc:	10800104 	addi	r2,r2,4
   101c0:	e0bfef15 	stw	r2,-68(fp)
        pevent = *pevents;
   101c4:	e0bfef17 	ldw	r2,-68(fp)
   101c8:	10800017 	ldw	r2,0(r2)
   101cc:	e0bff015 	stw	r2,-64(fp)
    events_rdy     =  OS_FALSE;
    events_rdy_nbr =  0;
    events_stat    =  OS_STAT_RDY;
    pevents        =  pevents_pend;
    pevent         = *pevents;
    while (pevent != (OS_EVENT *)0) {                   /* See if any events already available         */
   101d0:	e0bff017 	ldw	r2,-64(fp)
   101d4:	103f7d1e 	bne	r2,zero,ffcc <__alt_data_end+0xfffdffcc>
        }
        pevents++;
        pevent = *pevents;
    }

    if ( events_rdy == OS_TRUE) {                       /* Return any events already available         */
   101d8:	e0bff103 	ldbu	r2,-60(fp)
   101dc:	10800058 	cmpnei	r2,r2,1
   101e0:	10000a1e 	bne	r2,zero,1020c <OSEventPendMulti+0x3dc>
       *pevents_rdy = (OS_EVENT *)0;                    /* NULL terminate return event array           */
   101e4:	e0bffd17 	ldw	r2,-12(fp)
   101e8:	10000015 	stw	zero,0(r2)
   101ec:	e0bff317 	ldw	r2,-52(fp)
   101f0:	e0bff615 	stw	r2,-40(fp)
   101f4:	e0bff617 	ldw	r2,-40(fp)
   101f8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
       *perr        =  OS_ERR_NONE;
   101fc:	e0800217 	ldw	r2,8(fp)
   10200:	10000005 	stb	zero,0(r2)
        return (events_rdy_nbr);
   10204:	e0bff18b 	ldhu	r2,-58(fp)
   10208:	00008806 	br	1042c <OSEventPendMulti+0x5fc>
    }
/*$PAGE*/
                                                        /* Otherwise, must wait until any event occurs */
    OSTCBCur->OSTCBStat     |= events_stat  |           /* Resource not available, ...                 */
   1020c:	d0a73317 	ldw	r2,-25396(gp)
   10210:	d0e73317 	ldw	r3,-25396(gp)
   10214:	19000c03 	ldbu	r4,48(r3)
   10218:	e0fff203 	ldbu	r3,-56(fp)
   1021c:	20c6b03a 	or	r3,r4,r3
   10220:	1809883a 	mov	r4,r3
   10224:	00ffe004 	movi	r3,-128
   10228:	20c6b03a 	or	r3,r4,r3
   1022c:	10c00c05 	stb	r3,48(r2)
                               OS_STAT_MULTI;           /* ... pend on multiple events                 */
    OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
   10230:	d0a73317 	ldw	r2,-25396(gp)
   10234:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly       = timeout;                 /* Store pend timeout in TCB                   */
   10238:	d0a73317 	ldw	r2,-25396(gp)
   1023c:	e0ffff0b 	ldhu	r3,-4(fp)
   10240:	10c00b8d 	sth	r3,46(r2)
    OS_EventTaskWaitMulti(pevents_pend);                /* Suspend task until events or timeout occurs */
   10244:	e13ffc17 	ldw	r4,-16(fp)
   10248:	0010d6c0 	call	10d6c <OS_EventTaskWaitMulti>
   1024c:	e0bff317 	ldw	r2,-52(fp)
   10250:	e0bff915 	stw	r2,-28(fp)
   10254:	e0bff917 	ldw	r2,-28(fp)
   10258:	1001703a 	wrctl	status,r2

    OS_EXIT_CRITICAL();
    OS_Sched();                                         /* Find next highest priority task ready       */
   1025c:	00115100 	call	11510 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   10260:	0005303a 	rdctl	r2,status
   10264:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   10268:	e0fff717 	ldw	r3,-36(fp)
   1026c:	00bfff84 	movi	r2,-2
   10270:	1884703a 	and	r2,r3,r2
   10274:	1001703a 	wrctl	status,r2
  
  return context;
   10278:	e0bff717 	ldw	r2,-36(fp)
    OS_ENTER_CRITICAL();
   1027c:	e0bff315 	stw	r2,-52(fp)

    switch (OSTCBCur->OSTCBStatPend) {                  /* Handle event posted, aborted, or timed-out  */
   10280:	d0a73317 	ldw	r2,-25396(gp)
   10284:	10800c43 	ldbu	r2,49(r2)
   10288:	10803fcc 	andi	r2,r2,255
   1028c:	10000226 	beq	r2,zero,10298 <OSEventPendMulti+0x468>
   10290:	108000a0 	cmpeqi	r2,r2,2
   10294:	10001826 	beq	r2,zero,102f8 <OSEventPendMulti+0x4c8>
        case OS_STAT_PEND_OK:
        case OS_STAT_PEND_ABORT:
             pevent = OSTCBCur->OSTCBEventPtr;
   10298:	d0a73317 	ldw	r2,-25396(gp)
   1029c:	10800717 	ldw	r2,28(r2)
   102a0:	e0bff015 	stw	r2,-64(fp)
             if (pevent != (OS_EVENT *)0) {             /* If task event ptr != NULL, ...              */
   102a4:	e0bff017 	ldw	r2,-64(fp)
   102a8:	10000b26 	beq	r2,zero,102d8 <OSEventPendMulti+0x4a8>
                *pevents_rdy++ =  pevent;               /* ... return available event ...              */
   102ac:	e0bffd17 	ldw	r2,-12(fp)
   102b0:	10c00104 	addi	r3,r2,4
   102b4:	e0fffd15 	stw	r3,-12(fp)
   102b8:	e0fff017 	ldw	r3,-64(fp)
   102bc:	10c00015 	stw	r3,0(r2)
                *pevents_rdy   = (OS_EVENT *)0;         /* ... & NULL terminate return event array     */
   102c0:	e0bffd17 	ldw	r2,-12(fp)
   102c4:	10000015 	stw	zero,0(r2)
                  events_rdy_nbr++;
   102c8:	e0bff18b 	ldhu	r2,-58(fp)
   102cc:	10800044 	addi	r2,r2,1
   102d0:	e0bff18d 	sth	r2,-58(fp)

             } else {                                   /* Else NO event available, handle as timeout  */
                 OSTCBCur->OSTCBStatPend = OS_STAT_PEND_TO;
                 OS_EventTaskRemoveMulti(OSTCBCur, pevents_pend);
             }
			 break;
   102d4:	00000d06 	br	1030c <OSEventPendMulti+0x4dc>
                *pevents_rdy++ =  pevent;               /* ... return available event ...              */
                *pevents_rdy   = (OS_EVENT *)0;         /* ... & NULL terminate return event array     */
                  events_rdy_nbr++;

             } else {                                   /* Else NO event available, handle as timeout  */
                 OSTCBCur->OSTCBStatPend = OS_STAT_PEND_TO;
   102d8:	d0a73317 	ldw	r2,-25396(gp)
   102dc:	00c00044 	movi	r3,1
   102e0:	10c00c45 	stb	r3,49(r2)
                 OS_EventTaskRemoveMulti(OSTCBCur, pevents_pend);
   102e4:	d0a73317 	ldw	r2,-25396(gp)
   102e8:	e17ffc17 	ldw	r5,-16(fp)
   102ec:	1009883a 	mov	r4,r2
   102f0:	0010f740 	call	10f74 <OS_EventTaskRemoveMulti>
             }
			 break;
   102f4:	00000506 	br	1030c <OSEventPendMulti+0x4dc>

        case OS_STAT_PEND_TO:
        default:                                        /* ... remove task from events' wait lists     */
             OS_EventTaskRemoveMulti(OSTCBCur, pevents_pend);
   102f8:	d0a73317 	ldw	r2,-25396(gp)
   102fc:	e17ffc17 	ldw	r5,-16(fp)
   10300:	1009883a 	mov	r4,r2
   10304:	0010f740 	call	10f74 <OS_EventTaskRemoveMulti>
             break;
   10308:	0001883a 	nop
    }

    switch (OSTCBCur->OSTCBStatPend) {
   1030c:	d0a73317 	ldw	r2,-25396(gp)
   10310:	10800c43 	ldbu	r2,49(r2)
   10314:	10803fcc 	andi	r2,r2,255
   10318:	10000326 	beq	r2,zero,10328 <OSEventPendMulti+0x4f8>
   1031c:	108000a0 	cmpeqi	r2,r2,2
   10320:	1000231e 	bne	r2,zero,103b0 <OSEventPendMulti+0x580>
   10324:	00002a06 	br	103d0 <OSEventPendMulti+0x5a0>
        case OS_STAT_PEND_OK:
             switch (pevent->OSEventType) {             /* Return event's message                      */
   10328:	e0bff017 	ldw	r2,-64(fp)
   1032c:	10800003 	ldbu	r2,0(r2)
   10330:	10803fcc 	andi	r2,r2,255
   10334:	0080100e 	bge	zero,r2,10378 <OSEventPendMulti+0x548>
   10338:	10c000d0 	cmplti	r3,r2,3
   1033c:	1800071e 	bne	r3,zero,1035c <OSEventPendMulti+0x52c>
   10340:	108000e0 	cmpeqi	r2,r2,3
   10344:	10000c26 	beq	r2,zero,10378 <OSEventPendMulti+0x548>
#if (OS_SEM_EN > 0)
                 case OS_EVENT_TYPE_SEM:
                     *pmsgs_rdy++ = (void *)0;          /* NO message returned for semaphores          */
   10348:	e0bffe17 	ldw	r2,-8(fp)
   1034c:	10c00104 	addi	r3,r2,4
   10350:	e0fffe15 	stw	r3,-8(fp)
   10354:	10000015 	stw	zero,0(r2)
                      break;
   10358:	00001206 	br	103a4 <OSEventPendMulti+0x574>

#if ((OS_MBOX_EN > 0) ||                 \
    ((OS_Q_EN    > 0) && (OS_MAX_QS > 0)))
                 case OS_EVENT_TYPE_MBOX:
                 case OS_EVENT_TYPE_Q:
                     *pmsgs_rdy++ = (void *)OSTCBCur->OSTCBMsg;     /* Return received message         */
   1035c:	e0bffe17 	ldw	r2,-8(fp)
   10360:	10c00104 	addi	r3,r2,4
   10364:	e0fffe15 	stw	r3,-8(fp)
   10368:	d0e73317 	ldw	r3,-25396(gp)
   1036c:	18c00917 	ldw	r3,36(r3)
   10370:	10c00015 	stw	r3,0(r2)
                      break;
   10374:	00000b06 	br	103a4 <OSEventPendMulti+0x574>
   10378:	e0bff317 	ldw	r2,-52(fp)
   1037c:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   10380:	e0bff817 	ldw	r2,-32(fp)
   10384:	1001703a 	wrctl	status,r2

                 case OS_EVENT_TYPE_MUTEX:                                       
                 case OS_EVENT_TYPE_FLAG:
                 default:           
                      OS_EXIT_CRITICAL();
                     *pevents_rdy = (OS_EVENT *)0;      /* NULL terminate return event array           */
   10388:	e0bffd17 	ldw	r2,-12(fp)
   1038c:	10000015 	stw	zero,0(r2)
                     *perr        =  OS_ERR_EVENT_TYPE;
   10390:	e0800217 	ldw	r2,8(fp)
   10394:	00c00044 	movi	r3,1
   10398:	10c00005 	stb	r3,0(r2)
                      return (events_rdy_nbr);
   1039c:	e0bff18b 	ldhu	r2,-58(fp)
   103a0:	00002206 	br	1042c <OSEventPendMulti+0x5fc>
             }
            *perr = OS_ERR_NONE;
   103a4:	e0800217 	ldw	r2,8(fp)
   103a8:	10000005 	stb	zero,0(r2)
             break;
   103ac:	00001006 	br	103f0 <OSEventPendMulti+0x5c0>

        case OS_STAT_PEND_ABORT:
            *pmsgs_rdy++ = (void *)0;                   /* NO message returned for abort               */
   103b0:	e0bffe17 	ldw	r2,-8(fp)
   103b4:	10c00104 	addi	r3,r2,4
   103b8:	e0fffe15 	stw	r3,-8(fp)
   103bc:	10000015 	stw	zero,0(r2)
            *perr        =  OS_ERR_PEND_ABORT;          /* Indicate that event  aborted                */
   103c0:	e0800217 	ldw	r2,8(fp)
   103c4:	00c00384 	movi	r3,14
   103c8:	10c00005 	stb	r3,0(r2)
             break;
   103cc:	00000806 	br	103f0 <OSEventPendMulti+0x5c0>
                                                        
        case OS_STAT_PEND_TO:                                                
        default:        
            *pmsgs_rdy++ = (void *)0;                   /* NO message returned for timeout             */
   103d0:	e0bffe17 	ldw	r2,-8(fp)
   103d4:	10c00104 	addi	r3,r2,4
   103d8:	e0fffe15 	stw	r3,-8(fp)
   103dc:	10000015 	stw	zero,0(r2)
            *perr        =  OS_ERR_TIMEOUT;             /* Indicate that events timed out              */
   103e0:	e0800217 	ldw	r2,8(fp)
   103e4:	00c00284 	movi	r3,10
   103e8:	10c00005 	stb	r3,0(r2)
             break;
   103ec:	0001883a 	nop
    }

    OSTCBCur->OSTCBStat          =  OS_STAT_RDY;        /* Set   task  status to ready                 */
   103f0:	d0a73317 	ldw	r2,-25396(gp)
   103f4:	10000c05 	stb	zero,48(r2)
    OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;    /* Clear pend  status                          */
   103f8:	d0a73317 	ldw	r2,-25396(gp)
   103fc:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;      /* Clear event pointers                        */
   10400:	d0a73317 	ldw	r2,-25396(gp)
   10404:	10000715 	stw	zero,28(r2)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
   10408:	d0a73317 	ldw	r2,-25396(gp)
   1040c:	10000815 	stw	zero,32(r2)
    OSTCBCur->OSTCBMsg           = (void      *)0;      /* Clear task  message                         */
   10410:	d0a73317 	ldw	r2,-25396(gp)
   10414:	10000915 	stw	zero,36(r2)
   10418:	e0bff317 	ldw	r2,-52(fp)
   1041c:	e0bffa15 	stw	r2,-24(fp)
   10420:	e0bffa17 	ldw	r2,-24(fp)
   10424:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();

    return (events_rdy_nbr);
   10428:	e0bff18b 	ldhu	r2,-58(fp)
}
   1042c:	e037883a 	mov	sp,fp
   10430:	dfc00117 	ldw	ra,4(sp)
   10434:	df000017 	ldw	fp,0(sp)
   10438:	dec00204 	addi	sp,sp,8
   1043c:	f800283a 	ret

00010440 <OSInit>:
* Returns    : none
*********************************************************************************************************
*/

void  OSInit (void)
{
   10440:	defffe04 	addi	sp,sp,-8
   10444:	dfc00115 	stw	ra,4(sp)
   10448:	df000015 	stw	fp,0(sp)
   1044c:	d839883a 	mov	fp,sp
    OSInitHookBegin();                                           /* Call port specific initialization code   */
   10450:	0018e440 	call	18e44 <OSInitHookBegin>

    OS_InitMisc();                                               /* Initialize miscellaneous variables       */
   10454:	00111bc0 	call	111bc <OS_InitMisc>

    OS_InitRdyList();                                            /* Initialize the Ready List                */
   10458:	00112040 	call	11204 <OS_InitRdyList>

    OS_InitTCBList();                                            /* Initialize the free list of OS_TCBs      */
   1045c:	00113700 	call	11370 <OS_InitTCBList>

    OS_InitEventList();                                          /* Initialize the free list of OS_EVENTs    */
   10460:	00110dc0 	call	110dc <OS_InitEventList>

#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0)
    OS_FlagInit();                                               /* Initialize the event flag structures     */
   10464:	00132100 	call	13210 <OS_FlagInit>
#endif

#if (OS_MEM_EN > 0) && (OS_MAX_MEM_PART > 0)
    OS_MemInit();                                                /* Initialize the memory manager            */
   10468:	0013b100 	call	13b10 <OS_MemInit>
#endif

#if (OS_Q_EN > 0) && (OS_MAX_QS > 0)
    OS_QInit();                                                  /* Initialize the message queue structures  */
   1046c:	0014c440 	call	14c44 <OS_QInit>
#endif

    OS_InitTaskIdle();                                           /* Create the Idle Task                     */
   10470:	00112700 	call	11270 <OS_InitTaskIdle>
#if OS_TASK_STAT_EN > 0
    OS_InitTaskStat();                                           /* Create the Statistic Task                */
   10474:	00112f00 	call	112f0 <OS_InitTaskStat>

#if OS_TMR_EN > 0
    OSTmr_Init();                                                /* Initialize the Timer Manager             */
#endif

    OSInitHookEnd();                                             /* Call port specific init. code            */
   10478:	0018e640 	call	18e64 <OSInitHookEnd>

#if OS_DEBUG_EN > 0
    OSDebugInit();
   1047c:	0011be40 	call	11be4 <OSDebugInit>
#endif
}
   10480:	0001883a 	nop
   10484:	e037883a 	mov	sp,fp
   10488:	dfc00117 	ldw	ra,4(sp)
   1048c:	df000017 	ldw	fp,0(sp)
   10490:	dec00204 	addi	sp,sp,8
   10494:	f800283a 	ret

00010498 <OSIntEnter>:
*              5) You are allowed to nest interrupts up to 255 levels deep.
*********************************************************************************************************
*/

void  OSIntEnter (void)
{
   10498:	deffff04 	addi	sp,sp,-4
   1049c:	df000015 	stw	fp,0(sp)
   104a0:	d839883a 	mov	fp,sp
    if (OSRunning == OS_TRUE) {
   104a4:	d0a72443 	ldbu	r2,-25455(gp)
   104a8:	10803fcc 	andi	r2,r2,255
   104ac:	10800058 	cmpnei	r2,r2,1
   104b0:	1000071e 	bne	r2,zero,104d0 <OSIntEnter+0x38>
        if (OSIntNesting < 255u) {
   104b4:	d0a73203 	ldbu	r2,-25400(gp)
   104b8:	10803fcc 	andi	r2,r2,255
   104bc:	10803fe0 	cmpeqi	r2,r2,255
   104c0:	1000031e 	bne	r2,zero,104d0 <OSIntEnter+0x38>
            OSIntNesting++;                      /* Increment ISR nesting level                        */
   104c4:	d0a73203 	ldbu	r2,-25400(gp)
   104c8:	10800044 	addi	r2,r2,1
   104cc:	d0a73205 	stb	r2,-25400(gp)
        }
    }
}
   104d0:	0001883a 	nop
   104d4:	e037883a 	mov	sp,fp
   104d8:	df000017 	ldw	fp,0(sp)
   104dc:	dec00104 	addi	sp,sp,4
   104e0:	f800283a 	ret

000104e4 <OSIntExit>:
*              2) Rescheduling is prevented when the scheduler is locked (see OS_SchedLock())
*********************************************************************************************************
*/

void  OSIntExit (void)
{
   104e4:	defffb04 	addi	sp,sp,-20
   104e8:	dfc00415 	stw	ra,16(sp)
   104ec:	df000315 	stw	fp,12(sp)
   104f0:	df000304 	addi	fp,sp,12
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
   104f4:	e03ffd15 	stw	zero,-12(fp)
#endif



    if (OSRunning == OS_TRUE) {
   104f8:	d0a72443 	ldbu	r2,-25455(gp)
   104fc:	10803fcc 	andi	r2,r2,255
   10500:	10800058 	cmpnei	r2,r2,1
   10504:	10002f1e 	bne	r2,zero,105c4 <OSIntExit+0xe0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   10508:	0005303a 	rdctl	r2,status
   1050c:	e0bfff15 	stw	r2,-4(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   10510:	e0ffff17 	ldw	r3,-4(fp)
   10514:	00bfff84 	movi	r2,-2
   10518:	1884703a 	and	r2,r3,r2
   1051c:	1001703a 	wrctl	status,r2
  
  return context;
   10520:	e0bfff17 	ldw	r2,-4(fp)
        OS_ENTER_CRITICAL();
   10524:	e0bffd15 	stw	r2,-12(fp)
        if (OSIntNesting > 0) {                            /* Prevent OSIntNesting from wrapping       */
   10528:	d0a73203 	ldbu	r2,-25400(gp)
   1052c:	10803fcc 	andi	r2,r2,255
   10530:	10000326 	beq	r2,zero,10540 <OSIntExit+0x5c>
            OSIntNesting--;
   10534:	d0a73203 	ldbu	r2,-25400(gp)
   10538:	10bfffc4 	addi	r2,r2,-1
   1053c:	d0a73205 	stb	r2,-25400(gp)
        }
        if (OSIntNesting == 0) {                           /* Reschedule only if all ISRs complete ... */
   10540:	d0a73203 	ldbu	r2,-25400(gp)
   10544:	10803fcc 	andi	r2,r2,255
   10548:	10001a1e 	bne	r2,zero,105b4 <OSIntExit+0xd0>
            if (OSLockNesting == 0) {                      /* ... and not locked.                      */
   1054c:	d0a72403 	ldbu	r2,-25456(gp)
   10550:	10803fcc 	andi	r2,r2,255
   10554:	1000171e 	bne	r2,zero,105b4 <OSIntExit+0xd0>
                OS_SchedNew();
   10558:	00115e00 	call	115e0 <OS_SchedNew>
                if (OSPrioHighRdy != OSPrioCur) {          /* No Ctx Sw if current task is highest rdy */
   1055c:	d0e72603 	ldbu	r3,-25448(gp)
   10560:	d0a72643 	ldbu	r2,-25447(gp)
   10564:	18c03fcc 	andi	r3,r3,255
   10568:	10803fcc 	andi	r2,r2,255
   1056c:	18801126 	beq	r3,r2,105b4 <OSIntExit+0xd0>
                    OSTCBHighRdy  = OSTCBPrioTbl[OSPrioHighRdy];
   10570:	d0a72603 	ldbu	r2,-25448(gp)
   10574:	10c03fcc 	andi	r3,r2,255
   10578:	008000b4 	movhi	r2,2
   1057c:	10893404 	addi	r2,r2,9424
   10580:	18c7883a 	add	r3,r3,r3
   10584:	18c7883a 	add	r3,r3,r3
   10588:	10c5883a 	add	r2,r2,r3
   1058c:	10800017 	ldw	r2,0(r2)
   10590:	d0a72e15 	stw	r2,-25416(gp)
#if OS_TASK_PROFILE_EN > 0
                    OSTCBHighRdy->OSTCBCtxSwCtr++;         /* Inc. # of context switches to this task  */
   10594:	d0a72e17 	ldw	r2,-25416(gp)
   10598:	10c00e17 	ldw	r3,56(r2)
   1059c:	18c00044 	addi	r3,r3,1
   105a0:	10c00e15 	stw	r3,56(r2)
#endif
                    OSCtxSwCtr++;                          /* Keep track of the number of ctx switches */
   105a4:	d0a72917 	ldw	r2,-25436(gp)
   105a8:	10800044 	addi	r2,r2,1
   105ac:	d0a72915 	stw	r2,-25436(gp)
                    OSIntCtxSw();                          /* Perform interrupt level ctx switch       */
   105b0:	0018b700 	call	18b70 <OSCtxSw>
   105b4:	e0bffd17 	ldw	r2,-12(fp)
   105b8:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   105bc:	e0bffe17 	ldw	r2,-8(fp)
   105c0:	1001703a 	wrctl	status,r2
                }
            }
        }
        OS_EXIT_CRITICAL();
    }
}
   105c4:	0001883a 	nop
   105c8:	e037883a 	mov	sp,fp
   105cc:	dfc00117 	ldw	ra,4(sp)
   105d0:	df000017 	ldw	fp,0(sp)
   105d4:	dec00204 	addi	sp,sp,8
   105d8:	f800283a 	ret

000105dc <OSSchedLock>:
*********************************************************************************************************
*/

#if OS_SCHED_LOCK_EN > 0
void  OSSchedLock (void)
{
   105dc:	defffc04 	addi	sp,sp,-16
   105e0:	df000315 	stw	fp,12(sp)
   105e4:	df000304 	addi	fp,sp,12
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   105e8:	e03ffd15 	stw	zero,-12(fp)
#endif



    if (OSRunning == OS_TRUE) {                  /* Make sure multitasking is running                  */
   105ec:	d0a72443 	ldbu	r2,-25455(gp)
   105f0:	10803fcc 	andi	r2,r2,255
   105f4:	10800058 	cmpnei	r2,r2,1
   105f8:	1000161e 	bne	r2,zero,10654 <OSSchedLock+0x78>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   105fc:	0005303a 	rdctl	r2,status
   10600:	e0bfff15 	stw	r2,-4(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   10604:	e0ffff17 	ldw	r3,-4(fp)
   10608:	00bfff84 	movi	r2,-2
   1060c:	1884703a 	and	r2,r3,r2
   10610:	1001703a 	wrctl	status,r2
  
  return context;
   10614:	e0bfff17 	ldw	r2,-4(fp)
        OS_ENTER_CRITICAL();
   10618:	e0bffd15 	stw	r2,-12(fp)
        if (OSIntNesting == 0) {                 /* Can't call from an ISR                             */
   1061c:	d0a73203 	ldbu	r2,-25400(gp)
   10620:	10803fcc 	andi	r2,r2,255
   10624:	1000071e 	bne	r2,zero,10644 <OSSchedLock+0x68>
            if (OSLockNesting < 255u) {          /* Prevent OSLockNesting from wrapping back to 0      */
   10628:	d0a72403 	ldbu	r2,-25456(gp)
   1062c:	10803fcc 	andi	r2,r2,255
   10630:	10803fe0 	cmpeqi	r2,r2,255
   10634:	1000031e 	bne	r2,zero,10644 <OSSchedLock+0x68>
                OSLockNesting++;                 /* Increment lock nesting level                       */
   10638:	d0a72403 	ldbu	r2,-25456(gp)
   1063c:	10800044 	addi	r2,r2,1
   10640:	d0a72405 	stb	r2,-25456(gp)
   10644:	e0bffd17 	ldw	r2,-12(fp)
   10648:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1064c:	e0bffe17 	ldw	r2,-8(fp)
   10650:	1001703a 	wrctl	status,r2
            }
        }
        OS_EXIT_CRITICAL();
    }
}
   10654:	0001883a 	nop
   10658:	e037883a 	mov	sp,fp
   1065c:	df000017 	ldw	fp,0(sp)
   10660:	dec00104 	addi	sp,sp,4
   10664:	f800283a 	ret

00010668 <OSSchedUnlock>:
*********************************************************************************************************
*/

#if OS_SCHED_LOCK_EN > 0
void  OSSchedUnlock (void)
{
   10668:	defff804 	addi	sp,sp,-32
   1066c:	dfc00715 	stw	ra,28(sp)
   10670:	df000615 	stw	fp,24(sp)
   10674:	df000604 	addi	fp,sp,24
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
   10678:	e03ffa15 	stw	zero,-24(fp)
#endif



    if (OSRunning == OS_TRUE) {                            /* Make sure multitasking is running        */
   1067c:	d0a72443 	ldbu	r2,-25455(gp)
   10680:	10803fcc 	andi	r2,r2,255
   10684:	10800058 	cmpnei	r2,r2,1
   10688:	1000281e 	bne	r2,zero,1072c <OSSchedUnlock+0xc4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1068c:	0005303a 	rdctl	r2,status
   10690:	e0bfff15 	stw	r2,-4(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   10694:	e0ffff17 	ldw	r3,-4(fp)
   10698:	00bfff84 	movi	r2,-2
   1069c:	1884703a 	and	r2,r3,r2
   106a0:	1001703a 	wrctl	status,r2
  
  return context;
   106a4:	e0bfff17 	ldw	r2,-4(fp)
        OS_ENTER_CRITICAL();
   106a8:	e0bffa15 	stw	r2,-24(fp)
        if (OSLockNesting > 0) {                           /* Do not decrement if already 0            */
   106ac:	d0a72403 	ldbu	r2,-25456(gp)
   106b0:	10803fcc 	andi	r2,r2,255
   106b4:	10001926 	beq	r2,zero,1071c <OSSchedUnlock+0xb4>
            OSLockNesting--;                               /* Decrement lock nesting level             */
   106b8:	d0a72403 	ldbu	r2,-25456(gp)
   106bc:	10bfffc4 	addi	r2,r2,-1
   106c0:	d0a72405 	stb	r2,-25456(gp)
            if (OSLockNesting == 0) {                      /* See if scheduler is enabled and ...      */
   106c4:	d0a72403 	ldbu	r2,-25456(gp)
   106c8:	10803fcc 	andi	r2,r2,255
   106cc:	10000e1e 	bne	r2,zero,10708 <OSSchedUnlock+0xa0>
                if (OSIntNesting == 0) {                   /* ... not in an ISR                        */
   106d0:	d0a73203 	ldbu	r2,-25400(gp)
   106d4:	10803fcc 	andi	r2,r2,255
   106d8:	1000061e 	bne	r2,zero,106f4 <OSSchedUnlock+0x8c>
   106dc:	e0bffa17 	ldw	r2,-24(fp)
   106e0:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   106e4:	e0bffb17 	ldw	r2,-20(fp)
   106e8:	1001703a 	wrctl	status,r2
                    OS_EXIT_CRITICAL();
                    OS_Sched();                            /* See if a HPT is ready                    */
   106ec:	00115100 	call	11510 <OS_Sched>
            }
        } else {
            OS_EXIT_CRITICAL();
        }
    }
}
   106f0:	00000e06 	br	1072c <OSSchedUnlock+0xc4>
   106f4:	e0bffa17 	ldw	r2,-24(fp)
   106f8:	e0bffc15 	stw	r2,-16(fp)
   106fc:	e0bffc17 	ldw	r2,-16(fp)
   10700:	1001703a 	wrctl	status,r2
   10704:	00000906 	br	1072c <OSSchedUnlock+0xc4>
   10708:	e0bffa17 	ldw	r2,-24(fp)
   1070c:	e0bffd15 	stw	r2,-12(fp)
   10710:	e0bffd17 	ldw	r2,-12(fp)
   10714:	1001703a 	wrctl	status,r2
   10718:	00000406 	br	1072c <OSSchedUnlock+0xc4>
   1071c:	e0bffa17 	ldw	r2,-24(fp)
   10720:	e0bffe15 	stw	r2,-8(fp)
   10724:	e0bffe17 	ldw	r2,-8(fp)
   10728:	1001703a 	wrctl	status,r2
   1072c:	0001883a 	nop
   10730:	e037883a 	mov	sp,fp
   10734:	dfc00117 	ldw	ra,4(sp)
   10738:	df000017 	ldw	fp,0(sp)
   1073c:	dec00204 	addi	sp,sp,8
   10740:	f800283a 	ret

00010744 <OSStart>:
*                 d_ Execute the task.
*********************************************************************************************************
*/

void  OSStart (void)
{
   10744:	defffe04 	addi	sp,sp,-8
   10748:	dfc00115 	stw	ra,4(sp)
   1074c:	df000015 	stw	fp,0(sp)
   10750:	d839883a 	mov	fp,sp
    if (OSRunning == OS_FALSE) {
   10754:	d0a72443 	ldbu	r2,-25455(gp)
   10758:	10803fcc 	andi	r2,r2,255
   1075c:	10000f1e 	bne	r2,zero,1079c <OSStart+0x58>
        OS_SchedNew();                               /* Find highest priority's task priority number   */
   10760:	00115e00 	call	115e0 <OS_SchedNew>
        OSPrioCur     = OSPrioHighRdy;
   10764:	d0a72603 	ldbu	r2,-25448(gp)
   10768:	d0a72645 	stb	r2,-25447(gp)
        OSTCBHighRdy  = OSTCBPrioTbl[OSPrioHighRdy]; /* Point to highest priority task ready to run    */
   1076c:	d0a72603 	ldbu	r2,-25448(gp)
   10770:	10c03fcc 	andi	r3,r2,255
   10774:	008000b4 	movhi	r2,2
   10778:	10893404 	addi	r2,r2,9424
   1077c:	18c7883a 	add	r3,r3,r3
   10780:	18c7883a 	add	r3,r3,r3
   10784:	10c5883a 	add	r2,r2,r3
   10788:	10800017 	ldw	r2,0(r2)
   1078c:	d0a72e15 	stw	r2,-25416(gp)
        OSTCBCur      = OSTCBHighRdy;
   10790:	d0a72e17 	ldw	r2,-25416(gp)
   10794:	d0a73315 	stw	r2,-25396(gp)
        OSStartHighRdy();                            /* Execute target specific code to start task     */
   10798:	0018bfc0 	call	18bfc <OSStartHighRdy>
    }
}
   1079c:	0001883a 	nop
   107a0:	e037883a 	mov	sp,fp
   107a4:	dfc00117 	ldw	ra,4(sp)
   107a8:	df000017 	ldw	fp,0(sp)
   107ac:	dec00204 	addi	sp,sp,8
   107b0:	f800283a 	ret

000107b4 <OSStatInit>:
*********************************************************************************************************
*/

#if OS_TASK_STAT_EN > 0
void  OSStatInit (void)
{
   107b4:	defff904 	addi	sp,sp,-28
   107b8:	dfc00615 	stw	ra,24(sp)
   107bc:	df000515 	stw	fp,20(sp)
   107c0:	df000504 	addi	fp,sp,20
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   107c4:	e03ffb15 	stw	zero,-20(fp)
#endif



    OSTimeDly(2);                                /* Synchronize with clock tick                        */
   107c8:	01000084 	movi	r4,2
   107cc:	0016eb80 	call	16eb8 <OSTimeDly>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   107d0:	0005303a 	rdctl	r2,status
   107d4:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   107d8:	e0fffc17 	ldw	r3,-16(fp)
   107dc:	00bfff84 	movi	r2,-2
   107e0:	1884703a 	and	r2,r3,r2
   107e4:	1001703a 	wrctl	status,r2
  
  return context;
   107e8:	e0bffc17 	ldw	r2,-16(fp)
    OS_ENTER_CRITICAL();
   107ec:	e0bffb15 	stw	r2,-20(fp)
    OSIdleCtr    = 0L;                           /* Clear idle counter                                 */
   107f0:	d0272515 	stw	zero,-25452(gp)
   107f4:	e0bffb17 	ldw	r2,-20(fp)
   107f8:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   107fc:	e0bffd17 	ldw	r2,-12(fp)
   10800:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OSTimeDly(OS_TICKS_PER_SEC / 10);            /* Determine MAX. idle counter value for 1/10 second  */
   10804:	01001904 	movi	r4,100
   10808:	0016eb80 	call	16eb8 <OSTimeDly>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1080c:	0005303a 	rdctl	r2,status
   10810:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   10814:	e0fffe17 	ldw	r3,-8(fp)
   10818:	00bfff84 	movi	r2,-2
   1081c:	1884703a 	and	r2,r3,r2
   10820:	1001703a 	wrctl	status,r2
  
  return context;
   10824:	e0bffe17 	ldw	r2,-8(fp)
    OS_ENTER_CRITICAL();
   10828:	e0bffb15 	stw	r2,-20(fp)
    OSIdleCtrMax = OSIdleCtr;                    /* Store maximum idle counter count in 1/10 second    */
   1082c:	d0a72517 	ldw	r2,-25452(gp)
   10830:	d0a72a15 	stw	r2,-25432(gp)
    OSStatRdy    = OS_TRUE;
   10834:	00800044 	movi	r2,1
   10838:	d0a73605 	stb	r2,-25384(gp)
   1083c:	e0bffb17 	ldw	r2,-20(fp)
   10840:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   10844:	e0bfff17 	ldw	r2,-4(fp)
   10848:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
}
   1084c:	0001883a 	nop
   10850:	e037883a 	mov	sp,fp
   10854:	dfc00117 	ldw	ra,4(sp)
   10858:	df000017 	ldw	fp,0(sp)
   1085c:	dec00204 	addi	sp,sp,8
   10860:	f800283a 	ret

00010864 <OSTimeTick>:
* Returns    : none
*********************************************************************************************************
*/

void  OSTimeTick (void)
{
   10864:	defff704 	addi	sp,sp,-36
   10868:	dfc00815 	stw	ra,32(sp)
   1086c:	df000715 	stw	fp,28(sp)
   10870:	df000704 	addi	fp,sp,28
    OS_TCB    *ptcb;
#if OS_TICK_STEP_EN > 0
    BOOLEAN    step;
#endif
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
   10874:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_TIME_TICK_HOOK_EN > 0
    OSTimeTickHook();                                      /* Call user definable hook                     */
   10878:	0018e240 	call	18e24 <OSTimeTickHook>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1087c:	0005303a 	rdctl	r2,status
   10880:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   10884:	e0fffd17 	ldw	r3,-12(fp)
   10888:	00bfff84 	movi	r2,-2
   1088c:	1884703a 	and	r2,r3,r2
   10890:	1001703a 	wrctl	status,r2
  
  return context;
   10894:	e0bffd17 	ldw	r2,-12(fp)
#endif
#if OS_TIME_GET_SET_EN > 0
    OS_ENTER_CRITICAL();                                   /* Update the 32-bit tick counter               */
   10898:	e0bffb15 	stw	r2,-20(fp)
    OSTime++;
   1089c:	d0a73417 	ldw	r2,-25392(gp)
   108a0:	10800044 	addi	r2,r2,1
   108a4:	d0a73415 	stw	r2,-25392(gp)
   108a8:	e0bffb17 	ldw	r2,-20(fp)
   108ac:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   108b0:	e0bfff17 	ldw	r2,-4(fp)
   108b4:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
#endif
    if (OSRunning == OS_TRUE) {
   108b8:	d0a72443 	ldbu	r2,-25455(gp)
   108bc:	10803fcc 	andi	r2,r2,255
   108c0:	10800058 	cmpnei	r2,r2,1
   108c4:	10006a1e 	bne	r2,zero,10a70 <OSTimeTick+0x20c>
#if OS_TICK_STEP_EN > 0
        switch (OSTickStepState) {                         /* Determine whether we need to process a tick  */
   108c8:	d0a72803 	ldbu	r2,-25440(gp)
   108cc:	10803fcc 	andi	r2,r2,255
   108d0:	10c00060 	cmpeqi	r3,r2,1
   108d4:	1800061e 	bne	r3,zero,108f0 <OSTimeTick+0x8c>
   108d8:	10c000a0 	cmpeqi	r3,r2,2
   108dc:	1800061e 	bne	r3,zero,108f8 <OSTimeTick+0x94>
   108e0:	10000a1e 	bne	r2,zero,1090c <OSTimeTick+0xa8>
            case OS_TICK_STEP_DIS:                         /* Yes, stepping is disabled                    */
                 step = OS_TRUE;
   108e4:	00800044 	movi	r2,1
   108e8:	e0bffa05 	stb	r2,-24(fp)
                 break;
   108ec:	00000b06 	br	1091c <OSTimeTick+0xb8>

            case OS_TICK_STEP_WAIT:                        /* No,  waiting for uC/OS-View to set ...       */
                 step = OS_FALSE;                          /*      .. OSTickStepState to OS_TICK_STEP_ONCE */
   108f0:	e03ffa05 	stb	zero,-24(fp)
                 break;
   108f4:	00000906 	br	1091c <OSTimeTick+0xb8>

            case OS_TICK_STEP_ONCE:                        /* Yes, process tick once and wait for next ... */
                 step            = OS_TRUE;                /*      ... step command from uC/OS-View        */
   108f8:	00800044 	movi	r2,1
   108fc:	e0bffa05 	stb	r2,-24(fp)
                 OSTickStepState = OS_TICK_STEP_WAIT;
   10900:	00800044 	movi	r2,1
   10904:	d0a72805 	stb	r2,-25440(gp)
                 break;
   10908:	00000406 	br	1091c <OSTimeTick+0xb8>

            default:                                       /* Invalid case, correct situation              */
                 step            = OS_TRUE;
   1090c:	00800044 	movi	r2,1
   10910:	e0bffa05 	stb	r2,-24(fp)
                 OSTickStepState = OS_TICK_STEP_DIS;
   10914:	d0272805 	stb	zero,-25440(gp)
                 break;
   10918:	0001883a 	nop
        }
        if (step == OS_FALSE) {                            /* Return if waiting for step command           */
   1091c:	e0bffa03 	ldbu	r2,-24(fp)
   10920:	10005226 	beq	r2,zero,10a6c <OSTimeTick+0x208>
            return;
        }
#endif
        ptcb = OSTCBList;                                  /* Point at first TCB in TCB list               */
   10924:	d0a72717 	ldw	r2,-25444(gp)
   10928:	e0bff915 	stw	r2,-28(fp)
        while (ptcb->OSTCBPrio != OS_TASK_IDLE_PRIO) {     /* Go through all TCBs in TCB list              */
   1092c:	00004906 	br	10a54 <OSTimeTick+0x1f0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   10930:	0005303a 	rdctl	r2,status
   10934:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   10938:	e0fffc17 	ldw	r3,-16(fp)
   1093c:	00bfff84 	movi	r2,-2
   10940:	1884703a 	and	r2,r3,r2
   10944:	1001703a 	wrctl	status,r2
  
  return context;
   10948:	e0bffc17 	ldw	r2,-16(fp)
            OS_ENTER_CRITICAL();
   1094c:	e0bffb15 	stw	r2,-20(fp)
            if (ptcb->OSTCBDly != 0) {                     /* No, Delayed or waiting for event with TO     */
   10950:	e0bff917 	ldw	r2,-28(fp)
   10954:	10800b8b 	ldhu	r2,46(r2)
   10958:	10bfffcc 	andi	r2,r2,65535
   1095c:	10003626 	beq	r2,zero,10a38 <OSTimeTick+0x1d4>
                if (--ptcb->OSTCBDly == 0) {               /* Decrement nbr of ticks to end of delay       */
   10960:	e0bff917 	ldw	r2,-28(fp)
   10964:	10800b8b 	ldhu	r2,46(r2)
   10968:	10bfffc4 	addi	r2,r2,-1
   1096c:	1007883a 	mov	r3,r2
   10970:	e0bff917 	ldw	r2,-28(fp)
   10974:	10c00b8d 	sth	r3,46(r2)
   10978:	e0bff917 	ldw	r2,-28(fp)
   1097c:	10800b8b 	ldhu	r2,46(r2)
   10980:	10bfffcc 	andi	r2,r2,65535
   10984:	10002c1e 	bne	r2,zero,10a38 <OSTimeTick+0x1d4>
                                                           /* Check for timeout                            */
                    if ((ptcb->OSTCBStat & OS_STAT_PEND_ANY) != OS_STAT_RDY) {
   10988:	e0bff917 	ldw	r2,-28(fp)
   1098c:	10800c03 	ldbu	r2,48(r2)
   10990:	10803fcc 	andi	r2,r2,255
   10994:	10800dcc 	andi	r2,r2,55
   10998:	10000b26 	beq	r2,zero,109c8 <OSTimeTick+0x164>
                        ptcb->OSTCBStat  &= ~(INT8U)OS_STAT_PEND_ANY;          /* Yes, Clear status flag   */
   1099c:	e0bff917 	ldw	r2,-28(fp)
   109a0:	10c00c03 	ldbu	r3,48(r2)
   109a4:	00bff204 	movi	r2,-56
   109a8:	1884703a 	and	r2,r3,r2
   109ac:	1007883a 	mov	r3,r2
   109b0:	e0bff917 	ldw	r2,-28(fp)
   109b4:	10c00c05 	stb	r3,48(r2)
                        ptcb->OSTCBStatPend = OS_STAT_PEND_TO;                 /* Indicate PEND timeout    */
   109b8:	e0bff917 	ldw	r2,-28(fp)
   109bc:	00c00044 	movi	r3,1
   109c0:	10c00c45 	stb	r3,49(r2)
   109c4:	00000206 	br	109d0 <OSTimeTick+0x16c>
                    } else {
                        ptcb->OSTCBStatPend = OS_STAT_PEND_OK;
   109c8:	e0bff917 	ldw	r2,-28(fp)
   109cc:	10000c45 	stb	zero,49(r2)
                    }

                    if ((ptcb->OSTCBStat & OS_STAT_SUSPEND) == OS_STAT_RDY) {  /* Is task suspended?       */
   109d0:	e0bff917 	ldw	r2,-28(fp)
   109d4:	10800c03 	ldbu	r2,48(r2)
   109d8:	10803fcc 	andi	r2,r2,255
   109dc:	1080020c 	andi	r2,r2,8
   109e0:	1000151e 	bne	r2,zero,10a38 <OSTimeTick+0x1d4>
                        OSRdyGrp               |= ptcb->OSTCBBitY;             /* No,  Make ready          */
   109e4:	e0bff917 	ldw	r2,-28(fp)
   109e8:	10c00d83 	ldbu	r3,54(r2)
   109ec:	d0a73003 	ldbu	r2,-25408(gp)
   109f0:	1884b03a 	or	r2,r3,r2
   109f4:	d0a73005 	stb	r2,-25408(gp)
                        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
   109f8:	e0bff917 	ldw	r2,-28(fp)
   109fc:	10800d03 	ldbu	r2,52(r2)
   10a00:	10c03fcc 	andi	r3,r2,255
   10a04:	e0bff917 	ldw	r2,-28(fp)
   10a08:	10800d03 	ldbu	r2,52(r2)
   10a0c:	11003fcc 	andi	r4,r2,255
   10a10:	d0a73044 	addi	r2,gp,-25407
   10a14:	2085883a 	add	r2,r4,r2
   10a18:	11000003 	ldbu	r4,0(r2)
   10a1c:	e0bff917 	ldw	r2,-28(fp)
   10a20:	10800d43 	ldbu	r2,53(r2)
   10a24:	2084b03a 	or	r2,r4,r2
   10a28:	1009883a 	mov	r4,r2
   10a2c:	d0a73044 	addi	r2,gp,-25407
   10a30:	1885883a 	add	r2,r3,r2
   10a34:	11000005 	stb	r4,0(r2)
                    }
                }
            }
            ptcb = ptcb->OSTCBNext;                        /* Point at next TCB in TCB list                */
   10a38:	e0bff917 	ldw	r2,-28(fp)
   10a3c:	10800517 	ldw	r2,20(r2)
   10a40:	e0bff915 	stw	r2,-28(fp)
   10a44:	e0bffb17 	ldw	r2,-20(fp)
   10a48:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   10a4c:	e0bffe17 	ldw	r2,-8(fp)
   10a50:	1001703a 	wrctl	status,r2
        if (step == OS_FALSE) {                            /* Return if waiting for step command           */
            return;
        }
#endif
        ptcb = OSTCBList;                                  /* Point at first TCB in TCB list               */
        while (ptcb->OSTCBPrio != OS_TASK_IDLE_PRIO) {     /* Go through all TCBs in TCB list              */
   10a54:	e0bff917 	ldw	r2,-28(fp)
   10a58:	10800c83 	ldbu	r2,50(r2)
   10a5c:	10803fcc 	andi	r2,r2,255
   10a60:	10800518 	cmpnei	r2,r2,20
   10a64:	103fb21e 	bne	r2,zero,10930 <__alt_data_end+0xfffe0930>
   10a68:	00000106 	br	10a70 <OSTimeTick+0x20c>
                 step            = OS_TRUE;
                 OSTickStepState = OS_TICK_STEP_DIS;
                 break;
        }
        if (step == OS_FALSE) {                            /* Return if waiting for step command           */
            return;
   10a6c:	0001883a 	nop
            }
            ptcb = ptcb->OSTCBNext;                        /* Point at next TCB in TCB list                */
            OS_EXIT_CRITICAL();
        }
    }
}
   10a70:	e037883a 	mov	sp,fp
   10a74:	dfc00117 	ldw	ra,4(sp)
   10a78:	df000017 	ldw	fp,0(sp)
   10a7c:	dec00204 	addi	sp,sp,8
   10a80:	f800283a 	ret

00010a84 <OSVersion>:
* Returns    : the version number of uC/OS-II multiplied by 100.
*********************************************************************************************************
*/

INT16U  OSVersion (void)
{
   10a84:	deffff04 	addi	sp,sp,-4
   10a88:	df000015 	stw	fp,0(sp)
   10a8c:	d839883a 	mov	fp,sp
    return (OS_VERSION);
   10a90:	00804784 	movi	r2,286
}
   10a94:	e037883a 	mov	sp,fp
   10a98:	df000017 	ldw	fp,0(sp)
   10a9c:	dec00104 	addi	sp,sp,4
   10aa0:	f800283a 	ret

00010aa4 <OS_Dummy>:
*********************************************************************************************************
*/

#if OS_TASK_DEL_EN > 0
void  OS_Dummy (void)
{
   10aa4:	deffff04 	addi	sp,sp,-4
   10aa8:	df000015 	stw	fp,0(sp)
   10aac:	d839883a 	mov	fp,sp
}
   10ab0:	0001883a 	nop
   10ab4:	e037883a 	mov	sp,fp
   10ab8:	df000017 	ldw	fp,0(sp)
   10abc:	dec00104 	addi	sp,sp,4
   10ac0:	f800283a 	ret

00010ac4 <OS_EventTaskRdy>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
INT8U  OS_EventTaskRdy (OS_EVENT *pevent, void *pmsg, INT8U msk, INT8U pend_stat)
{
   10ac4:	defff804 	addi	sp,sp,-32
   10ac8:	dfc00715 	stw	ra,28(sp)
   10acc:	df000615 	stw	fp,24(sp)
   10ad0:	df000604 	addi	fp,sp,24
   10ad4:	e13ffc15 	stw	r4,-16(fp)
   10ad8:	e17ffd15 	stw	r5,-12(fp)
   10adc:	3007883a 	mov	r3,r6
   10ae0:	3805883a 	mov	r2,r7
   10ae4:	e0fffe05 	stb	r3,-8(fp)
   10ae8:	e0bfff05 	stb	r2,-4(fp)
    INT16U  *ptbl;
#endif


#if OS_LOWEST_PRIO <= 63
    y    = OSUnMapTbl[pevent->OSEventGrp];              /* Find HPT waiting for message                */
   10aec:	e0bffc17 	ldw	r2,-16(fp)
   10af0:	10800283 	ldbu	r2,10(r2)
   10af4:	10c03fcc 	andi	r3,r2,255
   10af8:	008000b4 	movhi	r2,2
   10afc:	10a62c04 	addi	r2,r2,-26448
   10b00:	10c5883a 	add	r2,r2,r3
   10b04:	10800003 	ldbu	r2,0(r2)
   10b08:	e0bffa05 	stb	r2,-24(fp)
    x    = OSUnMapTbl[pevent->OSEventTbl[y]];
   10b0c:	e0bffa03 	ldbu	r2,-24(fp)
   10b10:	e0fffc17 	ldw	r3,-16(fp)
   10b14:	1885883a 	add	r2,r3,r2
   10b18:	108002c4 	addi	r2,r2,11
   10b1c:	10800003 	ldbu	r2,0(r2)
   10b20:	10c03fcc 	andi	r3,r2,255
   10b24:	008000b4 	movhi	r2,2
   10b28:	10a62c04 	addi	r2,r2,-26448
   10b2c:	10c5883a 	add	r2,r2,r3
   10b30:	10800003 	ldbu	r2,0(r2)
   10b34:	e0bffa45 	stb	r2,-23(fp)
    prio = (INT8U)((y << 3) + x);                       /* Find priority of task getting the msg       */
   10b38:	e0bffa03 	ldbu	r2,-24(fp)
   10b3c:	100490fa 	slli	r2,r2,3
   10b40:	1007883a 	mov	r3,r2
   10b44:	e0bffa43 	ldbu	r2,-23(fp)
   10b48:	1885883a 	add	r2,r3,r2
   10b4c:	e0bffa85 	stb	r2,-22(fp)
        x = OSUnMapTbl[(*ptbl >> 8) & 0xFF] + 8;
    }
    prio = (INT8U)((y << 4) + x);                       /* Find priority of task getting the msg       */
#endif

    ptcb                  =  OSTCBPrioTbl[prio];        /* Point to this task's OS_TCB                 */
   10b50:	e0fffa83 	ldbu	r3,-22(fp)
   10b54:	008000b4 	movhi	r2,2
   10b58:	10893404 	addi	r2,r2,9424
   10b5c:	18c7883a 	add	r3,r3,r3
   10b60:	18c7883a 	add	r3,r3,r3
   10b64:	10c5883a 	add	r2,r2,r3
   10b68:	10800017 	ldw	r2,0(r2)
   10b6c:	e0bffb15 	stw	r2,-20(fp)
    ptcb->OSTCBDly        =  0;                         /* Prevent OSTimeTick() from readying task     */
   10b70:	e0bffb17 	ldw	r2,-20(fp)
   10b74:	10000b8d 	sth	zero,46(r2)
#if ((OS_Q_EN > 0) && (OS_MAX_QS > 0)) || (OS_MBOX_EN > 0)
    ptcb->OSTCBMsg        =  pmsg;                      /* Send message directly to waiting task       */
   10b78:	e0bffb17 	ldw	r2,-20(fp)
   10b7c:	e0fffd17 	ldw	r3,-12(fp)
   10b80:	10c00915 	stw	r3,36(r2)
#else
    pmsg                  =  pmsg;                      /* Prevent compiler warning if not used        */
#endif
    ptcb->OSTCBStat      &= ~msk;                       /* Clear bit associated with event type        */
   10b84:	e0bffb17 	ldw	r2,-20(fp)
   10b88:	10800c03 	ldbu	r2,48(r2)
   10b8c:	1007883a 	mov	r3,r2
   10b90:	e0bffe03 	ldbu	r2,-8(fp)
   10b94:	0084303a 	nor	r2,zero,r2
   10b98:	1884703a 	and	r2,r3,r2
   10b9c:	1007883a 	mov	r3,r2
   10ba0:	e0bffb17 	ldw	r2,-20(fp)
   10ba4:	10c00c05 	stb	r3,48(r2)
    ptcb->OSTCBStatPend   =  pend_stat;                 /* Set pend status of post or abort            */
   10ba8:	e0bffb17 	ldw	r2,-20(fp)
   10bac:	e0ffff03 	ldbu	r3,-4(fp)
   10bb0:	10c00c45 	stb	r3,49(r2)
                                                        /* See if task is ready (could be susp'd)      */
    if ((ptcb->OSTCBStat &   OS_STAT_SUSPEND) == OS_STAT_RDY) {
   10bb4:	e0bffb17 	ldw	r2,-20(fp)
   10bb8:	10800c03 	ldbu	r2,48(r2)
   10bbc:	10803fcc 	andi	r2,r2,255
   10bc0:	1080020c 	andi	r2,r2,8
   10bc4:	1000111e 	bne	r2,zero,10c0c <OS_EventTaskRdy+0x148>
        OSRdyGrp         |=  ptcb->OSTCBBitY;           /* Put task in the ready to run list           */
   10bc8:	e0bffb17 	ldw	r2,-20(fp)
   10bcc:	10c00d83 	ldbu	r3,54(r2)
   10bd0:	d0a73003 	ldbu	r2,-25408(gp)
   10bd4:	1884b03a 	or	r2,r3,r2
   10bd8:	d0a73005 	stb	r2,-25408(gp)
        OSRdyTbl[y]      |=  ptcb->OSTCBBitX;
   10bdc:	e0fffa03 	ldbu	r3,-24(fp)
   10be0:	e13ffa03 	ldbu	r4,-24(fp)
   10be4:	d0a73044 	addi	r2,gp,-25407
   10be8:	2085883a 	add	r2,r4,r2
   10bec:	11000003 	ldbu	r4,0(r2)
   10bf0:	e0bffb17 	ldw	r2,-20(fp)
   10bf4:	10800d43 	ldbu	r2,53(r2)
   10bf8:	2084b03a 	or	r2,r4,r2
   10bfc:	1009883a 	mov	r4,r2
   10c00:	d0a73044 	addi	r2,gp,-25407
   10c04:	1885883a 	add	r2,r3,r2
   10c08:	11000005 	stb	r4,0(r2)
    }

    OS_EventTaskRemove(ptcb, pevent);                   /* Remove this task from event   wait list     */
   10c0c:	e17ffc17 	ldw	r5,-16(fp)
   10c10:	e13ffb17 	ldw	r4,-20(fp)
   10c14:	0010ebc0 	call	10ebc <OS_EventTaskRemove>
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {   /* Remove this task from events' wait lists    */
   10c18:	e0bffb17 	ldw	r2,-20(fp)
   10c1c:	10800817 	ldw	r2,32(r2)
   10c20:	10000826 	beq	r2,zero,10c44 <OS_EventTaskRdy+0x180>
        OS_EventTaskRemoveMulti(ptcb, ptcb->OSTCBEventMultiPtr);
   10c24:	e0bffb17 	ldw	r2,-20(fp)
   10c28:	10800817 	ldw	r2,32(r2)
   10c2c:	100b883a 	mov	r5,r2
   10c30:	e13ffb17 	ldw	r4,-20(fp)
   10c34:	0010f740 	call	10f74 <OS_EventTaskRemoveMulti>
        ptcb->OSTCBEventPtr       = (OS_EVENT  *)pevent;/* Return event as first multi-pend event ready*/
   10c38:	e0bffb17 	ldw	r2,-20(fp)
   10c3c:	e0fffc17 	ldw	r3,-16(fp)
   10c40:	10c00715 	stw	r3,28(r2)
    }
#endif

    return (prio);
   10c44:	e0bffa83 	ldbu	r2,-22(fp)
}
   10c48:	e037883a 	mov	sp,fp
   10c4c:	dfc00117 	ldw	ra,4(sp)
   10c50:	df000017 	ldw	fp,0(sp)
   10c54:	dec00204 	addi	sp,sp,8
   10c58:	f800283a 	ret

00010c5c <OS_EventTaskWait>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
void  OS_EventTaskWait (OS_EVENT *pevent)
{
   10c5c:	defffd04 	addi	sp,sp,-12
   10c60:	df000215 	stw	fp,8(sp)
   10c64:	df000204 	addi	fp,sp,8
   10c68:	e13fff15 	stw	r4,-4(fp)
    INT8U  y;


    OSTCBCur->OSTCBEventPtr               = pevent;                 /* Store ptr to ECB in TCB         */
   10c6c:	d0a73317 	ldw	r2,-25396(gp)
   10c70:	e0ffff17 	ldw	r3,-4(fp)
   10c74:	10c00715 	stw	r3,28(r2)

    pevent->OSEventTbl[OSTCBCur->OSTCBY] |= OSTCBCur->OSTCBBitX;    /* Put task in waiting list        */
   10c78:	d0a73317 	ldw	r2,-25396(gp)
   10c7c:	10800d03 	ldbu	r2,52(r2)
   10c80:	10803fcc 	andi	r2,r2,255
   10c84:	d0e73317 	ldw	r3,-25396(gp)
   10c88:	18c00d03 	ldbu	r3,52(r3)
   10c8c:	18c03fcc 	andi	r3,r3,255
   10c90:	e13fff17 	ldw	r4,-4(fp)
   10c94:	20c7883a 	add	r3,r4,r3
   10c98:	18c002c4 	addi	r3,r3,11
   10c9c:	19000003 	ldbu	r4,0(r3)
   10ca0:	d0e73317 	ldw	r3,-25396(gp)
   10ca4:	18c00d43 	ldbu	r3,53(r3)
   10ca8:	20c6b03a 	or	r3,r4,r3
   10cac:	1809883a 	mov	r4,r3
   10cb0:	e0ffff17 	ldw	r3,-4(fp)
   10cb4:	1885883a 	add	r2,r3,r2
   10cb8:	108002c4 	addi	r2,r2,11
   10cbc:	11000005 	stb	r4,0(r2)
    pevent->OSEventGrp                   |= OSTCBCur->OSTCBBitY;
   10cc0:	e0bfff17 	ldw	r2,-4(fp)
   10cc4:	10c00283 	ldbu	r3,10(r2)
   10cc8:	d0a73317 	ldw	r2,-25396(gp)
   10ccc:	10800d83 	ldbu	r2,54(r2)
   10cd0:	1884b03a 	or	r2,r3,r2
   10cd4:	1007883a 	mov	r3,r2
   10cd8:	e0bfff17 	ldw	r2,-4(fp)
   10cdc:	10c00285 	stb	r3,10(r2)

    y             =  OSTCBCur->OSTCBY;            /* Task no longer ready                              */
   10ce0:	d0a73317 	ldw	r2,-25396(gp)
   10ce4:	10800d03 	ldbu	r2,52(r2)
   10ce8:	e0bffe05 	stb	r2,-8(fp)
    OSRdyTbl[y]  &= ~OSTCBCur->OSTCBBitX;
   10cec:	e0fffe03 	ldbu	r3,-8(fp)
   10cf0:	e13ffe03 	ldbu	r4,-8(fp)
   10cf4:	d0a73044 	addi	r2,gp,-25407
   10cf8:	2085883a 	add	r2,r4,r2
   10cfc:	10800003 	ldbu	r2,0(r2)
   10d00:	1009883a 	mov	r4,r2
   10d04:	d0a73317 	ldw	r2,-25396(gp)
   10d08:	10800d43 	ldbu	r2,53(r2)
   10d0c:	0084303a 	nor	r2,zero,r2
   10d10:	2084703a 	and	r2,r4,r2
   10d14:	1009883a 	mov	r4,r2
   10d18:	d0a73044 	addi	r2,gp,-25407
   10d1c:	1885883a 	add	r2,r3,r2
   10d20:	11000005 	stb	r4,0(r2)
    if (OSRdyTbl[y] == 0) {
   10d24:	e0fffe03 	ldbu	r3,-8(fp)
   10d28:	d0a73044 	addi	r2,gp,-25407
   10d2c:	1885883a 	add	r2,r3,r2
   10d30:	10800003 	ldbu	r2,0(r2)
   10d34:	10803fcc 	andi	r2,r2,255
   10d38:	1000071e 	bne	r2,zero,10d58 <OS_EventTaskWait+0xfc>
        OSRdyGrp &= ~OSTCBCur->OSTCBBitY;         /* Clear event grp bit if this was only task pending */
   10d3c:	d0a73317 	ldw	r2,-25396(gp)
   10d40:	10800d83 	ldbu	r2,54(r2)
   10d44:	0084303a 	nor	r2,zero,r2
   10d48:	1007883a 	mov	r3,r2
   10d4c:	d0a73003 	ldbu	r2,-25408(gp)
   10d50:	1884703a 	and	r2,r3,r2
   10d54:	d0a73005 	stb	r2,-25408(gp)
    }
}
   10d58:	0001883a 	nop
   10d5c:	e037883a 	mov	sp,fp
   10d60:	df000017 	ldw	fp,0(sp)
   10d64:	dec00104 	addi	sp,sp,4
   10d68:	f800283a 	ret

00010d6c <OS_EventTaskWaitMulti>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if ((OS_EVENT_EN) && (OS_EVENT_MULTI_EN > 0))
void  OS_EventTaskWaitMulti (OS_EVENT **pevents_wait)
{
   10d6c:	defffb04 	addi	sp,sp,-20
   10d70:	df000415 	stw	fp,16(sp)
   10d74:	df000404 	addi	fp,sp,16
   10d78:	e13fff15 	stw	r4,-4(fp)
    OS_EVENT **pevents;
    OS_EVENT  *pevent;
    INT8U      y;


    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;
   10d7c:	d0a73317 	ldw	r2,-25396(gp)
   10d80:	10000715 	stw	zero,28(r2)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)pevents_wait;       /* Store ptr to ECBs in TCB        */
   10d84:	d0a73317 	ldw	r2,-25396(gp)
   10d88:	e0ffff17 	ldw	r3,-4(fp)
   10d8c:	10c00815 	stw	r3,32(r2)

    pevents =  pevents_wait;
   10d90:	e0bfff17 	ldw	r2,-4(fp)
   10d94:	e0bffc15 	stw	r2,-16(fp)
    pevent  = *pevents;
   10d98:	e0bffc17 	ldw	r2,-16(fp)
   10d9c:	10800017 	ldw	r2,0(r2)
   10da0:	e0bffd15 	stw	r2,-12(fp)
    while (pevent != (OS_EVENT *)0) {                               /* Put task in waiting lists       */
   10da4:	00002006 	br	10e28 <OS_EventTaskWaitMulti+0xbc>
        pevent->OSEventTbl[OSTCBCur->OSTCBY] |= OSTCBCur->OSTCBBitX;
   10da8:	d0a73317 	ldw	r2,-25396(gp)
   10dac:	10800d03 	ldbu	r2,52(r2)
   10db0:	10803fcc 	andi	r2,r2,255
   10db4:	d0e73317 	ldw	r3,-25396(gp)
   10db8:	18c00d03 	ldbu	r3,52(r3)
   10dbc:	18c03fcc 	andi	r3,r3,255
   10dc0:	e13ffd17 	ldw	r4,-12(fp)
   10dc4:	20c7883a 	add	r3,r4,r3
   10dc8:	18c002c4 	addi	r3,r3,11
   10dcc:	19000003 	ldbu	r4,0(r3)
   10dd0:	d0e73317 	ldw	r3,-25396(gp)
   10dd4:	18c00d43 	ldbu	r3,53(r3)
   10dd8:	20c6b03a 	or	r3,r4,r3
   10ddc:	1809883a 	mov	r4,r3
   10de0:	e0fffd17 	ldw	r3,-12(fp)
   10de4:	1885883a 	add	r2,r3,r2
   10de8:	108002c4 	addi	r2,r2,11
   10dec:	11000005 	stb	r4,0(r2)
        pevent->OSEventGrp                   |= OSTCBCur->OSTCBBitY;
   10df0:	e0bffd17 	ldw	r2,-12(fp)
   10df4:	10c00283 	ldbu	r3,10(r2)
   10df8:	d0a73317 	ldw	r2,-25396(gp)
   10dfc:	10800d83 	ldbu	r2,54(r2)
   10e00:	1884b03a 	or	r2,r3,r2
   10e04:	1007883a 	mov	r3,r2
   10e08:	e0bffd17 	ldw	r2,-12(fp)
   10e0c:	10c00285 	stb	r3,10(r2)
        pevents++;
   10e10:	e0bffc17 	ldw	r2,-16(fp)
   10e14:	10800104 	addi	r2,r2,4
   10e18:	e0bffc15 	stw	r2,-16(fp)
        pevent = *pevents;
   10e1c:	e0bffc17 	ldw	r2,-16(fp)
   10e20:	10800017 	ldw	r2,0(r2)
   10e24:	e0bffd15 	stw	r2,-12(fp)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)pevents_wait;       /* Store ptr to ECBs in TCB        */

    pevents =  pevents_wait;
    pevent  = *pevents;
    while (pevent != (OS_EVENT *)0) {                               /* Put task in waiting lists       */
   10e28:	e0bffd17 	ldw	r2,-12(fp)
   10e2c:	103fde1e 	bne	r2,zero,10da8 <__alt_data_end+0xfffe0da8>
        pevent->OSEventGrp                   |= OSTCBCur->OSTCBBitY;
        pevents++;
        pevent = *pevents;
    }

    y             =  OSTCBCur->OSTCBY;            /* Task no longer ready                              */
   10e30:	d0a73317 	ldw	r2,-25396(gp)
   10e34:	10800d03 	ldbu	r2,52(r2)
   10e38:	e0bffe05 	stb	r2,-8(fp)
    OSRdyTbl[y]  &= ~OSTCBCur->OSTCBBitX;
   10e3c:	e0fffe03 	ldbu	r3,-8(fp)
   10e40:	e13ffe03 	ldbu	r4,-8(fp)
   10e44:	d0a73044 	addi	r2,gp,-25407
   10e48:	2085883a 	add	r2,r4,r2
   10e4c:	10800003 	ldbu	r2,0(r2)
   10e50:	1009883a 	mov	r4,r2
   10e54:	d0a73317 	ldw	r2,-25396(gp)
   10e58:	10800d43 	ldbu	r2,53(r2)
   10e5c:	0084303a 	nor	r2,zero,r2
   10e60:	2084703a 	and	r2,r4,r2
   10e64:	1009883a 	mov	r4,r2
   10e68:	d0a73044 	addi	r2,gp,-25407
   10e6c:	1885883a 	add	r2,r3,r2
   10e70:	11000005 	stb	r4,0(r2)
    if (OSRdyTbl[y] == 0) {
   10e74:	e0fffe03 	ldbu	r3,-8(fp)
   10e78:	d0a73044 	addi	r2,gp,-25407
   10e7c:	1885883a 	add	r2,r3,r2
   10e80:	10800003 	ldbu	r2,0(r2)
   10e84:	10803fcc 	andi	r2,r2,255
   10e88:	1000071e 	bne	r2,zero,10ea8 <OS_EventTaskWaitMulti+0x13c>
        OSRdyGrp &= ~OSTCBCur->OSTCBBitY;         /* Clear event grp bit if this was only task pending */
   10e8c:	d0a73317 	ldw	r2,-25396(gp)
   10e90:	10800d83 	ldbu	r2,54(r2)
   10e94:	0084303a 	nor	r2,zero,r2
   10e98:	1007883a 	mov	r3,r2
   10e9c:	d0a73003 	ldbu	r2,-25408(gp)
   10ea0:	1884703a 	and	r2,r3,r2
   10ea4:	d0a73005 	stb	r2,-25408(gp)
    }
}
   10ea8:	0001883a 	nop
   10eac:	e037883a 	mov	sp,fp
   10eb0:	df000017 	ldw	fp,0(sp)
   10eb4:	dec00104 	addi	sp,sp,4
   10eb8:	f800283a 	ret

00010ebc <OS_EventTaskRemove>:
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
void  OS_EventTaskRemove (OS_TCB   *ptcb,
                          OS_EVENT *pevent)
{
   10ebc:	defffc04 	addi	sp,sp,-16
   10ec0:	df000315 	stw	fp,12(sp)
   10ec4:	df000304 	addi	fp,sp,12
   10ec8:	e13ffe15 	stw	r4,-8(fp)
   10ecc:	e17fff15 	stw	r5,-4(fp)
    INT8U  y;


    y                       =  ptcb->OSTCBY;
   10ed0:	e0bffe17 	ldw	r2,-8(fp)
   10ed4:	10800d03 	ldbu	r2,52(r2)
   10ed8:	e0bffd05 	stb	r2,-12(fp)
    pevent->OSEventTbl[y]  &= ~ptcb->OSTCBBitX;         /* Remove task from wait list                  */
   10edc:	e0bffd03 	ldbu	r2,-12(fp)
   10ee0:	e0fffd03 	ldbu	r3,-12(fp)
   10ee4:	e13fff17 	ldw	r4,-4(fp)
   10ee8:	20c7883a 	add	r3,r4,r3
   10eec:	18c002c4 	addi	r3,r3,11
   10ef0:	18c00003 	ldbu	r3,0(r3)
   10ef4:	1809883a 	mov	r4,r3
   10ef8:	e0fffe17 	ldw	r3,-8(fp)
   10efc:	18c00d43 	ldbu	r3,53(r3)
   10f00:	00c6303a 	nor	r3,zero,r3
   10f04:	20c6703a 	and	r3,r4,r3
   10f08:	1809883a 	mov	r4,r3
   10f0c:	e0ffff17 	ldw	r3,-4(fp)
   10f10:	1885883a 	add	r2,r3,r2
   10f14:	108002c4 	addi	r2,r2,11
   10f18:	11000005 	stb	r4,0(r2)
    if (pevent->OSEventTbl[y] == 0) {
   10f1c:	e0bffd03 	ldbu	r2,-12(fp)
   10f20:	e0ffff17 	ldw	r3,-4(fp)
   10f24:	1885883a 	add	r2,r3,r2
   10f28:	108002c4 	addi	r2,r2,11
   10f2c:	10800003 	ldbu	r2,0(r2)
   10f30:	10803fcc 	andi	r2,r2,255
   10f34:	10000a1e 	bne	r2,zero,10f60 <OS_EventTaskRemove+0xa4>
        pevent->OSEventGrp &= ~ptcb->OSTCBBitY;
   10f38:	e0bfff17 	ldw	r2,-4(fp)
   10f3c:	10800283 	ldbu	r2,10(r2)
   10f40:	1007883a 	mov	r3,r2
   10f44:	e0bffe17 	ldw	r2,-8(fp)
   10f48:	10800d83 	ldbu	r2,54(r2)
   10f4c:	0084303a 	nor	r2,zero,r2
   10f50:	1884703a 	and	r2,r3,r2
   10f54:	1007883a 	mov	r3,r2
   10f58:	e0bfff17 	ldw	r2,-4(fp)
   10f5c:	10c00285 	stb	r3,10(r2)
    }
}
   10f60:	0001883a 	nop
   10f64:	e037883a 	mov	sp,fp
   10f68:	df000017 	ldw	fp,0(sp)
   10f6c:	dec00104 	addi	sp,sp,4
   10f70:	f800283a 	ret

00010f74 <OS_EventTaskRemoveMulti>:
*********************************************************************************************************
*/
#if ((OS_EVENT_EN) && (OS_EVENT_MULTI_EN > 0))
void  OS_EventTaskRemoveMulti (OS_TCB    *ptcb,
                               OS_EVENT **pevents_multi)
{
   10f74:	defffa04 	addi	sp,sp,-24
   10f78:	df000515 	stw	fp,20(sp)
   10f7c:	df000504 	addi	fp,sp,20
   10f80:	e13ffe15 	stw	r4,-8(fp)
   10f84:	e17fff15 	stw	r5,-4(fp)
    INT16U     bity;
    INT16U     bitx;
#endif


    y       =  ptcb->OSTCBY;
   10f88:	e0bffe17 	ldw	r2,-8(fp)
   10f8c:	10800d03 	ldbu	r2,52(r2)
   10f90:	e0bffd05 	stb	r2,-12(fp)
    bity    =  ptcb->OSTCBBitY;
   10f94:	e0bffe17 	ldw	r2,-8(fp)
   10f98:	10800d83 	ldbu	r2,54(r2)
   10f9c:	e0bffd45 	stb	r2,-11(fp)
    bitx    =  ptcb->OSTCBBitX;
   10fa0:	e0bffe17 	ldw	r2,-8(fp)
   10fa4:	10800d43 	ldbu	r2,53(r2)
   10fa8:	e0bffd85 	stb	r2,-10(fp)
    pevents =  pevents_multi;
   10fac:	e0bfff17 	ldw	r2,-4(fp)
   10fb0:	e0bffb15 	stw	r2,-20(fp)
    pevent  = *pevents;
   10fb4:	e0bffb17 	ldw	r2,-20(fp)
   10fb8:	10800017 	ldw	r2,0(r2)
   10fbc:	e0bffc15 	stw	r2,-16(fp)
    while (pevent != (OS_EVENT *)0) {                   /* Remove task from all events' wait lists     */
   10fc0:	00002506 	br	11058 <OS_EventTaskRemoveMulti+0xe4>
        pevent->OSEventTbl[y]  &= ~bitx;
   10fc4:	e0bffd03 	ldbu	r2,-12(fp)
   10fc8:	e0fffd03 	ldbu	r3,-12(fp)
   10fcc:	e13ffc17 	ldw	r4,-16(fp)
   10fd0:	20c7883a 	add	r3,r4,r3
   10fd4:	18c002c4 	addi	r3,r3,11
   10fd8:	18c00003 	ldbu	r3,0(r3)
   10fdc:	1809883a 	mov	r4,r3
   10fe0:	e0fffd83 	ldbu	r3,-10(fp)
   10fe4:	00c6303a 	nor	r3,zero,r3
   10fe8:	20c6703a 	and	r3,r4,r3
   10fec:	1809883a 	mov	r4,r3
   10ff0:	e0fffc17 	ldw	r3,-16(fp)
   10ff4:	1885883a 	add	r2,r3,r2
   10ff8:	108002c4 	addi	r2,r2,11
   10ffc:	11000005 	stb	r4,0(r2)
        if (pevent->OSEventTbl[y] == 0) {
   11000:	e0bffd03 	ldbu	r2,-12(fp)
   11004:	e0fffc17 	ldw	r3,-16(fp)
   11008:	1885883a 	add	r2,r3,r2
   1100c:	108002c4 	addi	r2,r2,11
   11010:	10800003 	ldbu	r2,0(r2)
   11014:	10803fcc 	andi	r2,r2,255
   11018:	1000091e 	bne	r2,zero,11040 <OS_EventTaskRemoveMulti+0xcc>
            pevent->OSEventGrp &= ~bity;
   1101c:	e0bffc17 	ldw	r2,-16(fp)
   11020:	10800283 	ldbu	r2,10(r2)
   11024:	1007883a 	mov	r3,r2
   11028:	e0bffd43 	ldbu	r2,-11(fp)
   1102c:	0084303a 	nor	r2,zero,r2
   11030:	1884703a 	and	r2,r3,r2
   11034:	1007883a 	mov	r3,r2
   11038:	e0bffc17 	ldw	r2,-16(fp)
   1103c:	10c00285 	stb	r3,10(r2)
        }
        pevents++;
   11040:	e0bffb17 	ldw	r2,-20(fp)
   11044:	10800104 	addi	r2,r2,4
   11048:	e0bffb15 	stw	r2,-20(fp)
        pevent = *pevents;
   1104c:	e0bffb17 	ldw	r2,-20(fp)
   11050:	10800017 	ldw	r2,0(r2)
   11054:	e0bffc15 	stw	r2,-16(fp)
    y       =  ptcb->OSTCBY;
    bity    =  ptcb->OSTCBBitY;
    bitx    =  ptcb->OSTCBBitX;
    pevents =  pevents_multi;
    pevent  = *pevents;
    while (pevent != (OS_EVENT *)0) {                   /* Remove task from all events' wait lists     */
   11058:	e0bffc17 	ldw	r2,-16(fp)
   1105c:	103fd91e 	bne	r2,zero,10fc4 <__alt_data_end+0xfffe0fc4>
            pevent->OSEventGrp &= ~bity;
        }
        pevents++;
        pevent = *pevents;
    }
}
   11060:	0001883a 	nop
   11064:	e037883a 	mov	sp,fp
   11068:	df000017 	ldw	fp,0(sp)
   1106c:	dec00104 	addi	sp,sp,4
   11070:	f800283a 	ret

00011074 <OS_EventWaitListInit>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
void  OS_EventWaitListInit (OS_EVENT *pevent)
{
   11074:	defffc04 	addi	sp,sp,-16
   11078:	df000315 	stw	fp,12(sp)
   1107c:	df000304 	addi	fp,sp,12
   11080:	e13fff15 	stw	r4,-4(fp)
    INT16U *ptbl;
#endif
    INT8U   i;


    pevent->OSEventGrp = 0;                      /* No task waiting on event                           */
   11084:	e0bfff17 	ldw	r2,-4(fp)
   11088:	10000285 	stb	zero,10(r2)
    ptbl               = &pevent->OSEventTbl[0];
   1108c:	e0bfff17 	ldw	r2,-4(fp)
   11090:	108002c4 	addi	r2,r2,11
   11094:	e0bffd15 	stw	r2,-12(fp)

    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
   11098:	e03ffe05 	stb	zero,-8(fp)
   1109c:	00000706 	br	110bc <OS_EventWaitListInit+0x48>
        *ptbl++ = 0;
   110a0:	e0bffd17 	ldw	r2,-12(fp)
   110a4:	10c00044 	addi	r3,r2,1
   110a8:	e0fffd15 	stw	r3,-12(fp)
   110ac:	10000005 	stb	zero,0(r2)


    pevent->OSEventGrp = 0;                      /* No task waiting on event                           */
    ptbl               = &pevent->OSEventTbl[0];

    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
   110b0:	e0bffe03 	ldbu	r2,-8(fp)
   110b4:	10800044 	addi	r2,r2,1
   110b8:	e0bffe05 	stb	r2,-8(fp)
   110bc:	e0bffe03 	ldbu	r2,-8(fp)
   110c0:	108000f0 	cmpltui	r2,r2,3
   110c4:	103ff61e 	bne	r2,zero,110a0 <__alt_data_end+0xfffe10a0>
        *ptbl++ = 0;
    }
}
   110c8:	0001883a 	nop
   110cc:	e037883a 	mov	sp,fp
   110d0:	df000017 	ldw	fp,0(sp)
   110d4:	dec00104 	addi	sp,sp,4
   110d8:	f800283a 	ret

000110dc <OS_InitEventList>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitEventList (void)
{
   110dc:	defffb04 	addi	sp,sp,-20
   110e0:	dfc00415 	stw	ra,16(sp)
   110e4:	df000315 	stw	fp,12(sp)
   110e8:	df000304 	addi	fp,sp,12
    INT16U     i;
    OS_EVENT  *pevent1;
    OS_EVENT  *pevent2;


    OS_MemClr((INT8U *)&OSEventTbl[0], sizeof(OSEventTbl)); /* Clear the event table                   */
   110ec:	0142d004 	movi	r5,2880
   110f0:	010000b4 	movhi	r4,2
   110f4:	21052004 	addi	r4,r4,5248
   110f8:	00114540 	call	11454 <OS_MemClr>
    pevent1 = &OSEventTbl[0];
   110fc:	008000b4 	movhi	r2,2
   11100:	10852004 	addi	r2,r2,5248
   11104:	e0bffe15 	stw	r2,-8(fp)
    pevent2 = &OSEventTbl[1];
   11108:	008000b4 	movhi	r2,2
   1110c:	10852c04 	addi	r2,r2,5296
   11110:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < (OS_MAX_EVENTS - 1); i++) {             /* Init. list of free EVENT control blocks */
   11114:	e03ffd0d 	sth	zero,-12(fp)
   11118:	00001306 	br	11168 <OS_InitEventList+0x8c>
        pevent1->OSEventType    = OS_EVENT_TYPE_UNUSED;
   1111c:	e0bffe17 	ldw	r2,-8(fp)
   11120:	10000005 	stb	zero,0(r2)
        pevent1->OSEventPtr     = pevent2;
   11124:	e0bffe17 	ldw	r2,-8(fp)
   11128:	e0ffff17 	ldw	r3,-4(fp)
   1112c:	10c00115 	stw	r3,4(r2)
#if OS_EVENT_NAME_SIZE > 1
        pevent1->OSEventName[0] = '?';                      /* Unknown name                            */
   11130:	e0bffe17 	ldw	r2,-8(fp)
   11134:	00c00fc4 	movi	r3,63
   11138:	10c00385 	stb	r3,14(r2)
        pevent1->OSEventName[1] = OS_ASCII_NUL;
   1113c:	e0bffe17 	ldw	r2,-8(fp)
   11140:	100003c5 	stb	zero,15(r2)
#endif
        pevent1++;
   11144:	e0bffe17 	ldw	r2,-8(fp)
   11148:	10800c04 	addi	r2,r2,48
   1114c:	e0bffe15 	stw	r2,-8(fp)
        pevent2++;
   11150:	e0bfff17 	ldw	r2,-4(fp)
   11154:	10800c04 	addi	r2,r2,48
   11158:	e0bfff15 	stw	r2,-4(fp)


    OS_MemClr((INT8U *)&OSEventTbl[0], sizeof(OSEventTbl)); /* Clear the event table                   */
    pevent1 = &OSEventTbl[0];
    pevent2 = &OSEventTbl[1];
    for (i = 0; i < (OS_MAX_EVENTS - 1); i++) {             /* Init. list of free EVENT control blocks */
   1115c:	e0bffd0b 	ldhu	r2,-12(fp)
   11160:	10800044 	addi	r2,r2,1
   11164:	e0bffd0d 	sth	r2,-12(fp)
   11168:	e0bffd0b 	ldhu	r2,-12(fp)
   1116c:	10800ef0 	cmpltui	r2,r2,59
   11170:	103fea1e 	bne	r2,zero,1111c <__alt_data_end+0xfffe111c>
        pevent1->OSEventName[1] = OS_ASCII_NUL;
#endif
        pevent1++;
        pevent2++;
    }
    pevent1->OSEventType            = OS_EVENT_TYPE_UNUSED;
   11174:	e0bffe17 	ldw	r2,-8(fp)
   11178:	10000005 	stb	zero,0(r2)
    pevent1->OSEventPtr             = (OS_EVENT *)0;
   1117c:	e0bffe17 	ldw	r2,-8(fp)
   11180:	10000115 	stw	zero,4(r2)
#if OS_EVENT_NAME_SIZE > 1
    pevent1->OSEventName[0]         = '?';
   11184:	e0bffe17 	ldw	r2,-8(fp)
   11188:	00c00fc4 	movi	r3,63
   1118c:	10c00385 	stb	r3,14(r2)
    pevent1->OSEventName[1]         = OS_ASCII_NUL;
   11190:	e0bffe17 	ldw	r2,-8(fp)
   11194:	100003c5 	stb	zero,15(r2)
#endif
    OSEventFreeList                 = &OSEventTbl[0];
   11198:	008000b4 	movhi	r2,2
   1119c:	10852004 	addi	r2,r2,5248
   111a0:	d0a73115 	stw	r2,-25404(gp)
    OSEventFreeList->OSEventName[0] = '?';                  /* Unknown name                            */
    OSEventFreeList->OSEventName[1] = OS_ASCII_NUL;
#endif
#endif
#endif
}
   111a4:	0001883a 	nop
   111a8:	e037883a 	mov	sp,fp
   111ac:	dfc00117 	ldw	ra,4(sp)
   111b0:	df000017 	ldw	fp,0(sp)
   111b4:	dec00204 	addi	sp,sp,8
   111b8:	f800283a 	ret

000111bc <OS_InitMisc>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitMisc (void)
{
   111bc:	deffff04 	addi	sp,sp,-4
   111c0:	df000015 	stw	fp,0(sp)
   111c4:	d839883a 	mov	fp,sp
#if OS_TIME_GET_SET_EN > 0
    OSTime        = 0L;                                    /* Clear the 32-bit system clock            */
   111c8:	d0273415 	stw	zero,-25392(gp)
#endif

    OSIntNesting  = 0;                                     /* Clear the interrupt nesting counter      */
   111cc:	d0273205 	stb	zero,-25400(gp)
    OSLockNesting = 0;                                     /* Clear the scheduling lock counter        */
   111d0:	d0272405 	stb	zero,-25456(gp)

    OSTaskCtr     = 0;                                     /* Clear the number of tasks                */
   111d4:	d0272c45 	stb	zero,-25423(gp)

    OSRunning     = OS_FALSE;                              /* Indicate that multitasking not started   */
   111d8:	d0272445 	stb	zero,-25455(gp)

    OSCtxSwCtr    = 0;                                     /* Clear the context switch counter         */
   111dc:	d0272915 	stw	zero,-25436(gp)
    OSIdleCtr     = 0L;                                    /* Clear the 32-bit idle counter            */
   111e0:	d0272515 	stw	zero,-25452(gp)

#if OS_TASK_STAT_EN > 0
    OSIdleCtrRun  = 0L;
   111e4:	d0273715 	stw	zero,-25380(gp)
    OSIdleCtrMax  = 0L;
   111e8:	d0272a15 	stw	zero,-25432(gp)
    OSStatRdy     = OS_FALSE;                              /* Statistic task is not ready              */
   111ec:	d0273605 	stb	zero,-25384(gp)
#endif
}
   111f0:	0001883a 	nop
   111f4:	e037883a 	mov	sp,fp
   111f8:	df000017 	ldw	fp,0(sp)
   111fc:	dec00104 	addi	sp,sp,4
   11200:	f800283a 	ret

00011204 <OS_InitRdyList>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitRdyList (void)
{
   11204:	defffd04 	addi	sp,sp,-12
   11208:	df000215 	stw	fp,8(sp)
   1120c:	df000204 	addi	fp,sp,8
#else
    INT16U  *prdytbl;
#endif


    OSRdyGrp      = 0;                                     /* Clear the ready list                     */
   11210:	d0273005 	stb	zero,-25408(gp)
    prdytbl       = &OSRdyTbl[0];
   11214:	d0a73044 	addi	r2,gp,-25407
   11218:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < OS_RDY_TBL_SIZE; i++) {
   1121c:	e03ffe05 	stb	zero,-8(fp)
   11220:	00000706 	br	11240 <OS_InitRdyList+0x3c>
        *prdytbl++ = 0;
   11224:	e0bfff17 	ldw	r2,-4(fp)
   11228:	10c00044 	addi	r3,r2,1
   1122c:	e0ffff15 	stw	r3,-4(fp)
   11230:	10000005 	stb	zero,0(r2)
#endif


    OSRdyGrp      = 0;                                     /* Clear the ready list                     */
    prdytbl       = &OSRdyTbl[0];
    for (i = 0; i < OS_RDY_TBL_SIZE; i++) {
   11234:	e0bffe03 	ldbu	r2,-8(fp)
   11238:	10800044 	addi	r2,r2,1
   1123c:	e0bffe05 	stb	r2,-8(fp)
   11240:	e0bffe03 	ldbu	r2,-8(fp)
   11244:	108000f0 	cmpltui	r2,r2,3
   11248:	103ff61e 	bne	r2,zero,11224 <__alt_data_end+0xfffe1224>
        *prdytbl++ = 0;
    }

    OSPrioCur     = 0;
   1124c:	d0272645 	stb	zero,-25447(gp)
    OSPrioHighRdy = 0;
   11250:	d0272605 	stb	zero,-25448(gp)

    OSTCBHighRdy  = (OS_TCB *)0;
   11254:	d0272e15 	stw	zero,-25416(gp)
    OSTCBCur      = (OS_TCB *)0;
   11258:	d0273315 	stw	zero,-25396(gp)
}
   1125c:	0001883a 	nop
   11260:	e037883a 	mov	sp,fp
   11264:	df000017 	ldw	fp,0(sp)
   11268:	dec00104 	addi	sp,sp,4
   1126c:	f800283a 	ret

00011270 <OS_InitTaskIdle>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitTaskIdle (void)
{
   11270:	defff804 	addi	sp,sp,-32
   11274:	dfc00715 	stw	ra,28(sp)
   11278:	df000615 	stw	fp,24(sp)
   1127c:	df000604 	addi	fp,sp,24
#endif


#if OS_TASK_CREATE_EXT_EN > 0
    #if OS_STK_GROWTH == 1
    (void)OSTaskCreateExt(OS_TaskIdle,
   11280:	008000c4 	movi	r2,3
   11284:	d8800415 	stw	r2,16(sp)
   11288:	d8000315 	stw	zero,12(sp)
   1128c:	00808004 	movi	r2,512
   11290:	d8800215 	stw	r2,8(sp)
   11294:	008000b4 	movhi	r2,2
   11298:	10832004 	addi	r2,r2,3200
   1129c:	d8800115 	stw	r2,4(sp)
   112a0:	00bfffd4 	movui	r2,65535
   112a4:	d8800015 	stw	r2,0(sp)
   112a8:	01c00504 	movi	r7,20
   112ac:	018000b4 	movhi	r6,2
   112b0:	31851f04 	addi	r6,r6,5244
   112b4:	000b883a 	mov	r5,zero
   112b8:	01000074 	movhi	r4,1
   112bc:	2105c704 	addi	r4,r4,5916
   112c0:	0015de80 	call	15de8 <OSTaskCreateExt>
                       OS_TASK_IDLE_PRIO);
    #endif
#endif

#if OS_TASK_NAME_SIZE > 14
    OSTaskNameSet(OS_TASK_IDLE_PRIO, (INT8U *)"uC/OS-II Idle", &err);
   112c4:	e1bfff04 	addi	r6,fp,-4
   112c8:	014000b4 	movhi	r5,2
   112cc:	29666c04 	addi	r5,r5,-26192
   112d0:	01000504 	movi	r4,20
   112d4:	00165f80 	call	165f8 <OSTaskNameSet>
#else
#if OS_TASK_NAME_SIZE > 7
    OSTaskNameSet(OS_TASK_IDLE_PRIO, (INT8U *)"OS-Idle", &err);
#endif
#endif
}
   112d8:	0001883a 	nop
   112dc:	e037883a 	mov	sp,fp
   112e0:	dfc00117 	ldw	ra,4(sp)
   112e4:	df000017 	ldw	fp,0(sp)
   112e8:	dec00204 	addi	sp,sp,8
   112ec:	f800283a 	ret

000112f0 <OS_InitTaskStat>:
*********************************************************************************************************
*/

#if OS_TASK_STAT_EN > 0
static  void  OS_InitTaskStat (void)
{
   112f0:	defff804 	addi	sp,sp,-32
   112f4:	dfc00715 	stw	ra,28(sp)
   112f8:	df000615 	stw	fp,24(sp)
   112fc:	df000604 	addi	fp,sp,24
#endif


#if OS_TASK_CREATE_EXT_EN > 0
    #if OS_STK_GROWTH == 1
    (void)OSTaskCreateExt(OS_TaskStat,
   11300:	008000c4 	movi	r2,3
   11304:	d8800415 	stw	r2,16(sp)
   11308:	d8000315 	stw	zero,12(sp)
   1130c:	00808004 	movi	r2,512
   11310:	d8800215 	stw	r2,8(sp)
   11314:	008000b4 	movhi	r2,2
   11318:	1080a804 	addi	r2,r2,672
   1131c:	d8800115 	stw	r2,4(sp)
   11320:	00bfff94 	movui	r2,65534
   11324:	d8800015 	stw	r2,0(sp)
   11328:	01c004c4 	movi	r7,19
   1132c:	018000b4 	movhi	r6,2
   11330:	3182a704 	addi	r6,r6,2716
   11334:	000b883a 	mov	r5,zero
   11338:	01000074 	movhi	r4,1
   1133c:	2105de04 	addi	r4,r4,6008
   11340:	0015de80 	call	15de8 <OSTaskCreateExt>
                       OS_TASK_STAT_PRIO);                             /* One higher than the idle task  */
    #endif
#endif

#if OS_TASK_NAME_SIZE > 14
    OSTaskNameSet(OS_TASK_STAT_PRIO, (INT8U *)"uC/OS-II Stat", &err);
   11344:	e1bfff04 	addi	r6,fp,-4
   11348:	014000b4 	movhi	r5,2
   1134c:	29667004 	addi	r5,r5,-26176
   11350:	010004c4 	movi	r4,19
   11354:	00165f80 	call	165f8 <OSTaskNameSet>
#else
#if OS_TASK_NAME_SIZE > 7
    OSTaskNameSet(OS_TASK_STAT_PRIO, (INT8U *)"OS-Stat", &err);
#endif
#endif
}
   11358:	0001883a 	nop
   1135c:	e037883a 	mov	sp,fp
   11360:	dfc00117 	ldw	ra,4(sp)
   11364:	df000017 	ldw	fp,0(sp)
   11368:	dec00204 	addi	sp,sp,8
   1136c:	f800283a 	ret

00011370 <OS_InitTCBList>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitTCBList (void)
{
   11370:	defffb04 	addi	sp,sp,-20
   11374:	dfc00415 	stw	ra,16(sp)
   11378:	df000315 	stw	fp,12(sp)
   1137c:	df000304 	addi	fp,sp,12
    INT8U    i;
    OS_TCB  *ptcb1;
    OS_TCB  *ptcb2;


    OS_MemClr((INT8U *)&OSTCBTbl[0],     sizeof(OSTCBTbl));      /* Clear all the TCBs                 */
   11380:	01414404 	movi	r5,1296
   11384:	010000b4 	movhi	r4,2
   11388:	2107f004 	addi	r4,r4,8128
   1138c:	00114540 	call	11454 <OS_MemClr>
    OS_MemClr((INT8U *)&OSTCBPrioTbl[0], sizeof(OSTCBPrioTbl));  /* Clear the priority table           */
   11390:	01401504 	movi	r5,84
   11394:	010000b4 	movhi	r4,2
   11398:	21093404 	addi	r4,r4,9424
   1139c:	00114540 	call	11454 <OS_MemClr>
    ptcb1 = &OSTCBTbl[0];
   113a0:	008000b4 	movhi	r2,2
   113a4:	1087f004 	addi	r2,r2,8128
   113a8:	e0bffe15 	stw	r2,-8(fp)
    ptcb2 = &OSTCBTbl[1];
   113ac:	008000b4 	movhi	r2,2
   113b0:	10880b04 	addi	r2,r2,8236
   113b4:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < (OS_MAX_TASKS + OS_N_SYS_TASKS - 1); i++) {  /* Init. list of free TCBs            */
   113b8:	e03ffd05 	stb	zero,-12(fp)
   113bc:	00001106 	br	11404 <OS_InitTCBList+0x94>
        ptcb1->OSTCBNext = ptcb2;
   113c0:	e0bffe17 	ldw	r2,-8(fp)
   113c4:	e0ffff17 	ldw	r3,-4(fp)
   113c8:	10c00515 	stw	r3,20(r2)
#if OS_TASK_NAME_SIZE > 1
        ptcb1->OSTCBTaskName[0] = '?';                           /* Unknown name                       */
   113cc:	e0bffe17 	ldw	r2,-8(fp)
   113d0:	00c00fc4 	movi	r3,63
   113d4:	10c01305 	stb	r3,76(r2)
        ptcb1->OSTCBTaskName[1] = OS_ASCII_NUL;
   113d8:	e0bffe17 	ldw	r2,-8(fp)
   113dc:	10001345 	stb	zero,77(r2)
#endif
        ptcb1++;
   113e0:	e0bffe17 	ldw	r2,-8(fp)
   113e4:	10801b04 	addi	r2,r2,108
   113e8:	e0bffe15 	stw	r2,-8(fp)
        ptcb2++;
   113ec:	e0bfff17 	ldw	r2,-4(fp)
   113f0:	10801b04 	addi	r2,r2,108
   113f4:	e0bfff15 	stw	r2,-4(fp)

    OS_MemClr((INT8U *)&OSTCBTbl[0],     sizeof(OSTCBTbl));      /* Clear all the TCBs                 */
    OS_MemClr((INT8U *)&OSTCBPrioTbl[0], sizeof(OSTCBPrioTbl));  /* Clear the priority table           */
    ptcb1 = &OSTCBTbl[0];
    ptcb2 = &OSTCBTbl[1];
    for (i = 0; i < (OS_MAX_TASKS + OS_N_SYS_TASKS - 1); i++) {  /* Init. list of free TCBs            */
   113f8:	e0bffd03 	ldbu	r2,-12(fp)
   113fc:	10800044 	addi	r2,r2,1
   11400:	e0bffd05 	stb	r2,-12(fp)
   11404:	e0bffd03 	ldbu	r2,-12(fp)
   11408:	108002f0 	cmpltui	r2,r2,11
   1140c:	103fec1e 	bne	r2,zero,113c0 <__alt_data_end+0xfffe13c0>
        ptcb1->OSTCBTaskName[1] = OS_ASCII_NUL;
#endif
        ptcb1++;
        ptcb2++;
    }
    ptcb1->OSTCBNext = (OS_TCB *)0;                              /* Last OS_TCB                        */
   11410:	e0bffe17 	ldw	r2,-8(fp)
   11414:	10000515 	stw	zero,20(r2)
#if OS_TASK_NAME_SIZE > 1
    ptcb1->OSTCBTaskName[0] = '?';                               /* Unknown name                       */
   11418:	e0bffe17 	ldw	r2,-8(fp)
   1141c:	00c00fc4 	movi	r3,63
   11420:	10c01305 	stb	r3,76(r2)
    ptcb1->OSTCBTaskName[1] = OS_ASCII_NUL;
   11424:	e0bffe17 	ldw	r2,-8(fp)
   11428:	10001345 	stb	zero,77(r2)
#endif
    OSTCBList               = (OS_TCB *)0;                       /* TCB lists initializations          */
   1142c:	d0272715 	stw	zero,-25444(gp)
    OSTCBFreeList           = &OSTCBTbl[0];
   11430:	008000b4 	movhi	r2,2
   11434:	1087f004 	addi	r2,r2,8128
   11438:	d0a72b15 	stw	r2,-25428(gp)
}
   1143c:	0001883a 	nop
   11440:	e037883a 	mov	sp,fp
   11444:	dfc00117 	ldw	ra,4(sp)
   11448:	df000017 	ldw	fp,0(sp)
   1144c:	dec00204 	addi	sp,sp,8
   11450:	f800283a 	ret

00011454 <OS_MemClr>:
*                 of the alignment of the destination.
*********************************************************************************************************
*/

void  OS_MemClr (INT8U *pdest, INT16U size)
{
   11454:	defffd04 	addi	sp,sp,-12
   11458:	df000215 	stw	fp,8(sp)
   1145c:	df000204 	addi	fp,sp,8
   11460:	e13ffe15 	stw	r4,-8(fp)
   11464:	2805883a 	mov	r2,r5
   11468:	e0bfff0d 	sth	r2,-4(fp)
    while (size > 0) {
   1146c:	00000706 	br	1148c <OS_MemClr+0x38>
        *pdest++ = (INT8U)0;
   11470:	e0bffe17 	ldw	r2,-8(fp)
   11474:	10c00044 	addi	r3,r2,1
   11478:	e0fffe15 	stw	r3,-8(fp)
   1147c:	10000005 	stb	zero,0(r2)
        size--;
   11480:	e0bfff0b 	ldhu	r2,-4(fp)
   11484:	10bfffc4 	addi	r2,r2,-1
   11488:	e0bfff0d 	sth	r2,-4(fp)
*********************************************************************************************************
*/

void  OS_MemClr (INT8U *pdest, INT16U size)
{
    while (size > 0) {
   1148c:	e0bfff0b 	ldhu	r2,-4(fp)
   11490:	103ff71e 	bne	r2,zero,11470 <__alt_data_end+0xfffe1470>
        *pdest++ = (INT8U)0;
        size--;
    }
}
   11494:	0001883a 	nop
   11498:	e037883a 	mov	sp,fp
   1149c:	df000017 	ldw	fp,0(sp)
   114a0:	dec00104 	addi	sp,sp,4
   114a4:	f800283a 	ret

000114a8 <OS_MemCopy>:
*                 of the alignment of the source and destination.
*********************************************************************************************************
*/

void  OS_MemCopy (INT8U *pdest, INT8U *psrc, INT16U size)
{
   114a8:	defffc04 	addi	sp,sp,-16
   114ac:	df000315 	stw	fp,12(sp)
   114b0:	df000304 	addi	fp,sp,12
   114b4:	e13ffd15 	stw	r4,-12(fp)
   114b8:	e17ffe15 	stw	r5,-8(fp)
   114bc:	3005883a 	mov	r2,r6
   114c0:	e0bfff0d 	sth	r2,-4(fp)
    while (size > 0) {
   114c4:	00000b06 	br	114f4 <OS_MemCopy+0x4c>
        *pdest++ = *psrc++;
   114c8:	e0bffd17 	ldw	r2,-12(fp)
   114cc:	10c00044 	addi	r3,r2,1
   114d0:	e0fffd15 	stw	r3,-12(fp)
   114d4:	e0fffe17 	ldw	r3,-8(fp)
   114d8:	19000044 	addi	r4,r3,1
   114dc:	e13ffe15 	stw	r4,-8(fp)
   114e0:	18c00003 	ldbu	r3,0(r3)
   114e4:	10c00005 	stb	r3,0(r2)
        size--;
   114e8:	e0bfff0b 	ldhu	r2,-4(fp)
   114ec:	10bfffc4 	addi	r2,r2,-1
   114f0:	e0bfff0d 	sth	r2,-4(fp)
*********************************************************************************************************
*/

void  OS_MemCopy (INT8U *pdest, INT8U *psrc, INT16U size)
{
    while (size > 0) {
   114f4:	e0bfff0b 	ldhu	r2,-4(fp)
   114f8:	103ff31e 	bne	r2,zero,114c8 <__alt_data_end+0xfffe14c8>
        *pdest++ = *psrc++;
        size--;
    }
}
   114fc:	0001883a 	nop
   11500:	e037883a 	mov	sp,fp
   11504:	df000017 	ldw	fp,0(sp)
   11508:	dec00104 	addi	sp,sp,4
   1150c:	f800283a 	ret

00011510 <OS_Sched>:
*              2) Rescheduling is prevented when the scheduler is locked (see OS_SchedLock())
*********************************************************************************************************
*/

void  OS_Sched (void)
{
   11510:	defffb04 	addi	sp,sp,-20
   11514:	dfc00415 	stw	ra,16(sp)
   11518:	df000315 	stw	fp,12(sp)
   1151c:	df000304 	addi	fp,sp,12
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
   11520:	e03ffd15 	stw	zero,-12(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   11524:	0005303a 	rdctl	r2,status
   11528:	e0bfff15 	stw	r2,-4(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1152c:	e0ffff17 	ldw	r3,-4(fp)
   11530:	00bfff84 	movi	r2,-2
   11534:	1884703a 	and	r2,r3,r2
   11538:	1001703a 	wrctl	status,r2
  
  return context;
   1153c:	e0bfff17 	ldw	r2,-4(fp)
#endif



    OS_ENTER_CRITICAL();
   11540:	e0bffd15 	stw	r2,-12(fp)
    if (OSIntNesting == 0) {                           /* Schedule only if all ISRs done and ...       */
   11544:	d0a73203 	ldbu	r2,-25400(gp)
   11548:	10803fcc 	andi	r2,r2,255
   1154c:	10001a1e 	bne	r2,zero,115b8 <OS_Sched+0xa8>
        if (OSLockNesting == 0) {                      /* ... scheduler is not locked                  */
   11550:	d0a72403 	ldbu	r2,-25456(gp)
   11554:	10803fcc 	andi	r2,r2,255
   11558:	1000171e 	bne	r2,zero,115b8 <OS_Sched+0xa8>
            OS_SchedNew();
   1155c:	00115e00 	call	115e0 <OS_SchedNew>
            if (OSPrioHighRdy != OSPrioCur) {          /* No Ctx Sw if current task is highest rdy     */
   11560:	d0e72603 	ldbu	r3,-25448(gp)
   11564:	d0a72643 	ldbu	r2,-25447(gp)
   11568:	18c03fcc 	andi	r3,r3,255
   1156c:	10803fcc 	andi	r2,r2,255
   11570:	18801126 	beq	r3,r2,115b8 <OS_Sched+0xa8>
                OSTCBHighRdy = OSTCBPrioTbl[OSPrioHighRdy];
   11574:	d0a72603 	ldbu	r2,-25448(gp)
   11578:	10c03fcc 	andi	r3,r2,255
   1157c:	008000b4 	movhi	r2,2
   11580:	10893404 	addi	r2,r2,9424
   11584:	18c7883a 	add	r3,r3,r3
   11588:	18c7883a 	add	r3,r3,r3
   1158c:	10c5883a 	add	r2,r2,r3
   11590:	10800017 	ldw	r2,0(r2)
   11594:	d0a72e15 	stw	r2,-25416(gp)
#if OS_TASK_PROFILE_EN > 0
                OSTCBHighRdy->OSTCBCtxSwCtr++;         /* Inc. # of context switches to this task      */
   11598:	d0a72e17 	ldw	r2,-25416(gp)
   1159c:	10c00e17 	ldw	r3,56(r2)
   115a0:	18c00044 	addi	r3,r3,1
   115a4:	10c00e15 	stw	r3,56(r2)
#endif
                OSCtxSwCtr++;                          /* Increment context switch counter             */
   115a8:	d0a72917 	ldw	r2,-25436(gp)
   115ac:	10800044 	addi	r2,r2,1
   115b0:	d0a72915 	stw	r2,-25436(gp)
                OS_TASK_SW();                          /* Perform a context switch                     */
   115b4:	0018b700 	call	18b70 <OSCtxSw>
   115b8:	e0bffd17 	ldw	r2,-12(fp)
   115bc:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   115c0:	e0bffe17 	ldw	r2,-8(fp)
   115c4:	1001703a 	wrctl	status,r2
            }
        }
    }
    OS_EXIT_CRITICAL();
}
   115c8:	0001883a 	nop
   115cc:	e037883a 	mov	sp,fp
   115d0:	dfc00117 	ldw	ra,4(sp)
   115d4:	df000017 	ldw	fp,0(sp)
   115d8:	dec00204 	addi	sp,sp,8
   115dc:	f800283a 	ret

000115e0 <OS_SchedNew>:
*              2) Interrupts are assumed to be disabled when this function is called.
*********************************************************************************************************
*/

static  void  OS_SchedNew (void)
{
   115e0:	defffe04 	addi	sp,sp,-8
   115e4:	df000115 	stw	fp,4(sp)
   115e8:	df000104 	addi	fp,sp,4
#if OS_LOWEST_PRIO <= 63                         /* See if we support up to 64 tasks                   */
    INT8U   y;


    y             = OSUnMapTbl[OSRdyGrp];
   115ec:	d0a73003 	ldbu	r2,-25408(gp)
   115f0:	10c03fcc 	andi	r3,r2,255
   115f4:	008000b4 	movhi	r2,2
   115f8:	10a62c04 	addi	r2,r2,-26448
   115fc:	10c5883a 	add	r2,r2,r3
   11600:	10800003 	ldbu	r2,0(r2)
   11604:	e0bfff05 	stb	r2,-4(fp)
    OSPrioHighRdy = (INT8U)((y << 3) + OSUnMapTbl[OSRdyTbl[y]]);
   11608:	e0bfff03 	ldbu	r2,-4(fp)
   1160c:	100490fa 	slli	r2,r2,3
   11610:	1009883a 	mov	r4,r2
   11614:	e0ffff03 	ldbu	r3,-4(fp)
   11618:	d0a73044 	addi	r2,gp,-25407
   1161c:	1885883a 	add	r2,r3,r2
   11620:	10800003 	ldbu	r2,0(r2)
   11624:	10c03fcc 	andi	r3,r2,255
   11628:	008000b4 	movhi	r2,2
   1162c:	10a62c04 	addi	r2,r2,-26448
   11630:	10c5883a 	add	r2,r2,r3
   11634:	10800003 	ldbu	r2,0(r2)
   11638:	2085883a 	add	r2,r4,r2
   1163c:	d0a72605 	stb	r2,-25448(gp)
        OSPrioHighRdy = (INT8U)((y << 4) + OSUnMapTbl[(*ptbl & 0xFF)]);
    } else {
        OSPrioHighRdy = (INT8U)((y << 4) + OSUnMapTbl[(*ptbl >> 8) & 0xFF] + 8);
    }
#endif
}
   11640:	0001883a 	nop
   11644:	e037883a 	mov	sp,fp
   11648:	df000017 	ldw	fp,0(sp)
   1164c:	dec00104 	addi	sp,sp,4
   11650:	f800283a 	ret

00011654 <OS_StrCopy>:
*********************************************************************************************************
*/

#if (OS_EVENT_NAME_SIZE > 1) || (OS_FLAG_NAME_SIZE > 1) || (OS_MEM_NAME_SIZE > 1) || (OS_TASK_NAME_SIZE > 1) || (OS_TMR_CFG_NAME_SIZE > 1)
INT8U  OS_StrCopy (INT8U *pdest, INT8U *psrc)
{
   11654:	defffc04 	addi	sp,sp,-16
   11658:	df000315 	stw	fp,12(sp)
   1165c:	df000304 	addi	fp,sp,12
   11660:	e13ffe15 	stw	r4,-8(fp)
   11664:	e17fff15 	stw	r5,-4(fp)
    INT8U  len;


    len = 0;
   11668:	e03ffd05 	stb	zero,-12(fp)
    while (*psrc != OS_ASCII_NUL) {
   1166c:	00000b06 	br	1169c <OS_StrCopy+0x48>
        *pdest++ = *psrc++;
   11670:	e0bffe17 	ldw	r2,-8(fp)
   11674:	10c00044 	addi	r3,r2,1
   11678:	e0fffe15 	stw	r3,-8(fp)
   1167c:	e0ffff17 	ldw	r3,-4(fp)
   11680:	19000044 	addi	r4,r3,1
   11684:	e13fff15 	stw	r4,-4(fp)
   11688:	18c00003 	ldbu	r3,0(r3)
   1168c:	10c00005 	stb	r3,0(r2)
        len++;
   11690:	e0bffd03 	ldbu	r2,-12(fp)
   11694:	10800044 	addi	r2,r2,1
   11698:	e0bffd05 	stb	r2,-12(fp)
{
    INT8U  len;


    len = 0;
    while (*psrc != OS_ASCII_NUL) {
   1169c:	e0bfff17 	ldw	r2,-4(fp)
   116a0:	10800003 	ldbu	r2,0(r2)
   116a4:	10803fcc 	andi	r2,r2,255
   116a8:	103ff11e 	bne	r2,zero,11670 <__alt_data_end+0xfffe1670>
        *pdest++ = *psrc++;
        len++;
    }
    *pdest = OS_ASCII_NUL;
   116ac:	e0bffe17 	ldw	r2,-8(fp)
   116b0:	10000005 	stb	zero,0(r2)
    return (len);
   116b4:	e0bffd03 	ldbu	r2,-12(fp)
}
   116b8:	e037883a 	mov	sp,fp
   116bc:	df000017 	ldw	fp,0(sp)
   116c0:	dec00104 	addi	sp,sp,4
   116c4:	f800283a 	ret

000116c8 <OS_StrLen>:
*********************************************************************************************************
*/

#if (OS_EVENT_NAME_SIZE > 1) || (OS_FLAG_NAME_SIZE > 1) || (OS_MEM_NAME_SIZE > 1) || (OS_TASK_NAME_SIZE > 1) || (OS_TMR_CFG_NAME_SIZE > 1)
INT8U  OS_StrLen (INT8U *psrc)
{
   116c8:	defffd04 	addi	sp,sp,-12
   116cc:	df000215 	stw	fp,8(sp)
   116d0:	df000204 	addi	fp,sp,8
   116d4:	e13fff15 	stw	r4,-4(fp)
    INT8U  len;


    len = 0;
   116d8:	e03ffe05 	stb	zero,-8(fp)
    while (*psrc != OS_ASCII_NUL) {
   116dc:	00000606 	br	116f8 <OS_StrLen+0x30>
        psrc++;
   116e0:	e0bfff17 	ldw	r2,-4(fp)
   116e4:	10800044 	addi	r2,r2,1
   116e8:	e0bfff15 	stw	r2,-4(fp)
        len++;
   116ec:	e0bffe03 	ldbu	r2,-8(fp)
   116f0:	10800044 	addi	r2,r2,1
   116f4:	e0bffe05 	stb	r2,-8(fp)
{
    INT8U  len;


    len = 0;
    while (*psrc != OS_ASCII_NUL) {
   116f8:	e0bfff17 	ldw	r2,-4(fp)
   116fc:	10800003 	ldbu	r2,0(r2)
   11700:	10803fcc 	andi	r2,r2,255
   11704:	103ff61e 	bne	r2,zero,116e0 <__alt_data_end+0xfffe16e0>
        psrc++;
        len++;
    }
    return (len);
   11708:	e0bffe03 	ldbu	r2,-8(fp)
}
   1170c:	e037883a 	mov	sp,fp
   11710:	df000017 	ldw	fp,0(sp)
   11714:	dec00104 	addi	sp,sp,4
   11718:	f800283a 	ret

0001171c <OS_TaskIdle>:
*                 power.
*********************************************************************************************************
*/

void  OS_TaskIdle (void *p_arg)
{
   1171c:	defffa04 	addi	sp,sp,-24
   11720:	dfc00515 	stw	ra,20(sp)
   11724:	df000415 	stw	fp,16(sp)
   11728:	df000404 	addi	fp,sp,16
   1172c:	e13fff15 	stw	r4,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   11730:	e03ffc15 	stw	zero,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   11734:	0005303a 	rdctl	r2,status
   11738:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1173c:	e0fffd17 	ldw	r3,-12(fp)
   11740:	00bfff84 	movi	r2,-2
   11744:	1884703a 	and	r2,r3,r2
   11748:	1001703a 	wrctl	status,r2
  
  return context;
   1174c:	e0bffd17 	ldw	r2,-12(fp)



    (void)p_arg;                                 /* Prevent compiler warning for not using 'p_arg'     */
    for (;;) {
        OS_ENTER_CRITICAL();
   11750:	e0bffc15 	stw	r2,-16(fp)
        OSIdleCtr++;
   11754:	d0a72517 	ldw	r2,-25452(gp)
   11758:	10800044 	addi	r2,r2,1
   1175c:	d0a72515 	stw	r2,-25452(gp)
   11760:	e0bffc17 	ldw	r2,-16(fp)
   11764:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   11768:	e0bffe17 	ldw	r2,-8(fp)
   1176c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OSTaskIdleHook();                        /* Call user definable HOOK                           */
   11770:	0018e840 	call	18e84 <OSTaskIdleHook>
    }
   11774:	003fef06 	br	11734 <__alt_data_end+0xfffe1734>

00011778 <OS_TaskStat>:
*********************************************************************************************************
*/

#if OS_TASK_STAT_EN > 0
void  OS_TaskStat (void *p_arg)
{
   11778:	defffa04 	addi	sp,sp,-24
   1177c:	dfc00515 	stw	ra,20(sp)
   11780:	df000415 	stw	fp,16(sp)
   11784:	df000404 	addi	fp,sp,16
   11788:	e13fff15 	stw	r4,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   1178c:	e03ffc15 	stw	zero,-16(fp)
#endif



    (void)p_arg;                                 /* Prevent compiler warning for not using 'p_arg'     */
    while (OSStatRdy == OS_FALSE) {
   11790:	00000206 	br	1179c <OS_TaskStat+0x24>
        OSTimeDly(2 * OS_TICKS_PER_SEC / 10);    /* Wait until statistic task is ready                 */
   11794:	01003204 	movi	r4,200
   11798:	0016eb80 	call	16eb8 <OSTimeDly>
#endif



    (void)p_arg;                                 /* Prevent compiler warning for not using 'p_arg'     */
    while (OSStatRdy == OS_FALSE) {
   1179c:	d0a73603 	ldbu	r2,-25384(gp)
   117a0:	10803fcc 	andi	r2,r2,255
   117a4:	103ffb26 	beq	r2,zero,11794 <__alt_data_end+0xfffe1794>
        OSTimeDly(2 * OS_TICKS_PER_SEC / 10);    /* Wait until statistic task is ready                 */
    }
    OSIdleCtrMax /= 100L;
   117a8:	d0a72a17 	ldw	r2,-25432(gp)
   117ac:	01401904 	movi	r5,100
   117b0:	1009883a 	mov	r4,r2
   117b4:	0000dc40 	call	dc4 <__udivsi3>
   117b8:	d0a72a15 	stw	r2,-25432(gp)
    if (OSIdleCtrMax == 0L) {
   117bc:	d0a72a17 	ldw	r2,-25432(gp)
   117c0:	1000031e 	bne	r2,zero,117d0 <OS_TaskStat+0x58>
        OSCPUUsage = 0;
   117c4:	d0272c05 	stb	zero,-25424(gp)
        (void)OSTaskSuspend(OS_PRIO_SELF);
   117c8:	01003fc4 	movi	r4,255
   117cc:	0016b400 	call	16b40 <OSTaskSuspend>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   117d0:	0005303a 	rdctl	r2,status
   117d4:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   117d8:	e0fffd17 	ldw	r3,-12(fp)
   117dc:	00bfff84 	movi	r2,-2
   117e0:	1884703a 	and	r2,r3,r2
   117e4:	1001703a 	wrctl	status,r2
  
  return context;
   117e8:	e0bffd17 	ldw	r2,-12(fp)
    }
    for (;;) {
        OS_ENTER_CRITICAL();
   117ec:	e0bffc15 	stw	r2,-16(fp)
        OSIdleCtrRun = OSIdleCtr;                /* Obtain the of the idle counter for the past second */
   117f0:	d0a72517 	ldw	r2,-25452(gp)
   117f4:	d0a73715 	stw	r2,-25380(gp)
        OSIdleCtr    = 0L;                       /* Reset the idle counter for the next second         */
   117f8:	d0272515 	stw	zero,-25452(gp)
   117fc:	e0bffc17 	ldw	r2,-16(fp)
   11800:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   11804:	e0bffe17 	ldw	r2,-8(fp)
   11808:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OSCPUUsage   = (INT8U)(100L - OSIdleCtrRun / OSIdleCtrMax);
   1180c:	d0a73717 	ldw	r2,-25380(gp)
   11810:	d0e72a17 	ldw	r3,-25432(gp)
   11814:	180b883a 	mov	r5,r3
   11818:	1009883a 	mov	r4,r2
   1181c:	0000dc40 	call	dc4 <__udivsi3>
   11820:	1007883a 	mov	r3,r2
   11824:	00801904 	movi	r2,100
   11828:	10c5c83a 	sub	r2,r2,r3
   1182c:	d0a72c05 	stb	r2,-25424(gp)
        OSTaskStatHook();                        /* Invoke user definable hook                         */
   11830:	0018e040 	call	18e04 <OSTaskStatHook>
#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
        OS_TaskStatStkChk();                     /* Check the stacks for each task                     */
   11834:	00118440 	call	11844 <OS_TaskStatStkChk>
#endif
        OSTimeDly(OS_TICKS_PER_SEC / 10);        /* Accumulate OSIdleCtr for the next 1/10 second      */
   11838:	01001904 	movi	r4,100
   1183c:	0016eb80 	call	16eb8 <OSTimeDly>
    }
   11840:	003fe306 	br	117d0 <__alt_data_end+0xfffe17d0>

00011844 <OS_TaskStatStkChk>:
*********************************************************************************************************
*/

#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
void  OS_TaskStatStkChk (void)
{
   11844:	defffa04 	addi	sp,sp,-24
   11848:	dfc00515 	stw	ra,20(sp)
   1184c:	df000415 	stw	fp,16(sp)
   11850:	df000404 	addi	fp,sp,16
    OS_STK_DATA  stk_data;
    INT8U        err;
    INT8U        prio;


    for (prio = 0; prio <= OS_TASK_IDLE_PRIO; prio++) {
   11854:	e03ffc05 	stb	zero,-16(fp)
   11858:	00002406 	br	118ec <OS_TaskStatStkChk+0xa8>
        err = OSTaskStkChk(prio, &stk_data);
   1185c:	e0bffc03 	ldbu	r2,-16(fp)
   11860:	e0fffe04 	addi	r3,fp,-8
   11864:	180b883a 	mov	r5,r3
   11868:	1009883a 	mov	r4,r2
   1186c:	00169800 	call	16980 <OSTaskStkChk>
   11870:	e0bffc45 	stb	r2,-15(fp)
        if (err == OS_ERR_NONE) {
   11874:	e0bffc43 	ldbu	r2,-15(fp)
   11878:	1000191e 	bne	r2,zero,118e0 <OS_TaskStatStkChk+0x9c>
            ptcb = OSTCBPrioTbl[prio];
   1187c:	e0fffc03 	ldbu	r3,-16(fp)
   11880:	008000b4 	movhi	r2,2
   11884:	10893404 	addi	r2,r2,9424
   11888:	18c7883a 	add	r3,r3,r3
   1188c:	18c7883a 	add	r3,r3,r3
   11890:	10c5883a 	add	r2,r2,r3
   11894:	10800017 	ldw	r2,0(r2)
   11898:	e0bffd15 	stw	r2,-12(fp)
            if (ptcb != (OS_TCB *)0) {                               /* Make sure task 'ptcb' is ...   */
   1189c:	e0bffd17 	ldw	r2,-12(fp)
   118a0:	10000f26 	beq	r2,zero,118e0 <OS_TaskStatStkChk+0x9c>
                if (ptcb != OS_TCB_RESERVED) {                       /* ... still valid.               */
   118a4:	e0bffd17 	ldw	r2,-12(fp)
   118a8:	10800060 	cmpeqi	r2,r2,1
   118ac:	10000c1e 	bne	r2,zero,118e0 <OS_TaskStatStkChk+0x9c>
#if OS_TASK_PROFILE_EN > 0
                    #if OS_STK_GROWTH == 1
                    ptcb->OSTCBStkBase = ptcb->OSTCBStkBottom + ptcb->OSTCBStkSize;
   118b0:	e0bffd17 	ldw	r2,-12(fp)
   118b4:	10c00217 	ldw	r3,8(r2)
   118b8:	e0bffd17 	ldw	r2,-12(fp)
   118bc:	10800317 	ldw	r2,12(r2)
   118c0:	1085883a 	add	r2,r2,r2
   118c4:	1085883a 	add	r2,r2,r2
   118c8:	1887883a 	add	r3,r3,r2
   118cc:	e0bffd17 	ldw	r2,-12(fp)
   118d0:	10c01115 	stw	r3,68(r2)
                    #else
                    ptcb->OSTCBStkBase = ptcb->OSTCBStkBottom - ptcb->OSTCBStkSize;
                    #endif
                    ptcb->OSTCBStkUsed = stk_data.OSUsed;            /* Store the number of bytes used */
   118d4:	e0ffff17 	ldw	r3,-4(fp)
   118d8:	e0bffd17 	ldw	r2,-12(fp)
   118dc:	10c01215 	stw	r3,72(r2)
    OS_STK_DATA  stk_data;
    INT8U        err;
    INT8U        prio;


    for (prio = 0; prio <= OS_TASK_IDLE_PRIO; prio++) {
   118e0:	e0bffc03 	ldbu	r2,-16(fp)
   118e4:	10800044 	addi	r2,r2,1
   118e8:	e0bffc05 	stb	r2,-16(fp)
   118ec:	e0bffc03 	ldbu	r2,-16(fp)
   118f0:	10800570 	cmpltui	r2,r2,21
   118f4:	103fd91e 	bne	r2,zero,1185c <__alt_data_end+0xfffe185c>
#endif
                }
            }
        }
    }
}
   118f8:	0001883a 	nop
   118fc:	e037883a 	mov	sp,fp
   11900:	dfc00117 	ldw	ra,4(sp)
   11904:	df000017 	ldw	fp,0(sp)
   11908:	dec00204 	addi	sp,sp,8
   1190c:	f800283a 	ret

00011910 <OS_TCBInit>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

INT8U  OS_TCBInit (INT8U prio, OS_STK *ptos, OS_STK *pbos, INT16U id, INT32U stk_size, void *pext, INT16U opt)
{
   11910:	defff204 	addi	sp,sp,-56
   11914:	dfc00d15 	stw	ra,52(sp)
   11918:	df000c15 	stw	fp,48(sp)
   1191c:	df000c04 	addi	fp,sp,48
   11920:	e17ffc15 	stw	r5,-16(fp)
   11924:	e1bffd15 	stw	r6,-12(fp)
   11928:	3807883a 	mov	r3,r7
   1192c:	e0800417 	ldw	r2,16(fp)
   11930:	e13ffb05 	stb	r4,-20(fp)
   11934:	e0fffe0d 	sth	r3,-8(fp)
   11938:	e0bfff0d 	sth	r2,-4(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
   1193c:	e03ff415 	stw	zero,-48(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   11940:	0005303a 	rdctl	r2,status
   11944:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   11948:	e0fffa17 	ldw	r3,-24(fp)
   1194c:	00bfff84 	movi	r2,-2
   11950:	1884703a 	and	r2,r3,r2
   11954:	1001703a 	wrctl	status,r2
  
  return context;
   11958:	e0bffa17 	ldw	r2,-24(fp)
#endif



    OS_ENTER_CRITICAL();
   1195c:	e0bff415 	stw	r2,-48(fp)
    ptcb = OSTCBFreeList;                                  /* Get a free TCB from the free TCB list    */
   11960:	d0a72b17 	ldw	r2,-25428(gp)
   11964:	e0bff615 	stw	r2,-40(fp)
    if (ptcb != (OS_TCB *)0) {
   11968:	e0bff617 	ldw	r2,-40(fp)
   1196c:	10009326 	beq	r2,zero,11bbc <OS_TCBInit+0x2ac>
        OSTCBFreeList            = ptcb->OSTCBNext;        /* Update pointer to free TCB list          */
   11970:	e0bff617 	ldw	r2,-40(fp)
   11974:	10800517 	ldw	r2,20(r2)
   11978:	d0a72b15 	stw	r2,-25428(gp)
   1197c:	e0bff417 	ldw	r2,-48(fp)
   11980:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   11984:	e0bff817 	ldw	r2,-32(fp)
   11988:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        ptcb->OSTCBStkPtr        = ptos;                   /* Load Stack pointer in TCB                */
   1198c:	e0bff617 	ldw	r2,-40(fp)
   11990:	e0fffc17 	ldw	r3,-16(fp)
   11994:	10c00015 	stw	r3,0(r2)
        ptcb->OSTCBPrio          = prio;                   /* Load task priority into TCB              */
   11998:	e0bff617 	ldw	r2,-40(fp)
   1199c:	e0fffb03 	ldbu	r3,-20(fp)
   119a0:	10c00c85 	stb	r3,50(r2)
        ptcb->OSTCBStat          = OS_STAT_RDY;            /* Task is ready to run                     */
   119a4:	e0bff617 	ldw	r2,-40(fp)
   119a8:	10000c05 	stb	zero,48(r2)
        ptcb->OSTCBStatPend      = OS_STAT_PEND_OK;        /* Clear pend status                        */
   119ac:	e0bff617 	ldw	r2,-40(fp)
   119b0:	10000c45 	stb	zero,49(r2)
        ptcb->OSTCBDly           = 0;                      /* Task is not delayed                      */
   119b4:	e0bff617 	ldw	r2,-40(fp)
   119b8:	10000b8d 	sth	zero,46(r2)

#if OS_TASK_CREATE_EXT_EN > 0
        ptcb->OSTCBExtPtr        = pext;                   /* Store pointer to TCB extension           */
   119bc:	e0bff617 	ldw	r2,-40(fp)
   119c0:	e0c00317 	ldw	r3,12(fp)
   119c4:	10c00115 	stw	r3,4(r2)
        ptcb->OSTCBStkSize       = stk_size;               /* Store stack size                         */
   119c8:	e0bff617 	ldw	r2,-40(fp)
   119cc:	e0c00217 	ldw	r3,8(fp)
   119d0:	10c00315 	stw	r3,12(r2)
        ptcb->OSTCBStkBottom     = pbos;                   /* Store pointer to bottom of stack         */
   119d4:	e0bff617 	ldw	r2,-40(fp)
   119d8:	e0fffd17 	ldw	r3,-12(fp)
   119dc:	10c00215 	stw	r3,8(r2)
        ptcb->OSTCBOpt           = opt;                    /* Store task options                       */
   119e0:	e0bff617 	ldw	r2,-40(fp)
   119e4:	e0ffff0b 	ldhu	r3,-4(fp)
   119e8:	10c0040d 	sth	r3,16(r2)
        ptcb->OSTCBId            = id;                     /* Store task ID                            */
   119ec:	e0bff617 	ldw	r2,-40(fp)
   119f0:	e0fffe0b 	ldhu	r3,-8(fp)
   119f4:	10c0048d 	sth	r3,18(r2)
        opt                      = opt;
        id                       = id;
#endif

#if OS_TASK_DEL_EN > 0
        ptcb->OSTCBDelReq        = OS_ERR_NONE;
   119f8:	e0bff617 	ldw	r2,-40(fp)
   119fc:	10000dc5 	stb	zero,55(r2)
#endif

#if OS_LOWEST_PRIO <= 63
        ptcb->OSTCBY             = (INT8U)(prio >> 3);          /* Pre-compute X, Y, BitX and BitY     */
   11a00:	e0bffb03 	ldbu	r2,-20(fp)
   11a04:	1004d0fa 	srli	r2,r2,3
   11a08:	1007883a 	mov	r3,r2
   11a0c:	e0bff617 	ldw	r2,-40(fp)
   11a10:	10c00d05 	stb	r3,52(r2)
        ptcb->OSTCBX             = (INT8U)(prio & 0x07);
   11a14:	e0bffb03 	ldbu	r2,-20(fp)
   11a18:	108001cc 	andi	r2,r2,7
   11a1c:	1007883a 	mov	r3,r2
   11a20:	e0bff617 	ldw	r2,-40(fp)
   11a24:	10c00cc5 	stb	r3,51(r2)
        ptcb->OSTCBBitY          = (INT8U)(1 << ptcb->OSTCBY);
   11a28:	e0bff617 	ldw	r2,-40(fp)
   11a2c:	10800d03 	ldbu	r2,52(r2)
   11a30:	10803fcc 	andi	r2,r2,255
   11a34:	00c00044 	movi	r3,1
   11a38:	1884983a 	sll	r2,r3,r2
   11a3c:	1007883a 	mov	r3,r2
   11a40:	e0bff617 	ldw	r2,-40(fp)
   11a44:	10c00d85 	stb	r3,54(r2)
        ptcb->OSTCBBitX          = (INT8U)(1 << ptcb->OSTCBX);
   11a48:	e0bff617 	ldw	r2,-40(fp)
   11a4c:	10800cc3 	ldbu	r2,51(r2)
   11a50:	10803fcc 	andi	r2,r2,255
   11a54:	00c00044 	movi	r3,1
   11a58:	1884983a 	sll	r2,r3,r2
   11a5c:	1007883a 	mov	r3,r2
   11a60:	e0bff617 	ldw	r2,-40(fp)
   11a64:	10c00d45 	stb	r3,53(r2)
        ptcb->OSTCBBitY          = (INT16U)(1 << ptcb->OSTCBY);
        ptcb->OSTCBBitX          = (INT16U)(1 << ptcb->OSTCBX);
#endif

#if (OS_EVENT_EN)
        ptcb->OSTCBEventPtr      = (OS_EVENT  *)0;         /* Task is not pending on an  event         */
   11a68:	e0bff617 	ldw	r2,-40(fp)
   11a6c:	10000715 	stw	zero,28(r2)
#if (OS_EVENT_MULTI_EN > 0)
        ptcb->OSTCBEventMultiPtr = (OS_EVENT **)0;         /* Task is not pending on any events        */
   11a70:	e0bff617 	ldw	r2,-40(fp)
   11a74:	10000815 	stw	zero,32(r2)
#endif
#endif

#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0) && (OS_TASK_DEL_EN > 0)
        ptcb->OSTCBFlagNode  = (OS_FLAG_NODE *)0;          /* Task is not pending on an event flag     */
   11a78:	e0bff617 	ldw	r2,-40(fp)
   11a7c:	10000a15 	stw	zero,40(r2)
#endif

#if (OS_MBOX_EN > 0) || ((OS_Q_EN > 0) && (OS_MAX_QS > 0))
        ptcb->OSTCBMsg       = (void *)0;                  /* No message received                      */
   11a80:	e0bff617 	ldw	r2,-40(fp)
   11a84:	10000915 	stw	zero,36(r2)
#endif

#if OS_TASK_PROFILE_EN > 0
        ptcb->OSTCBCtxSwCtr    = 0L;                       /* Initialize profiling variables           */
   11a88:	e0bff617 	ldw	r2,-40(fp)
   11a8c:	10000e15 	stw	zero,56(r2)
        ptcb->OSTCBCyclesStart = 0L;
   11a90:	e0bff617 	ldw	r2,-40(fp)
   11a94:	10001015 	stw	zero,64(r2)
        ptcb->OSTCBCyclesTot   = 0L;
   11a98:	e0bff617 	ldw	r2,-40(fp)
   11a9c:	10000f15 	stw	zero,60(r2)
        ptcb->OSTCBStkBase     = (OS_STK *)0;
   11aa0:	e0bff617 	ldw	r2,-40(fp)
   11aa4:	10001115 	stw	zero,68(r2)
        ptcb->OSTCBStkUsed     = 0L;
   11aa8:	e0bff617 	ldw	r2,-40(fp)
   11aac:	10001215 	stw	zero,72(r2)
#endif

#if OS_TASK_NAME_SIZE > 1
        ptcb->OSTCBTaskName[0] = '?';                      /* Unknown name at task creation            */
   11ab0:	e0bff617 	ldw	r2,-40(fp)
   11ab4:	00c00fc4 	movi	r3,63
   11ab8:	10c01305 	stb	r3,76(r2)
        ptcb->OSTCBTaskName[1] = OS_ASCII_NUL;
   11abc:	e0bff617 	ldw	r2,-40(fp)
   11ac0:	10001345 	stb	zero,77(r2)
#endif

        OSTCBInitHook(ptcb);
   11ac4:	e13ff617 	ldw	r4,-40(fp)
   11ac8:	0018ea40 	call	18ea4 <OSTCBInitHook>

        OSTaskCreateHook(ptcb);                            /* Call user defined hook                   */
   11acc:	e13ff617 	ldw	r4,-40(fp)
   11ad0:	0018d9c0 	call	18d9c <OSTaskCreateHook>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   11ad4:	0005303a 	rdctl	r2,status
   11ad8:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   11adc:	e0fff517 	ldw	r3,-44(fp)
   11ae0:	00bfff84 	movi	r2,-2
   11ae4:	1884703a 	and	r2,r3,r2
   11ae8:	1001703a 	wrctl	status,r2
  
  return context;
   11aec:	e0bff517 	ldw	r2,-44(fp)

        OS_ENTER_CRITICAL();
   11af0:	e0bff415 	stw	r2,-48(fp)
        OSTCBPrioTbl[prio] = ptcb;
   11af4:	e0fffb03 	ldbu	r3,-20(fp)
   11af8:	008000b4 	movhi	r2,2
   11afc:	10893404 	addi	r2,r2,9424
   11b00:	18c7883a 	add	r3,r3,r3
   11b04:	18c7883a 	add	r3,r3,r3
   11b08:	10c5883a 	add	r2,r2,r3
   11b0c:	e0fff617 	ldw	r3,-40(fp)
   11b10:	10c00015 	stw	r3,0(r2)
        ptcb->OSTCBNext    = OSTCBList;                    /* Link into TCB chain                      */
   11b14:	d0e72717 	ldw	r3,-25444(gp)
   11b18:	e0bff617 	ldw	r2,-40(fp)
   11b1c:	10c00515 	stw	r3,20(r2)
        ptcb->OSTCBPrev    = (OS_TCB *)0;
   11b20:	e0bff617 	ldw	r2,-40(fp)
   11b24:	10000615 	stw	zero,24(r2)
        if (OSTCBList != (OS_TCB *)0) {
   11b28:	d0a72717 	ldw	r2,-25444(gp)
   11b2c:	10000326 	beq	r2,zero,11b3c <OS_TCBInit+0x22c>
            OSTCBList->OSTCBPrev = ptcb;
   11b30:	d0a72717 	ldw	r2,-25444(gp)
   11b34:	e0fff617 	ldw	r3,-40(fp)
   11b38:	10c00615 	stw	r3,24(r2)
        }
        OSTCBList               = ptcb;
   11b3c:	e0bff617 	ldw	r2,-40(fp)
   11b40:	d0a72715 	stw	r2,-25444(gp)
        OSRdyGrp               |= ptcb->OSTCBBitY;         /* Make task ready to run                   */
   11b44:	e0bff617 	ldw	r2,-40(fp)
   11b48:	10c00d83 	ldbu	r3,54(r2)
   11b4c:	d0a73003 	ldbu	r2,-25408(gp)
   11b50:	1884b03a 	or	r2,r3,r2
   11b54:	d0a73005 	stb	r2,-25408(gp)
        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
   11b58:	e0bff617 	ldw	r2,-40(fp)
   11b5c:	10800d03 	ldbu	r2,52(r2)
   11b60:	10c03fcc 	andi	r3,r2,255
   11b64:	e0bff617 	ldw	r2,-40(fp)
   11b68:	10800d03 	ldbu	r2,52(r2)
   11b6c:	11003fcc 	andi	r4,r2,255
   11b70:	d0a73044 	addi	r2,gp,-25407
   11b74:	2085883a 	add	r2,r4,r2
   11b78:	11000003 	ldbu	r4,0(r2)
   11b7c:	e0bff617 	ldw	r2,-40(fp)
   11b80:	10800d43 	ldbu	r2,53(r2)
   11b84:	2084b03a 	or	r2,r4,r2
   11b88:	1009883a 	mov	r4,r2
   11b8c:	d0a73044 	addi	r2,gp,-25407
   11b90:	1885883a 	add	r2,r3,r2
   11b94:	11000005 	stb	r4,0(r2)
        OSTaskCtr++;                                       /* Increment the #tasks counter             */
   11b98:	d0a72c43 	ldbu	r2,-25423(gp)
   11b9c:	10800044 	addi	r2,r2,1
   11ba0:	d0a72c45 	stb	r2,-25423(gp)
   11ba4:	e0bff417 	ldw	r2,-48(fp)
   11ba8:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   11bac:	e0bff717 	ldw	r2,-36(fp)
   11bb0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_NONE);
   11bb4:	0005883a 	mov	r2,zero
   11bb8:	00000506 	br	11bd0 <OS_TCBInit+0x2c0>
   11bbc:	e0bff417 	ldw	r2,-48(fp)
   11bc0:	e0bff915 	stw	r2,-28(fp)
   11bc4:	e0bff917 	ldw	r2,-28(fp)
   11bc8:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_TASK_NO_MORE_TCB);
   11bcc:	00801084 	movi	r2,66
}
   11bd0:	e037883a 	mov	sp,fp
   11bd4:	dfc00117 	ldw	ra,4(sp)
   11bd8:	df000017 	ldw	fp,0(sp)
   11bdc:	dec00204 	addi	sp,sp,8
   11be0:	f800283a 	ret

00011be4 <OSDebugInit>:
*********************************************************************************************************
*/

#if OS_DEBUG_EN > 0
void  OSDebugInit (void)
{
   11be4:	defffe04 	addi	sp,sp,-8
   11be8:	df000115 	stw	fp,4(sp)
   11bec:	df000104 	addi	fp,sp,4
    void  *ptemp;

    
    ptemp = (void *)&OSDebugEn;
   11bf0:	d0a01104 	addi	r2,gp,-32700
   11bf4:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSEndiannessTest;
   11bf8:	d0a01204 	addi	r2,gp,-32696
   11bfc:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSEventMax;
   11c00:	d0a01384 	addi	r2,gp,-32690
   11c04:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventNameSize;
   11c08:	d0a01404 	addi	r2,gp,-32688
   11c0c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventEn;
   11c10:	d0a01304 	addi	r2,gp,-32692
   11c14:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventSize;
   11c18:	d0a01484 	addi	r2,gp,-32686
   11c1c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventTblSize;
   11c20:	d0a01504 	addi	r2,gp,-32684
   11c24:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventMultiEn;
   11c28:	d0a01584 	addi	r2,gp,-32682
   11c2c:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSFlagEn;
   11c30:	d0a01604 	addi	r2,gp,-32680
   11c34:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagGrpSize;
   11c38:	d0a01684 	addi	r2,gp,-32678
   11c3c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagNodeSize;
   11c40:	d0a01704 	addi	r2,gp,-32676
   11c44:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagWidth;
   11c48:	d0a01784 	addi	r2,gp,-32674
   11c4c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagMax;
   11c50:	d0a01804 	addi	r2,gp,-32672
   11c54:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagNameSize;
   11c58:	d0a01884 	addi	r2,gp,-32670
   11c5c:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSLowestPrio;
   11c60:	d0a01904 	addi	r2,gp,-32668
   11c64:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSMboxEn;
   11c68:	d0a01984 	addi	r2,gp,-32666
   11c6c:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSMemEn;
   11c70:	d0a01a04 	addi	r2,gp,-32664
   11c74:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemMax;
   11c78:	d0a01a84 	addi	r2,gp,-32662
   11c7c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemNameSize;
   11c80:	d0a01b04 	addi	r2,gp,-32660
   11c84:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemSize;
   11c88:	d0a01b84 	addi	r2,gp,-32658
   11c8c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemTblSize;
   11c90:	d0a01c04 	addi	r2,gp,-32656
   11c94:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSMutexEn;
   11c98:	d0a01c84 	addi	r2,gp,-32654
   11c9c:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSPtrSize;
   11ca0:	d0a01d04 	addi	r2,gp,-32652
   11ca4:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSQEn;
   11ca8:	d0a01d84 	addi	r2,gp,-32650
   11cac:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSQMax;
   11cb0:	d0a01e04 	addi	r2,gp,-32648
   11cb4:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSQSize;
   11cb8:	d0a01e84 	addi	r2,gp,-32646
   11cbc:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSRdyTblSize;
   11cc0:	d0a01f04 	addi	r2,gp,-32644
   11cc4:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSSemEn;
   11cc8:	d0a01f84 	addi	r2,gp,-32642
   11ccc:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSStkWidth;
   11cd0:	d0a02004 	addi	r2,gp,-32640
   11cd4:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTaskCreateEn;
   11cd8:	d0a02084 	addi	r2,gp,-32638
   11cdc:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskCreateExtEn;
   11ce0:	d0a02104 	addi	r2,gp,-32636
   11ce4:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskDelEn;
   11ce8:	d0a02184 	addi	r2,gp,-32634
   11cec:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskIdleStkSize;
   11cf0:	d0a02204 	addi	r2,gp,-32632
   11cf4:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskProfileEn;
   11cf8:	d0a02284 	addi	r2,gp,-32630
   11cfc:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskMax;
   11d00:	d0a02304 	addi	r2,gp,-32628
   11d04:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskNameSize;
   11d08:	d0a02384 	addi	r2,gp,-32626
   11d0c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskStatEn;
   11d10:	d0a02404 	addi	r2,gp,-32624
   11d14:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskStatStkSize;
   11d18:	d0a02484 	addi	r2,gp,-32622
   11d1c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskStatStkChkEn;
   11d20:	d0a02504 	addi	r2,gp,-32620
   11d24:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskSwHookEn;
   11d28:	d0a02584 	addi	r2,gp,-32618
   11d2c:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTCBPrioTblMax;
   11d30:	d0a02604 	addi	r2,gp,-32616
   11d34:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTCBSize;
   11d38:	d0a02684 	addi	r2,gp,-32614
   11d3c:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTicksPerSec;
   11d40:	d0a02704 	addi	r2,gp,-32612
   11d44:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTimeTickHookEn;
   11d48:	d0a02784 	addi	r2,gp,-32610
   11d4c:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTmrWheelSize;
    ptemp = (void *)&OSTmrWheelTblSize;
#endif

    ptemp = (void *)&OSVersionNbr;
   11d50:	d0a02804 	addi	r2,gp,-32608
   11d54:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSDataSize;
   11d58:	d0a02d04 	addi	r2,gp,-32588
   11d5c:	e0bfff15 	stw	r2,-4(fp)

    ptemp = ptemp;                             /* Prevent compiler warning for 'ptemp' not being used! */
}
   11d60:	0001883a 	nop
   11d64:	e037883a 	mov	sp,fp
   11d68:	df000017 	ldw	fp,0(sp)
   11d6c:	dec00104 	addi	sp,sp,4
   11d70:	f800283a 	ret

00011d74 <OSFlagAccept>:
*********************************************************************************************************
*/

#if OS_FLAG_ACCEPT_EN > 0
OS_FLAGS  OSFlagAccept (OS_FLAG_GRP *pgrp, OS_FLAGS flags, INT8U wait_type, INT8U *perr)
{
   11d74:	defff204 	addi	sp,sp,-56
   11d78:	df000d15 	stw	fp,52(sp)
   11d7c:	df000d04 	addi	fp,sp,52
   11d80:	e13ffc15 	stw	r4,-16(fp)
   11d84:	2807883a 	mov	r3,r5
   11d88:	3005883a 	mov	r2,r6
   11d8c:	e1ffff15 	stw	r7,-4(fp)
   11d90:	e0fffd0d 	sth	r3,-12(fp)
   11d94:	e0bffe05 	stb	r2,-8(fp)
    OS_FLAGS      flags_rdy;
    INT8U         result;
    BOOLEAN       consume;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
   11d98:	e03ff415 	stw	zero,-48(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
   11d9c:	e0bfff17 	ldw	r2,-4(fp)
   11da0:	1000021e 	bne	r2,zero,11dac <OSFlagAccept+0x38>
        return ((OS_FLAGS)0);
   11da4:	0005883a 	mov	r2,zero
   11da8:	0000b006 	br	1206c <OSFlagAccept+0x2f8>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                        /* Validate 'pgrp'                          */
   11dac:	e0bffc17 	ldw	r2,-16(fp)
   11db0:	1000051e 	bne	r2,zero,11dc8 <OSFlagAccept+0x54>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
   11db4:	e0bfff17 	ldw	r2,-4(fp)
   11db8:	00c01b84 	movi	r3,110
   11dbc:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
   11dc0:	0005883a 	mov	r2,zero
   11dc4:	0000a906 	br	1206c <OSFlagAccept+0x2f8>
    }
#endif
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {          /* Validate event block type                */
   11dc8:	e0bffc17 	ldw	r2,-16(fp)
   11dcc:	10800003 	ldbu	r2,0(r2)
   11dd0:	10803fcc 	andi	r2,r2,255
   11dd4:	10800160 	cmpeqi	r2,r2,5
   11dd8:	1000051e 	bne	r2,zero,11df0 <OSFlagAccept+0x7c>
        *perr = OS_ERR_EVENT_TYPE;
   11ddc:	e0bfff17 	ldw	r2,-4(fp)
   11de0:	00c00044 	movi	r3,1
   11de4:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
   11de8:	0005883a 	mov	r2,zero
   11dec:	00009f06 	br	1206c <OSFlagAccept+0x2f8>
    }
    result = (INT8U)(wait_type & OS_FLAG_CONSUME);
   11df0:	e0fffe03 	ldbu	r3,-8(fp)
   11df4:	00bfe004 	movi	r2,-128
   11df8:	1884703a 	and	r2,r3,r2
   11dfc:	e0bff505 	stb	r2,-44(fp)
    if (result != (INT8U)0) {                              /* See if we need to consume the flags      */
   11e00:	e0bff503 	ldbu	r2,-44(fp)
   11e04:	10000626 	beq	r2,zero,11e20 <OSFlagAccept+0xac>
        wait_type &= ~OS_FLAG_CONSUME;
   11e08:	e0bffe03 	ldbu	r2,-8(fp)
   11e0c:	10801fcc 	andi	r2,r2,127
   11e10:	e0bffe05 	stb	r2,-8(fp)
        consume    = OS_TRUE;
   11e14:	00800044 	movi	r2,1
   11e18:	e0bff385 	stb	r2,-50(fp)
   11e1c:	00000106 	br	11e24 <OSFlagAccept+0xb0>
    } else {
        consume    = OS_FALSE;
   11e20:	e03ff385 	stb	zero,-50(fp)
    }
/*$PAGE*/
    *perr = OS_ERR_NONE;                                   /* Assume NO error until proven otherwise.  */
   11e24:	e0bfff17 	ldw	r2,-4(fp)
   11e28:	10000005 	stb	zero,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   11e2c:	0005303a 	rdctl	r2,status
   11e30:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   11e34:	e0fffb17 	ldw	r3,-20(fp)
   11e38:	00bfff84 	movi	r2,-2
   11e3c:	1884703a 	and	r2,r3,r2
   11e40:	1001703a 	wrctl	status,r2
  
  return context;
   11e44:	e0bffb17 	ldw	r2,-20(fp)
    OS_ENTER_CRITICAL();
   11e48:	e0bff415 	stw	r2,-48(fp)
    switch (wait_type) {
   11e4c:	e0bffe03 	ldbu	r2,-8(fp)
   11e50:	10c00060 	cmpeqi	r3,r2,1
   11e54:	18005f1e 	bne	r3,zero,11fd4 <OSFlagAccept+0x260>
   11e58:	10c00088 	cmpgei	r3,r2,2
   11e5c:	1800021e 	bne	r3,zero,11e68 <OSFlagAccept+0xf4>
   11e60:	10003f26 	beq	r2,zero,11f60 <OSFlagAccept+0x1ec>
   11e64:	00007706 	br	12044 <OSFlagAccept+0x2d0>
   11e68:	10c000a0 	cmpeqi	r3,r2,2
   11e6c:	1800031e 	bne	r3,zero,11e7c <OSFlagAccept+0x108>
   11e70:	108000e0 	cmpeqi	r2,r2,3
   11e74:	10001e1e 	bne	r2,zero,11ef0 <OSFlagAccept+0x17c>
   11e78:	00007206 	br	12044 <OSFlagAccept+0x2d0>
        case OS_FLAG_WAIT_SET_ALL:                         /* See if all required flags are set        */
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);     /* Extract only the bits we want   */
   11e7c:	e0bffc17 	ldw	r2,-16(fp)
   11e80:	10c0020b 	ldhu	r3,8(r2)
   11e84:	e0bffd0b 	ldhu	r2,-12(fp)
   11e88:	1884703a 	and	r2,r3,r2
   11e8c:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
   11e90:	e0fff30b 	ldhu	r3,-52(fp)
   11e94:	e0bffd0b 	ldhu	r2,-12(fp)
   11e98:	18800d1e 	bne	r3,r2,11ed0 <OSFlagAccept+0x15c>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
   11e9c:	e0bff383 	ldbu	r2,-50(fp)
   11ea0:	10800058 	cmpnei	r2,r2,1
   11ea4:	10000d1e 	bne	r2,zero,11edc <OSFlagAccept+0x168>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we wanted      */
   11ea8:	e0bffc17 	ldw	r2,-16(fp)
   11eac:	1080020b 	ldhu	r2,8(r2)
   11eb0:	1007883a 	mov	r3,r2
   11eb4:	e0bff30b 	ldhu	r2,-52(fp)
   11eb8:	0084303a 	nor	r2,zero,r2
   11ebc:	1884703a 	and	r2,r3,r2
   11ec0:	1007883a 	mov	r3,r2
   11ec4:	e0bffc17 	ldw	r2,-16(fp)
   11ec8:	10c0020d 	sth	r3,8(r2)
   11ecc:	00000306 	br	11edc <OSFlagAccept+0x168>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
   11ed0:	e0bfff17 	ldw	r2,-4(fp)
   11ed4:	00c01c04 	movi	r3,112
   11ed8:	10c00005 	stb	r3,0(r2)
   11edc:	e0bff417 	ldw	r2,-48(fp)
   11ee0:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   11ee4:	e0bff617 	ldw	r2,-40(fp)
   11ee8:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
   11eec:	00005e06 	br	12068 <OSFlagAccept+0x2f4>

        case OS_FLAG_WAIT_SET_ANY:
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);     /* Extract only the bits we want   */
   11ef0:	e0bffc17 	ldw	r2,-16(fp)
   11ef4:	10c0020b 	ldhu	r3,8(r2)
   11ef8:	e0bffd0b 	ldhu	r2,-12(fp)
   11efc:	1884703a 	and	r2,r3,r2
   11f00:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag set                      */
   11f04:	e0bff30b 	ldhu	r2,-52(fp)
   11f08:	10000d26 	beq	r2,zero,11f40 <OSFlagAccept+0x1cc>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
   11f0c:	e0bff383 	ldbu	r2,-50(fp)
   11f10:	10800058 	cmpnei	r2,r2,1
   11f14:	10000d1e 	bne	r2,zero,11f4c <OSFlagAccept+0x1d8>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we got         */
   11f18:	e0bffc17 	ldw	r2,-16(fp)
   11f1c:	1080020b 	ldhu	r2,8(r2)
   11f20:	1007883a 	mov	r3,r2
   11f24:	e0bff30b 	ldhu	r2,-52(fp)
   11f28:	0084303a 	nor	r2,zero,r2
   11f2c:	1884703a 	and	r2,r3,r2
   11f30:	1007883a 	mov	r3,r2
   11f34:	e0bffc17 	ldw	r2,-16(fp)
   11f38:	10c0020d 	sth	r3,8(r2)
   11f3c:	00000306 	br	11f4c <OSFlagAccept+0x1d8>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
   11f40:	e0bfff17 	ldw	r2,-4(fp)
   11f44:	00c01c04 	movi	r3,112
   11f48:	10c00005 	stb	r3,0(r2)
   11f4c:	e0bff417 	ldw	r2,-48(fp)
   11f50:	e0bff715 	stw	r2,-36(fp)
   11f54:	e0bff717 	ldw	r2,-36(fp)
   11f58:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
   11f5c:	00004206 	br	12068 <OSFlagAccept+0x2f4>

#if OS_FLAG_WAIT_CLR_EN > 0
        case OS_FLAG_WAIT_CLR_ALL:                         /* See if all required flags are cleared    */
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags);  /* Extract only the bits we want     */
   11f60:	e0bffc17 	ldw	r2,-16(fp)
   11f64:	1080020b 	ldhu	r2,8(r2)
   11f68:	0084303a 	nor	r2,zero,r2
   11f6c:	1007883a 	mov	r3,r2
   11f70:	e0bffd0b 	ldhu	r2,-12(fp)
   11f74:	1884703a 	and	r2,r3,r2
   11f78:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
   11f7c:	e0fff30b 	ldhu	r3,-52(fp)
   11f80:	e0bffd0b 	ldhu	r2,-12(fp)
   11f84:	18800b1e 	bne	r3,r2,11fb4 <OSFlagAccept+0x240>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
   11f88:	e0bff383 	ldbu	r2,-50(fp)
   11f8c:	10800058 	cmpnei	r2,r2,1
   11f90:	10000b1e 	bne	r2,zero,11fc0 <OSFlagAccept+0x24c>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we wanted        */
   11f94:	e0bffc17 	ldw	r2,-16(fp)
   11f98:	10c0020b 	ldhu	r3,8(r2)
   11f9c:	e0bff30b 	ldhu	r2,-52(fp)
   11fa0:	1884b03a 	or	r2,r3,r2
   11fa4:	1007883a 	mov	r3,r2
   11fa8:	e0bffc17 	ldw	r2,-16(fp)
   11fac:	10c0020d 	sth	r3,8(r2)
   11fb0:	00000306 	br	11fc0 <OSFlagAccept+0x24c>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
   11fb4:	e0bfff17 	ldw	r2,-4(fp)
   11fb8:	00c01c04 	movi	r3,112
   11fbc:	10c00005 	stb	r3,0(r2)
   11fc0:	e0bff417 	ldw	r2,-48(fp)
   11fc4:	e0bff815 	stw	r2,-32(fp)
   11fc8:	e0bff817 	ldw	r2,-32(fp)
   11fcc:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
   11fd0:	00002506 	br	12068 <OSFlagAccept+0x2f4>

        case OS_FLAG_WAIT_CLR_ANY:
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags); /* Extract only the bits we want      */
   11fd4:	e0bffc17 	ldw	r2,-16(fp)
   11fd8:	1080020b 	ldhu	r2,8(r2)
   11fdc:	0084303a 	nor	r2,zero,r2
   11fe0:	1007883a 	mov	r3,r2
   11fe4:	e0bffd0b 	ldhu	r2,-12(fp)
   11fe8:	1884703a 	and	r2,r3,r2
   11fec:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag cleared                  */
   11ff0:	e0bff30b 	ldhu	r2,-52(fp)
   11ff4:	10000b26 	beq	r2,zero,12024 <OSFlagAccept+0x2b0>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
   11ff8:	e0bff383 	ldbu	r2,-50(fp)
   11ffc:	10800058 	cmpnei	r2,r2,1
   12000:	10000b1e 	bne	r2,zero,12030 <OSFlagAccept+0x2bc>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we got           */
   12004:	e0bffc17 	ldw	r2,-16(fp)
   12008:	10c0020b 	ldhu	r3,8(r2)
   1200c:	e0bff30b 	ldhu	r2,-52(fp)
   12010:	1884b03a 	or	r2,r3,r2
   12014:	1007883a 	mov	r3,r2
   12018:	e0bffc17 	ldw	r2,-16(fp)
   1201c:	10c0020d 	sth	r3,8(r2)
   12020:	00000306 	br	12030 <OSFlagAccept+0x2bc>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
   12024:	e0bfff17 	ldw	r2,-4(fp)
   12028:	00c01c04 	movi	r3,112
   1202c:	10c00005 	stb	r3,0(r2)
   12030:	e0bff417 	ldw	r2,-48(fp)
   12034:	e0bff915 	stw	r2,-28(fp)
   12038:	e0bff917 	ldw	r2,-28(fp)
   1203c:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
   12040:	00000906 	br	12068 <OSFlagAccept+0x2f4>
   12044:	e0bff417 	ldw	r2,-48(fp)
   12048:	e0bffa15 	stw	r2,-24(fp)
   1204c:	e0bffa17 	ldw	r2,-24(fp)
   12050:	1001703a 	wrctl	status,r2
#endif

        default:
             OS_EXIT_CRITICAL();
             flags_rdy = (OS_FLAGS)0;
   12054:	e03ff30d 	sth	zero,-52(fp)
             *perr     = OS_ERR_FLAG_WAIT_TYPE;
   12058:	e0bfff17 	ldw	r2,-4(fp)
   1205c:	00c01bc4 	movi	r3,111
   12060:	10c00005 	stb	r3,0(r2)
             break;
   12064:	0001883a 	nop
    }
    return (flags_rdy);
   12068:	e0bff30b 	ldhu	r2,-52(fp)
}
   1206c:	e037883a 	mov	sp,fp
   12070:	df000017 	ldw	fp,0(sp)
   12074:	dec00104 	addi	sp,sp,4
   12078:	f800283a 	ret

0001207c <OSFlagCreate>:
* Called from: Task ONLY
*********************************************************************************************************
*/

OS_FLAG_GRP  *OSFlagCreate (OS_FLAGS flags, INT8U *perr)
{
   1207c:	defff804 	addi	sp,sp,-32
   12080:	df000715 	stw	fp,28(sp)
   12084:	df000704 	addi	fp,sp,28
   12088:	2005883a 	mov	r2,r4
   1208c:	e17fff15 	stw	r5,-4(fp)
   12090:	e0bffe0d 	sth	r2,-8(fp)
    OS_FLAG_GRP *pgrp;
#if OS_CRITICAL_METHOD == 3                         /* Allocate storage for CPU status register        */
    OS_CPU_SR    cpu_sr = 0;
   12094:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                       /* Validate 'perr'                                 */
   12098:	e0bfff17 	ldw	r2,-4(fp)
   1209c:	1000021e 	bne	r2,zero,120a8 <OSFlagCreate+0x2c>
        return ((OS_FLAG_GRP *)0);
   120a0:	0005883a 	mov	r2,zero
   120a4:	00003306 	br	12174 <OSFlagCreate+0xf8>
    }
#endif
    if (OSIntNesting > 0) {                         /* See if called from ISR ...                      */
   120a8:	d0a73203 	ldbu	r2,-25400(gp)
   120ac:	10803fcc 	andi	r2,r2,255
   120b0:	10000526 	beq	r2,zero,120c8 <OSFlagCreate+0x4c>
        *perr = OS_ERR_CREATE_ISR;                  /* ... can't CREATE from an ISR                    */
   120b4:	e0bfff17 	ldw	r2,-4(fp)
   120b8:	00c00404 	movi	r3,16
   120bc:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAG_GRP *)0);
   120c0:	0005883a 	mov	r2,zero
   120c4:	00002b06 	br	12174 <OSFlagCreate+0xf8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   120c8:	0005303a 	rdctl	r2,status
   120cc:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   120d0:	e0fffd17 	ldw	r3,-12(fp)
   120d4:	00bfff84 	movi	r2,-2
   120d8:	1884703a 	and	r2,r3,r2
   120dc:	1001703a 	wrctl	status,r2
  
  return context;
   120e0:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
   120e4:	e0bff915 	stw	r2,-28(fp)
    pgrp = OSFlagFreeList;                          /* Get next free event flag                        */
   120e8:	d0a73517 	ldw	r2,-25388(gp)
   120ec:	e0bffb15 	stw	r2,-20(fp)
    if (pgrp != (OS_FLAG_GRP *)0) {                 /* See if we have event flag groups available      */
   120f0:	e0bffb17 	ldw	r2,-20(fp)
   120f4:	10001726 	beq	r2,zero,12154 <OSFlagCreate+0xd8>
                                                    /* Adjust free list                                */
        OSFlagFreeList       = (OS_FLAG_GRP *)OSFlagFreeList->OSFlagWaitList;
   120f8:	d0a73517 	ldw	r2,-25388(gp)
   120fc:	10800117 	ldw	r2,4(r2)
   12100:	d0a73515 	stw	r2,-25388(gp)
        pgrp->OSFlagType     = OS_EVENT_TYPE_FLAG;  /* Set to event flag group type                    */
   12104:	e0bffb17 	ldw	r2,-20(fp)
   12108:	00c00144 	movi	r3,5
   1210c:	10c00005 	stb	r3,0(r2)
        pgrp->OSFlagFlags    = flags;               /* Set to desired initial value                    */
   12110:	e0bffb17 	ldw	r2,-20(fp)
   12114:	e0fffe0b 	ldhu	r3,-8(fp)
   12118:	10c0020d 	sth	r3,8(r2)
        pgrp->OSFlagWaitList = (void *)0;           /* Clear list of tasks waiting on flags            */
   1211c:	e0bffb17 	ldw	r2,-20(fp)
   12120:	10000115 	stw	zero,4(r2)
#if OS_FLAG_NAME_SIZE > 1
        pgrp->OSFlagName[0]  = '?';
   12124:	e0bffb17 	ldw	r2,-20(fp)
   12128:	00c00fc4 	movi	r3,63
   1212c:	10c00285 	stb	r3,10(r2)
        pgrp->OSFlagName[1]  = OS_ASCII_NUL;
   12130:	e0bffb17 	ldw	r2,-20(fp)
   12134:	100002c5 	stb	zero,11(r2)
   12138:	e0bff917 	ldw	r2,-28(fp)
   1213c:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   12140:	e0bffa17 	ldw	r2,-24(fp)
   12144:	1001703a 	wrctl	status,r2
#endif
        OS_EXIT_CRITICAL();
        *perr                = OS_ERR_NONE;
   12148:	e0bfff17 	ldw	r2,-4(fp)
   1214c:	10000005 	stb	zero,0(r2)
   12150:	00000706 	br	12170 <OSFlagCreate+0xf4>
   12154:	e0bff917 	ldw	r2,-28(fp)
   12158:	e0bffc15 	stw	r2,-16(fp)
   1215c:	e0bffc17 	ldw	r2,-16(fp)
   12160:	1001703a 	wrctl	status,r2
    } else {
        OS_EXIT_CRITICAL();
        *perr                = OS_ERR_FLAG_GRP_DEPLETED;
   12164:	e0bfff17 	ldw	r2,-4(fp)
   12168:	00c01c84 	movi	r3,114
   1216c:	10c00005 	stb	r3,0(r2)
    }
    return (pgrp);                                  /* Return pointer to event flag group              */
   12170:	e0bffb17 	ldw	r2,-20(fp)
}
   12174:	e037883a 	mov	sp,fp
   12178:	df000017 	ldw	fp,0(sp)
   1217c:	dec00104 	addi	sp,sp,4
   12180:	f800283a 	ret

00012184 <OSFlagDel>:
*********************************************************************************************************
*/

#if OS_FLAG_DEL_EN > 0
OS_FLAG_GRP  *OSFlagDel (OS_FLAG_GRP *pgrp, INT8U opt, INT8U *perr)
{
   12184:	defff204 	addi	sp,sp,-56
   12188:	dfc00d15 	stw	ra,52(sp)
   1218c:	df000c15 	stw	fp,48(sp)
   12190:	df000c04 	addi	fp,sp,48
   12194:	e13ffd15 	stw	r4,-12(fp)
   12198:	2805883a 	mov	r2,r5
   1219c:	e1bfff15 	stw	r6,-4(fp)
   121a0:	e0bffe05 	stb	r2,-8(fp)
    BOOLEAN       tasks_waiting;
    OS_FLAG_NODE *pnode;
    OS_FLAG_GRP  *pgrp_return;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
   121a4:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
   121a8:	e0bfff17 	ldw	r2,-4(fp)
   121ac:	1000021e 	bne	r2,zero,121b8 <OSFlagDel+0x34>
        return (pgrp);
   121b0:	e0bffd17 	ldw	r2,-12(fp)
   121b4:	00008006 	br	123b8 <OSFlagDel+0x234>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                        /* Validate 'pgrp'                          */
   121b8:	e0bffd17 	ldw	r2,-12(fp)
   121bc:	1000051e 	bne	r2,zero,121d4 <OSFlagDel+0x50>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
   121c0:	e0bfff17 	ldw	r2,-4(fp)
   121c4:	00c01b84 	movi	r3,110
   121c8:	10c00005 	stb	r3,0(r2)
        return (pgrp);
   121cc:	e0bffd17 	ldw	r2,-12(fp)
   121d0:	00007906 	br	123b8 <OSFlagDel+0x234>
    }
#endif
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
   121d4:	d0a73203 	ldbu	r2,-25400(gp)
   121d8:	10803fcc 	andi	r2,r2,255
   121dc:	10000526 	beq	r2,zero,121f4 <OSFlagDel+0x70>
        *perr = OS_ERR_DEL_ISR;                            /* ... can't DELETE from an ISR             */
   121e0:	e0bfff17 	ldw	r2,-4(fp)
   121e4:	00c003c4 	movi	r3,15
   121e8:	10c00005 	stb	r3,0(r2)
        return (pgrp);
   121ec:	e0bffd17 	ldw	r2,-12(fp)
   121f0:	00007106 	br	123b8 <OSFlagDel+0x234>
    }
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {          /* Validate event group type                */
   121f4:	e0bffd17 	ldw	r2,-12(fp)
   121f8:	10800003 	ldbu	r2,0(r2)
   121fc:	10803fcc 	andi	r2,r2,255
   12200:	10800160 	cmpeqi	r2,r2,5
   12204:	1000051e 	bne	r2,zero,1221c <OSFlagDel+0x98>
        *perr = OS_ERR_EVENT_TYPE;
   12208:	e0bfff17 	ldw	r2,-4(fp)
   1220c:	00c00044 	movi	r3,1
   12210:	10c00005 	stb	r3,0(r2)
        return (pgrp);
   12214:	e0bffd17 	ldw	r2,-12(fp)
   12218:	00006706 	br	123b8 <OSFlagDel+0x234>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1221c:	0005303a 	rdctl	r2,status
   12220:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   12224:	e0fffc17 	ldw	r3,-16(fp)
   12228:	00bfff84 	movi	r2,-2
   1222c:	1884703a 	and	r2,r3,r2
   12230:	1001703a 	wrctl	status,r2
  
  return context;
   12234:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
   12238:	e0bff715 	stw	r2,-36(fp)
    if (pgrp->OSFlagWaitList != (void *)0) {               /* See if any tasks waiting on event flags  */
   1223c:	e0bffd17 	ldw	r2,-12(fp)
   12240:	10800117 	ldw	r2,4(r2)
   12244:	10000326 	beq	r2,zero,12254 <OSFlagDel+0xd0>
        tasks_waiting = OS_TRUE;                           /* Yes                                      */
   12248:	00800044 	movi	r2,1
   1224c:	e0bff405 	stb	r2,-48(fp)
   12250:	00000106 	br	12258 <OSFlagDel+0xd4>
    } else {
        tasks_waiting = OS_FALSE;                          /* No                                       */
   12254:	e03ff405 	stb	zero,-48(fp)
    }
    switch (opt) {
   12258:	e0bffe03 	ldbu	r2,-8(fp)
   1225c:	10000326 	beq	r2,zero,1226c <OSFlagDel+0xe8>
   12260:	10800060 	cmpeqi	r2,r2,1
   12264:	1000231e 	bne	r2,zero,122f4 <OSFlagDel+0x170>
   12268:	00004806 	br	1238c <OSFlagDel+0x208>
        case OS_DEL_NO_PEND:                               /* Delete group if no task waiting          */
             if (tasks_waiting == OS_FALSE) {
   1226c:	e0bff403 	ldbu	r2,-48(fp)
   12270:	1000161e 	bne	r2,zero,122cc <OSFlagDel+0x148>
#if OS_FLAG_NAME_SIZE > 1
                 pgrp->OSFlagName[0]  = '?';               /* Unknown name                             */
   12274:	e0bffd17 	ldw	r2,-12(fp)
   12278:	00c00fc4 	movi	r3,63
   1227c:	10c00285 	stb	r3,10(r2)
                 pgrp->OSFlagName[1]  = OS_ASCII_NUL;
   12280:	e0bffd17 	ldw	r2,-12(fp)
   12284:	100002c5 	stb	zero,11(r2)
#endif
                 pgrp->OSFlagType     = OS_EVENT_TYPE_UNUSED;
   12288:	e0bffd17 	ldw	r2,-12(fp)
   1228c:	10000005 	stb	zero,0(r2)
                 pgrp->OSFlagWaitList = (void *)OSFlagFreeList; /* Return group to free list           */
   12290:	d0e73517 	ldw	r3,-25388(gp)
   12294:	e0bffd17 	ldw	r2,-12(fp)
   12298:	10c00115 	stw	r3,4(r2)
                 pgrp->OSFlagFlags    = (OS_FLAGS)0;
   1229c:	e0bffd17 	ldw	r2,-12(fp)
   122a0:	1000020d 	sth	zero,8(r2)
                 OSFlagFreeList       = pgrp;
   122a4:	e0bffd17 	ldw	r2,-12(fp)
   122a8:	d0a73515 	stw	r2,-25388(gp)
   122ac:	e0bff717 	ldw	r2,-36(fp)
   122b0:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   122b4:	e0bff817 	ldw	r2,-32(fp)
   122b8:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                = OS_ERR_NONE;
   122bc:	e0bfff17 	ldw	r2,-4(fp)
   122c0:	10000005 	stb	zero,0(r2)
                 pgrp_return          = (OS_FLAG_GRP *)0;  /* Event Flag Group has been deleted        */
   122c4:	e03ff615 	stw	zero,-40(fp)
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                = OS_ERR_TASK_WAITING;
                 pgrp_return          = pgrp;
             }
             break;
   122c8:	00003a06 	br	123b4 <OSFlagDel+0x230>
   122cc:	e0bff717 	ldw	r2,-36(fp)
   122d0:	e0bff915 	stw	r2,-28(fp)
   122d4:	e0bff917 	ldw	r2,-28(fp)
   122d8:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                = OS_ERR_NONE;
                 pgrp_return          = (OS_FLAG_GRP *)0;  /* Event Flag Group has been deleted        */
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                = OS_ERR_TASK_WAITING;
   122dc:	e0bfff17 	ldw	r2,-4(fp)
   122e0:	00c01244 	movi	r3,73
   122e4:	10c00005 	stb	r3,0(r2)
                 pgrp_return          = pgrp;
   122e8:	e0bffd17 	ldw	r2,-12(fp)
   122ec:	e0bff615 	stw	r2,-40(fp)
             }
             break;
   122f0:	00003006 	br	123b4 <OSFlagDel+0x230>

        case OS_DEL_ALWAYS:                                /* Always delete the event flag group       */
             pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
   122f4:	e0bffd17 	ldw	r2,-12(fp)
   122f8:	10800117 	ldw	r2,4(r2)
   122fc:	e0bff515 	stw	r2,-44(fp)
             while (pnode != (OS_FLAG_NODE *)0) {          /* Ready ALL tasks waiting for flags        */
   12300:	00000606 	br	1231c <OSFlagDel+0x198>
                 (void)OS_FlagTaskRdy(pnode, (OS_FLAGS)0);
   12304:	000b883a 	mov	r5,zero
   12308:	e13ff517 	ldw	r4,-44(fp)
   1230c:	00132f00 	call	132f0 <OS_FlagTaskRdy>
                 pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext;
   12310:	e0bff517 	ldw	r2,-44(fp)
   12314:	10800017 	ldw	r2,0(r2)
   12318:	e0bff515 	stw	r2,-44(fp)
             }
             break;

        case OS_DEL_ALWAYS:                                /* Always delete the event flag group       */
             pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
             while (pnode != (OS_FLAG_NODE *)0) {          /* Ready ALL tasks waiting for flags        */
   1231c:	e0bff517 	ldw	r2,-44(fp)
   12320:	103ff81e 	bne	r2,zero,12304 <__alt_data_end+0xfffe2304>
                 (void)OS_FlagTaskRdy(pnode, (OS_FLAGS)0);
                 pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext;
             }
#if OS_FLAG_NAME_SIZE > 1
             pgrp->OSFlagName[0]  = '?';                   /* Unknown name                             */
   12324:	e0bffd17 	ldw	r2,-12(fp)
   12328:	00c00fc4 	movi	r3,63
   1232c:	10c00285 	stb	r3,10(r2)
             pgrp->OSFlagName[1]  = OS_ASCII_NUL;
   12330:	e0bffd17 	ldw	r2,-12(fp)
   12334:	100002c5 	stb	zero,11(r2)
#endif
             pgrp->OSFlagType     = OS_EVENT_TYPE_UNUSED;
   12338:	e0bffd17 	ldw	r2,-12(fp)
   1233c:	10000005 	stb	zero,0(r2)
             pgrp->OSFlagWaitList = (void *)OSFlagFreeList;/* Return group to free list                */
   12340:	d0e73517 	ldw	r3,-25388(gp)
   12344:	e0bffd17 	ldw	r2,-12(fp)
   12348:	10c00115 	stw	r3,4(r2)
             pgrp->OSFlagFlags    = (OS_FLAGS)0;
   1234c:	e0bffd17 	ldw	r2,-12(fp)
   12350:	1000020d 	sth	zero,8(r2)
             OSFlagFreeList       = pgrp;
   12354:	e0bffd17 	ldw	r2,-12(fp)
   12358:	d0a73515 	stw	r2,-25388(gp)
   1235c:	e0bff717 	ldw	r2,-36(fp)
   12360:	e0bffa15 	stw	r2,-24(fp)
   12364:	e0bffa17 	ldw	r2,-24(fp)
   12368:	1001703a 	wrctl	status,r2
             OS_EXIT_CRITICAL();
             if (tasks_waiting == OS_TRUE) {               /* Reschedule only if task(s) were waiting  */
   1236c:	e0bff403 	ldbu	r2,-48(fp)
   12370:	10800058 	cmpnei	r2,r2,1
   12374:	1000011e 	bne	r2,zero,1237c <OSFlagDel+0x1f8>
                 OS_Sched();                               /* Find highest priority task ready to run  */
   12378:	00115100 	call	11510 <OS_Sched>
             }
             *perr = OS_ERR_NONE;
   1237c:	e0bfff17 	ldw	r2,-4(fp)
   12380:	10000005 	stb	zero,0(r2)
             pgrp_return          = (OS_FLAG_GRP *)0;      /* Event Flag Group has been deleted        */
   12384:	e03ff615 	stw	zero,-40(fp)
             break;
   12388:	00000a06 	br	123b4 <OSFlagDel+0x230>
   1238c:	e0bff717 	ldw	r2,-36(fp)
   12390:	e0bffb15 	stw	r2,-20(fp)
   12394:	e0bffb17 	ldw	r2,-20(fp)
   12398:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();
             *perr                = OS_ERR_INVALID_OPT;
   1239c:	e0bfff17 	ldw	r2,-4(fp)
   123a0:	00c001c4 	movi	r3,7
   123a4:	10c00005 	stb	r3,0(r2)
             pgrp_return          = pgrp;
   123a8:	e0bffd17 	ldw	r2,-12(fp)
   123ac:	e0bff615 	stw	r2,-40(fp)
             break;
   123b0:	0001883a 	nop
    }
    return (pgrp_return);
   123b4:	e0bff617 	ldw	r2,-40(fp)
}
   123b8:	e037883a 	mov	sp,fp
   123bc:	dfc00117 	ldw	ra,4(sp)
   123c0:	df000017 	ldw	fp,0(sp)
   123c4:	dec00204 	addi	sp,sp,8
   123c8:	f800283a 	ret

000123cc <OSFlagNameGet>:
*********************************************************************************************************
*/

#if OS_FLAG_NAME_SIZE > 1
INT8U  OSFlagNameGet (OS_FLAG_GRP *pgrp, INT8U *pname, INT8U *perr)
{
   123cc:	defff604 	addi	sp,sp,-40
   123d0:	dfc00915 	stw	ra,36(sp)
   123d4:	df000815 	stw	fp,32(sp)
   123d8:	df000804 	addi	fp,sp,32
   123dc:	e13ffd15 	stw	r4,-12(fp)
   123e0:	e17ffe15 	stw	r5,-8(fp)
   123e4:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   123e8:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
   123ec:	e0bfff17 	ldw	r2,-4(fp)
   123f0:	1000021e 	bne	r2,zero,123fc <OSFlagNameGet+0x30>
        return (0);
   123f4:	0005883a 	mov	r2,zero
   123f8:	00003906 	br	124e0 <OSFlagNameGet+0x114>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {              /* Is 'pgrp' a NULL pointer?                          */
   123fc:	e0bffd17 	ldw	r2,-12(fp)
   12400:	1000051e 	bne	r2,zero,12418 <OSFlagNameGet+0x4c>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
   12404:	e0bfff17 	ldw	r2,-4(fp)
   12408:	00c01b84 	movi	r3,110
   1240c:	10c00005 	stb	r3,0(r2)
        return (0);
   12410:	0005883a 	mov	r2,zero
   12414:	00003206 	br	124e0 <OSFlagNameGet+0x114>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
   12418:	e0bffe17 	ldw	r2,-8(fp)
   1241c:	1000051e 	bne	r2,zero,12434 <OSFlagNameGet+0x68>
        *perr = OS_ERR_PNAME_NULL;
   12420:	e0bfff17 	ldw	r2,-4(fp)
   12424:	00c00304 	movi	r3,12
   12428:	10c00005 	stb	r3,0(r2)
        return (0);
   1242c:	0005883a 	mov	r2,zero
   12430:	00002b06 	br	124e0 <OSFlagNameGet+0x114>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
   12434:	d0a73203 	ldbu	r2,-25400(gp)
   12438:	10803fcc 	andi	r2,r2,255
   1243c:	10000526 	beq	r2,zero,12454 <OSFlagNameGet+0x88>
        *perr = OS_ERR_NAME_GET_ISR;
   12440:	e0bfff17 	ldw	r2,-4(fp)
   12444:	00c00444 	movi	r3,17
   12448:	10c00005 	stb	r3,0(r2)
        return (0);
   1244c:	0005883a 	mov	r2,zero
   12450:	00002306 	br	124e0 <OSFlagNameGet+0x114>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   12454:	0005303a 	rdctl	r2,status
   12458:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1245c:	e0fffc17 	ldw	r3,-16(fp)
   12460:	00bfff84 	movi	r2,-2
   12464:	1884703a 	and	r2,r3,r2
   12468:	1001703a 	wrctl	status,r2
  
  return context;
   1246c:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
   12470:	e0bff815 	stw	r2,-32(fp)
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {
   12474:	e0bffd17 	ldw	r2,-12(fp)
   12478:	10800003 	ldbu	r2,0(r2)
   1247c:	10803fcc 	andi	r2,r2,255
   12480:	10800160 	cmpeqi	r2,r2,5
   12484:	1000091e 	bne	r2,zero,124ac <OSFlagNameGet+0xe0>
   12488:	e0bff817 	ldw	r2,-32(fp)
   1248c:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   12490:	e0bff917 	ldw	r2,-28(fp)
   12494:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_EVENT_TYPE;
   12498:	e0bfff17 	ldw	r2,-4(fp)
   1249c:	00c00044 	movi	r3,1
   124a0:	10c00005 	stb	r3,0(r2)
        return (0);
   124a4:	0005883a 	mov	r2,zero
   124a8:	00000d06 	br	124e0 <OSFlagNameGet+0x114>
    }
    len   = OS_StrCopy(pname, pgrp->OSFlagName); /* Copy name from OS_FLAG_GRP                         */
   124ac:	e0bffd17 	ldw	r2,-12(fp)
   124b0:	10800284 	addi	r2,r2,10
   124b4:	100b883a 	mov	r5,r2
   124b8:	e13ffe17 	ldw	r4,-8(fp)
   124bc:	00116540 	call	11654 <OS_StrCopy>
   124c0:	e0bffb05 	stb	r2,-20(fp)
   124c4:	e0bff817 	ldw	r2,-32(fp)
   124c8:	e0bffa15 	stw	r2,-24(fp)
   124cc:	e0bffa17 	ldw	r2,-24(fp)
   124d0:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   124d4:	e0bfff17 	ldw	r2,-4(fp)
   124d8:	10000005 	stb	zero,0(r2)
    return (len);
   124dc:	e0bffb03 	ldbu	r2,-20(fp)
}
   124e0:	e037883a 	mov	sp,fp
   124e4:	dfc00117 	ldw	ra,4(sp)
   124e8:	df000017 	ldw	fp,0(sp)
   124ec:	dec00204 	addi	sp,sp,8
   124f0:	f800283a 	ret

000124f4 <OSFlagNameSet>:
*********************************************************************************************************
*/

#if OS_FLAG_NAME_SIZE > 1
void  OSFlagNameSet (OS_FLAG_GRP *pgrp, INT8U *pname, INT8U *perr)
{
   124f4:	defff504 	addi	sp,sp,-44
   124f8:	dfc00a15 	stw	ra,40(sp)
   124fc:	df000915 	stw	fp,36(sp)
   12500:	df000904 	addi	fp,sp,36
   12504:	e13ffd15 	stw	r4,-12(fp)
   12508:	e17ffe15 	stw	r5,-8(fp)
   1250c:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   12510:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
   12514:	e0bfff17 	ldw	r2,-4(fp)
   12518:	10004326 	beq	r2,zero,12628 <OSFlagNameSet+0x134>
        return;
    }
    if (pgrp == (OS_FLAG_GRP *)0) {              /* Is 'pgrp' a NULL pointer?                          */
   1251c:	e0bffd17 	ldw	r2,-12(fp)
   12520:	1000041e 	bne	r2,zero,12534 <OSFlagNameSet+0x40>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
   12524:	e0bfff17 	ldw	r2,-4(fp)
   12528:	00c01b84 	movi	r3,110
   1252c:	10c00005 	stb	r3,0(r2)
        return;
   12530:	00003e06 	br	1262c <OSFlagNameSet+0x138>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
   12534:	e0bffe17 	ldw	r2,-8(fp)
   12538:	1000041e 	bne	r2,zero,1254c <OSFlagNameSet+0x58>
        *perr = OS_ERR_PNAME_NULL;
   1253c:	e0bfff17 	ldw	r2,-4(fp)
   12540:	00c00304 	movi	r3,12
   12544:	10c00005 	stb	r3,0(r2)
        return;
   12548:	00003806 	br	1262c <OSFlagNameSet+0x138>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
   1254c:	d0a73203 	ldbu	r2,-25400(gp)
   12550:	10803fcc 	andi	r2,r2,255
   12554:	10000426 	beq	r2,zero,12568 <OSFlagNameSet+0x74>
        *perr = OS_ERR_NAME_SET_ISR;
   12558:	e0bfff17 	ldw	r2,-4(fp)
   1255c:	00c00484 	movi	r3,18
   12560:	10c00005 	stb	r3,0(r2)
        return;
   12564:	00003106 	br	1262c <OSFlagNameSet+0x138>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   12568:	0005303a 	rdctl	r2,status
   1256c:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   12570:	e0fffc17 	ldw	r3,-16(fp)
   12574:	00bfff84 	movi	r2,-2
   12578:	1884703a 	and	r2,r3,r2
   1257c:	1001703a 	wrctl	status,r2
  
  return context;
   12580:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
   12584:	e0bff715 	stw	r2,-36(fp)
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {
   12588:	e0bffd17 	ldw	r2,-12(fp)
   1258c:	10800003 	ldbu	r2,0(r2)
   12590:	10803fcc 	andi	r2,r2,255
   12594:	10800160 	cmpeqi	r2,r2,5
   12598:	1000081e 	bne	r2,zero,125bc <OSFlagNameSet+0xc8>
   1259c:	e0bff717 	ldw	r2,-36(fp)
   125a0:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   125a4:	e0bff817 	ldw	r2,-32(fp)
   125a8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_EVENT_TYPE;
   125ac:	e0bfff17 	ldw	r2,-4(fp)
   125b0:	00c00044 	movi	r3,1
   125b4:	10c00005 	stb	r3,0(r2)
        return;
   125b8:	00001c06 	br	1262c <OSFlagNameSet+0x138>
    }
    len = OS_StrLen(pname);                      /* Can we fit the string in the storage area?         */
   125bc:	e13ffe17 	ldw	r4,-8(fp)
   125c0:	00116c80 	call	116c8 <OS_StrLen>
   125c4:	e0bffa05 	stb	r2,-24(fp)
    if (len > (OS_FLAG_NAME_SIZE - 1)) {         /* No                                                 */
   125c8:	e0bffa03 	ldbu	r2,-24(fp)
   125cc:	10800830 	cmpltui	r2,r2,32
   125d0:	1000081e 	bne	r2,zero,125f4 <OSFlagNameSet+0x100>
   125d4:	e0bff717 	ldw	r2,-36(fp)
   125d8:	e0bff915 	stw	r2,-28(fp)
   125dc:	e0bff917 	ldw	r2,-28(fp)
   125e0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_FLAG_NAME_TOO_LONG;
   125e4:	e0bfff17 	ldw	r2,-4(fp)
   125e8:	00c01cc4 	movi	r3,115
   125ec:	10c00005 	stb	r3,0(r2)
        return;
   125f0:	00000e06 	br	1262c <OSFlagNameSet+0x138>
    }
    (void)OS_StrCopy(pgrp->OSFlagName, pname);   /* Yes, copy name from OS_FLAG_GRP                    */
   125f4:	e0bffd17 	ldw	r2,-12(fp)
   125f8:	10800284 	addi	r2,r2,10
   125fc:	e17ffe17 	ldw	r5,-8(fp)
   12600:	1009883a 	mov	r4,r2
   12604:	00116540 	call	11654 <OS_StrCopy>
   12608:	e0bff717 	ldw	r2,-36(fp)
   1260c:	e0bffb15 	stw	r2,-20(fp)
   12610:	e0bffb17 	ldw	r2,-20(fp)
   12614:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   12618:	e0bfff17 	ldw	r2,-4(fp)
   1261c:	10000005 	stb	zero,0(r2)
    return;
   12620:	0001883a 	nop
   12624:	00000106 	br	1262c <OSFlagNameSet+0x138>



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
        return;
   12628:	0001883a 	nop
    }
    (void)OS_StrCopy(pgrp->OSFlagName, pname);   /* Yes, copy name from OS_FLAG_GRP                    */
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
    return;
}
   1262c:	e037883a 	mov	sp,fp
   12630:	dfc00117 	ldw	ra,4(sp)
   12634:	df000017 	ldw	fp,0(sp)
   12638:	dec00204 	addi	sp,sp,8
   1263c:	f800283a 	ret

00012640 <OSFlagPend>:
*                 event flags.
*********************************************************************************************************
*/

OS_FLAGS  OSFlagPend (OS_FLAG_GRP *pgrp, OS_FLAGS flags, INT8U wait_type, INT16U timeout, INT8U *perr)
{
   12640:	deffe104 	addi	sp,sp,-124
   12644:	dfc01e15 	stw	ra,120(sp)
   12648:	df001d15 	stw	fp,116(sp)
   1264c:	df001d04 	addi	fp,sp,116
   12650:	e13ffc15 	stw	r4,-16(fp)
   12654:	2809883a 	mov	r4,r5
   12658:	3007883a 	mov	r3,r6
   1265c:	3805883a 	mov	r2,r7
   12660:	e13ffd0d 	sth	r4,-12(fp)
   12664:	e0fffe05 	stb	r3,-8(fp)
   12668:	e0bfff0d 	sth	r2,-4(fp)
    OS_FLAGS      flags_rdy;
    INT8U         result;
    INT8U         pend_stat;
    BOOLEAN       consume;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
   1266c:	e03fe515 	stw	zero,-108(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
   12670:	e0800217 	ldw	r2,8(fp)
   12674:	1000021e 	bne	r2,zero,12680 <OSFlagPend+0x40>
        return ((OS_FLAGS)0);
   12678:	0005883a 	mov	r2,zero
   1267c:	00015906 	br	12be4 <OSFlagPend+0x5a4>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                        /* Validate 'pgrp'                          */
   12680:	e0bffc17 	ldw	r2,-16(fp)
   12684:	1000051e 	bne	r2,zero,1269c <OSFlagPend+0x5c>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
   12688:	e0800217 	ldw	r2,8(fp)
   1268c:	00c01b84 	movi	r3,110
   12690:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
   12694:	0005883a 	mov	r2,zero
   12698:	00015206 	br	12be4 <OSFlagPend+0x5a4>
    }
#endif
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
   1269c:	d0a73203 	ldbu	r2,-25400(gp)
   126a0:	10803fcc 	andi	r2,r2,255
   126a4:	10000526 	beq	r2,zero,126bc <OSFlagPend+0x7c>
        *perr = OS_ERR_PEND_ISR;                           /* ... can't PEND from an ISR               */
   126a8:	e0800217 	ldw	r2,8(fp)
   126ac:	00c00084 	movi	r3,2
   126b0:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
   126b4:	0005883a 	mov	r2,zero
   126b8:	00014a06 	br	12be4 <OSFlagPend+0x5a4>
    }
    if (OSLockNesting > 0) {                               /* See if called with scheduler locked ...  */
   126bc:	d0a72403 	ldbu	r2,-25456(gp)
   126c0:	10803fcc 	andi	r2,r2,255
   126c4:	10000526 	beq	r2,zero,126dc <OSFlagPend+0x9c>
        *perr = OS_ERR_PEND_LOCKED;                        /* ... can't PEND when locked               */
   126c8:	e0800217 	ldw	r2,8(fp)
   126cc:	00c00344 	movi	r3,13
   126d0:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
   126d4:	0005883a 	mov	r2,zero
   126d8:	00014206 	br	12be4 <OSFlagPend+0x5a4>
    }
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {          /* Validate event block type                */
   126dc:	e0bffc17 	ldw	r2,-16(fp)
   126e0:	10800003 	ldbu	r2,0(r2)
   126e4:	10803fcc 	andi	r2,r2,255
   126e8:	10800160 	cmpeqi	r2,r2,5
   126ec:	1000051e 	bne	r2,zero,12704 <OSFlagPend+0xc4>
        *perr = OS_ERR_EVENT_TYPE;
   126f0:	e0800217 	ldw	r2,8(fp)
   126f4:	00c00044 	movi	r3,1
   126f8:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
   126fc:	0005883a 	mov	r2,zero
   12700:	00013806 	br	12be4 <OSFlagPend+0x5a4>
    }
    result = (INT8U)(wait_type & OS_FLAG_CONSUME);
   12704:	e0fffe03 	ldbu	r3,-8(fp)
   12708:	00bfe004 	movi	r2,-128
   1270c:	1884703a 	and	r2,r3,r2
   12710:	e0bfe605 	stb	r2,-104(fp)
    if (result != (INT8U)0) {                             /* See if we need to consume the flags      */
   12714:	e0bfe603 	ldbu	r2,-104(fp)
   12718:	10000626 	beq	r2,zero,12734 <OSFlagPend+0xf4>
        wait_type &= ~(INT8U)OS_FLAG_CONSUME;
   1271c:	e0bffe03 	ldbu	r2,-8(fp)
   12720:	10801fcc 	andi	r2,r2,127
   12724:	e0bffe05 	stb	r2,-8(fp)
        consume    = OS_TRUE;
   12728:	00800044 	movi	r2,1
   1272c:	e0bfe405 	stb	r2,-112(fp)
   12730:	00000106 	br	12738 <OSFlagPend+0xf8>
    } else {
        consume    = OS_FALSE;
   12734:	e03fe405 	stb	zero,-112(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   12738:	0005303a 	rdctl	r2,status
   1273c:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   12740:	e0fff617 	ldw	r3,-40(fp)
   12744:	00bfff84 	movi	r2,-2
   12748:	1884703a 	and	r2,r3,r2
   1274c:	1001703a 	wrctl	status,r2
  
  return context;
   12750:	e0bff617 	ldw	r2,-40(fp)
    }
/*$PAGE*/
    OS_ENTER_CRITICAL();
   12754:	e0bfe515 	stw	r2,-108(fp)
    switch (wait_type) {
   12758:	e0bffe03 	ldbu	r2,-8(fp)
   1275c:	10c00060 	cmpeqi	r3,r2,1
   12760:	1800921e 	bne	r3,zero,129ac <OSFlagPend+0x36c>
   12764:	10c00088 	cmpgei	r3,r2,2
   12768:	1800021e 	bne	r3,zero,12774 <OSFlagPend+0x134>
   1276c:	10006126 	beq	r2,zero,128f4 <OSFlagPend+0x2b4>
   12770:	0000bb06 	br	12a60 <OSFlagPend+0x420>
   12774:	10c000a0 	cmpeqi	r3,r2,2
   12778:	1800031e 	bne	r3,zero,12788 <OSFlagPend+0x148>
   1277c:	108000e0 	cmpeqi	r2,r2,3
   12780:	10002f1e 	bne	r2,zero,12840 <OSFlagPend+0x200>
   12784:	0000b606 	br	12a60 <OSFlagPend+0x420>
        case OS_FLAG_WAIT_SET_ALL:                         /* See if all required flags are set        */
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);   /* Extract only the bits we want     */
   12788:	e0bffc17 	ldw	r2,-16(fp)
   1278c:	10c0020b 	ldhu	r3,8(r2)
   12790:	e0bffd0b 	ldhu	r2,-12(fp)
   12794:	1884703a 	and	r2,r3,r2
   12798:	e0bfe80d 	sth	r2,-96(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
   1279c:	e0ffe80b 	ldhu	r3,-96(fp)
   127a0:	e0bffd0b 	ldhu	r2,-12(fp)
   127a4:	1880171e 	bne	r3,r2,12804 <OSFlagPend+0x1c4>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
   127a8:	e0bfe403 	ldbu	r2,-112(fp)
   127ac:	10800058 	cmpnei	r2,r2,1
   127b0:	1000091e 	bne	r2,zero,127d8 <OSFlagPend+0x198>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we wanted      */
   127b4:	e0bffc17 	ldw	r2,-16(fp)
   127b8:	1080020b 	ldhu	r2,8(r2)
   127bc:	1007883a 	mov	r3,r2
   127c0:	e0bfe80b 	ldhu	r2,-96(fp)
   127c4:	0084303a 	nor	r2,zero,r2
   127c8:	1884703a 	and	r2,r3,r2
   127cc:	1007883a 	mov	r3,r2
   127d0:	e0bffc17 	ldw	r2,-16(fp)
   127d4:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
   127d8:	d0a73317 	ldw	r2,-25396(gp)
   127dc:	e0ffe80b 	ldhu	r3,-96(fp)
   127e0:	10c00b0d 	sth	r3,44(r2)
   127e4:	e0bfe517 	ldw	r2,-108(fp)
   127e8:	e0bfe715 	stw	r2,-100(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   127ec:	e0bfe717 	ldw	r2,-100(fp)
   127f0:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
   127f4:	e0800217 	ldw	r2,8(fp)
   127f8:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
   127fc:	e0bfe80b 	ldhu	r2,-96(fp)
   12800:	0000f806 	br	12be4 <OSFlagPend+0x5a4>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
   12804:	e13ffd0b 	ldhu	r4,-12(fp)
   12808:	e17ffe03 	ldbu	r5,-8(fp)
   1280c:	e0bfff0b 	ldhu	r2,-4(fp)
   12810:	e0fff704 	addi	r3,fp,-36
   12814:	d8800015 	stw	r2,0(sp)
   12818:	280f883a 	mov	r7,r5
   1281c:	200d883a 	mov	r6,r4
   12820:	180b883a 	mov	r5,r3
   12824:	e13ffc17 	ldw	r4,-16(fp)
   12828:	00130b00 	call	130b0 <OS_FlagBlock>
   1282c:	e0bfe517 	ldw	r2,-108(fp)
   12830:	e0bfe915 	stw	r2,-92(fp)
   12834:	e0bfe917 	ldw	r2,-92(fp)
   12838:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
   1283c:	00009206 	br	12a88 <OSFlagPend+0x448>

        case OS_FLAG_WAIT_SET_ANY:
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);    /* Extract only the bits we want    */
   12840:	e0bffc17 	ldw	r2,-16(fp)
   12844:	10c0020b 	ldhu	r3,8(r2)
   12848:	e0bffd0b 	ldhu	r2,-12(fp)
   1284c:	1884703a 	and	r2,r3,r2
   12850:	e0bfe80d 	sth	r2,-96(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag set                      */
   12854:	e0bfe80b 	ldhu	r2,-96(fp)
   12858:	10001726 	beq	r2,zero,128b8 <OSFlagPend+0x278>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
   1285c:	e0bfe403 	ldbu	r2,-112(fp)
   12860:	10800058 	cmpnei	r2,r2,1
   12864:	1000091e 	bne	r2,zero,1288c <OSFlagPend+0x24c>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we got         */
   12868:	e0bffc17 	ldw	r2,-16(fp)
   1286c:	1080020b 	ldhu	r2,8(r2)
   12870:	1007883a 	mov	r3,r2
   12874:	e0bfe80b 	ldhu	r2,-96(fp)
   12878:	0084303a 	nor	r2,zero,r2
   1287c:	1884703a 	and	r2,r3,r2
   12880:	1007883a 	mov	r3,r2
   12884:	e0bffc17 	ldw	r2,-16(fp)
   12888:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
   1288c:	d0a73317 	ldw	r2,-25396(gp)
   12890:	e0ffe80b 	ldhu	r3,-96(fp)
   12894:	10c00b0d 	sth	r3,44(r2)
   12898:	e0bfe517 	ldw	r2,-108(fp)
   1289c:	e0bfea15 	stw	r2,-88(fp)
   128a0:	e0bfea17 	ldw	r2,-88(fp)
   128a4:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
   128a8:	e0800217 	ldw	r2,8(fp)
   128ac:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
   128b0:	e0bfe80b 	ldhu	r2,-96(fp)
   128b4:	0000cb06 	br	12be4 <OSFlagPend+0x5a4>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
   128b8:	e13ffd0b 	ldhu	r4,-12(fp)
   128bc:	e17ffe03 	ldbu	r5,-8(fp)
   128c0:	e0bfff0b 	ldhu	r2,-4(fp)
   128c4:	e0fff704 	addi	r3,fp,-36
   128c8:	d8800015 	stw	r2,0(sp)
   128cc:	280f883a 	mov	r7,r5
   128d0:	200d883a 	mov	r6,r4
   128d4:	180b883a 	mov	r5,r3
   128d8:	e13ffc17 	ldw	r4,-16(fp)
   128dc:	00130b00 	call	130b0 <OS_FlagBlock>
   128e0:	e0bfe517 	ldw	r2,-108(fp)
   128e4:	e0bfeb15 	stw	r2,-84(fp)
   128e8:	e0bfeb17 	ldw	r2,-84(fp)
   128ec:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
   128f0:	00006506 	br	12a88 <OSFlagPend+0x448>

#if OS_FLAG_WAIT_CLR_EN > 0
        case OS_FLAG_WAIT_CLR_ALL:                         /* See if all required flags are cleared    */
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags);  /* Extract only the bits we want     */
   128f4:	e0bffc17 	ldw	r2,-16(fp)
   128f8:	1080020b 	ldhu	r2,8(r2)
   128fc:	0084303a 	nor	r2,zero,r2
   12900:	1007883a 	mov	r3,r2
   12904:	e0bffd0b 	ldhu	r2,-12(fp)
   12908:	1884703a 	and	r2,r3,r2
   1290c:	e0bfe80d 	sth	r2,-96(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
   12910:	e0ffe80b 	ldhu	r3,-96(fp)
   12914:	e0bffd0b 	ldhu	r2,-12(fp)
   12918:	1880151e 	bne	r3,r2,12970 <OSFlagPend+0x330>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
   1291c:	e0bfe403 	ldbu	r2,-112(fp)
   12920:	10800058 	cmpnei	r2,r2,1
   12924:	1000071e 	bne	r2,zero,12944 <OSFlagPend+0x304>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we wanted        */
   12928:	e0bffc17 	ldw	r2,-16(fp)
   1292c:	10c0020b 	ldhu	r3,8(r2)
   12930:	e0bfe80b 	ldhu	r2,-96(fp)
   12934:	1884b03a 	or	r2,r3,r2
   12938:	1007883a 	mov	r3,r2
   1293c:	e0bffc17 	ldw	r2,-16(fp)
   12940:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
   12944:	d0a73317 	ldw	r2,-25396(gp)
   12948:	e0ffe80b 	ldhu	r3,-96(fp)
   1294c:	10c00b0d 	sth	r3,44(r2)
   12950:	e0bfe517 	ldw	r2,-108(fp)
   12954:	e0bfec15 	stw	r2,-80(fp)
   12958:	e0bfec17 	ldw	r2,-80(fp)
   1295c:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
   12960:	e0800217 	ldw	r2,8(fp)
   12964:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
   12968:	e0bfe80b 	ldhu	r2,-96(fp)
   1296c:	00009d06 	br	12be4 <OSFlagPend+0x5a4>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
   12970:	e13ffd0b 	ldhu	r4,-12(fp)
   12974:	e17ffe03 	ldbu	r5,-8(fp)
   12978:	e0bfff0b 	ldhu	r2,-4(fp)
   1297c:	e0fff704 	addi	r3,fp,-36
   12980:	d8800015 	stw	r2,0(sp)
   12984:	280f883a 	mov	r7,r5
   12988:	200d883a 	mov	r6,r4
   1298c:	180b883a 	mov	r5,r3
   12990:	e13ffc17 	ldw	r4,-16(fp)
   12994:	00130b00 	call	130b0 <OS_FlagBlock>
   12998:	e0bfe517 	ldw	r2,-108(fp)
   1299c:	e0bfed15 	stw	r2,-76(fp)
   129a0:	e0bfed17 	ldw	r2,-76(fp)
   129a4:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
   129a8:	00003706 	br	12a88 <OSFlagPend+0x448>

        case OS_FLAG_WAIT_CLR_ANY:
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags); /* Extract only the bits we want      */
   129ac:	e0bffc17 	ldw	r2,-16(fp)
   129b0:	1080020b 	ldhu	r2,8(r2)
   129b4:	0084303a 	nor	r2,zero,r2
   129b8:	1007883a 	mov	r3,r2
   129bc:	e0bffd0b 	ldhu	r2,-12(fp)
   129c0:	1884703a 	and	r2,r3,r2
   129c4:	e0bfe80d 	sth	r2,-96(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag cleared                  */
   129c8:	e0bfe80b 	ldhu	r2,-96(fp)
   129cc:	10001526 	beq	r2,zero,12a24 <OSFlagPend+0x3e4>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
   129d0:	e0bfe403 	ldbu	r2,-112(fp)
   129d4:	10800058 	cmpnei	r2,r2,1
   129d8:	1000071e 	bne	r2,zero,129f8 <OSFlagPend+0x3b8>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we got           */
   129dc:	e0bffc17 	ldw	r2,-16(fp)
   129e0:	10c0020b 	ldhu	r3,8(r2)
   129e4:	e0bfe80b 	ldhu	r2,-96(fp)
   129e8:	1884b03a 	or	r2,r3,r2
   129ec:	1007883a 	mov	r3,r2
   129f0:	e0bffc17 	ldw	r2,-16(fp)
   129f4:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
   129f8:	d0a73317 	ldw	r2,-25396(gp)
   129fc:	e0ffe80b 	ldhu	r3,-96(fp)
   12a00:	10c00b0d 	sth	r3,44(r2)
   12a04:	e0bfe517 	ldw	r2,-108(fp)
   12a08:	e0bfee15 	stw	r2,-72(fp)
   12a0c:	e0bfee17 	ldw	r2,-72(fp)
   12a10:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
   12a14:	e0800217 	ldw	r2,8(fp)
   12a18:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
   12a1c:	e0bfe80b 	ldhu	r2,-96(fp)
   12a20:	00007006 	br	12be4 <OSFlagPend+0x5a4>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
   12a24:	e13ffd0b 	ldhu	r4,-12(fp)
   12a28:	e17ffe03 	ldbu	r5,-8(fp)
   12a2c:	e0bfff0b 	ldhu	r2,-4(fp)
   12a30:	e0fff704 	addi	r3,fp,-36
   12a34:	d8800015 	stw	r2,0(sp)
   12a38:	280f883a 	mov	r7,r5
   12a3c:	200d883a 	mov	r6,r4
   12a40:	180b883a 	mov	r5,r3
   12a44:	e13ffc17 	ldw	r4,-16(fp)
   12a48:	00130b00 	call	130b0 <OS_FlagBlock>
   12a4c:	e0bfe517 	ldw	r2,-108(fp)
   12a50:	e0bfef15 	stw	r2,-68(fp)
   12a54:	e0bfef17 	ldw	r2,-68(fp)
   12a58:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
   12a5c:	00000a06 	br	12a88 <OSFlagPend+0x448>
   12a60:	e0bfe517 	ldw	r2,-108(fp)
   12a64:	e0bff015 	stw	r2,-64(fp)
   12a68:	e0bff017 	ldw	r2,-64(fp)
   12a6c:	1001703a 	wrctl	status,r2
#endif

        default:
             OS_EXIT_CRITICAL();
             flags_rdy = (OS_FLAGS)0;
   12a70:	e03fe80d 	sth	zero,-96(fp)
             *perr      = OS_ERR_FLAG_WAIT_TYPE;
   12a74:	e0800217 	ldw	r2,8(fp)
   12a78:	00c01bc4 	movi	r3,111
   12a7c:	10c00005 	stb	r3,0(r2)
             return (flags_rdy);
   12a80:	e0bfe80b 	ldhu	r2,-96(fp)
   12a84:	00005706 	br	12be4 <OSFlagPend+0x5a4>
    }
/*$PAGE*/
    OS_Sched();                                            /* Find next HPT ready to run               */
   12a88:	00115100 	call	11510 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   12a8c:	0005303a 	rdctl	r2,status
   12a90:	e0bff115 	stw	r2,-60(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   12a94:	e0fff117 	ldw	r3,-60(fp)
   12a98:	00bfff84 	movi	r2,-2
   12a9c:	1884703a 	and	r2,r3,r2
   12aa0:	1001703a 	wrctl	status,r2
  
  return context;
   12aa4:	e0bff117 	ldw	r2,-60(fp)
    OS_ENTER_CRITICAL();
   12aa8:	e0bfe515 	stw	r2,-108(fp)
    if (OSTCBCur->OSTCBStatPend != OS_STAT_PEND_OK) {      /* Have we timed-out or aborted?            */
   12aac:	d0a73317 	ldw	r2,-25396(gp)
   12ab0:	10800c43 	ldbu	r2,49(r2)
   12ab4:	10803fcc 	andi	r2,r2,255
   12ab8:	10001c26 	beq	r2,zero,12b2c <OSFlagPend+0x4ec>
        pend_stat                = OSTCBCur->OSTCBStatPend;
   12abc:	d0a73317 	ldw	r2,-25396(gp)
   12ac0:	10800c43 	ldbu	r2,49(r2)
   12ac4:	e0bff305 	stb	r2,-52(fp)
        OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
   12ac8:	d0a73317 	ldw	r2,-25396(gp)
   12acc:	10000c45 	stb	zero,49(r2)
        OS_FlagUnlink(&node);
   12ad0:	e0bff704 	addi	r2,fp,-36
   12ad4:	1009883a 	mov	r4,r2
   12ad8:	00133e40 	call	133e4 <OS_FlagUnlink>
        OSTCBCur->OSTCBStat      = OS_STAT_RDY;            /* Yes, make task ready-to-run              */
   12adc:	d0a73317 	ldw	r2,-25396(gp)
   12ae0:	10000c05 	stb	zero,48(r2)
   12ae4:	e0bfe517 	ldw	r2,-108(fp)
   12ae8:	e0bff215 	stw	r2,-56(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   12aec:	e0bff217 	ldw	r2,-56(fp)
   12af0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        flags_rdy                = (OS_FLAGS)0;
   12af4:	e03fe80d 	sth	zero,-96(fp)
        switch (pend_stat) {
   12af8:	e0bff303 	ldbu	r2,-52(fp)
   12afc:	108000a0 	cmpeqi	r2,r2,2
   12b00:	10000426 	beq	r2,zero,12b14 <OSFlagPend+0x4d4>
            case OS_STAT_PEND_ABORT:
                 *perr = OS_ERR_PEND_ABORT;                 /* Indicate that we aborted   waiting       */
   12b04:	e0800217 	ldw	r2,8(fp)
   12b08:	00c00384 	movi	r3,14
   12b0c:	10c00005 	stb	r3,0(r2)
                 break;
   12b10:	00000406 	br	12b24 <OSFlagPend+0x4e4>

            case OS_STAT_PEND_TO:
            default:
                 *perr = OS_ERR_TIMEOUT;                    /* Indicate that we timed-out waiting       */
   12b14:	e0800217 	ldw	r2,8(fp)
   12b18:	00c00284 	movi	r3,10
   12b1c:	10c00005 	stb	r3,0(r2)
                 break;
   12b20:	0001883a 	nop
        }
        return (flags_rdy);
   12b24:	e0bfe80b 	ldhu	r2,-96(fp)
   12b28:	00002e06 	br	12be4 <OSFlagPend+0x5a4>
    }
    flags_rdy = OSTCBCur->OSTCBFlagsRdy;
   12b2c:	d0a73317 	ldw	r2,-25396(gp)
   12b30:	10800b0b 	ldhu	r2,44(r2)
   12b34:	e0bfe80d 	sth	r2,-96(fp)
    if (consume == OS_TRUE) {                              /* See if we need to consume the flags      */
   12b38:	e0bfe403 	ldbu	r2,-112(fp)
   12b3c:	10800058 	cmpnei	r2,r2,1
   12b40:	1000211e 	bne	r2,zero,12bc8 <OSFlagPend+0x588>
        switch (wait_type) {
   12b44:	e0bffe03 	ldbu	r2,-8(fp)
   12b48:	10001616 	blt	r2,zero,12ba4 <OSFlagPend+0x564>
   12b4c:	10c00090 	cmplti	r3,r2,2
   12b50:	18000c1e 	bne	r3,zero,12b84 <OSFlagPend+0x544>
   12b54:	10800108 	cmpgei	r2,r2,4
   12b58:	1000121e 	bne	r2,zero,12ba4 <OSFlagPend+0x564>
            case OS_FLAG_WAIT_SET_ALL:
            case OS_FLAG_WAIT_SET_ANY:                     /* Clear ONLY the flags we got              */
                 pgrp->OSFlagFlags &= ~flags_rdy;
   12b5c:	e0bffc17 	ldw	r2,-16(fp)
   12b60:	1080020b 	ldhu	r2,8(r2)
   12b64:	1007883a 	mov	r3,r2
   12b68:	e0bfe80b 	ldhu	r2,-96(fp)
   12b6c:	0084303a 	nor	r2,zero,r2
   12b70:	1884703a 	and	r2,r3,r2
   12b74:	1007883a 	mov	r3,r2
   12b78:	e0bffc17 	ldw	r2,-16(fp)
   12b7c:	10c0020d 	sth	r3,8(r2)
                 break;
   12b80:	00001106 	br	12bc8 <OSFlagPend+0x588>

#if OS_FLAG_WAIT_CLR_EN > 0
            case OS_FLAG_WAIT_CLR_ALL:
            case OS_FLAG_WAIT_CLR_ANY:                     /* Set   ONLY the flags we got              */
                 pgrp->OSFlagFlags |=  flags_rdy;
   12b84:	e0bffc17 	ldw	r2,-16(fp)
   12b88:	10c0020b 	ldhu	r3,8(r2)
   12b8c:	e0bfe80b 	ldhu	r2,-96(fp)
   12b90:	1884b03a 	or	r2,r3,r2
   12b94:	1007883a 	mov	r3,r2
   12b98:	e0bffc17 	ldw	r2,-16(fp)
   12b9c:	10c0020d 	sth	r3,8(r2)
                 break;
   12ba0:	00000906 	br	12bc8 <OSFlagPend+0x588>
   12ba4:	e0bfe517 	ldw	r2,-108(fp)
   12ba8:	e0bff415 	stw	r2,-48(fp)
   12bac:	e0bff417 	ldw	r2,-48(fp)
   12bb0:	1001703a 	wrctl	status,r2
#endif
            default:
                 OS_EXIT_CRITICAL();
                 *perr = OS_ERR_FLAG_WAIT_TYPE;
   12bb4:	e0800217 	ldw	r2,8(fp)
   12bb8:	00c01bc4 	movi	r3,111
   12bbc:	10c00005 	stb	r3,0(r2)
                 return ((OS_FLAGS)0);
   12bc0:	0005883a 	mov	r2,zero
   12bc4:	00000706 	br	12be4 <OSFlagPend+0x5a4>
   12bc8:	e0bfe517 	ldw	r2,-108(fp)
   12bcc:	e0bff515 	stw	r2,-44(fp)
   12bd0:	e0bff517 	ldw	r2,-44(fp)
   12bd4:	1001703a 	wrctl	status,r2
        }
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;                                   /* Event(s) must have occurred              */
   12bd8:	e0800217 	ldw	r2,8(fp)
   12bdc:	10000005 	stb	zero,0(r2)
    return (flags_rdy);
   12be0:	e0bfe80b 	ldhu	r2,-96(fp)
}
   12be4:	e037883a 	mov	sp,fp
   12be8:	dfc00117 	ldw	ra,4(sp)
   12bec:	df000017 	ldw	fp,0(sp)
   12bf0:	dec00204 	addi	sp,sp,8
   12bf4:	f800283a 	ret

00012bf8 <OSFlagPendGetFlagsRdy>:
* Called from: Task ONLY
*********************************************************************************************************
*/

OS_FLAGS  OSFlagPendGetFlagsRdy (void)
{
   12bf8:	defffb04 	addi	sp,sp,-20
   12bfc:	df000415 	stw	fp,16(sp)
   12c00:	df000404 	addi	fp,sp,16
    OS_FLAGS      flags;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
   12c04:	e03ffc15 	stw	zero,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   12c08:	0005303a 	rdctl	r2,status
   12c0c:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   12c10:	e0fffe17 	ldw	r3,-8(fp)
   12c14:	00bfff84 	movi	r2,-2
   12c18:	1884703a 	and	r2,r3,r2
   12c1c:	1001703a 	wrctl	status,r2
  
  return context;
   12c20:	e0bffe17 	ldw	r2,-8(fp)
#endif



    OS_ENTER_CRITICAL();
   12c24:	e0bffc15 	stw	r2,-16(fp)
    flags = OSTCBCur->OSTCBFlagsRdy;
   12c28:	d0a73317 	ldw	r2,-25396(gp)
   12c2c:	10800b0b 	ldhu	r2,44(r2)
   12c30:	e0bffd0d 	sth	r2,-12(fp)
   12c34:	e0bffc17 	ldw	r2,-16(fp)
   12c38:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   12c3c:	e0bfff17 	ldw	r2,-4(fp)
   12c40:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (flags);
   12c44:	e0bffd0b 	ldhu	r2,-12(fp)
}
   12c48:	e037883a 	mov	sp,fp
   12c4c:	df000017 	ldw	fp,0(sp)
   12c50:	dec00104 	addi	sp,sp,4
   12c54:	f800283a 	ret

00012c58 <OSFlagPost>:
*              2) The amount of time interrupts are DISABLED depends on the number of tasks waiting on
*                 the event flag group.
*********************************************************************************************************
*/
OS_FLAGS  OSFlagPost (OS_FLAG_GRP *pgrp, OS_FLAGS flags, INT8U opt, INT8U *perr)
{
   12c58:	deffef04 	addi	sp,sp,-68
   12c5c:	dfc01015 	stw	ra,64(sp)
   12c60:	df000f15 	stw	fp,60(sp)
   12c64:	df000f04 	addi	fp,sp,60
   12c68:	e13ffc15 	stw	r4,-16(fp)
   12c6c:	2807883a 	mov	r3,r5
   12c70:	3005883a 	mov	r2,r6
   12c74:	e1ffff15 	stw	r7,-4(fp)
   12c78:	e0fffd0d 	sth	r3,-12(fp)
   12c7c:	e0bffe05 	stb	r2,-8(fp)
    BOOLEAN       sched;
    OS_FLAGS      flags_cur;
    OS_FLAGS      flags_rdy;
    BOOLEAN       rdy;
#if OS_CRITICAL_METHOD == 3                          /* Allocate storage for CPU status register       */
    OS_CPU_SR     cpu_sr = 0;
   12c80:	e03ff315 	stw	zero,-52(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                        /* Validate 'perr'                                */
   12c84:	e0bfff17 	ldw	r2,-4(fp)
   12c88:	1000021e 	bne	r2,zero,12c94 <OSFlagPost+0x3c>
        return ((OS_FLAGS)0);
   12c8c:	0005883a 	mov	r2,zero
   12c90:	0000d106 	br	12fd8 <OSFlagPost+0x380>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                  /* Validate 'pgrp'                                */
   12c94:	e0bffc17 	ldw	r2,-16(fp)
   12c98:	1000051e 	bne	r2,zero,12cb0 <OSFlagPost+0x58>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
   12c9c:	e0bfff17 	ldw	r2,-4(fp)
   12ca0:	00c01b84 	movi	r3,110
   12ca4:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
   12ca8:	0005883a 	mov	r2,zero
   12cac:	0000ca06 	br	12fd8 <OSFlagPost+0x380>
    }
#endif
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {    /* Make sure we are pointing to an event flag grp */
   12cb0:	e0bffc17 	ldw	r2,-16(fp)
   12cb4:	10800003 	ldbu	r2,0(r2)
   12cb8:	10803fcc 	andi	r2,r2,255
   12cbc:	10800160 	cmpeqi	r2,r2,5
   12cc0:	1000051e 	bne	r2,zero,12cd8 <OSFlagPost+0x80>
        *perr = OS_ERR_EVENT_TYPE;
   12cc4:	e0bfff17 	ldw	r2,-4(fp)
   12cc8:	00c00044 	movi	r3,1
   12ccc:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
   12cd0:	0005883a 	mov	r2,zero
   12cd4:	0000c006 	br	12fd8 <OSFlagPost+0x380>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   12cd8:	0005303a 	rdctl	r2,status
   12cdc:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   12ce0:	e0fffb17 	ldw	r3,-20(fp)
   12ce4:	00bfff84 	movi	r2,-2
   12ce8:	1884703a 	and	r2,r3,r2
   12cec:	1001703a 	wrctl	status,r2
  
  return context;
   12cf0:	e0bffb17 	ldw	r2,-20(fp)
    }
/*$PAGE*/
    OS_ENTER_CRITICAL();
   12cf4:	e0bff315 	stw	r2,-52(fp)
    switch (opt) {
   12cf8:	e0bffe03 	ldbu	r2,-8(fp)
   12cfc:	10000326 	beq	r2,zero,12d0c <OSFlagPost+0xb4>
   12d00:	10800060 	cmpeqi	r2,r2,1
   12d04:	10000b1e 	bne	r2,zero,12d34 <OSFlagPost+0xdc>
   12d08:	00001206 	br	12d54 <OSFlagPost+0xfc>
        case OS_FLAG_CLR:
             pgrp->OSFlagFlags &= ~flags;            /* Clear the flags specified in the group         */
   12d0c:	e0bffc17 	ldw	r2,-16(fp)
   12d10:	1080020b 	ldhu	r2,8(r2)
   12d14:	1007883a 	mov	r3,r2
   12d18:	e0bffd0b 	ldhu	r2,-12(fp)
   12d1c:	0084303a 	nor	r2,zero,r2
   12d20:	1884703a 	and	r2,r3,r2
   12d24:	1007883a 	mov	r3,r2
   12d28:	e0bffc17 	ldw	r2,-16(fp)
   12d2c:	10c0020d 	sth	r3,8(r2)
             break;
   12d30:	00001106 	br	12d78 <OSFlagPost+0x120>

        case OS_FLAG_SET:
             pgrp->OSFlagFlags |=  flags;            /* Set   the flags specified in the group         */
   12d34:	e0bffc17 	ldw	r2,-16(fp)
   12d38:	10c0020b 	ldhu	r3,8(r2)
   12d3c:	e0bffd0b 	ldhu	r2,-12(fp)
   12d40:	1884b03a 	or	r2,r3,r2
   12d44:	1007883a 	mov	r3,r2
   12d48:	e0bffc17 	ldw	r2,-16(fp)
   12d4c:	10c0020d 	sth	r3,8(r2)
             break;
   12d50:	00000906 	br	12d78 <OSFlagPost+0x120>
   12d54:	e0bff317 	ldw	r2,-52(fp)
   12d58:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   12d5c:	e0bff417 	ldw	r2,-48(fp)
   12d60:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();                     /* INVALID option                                 */
             *perr = OS_ERR_FLAG_INVALID_OPT;
   12d64:	e0bfff17 	ldw	r2,-4(fp)
   12d68:	00c01c44 	movi	r3,113
   12d6c:	10c00005 	stb	r3,0(r2)
             return ((OS_FLAGS)0);
   12d70:	0005883a 	mov	r2,zero
   12d74:	00009806 	br	12fd8 <OSFlagPost+0x380>
    }
    sched = OS_FALSE;                                /* Indicate that we don't need rescheduling       */
   12d78:	e03ff205 	stb	zero,-56(fp)
    pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
   12d7c:	e0bffc17 	ldw	r2,-16(fp)
   12d80:	10800117 	ldw	r2,4(r2)
   12d84:	e0bff115 	stw	r2,-60(fp)
    while (pnode != (OS_FLAG_NODE *)0) {             /* Go through all tasks waiting on event flag(s)  */
   12d88:	00007706 	br	12f68 <OSFlagPost+0x310>
        switch (pnode->OSFlagNodeWaitType) {
   12d8c:	e0bff117 	ldw	r2,-60(fp)
   12d90:	10800483 	ldbu	r2,18(r2)
   12d94:	10803fcc 	andi	r2,r2,255
   12d98:	10c00060 	cmpeqi	r3,r2,1
   12d9c:	18004a1e 	bne	r3,zero,12ec8 <OSFlagPost+0x270>
   12da0:	10c00088 	cmpgei	r3,r2,2
   12da4:	1800021e 	bne	r3,zero,12db0 <OSFlagPost+0x158>
   12da8:	10002f26 	beq	r2,zero,12e68 <OSFlagPost+0x210>
   12dac:	00005b06 	br	12f1c <OSFlagPost+0x2c4>
   12db0:	10c000a0 	cmpeqi	r3,r2,2
   12db4:	1800031e 	bne	r3,zero,12dc4 <OSFlagPost+0x16c>
   12db8:	108000e0 	cmpeqi	r2,r2,3
   12dbc:	1000171e 	bne	r2,zero,12e1c <OSFlagPost+0x1c4>
   12dc0:	00005606 	br	12f1c <OSFlagPost+0x2c4>
            case OS_FLAG_WAIT_SET_ALL:               /* See if all req. flags are set for current node */
                 flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
   12dc4:	e0bffc17 	ldw	r2,-16(fp)
   12dc8:	10c0020b 	ldhu	r3,8(r2)
   12dcc:	e0bff117 	ldw	r2,-60(fp)
   12dd0:	1080040b 	ldhu	r2,16(r2)
   12dd4:	1884703a 	and	r2,r3,r2
   12dd8:	e0bff60d 	sth	r2,-40(fp)
                 if (flags_rdy == pnode->OSFlagNodeFlags) {
   12ddc:	e0bff117 	ldw	r2,-60(fp)
   12de0:	1080040b 	ldhu	r2,16(r2)
   12de4:	10ffffcc 	andi	r3,r2,65535
   12de8:	e0bff60b 	ldhu	r2,-40(fp)
   12dec:	1880541e 	bne	r3,r2,12f40 <OSFlagPost+0x2e8>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
   12df0:	e0bff60b 	ldhu	r2,-40(fp)
   12df4:	100b883a 	mov	r5,r2
   12df8:	e13ff117 	ldw	r4,-60(fp)
   12dfc:	00132f00 	call	132f0 <OS_FlagTaskRdy>
   12e00:	e0bff685 	stb	r2,-38(fp)
                     if (rdy == OS_TRUE) {
   12e04:	e0bff683 	ldbu	r2,-38(fp)
   12e08:	10800058 	cmpnei	r2,r2,1
   12e0c:	10004c1e 	bne	r2,zero,12f40 <OSFlagPost+0x2e8>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
   12e10:	00800044 	movi	r2,1
   12e14:	e0bff205 	stb	r2,-56(fp)
                     }
                 }
                 break;
   12e18:	00004906 	br	12f40 <OSFlagPost+0x2e8>

            case OS_FLAG_WAIT_SET_ANY:               /* See if any flag set                            */
                 flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
   12e1c:	e0bffc17 	ldw	r2,-16(fp)
   12e20:	10c0020b 	ldhu	r3,8(r2)
   12e24:	e0bff117 	ldw	r2,-60(fp)
   12e28:	1080040b 	ldhu	r2,16(r2)
   12e2c:	1884703a 	and	r2,r3,r2
   12e30:	e0bff60d 	sth	r2,-40(fp)
                 if (flags_rdy != (OS_FLAGS)0) {
   12e34:	e0bff60b 	ldhu	r2,-40(fp)
   12e38:	10004326 	beq	r2,zero,12f48 <OSFlagPost+0x2f0>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
   12e3c:	e0bff60b 	ldhu	r2,-40(fp)
   12e40:	100b883a 	mov	r5,r2
   12e44:	e13ff117 	ldw	r4,-60(fp)
   12e48:	00132f00 	call	132f0 <OS_FlagTaskRdy>
   12e4c:	e0bff685 	stb	r2,-38(fp)
                     if (rdy == OS_TRUE) {
   12e50:	e0bff683 	ldbu	r2,-38(fp)
   12e54:	10800058 	cmpnei	r2,r2,1
   12e58:	10003b1e 	bne	r2,zero,12f48 <OSFlagPost+0x2f0>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
   12e5c:	00800044 	movi	r2,1
   12e60:	e0bff205 	stb	r2,-56(fp)
                     }
                 }
                 break;
   12e64:	00003806 	br	12f48 <OSFlagPost+0x2f0>

#if OS_FLAG_WAIT_CLR_EN > 0
            case OS_FLAG_WAIT_CLR_ALL:               /* See if all req. flags are set for current node */
                 flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
   12e68:	e0bffc17 	ldw	r2,-16(fp)
   12e6c:	1080020b 	ldhu	r2,8(r2)
   12e70:	0084303a 	nor	r2,zero,r2
   12e74:	1007883a 	mov	r3,r2
   12e78:	e0bff117 	ldw	r2,-60(fp)
   12e7c:	1080040b 	ldhu	r2,16(r2)
   12e80:	1884703a 	and	r2,r3,r2
   12e84:	e0bff60d 	sth	r2,-40(fp)
                 if (flags_rdy == pnode->OSFlagNodeFlags) {
   12e88:	e0bff117 	ldw	r2,-60(fp)
   12e8c:	1080040b 	ldhu	r2,16(r2)
   12e90:	10ffffcc 	andi	r3,r2,65535
   12e94:	e0bff60b 	ldhu	r2,-40(fp)
   12e98:	18802d1e 	bne	r3,r2,12f50 <OSFlagPost+0x2f8>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
   12e9c:	e0bff60b 	ldhu	r2,-40(fp)
   12ea0:	100b883a 	mov	r5,r2
   12ea4:	e13ff117 	ldw	r4,-60(fp)
   12ea8:	00132f00 	call	132f0 <OS_FlagTaskRdy>
   12eac:	e0bff685 	stb	r2,-38(fp)
                     if (rdy == OS_TRUE) {
   12eb0:	e0bff683 	ldbu	r2,-38(fp)
   12eb4:	10800058 	cmpnei	r2,r2,1
   12eb8:	1000251e 	bne	r2,zero,12f50 <OSFlagPost+0x2f8>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
   12ebc:	00800044 	movi	r2,1
   12ec0:	e0bff205 	stb	r2,-56(fp)
                     }
                 }
                 break;
   12ec4:	00002206 	br	12f50 <OSFlagPost+0x2f8>

            case OS_FLAG_WAIT_CLR_ANY:               /* See if any flag set                            */
                 flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
   12ec8:	e0bffc17 	ldw	r2,-16(fp)
   12ecc:	1080020b 	ldhu	r2,8(r2)
   12ed0:	0084303a 	nor	r2,zero,r2
   12ed4:	1007883a 	mov	r3,r2
   12ed8:	e0bff117 	ldw	r2,-60(fp)
   12edc:	1080040b 	ldhu	r2,16(r2)
   12ee0:	1884703a 	and	r2,r3,r2
   12ee4:	e0bff60d 	sth	r2,-40(fp)
                 if (flags_rdy != (OS_FLAGS)0) {
   12ee8:	e0bff60b 	ldhu	r2,-40(fp)
   12eec:	10001a26 	beq	r2,zero,12f58 <OSFlagPost+0x300>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
   12ef0:	e0bff60b 	ldhu	r2,-40(fp)
   12ef4:	100b883a 	mov	r5,r2
   12ef8:	e13ff117 	ldw	r4,-60(fp)
   12efc:	00132f00 	call	132f0 <OS_FlagTaskRdy>
   12f00:	e0bff685 	stb	r2,-38(fp)
                     if (rdy == OS_TRUE) {
   12f04:	e0bff683 	ldbu	r2,-38(fp)
   12f08:	10800058 	cmpnei	r2,r2,1
   12f0c:	1000121e 	bne	r2,zero,12f58 <OSFlagPost+0x300>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
   12f10:	00800044 	movi	r2,1
   12f14:	e0bff205 	stb	r2,-56(fp)
                     }
                 }
                 break;
   12f18:	00000f06 	br	12f58 <OSFlagPost+0x300>
   12f1c:	e0bff317 	ldw	r2,-52(fp)
   12f20:	e0bff515 	stw	r2,-44(fp)
   12f24:	e0bff517 	ldw	r2,-44(fp)
   12f28:	1001703a 	wrctl	status,r2
#endif
            default:
                 OS_EXIT_CRITICAL();
                 *perr = OS_ERR_FLAG_WAIT_TYPE;
   12f2c:	e0bfff17 	ldw	r2,-4(fp)
   12f30:	00c01bc4 	movi	r3,111
   12f34:	10c00005 	stb	r3,0(r2)
                 return ((OS_FLAGS)0);
   12f38:	0005883a 	mov	r2,zero
   12f3c:	00002606 	br	12fd8 <OSFlagPost+0x380>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
                     if (rdy == OS_TRUE) {
                         sched = OS_TRUE;                     /* When done we will reschedule          */
                     }
                 }
                 break;
   12f40:	0001883a 	nop
   12f44:	00000506 	br	12f5c <OSFlagPost+0x304>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
                     if (rdy == OS_TRUE) {
                         sched = OS_TRUE;                     /* When done we will reschedule          */
                     }
                 }
                 break;
   12f48:	0001883a 	nop
   12f4c:	00000306 	br	12f5c <OSFlagPost+0x304>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
                     if (rdy == OS_TRUE) {
                         sched = OS_TRUE;                     /* When done we will reschedule          */
                     }
                 }
                 break;
   12f50:	0001883a 	nop
   12f54:	00000106 	br	12f5c <OSFlagPost+0x304>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
                     if (rdy == OS_TRUE) {
                         sched = OS_TRUE;                     /* When done we will reschedule          */
                     }
                 }
                 break;
   12f58:	0001883a 	nop
            default:
                 OS_EXIT_CRITICAL();
                 *perr = OS_ERR_FLAG_WAIT_TYPE;
                 return ((OS_FLAGS)0);
        }
        pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext; /* Point to next task waiting for event flag(s) */
   12f5c:	e0bff117 	ldw	r2,-60(fp)
   12f60:	10800017 	ldw	r2,0(r2)
   12f64:	e0bff115 	stw	r2,-60(fp)
             *perr = OS_ERR_FLAG_INVALID_OPT;
             return ((OS_FLAGS)0);
    }
    sched = OS_FALSE;                                /* Indicate that we don't need rescheduling       */
    pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
    while (pnode != (OS_FLAG_NODE *)0) {             /* Go through all tasks waiting on event flag(s)  */
   12f68:	e0bff117 	ldw	r2,-60(fp)
   12f6c:	103f871e 	bne	r2,zero,12d8c <__alt_data_end+0xfffe2d8c>
   12f70:	e0bff317 	ldw	r2,-52(fp)
   12f74:	e0bff715 	stw	r2,-36(fp)
   12f78:	e0bff717 	ldw	r2,-36(fp)
   12f7c:	1001703a 	wrctl	status,r2
                 return ((OS_FLAGS)0);
        }
        pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext; /* Point to next task waiting for event flag(s) */
    }
    OS_EXIT_CRITICAL();
    if (sched == OS_TRUE) {
   12f80:	e0bff203 	ldbu	r2,-56(fp)
   12f84:	10800058 	cmpnei	r2,r2,1
   12f88:	1000011e 	bne	r2,zero,12f90 <OSFlagPost+0x338>
        OS_Sched();
   12f8c:	00115100 	call	11510 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   12f90:	0005303a 	rdctl	r2,status
   12f94:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   12f98:	e0fffa17 	ldw	r3,-24(fp)
   12f9c:	00bfff84 	movi	r2,-2
   12fa0:	1884703a 	and	r2,r3,r2
   12fa4:	1001703a 	wrctl	status,r2
  
  return context;
   12fa8:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
   12fac:	e0bff315 	stw	r2,-52(fp)
    flags_cur = pgrp->OSFlagFlags;
   12fb0:	e0bffc17 	ldw	r2,-16(fp)
   12fb4:	1080020b 	ldhu	r2,8(r2)
   12fb8:	e0bff90d 	sth	r2,-28(fp)
   12fbc:	e0bff317 	ldw	r2,-52(fp)
   12fc0:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   12fc4:	e0bff817 	ldw	r2,-32(fp)
   12fc8:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr     = OS_ERR_NONE;
   12fcc:	e0bfff17 	ldw	r2,-4(fp)
   12fd0:	10000005 	stb	zero,0(r2)
    return (flags_cur);
   12fd4:	e0bff90b 	ldhu	r2,-28(fp)
}
   12fd8:	e037883a 	mov	sp,fp
   12fdc:	dfc00117 	ldw	ra,4(sp)
   12fe0:	df000017 	ldw	fp,0(sp)
   12fe4:	dec00204 	addi	sp,sp,8
   12fe8:	f800283a 	ret

00012fec <OSFlagQuery>:
*********************************************************************************************************
*/

#if OS_FLAG_QUERY_EN > 0
OS_FLAGS  OSFlagQuery (OS_FLAG_GRP *pgrp, INT8U *perr)
{
   12fec:	defff904 	addi	sp,sp,-28
   12ff0:	df000615 	stw	fp,24(sp)
   12ff4:	df000604 	addi	fp,sp,24
   12ff8:	e13ffe15 	stw	r4,-8(fp)
   12ffc:	e17fff15 	stw	r5,-4(fp)
    OS_FLAGS   flags;
#if OS_CRITICAL_METHOD == 3                       /* Allocate storage for CPU status register          */
    OS_CPU_SR  cpu_sr = 0;
   13000:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                     /* Validate 'perr'                                   */
   13004:	e0bfff17 	ldw	r2,-4(fp)
   13008:	1000021e 	bne	r2,zero,13014 <OSFlagQuery+0x28>
        return ((OS_FLAGS)0);
   1300c:	0005883a 	mov	r2,zero
   13010:	00002306 	br	130a0 <OSFlagQuery+0xb4>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {               /* Validate 'pgrp'                                   */
   13014:	e0bffe17 	ldw	r2,-8(fp)
   13018:	1000051e 	bne	r2,zero,13030 <OSFlagQuery+0x44>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
   1301c:	e0bfff17 	ldw	r2,-4(fp)
   13020:	00c01b84 	movi	r3,110
   13024:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
   13028:	0005883a 	mov	r2,zero
   1302c:	00001c06 	br	130a0 <OSFlagQuery+0xb4>
    }
#endif
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) { /* Validate event block type                         */
   13030:	e0bffe17 	ldw	r2,-8(fp)
   13034:	10800003 	ldbu	r2,0(r2)
   13038:	10803fcc 	andi	r2,r2,255
   1303c:	10800160 	cmpeqi	r2,r2,5
   13040:	1000051e 	bne	r2,zero,13058 <OSFlagQuery+0x6c>
        *perr = OS_ERR_EVENT_TYPE;
   13044:	e0bfff17 	ldw	r2,-4(fp)
   13048:	00c00044 	movi	r3,1
   1304c:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
   13050:	0005883a 	mov	r2,zero
   13054:	00001206 	br	130a0 <OSFlagQuery+0xb4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   13058:	0005303a 	rdctl	r2,status
   1305c:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   13060:	e0fffc17 	ldw	r3,-16(fp)
   13064:	00bfff84 	movi	r2,-2
   13068:	1884703a 	and	r2,r3,r2
   1306c:	1001703a 	wrctl	status,r2
  
  return context;
   13070:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
   13074:	e0bffa15 	stw	r2,-24(fp)
    flags = pgrp->OSFlagFlags;
   13078:	e0bffe17 	ldw	r2,-8(fp)
   1307c:	1080020b 	ldhu	r2,8(r2)
   13080:	e0bffb0d 	sth	r2,-20(fp)
   13084:	e0bffa17 	ldw	r2,-24(fp)
   13088:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1308c:	e0bffd17 	ldw	r2,-12(fp)
   13090:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   13094:	e0bfff17 	ldw	r2,-4(fp)
   13098:	10000005 	stb	zero,0(r2)
    return (flags);                               /* Return the current value of the event flags       */
   1309c:	e0bffb0b 	ldhu	r2,-20(fp)
}
   130a0:	e037883a 	mov	sp,fp
   130a4:	df000017 	ldw	fp,0(sp)
   130a8:	dec00104 	addi	sp,sp,4
   130ac:	f800283a 	ret

000130b0 <OS_FlagBlock>:
* Note(s)    : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

static  void  OS_FlagBlock (OS_FLAG_GRP *pgrp, OS_FLAG_NODE *pnode, OS_FLAGS flags, INT8U wait_type, INT16U timeout)
{
   130b0:	defff804 	addi	sp,sp,-32
   130b4:	df000715 	stw	fp,28(sp)
   130b8:	df000704 	addi	fp,sp,28
   130bc:	e13ffb15 	stw	r4,-20(fp)
   130c0:	e17ffc15 	stw	r5,-16(fp)
   130c4:	3009883a 	mov	r4,r6
   130c8:	3807883a 	mov	r3,r7
   130cc:	e0800117 	ldw	r2,4(fp)
   130d0:	e13ffd0d 	sth	r4,-12(fp)
   130d4:	e0fffe05 	stb	r3,-8(fp)
   130d8:	e0bfff0d 	sth	r2,-4(fp)
    OS_FLAG_NODE  *pnode_next;
    INT8U          y;


    OSTCBCur->OSTCBStat      |= OS_STAT_FLAG;
   130dc:	d0a73317 	ldw	r2,-25396(gp)
   130e0:	d0e73317 	ldw	r3,-25396(gp)
   130e4:	18c00c03 	ldbu	r3,48(r3)
   130e8:	18c00814 	ori	r3,r3,32
   130ec:	10c00c05 	stb	r3,48(r2)
    OSTCBCur->OSTCBStatPend   = OS_STAT_PEND_OK;
   130f0:	d0a73317 	ldw	r2,-25396(gp)
   130f4:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly        = timeout;              /* Store timeout in task's TCB                   */
   130f8:	d0a73317 	ldw	r2,-25396(gp)
   130fc:	e0ffff0b 	ldhu	r3,-4(fp)
   13100:	10c00b8d 	sth	r3,46(r2)
#if OS_TASK_DEL_EN > 0
    OSTCBCur->OSTCBFlagNode   = pnode;                /* TCB to link to node                           */
   13104:	d0a73317 	ldw	r2,-25396(gp)
   13108:	e0fffc17 	ldw	r3,-16(fp)
   1310c:	10c00a15 	stw	r3,40(r2)
#endif
    pnode->OSFlagNodeFlags    = flags;                /* Save the flags that we need to wait for       */
   13110:	e0bffc17 	ldw	r2,-16(fp)
   13114:	e0fffd0b 	ldhu	r3,-12(fp)
   13118:	10c0040d 	sth	r3,16(r2)
    pnode->OSFlagNodeWaitType = wait_type;            /* Save the type of wait we are doing            */
   1311c:	e0bffc17 	ldw	r2,-16(fp)
   13120:	e0fffe03 	ldbu	r3,-8(fp)
   13124:	10c00485 	stb	r3,18(r2)
    pnode->OSFlagNodeTCB      = (void *)OSTCBCur;     /* Link to task's TCB                            */
   13128:	d0e73317 	ldw	r3,-25396(gp)
   1312c:	e0bffc17 	ldw	r2,-16(fp)
   13130:	10c00215 	stw	r3,8(r2)
    pnode->OSFlagNodeNext     = pgrp->OSFlagWaitList; /* Add node at beginning of event flag wait list */
   13134:	e0bffb17 	ldw	r2,-20(fp)
   13138:	10c00117 	ldw	r3,4(r2)
   1313c:	e0bffc17 	ldw	r2,-16(fp)
   13140:	10c00015 	stw	r3,0(r2)
    pnode->OSFlagNodePrev     = (void *)0;
   13144:	e0bffc17 	ldw	r2,-16(fp)
   13148:	10000115 	stw	zero,4(r2)
    pnode->OSFlagNodeFlagGrp  = (void *)pgrp;         /* Link to Event Flag Group                      */
   1314c:	e0bffc17 	ldw	r2,-16(fp)
   13150:	e0fffb17 	ldw	r3,-20(fp)
   13154:	10c00315 	stw	r3,12(r2)
    pnode_next                = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
   13158:	e0bffb17 	ldw	r2,-20(fp)
   1315c:	10800117 	ldw	r2,4(r2)
   13160:	e0bff915 	stw	r2,-28(fp)
    if (pnode_next != (void *)0) {                    /* Is this the first NODE to insert?             */
   13164:	e0bff917 	ldw	r2,-28(fp)
   13168:	10000326 	beq	r2,zero,13178 <OS_FlagBlock+0xc8>
        pnode_next->OSFlagNodePrev = pnode;           /* No, link in doubly linked list                */
   1316c:	e0bff917 	ldw	r2,-28(fp)
   13170:	e0fffc17 	ldw	r3,-16(fp)
   13174:	10c00115 	stw	r3,4(r2)
    }
    pgrp->OSFlagWaitList = (void *)pnode;
   13178:	e0bffb17 	ldw	r2,-20(fp)
   1317c:	e0fffc17 	ldw	r3,-16(fp)
   13180:	10c00115 	stw	r3,4(r2)

    y            =  OSTCBCur->OSTCBY;                 /* Suspend current task until flag(s) received   */
   13184:	d0a73317 	ldw	r2,-25396(gp)
   13188:	10800d03 	ldbu	r2,52(r2)
   1318c:	e0bffa05 	stb	r2,-24(fp)
    OSRdyTbl[y] &= ~OSTCBCur->OSTCBBitX;
   13190:	e0fffa03 	ldbu	r3,-24(fp)
   13194:	e13ffa03 	ldbu	r4,-24(fp)
   13198:	d0a73044 	addi	r2,gp,-25407
   1319c:	2085883a 	add	r2,r4,r2
   131a0:	10800003 	ldbu	r2,0(r2)
   131a4:	1009883a 	mov	r4,r2
   131a8:	d0a73317 	ldw	r2,-25396(gp)
   131ac:	10800d43 	ldbu	r2,53(r2)
   131b0:	0084303a 	nor	r2,zero,r2
   131b4:	2084703a 	and	r2,r4,r2
   131b8:	1009883a 	mov	r4,r2
   131bc:	d0a73044 	addi	r2,gp,-25407
   131c0:	1885883a 	add	r2,r3,r2
   131c4:	11000005 	stb	r4,0(r2)
    if (OSRdyTbl[y] == 0x00) {
   131c8:	e0fffa03 	ldbu	r3,-24(fp)
   131cc:	d0a73044 	addi	r2,gp,-25407
   131d0:	1885883a 	add	r2,r3,r2
   131d4:	10800003 	ldbu	r2,0(r2)
   131d8:	10803fcc 	andi	r2,r2,255
   131dc:	1000071e 	bne	r2,zero,131fc <OS_FlagBlock+0x14c>
        OSRdyGrp &= ~OSTCBCur->OSTCBBitY;
   131e0:	d0a73317 	ldw	r2,-25396(gp)
   131e4:	10800d83 	ldbu	r2,54(r2)
   131e8:	0084303a 	nor	r2,zero,r2
   131ec:	1007883a 	mov	r3,r2
   131f0:	d0a73003 	ldbu	r2,-25408(gp)
   131f4:	1884703a 	and	r2,r3,r2
   131f8:	d0a73005 	stb	r2,-25408(gp)
    }
}
   131fc:	0001883a 	nop
   13200:	e037883a 	mov	sp,fp
   13204:	df000017 	ldw	fp,0(sp)
   13208:	dec00104 	addi	sp,sp,4
   1320c:	f800283a 	ret

00013210 <OS_FlagInit>:
* WARNING    : You MUST NOT call this function from your code.  This is an INTERNAL function to uC/OS-II.
*********************************************************************************************************
*/

void  OS_FlagInit (void)
{
   13210:	defffb04 	addi	sp,sp,-20
   13214:	dfc00415 	stw	ra,16(sp)
   13218:	df000315 	stw	fp,12(sp)
   1321c:	df000304 	addi	fp,sp,12
    INT16U       i;
    OS_FLAG_GRP *pgrp1;
    OS_FLAG_GRP *pgrp2;


    OS_MemClr((INT8U *)&OSFlagTbl[0], sizeof(OSFlagTbl));           /* Clear the flag group table      */
   13220:	0140dc04 	movi	r5,880
   13224:	010000b4 	movhi	r4,2
   13228:	213cc004 	addi	r4,r4,-3328
   1322c:	00114540 	call	11454 <OS_MemClr>
    pgrp1 = &OSFlagTbl[0];
   13230:	008000b4 	movhi	r2,2
   13234:	10bcc004 	addi	r2,r2,-3328
   13238:	e0bffe15 	stw	r2,-8(fp)
    pgrp2 = &OSFlagTbl[1];
   1323c:	008000b4 	movhi	r2,2
   13240:	10bccb04 	addi	r2,r2,-3284
   13244:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < (OS_MAX_FLAGS - 1); i++) {                      /* Init. list of free EVENT FLAGS  */
   13248:	e03ffd0d 	sth	zero,-12(fp)
   1324c:	00001306 	br	1329c <OS_FlagInit+0x8c>
        pgrp1->OSFlagType     = OS_EVENT_TYPE_UNUSED;
   13250:	e0bffe17 	ldw	r2,-8(fp)
   13254:	10000005 	stb	zero,0(r2)
        pgrp1->OSFlagWaitList = (void *)pgrp2;
   13258:	e0bffe17 	ldw	r2,-8(fp)
   1325c:	e0ffff17 	ldw	r3,-4(fp)
   13260:	10c00115 	stw	r3,4(r2)
#if OS_FLAG_NAME_SIZE > 1
        pgrp1->OSFlagName[0]  = '?';                                /* Unknown name                    */
   13264:	e0bffe17 	ldw	r2,-8(fp)
   13268:	00c00fc4 	movi	r3,63
   1326c:	10c00285 	stb	r3,10(r2)
        pgrp1->OSFlagName[1]  = OS_ASCII_NUL;
   13270:	e0bffe17 	ldw	r2,-8(fp)
   13274:	100002c5 	stb	zero,11(r2)
#endif
        pgrp1++;
   13278:	e0bffe17 	ldw	r2,-8(fp)
   1327c:	10800b04 	addi	r2,r2,44
   13280:	e0bffe15 	stw	r2,-8(fp)
        pgrp2++;
   13284:	e0bfff17 	ldw	r2,-4(fp)
   13288:	10800b04 	addi	r2,r2,44
   1328c:	e0bfff15 	stw	r2,-4(fp)


    OS_MemClr((INT8U *)&OSFlagTbl[0], sizeof(OSFlagTbl));           /* Clear the flag group table      */
    pgrp1 = &OSFlagTbl[0];
    pgrp2 = &OSFlagTbl[1];
    for (i = 0; i < (OS_MAX_FLAGS - 1); i++) {                      /* Init. list of free EVENT FLAGS  */
   13290:	e0bffd0b 	ldhu	r2,-12(fp)
   13294:	10800044 	addi	r2,r2,1
   13298:	e0bffd0d 	sth	r2,-12(fp)
   1329c:	e0bffd0b 	ldhu	r2,-12(fp)
   132a0:	108004f0 	cmpltui	r2,r2,19
   132a4:	103fea1e 	bne	r2,zero,13250 <__alt_data_end+0xfffe3250>
        pgrp1->OSFlagName[1]  = OS_ASCII_NUL;
#endif
        pgrp1++;
        pgrp2++;
    }
    pgrp1->OSFlagType     = OS_EVENT_TYPE_UNUSED;
   132a8:	e0bffe17 	ldw	r2,-8(fp)
   132ac:	10000005 	stb	zero,0(r2)
    pgrp1->OSFlagWaitList = (void *)0;
   132b0:	e0bffe17 	ldw	r2,-8(fp)
   132b4:	10000115 	stw	zero,4(r2)
#if OS_FLAG_NAME_SIZE > 1
    pgrp1->OSFlagName[0]  = '?';                                    /* Unknown name                    */
   132b8:	e0bffe17 	ldw	r2,-8(fp)
   132bc:	00c00fc4 	movi	r3,63
   132c0:	10c00285 	stb	r3,10(r2)
    pgrp1->OSFlagName[1]  = OS_ASCII_NUL;
   132c4:	e0bffe17 	ldw	r2,-8(fp)
   132c8:	100002c5 	stb	zero,11(r2)
#endif
    OSFlagFreeList        = &OSFlagTbl[0];
   132cc:	008000b4 	movhi	r2,2
   132d0:	10bcc004 	addi	r2,r2,-3328
   132d4:	d0a73515 	stw	r2,-25388(gp)
#endif
}
   132d8:	0001883a 	nop
   132dc:	e037883a 	mov	sp,fp
   132e0:	dfc00117 	ldw	ra,4(sp)
   132e4:	df000017 	ldw	fp,0(sp)
   132e8:	dec00204 	addi	sp,sp,8
   132ec:	f800283a 	ret

000132f0 <OS_FlagTaskRdy>:
*              2) This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

static  BOOLEAN  OS_FlagTaskRdy (OS_FLAG_NODE *pnode, OS_FLAGS flags_rdy)
{
   132f0:	defffa04 	addi	sp,sp,-24
   132f4:	dfc00515 	stw	ra,20(sp)
   132f8:	df000415 	stw	fp,16(sp)
   132fc:	df000404 	addi	fp,sp,16
   13300:	e13ffe15 	stw	r4,-8(fp)
   13304:	2805883a 	mov	r2,r5
   13308:	e0bfff0d 	sth	r2,-4(fp)
    OS_TCB   *ptcb;
    BOOLEAN   sched;


    ptcb                 = (OS_TCB *)pnode->OSFlagNodeTCB; /* Point to TCB of waiting task             */
   1330c:	e0bffe17 	ldw	r2,-8(fp)
   13310:	10800217 	ldw	r2,8(r2)
   13314:	e0bffd15 	stw	r2,-12(fp)
    ptcb->OSTCBDly       = 0;
   13318:	e0bffd17 	ldw	r2,-12(fp)
   1331c:	10000b8d 	sth	zero,46(r2)
    ptcb->OSTCBFlagsRdy  = flags_rdy;
   13320:	e0bffd17 	ldw	r2,-12(fp)
   13324:	e0ffff0b 	ldhu	r3,-4(fp)
   13328:	10c00b0d 	sth	r3,44(r2)
    ptcb->OSTCBStat     &= ~(INT8U)OS_STAT_FLAG;
   1332c:	e0bffd17 	ldw	r2,-12(fp)
   13330:	10c00c03 	ldbu	r3,48(r2)
   13334:	00bff7c4 	movi	r2,-33
   13338:	1884703a 	and	r2,r3,r2
   1333c:	1007883a 	mov	r3,r2
   13340:	e0bffd17 	ldw	r2,-12(fp)
   13344:	10c00c05 	stb	r3,48(r2)
    ptcb->OSTCBStatPend  = OS_STAT_PEND_OK;
   13348:	e0bffd17 	ldw	r2,-12(fp)
   1334c:	10000c45 	stb	zero,49(r2)
    if (ptcb->OSTCBStat == OS_STAT_RDY) {                  /* Task now ready?                          */
   13350:	e0bffd17 	ldw	r2,-12(fp)
   13354:	10800c03 	ldbu	r2,48(r2)
   13358:	10803fcc 	andi	r2,r2,255
   1335c:	1000181e 	bne	r2,zero,133c0 <OS_FlagTaskRdy+0xd0>
        OSRdyGrp               |= ptcb->OSTCBBitY;         /* Put task into ready list                 */
   13360:	e0bffd17 	ldw	r2,-12(fp)
   13364:	10c00d83 	ldbu	r3,54(r2)
   13368:	d0a73003 	ldbu	r2,-25408(gp)
   1336c:	1884b03a 	or	r2,r3,r2
   13370:	d0a73005 	stb	r2,-25408(gp)
        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
   13374:	e0bffd17 	ldw	r2,-12(fp)
   13378:	10800d03 	ldbu	r2,52(r2)
   1337c:	10c03fcc 	andi	r3,r2,255
   13380:	e0bffd17 	ldw	r2,-12(fp)
   13384:	10800d03 	ldbu	r2,52(r2)
   13388:	11003fcc 	andi	r4,r2,255
   1338c:	d0a73044 	addi	r2,gp,-25407
   13390:	2085883a 	add	r2,r4,r2
   13394:	11000003 	ldbu	r4,0(r2)
   13398:	e0bffd17 	ldw	r2,-12(fp)
   1339c:	10800d43 	ldbu	r2,53(r2)
   133a0:	2084b03a 	or	r2,r4,r2
   133a4:	1009883a 	mov	r4,r2
   133a8:	d0a73044 	addi	r2,gp,-25407
   133ac:	1885883a 	add	r2,r3,r2
   133b0:	11000005 	stb	r4,0(r2)
        sched                   = OS_TRUE;
   133b4:	00800044 	movi	r2,1
   133b8:	e0bffc05 	stb	r2,-16(fp)
   133bc:	00000106 	br	133c4 <OS_FlagTaskRdy+0xd4>
    } else {
        sched                   = OS_FALSE;
   133c0:	e03ffc05 	stb	zero,-16(fp)
    }
    OS_FlagUnlink(pnode);
   133c4:	e13ffe17 	ldw	r4,-8(fp)
   133c8:	00133e40 	call	133e4 <OS_FlagUnlink>
    return (sched);
   133cc:	e0bffc03 	ldbu	r2,-16(fp)
}
   133d0:	e037883a 	mov	sp,fp
   133d4:	dfc00117 	ldw	ra,4(sp)
   133d8:	df000017 	ldw	fp,0(sp)
   133dc:	dec00204 	addi	sp,sp,8
   133e0:	f800283a 	ret

000133e4 <OS_FlagUnlink>:
*              2) This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

void  OS_FlagUnlink (OS_FLAG_NODE *pnode)
{
   133e4:	defffa04 	addi	sp,sp,-24
   133e8:	df000515 	stw	fp,20(sp)
   133ec:	df000504 	addi	fp,sp,20
   133f0:	e13fff15 	stw	r4,-4(fp)
    OS_FLAG_GRP  *pgrp;
    OS_FLAG_NODE *pnode_prev;
    OS_FLAG_NODE *pnode_next;


    pnode_prev = (OS_FLAG_NODE *)pnode->OSFlagNodePrev;
   133f4:	e0bfff17 	ldw	r2,-4(fp)
   133f8:	10800117 	ldw	r2,4(r2)
   133fc:	e0bffb15 	stw	r2,-20(fp)
    pnode_next = (OS_FLAG_NODE *)pnode->OSFlagNodeNext;
   13400:	e0bfff17 	ldw	r2,-4(fp)
   13404:	10800017 	ldw	r2,0(r2)
   13408:	e0bffc15 	stw	r2,-16(fp)
    if (pnode_prev == (OS_FLAG_NODE *)0) {                      /* Is it first node in wait list?      */
   1340c:	e0bffb17 	ldw	r2,-20(fp)
   13410:	10000b1e 	bne	r2,zero,13440 <OS_FlagUnlink+0x5c>
        pgrp                 = (OS_FLAG_GRP *)pnode->OSFlagNodeFlagGrp;
   13414:	e0bfff17 	ldw	r2,-4(fp)
   13418:	10800317 	ldw	r2,12(r2)
   1341c:	e0bffd15 	stw	r2,-12(fp)
        pgrp->OSFlagWaitList = (void *)pnode_next;              /*      Update list for new 1st node   */
   13420:	e0bffd17 	ldw	r2,-12(fp)
   13424:	e0fffc17 	ldw	r3,-16(fp)
   13428:	10c00115 	stw	r3,4(r2)
        if (pnode_next != (OS_FLAG_NODE *)0) {
   1342c:	e0bffc17 	ldw	r2,-16(fp)
   13430:	10000b26 	beq	r2,zero,13460 <OS_FlagUnlink+0x7c>
            pnode_next->OSFlagNodePrev = (OS_FLAG_NODE *)0;     /*      Link new 1st node PREV to NULL */
   13434:	e0bffc17 	ldw	r2,-16(fp)
   13438:	10000115 	stw	zero,4(r2)
   1343c:	00000806 	br	13460 <OS_FlagUnlink+0x7c>
        }
    } else {                                                    /* No,  A node somewhere in the list   */
        pnode_prev->OSFlagNodeNext = pnode_next;                /*      Link around the node to unlink */
   13440:	e0bffb17 	ldw	r2,-20(fp)
   13444:	e0fffc17 	ldw	r3,-16(fp)
   13448:	10c00015 	stw	r3,0(r2)
        if (pnode_next != (OS_FLAG_NODE *)0) {                  /*      Was this the LAST node?        */
   1344c:	e0bffc17 	ldw	r2,-16(fp)
   13450:	10000326 	beq	r2,zero,13460 <OS_FlagUnlink+0x7c>
            pnode_next->OSFlagNodePrev = pnode_prev;            /*      No, Link around current node   */
   13454:	e0bffc17 	ldw	r2,-16(fp)
   13458:	e0fffb17 	ldw	r3,-20(fp)
   1345c:	10c00115 	stw	r3,4(r2)
        }
    }
#if OS_TASK_DEL_EN > 0
    ptcb                = (OS_TCB *)pnode->OSFlagNodeTCB;
   13460:	e0bfff17 	ldw	r2,-4(fp)
   13464:	10800217 	ldw	r2,8(r2)
   13468:	e0bffe15 	stw	r2,-8(fp)
    ptcb->OSTCBFlagNode = (OS_FLAG_NODE *)0;
   1346c:	e0bffe17 	ldw	r2,-8(fp)
   13470:	10000a15 	stw	zero,40(r2)
#endif
}
   13474:	0001883a 	nop
   13478:	e037883a 	mov	sp,fp
   1347c:	df000017 	ldw	fp,0(sp)
   13480:	dec00104 	addi	sp,sp,4
   13484:	f800283a 	ret

00013488 <OSMemCreate>:
*                              free partition is available.
*********************************************************************************************************
*/

OS_MEM  *OSMemCreate (void *addr, INT32U nblks, INT32U blksize, INT8U *perr)
{
   13488:	defff404 	addi	sp,sp,-48
   1348c:	df000b15 	stw	fp,44(sp)
   13490:	df000b04 	addi	fp,sp,44
   13494:	e13ffc15 	stw	r4,-16(fp)
   13498:	e17ffd15 	stw	r5,-12(fp)
   1349c:	e1bffe15 	stw	r6,-8(fp)
   134a0:	e1ffff15 	stw	r7,-4(fp)
    OS_MEM    *pmem;
    INT8U     *pblk;
    void     **plink;
    INT32U     i;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   134a4:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0              
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
   134a8:	e0bfff17 	ldw	r2,-4(fp)
   134ac:	1000021e 	bne	r2,zero,134b8 <OSMemCreate+0x30>
        return ((OS_MEM *)0);
   134b0:	0005883a 	mov	r2,zero
   134b4:	00006506 	br	1364c <OSMemCreate+0x1c4>
    }
    if (addr == (void *)0) {                          /* Must pass a valid address for the memory part.*/
   134b8:	e0bffc17 	ldw	r2,-16(fp)
   134bc:	1000051e 	bne	r2,zero,134d4 <OSMemCreate+0x4c>
        *perr = OS_ERR_MEM_INVALID_ADDR;
   134c0:	e0bfff17 	ldw	r2,-4(fp)
   134c4:	00c01884 	movi	r3,98
   134c8:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
   134cc:	0005883a 	mov	r2,zero
   134d0:	00005e06 	br	1364c <OSMemCreate+0x1c4>
    }
    if (((INT32U)addr & (sizeof(void *) - 1)) != 0){  /* Must be pointer size aligned                  */
   134d4:	e0bffc17 	ldw	r2,-16(fp)
   134d8:	108000cc 	andi	r2,r2,3
   134dc:	10000526 	beq	r2,zero,134f4 <OSMemCreate+0x6c>
        *perr = OS_ERR_MEM_INVALID_ADDR;
   134e0:	e0bfff17 	ldw	r2,-4(fp)
   134e4:	00c01884 	movi	r3,98
   134e8:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
   134ec:	0005883a 	mov	r2,zero
   134f0:	00005606 	br	1364c <OSMemCreate+0x1c4>
    }
    if (nblks < 2) {                                  /* Must have at least 2 blocks per partition     */
   134f4:	e0bffd17 	ldw	r2,-12(fp)
   134f8:	108000a8 	cmpgeui	r2,r2,2
   134fc:	1000051e 	bne	r2,zero,13514 <OSMemCreate+0x8c>
        *perr = OS_ERR_MEM_INVALID_BLKS;
   13500:	e0bfff17 	ldw	r2,-4(fp)
   13504:	00c016c4 	movi	r3,91
   13508:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
   1350c:	0005883a 	mov	r2,zero
   13510:	00004e06 	br	1364c <OSMemCreate+0x1c4>
    }
    if (blksize < sizeof(void *)) {                   /* Must contain space for at least a pointer     */
   13514:	e0bffe17 	ldw	r2,-8(fp)
   13518:	10800128 	cmpgeui	r2,r2,4
   1351c:	1000051e 	bne	r2,zero,13534 <OSMemCreate+0xac>
        *perr = OS_ERR_MEM_INVALID_SIZE;
   13520:	e0bfff17 	ldw	r2,-4(fp)
   13524:	00c01704 	movi	r3,92
   13528:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
   1352c:	0005883a 	mov	r2,zero
   13530:	00004606 	br	1364c <OSMemCreate+0x1c4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   13534:	0005303a 	rdctl	r2,status
   13538:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1353c:	e0fffb17 	ldw	r3,-20(fp)
   13540:	00bfff84 	movi	r2,-2
   13544:	1884703a 	and	r2,r3,r2
   13548:	1001703a 	wrctl	status,r2
  
  return context;
   1354c:	e0bffb17 	ldw	r2,-20(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   13550:	e0bff815 	stw	r2,-32(fp)
    pmem = OSMemFreeList;                             /* Get next free memory partition                */
   13554:	d0a72d17 	ldw	r2,-25420(gp)
   13558:	e0bffa15 	stw	r2,-24(fp)
    if (OSMemFreeList != (OS_MEM *)0) {               /* See if pool of free partitions was empty      */
   1355c:	d0a72d17 	ldw	r2,-25420(gp)
   13560:	10000326 	beq	r2,zero,13570 <OSMemCreate+0xe8>
        OSMemFreeList = (OS_MEM *)OSMemFreeList->OSMemFreeList;
   13564:	d0a72d17 	ldw	r2,-25420(gp)
   13568:	10800117 	ldw	r2,4(r2)
   1356c:	d0a72d15 	stw	r2,-25420(gp)
   13570:	e0bff817 	ldw	r2,-32(fp)
   13574:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   13578:	e0bff917 	ldw	r2,-28(fp)
   1357c:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    if (pmem == (OS_MEM *)0) {                        /* See if we have a memory partition             */
   13580:	e0bffa17 	ldw	r2,-24(fp)
   13584:	1000051e 	bne	r2,zero,1359c <OSMemCreate+0x114>
        *perr = OS_ERR_MEM_INVALID_PART;
   13588:	e0bfff17 	ldw	r2,-4(fp)
   1358c:	00c01684 	movi	r3,90
   13590:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
   13594:	0005883a 	mov	r2,zero
   13598:	00002c06 	br	1364c <OSMemCreate+0x1c4>
    }
    plink = (void **)addr;                            /* Create linked list of free memory blocks      */
   1359c:	e0bffc17 	ldw	r2,-16(fp)
   135a0:	e0bff615 	stw	r2,-40(fp)
    pblk  = (INT8U *)((INT32U)addr + blksize);
   135a4:	e0fffc17 	ldw	r3,-16(fp)
   135a8:	e0bffe17 	ldw	r2,-8(fp)
   135ac:	1885883a 	add	r2,r3,r2
   135b0:	e0bff515 	stw	r2,-44(fp)
    for (i = 0; i < (nblks - 1); i++) {
   135b4:	e03ff715 	stw	zero,-36(fp)
   135b8:	00000c06 	br	135ec <OSMemCreate+0x164>
       *plink = (void *)pblk;                         /* Save pointer to NEXT block in CURRENT block   */
   135bc:	e0bff617 	ldw	r2,-40(fp)
   135c0:	e0fff517 	ldw	r3,-44(fp)
   135c4:	10c00015 	stw	r3,0(r2)
        plink = (void **)pblk;                        /* Position to  NEXT      block                  */
   135c8:	e0bff517 	ldw	r2,-44(fp)
   135cc:	e0bff615 	stw	r2,-40(fp)
        pblk  = (INT8U *)((INT32U)pblk + blksize);    /* Point to the FOLLOWING block                  */
   135d0:	e0fff517 	ldw	r3,-44(fp)
   135d4:	e0bffe17 	ldw	r2,-8(fp)
   135d8:	1885883a 	add	r2,r3,r2
   135dc:	e0bff515 	stw	r2,-44(fp)
        *perr = OS_ERR_MEM_INVALID_PART;
        return ((OS_MEM *)0);
    }
    plink = (void **)addr;                            /* Create linked list of free memory blocks      */
    pblk  = (INT8U *)((INT32U)addr + blksize);
    for (i = 0; i < (nblks - 1); i++) {
   135e0:	e0bff717 	ldw	r2,-36(fp)
   135e4:	10800044 	addi	r2,r2,1
   135e8:	e0bff715 	stw	r2,-36(fp)
   135ec:	e0bffd17 	ldw	r2,-12(fp)
   135f0:	10bfffc4 	addi	r2,r2,-1
   135f4:	e0fff717 	ldw	r3,-36(fp)
   135f8:	18bff036 	bltu	r3,r2,135bc <__alt_data_end+0xfffe35bc>
       *plink = (void *)pblk;                         /* Save pointer to NEXT block in CURRENT block   */
        plink = (void **)pblk;                        /* Position to  NEXT      block                  */
        pblk  = (INT8U *)((INT32U)pblk + blksize);    /* Point to the FOLLOWING block                  */
    }
    *plink              = (void *)0;                  /* Last memory block points to NULL              */
   135fc:	e0bff617 	ldw	r2,-40(fp)
   13600:	10000015 	stw	zero,0(r2)
    pmem->OSMemAddr     = addr;                       /* Store start address of memory partition       */
   13604:	e0bffa17 	ldw	r2,-24(fp)
   13608:	e0fffc17 	ldw	r3,-16(fp)
   1360c:	10c00015 	stw	r3,0(r2)
    pmem->OSMemFreeList = addr;                       /* Initialize pointer to pool of free blocks     */
   13610:	e0bffa17 	ldw	r2,-24(fp)
   13614:	e0fffc17 	ldw	r3,-16(fp)
   13618:	10c00115 	stw	r3,4(r2)
    pmem->OSMemNFree    = nblks;                      /* Store number of free blocks in MCB            */
   1361c:	e0bffa17 	ldw	r2,-24(fp)
   13620:	e0fffd17 	ldw	r3,-12(fp)
   13624:	10c00415 	stw	r3,16(r2)
    pmem->OSMemNBlks    = nblks;
   13628:	e0bffa17 	ldw	r2,-24(fp)
   1362c:	e0fffd17 	ldw	r3,-12(fp)
   13630:	10c00315 	stw	r3,12(r2)
    pmem->OSMemBlkSize  = blksize;                    /* Store block size of each memory blocks        */
   13634:	e0bffa17 	ldw	r2,-24(fp)
   13638:	e0fffe17 	ldw	r3,-8(fp)
   1363c:	10c00215 	stw	r3,8(r2)
    *perr               = OS_ERR_NONE;
   13640:	e0bfff17 	ldw	r2,-4(fp)
   13644:	10000005 	stb	zero,0(r2)
    return (pmem);
   13648:	e0bffa17 	ldw	r2,-24(fp)
}
   1364c:	e037883a 	mov	sp,fp
   13650:	df000017 	ldw	fp,0(sp)
   13654:	dec00104 	addi	sp,sp,4
   13658:	f800283a 	ret

0001365c <OSMemGet>:
*               A pointer to NULL if an error is detected
*********************************************************************************************************
*/

void  *OSMemGet (OS_MEM *pmem, INT8U *perr)
{
   1365c:	defff804 	addi	sp,sp,-32
   13660:	df000715 	stw	fp,28(sp)
   13664:	df000704 	addi	fp,sp,28
   13668:	e13ffe15 	stw	r4,-8(fp)
   1366c:	e17fff15 	stw	r5,-4(fp)
    void      *pblk;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   13670:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
   13674:	e0bfff17 	ldw	r2,-4(fp)
   13678:	1000021e 	bne	r2,zero,13684 <OSMemGet+0x28>
        return ((void *)0);
   1367c:	0005883a 	mov	r2,zero
   13680:	00002e06 	br	1373c <OSMemGet+0xe0>
    }
    if (pmem == (OS_MEM *)0) {                        /* Must point to a valid memory partition        */
   13684:	e0bffe17 	ldw	r2,-8(fp)
   13688:	1000051e 	bne	r2,zero,136a0 <OSMemGet+0x44>
        *perr = OS_ERR_MEM_INVALID_PMEM;
   1368c:	e0bfff17 	ldw	r2,-4(fp)
   13690:	00c01804 	movi	r3,96
   13694:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
   13698:	0005883a 	mov	r2,zero
   1369c:	00002706 	br	1373c <OSMemGet+0xe0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   136a0:	0005303a 	rdctl	r2,status
   136a4:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   136a8:	e0fffd17 	ldw	r3,-12(fp)
   136ac:	00bfff84 	movi	r2,-2
   136b0:	1884703a 	and	r2,r3,r2
   136b4:	1001703a 	wrctl	status,r2
  
  return context;
   136b8:	e0bffd17 	ldw	r2,-12(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   136bc:	e0bff915 	stw	r2,-28(fp)
    if (pmem->OSMemNFree > 0) {                       /* See if there are any free memory blocks       */
   136c0:	e0bffe17 	ldw	r2,-8(fp)
   136c4:	10800417 	ldw	r2,16(r2)
   136c8:	10001426 	beq	r2,zero,1371c <OSMemGet+0xc0>
        pblk                = pmem->OSMemFreeList;    /* Yes, point to next free memory block          */
   136cc:	e0bffe17 	ldw	r2,-8(fp)
   136d0:	10800117 	ldw	r2,4(r2)
   136d4:	e0bffb15 	stw	r2,-20(fp)
        pmem->OSMemFreeList = *(void **)pblk;         /*      Adjust pointer to new free list          */
   136d8:	e0bffb17 	ldw	r2,-20(fp)
   136dc:	10c00017 	ldw	r3,0(r2)
   136e0:	e0bffe17 	ldw	r2,-8(fp)
   136e4:	10c00115 	stw	r3,4(r2)
        pmem->OSMemNFree--;                           /*      One less memory block in this partition  */
   136e8:	e0bffe17 	ldw	r2,-8(fp)
   136ec:	10800417 	ldw	r2,16(r2)
   136f0:	10ffffc4 	addi	r3,r2,-1
   136f4:	e0bffe17 	ldw	r2,-8(fp)
   136f8:	10c00415 	stw	r3,16(r2)
   136fc:	e0bff917 	ldw	r2,-28(fp)
   13700:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   13704:	e0bffa17 	ldw	r2,-24(fp)
   13708:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_NONE;                          /*      No error                                 */
   1370c:	e0bfff17 	ldw	r2,-4(fp)
   13710:	10000005 	stb	zero,0(r2)
        return (pblk);                                /*      Return memory block to caller            */
   13714:	e0bffb17 	ldw	r2,-20(fp)
   13718:	00000806 	br	1373c <OSMemGet+0xe0>
   1371c:	e0bff917 	ldw	r2,-28(fp)
   13720:	e0bffc15 	stw	r2,-16(fp)
   13724:	e0bffc17 	ldw	r2,-16(fp)
   13728:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_MEM_NO_FREE_BLKS;                  /* No,  Notify caller of empty memory partition  */
   1372c:	e0bfff17 	ldw	r2,-4(fp)
   13730:	00c01744 	movi	r3,93
   13734:	10c00005 	stb	r3,0(r2)
    return ((void *)0);                               /*      Return NULL pointer to caller            */
   13738:	0005883a 	mov	r2,zero
}
   1373c:	e037883a 	mov	sp,fp
   13740:	df000017 	ldw	fp,0(sp)
   13744:	dec00104 	addi	sp,sp,4
   13748:	f800283a 	ret

0001374c <OSMemNameGet>:
*********************************************************************************************************
*/

#if OS_MEM_NAME_SIZE > 1
INT8U  OSMemNameGet (OS_MEM *pmem, INT8U *pname, INT8U *perr)
{
   1374c:	defff704 	addi	sp,sp,-36
   13750:	dfc00815 	stw	ra,32(sp)
   13754:	df000715 	stw	fp,28(sp)
   13758:	df000704 	addi	fp,sp,28
   1375c:	e13ffd15 	stw	r4,-12(fp)
   13760:	e17ffe15 	stw	r5,-8(fp)
   13764:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   13768:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
   1376c:	e0bfff17 	ldw	r2,-4(fp)
   13770:	1000021e 	bne	r2,zero,1377c <OSMemNameGet+0x30>
        return (0);
   13774:	0005883a 	mov	r2,zero
   13778:	00002b06 	br	13828 <OSMemNameGet+0xdc>
    }
    if (pmem == (OS_MEM *)0) {                   /* Is 'pmem' a NULL pointer?                          */
   1377c:	e0bffd17 	ldw	r2,-12(fp)
   13780:	1000051e 	bne	r2,zero,13798 <OSMemNameGet+0x4c>
        *perr = OS_ERR_MEM_INVALID_PMEM;
   13784:	e0bfff17 	ldw	r2,-4(fp)
   13788:	00c01804 	movi	r3,96
   1378c:	10c00005 	stb	r3,0(r2)
        return (0);
   13790:	0005883a 	mov	r2,zero
   13794:	00002406 	br	13828 <OSMemNameGet+0xdc>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
   13798:	e0bffe17 	ldw	r2,-8(fp)
   1379c:	1000051e 	bne	r2,zero,137b4 <OSMemNameGet+0x68>
        *perr = OS_ERR_PNAME_NULL;
   137a0:	e0bfff17 	ldw	r2,-4(fp)
   137a4:	00c00304 	movi	r3,12
   137a8:	10c00005 	stb	r3,0(r2)
        return (0);
   137ac:	0005883a 	mov	r2,zero
   137b0:	00001d06 	br	13828 <OSMemNameGet+0xdc>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
   137b4:	d0a73203 	ldbu	r2,-25400(gp)
   137b8:	10803fcc 	andi	r2,r2,255
   137bc:	10000526 	beq	r2,zero,137d4 <OSMemNameGet+0x88>
        *perr = OS_ERR_NAME_GET_ISR;
   137c0:	e0bfff17 	ldw	r2,-4(fp)
   137c4:	00c00444 	movi	r3,17
   137c8:	10c00005 	stb	r3,0(r2)
        return (0);
   137cc:	0005883a 	mov	r2,zero
   137d0:	00001506 	br	13828 <OSMemNameGet+0xdc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   137d4:	0005303a 	rdctl	r2,status
   137d8:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   137dc:	e0fffb17 	ldw	r3,-20(fp)
   137e0:	00bfff84 	movi	r2,-2
   137e4:	1884703a 	and	r2,r3,r2
   137e8:	1001703a 	wrctl	status,r2
  
  return context;
   137ec:	e0bffb17 	ldw	r2,-20(fp)
    }
    OS_ENTER_CRITICAL();
   137f0:	e0bff915 	stw	r2,-28(fp)
    len   = OS_StrCopy(pname, pmem->OSMemName);  /* Copy name from OS_MEM                              */
   137f4:	e0bffd17 	ldw	r2,-12(fp)
   137f8:	10800504 	addi	r2,r2,20
   137fc:	100b883a 	mov	r5,r2
   13800:	e13ffe17 	ldw	r4,-8(fp)
   13804:	00116540 	call	11654 <OS_StrCopy>
   13808:	e0bffa05 	stb	r2,-24(fp)
   1380c:	e0bff917 	ldw	r2,-28(fp)
   13810:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   13814:	e0bffc17 	ldw	r2,-16(fp)
   13818:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   1381c:	e0bfff17 	ldw	r2,-4(fp)
   13820:	10000005 	stb	zero,0(r2)
    return (len);
   13824:	e0bffa03 	ldbu	r2,-24(fp)
}
   13828:	e037883a 	mov	sp,fp
   1382c:	dfc00117 	ldw	ra,4(sp)
   13830:	df000017 	ldw	fp,0(sp)
   13834:	dec00204 	addi	sp,sp,8
   13838:	f800283a 	ret

0001383c <OSMemNameSet>:
*********************************************************************************************************
*/

#if OS_MEM_NAME_SIZE > 1
void  OSMemNameSet (OS_MEM *pmem, INT8U *pname, INT8U *perr)
{
   1383c:	defff604 	addi	sp,sp,-40
   13840:	dfc00915 	stw	ra,36(sp)
   13844:	df000815 	stw	fp,32(sp)
   13848:	df000804 	addi	fp,sp,32
   1384c:	e13ffd15 	stw	r4,-12(fp)
   13850:	e17ffe15 	stw	r5,-8(fp)
   13854:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   13858:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
   1385c:	e0bfff17 	ldw	r2,-4(fp)
   13860:	10003526 	beq	r2,zero,13938 <OSMemNameSet+0xfc>
        return;
    }
    if (pmem == (OS_MEM *)0) {                   /* Is 'pmem' a NULL pointer?                          */
   13864:	e0bffd17 	ldw	r2,-12(fp)
   13868:	1000041e 	bne	r2,zero,1387c <OSMemNameSet+0x40>
        *perr = OS_ERR_MEM_INVALID_PMEM;
   1386c:	e0bfff17 	ldw	r2,-4(fp)
   13870:	00c01804 	movi	r3,96
   13874:	10c00005 	stb	r3,0(r2)
        return;
   13878:	00003006 	br	1393c <OSMemNameSet+0x100>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
   1387c:	e0bffe17 	ldw	r2,-8(fp)
   13880:	1000041e 	bne	r2,zero,13894 <OSMemNameSet+0x58>
        *perr = OS_ERR_PNAME_NULL;
   13884:	e0bfff17 	ldw	r2,-4(fp)
   13888:	00c00304 	movi	r3,12
   1388c:	10c00005 	stb	r3,0(r2)
        return;
   13890:	00002a06 	br	1393c <OSMemNameSet+0x100>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
   13894:	d0a73203 	ldbu	r2,-25400(gp)
   13898:	10803fcc 	andi	r2,r2,255
   1389c:	10000426 	beq	r2,zero,138b0 <OSMemNameSet+0x74>
        *perr = OS_ERR_NAME_SET_ISR;
   138a0:	e0bfff17 	ldw	r2,-4(fp)
   138a4:	00c00484 	movi	r3,18
   138a8:	10c00005 	stb	r3,0(r2)
        return;
   138ac:	00002306 	br	1393c <OSMemNameSet+0x100>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   138b0:	0005303a 	rdctl	r2,status
   138b4:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   138b8:	e0fffc17 	ldw	r3,-16(fp)
   138bc:	00bfff84 	movi	r2,-2
   138c0:	1884703a 	and	r2,r3,r2
   138c4:	1001703a 	wrctl	status,r2
  
  return context;
   138c8:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
   138cc:	e0bff815 	stw	r2,-32(fp)
    len = OS_StrLen(pname);                      /* Can we fit the string in the storage area?         */
   138d0:	e13ffe17 	ldw	r4,-8(fp)
   138d4:	00116c80 	call	116c8 <OS_StrLen>
   138d8:	e0bffa05 	stb	r2,-24(fp)
    if (len > (OS_MEM_NAME_SIZE - 1)) {          /* No                                                 */
   138dc:	e0bffa03 	ldbu	r2,-24(fp)
   138e0:	10800830 	cmpltui	r2,r2,32
   138e4:	1000081e 	bne	r2,zero,13908 <OSMemNameSet+0xcc>
   138e8:	e0bff817 	ldw	r2,-32(fp)
   138ec:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   138f0:	e0bff917 	ldw	r2,-28(fp)
   138f4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_MEM_NAME_TOO_LONG;
   138f8:	e0bfff17 	ldw	r2,-4(fp)
   138fc:	00c018c4 	movi	r3,99
   13900:	10c00005 	stb	r3,0(r2)
        return;
   13904:	00000d06 	br	1393c <OSMemNameSet+0x100>
    }
    (void)OS_StrCopy(pmem->OSMemName, pname);    /* Yes, copy name to the memory partition header      */
   13908:	e0bffd17 	ldw	r2,-12(fp)
   1390c:	10800504 	addi	r2,r2,20
   13910:	e17ffe17 	ldw	r5,-8(fp)
   13914:	1009883a 	mov	r4,r2
   13918:	00116540 	call	11654 <OS_StrCopy>
   1391c:	e0bff817 	ldw	r2,-32(fp)
   13920:	e0bffb15 	stw	r2,-20(fp)
   13924:	e0bffb17 	ldw	r2,-20(fp)
   13928:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   1392c:	e0bfff17 	ldw	r2,-4(fp)
   13930:	10000005 	stb	zero,0(r2)
   13934:	00000106 	br	1393c <OSMemNameSet+0x100>



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
        return;
   13938:	0001883a 	nop
        return;
    }
    (void)OS_StrCopy(pmem->OSMemName, pname);    /* Yes, copy name to the memory partition header      */
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
}
   1393c:	e037883a 	mov	sp,fp
   13940:	dfc00117 	ldw	ra,4(sp)
   13944:	df000017 	ldw	fp,0(sp)
   13948:	dec00204 	addi	sp,sp,8
   1394c:	f800283a 	ret

00013950 <OSMemPut>:
*               OS_ERR_MEM_INVALID_PBLK  if you passed a NULL pointer for the block to release.
*********************************************************************************************************
*/

INT8U  OSMemPut (OS_MEM *pmem, void *pblk)
{
   13950:	defff904 	addi	sp,sp,-28
   13954:	df000615 	stw	fp,24(sp)
   13958:	df000604 	addi	fp,sp,24
   1395c:	e13ffe15 	stw	r4,-8(fp)
   13960:	e17fff15 	stw	r5,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   13964:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pmem == (OS_MEM *)0) {                   /* Must point to a valid memory partition             */
   13968:	e0bffe17 	ldw	r2,-8(fp)
   1396c:	1000021e 	bne	r2,zero,13978 <OSMemPut+0x28>
        return (OS_ERR_MEM_INVALID_PMEM);
   13970:	00801804 	movi	r2,96
   13974:	00002806 	br	13a18 <OSMemPut+0xc8>
    }
    if (pblk == (void *)0) {                     /* Must release a valid block                         */
   13978:	e0bfff17 	ldw	r2,-4(fp)
   1397c:	1000021e 	bne	r2,zero,13988 <OSMemPut+0x38>
        return (OS_ERR_MEM_INVALID_PBLK);
   13980:	008017c4 	movi	r2,95
   13984:	00002406 	br	13a18 <OSMemPut+0xc8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   13988:	0005303a 	rdctl	r2,status
   1398c:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   13990:	e0fffd17 	ldw	r3,-12(fp)
   13994:	00bfff84 	movi	r2,-2
   13998:	1884703a 	and	r2,r3,r2
   1399c:	1001703a 	wrctl	status,r2
  
  return context;
   139a0:	e0bffd17 	ldw	r2,-12(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   139a4:	e0bffa15 	stw	r2,-24(fp)
    if (pmem->OSMemNFree >= pmem->OSMemNBlks) {  /* Make sure all blocks not already returned          */
   139a8:	e0bffe17 	ldw	r2,-8(fp)
   139ac:	10c00417 	ldw	r3,16(r2)
   139b0:	e0bffe17 	ldw	r2,-8(fp)
   139b4:	10800317 	ldw	r2,12(r2)
   139b8:	18800636 	bltu	r3,r2,139d4 <OSMemPut+0x84>
   139bc:	e0bffa17 	ldw	r2,-24(fp)
   139c0:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   139c4:	e0bffb17 	ldw	r2,-20(fp)
   139c8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_MEM_FULL);
   139cc:	00801784 	movi	r2,94
   139d0:	00001106 	br	13a18 <OSMemPut+0xc8>
    }
    *(void **)pblk      = pmem->OSMemFreeList;   /* Insert released block into free block list         */
   139d4:	e0bffe17 	ldw	r2,-8(fp)
   139d8:	10c00117 	ldw	r3,4(r2)
   139dc:	e0bfff17 	ldw	r2,-4(fp)
   139e0:	10c00015 	stw	r3,0(r2)
    pmem->OSMemFreeList = pblk;
   139e4:	e0bffe17 	ldw	r2,-8(fp)
   139e8:	e0ffff17 	ldw	r3,-4(fp)
   139ec:	10c00115 	stw	r3,4(r2)
    pmem->OSMemNFree++;                          /* One more memory block in this partition            */
   139f0:	e0bffe17 	ldw	r2,-8(fp)
   139f4:	10800417 	ldw	r2,16(r2)
   139f8:	10c00044 	addi	r3,r2,1
   139fc:	e0bffe17 	ldw	r2,-8(fp)
   13a00:	10c00415 	stw	r3,16(r2)
   13a04:	e0bffa17 	ldw	r2,-24(fp)
   13a08:	e0bffc15 	stw	r2,-16(fp)
   13a0c:	e0bffc17 	ldw	r2,-16(fp)
   13a10:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);                        /* Notify caller that memory block was released       */
   13a14:	0005883a 	mov	r2,zero
}
   13a18:	e037883a 	mov	sp,fp
   13a1c:	df000017 	ldw	fp,0(sp)
   13a20:	dec00104 	addi	sp,sp,4
   13a24:	f800283a 	ret

00013a28 <OSMemQuery>:
*********************************************************************************************************
*/

#if OS_MEM_QUERY_EN > 0
INT8U  OSMemQuery (OS_MEM *pmem, OS_MEM_DATA *p_mem_data)
{
   13a28:	defffa04 	addi	sp,sp,-24
   13a2c:	df000515 	stw	fp,20(sp)
   13a30:	df000504 	addi	fp,sp,20
   13a34:	e13ffe15 	stw	r4,-8(fp)
   13a38:	e17fff15 	stw	r5,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   13a3c:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pmem == (OS_MEM *)0) {                   /* Must point to a valid memory partition             */
   13a40:	e0bffe17 	ldw	r2,-8(fp)
   13a44:	1000021e 	bne	r2,zero,13a50 <OSMemQuery+0x28>
        return (OS_ERR_MEM_INVALID_PMEM);
   13a48:	00801804 	movi	r2,96
   13a4c:	00002c06 	br	13b00 <OSMemQuery+0xd8>
    }
    if (p_mem_data == (OS_MEM_DATA *)0) {        /* Must release a valid storage area for the data     */
   13a50:	e0bfff17 	ldw	r2,-4(fp)
   13a54:	1000021e 	bne	r2,zero,13a60 <OSMemQuery+0x38>
        return (OS_ERR_MEM_INVALID_PDATA);
   13a58:	00801844 	movi	r2,97
   13a5c:	00002806 	br	13b00 <OSMemQuery+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   13a60:	0005303a 	rdctl	r2,status
   13a64:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   13a68:	e0fffc17 	ldw	r3,-16(fp)
   13a6c:	00bfff84 	movi	r2,-2
   13a70:	1884703a 	and	r2,r3,r2
   13a74:	1001703a 	wrctl	status,r2
  
  return context;
   13a78:	e0bffc17 	ldw	r2,-16(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   13a7c:	e0bffb15 	stw	r2,-20(fp)
    p_mem_data->OSAddr     = pmem->OSMemAddr;
   13a80:	e0bffe17 	ldw	r2,-8(fp)
   13a84:	10c00017 	ldw	r3,0(r2)
   13a88:	e0bfff17 	ldw	r2,-4(fp)
   13a8c:	10c00015 	stw	r3,0(r2)
    p_mem_data->OSFreeList = pmem->OSMemFreeList;
   13a90:	e0bffe17 	ldw	r2,-8(fp)
   13a94:	10c00117 	ldw	r3,4(r2)
   13a98:	e0bfff17 	ldw	r2,-4(fp)
   13a9c:	10c00115 	stw	r3,4(r2)
    p_mem_data->OSBlkSize  = pmem->OSMemBlkSize;
   13aa0:	e0bffe17 	ldw	r2,-8(fp)
   13aa4:	10c00217 	ldw	r3,8(r2)
   13aa8:	e0bfff17 	ldw	r2,-4(fp)
   13aac:	10c00215 	stw	r3,8(r2)
    p_mem_data->OSNBlks    = pmem->OSMemNBlks;
   13ab0:	e0bffe17 	ldw	r2,-8(fp)
   13ab4:	10c00317 	ldw	r3,12(r2)
   13ab8:	e0bfff17 	ldw	r2,-4(fp)
   13abc:	10c00315 	stw	r3,12(r2)
    p_mem_data->OSNFree    = pmem->OSMemNFree;
   13ac0:	e0bffe17 	ldw	r2,-8(fp)
   13ac4:	10c00417 	ldw	r3,16(r2)
   13ac8:	e0bfff17 	ldw	r2,-4(fp)
   13acc:	10c00415 	stw	r3,16(r2)
   13ad0:	e0bffb17 	ldw	r2,-20(fp)
   13ad4:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   13ad8:	e0bffd17 	ldw	r2,-12(fp)
   13adc:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    p_mem_data->OSNUsed    = p_mem_data->OSNBlks - p_mem_data->OSNFree;
   13ae0:	e0bfff17 	ldw	r2,-4(fp)
   13ae4:	10c00317 	ldw	r3,12(r2)
   13ae8:	e0bfff17 	ldw	r2,-4(fp)
   13aec:	10800417 	ldw	r2,16(r2)
   13af0:	1887c83a 	sub	r3,r3,r2
   13af4:	e0bfff17 	ldw	r2,-4(fp)
   13af8:	10c00515 	stw	r3,20(r2)
    return (OS_ERR_NONE);
   13afc:	0005883a 	mov	r2,zero
}
   13b00:	e037883a 	mov	sp,fp
   13b04:	df000017 	ldw	fp,0(sp)
   13b08:	dec00104 	addi	sp,sp,4
   13b0c:	f800283a 	ret

00013b10 <OS_MemInit>:
* Note(s)    : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

void  OS_MemInit (void)
{
   13b10:	defffc04 	addi	sp,sp,-16
   13b14:	dfc00315 	stw	ra,12(sp)
   13b18:	df000215 	stw	fp,8(sp)
   13b1c:	df000204 	addi	fp,sp,8
#if OS_MAX_MEM_PART >= 2
    OS_MEM  *pmem;
    INT16U   i;


    OS_MemClr((INT8U *)&OSMemTbl[0], sizeof(OSMemTbl));   /* Clear the memory partition table          */
   13b20:	01430c04 	movi	r5,3120
   13b24:	010000b4 	movhi	r4,2
   13b28:	213d9c04 	addi	r4,r4,-2448
   13b2c:	00114540 	call	11454 <OS_MemClr>
    pmem = &OSMemTbl[0];                                  /* Point to memory control block (MCB)       */
   13b30:	008000b4 	movhi	r2,2
   13b34:	10bd9c04 	addi	r2,r2,-2448
   13b38:	e0bffe15 	stw	r2,-8(fp)
    for (i = 0; i < (OS_MAX_MEM_PART - 1); i++) {         /* Init. list of free memory partitions      */
   13b3c:	e03fff0d 	sth	zero,-4(fp)
   13b40:	00001606 	br	13b9c <OS_MemInit+0x8c>
        pmem->OSMemFreeList = (void *)&OSMemTbl[i+1];     /* Chain list of free partitions             */
   13b44:	e0bfff0b 	ldhu	r2,-4(fp)
   13b48:	10800044 	addi	r2,r2,1
   13b4c:	01400d04 	movi	r5,52
   13b50:	1009883a 	mov	r4,r2
   13b54:	000c3c80 	call	c3c8 <__mulsi3>
   13b58:	1007883a 	mov	r3,r2
   13b5c:	008000b4 	movhi	r2,2
   13b60:	10bd9c04 	addi	r2,r2,-2448
   13b64:	1887883a 	add	r3,r3,r2
   13b68:	e0bffe17 	ldw	r2,-8(fp)
   13b6c:	10c00115 	stw	r3,4(r2)
#if OS_MEM_NAME_SIZE > 1
        pmem->OSMemName[0]  = '?';                        /* Unknown name                              */
   13b70:	e0bffe17 	ldw	r2,-8(fp)
   13b74:	00c00fc4 	movi	r3,63
   13b78:	10c00505 	stb	r3,20(r2)
        pmem->OSMemName[1]  = OS_ASCII_NUL;
   13b7c:	e0bffe17 	ldw	r2,-8(fp)
   13b80:	10000545 	stb	zero,21(r2)
#endif
        pmem++;
   13b84:	e0bffe17 	ldw	r2,-8(fp)
   13b88:	10800d04 	addi	r2,r2,52
   13b8c:	e0bffe15 	stw	r2,-8(fp)
    INT16U   i;


    OS_MemClr((INT8U *)&OSMemTbl[0], sizeof(OSMemTbl));   /* Clear the memory partition table          */
    pmem = &OSMemTbl[0];                                  /* Point to memory control block (MCB)       */
    for (i = 0; i < (OS_MAX_MEM_PART - 1); i++) {         /* Init. list of free memory partitions      */
   13b90:	e0bfff0b 	ldhu	r2,-4(fp)
   13b94:	10800044 	addi	r2,r2,1
   13b98:	e0bfff0d 	sth	r2,-4(fp)
   13b9c:	e0bfff0b 	ldhu	r2,-4(fp)
   13ba0:	10800ef0 	cmpltui	r2,r2,59
   13ba4:	103fe71e 	bne	r2,zero,13b44 <__alt_data_end+0xfffe3b44>
        pmem->OSMemName[0]  = '?';                        /* Unknown name                              */
        pmem->OSMemName[1]  = OS_ASCII_NUL;
#endif
        pmem++;
    }
    pmem->OSMemFreeList = (void *)0;                      /* Initialize last node                      */
   13ba8:	e0bffe17 	ldw	r2,-8(fp)
   13bac:	10000115 	stw	zero,4(r2)
#if OS_MEM_NAME_SIZE > 1
    pmem->OSMemName[0]  = '?';                            /* Unknown name                              */
   13bb0:	e0bffe17 	ldw	r2,-8(fp)
   13bb4:	00c00fc4 	movi	r3,63
   13bb8:	10c00505 	stb	r3,20(r2)
    pmem->OSMemName[1]  = OS_ASCII_NUL;
   13bbc:	e0bffe17 	ldw	r2,-8(fp)
   13bc0:	10000545 	stb	zero,21(r2)
#endif

    OSMemFreeList       = &OSMemTbl[0];                   /* Point to beginning of free list           */
   13bc4:	008000b4 	movhi	r2,2
   13bc8:	10bd9c04 	addi	r2,r2,-2448
   13bcc:	d0a72d15 	stw	r2,-25420(gp)
#endif
}
   13bd0:	0001883a 	nop
   13bd4:	e037883a 	mov	sp,fp
   13bd8:	dfc00117 	ldw	ra,4(sp)
   13bdc:	df000017 	ldw	fp,0(sp)
   13be0:	dec00204 	addi	sp,sp,8
   13be4:	f800283a 	ret

00013be8 <OSQAccept>:
*********************************************************************************************************
*/

#if OS_Q_ACCEPT_EN > 0
void  *OSQAccept (OS_EVENT *pevent, INT8U *perr)
{
   13be8:	defff804 	addi	sp,sp,-32
   13bec:	df000715 	stw	fp,28(sp)
   13bf0:	df000704 	addi	fp,sp,28
   13bf4:	e13ffe15 	stw	r4,-8(fp)
   13bf8:	e17fff15 	stw	r5,-4(fp)
    void      *pmsg;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   13bfc:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
   13c00:	e0bfff17 	ldw	r2,-4(fp)
   13c04:	1000021e 	bne	r2,zero,13c10 <OSQAccept+0x28>
        return ((void *)0);
   13c08:	0005883a 	mov	r2,zero
   13c0c:	00004206 	br	13d18 <OSQAccept+0x130>
    }
    if (pevent == (OS_EVENT *)0) {               /* Validate 'pevent'                                  */
   13c10:	e0bffe17 	ldw	r2,-8(fp)
   13c14:	1000051e 	bne	r2,zero,13c2c <OSQAccept+0x44>
        *perr = OS_ERR_PEVENT_NULL;
   13c18:	e0bfff17 	ldw	r2,-4(fp)
   13c1c:	00c00104 	movi	r3,4
   13c20:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
   13c24:	0005883a 	mov	r2,zero
   13c28:	00003b06 	br	13d18 <OSQAccept+0x130>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {/* Validate event block type                          */
   13c2c:	e0bffe17 	ldw	r2,-8(fp)
   13c30:	10800003 	ldbu	r2,0(r2)
   13c34:	10803fcc 	andi	r2,r2,255
   13c38:	108000a0 	cmpeqi	r2,r2,2
   13c3c:	1000051e 	bne	r2,zero,13c54 <OSQAccept+0x6c>
        *perr = OS_ERR_EVENT_TYPE;
   13c40:	e0bfff17 	ldw	r2,-4(fp)
   13c44:	00c00044 	movi	r3,1
   13c48:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
   13c4c:	0005883a 	mov	r2,zero
   13c50:	00003106 	br	13d18 <OSQAccept+0x130>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   13c54:	0005303a 	rdctl	r2,status
   13c58:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   13c5c:	e0fffd17 	ldw	r3,-12(fp)
   13c60:	00bfff84 	movi	r2,-2
   13c64:	1884703a 	and	r2,r3,r2
   13c68:	1001703a 	wrctl	status,r2
  
  return context;
   13c6c:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
   13c70:	e0bffa15 	stw	r2,-24(fp)
    pq = (OS_Q *)pevent->OSEventPtr;             /* Point at queue control block                       */
   13c74:	e0bffe17 	ldw	r2,-8(fp)
   13c78:	10800117 	ldw	r2,4(r2)
   13c7c:	e0bffc15 	stw	r2,-16(fp)
    if (pq->OSQEntries > 0) {                    /* See if any messages in the queue                   */
   13c80:	e0bffc17 	ldw	r2,-16(fp)
   13c84:	1080058b 	ldhu	r2,22(r2)
   13c88:	10bfffcc 	andi	r2,r2,65535
   13c8c:	10001926 	beq	r2,zero,13cf4 <OSQAccept+0x10c>
        pmsg = *pq->OSQOut++;                    /* Yes, extract oldest message from the queue         */
   13c90:	e0bffc17 	ldw	r2,-16(fp)
   13c94:	10800417 	ldw	r2,16(r2)
   13c98:	11000104 	addi	r4,r2,4
   13c9c:	e0fffc17 	ldw	r3,-16(fp)
   13ca0:	19000415 	stw	r4,16(r3)
   13ca4:	10800017 	ldw	r2,0(r2)
   13ca8:	e0bff915 	stw	r2,-28(fp)
        pq->OSQEntries--;                        /* Update the number of entries in the queue          */
   13cac:	e0bffc17 	ldw	r2,-16(fp)
   13cb0:	1080058b 	ldhu	r2,22(r2)
   13cb4:	10bfffc4 	addi	r2,r2,-1
   13cb8:	1007883a 	mov	r3,r2
   13cbc:	e0bffc17 	ldw	r2,-16(fp)
   13cc0:	10c0058d 	sth	r3,22(r2)
        if (pq->OSQOut == pq->OSQEnd) {          /* Wrap OUT pointer if we are at the end of the queue */
   13cc4:	e0bffc17 	ldw	r2,-16(fp)
   13cc8:	10c00417 	ldw	r3,16(r2)
   13ccc:	e0bffc17 	ldw	r2,-16(fp)
   13cd0:	10800217 	ldw	r2,8(r2)
   13cd4:	1880041e 	bne	r3,r2,13ce8 <OSQAccept+0x100>
            pq->OSQOut = pq->OSQStart;
   13cd8:	e0bffc17 	ldw	r2,-16(fp)
   13cdc:	10c00117 	ldw	r3,4(r2)
   13ce0:	e0bffc17 	ldw	r2,-16(fp)
   13ce4:	10c00415 	stw	r3,16(r2)
        }
        *perr = OS_ERR_NONE;
   13ce8:	e0bfff17 	ldw	r2,-4(fp)
   13cec:	10000005 	stb	zero,0(r2)
   13cf0:	00000406 	br	13d04 <OSQAccept+0x11c>
    } else {
        *perr = OS_ERR_Q_EMPTY;
   13cf4:	e0bfff17 	ldw	r2,-4(fp)
   13cf8:	00c007c4 	movi	r3,31
   13cfc:	10c00005 	stb	r3,0(r2)
        pmsg  = (void *)0;                       /* Queue is empty                                     */
   13d00:	e03ff915 	stw	zero,-28(fp)
   13d04:	e0bffa17 	ldw	r2,-24(fp)
   13d08:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   13d0c:	e0bffb17 	ldw	r2,-20(fp)
   13d10:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (pmsg);                               /* Return message received (or NULL)                  */
   13d14:	e0bff917 	ldw	r2,-28(fp)
}
   13d18:	e037883a 	mov	sp,fp
   13d1c:	df000017 	ldw	fp,0(sp)
   13d20:	dec00104 	addi	sp,sp,4
   13d24:	f800283a 	ret

00013d28 <OSQCreate>:
*              == (OS_EVENT *)0  if no event control blocks were available or an error was detected
*********************************************************************************************************
*/

OS_EVENT  *OSQCreate (void **start, INT16U size)
{
   13d28:	defff404 	addi	sp,sp,-48
   13d2c:	dfc00b15 	stw	ra,44(sp)
   13d30:	df000a15 	stw	fp,40(sp)
   13d34:	df000a04 	addi	fp,sp,40
   13d38:	e13ffe15 	stw	r4,-8(fp)
   13d3c:	2805883a 	mov	r2,r5
   13d40:	e0bfff0d 	sth	r2,-4(fp)
    OS_EVENT  *pevent;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   13d44:	e03ff715 	stw	zero,-36(fp)
#endif



    if (OSIntNesting > 0) {                      /* See if called from ISR ...                         */
   13d48:	d0a73203 	ldbu	r2,-25400(gp)
   13d4c:	10803fcc 	andi	r2,r2,255
   13d50:	10000226 	beq	r2,zero,13d5c <OSQCreate+0x34>
        return ((OS_EVENT *)0);                  /* ... can't CREATE from an ISR                       */
   13d54:	0005883a 	mov	r2,zero
   13d58:	00005906 	br	13ec0 <OSQCreate+0x198>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   13d5c:	0005303a 	rdctl	r2,status
   13d60:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   13d64:	e0fffd17 	ldw	r3,-12(fp)
   13d68:	00bfff84 	movi	r2,-2
   13d6c:	1884703a 	and	r2,r3,r2
   13d70:	1001703a 	wrctl	status,r2
  
  return context;
   13d74:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
   13d78:	e0bff715 	stw	r2,-36(fp)
    pevent = OSEventFreeList;                    /* Get next free event control block                  */
   13d7c:	d0a73117 	ldw	r2,-25404(gp)
   13d80:	e0bff615 	stw	r2,-40(fp)
    if (OSEventFreeList != (OS_EVENT *)0) {      /* See if pool of free ECB pool was empty             */
   13d84:	d0a73117 	ldw	r2,-25404(gp)
   13d88:	10000326 	beq	r2,zero,13d98 <OSQCreate+0x70>
        OSEventFreeList = (OS_EVENT *)OSEventFreeList->OSEventPtr;
   13d8c:	d0a73117 	ldw	r2,-25404(gp)
   13d90:	10800117 	ldw	r2,4(r2)
   13d94:	d0a73115 	stw	r2,-25404(gp)
   13d98:	e0bff717 	ldw	r2,-36(fp)
   13d9c:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   13da0:	e0bff817 	ldw	r2,-32(fp)
   13da4:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    if (pevent != (OS_EVENT *)0) {               /* See if we have an event control block              */
   13da8:	e0bff617 	ldw	r2,-40(fp)
   13dac:	10004326 	beq	r2,zero,13ebc <OSQCreate+0x194>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   13db0:	0005303a 	rdctl	r2,status
   13db4:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   13db8:	e0fff917 	ldw	r3,-28(fp)
   13dbc:	00bfff84 	movi	r2,-2
   13dc0:	1884703a 	and	r2,r3,r2
   13dc4:	1001703a 	wrctl	status,r2
  
  return context;
   13dc8:	e0bff917 	ldw	r2,-28(fp)
        OS_ENTER_CRITICAL();
   13dcc:	e0bff715 	stw	r2,-36(fp)
        pq = OSQFreeList;                        /* Get a free queue control block                     */
   13dd0:	d0a72f17 	ldw	r2,-25412(gp)
   13dd4:	e0bffb15 	stw	r2,-20(fp)
        if (pq != (OS_Q *)0) {                   /* Were we able to get a queue control block ?        */
   13dd8:	e0bffb17 	ldw	r2,-20(fp)
   13ddc:	10002d26 	beq	r2,zero,13e94 <OSQCreate+0x16c>
            OSQFreeList            = OSQFreeList->OSQPtr; /* Yes, Adjust free list pointer to next free*/
   13de0:	d0a72f17 	ldw	r2,-25412(gp)
   13de4:	10800017 	ldw	r2,0(r2)
   13de8:	d0a72f15 	stw	r2,-25412(gp)
   13dec:	e0bff717 	ldw	r2,-36(fp)
   13df0:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   13df4:	e0bffa17 	ldw	r2,-24(fp)
   13df8:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
            pq->OSQStart           = start;               /*      Initialize the queue                 */
   13dfc:	e0bffb17 	ldw	r2,-20(fp)
   13e00:	e0fffe17 	ldw	r3,-8(fp)
   13e04:	10c00115 	stw	r3,4(r2)
            pq->OSQEnd             = &start[size];
   13e08:	e0bfff0b 	ldhu	r2,-4(fp)
   13e0c:	1085883a 	add	r2,r2,r2
   13e10:	1085883a 	add	r2,r2,r2
   13e14:	1007883a 	mov	r3,r2
   13e18:	e0bffe17 	ldw	r2,-8(fp)
   13e1c:	10c7883a 	add	r3,r2,r3
   13e20:	e0bffb17 	ldw	r2,-20(fp)
   13e24:	10c00215 	stw	r3,8(r2)
            pq->OSQIn              = start;
   13e28:	e0bffb17 	ldw	r2,-20(fp)
   13e2c:	e0fffe17 	ldw	r3,-8(fp)
   13e30:	10c00315 	stw	r3,12(r2)
            pq->OSQOut             = start;
   13e34:	e0bffb17 	ldw	r2,-20(fp)
   13e38:	e0fffe17 	ldw	r3,-8(fp)
   13e3c:	10c00415 	stw	r3,16(r2)
            pq->OSQSize            = size;
   13e40:	e0bffb17 	ldw	r2,-20(fp)
   13e44:	e0ffff0b 	ldhu	r3,-4(fp)
   13e48:	10c0050d 	sth	r3,20(r2)
            pq->OSQEntries         = 0;
   13e4c:	e0bffb17 	ldw	r2,-20(fp)
   13e50:	1000058d 	sth	zero,22(r2)
            pevent->OSEventType    = OS_EVENT_TYPE_Q;
   13e54:	e0bff617 	ldw	r2,-40(fp)
   13e58:	00c00084 	movi	r3,2
   13e5c:	10c00005 	stb	r3,0(r2)
            pevent->OSEventCnt     = 0;
   13e60:	e0bff617 	ldw	r2,-40(fp)
   13e64:	1000020d 	sth	zero,8(r2)
            pevent->OSEventPtr     = pq;
   13e68:	e0bff617 	ldw	r2,-40(fp)
   13e6c:	e0fffb17 	ldw	r3,-20(fp)
   13e70:	10c00115 	stw	r3,4(r2)
#if OS_EVENT_NAME_SIZE > 1
            pevent->OSEventName[0] = '?';                  /* Unknown name                             */
   13e74:	e0bff617 	ldw	r2,-40(fp)
   13e78:	00c00fc4 	movi	r3,63
   13e7c:	10c00385 	stb	r3,14(r2)
            pevent->OSEventName[1] = OS_ASCII_NUL;
   13e80:	e0bff617 	ldw	r2,-40(fp)
   13e84:	100003c5 	stb	zero,15(r2)
#endif
            OS_EventWaitListInit(pevent);                 /*      Initalize the wait list              */
   13e88:	e13ff617 	ldw	r4,-40(fp)
   13e8c:	00110740 	call	11074 <OS_EventWaitListInit>
   13e90:	00000a06 	br	13ebc <OSQCreate+0x194>
        } else {
            pevent->OSEventPtr = (void *)OSEventFreeList; /* No,  Return event control block on error  */
   13e94:	d0e73117 	ldw	r3,-25404(gp)
   13e98:	e0bff617 	ldw	r2,-40(fp)
   13e9c:	10c00115 	stw	r3,4(r2)
            OSEventFreeList    = pevent;
   13ea0:	e0bff617 	ldw	r2,-40(fp)
   13ea4:	d0a73115 	stw	r2,-25404(gp)
   13ea8:	e0bff717 	ldw	r2,-36(fp)
   13eac:	e0bffc15 	stw	r2,-16(fp)
   13eb0:	e0bffc17 	ldw	r2,-16(fp)
   13eb4:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
            pevent = (OS_EVENT *)0;
   13eb8:	e03ff615 	stw	zero,-40(fp)
        }
    }
    return (pevent);
   13ebc:	e0bff617 	ldw	r2,-40(fp)
}
   13ec0:	e037883a 	mov	sp,fp
   13ec4:	dfc00117 	ldw	ra,4(sp)
   13ec8:	df000017 	ldw	fp,0(sp)
   13ecc:	dec00204 	addi	sp,sp,8
   13ed0:	f800283a 	ret

00013ed4 <OSQDel>:
*********************************************************************************************************
*/

#if OS_Q_DEL_EN > 0
OS_EVENT  *OSQDel (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
   13ed4:	defff204 	addi	sp,sp,-56
   13ed8:	dfc00d15 	stw	ra,52(sp)
   13edc:	df000c15 	stw	fp,48(sp)
   13ee0:	df000c04 	addi	fp,sp,48
   13ee4:	e13ffd15 	stw	r4,-12(fp)
   13ee8:	2805883a 	mov	r2,r5
   13eec:	e1bfff15 	stw	r6,-4(fp)
   13ef0:	e0bffe05 	stb	r2,-8(fp)
    BOOLEAN    tasks_waiting;
    OS_EVENT  *pevent_return;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
   13ef4:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
   13ef8:	e0bfff17 	ldw	r2,-4(fp)
   13efc:	1000021e 	bne	r2,zero,13f08 <OSQDel+0x34>
        return (pevent);
   13f00:	e0bffd17 	ldw	r2,-12(fp)
   13f04:	00008e06 	br	14140 <OSQDel+0x26c>
    }
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
   13f08:	e0bffd17 	ldw	r2,-12(fp)
   13f0c:	1000051e 	bne	r2,zero,13f24 <OSQDel+0x50>
        *perr = OS_ERR_PEVENT_NULL;
   13f10:	e0bfff17 	ldw	r2,-4(fp)
   13f14:	00c00104 	movi	r3,4
   13f18:	10c00005 	stb	r3,0(r2)
        return (pevent);
   13f1c:	e0bffd17 	ldw	r2,-12(fp)
   13f20:	00008706 	br	14140 <OSQDel+0x26c>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {          /* Validate event block type                */
   13f24:	e0bffd17 	ldw	r2,-12(fp)
   13f28:	10800003 	ldbu	r2,0(r2)
   13f2c:	10803fcc 	andi	r2,r2,255
   13f30:	108000a0 	cmpeqi	r2,r2,2
   13f34:	1000051e 	bne	r2,zero,13f4c <OSQDel+0x78>
        *perr = OS_ERR_EVENT_TYPE;
   13f38:	e0bfff17 	ldw	r2,-4(fp)
   13f3c:	00c00044 	movi	r3,1
   13f40:	10c00005 	stb	r3,0(r2)
        return (pevent);
   13f44:	e0bffd17 	ldw	r2,-12(fp)
   13f48:	00007d06 	br	14140 <OSQDel+0x26c>
    }
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
   13f4c:	d0a73203 	ldbu	r2,-25400(gp)
   13f50:	10803fcc 	andi	r2,r2,255
   13f54:	10000526 	beq	r2,zero,13f6c <OSQDel+0x98>
        *perr = OS_ERR_DEL_ISR;                            /* ... can't DELETE from an ISR             */
   13f58:	e0bfff17 	ldw	r2,-4(fp)
   13f5c:	00c003c4 	movi	r3,15
   13f60:	10c00005 	stb	r3,0(r2)
        return (pevent);
   13f64:	e0bffd17 	ldw	r2,-12(fp)
   13f68:	00007506 	br	14140 <OSQDel+0x26c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   13f6c:	0005303a 	rdctl	r2,status
   13f70:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   13f74:	e0fffc17 	ldw	r3,-16(fp)
   13f78:	00bfff84 	movi	r2,-2
   13f7c:	1884703a 	and	r2,r3,r2
   13f80:	1001703a 	wrctl	status,r2
  
  return context;
   13f84:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
   13f88:	e0bff615 	stw	r2,-40(fp)
    if (pevent->OSEventGrp != 0) {                         /* See if any tasks waiting on queue        */
   13f8c:	e0bffd17 	ldw	r2,-12(fp)
   13f90:	10800283 	ldbu	r2,10(r2)
   13f94:	10803fcc 	andi	r2,r2,255
   13f98:	10000326 	beq	r2,zero,13fa8 <OSQDel+0xd4>
        tasks_waiting = OS_TRUE;                           /* Yes                                      */
   13f9c:	00800044 	movi	r2,1
   13fa0:	e0bff405 	stb	r2,-48(fp)
   13fa4:	00000106 	br	13fac <OSQDel+0xd8>
    } else {
        tasks_waiting = OS_FALSE;                          /* No                                       */
   13fa8:	e03ff405 	stb	zero,-48(fp)
    }
    switch (opt) {
   13fac:	e0bffe03 	ldbu	r2,-8(fp)
   13fb0:	10000326 	beq	r2,zero,13fc0 <OSQDel+0xec>
   13fb4:	10800060 	cmpeqi	r2,r2,1
   13fb8:	1000301e 	bne	r2,zero,1407c <OSQDel+0x1a8>
   13fbc:	00005506 	br	14114 <OSQDel+0x240>
        case OS_DEL_NO_PEND:                               /* Delete queue only if no task waiting     */
             if (tasks_waiting == OS_FALSE) {
   13fc0:	e0bff403 	ldbu	r2,-48(fp)
   13fc4:	10001e1e 	bne	r2,zero,14040 <OSQDel+0x16c>
#if OS_EVENT_NAME_SIZE > 1
                 pevent->OSEventName[0] = '?';             /* Unknown name                             */
   13fc8:	e0bffd17 	ldw	r2,-12(fp)
   13fcc:	00c00fc4 	movi	r3,63
   13fd0:	10c00385 	stb	r3,14(r2)
                 pevent->OSEventName[1] = OS_ASCII_NUL;
   13fd4:	e0bffd17 	ldw	r2,-12(fp)
   13fd8:	100003c5 	stb	zero,15(r2)
#endif
                 pq                     = (OS_Q *)pevent->OSEventPtr;  /* Return OS_Q to free list     */
   13fdc:	e0bffd17 	ldw	r2,-12(fp)
   13fe0:	10800117 	ldw	r2,4(r2)
   13fe4:	e0bff815 	stw	r2,-32(fp)
                 pq->OSQPtr             = OSQFreeList;
   13fe8:	d0e72f17 	ldw	r3,-25412(gp)
   13fec:	e0bff817 	ldw	r2,-32(fp)
   13ff0:	10c00015 	stw	r3,0(r2)
                 OSQFreeList            = pq;
   13ff4:	e0bff817 	ldw	r2,-32(fp)
   13ff8:	d0a72f15 	stw	r2,-25412(gp)
                 pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
   13ffc:	e0bffd17 	ldw	r2,-12(fp)
   14000:	10000005 	stb	zero,0(r2)
                 pevent->OSEventPtr     = OSEventFreeList; /* Return Event Control Block to free list  */
   14004:	d0e73117 	ldw	r3,-25404(gp)
   14008:	e0bffd17 	ldw	r2,-12(fp)
   1400c:	10c00115 	stw	r3,4(r2)
                 pevent->OSEventCnt     = 0;
   14010:	e0bffd17 	ldw	r2,-12(fp)
   14014:	1000020d 	sth	zero,8(r2)
                 OSEventFreeList        = pevent;          /* Get next free event control block        */
   14018:	e0bffd17 	ldw	r2,-12(fp)
   1401c:	d0a73115 	stw	r2,-25404(gp)
   14020:	e0bff617 	ldw	r2,-40(fp)
   14024:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   14028:	e0bff717 	ldw	r2,-36(fp)
   1402c:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_NONE;
   14030:	e0bfff17 	ldw	r2,-4(fp)
   14034:	10000005 	stb	zero,0(r2)
                 pevent_return          = (OS_EVENT *)0;   /* Queue has been deleted                   */
   14038:	e03ff515 	stw	zero,-44(fp)
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_TASK_WAITING;
                 pevent_return          = pevent;
             }
             break;
   1403c:	00003f06 	br	1413c <OSQDel+0x268>
   14040:	e0bff617 	ldw	r2,-40(fp)
   14044:	e0bff915 	stw	r2,-28(fp)
   14048:	e0bff917 	ldw	r2,-28(fp)
   1404c:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_NONE;
                 pevent_return          = (OS_EVENT *)0;   /* Queue has been deleted                   */
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_TASK_WAITING;
   14050:	e0bfff17 	ldw	r2,-4(fp)
   14054:	00c01244 	movi	r3,73
   14058:	10c00005 	stb	r3,0(r2)
                 pevent_return          = pevent;
   1405c:	e0bffd17 	ldw	r2,-12(fp)
   14060:	e0bff515 	stw	r2,-44(fp)
             }
             break;
   14064:	00003506 	br	1413c <OSQDel+0x268>

        case OS_DEL_ALWAYS:                                /* Always delete the queue                  */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for queue        */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_OK);
   14068:	000f883a 	mov	r7,zero
   1406c:	01800104 	movi	r6,4
   14070:	000b883a 	mov	r5,zero
   14074:	e13ffd17 	ldw	r4,-12(fp)
   14078:	0010ac40 	call	10ac4 <OS_EventTaskRdy>
                 pevent_return          = pevent;
             }
             break;

        case OS_DEL_ALWAYS:                                /* Always delete the queue                  */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for queue        */
   1407c:	e0bffd17 	ldw	r2,-12(fp)
   14080:	10800283 	ldbu	r2,10(r2)
   14084:	10803fcc 	andi	r2,r2,255
   14088:	103ff71e 	bne	r2,zero,14068 <__alt_data_end+0xfffe4068>
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_OK);
             }
#if OS_EVENT_NAME_SIZE > 1
             pevent->OSEventName[0] = '?';                 /* Unknown name                             */
   1408c:	e0bffd17 	ldw	r2,-12(fp)
   14090:	00c00fc4 	movi	r3,63
   14094:	10c00385 	stb	r3,14(r2)
             pevent->OSEventName[1] = OS_ASCII_NUL;
   14098:	e0bffd17 	ldw	r2,-12(fp)
   1409c:	100003c5 	stb	zero,15(r2)
#endif
             pq                     = (OS_Q *)pevent->OSEventPtr;   /* Return OS_Q to free list        */
   140a0:	e0bffd17 	ldw	r2,-12(fp)
   140a4:	10800117 	ldw	r2,4(r2)
   140a8:	e0bff815 	stw	r2,-32(fp)
             pq->OSQPtr             = OSQFreeList;
   140ac:	d0e72f17 	ldw	r3,-25412(gp)
   140b0:	e0bff817 	ldw	r2,-32(fp)
   140b4:	10c00015 	stw	r3,0(r2)
             OSQFreeList            = pq;
   140b8:	e0bff817 	ldw	r2,-32(fp)
   140bc:	d0a72f15 	stw	r2,-25412(gp)
             pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
   140c0:	e0bffd17 	ldw	r2,-12(fp)
   140c4:	10000005 	stb	zero,0(r2)
             pevent->OSEventPtr     = OSEventFreeList;     /* Return Event Control Block to free list  */
   140c8:	d0e73117 	ldw	r3,-25404(gp)
   140cc:	e0bffd17 	ldw	r2,-12(fp)
   140d0:	10c00115 	stw	r3,4(r2)
             pevent->OSEventCnt     = 0;
   140d4:	e0bffd17 	ldw	r2,-12(fp)
   140d8:	1000020d 	sth	zero,8(r2)
             OSEventFreeList        = pevent;              /* Get next free event control block        */
   140dc:	e0bffd17 	ldw	r2,-12(fp)
   140e0:	d0a73115 	stw	r2,-25404(gp)
   140e4:	e0bff617 	ldw	r2,-40(fp)
   140e8:	e0bffa15 	stw	r2,-24(fp)
   140ec:	e0bffa17 	ldw	r2,-24(fp)
   140f0:	1001703a 	wrctl	status,r2
             OS_EXIT_CRITICAL();
             if (tasks_waiting == OS_TRUE) {               /* Reschedule only if task(s) were waiting  */
   140f4:	e0bff403 	ldbu	r2,-48(fp)
   140f8:	10800058 	cmpnei	r2,r2,1
   140fc:	1000011e 	bne	r2,zero,14104 <OSQDel+0x230>
                 OS_Sched();                               /* Find highest priority task ready to run  */
   14100:	00115100 	call	11510 <OS_Sched>
             }
             *perr                  = OS_ERR_NONE;
   14104:	e0bfff17 	ldw	r2,-4(fp)
   14108:	10000005 	stb	zero,0(r2)
             pevent_return          = (OS_EVENT *)0;       /* Queue has been deleted                   */
   1410c:	e03ff515 	stw	zero,-44(fp)
             break;
   14110:	00000a06 	br	1413c <OSQDel+0x268>
   14114:	e0bff617 	ldw	r2,-40(fp)
   14118:	e0bffb15 	stw	r2,-20(fp)
   1411c:	e0bffb17 	ldw	r2,-20(fp)
   14120:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();
             *perr                  = OS_ERR_INVALID_OPT;
   14124:	e0bfff17 	ldw	r2,-4(fp)
   14128:	00c001c4 	movi	r3,7
   1412c:	10c00005 	stb	r3,0(r2)
             pevent_return          = pevent;
   14130:	e0bffd17 	ldw	r2,-12(fp)
   14134:	e0bff515 	stw	r2,-44(fp)
             break;
   14138:	0001883a 	nop
    }
    return (pevent_return);
   1413c:	e0bff517 	ldw	r2,-44(fp)
}
   14140:	e037883a 	mov	sp,fp
   14144:	dfc00117 	ldw	ra,4(sp)
   14148:	df000017 	ldw	fp,0(sp)
   1414c:	dec00204 	addi	sp,sp,8
   14150:	f800283a 	ret

00014154 <OSQFlush>:
*********************************************************************************************************
*/

#if OS_Q_FLUSH_EN > 0
INT8U  OSQFlush (OS_EVENT *pevent)
{
   14154:	defffa04 	addi	sp,sp,-24
   14158:	df000515 	stw	fp,20(sp)
   1415c:	df000504 	addi	fp,sp,20
   14160:	e13fff15 	stw	r4,-4(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   14164:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
   14168:	e0bfff17 	ldw	r2,-4(fp)
   1416c:	1000021e 	bne	r2,zero,14178 <OSQFlush+0x24>
        return (OS_ERR_PEVENT_NULL);
   14170:	00800104 	movi	r2,4
   14174:	00002106 	br	141fc <OSQFlush+0xa8>
    }
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {     /* Validate event block type                     */
   14178:	e0bfff17 	ldw	r2,-4(fp)
   1417c:	10800003 	ldbu	r2,0(r2)
   14180:	10803fcc 	andi	r2,r2,255
   14184:	108000a0 	cmpeqi	r2,r2,2
   14188:	1000021e 	bne	r2,zero,14194 <OSQFlush+0x40>
        return (OS_ERR_EVENT_TYPE);
   1418c:	00800044 	movi	r2,1
   14190:	00001a06 	br	141fc <OSQFlush+0xa8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   14194:	0005303a 	rdctl	r2,status
   14198:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1419c:	e0fffd17 	ldw	r3,-12(fp)
   141a0:	00bfff84 	movi	r2,-2
   141a4:	1884703a 	and	r2,r3,r2
   141a8:	1001703a 	wrctl	status,r2
  
  return context;
   141ac:	e0bffd17 	ldw	r2,-12(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   141b0:	e0bffb15 	stw	r2,-20(fp)
    pq             = (OS_Q *)pevent->OSEventPtr;      /* Point to queue storage structure              */
   141b4:	e0bfff17 	ldw	r2,-4(fp)
   141b8:	10800117 	ldw	r2,4(r2)
   141bc:	e0bffc15 	stw	r2,-16(fp)
    pq->OSQIn      = pq->OSQStart;
   141c0:	e0bffc17 	ldw	r2,-16(fp)
   141c4:	10c00117 	ldw	r3,4(r2)
   141c8:	e0bffc17 	ldw	r2,-16(fp)
   141cc:	10c00315 	stw	r3,12(r2)
    pq->OSQOut     = pq->OSQStart;
   141d0:	e0bffc17 	ldw	r2,-16(fp)
   141d4:	10c00117 	ldw	r3,4(r2)
   141d8:	e0bffc17 	ldw	r2,-16(fp)
   141dc:	10c00415 	stw	r3,16(r2)
    pq->OSQEntries = 0;
   141e0:	e0bffc17 	ldw	r2,-16(fp)
   141e4:	1000058d 	sth	zero,22(r2)
   141e8:	e0bffb17 	ldw	r2,-20(fp)
   141ec:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   141f0:	e0bffe17 	ldw	r2,-8(fp)
   141f4:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
   141f8:	0005883a 	mov	r2,zero
}
   141fc:	e037883a 	mov	sp,fp
   14200:	df000017 	ldw	fp,0(sp)
   14204:	dec00104 	addi	sp,sp,4
   14208:	f800283a 	ret

0001420c <OSQPend>:
* Note(s)    : As of V2.60, this function allows you to receive NULL pointer messages.
*********************************************************************************************************
*/

void  *OSQPend (OS_EVENT *pevent, INT16U timeout, INT8U *perr)
{
   1420c:	defff304 	addi	sp,sp,-52
   14210:	dfc00c15 	stw	ra,48(sp)
   14214:	df000b15 	stw	fp,44(sp)
   14218:	df000b04 	addi	fp,sp,44
   1421c:	e13ffd15 	stw	r4,-12(fp)
   14220:	2805883a 	mov	r2,r5
   14224:	e1bfff15 	stw	r6,-4(fp)
   14228:	e0bffe0d 	sth	r2,-8(fp)
    void      *pmsg;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   1422c:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
   14230:	e0bfff17 	ldw	r2,-4(fp)
   14234:	1000021e 	bne	r2,zero,14240 <OSQPend+0x34>
        return ((void *)0);
   14238:	0005883a 	mov	r2,zero
   1423c:	00009106 	br	14484 <OSQPend+0x278>
    }
    if (pevent == (OS_EVENT *)0) {               /* Validate 'pevent'                                  */
   14240:	e0bffd17 	ldw	r2,-12(fp)
   14244:	1000051e 	bne	r2,zero,1425c <OSQPend+0x50>
        *perr = OS_ERR_PEVENT_NULL;
   14248:	e0bfff17 	ldw	r2,-4(fp)
   1424c:	00c00104 	movi	r3,4
   14250:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
   14254:	0005883a 	mov	r2,zero
   14258:	00008a06 	br	14484 <OSQPend+0x278>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {/* Validate event block type                          */
   1425c:	e0bffd17 	ldw	r2,-12(fp)
   14260:	10800003 	ldbu	r2,0(r2)
   14264:	10803fcc 	andi	r2,r2,255
   14268:	108000a0 	cmpeqi	r2,r2,2
   1426c:	1000051e 	bne	r2,zero,14284 <OSQPend+0x78>
        *perr = OS_ERR_EVENT_TYPE;
   14270:	e0bfff17 	ldw	r2,-4(fp)
   14274:	00c00044 	movi	r3,1
   14278:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
   1427c:	0005883a 	mov	r2,zero
   14280:	00008006 	br	14484 <OSQPend+0x278>
    }
    if (OSIntNesting > 0) {                      /* See if called from ISR ...                         */
   14284:	d0a73203 	ldbu	r2,-25400(gp)
   14288:	10803fcc 	andi	r2,r2,255
   1428c:	10000526 	beq	r2,zero,142a4 <OSQPend+0x98>
        *perr = OS_ERR_PEND_ISR;                 /* ... can't PEND from an ISR                         */
   14290:	e0bfff17 	ldw	r2,-4(fp)
   14294:	00c00084 	movi	r3,2
   14298:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
   1429c:	0005883a 	mov	r2,zero
   142a0:	00007806 	br	14484 <OSQPend+0x278>
    }
    if (OSLockNesting > 0) {                     /* See if called with scheduler locked ...            */
   142a4:	d0a72403 	ldbu	r2,-25456(gp)
   142a8:	10803fcc 	andi	r2,r2,255
   142ac:	10000526 	beq	r2,zero,142c4 <OSQPend+0xb8>
        *perr = OS_ERR_PEND_LOCKED;              /* ... can't PEND when locked                         */
   142b0:	e0bfff17 	ldw	r2,-4(fp)
   142b4:	00c00344 	movi	r3,13
   142b8:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
   142bc:	0005883a 	mov	r2,zero
   142c0:	00007006 	br	14484 <OSQPend+0x278>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   142c4:	0005303a 	rdctl	r2,status
   142c8:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   142cc:	e0fffc17 	ldw	r3,-16(fp)
   142d0:	00bfff84 	movi	r2,-2
   142d4:	1884703a 	and	r2,r3,r2
   142d8:	1001703a 	wrctl	status,r2
  
  return context;
   142dc:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
   142e0:	e0bff615 	stw	r2,-40(fp)
    pq = (OS_Q *)pevent->OSEventPtr;             /* Point at queue control block                       */
   142e4:	e0bffd17 	ldw	r2,-12(fp)
   142e8:	10800117 	ldw	r2,4(r2)
   142ec:	e0bff815 	stw	r2,-32(fp)
    if (pq->OSQEntries > 0) {                    /* See if any messages in the queue                   */
   142f0:	e0bff817 	ldw	r2,-32(fp)
   142f4:	1080058b 	ldhu	r2,22(r2)
   142f8:	10bfffcc 	andi	r2,r2,65535
   142fc:	10001e26 	beq	r2,zero,14378 <OSQPend+0x16c>
        pmsg = *pq->OSQOut++;                    /* Yes, extract oldest message from the queue         */
   14300:	e0bff817 	ldw	r2,-32(fp)
   14304:	10800417 	ldw	r2,16(r2)
   14308:	11000104 	addi	r4,r2,4
   1430c:	e0fff817 	ldw	r3,-32(fp)
   14310:	19000415 	stw	r4,16(r3)
   14314:	10800017 	ldw	r2,0(r2)
   14318:	e0bff515 	stw	r2,-44(fp)
        pq->OSQEntries--;                        /* Update the number of entries in the queue          */
   1431c:	e0bff817 	ldw	r2,-32(fp)
   14320:	1080058b 	ldhu	r2,22(r2)
   14324:	10bfffc4 	addi	r2,r2,-1
   14328:	1007883a 	mov	r3,r2
   1432c:	e0bff817 	ldw	r2,-32(fp)
   14330:	10c0058d 	sth	r3,22(r2)
        if (pq->OSQOut == pq->OSQEnd) {          /* Wrap OUT pointer if we are at the end of the queue */
   14334:	e0bff817 	ldw	r2,-32(fp)
   14338:	10c00417 	ldw	r3,16(r2)
   1433c:	e0bff817 	ldw	r2,-32(fp)
   14340:	10800217 	ldw	r2,8(r2)
   14344:	1880041e 	bne	r3,r2,14358 <OSQPend+0x14c>
            pq->OSQOut = pq->OSQStart;
   14348:	e0bff817 	ldw	r2,-32(fp)
   1434c:	10c00117 	ldw	r3,4(r2)
   14350:	e0bff817 	ldw	r2,-32(fp)
   14354:	10c00415 	stw	r3,16(r2)
   14358:	e0bff617 	ldw	r2,-40(fp)
   1435c:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   14360:	e0bff717 	ldw	r2,-36(fp)
   14364:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_NONE;
   14368:	e0bfff17 	ldw	r2,-4(fp)
   1436c:	10000005 	stb	zero,0(r2)
        return (pmsg);                           /* Return message received                            */
   14370:	e0bff517 	ldw	r2,-44(fp)
   14374:	00004306 	br	14484 <OSQPend+0x278>
    }
    OSTCBCur->OSTCBStat     |= OS_STAT_Q;        /* Task will have to pend for a message to be posted  */
   14378:	d0a73317 	ldw	r2,-25396(gp)
   1437c:	d0e73317 	ldw	r3,-25396(gp)
   14380:	18c00c03 	ldbu	r3,48(r3)
   14384:	18c00114 	ori	r3,r3,4
   14388:	10c00c05 	stb	r3,48(r2)
    OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
   1438c:	d0a73317 	ldw	r2,-25396(gp)
   14390:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly       = timeout;          /* Load timeout into TCB                              */
   14394:	d0a73317 	ldw	r2,-25396(gp)
   14398:	e0fffe0b 	ldhu	r3,-8(fp)
   1439c:	10c00b8d 	sth	r3,46(r2)
    OS_EventTaskWait(pevent);                    /* Suspend task until event or timeout occurs         */
   143a0:	e13ffd17 	ldw	r4,-12(fp)
   143a4:	0010c5c0 	call	10c5c <OS_EventTaskWait>
   143a8:	e0bff617 	ldw	r2,-40(fp)
   143ac:	e0bffb15 	stw	r2,-20(fp)
   143b0:	e0bffb17 	ldw	r2,-20(fp)
   143b4:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OS_Sched();                                  /* Find next highest priority task ready to run       */
   143b8:	00115100 	call	11510 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   143bc:	0005303a 	rdctl	r2,status
   143c0:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   143c4:	e0fff917 	ldw	r3,-28(fp)
   143c8:	00bfff84 	movi	r2,-2
   143cc:	1884703a 	and	r2,r3,r2
   143d0:	1001703a 	wrctl	status,r2
  
  return context;
   143d4:	e0bff917 	ldw	r2,-28(fp)
    OS_ENTER_CRITICAL();
   143d8:	e0bff615 	stw	r2,-40(fp)
    switch (OSTCBCur->OSTCBStatPend) {                /* See if we timed-out or aborted                */
   143dc:	d0a73317 	ldw	r2,-25396(gp)
   143e0:	10800c43 	ldbu	r2,49(r2)
   143e4:	10803fcc 	andi	r2,r2,255
   143e8:	10000326 	beq	r2,zero,143f8 <OSQPend+0x1ec>
   143ec:	108000a0 	cmpeqi	r2,r2,2
   143f0:	1000071e 	bne	r2,zero,14410 <OSQPend+0x204>
   143f4:	00000b06 	br	14424 <OSQPend+0x218>
        case OS_STAT_PEND_OK:                         /* Extract message from TCB (Put there by QPost) */
             pmsg =  OSTCBCur->OSTCBMsg;
   143f8:	d0a73317 	ldw	r2,-25396(gp)
   143fc:	10800917 	ldw	r2,36(r2)
   14400:	e0bff515 	stw	r2,-44(fp)
            *perr =  OS_ERR_NONE;
   14404:	e0bfff17 	ldw	r2,-4(fp)
   14408:	10000005 	stb	zero,0(r2)
             break;
   1440c:	00000e06 	br	14448 <OSQPend+0x23c>

        case OS_STAT_PEND_ABORT:
             pmsg = (void *)0;
   14410:	e03ff515 	stw	zero,-44(fp)
            *perr =  OS_ERR_PEND_ABORT;               /* Indicate that we aborted                      */
   14414:	e0bfff17 	ldw	r2,-4(fp)
   14418:	00c00384 	movi	r3,14
   1441c:	10c00005 	stb	r3,0(r2)
             break;
   14420:	00000906 	br	14448 <OSQPend+0x23c>

        case OS_STAT_PEND_TO:
        default:
             OS_EventTaskRemove(OSTCBCur, pevent);
   14424:	d0a73317 	ldw	r2,-25396(gp)
   14428:	e17ffd17 	ldw	r5,-12(fp)
   1442c:	1009883a 	mov	r4,r2
   14430:	0010ebc0 	call	10ebc <OS_EventTaskRemove>
             pmsg = (void *)0;
   14434:	e03ff515 	stw	zero,-44(fp)
            *perr =  OS_ERR_TIMEOUT;                  /* Indicate that we didn't get event within TO   */
   14438:	e0bfff17 	ldw	r2,-4(fp)
   1443c:	00c00284 	movi	r3,10
   14440:	10c00005 	stb	r3,0(r2)
             break;
   14444:	0001883a 	nop
    }
    OSTCBCur->OSTCBStat          =  OS_STAT_RDY;      /* Set   task  status to ready                   */
   14448:	d0a73317 	ldw	r2,-25396(gp)
   1444c:	10000c05 	stb	zero,48(r2)
    OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;  /* Clear pend  status                            */
   14450:	d0a73317 	ldw	r2,-25396(gp)
   14454:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;    /* Clear event pointers                          */
   14458:	d0a73317 	ldw	r2,-25396(gp)
   1445c:	10000715 	stw	zero,28(r2)
#if (OS_EVENT_MULTI_EN > 0)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
   14460:	d0a73317 	ldw	r2,-25396(gp)
   14464:	10000815 	stw	zero,32(r2)
#endif
    OSTCBCur->OSTCBMsg           = (void      *)0;    /* Clear  received message                       */
   14468:	d0a73317 	ldw	r2,-25396(gp)
   1446c:	10000915 	stw	zero,36(r2)
   14470:	e0bff617 	ldw	r2,-40(fp)
   14474:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   14478:	e0bffa17 	ldw	r2,-24(fp)
   1447c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (pmsg);                                    /* Return received message                       */
   14480:	e0bff517 	ldw	r2,-44(fp)
}
   14484:	e037883a 	mov	sp,fp
   14488:	dfc00117 	ldw	ra,4(sp)
   1448c:	df000017 	ldw	fp,0(sp)
   14490:	dec00204 	addi	sp,sp,8
   14494:	f800283a 	ret

00014498 <OSQPendAbort>:
*********************************************************************************************************
*/

#if OS_Q_PEND_ABORT_EN > 0
INT8U  OSQPendAbort (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
   14498:	defff604 	addi	sp,sp,-40
   1449c:	dfc00915 	stw	ra,36(sp)
   144a0:	df000815 	stw	fp,32(sp)
   144a4:	df000804 	addi	fp,sp,32
   144a8:	e13ffd15 	stw	r4,-12(fp)
   144ac:	2805883a 	mov	r2,r5
   144b0:	e1bfff15 	stw	r6,-4(fp)
   144b4:	e0bffe05 	stb	r2,-8(fp)
    INT8U      nbr_tasks;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
   144b8:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
   144bc:	e0bfff17 	ldw	r2,-4(fp)
   144c0:	1000021e 	bne	r2,zero,144cc <OSQPendAbort+0x34>
        return (0);
   144c4:	0005883a 	mov	r2,zero
   144c8:	00004906 	br	145f0 <OSQPendAbort+0x158>
    }
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
   144cc:	e0bffd17 	ldw	r2,-12(fp)
   144d0:	1000051e 	bne	r2,zero,144e8 <OSQPendAbort+0x50>
        *perr = OS_ERR_PEVENT_NULL;
   144d4:	e0bfff17 	ldw	r2,-4(fp)
   144d8:	00c00104 	movi	r3,4
   144dc:	10c00005 	stb	r3,0(r2)
        return (0);
   144e0:	0005883a 	mov	r2,zero
   144e4:	00004206 	br	145f0 <OSQPendAbort+0x158>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {          /* Validate event block type                */
   144e8:	e0bffd17 	ldw	r2,-12(fp)
   144ec:	10800003 	ldbu	r2,0(r2)
   144f0:	10803fcc 	andi	r2,r2,255
   144f4:	108000a0 	cmpeqi	r2,r2,2
   144f8:	1000051e 	bne	r2,zero,14510 <OSQPendAbort+0x78>
        *perr = OS_ERR_EVENT_TYPE;
   144fc:	e0bfff17 	ldw	r2,-4(fp)
   14500:	00c00044 	movi	r3,1
   14504:	10c00005 	stb	r3,0(r2)
        return (0);
   14508:	0005883a 	mov	r2,zero
   1450c:	00003806 	br	145f0 <OSQPendAbort+0x158>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   14510:	0005303a 	rdctl	r2,status
   14514:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   14518:	e0fffc17 	ldw	r3,-16(fp)
   1451c:	00bfff84 	movi	r2,-2
   14520:	1884703a 	and	r2,r3,r2
   14524:	1001703a 	wrctl	status,r2
  
  return context;
   14528:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
   1452c:	e0bff915 	stw	r2,-28(fp)
    if (pevent->OSEventGrp != 0) {                         /* See if any task waiting on queue?        */
   14530:	e0bffd17 	ldw	r2,-12(fp)
   14534:	10800283 	ldbu	r2,10(r2)
   14538:	10803fcc 	andi	r2,r2,255
   1453c:	10002526 	beq	r2,zero,145d4 <OSQPendAbort+0x13c>
        nbr_tasks = 0;
   14540:	e03ff805 	stb	zero,-32(fp)
        switch (opt) {
   14544:	e0bffe03 	ldbu	r2,-8(fp)
   14548:	10800060 	cmpeqi	r2,r2,1
   1454c:	10000e26 	beq	r2,zero,14588 <OSQPendAbort+0xf0>
            case OS_PEND_OPT_BROADCAST:                    /* Do we need to abort ALL waiting tasks?   */
                 while (pevent->OSEventGrp != 0) {         /* Yes, ready ALL tasks waiting on queue    */
   14550:	00000806 	br	14574 <OSQPendAbort+0xdc>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_ABORT);
   14554:	01c00084 	movi	r7,2
   14558:	01800104 	movi	r6,4
   1455c:	000b883a 	mov	r5,zero
   14560:	e13ffd17 	ldw	r4,-12(fp)
   14564:	0010ac40 	call	10ac4 <OS_EventTaskRdy>
                     nbr_tasks++;
   14568:	e0bff803 	ldbu	r2,-32(fp)
   1456c:	10800044 	addi	r2,r2,1
   14570:	e0bff805 	stb	r2,-32(fp)
    OS_ENTER_CRITICAL();
    if (pevent->OSEventGrp != 0) {                         /* See if any task waiting on queue?        */
        nbr_tasks = 0;
        switch (opt) {
            case OS_PEND_OPT_BROADCAST:                    /* Do we need to abort ALL waiting tasks?   */
                 while (pevent->OSEventGrp != 0) {         /* Yes, ready ALL tasks waiting on queue    */
   14574:	e0bffd17 	ldw	r2,-12(fp)
   14578:	10800283 	ldbu	r2,10(r2)
   1457c:	10803fcc 	andi	r2,r2,255
   14580:	103ff41e 	bne	r2,zero,14554 <__alt_data_end+0xfffe4554>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_ABORT);
                     nbr_tasks++;
                 }
                 break;
   14584:	00000906 	br	145ac <OSQPendAbort+0x114>
               
            case OS_PEND_OPT_NONE:
            default:                                       /* No,  ready HPT       waiting on queue    */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_ABORT);
   14588:	01c00084 	movi	r7,2
   1458c:	01800104 	movi	r6,4
   14590:	000b883a 	mov	r5,zero
   14594:	e13ffd17 	ldw	r4,-12(fp)
   14598:	0010ac40 	call	10ac4 <OS_EventTaskRdy>
                 nbr_tasks++;
   1459c:	e0bff803 	ldbu	r2,-32(fp)
   145a0:	10800044 	addi	r2,r2,1
   145a4:	e0bff805 	stb	r2,-32(fp)
                 break;
   145a8:	0001883a 	nop
   145ac:	e0bff917 	ldw	r2,-28(fp)
   145b0:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   145b4:	e0bffa17 	ldw	r2,-24(fp)
   145b8:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        OS_Sched();                                        /* Find HPT ready to run                    */
   145bc:	00115100 	call	11510 <OS_Sched>
        *perr = OS_ERR_PEND_ABORT;
   145c0:	e0bfff17 	ldw	r2,-4(fp)
   145c4:	00c00384 	movi	r3,14
   145c8:	10c00005 	stb	r3,0(r2)
        return (nbr_tasks);
   145cc:	e0bff803 	ldbu	r2,-32(fp)
   145d0:	00000706 	br	145f0 <OSQPendAbort+0x158>
   145d4:	e0bff917 	ldw	r2,-28(fp)
   145d8:	e0bffb15 	stw	r2,-20(fp)
   145dc:	e0bffb17 	ldw	r2,-20(fp)
   145e0:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   145e4:	e0bfff17 	ldw	r2,-4(fp)
   145e8:	10000005 	stb	zero,0(r2)
    return (0);                                            /* No tasks waiting on queue                */
   145ec:	0005883a 	mov	r2,zero
}
   145f0:	e037883a 	mov	sp,fp
   145f4:	dfc00117 	ldw	ra,4(sp)
   145f8:	df000017 	ldw	fp,0(sp)
   145fc:	dec00204 	addi	sp,sp,8
   14600:	f800283a 	ret

00014604 <OSQPost>:
*********************************************************************************************************
*/

#if OS_Q_POST_EN > 0
INT8U  OSQPost (OS_EVENT *pevent, void *pmsg)
{
   14604:	defff604 	addi	sp,sp,-40
   14608:	dfc00915 	stw	ra,36(sp)
   1460c:	df000815 	stw	fp,32(sp)
   14610:	df000804 	addi	fp,sp,32
   14614:	e13ffe15 	stw	r4,-8(fp)
   14618:	e17fff15 	stw	r5,-4(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
   1461c:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                     /* Validate 'pevent'                            */
   14620:	e0bffe17 	ldw	r2,-8(fp)
   14624:	1000021e 	bne	r2,zero,14630 <OSQPost+0x2c>
        return (OS_ERR_PEVENT_NULL);
   14628:	00800104 	movi	r2,4
   1462c:	00004a06 	br	14758 <OSQPost+0x154>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {      /* Validate event block type                    */
   14630:	e0bffe17 	ldw	r2,-8(fp)
   14634:	10800003 	ldbu	r2,0(r2)
   14638:	10803fcc 	andi	r2,r2,255
   1463c:	108000a0 	cmpeqi	r2,r2,2
   14640:	1000021e 	bne	r2,zero,1464c <OSQPost+0x48>
        return (OS_ERR_EVENT_TYPE);
   14644:	00800044 	movi	r2,1
   14648:	00004306 	br	14758 <OSQPost+0x154>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1464c:	0005303a 	rdctl	r2,status
   14650:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   14654:	e0fffd17 	ldw	r3,-12(fp)
   14658:	00bfff84 	movi	r2,-2
   1465c:	1884703a 	and	r2,r3,r2
   14660:	1001703a 	wrctl	status,r2
  
  return context;
   14664:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
   14668:	e0bff815 	stw	r2,-32(fp)
    if (pevent->OSEventGrp != 0) {                     /* See if any task pending on queue             */
   1466c:	e0bffe17 	ldw	r2,-8(fp)
   14670:	10800283 	ldbu	r2,10(r2)
   14674:	10803fcc 	andi	r2,r2,255
   14678:	10000c26 	beq	r2,zero,146ac <OSQPost+0xa8>
                                                       /* Ready highest priority task waiting on event */
        (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
   1467c:	000f883a 	mov	r7,zero
   14680:	01800104 	movi	r6,4
   14684:	e17fff17 	ldw	r5,-4(fp)
   14688:	e13ffe17 	ldw	r4,-8(fp)
   1468c:	0010ac40 	call	10ac4 <OS_EventTaskRdy>
   14690:	e0bff817 	ldw	r2,-32(fp)
   14694:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   14698:	e0bff917 	ldw	r2,-28(fp)
   1469c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                    /* Find highest priority task ready to run      */
   146a0:	00115100 	call	11510 <OS_Sched>
        return (OS_ERR_NONE);
   146a4:	0005883a 	mov	r2,zero
   146a8:	00002b06 	br	14758 <OSQPost+0x154>
    }
    pq = (OS_Q *)pevent->OSEventPtr;                   /* Point to queue control block                 */
   146ac:	e0bffe17 	ldw	r2,-8(fp)
   146b0:	10800117 	ldw	r2,4(r2)
   146b4:	e0bffb15 	stw	r2,-20(fp)
    if (pq->OSQEntries >= pq->OSQSize) {               /* Make sure queue is not full                  */
   146b8:	e0bffb17 	ldw	r2,-20(fp)
   146bc:	10c0058b 	ldhu	r3,22(r2)
   146c0:	e0bffb17 	ldw	r2,-20(fp)
   146c4:	1080050b 	ldhu	r2,20(r2)
   146c8:	18ffffcc 	andi	r3,r3,65535
   146cc:	10bfffcc 	andi	r2,r2,65535
   146d0:	18800636 	bltu	r3,r2,146ec <OSQPost+0xe8>
   146d4:	e0bff817 	ldw	r2,-32(fp)
   146d8:	e0bffa15 	stw	r2,-24(fp)
   146dc:	e0bffa17 	ldw	r2,-24(fp)
   146e0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_Q_FULL);
   146e4:	00800784 	movi	r2,30
   146e8:	00001b06 	br	14758 <OSQPost+0x154>
    }
    *pq->OSQIn++ = pmsg;                               /* Insert message into queue                    */
   146ec:	e0bffb17 	ldw	r2,-20(fp)
   146f0:	10800317 	ldw	r2,12(r2)
   146f4:	11000104 	addi	r4,r2,4
   146f8:	e0fffb17 	ldw	r3,-20(fp)
   146fc:	19000315 	stw	r4,12(r3)
   14700:	e0ffff17 	ldw	r3,-4(fp)
   14704:	10c00015 	stw	r3,0(r2)
    pq->OSQEntries++;                                  /* Update the nbr of entries in the queue       */
   14708:	e0bffb17 	ldw	r2,-20(fp)
   1470c:	1080058b 	ldhu	r2,22(r2)
   14710:	10800044 	addi	r2,r2,1
   14714:	1007883a 	mov	r3,r2
   14718:	e0bffb17 	ldw	r2,-20(fp)
   1471c:	10c0058d 	sth	r3,22(r2)
    if (pq->OSQIn == pq->OSQEnd) {                     /* Wrap IN ptr if we are at end of queue        */
   14720:	e0bffb17 	ldw	r2,-20(fp)
   14724:	10c00317 	ldw	r3,12(r2)
   14728:	e0bffb17 	ldw	r2,-20(fp)
   1472c:	10800217 	ldw	r2,8(r2)
   14730:	1880041e 	bne	r3,r2,14744 <OSQPost+0x140>
        pq->OSQIn = pq->OSQStart;
   14734:	e0bffb17 	ldw	r2,-20(fp)
   14738:	10c00117 	ldw	r3,4(r2)
   1473c:	e0bffb17 	ldw	r2,-20(fp)
   14740:	10c00315 	stw	r3,12(r2)
   14744:	e0bff817 	ldw	r2,-32(fp)
   14748:	e0bffc15 	stw	r2,-16(fp)
   1474c:	e0bffc17 	ldw	r2,-16(fp)
   14750:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
   14754:	0005883a 	mov	r2,zero
}
   14758:	e037883a 	mov	sp,fp
   1475c:	dfc00117 	ldw	ra,4(sp)
   14760:	df000017 	ldw	fp,0(sp)
   14764:	dec00204 	addi	sp,sp,8
   14768:	f800283a 	ret

0001476c <OSQPostFront>:
*********************************************************************************************************
*/

#if OS_Q_POST_FRONT_EN > 0
INT8U  OSQPostFront (OS_EVENT *pevent, void *pmsg)
{
   1476c:	defff604 	addi	sp,sp,-40
   14770:	dfc00915 	stw	ra,36(sp)
   14774:	df000815 	stw	fp,32(sp)
   14778:	df000804 	addi	fp,sp,32
   1477c:	e13ffe15 	stw	r4,-8(fp)
   14780:	e17fff15 	stw	r5,-4(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   14784:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
   14788:	e0bffe17 	ldw	r2,-8(fp)
   1478c:	1000021e 	bne	r2,zero,14798 <OSQPostFront+0x2c>
        return (OS_ERR_PEVENT_NULL);
   14790:	00800104 	movi	r2,4
   14794:	00004c06 	br	148c8 <OSQPostFront+0x15c>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {     /* Validate event block type                     */
   14798:	e0bffe17 	ldw	r2,-8(fp)
   1479c:	10800003 	ldbu	r2,0(r2)
   147a0:	10803fcc 	andi	r2,r2,255
   147a4:	108000a0 	cmpeqi	r2,r2,2
   147a8:	1000021e 	bne	r2,zero,147b4 <OSQPostFront+0x48>
        return (OS_ERR_EVENT_TYPE);
   147ac:	00800044 	movi	r2,1
   147b0:	00004506 	br	148c8 <OSQPostFront+0x15c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   147b4:	0005303a 	rdctl	r2,status
   147b8:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   147bc:	e0fffd17 	ldw	r3,-12(fp)
   147c0:	00bfff84 	movi	r2,-2
   147c4:	1884703a 	and	r2,r3,r2
   147c8:	1001703a 	wrctl	status,r2
  
  return context;
   147cc:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
   147d0:	e0bff815 	stw	r2,-32(fp)
    if (pevent->OSEventGrp != 0) {                    /* See if any task pending on queue              */
   147d4:	e0bffe17 	ldw	r2,-8(fp)
   147d8:	10800283 	ldbu	r2,10(r2)
   147dc:	10803fcc 	andi	r2,r2,255
   147e0:	10000c26 	beq	r2,zero,14814 <OSQPostFront+0xa8>
                                                      /* Ready highest priority task waiting on event  */
        (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
   147e4:	000f883a 	mov	r7,zero
   147e8:	01800104 	movi	r6,4
   147ec:	e17fff17 	ldw	r5,-4(fp)
   147f0:	e13ffe17 	ldw	r4,-8(fp)
   147f4:	0010ac40 	call	10ac4 <OS_EventTaskRdy>
   147f8:	e0bff817 	ldw	r2,-32(fp)
   147fc:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   14800:	e0bff917 	ldw	r2,-28(fp)
   14804:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                   /* Find highest priority task ready to run       */
   14808:	00115100 	call	11510 <OS_Sched>
        return (OS_ERR_NONE);
   1480c:	0005883a 	mov	r2,zero
   14810:	00002d06 	br	148c8 <OSQPostFront+0x15c>
    }
    pq = (OS_Q *)pevent->OSEventPtr;                  /* Point to queue control block                  */
   14814:	e0bffe17 	ldw	r2,-8(fp)
   14818:	10800117 	ldw	r2,4(r2)
   1481c:	e0bffb15 	stw	r2,-20(fp)
    if (pq->OSQEntries >= pq->OSQSize) {              /* Make sure queue is not full                   */
   14820:	e0bffb17 	ldw	r2,-20(fp)
   14824:	10c0058b 	ldhu	r3,22(r2)
   14828:	e0bffb17 	ldw	r2,-20(fp)
   1482c:	1080050b 	ldhu	r2,20(r2)
   14830:	18ffffcc 	andi	r3,r3,65535
   14834:	10bfffcc 	andi	r2,r2,65535
   14838:	18800636 	bltu	r3,r2,14854 <OSQPostFront+0xe8>
   1483c:	e0bff817 	ldw	r2,-32(fp)
   14840:	e0bffa15 	stw	r2,-24(fp)
   14844:	e0bffa17 	ldw	r2,-24(fp)
   14848:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_Q_FULL);
   1484c:	00800784 	movi	r2,30
   14850:	00001d06 	br	148c8 <OSQPostFront+0x15c>
    }
    if (pq->OSQOut == pq->OSQStart) {                 /* Wrap OUT ptr if we are at the 1st queue entry */
   14854:	e0bffb17 	ldw	r2,-20(fp)
   14858:	10c00417 	ldw	r3,16(r2)
   1485c:	e0bffb17 	ldw	r2,-20(fp)
   14860:	10800117 	ldw	r2,4(r2)
   14864:	1880041e 	bne	r3,r2,14878 <OSQPostFront+0x10c>
        pq->OSQOut = pq->OSQEnd;
   14868:	e0bffb17 	ldw	r2,-20(fp)
   1486c:	10c00217 	ldw	r3,8(r2)
   14870:	e0bffb17 	ldw	r2,-20(fp)
   14874:	10c00415 	stw	r3,16(r2)
    }
    pq->OSQOut--;
   14878:	e0bffb17 	ldw	r2,-20(fp)
   1487c:	10800417 	ldw	r2,16(r2)
   14880:	10ffff04 	addi	r3,r2,-4
   14884:	e0bffb17 	ldw	r2,-20(fp)
   14888:	10c00415 	stw	r3,16(r2)
    *pq->OSQOut = pmsg;                               /* Insert message into queue                     */
   1488c:	e0bffb17 	ldw	r2,-20(fp)
   14890:	10800417 	ldw	r2,16(r2)
   14894:	e0ffff17 	ldw	r3,-4(fp)
   14898:	10c00015 	stw	r3,0(r2)
    pq->OSQEntries++;                                 /* Update the nbr of entries in the queue        */
   1489c:	e0bffb17 	ldw	r2,-20(fp)
   148a0:	1080058b 	ldhu	r2,22(r2)
   148a4:	10800044 	addi	r2,r2,1
   148a8:	1007883a 	mov	r3,r2
   148ac:	e0bffb17 	ldw	r2,-20(fp)
   148b0:	10c0058d 	sth	r3,22(r2)
   148b4:	e0bff817 	ldw	r2,-32(fp)
   148b8:	e0bffc15 	stw	r2,-16(fp)
   148bc:	e0bffc17 	ldw	r2,-16(fp)
   148c0:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
   148c4:	0005883a 	mov	r2,zero
}
   148c8:	e037883a 	mov	sp,fp
   148cc:	dfc00117 	ldw	ra,4(sp)
   148d0:	df000017 	ldw	fp,0(sp)
   148d4:	dec00204 	addi	sp,sp,8
   148d8:	f800283a 	ret

000148dc <OSQPostOpt>:
*********************************************************************************************************
*/

#if OS_Q_POST_OPT_EN > 0
INT8U  OSQPostOpt (OS_EVENT *pevent, void *pmsg, INT8U opt)
{
   148dc:	defff504 	addi	sp,sp,-44
   148e0:	dfc00a15 	stw	ra,40(sp)
   148e4:	df000915 	stw	fp,36(sp)
   148e8:	df000904 	addi	fp,sp,36
   148ec:	e13ffd15 	stw	r4,-12(fp)
   148f0:	e17ffe15 	stw	r5,-8(fp)
   148f4:	3005883a 	mov	r2,r6
   148f8:	e0bfff05 	stb	r2,-4(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   148fc:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
   14900:	e0bffd17 	ldw	r2,-12(fp)
   14904:	1000021e 	bne	r2,zero,14910 <OSQPostOpt+0x34>
        return (OS_ERR_PEVENT_NULL);
   14908:	00800104 	movi	r2,4
   1490c:	00007106 	br	14ad4 <OSQPostOpt+0x1f8>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {     /* Validate event block type                     */
   14910:	e0bffd17 	ldw	r2,-12(fp)
   14914:	10800003 	ldbu	r2,0(r2)
   14918:	10803fcc 	andi	r2,r2,255
   1491c:	108000a0 	cmpeqi	r2,r2,2
   14920:	1000021e 	bne	r2,zero,1492c <OSQPostOpt+0x50>
        return (OS_ERR_EVENT_TYPE);
   14924:	00800044 	movi	r2,1
   14928:	00006a06 	br	14ad4 <OSQPostOpt+0x1f8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1492c:	0005303a 	rdctl	r2,status
   14930:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   14934:	e0fffc17 	ldw	r3,-16(fp)
   14938:	00bfff84 	movi	r2,-2
   1493c:	1884703a 	and	r2,r3,r2
   14940:	1001703a 	wrctl	status,r2
  
  return context;
   14944:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
   14948:	e0bff715 	stw	r2,-36(fp)
    if (pevent->OSEventGrp != 0x00) {                 /* See if any task pending on queue              */
   1494c:	e0bffd17 	ldw	r2,-12(fp)
   14950:	10800283 	ldbu	r2,10(r2)
   14954:	10803fcc 	andi	r2,r2,255
   14958:	10001d26 	beq	r2,zero,149d0 <OSQPostOpt+0xf4>
        if ((opt & OS_POST_OPT_BROADCAST) != 0x00) {  /* Do we need to post msg to ALL waiting tasks ? */
   1495c:	e0bfff03 	ldbu	r2,-4(fp)
   14960:	1080004c 	andi	r2,r2,1
   14964:	10000b26 	beq	r2,zero,14994 <OSQPostOpt+0xb8>
            while (pevent->OSEventGrp != 0) {         /* Yes, Post to ALL tasks waiting on queue       */
   14968:	00000506 	br	14980 <OSQPostOpt+0xa4>
                (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
   1496c:	000f883a 	mov	r7,zero
   14970:	01800104 	movi	r6,4
   14974:	e17ffe17 	ldw	r5,-8(fp)
   14978:	e13ffd17 	ldw	r4,-12(fp)
   1497c:	0010ac40 	call	10ac4 <OS_EventTaskRdy>
        return (OS_ERR_EVENT_TYPE);
    }
    OS_ENTER_CRITICAL();
    if (pevent->OSEventGrp != 0x00) {                 /* See if any task pending on queue              */
        if ((opt & OS_POST_OPT_BROADCAST) != 0x00) {  /* Do we need to post msg to ALL waiting tasks ? */
            while (pevent->OSEventGrp != 0) {         /* Yes, Post to ALL tasks waiting on queue       */
   14980:	e0bffd17 	ldw	r2,-12(fp)
   14984:	10800283 	ldbu	r2,10(r2)
   14988:	10803fcc 	andi	r2,r2,255
   1498c:	103ff71e 	bne	r2,zero,1496c <__alt_data_end+0xfffe496c>
   14990:	00000506 	br	149a8 <OSQPostOpt+0xcc>
                (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
            }
        } else {                                      /* No,  Post to HPT waiting on queue             */
            (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
   14994:	000f883a 	mov	r7,zero
   14998:	01800104 	movi	r6,4
   1499c:	e17ffe17 	ldw	r5,-8(fp)
   149a0:	e13ffd17 	ldw	r4,-12(fp)
   149a4:	0010ac40 	call	10ac4 <OS_EventTaskRdy>
   149a8:	e0bff717 	ldw	r2,-36(fp)
   149ac:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   149b0:	e0bff817 	ldw	r2,-32(fp)
   149b4:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        if ((opt & OS_POST_OPT_NO_SCHED) == 0) {	  /* See if scheduler needs to be invoked          */
   149b8:	e0bfff03 	ldbu	r2,-4(fp)
   149bc:	1080010c 	andi	r2,r2,4
   149c0:	1000011e 	bne	r2,zero,149c8 <OSQPostOpt+0xec>
            OS_Sched();                               /* Find highest priority task ready to run       */
   149c4:	00115100 	call	11510 <OS_Sched>
        }
        return (OS_ERR_NONE);
   149c8:	0005883a 	mov	r2,zero
   149cc:	00004106 	br	14ad4 <OSQPostOpt+0x1f8>
    }
    pq = (OS_Q *)pevent->OSEventPtr;                  /* Point to queue control block                  */
   149d0:	e0bffd17 	ldw	r2,-12(fp)
   149d4:	10800117 	ldw	r2,4(r2)
   149d8:	e0bffa15 	stw	r2,-24(fp)
    if (pq->OSQEntries >= pq->OSQSize) {              /* Make sure queue is not full                   */
   149dc:	e0bffa17 	ldw	r2,-24(fp)
   149e0:	10c0058b 	ldhu	r3,22(r2)
   149e4:	e0bffa17 	ldw	r2,-24(fp)
   149e8:	1080050b 	ldhu	r2,20(r2)
   149ec:	18ffffcc 	andi	r3,r3,65535
   149f0:	10bfffcc 	andi	r2,r2,65535
   149f4:	18800636 	bltu	r3,r2,14a10 <OSQPostOpt+0x134>
   149f8:	e0bff717 	ldw	r2,-36(fp)
   149fc:	e0bff915 	stw	r2,-28(fp)
   14a00:	e0bff917 	ldw	r2,-28(fp)
   14a04:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_Q_FULL);
   14a08:	00800784 	movi	r2,30
   14a0c:	00003106 	br	14ad4 <OSQPostOpt+0x1f8>
    }
    if ((opt & OS_POST_OPT_FRONT) != 0x00) {          /* Do we post to the FRONT of the queue?         */
   14a10:	e0bfff03 	ldbu	r2,-4(fp)
   14a14:	1080008c 	andi	r2,r2,2
   14a18:	10001326 	beq	r2,zero,14a68 <OSQPostOpt+0x18c>
        if (pq->OSQOut == pq->OSQStart) {             /* Yes, Post as LIFO, Wrap OUT pointer if we ... */
   14a1c:	e0bffa17 	ldw	r2,-24(fp)
   14a20:	10c00417 	ldw	r3,16(r2)
   14a24:	e0bffa17 	ldw	r2,-24(fp)
   14a28:	10800117 	ldw	r2,4(r2)
   14a2c:	1880041e 	bne	r3,r2,14a40 <OSQPostOpt+0x164>
            pq->OSQOut = pq->OSQEnd;                  /*      ... are at the 1st queue entry           */
   14a30:	e0bffa17 	ldw	r2,-24(fp)
   14a34:	10c00217 	ldw	r3,8(r2)
   14a38:	e0bffa17 	ldw	r2,-24(fp)
   14a3c:	10c00415 	stw	r3,16(r2)
        }
        pq->OSQOut--;
   14a40:	e0bffa17 	ldw	r2,-24(fp)
   14a44:	10800417 	ldw	r2,16(r2)
   14a48:	10ffff04 	addi	r3,r2,-4
   14a4c:	e0bffa17 	ldw	r2,-24(fp)
   14a50:	10c00415 	stw	r3,16(r2)
        *pq->OSQOut = pmsg;                           /*      Insert message into queue                */
   14a54:	e0bffa17 	ldw	r2,-24(fp)
   14a58:	10800417 	ldw	r2,16(r2)
   14a5c:	e0fffe17 	ldw	r3,-8(fp)
   14a60:	10c00015 	stw	r3,0(r2)
   14a64:	00001006 	br	14aa8 <OSQPostOpt+0x1cc>
    } else {                                          /* No,  Post as FIFO                             */
        *pq->OSQIn++ = pmsg;                          /*      Insert message into queue                */
   14a68:	e0bffa17 	ldw	r2,-24(fp)
   14a6c:	10800317 	ldw	r2,12(r2)
   14a70:	11000104 	addi	r4,r2,4
   14a74:	e0fffa17 	ldw	r3,-24(fp)
   14a78:	19000315 	stw	r4,12(r3)
   14a7c:	e0fffe17 	ldw	r3,-8(fp)
   14a80:	10c00015 	stw	r3,0(r2)
        if (pq->OSQIn == pq->OSQEnd) {                /*      Wrap IN ptr if we are at end of queue    */
   14a84:	e0bffa17 	ldw	r2,-24(fp)
   14a88:	10c00317 	ldw	r3,12(r2)
   14a8c:	e0bffa17 	ldw	r2,-24(fp)
   14a90:	10800217 	ldw	r2,8(r2)
   14a94:	1880041e 	bne	r3,r2,14aa8 <OSQPostOpt+0x1cc>
            pq->OSQIn = pq->OSQStart;
   14a98:	e0bffa17 	ldw	r2,-24(fp)
   14a9c:	10c00117 	ldw	r3,4(r2)
   14aa0:	e0bffa17 	ldw	r2,-24(fp)
   14aa4:	10c00315 	stw	r3,12(r2)
        }
    }
    pq->OSQEntries++;                                 /* Update the nbr of entries in the queue        */
   14aa8:	e0bffa17 	ldw	r2,-24(fp)
   14aac:	1080058b 	ldhu	r2,22(r2)
   14ab0:	10800044 	addi	r2,r2,1
   14ab4:	1007883a 	mov	r3,r2
   14ab8:	e0bffa17 	ldw	r2,-24(fp)
   14abc:	10c0058d 	sth	r3,22(r2)
   14ac0:	e0bff717 	ldw	r2,-36(fp)
   14ac4:	e0bffb15 	stw	r2,-20(fp)
   14ac8:	e0bffb17 	ldw	r2,-20(fp)
   14acc:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
   14ad0:	0005883a 	mov	r2,zero
}
   14ad4:	e037883a 	mov	sp,fp
   14ad8:	dfc00117 	ldw	ra,4(sp)
   14adc:	df000017 	ldw	fp,0(sp)
   14ae0:	dec00204 	addi	sp,sp,8
   14ae4:	f800283a 	ret

00014ae8 <OSQQuery>:
*********************************************************************************************************
*/

#if OS_Q_QUERY_EN > 0
INT8U  OSQQuery (OS_EVENT *pevent, OS_Q_DATA *p_q_data)
{
   14ae8:	defff604 	addi	sp,sp,-40
   14aec:	df000915 	stw	fp,36(sp)
   14af0:	df000904 	addi	fp,sp,36
   14af4:	e13ffe15 	stw	r4,-8(fp)
   14af8:	e17fff15 	stw	r5,-4(fp)
#else
    INT16U    *psrc;
    INT16U    *pdest;
#endif
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
   14afc:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                     /* Validate 'pevent'                            */
   14b00:	e0bffe17 	ldw	r2,-8(fp)
   14b04:	1000021e 	bne	r2,zero,14b10 <OSQQuery+0x28>
        return (OS_ERR_PEVENT_NULL);
   14b08:	00800104 	movi	r2,4
   14b0c:	00004906 	br	14c34 <OSQQuery+0x14c>
    }
    if (p_q_data == (OS_Q_DATA *)0) {                  /* Validate 'p_q_data'                          */
   14b10:	e0bfff17 	ldw	r2,-4(fp)
   14b14:	1000021e 	bne	r2,zero,14b20 <OSQQuery+0x38>
        return (OS_ERR_PDATA_NULL);
   14b18:	00800244 	movi	r2,9
   14b1c:	00004506 	br	14c34 <OSQQuery+0x14c>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {      /* Validate event block type                    */
   14b20:	e0bffe17 	ldw	r2,-8(fp)
   14b24:	10800003 	ldbu	r2,0(r2)
   14b28:	10803fcc 	andi	r2,r2,255
   14b2c:	108000a0 	cmpeqi	r2,r2,2
   14b30:	1000021e 	bne	r2,zero,14b3c <OSQQuery+0x54>
        return (OS_ERR_EVENT_TYPE);
   14b34:	00800044 	movi	r2,1
   14b38:	00003e06 	br	14c34 <OSQQuery+0x14c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   14b3c:	0005303a 	rdctl	r2,status
   14b40:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   14b44:	e0fffd17 	ldw	r3,-12(fp)
   14b48:	00bfff84 	movi	r2,-2
   14b4c:	1884703a 	and	r2,r3,r2
   14b50:	1001703a 	wrctl	status,r2
  
  return context;
   14b54:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
   14b58:	e0bffa15 	stw	r2,-24(fp)
    p_q_data->OSEventGrp = pevent->OSEventGrp;         /* Copy message queue wait list                 */
   14b5c:	e0bffe17 	ldw	r2,-8(fp)
   14b60:	10c00283 	ldbu	r3,10(r2)
   14b64:	e0bfff17 	ldw	r2,-4(fp)
   14b68:	10c002c5 	stb	r3,11(r2)
    psrc                 = &pevent->OSEventTbl[0];
   14b6c:	e0bffe17 	ldw	r2,-8(fp)
   14b70:	108002c4 	addi	r2,r2,11
   14b74:	e0bff815 	stw	r2,-32(fp)
    pdest                = &p_q_data->OSEventTbl[0];
   14b78:	e0bfff17 	ldw	r2,-4(fp)
   14b7c:	10800204 	addi	r2,r2,8
   14b80:	e0bff915 	stw	r2,-28(fp)
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
   14b84:	e03ff705 	stb	zero,-36(fp)
   14b88:	00000b06 	br	14bb8 <OSQQuery+0xd0>
        *pdest++ = *psrc++;
   14b8c:	e0bff917 	ldw	r2,-28(fp)
   14b90:	10c00044 	addi	r3,r2,1
   14b94:	e0fff915 	stw	r3,-28(fp)
   14b98:	e0fff817 	ldw	r3,-32(fp)
   14b9c:	19000044 	addi	r4,r3,1
   14ba0:	e13ff815 	stw	r4,-32(fp)
   14ba4:	18c00003 	ldbu	r3,0(r3)
   14ba8:	10c00005 	stb	r3,0(r2)
    }
    OS_ENTER_CRITICAL();
    p_q_data->OSEventGrp = pevent->OSEventGrp;         /* Copy message queue wait list                 */
    psrc                 = &pevent->OSEventTbl[0];
    pdest                = &p_q_data->OSEventTbl[0];
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
   14bac:	e0bff703 	ldbu	r2,-36(fp)
   14bb0:	10800044 	addi	r2,r2,1
   14bb4:	e0bff705 	stb	r2,-36(fp)
   14bb8:	e0bff703 	ldbu	r2,-36(fp)
   14bbc:	108000f0 	cmpltui	r2,r2,3
   14bc0:	103ff21e 	bne	r2,zero,14b8c <__alt_data_end+0xfffe4b8c>
        *pdest++ = *psrc++;
    }
    pq = (OS_Q *)pevent->OSEventPtr;
   14bc4:	e0bffe17 	ldw	r2,-8(fp)
   14bc8:	10800117 	ldw	r2,4(r2)
   14bcc:	e0bffc15 	stw	r2,-16(fp)
    if (pq->OSQEntries > 0) {
   14bd0:	e0bffc17 	ldw	r2,-16(fp)
   14bd4:	1080058b 	ldhu	r2,22(r2)
   14bd8:	10bfffcc 	andi	r2,r2,65535
   14bdc:	10000626 	beq	r2,zero,14bf8 <OSQQuery+0x110>
        p_q_data->OSMsg = *pq->OSQOut;                 /* Get next message to return if available      */
   14be0:	e0bffc17 	ldw	r2,-16(fp)
   14be4:	10800417 	ldw	r2,16(r2)
   14be8:	10c00017 	ldw	r3,0(r2)
   14bec:	e0bfff17 	ldw	r2,-4(fp)
   14bf0:	10c00015 	stw	r3,0(r2)
   14bf4:	00000206 	br	14c00 <OSQQuery+0x118>
    } else {
        p_q_data->OSMsg = (void *)0;
   14bf8:	e0bfff17 	ldw	r2,-4(fp)
   14bfc:	10000015 	stw	zero,0(r2)
    }
    p_q_data->OSNMsgs = pq->OSQEntries;
   14c00:	e0bffc17 	ldw	r2,-16(fp)
   14c04:	10c0058b 	ldhu	r3,22(r2)
   14c08:	e0bfff17 	ldw	r2,-4(fp)
   14c0c:	10c0010d 	sth	r3,4(r2)
    p_q_data->OSQSize = pq->OSQSize;
   14c10:	e0bffc17 	ldw	r2,-16(fp)
   14c14:	10c0050b 	ldhu	r3,20(r2)
   14c18:	e0bfff17 	ldw	r2,-4(fp)
   14c1c:	10c0018d 	sth	r3,6(r2)
   14c20:	e0bffa17 	ldw	r2,-24(fp)
   14c24:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   14c28:	e0bffb17 	ldw	r2,-20(fp)
   14c2c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
   14c30:	0005883a 	mov	r2,zero
}
   14c34:	e037883a 	mov	sp,fp
   14c38:	df000017 	ldw	fp,0(sp)
   14c3c:	dec00104 	addi	sp,sp,4
   14c40:	f800283a 	ret

00014c44 <OS_QInit>:
* Note(s)    : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

void  OS_QInit (void)
{
   14c44:	defffb04 	addi	sp,sp,-20
   14c48:	dfc00415 	stw	ra,16(sp)
   14c4c:	df000315 	stw	fp,12(sp)
   14c50:	df000304 	addi	fp,sp,12
    OS_Q   *pq1;
    OS_Q   *pq2;



    OS_MemClr((INT8U *)&OSQTbl[0], sizeof(OSQTbl));  /* Clear the queue table                          */
   14c54:	01407804 	movi	r5,480
   14c58:	010000b4 	movhi	r4,2
   14c5c:	2102a804 	addi	r4,r4,2720
   14c60:	00114540 	call	11454 <OS_MemClr>
    pq1 = &OSQTbl[0];
   14c64:	008000b4 	movhi	r2,2
   14c68:	1082a804 	addi	r2,r2,2720
   14c6c:	e0bffe15 	stw	r2,-8(fp)
    pq2 = &OSQTbl[1];
   14c70:	008000b4 	movhi	r2,2
   14c74:	1082ae04 	addi	r2,r2,2744
   14c78:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < (OS_MAX_QS - 1); i++) {          /* Init. list of free QUEUE control blocks        */
   14c7c:	e03ffd0d 	sth	zero,-12(fp)
   14c80:	00000c06 	br	14cb4 <OS_QInit+0x70>
        pq1->OSQPtr = pq2;
   14c84:	e0bffe17 	ldw	r2,-8(fp)
   14c88:	e0ffff17 	ldw	r3,-4(fp)
   14c8c:	10c00015 	stw	r3,0(r2)
        pq1++;
   14c90:	e0bffe17 	ldw	r2,-8(fp)
   14c94:	10800604 	addi	r2,r2,24
   14c98:	e0bffe15 	stw	r2,-8(fp)
        pq2++;
   14c9c:	e0bfff17 	ldw	r2,-4(fp)
   14ca0:	10800604 	addi	r2,r2,24
   14ca4:	e0bfff15 	stw	r2,-4(fp)


    OS_MemClr((INT8U *)&OSQTbl[0], sizeof(OSQTbl));  /* Clear the queue table                          */
    pq1 = &OSQTbl[0];
    pq2 = &OSQTbl[1];
    for (i = 0; i < (OS_MAX_QS - 1); i++) {          /* Init. list of free QUEUE control blocks        */
   14ca8:	e0bffd0b 	ldhu	r2,-12(fp)
   14cac:	10800044 	addi	r2,r2,1
   14cb0:	e0bffd0d 	sth	r2,-12(fp)
   14cb4:	e0bffd0b 	ldhu	r2,-12(fp)
   14cb8:	108004f0 	cmpltui	r2,r2,19
   14cbc:	103ff11e 	bne	r2,zero,14c84 <__alt_data_end+0xfffe4c84>
        pq1->OSQPtr = pq2;
        pq1++;
        pq2++;
    }
    pq1->OSQPtr = (OS_Q *)0;
   14cc0:	e0bffe17 	ldw	r2,-8(fp)
   14cc4:	10000015 	stw	zero,0(r2)
    OSQFreeList = &OSQTbl[0];
   14cc8:	008000b4 	movhi	r2,2
   14ccc:	1082a804 	addi	r2,r2,2720
   14cd0:	d0a72f15 	stw	r2,-25412(gp)
#endif
}
   14cd4:	0001883a 	nop
   14cd8:	e037883a 	mov	sp,fp
   14cdc:	dfc00117 	ldw	ra,4(sp)
   14ce0:	df000017 	ldw	fp,0(sp)
   14ce4:	dec00204 	addi	sp,sp,8
   14ce8:	f800283a 	ret

00014cec <OSSemAccept>:
*********************************************************************************************************
*/

#if OS_SEM_ACCEPT_EN > 0
INT16U  OSSemAccept (OS_EVENT *pevent)
{
   14cec:	defffa04 	addi	sp,sp,-24
   14cf0:	df000515 	stw	fp,20(sp)
   14cf4:	df000504 	addi	fp,sp,20
   14cf8:	e13fff15 	stw	r4,-4(fp)
    INT16U     cnt;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   14cfc:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
   14d00:	e0bfff17 	ldw	r2,-4(fp)
   14d04:	1000021e 	bne	r2,zero,14d10 <OSSemAccept+0x24>
        return (0);
   14d08:	0005883a 	mov	r2,zero
   14d0c:	00001f06 	br	14d8c <OSSemAccept+0xa0>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
   14d10:	e0bfff17 	ldw	r2,-4(fp)
   14d14:	10800003 	ldbu	r2,0(r2)
   14d18:	10803fcc 	andi	r2,r2,255
   14d1c:	108000e0 	cmpeqi	r2,r2,3
   14d20:	1000021e 	bne	r2,zero,14d2c <OSSemAccept+0x40>
        return (0);
   14d24:	0005883a 	mov	r2,zero
   14d28:	00001806 	br	14d8c <OSSemAccept+0xa0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   14d2c:	0005303a 	rdctl	r2,status
   14d30:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   14d34:	e0fffe17 	ldw	r3,-8(fp)
   14d38:	00bfff84 	movi	r2,-2
   14d3c:	1884703a 	and	r2,r3,r2
   14d40:	1001703a 	wrctl	status,r2
  
  return context;
   14d44:	e0bffe17 	ldw	r2,-8(fp)
    }
    OS_ENTER_CRITICAL();
   14d48:	e0bffb15 	stw	r2,-20(fp)
    cnt = pevent->OSEventCnt;
   14d4c:	e0bfff17 	ldw	r2,-4(fp)
   14d50:	1080020b 	ldhu	r2,8(r2)
   14d54:	e0bffd0d 	sth	r2,-12(fp)
    if (cnt > 0) {                                    /* See if resource is available                  */
   14d58:	e0bffd0b 	ldhu	r2,-12(fp)
   14d5c:	10000626 	beq	r2,zero,14d78 <OSSemAccept+0x8c>
        pevent->OSEventCnt--;                         /* Yes, decrement semaphore and notify caller    */
   14d60:	e0bfff17 	ldw	r2,-4(fp)
   14d64:	1080020b 	ldhu	r2,8(r2)
   14d68:	10bfffc4 	addi	r2,r2,-1
   14d6c:	1007883a 	mov	r3,r2
   14d70:	e0bfff17 	ldw	r2,-4(fp)
   14d74:	10c0020d 	sth	r3,8(r2)
   14d78:	e0bffb17 	ldw	r2,-20(fp)
   14d7c:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   14d80:	e0bffc17 	ldw	r2,-16(fp)
   14d84:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (cnt);                                     /* Return semaphore count                        */
   14d88:	e0bffd0b 	ldhu	r2,-12(fp)
}
   14d8c:	e037883a 	mov	sp,fp
   14d90:	df000017 	ldw	fp,0(sp)
   14d94:	dec00104 	addi	sp,sp,4
   14d98:	f800283a 	ret

00014d9c <OSSemCreate>:
*              == (void *)0  if no event control blocks were available
*********************************************************************************************************
*/

OS_EVENT  *OSSemCreate (INT16U cnt)
{
   14d9c:	defff904 	addi	sp,sp,-28
   14da0:	dfc00615 	stw	ra,24(sp)
   14da4:	df000515 	stw	fp,20(sp)
   14da8:	df000504 	addi	fp,sp,20
   14dac:	2005883a 	mov	r2,r4
   14db0:	e0bfff0d 	sth	r2,-4(fp)
    OS_EVENT  *pevent;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
   14db4:	e03ffb15 	stw	zero,-20(fp)
#endif



    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
   14db8:	d0a73203 	ldbu	r2,-25400(gp)
   14dbc:	10803fcc 	andi	r2,r2,255
   14dc0:	10000226 	beq	r2,zero,14dcc <OSSemCreate+0x30>
        return ((OS_EVENT *)0);                            /* ... can't CREATE from an ISR             */
   14dc4:	0005883a 	mov	r2,zero
   14dc8:	00002506 	br	14e60 <OSSemCreate+0xc4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   14dcc:	0005303a 	rdctl	r2,status
   14dd0:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   14dd4:	e0fffe17 	ldw	r3,-8(fp)
   14dd8:	00bfff84 	movi	r2,-2
   14ddc:	1884703a 	and	r2,r3,r2
   14de0:	1001703a 	wrctl	status,r2
  
  return context;
   14de4:	e0bffe17 	ldw	r2,-8(fp)
    }
    OS_ENTER_CRITICAL();
   14de8:	e0bffb15 	stw	r2,-20(fp)
    pevent = OSEventFreeList;                              /* Get next free event control block        */
   14dec:	d0a73117 	ldw	r2,-25404(gp)
   14df0:	e0bffd15 	stw	r2,-12(fp)
    if (OSEventFreeList != (OS_EVENT *)0) {                /* See if pool of free ECB pool was empty   */
   14df4:	d0a73117 	ldw	r2,-25404(gp)
   14df8:	10000326 	beq	r2,zero,14e08 <OSSemCreate+0x6c>
        OSEventFreeList = (OS_EVENT *)OSEventFreeList->OSEventPtr;
   14dfc:	d0a73117 	ldw	r2,-25404(gp)
   14e00:	10800117 	ldw	r2,4(r2)
   14e04:	d0a73115 	stw	r2,-25404(gp)
   14e08:	e0bffb17 	ldw	r2,-20(fp)
   14e0c:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   14e10:	e0bffc17 	ldw	r2,-16(fp)
   14e14:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    if (pevent != (OS_EVENT *)0) {                         /* Get an event control block               */
   14e18:	e0bffd17 	ldw	r2,-12(fp)
   14e1c:	10000f26 	beq	r2,zero,14e5c <OSSemCreate+0xc0>
        pevent->OSEventType    = OS_EVENT_TYPE_SEM;
   14e20:	e0bffd17 	ldw	r2,-12(fp)
   14e24:	00c000c4 	movi	r3,3
   14e28:	10c00005 	stb	r3,0(r2)
        pevent->OSEventCnt     = cnt;                      /* Set semaphore value                      */
   14e2c:	e0bffd17 	ldw	r2,-12(fp)
   14e30:	e0ffff0b 	ldhu	r3,-4(fp)
   14e34:	10c0020d 	sth	r3,8(r2)
        pevent->OSEventPtr     = (void *)0;                /* Unlink from ECB free list                */
   14e38:	e0bffd17 	ldw	r2,-12(fp)
   14e3c:	10000115 	stw	zero,4(r2)
#if OS_EVENT_NAME_SIZE > 1
        pevent->OSEventName[0] = '?';                      /* Unknown name                             */
   14e40:	e0bffd17 	ldw	r2,-12(fp)
   14e44:	00c00fc4 	movi	r3,63
   14e48:	10c00385 	stb	r3,14(r2)
        pevent->OSEventName[1] = OS_ASCII_NUL;
   14e4c:	e0bffd17 	ldw	r2,-12(fp)
   14e50:	100003c5 	stb	zero,15(r2)
#endif
        OS_EventWaitListInit(pevent);                      /* Initialize to 'nobody waiting' on sem.   */
   14e54:	e13ffd17 	ldw	r4,-12(fp)
   14e58:	00110740 	call	11074 <OS_EventWaitListInit>
    }
    return (pevent);
   14e5c:	e0bffd17 	ldw	r2,-12(fp)
}
   14e60:	e037883a 	mov	sp,fp
   14e64:	dfc00117 	ldw	ra,4(sp)
   14e68:	df000017 	ldw	fp,0(sp)
   14e6c:	dec00204 	addi	sp,sp,8
   14e70:	f800283a 	ret

00014e74 <OSSemDel>:
*********************************************************************************************************
*/

#if OS_SEM_DEL_EN > 0
OS_EVENT  *OSSemDel (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
   14e74:	defff304 	addi	sp,sp,-52
   14e78:	dfc00c15 	stw	ra,48(sp)
   14e7c:	df000b15 	stw	fp,44(sp)
   14e80:	df000b04 	addi	fp,sp,44
   14e84:	e13ffd15 	stw	r4,-12(fp)
   14e88:	2805883a 	mov	r2,r5
   14e8c:	e1bfff15 	stw	r6,-4(fp)
   14e90:	e0bffe05 	stb	r2,-8(fp)
    BOOLEAN    tasks_waiting;
    OS_EVENT  *pevent_return;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
   14e94:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
   14e98:	e0bfff17 	ldw	r2,-4(fp)
   14e9c:	1000021e 	bne	r2,zero,14ea8 <OSSemDel+0x34>
        return (pevent);
   14ea0:	e0bffd17 	ldw	r2,-12(fp)
   14ea4:	00007e06 	br	150a0 <OSSemDel+0x22c>
    }
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
   14ea8:	e0bffd17 	ldw	r2,-12(fp)
   14eac:	1000051e 	bne	r2,zero,14ec4 <OSSemDel+0x50>
        *perr = OS_ERR_PEVENT_NULL;
   14eb0:	e0bfff17 	ldw	r2,-4(fp)
   14eb4:	00c00104 	movi	r3,4
   14eb8:	10c00005 	stb	r3,0(r2)
        return (pevent);
   14ebc:	e0bffd17 	ldw	r2,-12(fp)
   14ec0:	00007706 	br	150a0 <OSSemDel+0x22c>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {        /* Validate event block type                */
   14ec4:	e0bffd17 	ldw	r2,-12(fp)
   14ec8:	10800003 	ldbu	r2,0(r2)
   14ecc:	10803fcc 	andi	r2,r2,255
   14ed0:	108000e0 	cmpeqi	r2,r2,3
   14ed4:	1000051e 	bne	r2,zero,14eec <OSSemDel+0x78>
        *perr = OS_ERR_EVENT_TYPE;
   14ed8:	e0bfff17 	ldw	r2,-4(fp)
   14edc:	00c00044 	movi	r3,1
   14ee0:	10c00005 	stb	r3,0(r2)
        return (pevent);
   14ee4:	e0bffd17 	ldw	r2,-12(fp)
   14ee8:	00006d06 	br	150a0 <OSSemDel+0x22c>
    }
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
   14eec:	d0a73203 	ldbu	r2,-25400(gp)
   14ef0:	10803fcc 	andi	r2,r2,255
   14ef4:	10000526 	beq	r2,zero,14f0c <OSSemDel+0x98>
        *perr = OS_ERR_DEL_ISR;                             /* ... can't DELETE from an ISR             */
   14ef8:	e0bfff17 	ldw	r2,-4(fp)
   14efc:	00c003c4 	movi	r3,15
   14f00:	10c00005 	stb	r3,0(r2)
        return (pevent);
   14f04:	e0bffd17 	ldw	r2,-12(fp)
   14f08:	00006506 	br	150a0 <OSSemDel+0x22c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   14f0c:	0005303a 	rdctl	r2,status
   14f10:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   14f14:	e0fffc17 	ldw	r3,-16(fp)
   14f18:	00bfff84 	movi	r2,-2
   14f1c:	1884703a 	and	r2,r3,r2
   14f20:	1001703a 	wrctl	status,r2
  
  return context;
   14f24:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
   14f28:	e0bff715 	stw	r2,-36(fp)
    if (pevent->OSEventGrp != 0) {                         /* See if any tasks waiting on semaphore    */
   14f2c:	e0bffd17 	ldw	r2,-12(fp)
   14f30:	10800283 	ldbu	r2,10(r2)
   14f34:	10803fcc 	andi	r2,r2,255
   14f38:	10000326 	beq	r2,zero,14f48 <OSSemDel+0xd4>
        tasks_waiting = OS_TRUE;                           /* Yes                                      */
   14f3c:	00800044 	movi	r2,1
   14f40:	e0bff505 	stb	r2,-44(fp)
   14f44:	00000106 	br	14f4c <OSSemDel+0xd8>
    } else {
        tasks_waiting = OS_FALSE;                          /* No                                       */
   14f48:	e03ff505 	stb	zero,-44(fp)
    }
    switch (opt) {
   14f4c:	e0bffe03 	ldbu	r2,-8(fp)
   14f50:	10000326 	beq	r2,zero,14f60 <OSSemDel+0xec>
   14f54:	10800060 	cmpeqi	r2,r2,1
   14f58:	1000281e 	bne	r2,zero,14ffc <OSSemDel+0x188>
   14f5c:	00004506 	br	15074 <OSSemDel+0x200>
        case OS_DEL_NO_PEND:                               /* Delete semaphore only if no task waiting */
             if (tasks_waiting == OS_FALSE) {
   14f60:	e0bff503 	ldbu	r2,-44(fp)
   14f64:	1000161e 	bne	r2,zero,14fc0 <OSSemDel+0x14c>
#if OS_EVENT_NAME_SIZE > 1
                 pevent->OSEventName[0] = '?';             /* Unknown name                             */
   14f68:	e0bffd17 	ldw	r2,-12(fp)
   14f6c:	00c00fc4 	movi	r3,63
   14f70:	10c00385 	stb	r3,14(r2)
                 pevent->OSEventName[1] = OS_ASCII_NUL;
   14f74:	e0bffd17 	ldw	r2,-12(fp)
   14f78:	100003c5 	stb	zero,15(r2)
#endif
                 pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
   14f7c:	e0bffd17 	ldw	r2,-12(fp)
   14f80:	10000005 	stb	zero,0(r2)
                 pevent->OSEventPtr     = OSEventFreeList; /* Return Event Control Block to free list  */
   14f84:	d0e73117 	ldw	r3,-25404(gp)
   14f88:	e0bffd17 	ldw	r2,-12(fp)
   14f8c:	10c00115 	stw	r3,4(r2)
                 pevent->OSEventCnt     = 0;
   14f90:	e0bffd17 	ldw	r2,-12(fp)
   14f94:	1000020d 	sth	zero,8(r2)
                 OSEventFreeList        = pevent;          /* Get next free event control block        */
   14f98:	e0bffd17 	ldw	r2,-12(fp)
   14f9c:	d0a73115 	stw	r2,-25404(gp)
   14fa0:	e0bff717 	ldw	r2,-36(fp)
   14fa4:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   14fa8:	e0bff817 	ldw	r2,-32(fp)
   14fac:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_NONE;
   14fb0:	e0bfff17 	ldw	r2,-4(fp)
   14fb4:	10000005 	stb	zero,0(r2)
                 pevent_return          = (OS_EVENT *)0;   /* Semaphore has been deleted               */
   14fb8:	e03ff615 	stw	zero,-40(fp)
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_TASK_WAITING;
                 pevent_return          = pevent;
             }
             break;
   14fbc:	00003706 	br	1509c <OSSemDel+0x228>
   14fc0:	e0bff717 	ldw	r2,-36(fp)
   14fc4:	e0bff915 	stw	r2,-28(fp)
   14fc8:	e0bff917 	ldw	r2,-28(fp)
   14fcc:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_NONE;
                 pevent_return          = (OS_EVENT *)0;   /* Semaphore has been deleted               */
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_TASK_WAITING;
   14fd0:	e0bfff17 	ldw	r2,-4(fp)
   14fd4:	00c01244 	movi	r3,73
   14fd8:	10c00005 	stb	r3,0(r2)
                 pevent_return          = pevent;
   14fdc:	e0bffd17 	ldw	r2,-12(fp)
   14fe0:	e0bff615 	stw	r2,-40(fp)
             }
             break;
   14fe4:	00002d06 	br	1509c <OSSemDel+0x228>

        case OS_DEL_ALWAYS:                                /* Always delete the semaphore              */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for semaphore    */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_OK);
   14fe8:	000f883a 	mov	r7,zero
   14fec:	01800044 	movi	r6,1
   14ff0:	000b883a 	mov	r5,zero
   14ff4:	e13ffd17 	ldw	r4,-12(fp)
   14ff8:	0010ac40 	call	10ac4 <OS_EventTaskRdy>
                 pevent_return          = pevent;
             }
             break;

        case OS_DEL_ALWAYS:                                /* Always delete the semaphore              */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for semaphore    */
   14ffc:	e0bffd17 	ldw	r2,-12(fp)
   15000:	10800283 	ldbu	r2,10(r2)
   15004:	10803fcc 	andi	r2,r2,255
   15008:	103ff71e 	bne	r2,zero,14fe8 <__alt_data_end+0xfffe4fe8>
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_OK);
             }
#if OS_EVENT_NAME_SIZE > 1
             pevent->OSEventName[0] = '?';                 /* Unknown name                             */
   1500c:	e0bffd17 	ldw	r2,-12(fp)
   15010:	00c00fc4 	movi	r3,63
   15014:	10c00385 	stb	r3,14(r2)
             pevent->OSEventName[1] = OS_ASCII_NUL;
   15018:	e0bffd17 	ldw	r2,-12(fp)
   1501c:	100003c5 	stb	zero,15(r2)
#endif
             pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
   15020:	e0bffd17 	ldw	r2,-12(fp)
   15024:	10000005 	stb	zero,0(r2)
             pevent->OSEventPtr     = OSEventFreeList;     /* Return Event Control Block to free list  */
   15028:	d0e73117 	ldw	r3,-25404(gp)
   1502c:	e0bffd17 	ldw	r2,-12(fp)
   15030:	10c00115 	stw	r3,4(r2)
             pevent->OSEventCnt     = 0;
   15034:	e0bffd17 	ldw	r2,-12(fp)
   15038:	1000020d 	sth	zero,8(r2)
             OSEventFreeList        = pevent;              /* Get next free event control block        */
   1503c:	e0bffd17 	ldw	r2,-12(fp)
   15040:	d0a73115 	stw	r2,-25404(gp)
   15044:	e0bff717 	ldw	r2,-36(fp)
   15048:	e0bffa15 	stw	r2,-24(fp)
   1504c:	e0bffa17 	ldw	r2,-24(fp)
   15050:	1001703a 	wrctl	status,r2
             OS_EXIT_CRITICAL();
             if (tasks_waiting == OS_TRUE) {               /* Reschedule only if task(s) were waiting  */
   15054:	e0bff503 	ldbu	r2,-44(fp)
   15058:	10800058 	cmpnei	r2,r2,1
   1505c:	1000011e 	bne	r2,zero,15064 <OSSemDel+0x1f0>
                 OS_Sched();                               /* Find highest priority task ready to run  */
   15060:	00115100 	call	11510 <OS_Sched>
             }
             *perr                  = OS_ERR_NONE;
   15064:	e0bfff17 	ldw	r2,-4(fp)
   15068:	10000005 	stb	zero,0(r2)
             pevent_return          = (OS_EVENT *)0;       /* Semaphore has been deleted               */
   1506c:	e03ff615 	stw	zero,-40(fp)
             break;
   15070:	00000a06 	br	1509c <OSSemDel+0x228>
   15074:	e0bff717 	ldw	r2,-36(fp)
   15078:	e0bffb15 	stw	r2,-20(fp)
   1507c:	e0bffb17 	ldw	r2,-20(fp)
   15080:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();
             *perr                  = OS_ERR_INVALID_OPT;
   15084:	e0bfff17 	ldw	r2,-4(fp)
   15088:	00c001c4 	movi	r3,7
   1508c:	10c00005 	stb	r3,0(r2)
             pevent_return          = pevent;
   15090:	e0bffd17 	ldw	r2,-12(fp)
   15094:	e0bff615 	stw	r2,-40(fp)
             break;
   15098:	0001883a 	nop
    }
    return (pevent_return);
   1509c:	e0bff617 	ldw	r2,-40(fp)
}
   150a0:	e037883a 	mov	sp,fp
   150a4:	dfc00117 	ldw	ra,4(sp)
   150a8:	df000017 	ldw	fp,0(sp)
   150ac:	dec00204 	addi	sp,sp,8
   150b0:	f800283a 	ret

000150b4 <OSSemPend>:
* Returns    : none
*********************************************************************************************************
*/
/*$PAGE*/
void  OSSemPend (OS_EVENT *pevent, INT16U timeout, INT8U *perr)
{
   150b4:	defff504 	addi	sp,sp,-44
   150b8:	dfc00a15 	stw	ra,40(sp)
   150bc:	df000915 	stw	fp,36(sp)
   150c0:	df000904 	addi	fp,sp,36
   150c4:	e13ffd15 	stw	r4,-12(fp)
   150c8:	2805883a 	mov	r2,r5
   150cc:	e1bfff15 	stw	r6,-4(fp)
   150d0:	e0bffe0d 	sth	r2,-8(fp)
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   150d4:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
   150d8:	e0bfff17 	ldw	r2,-4(fp)
   150dc:	10007226 	beq	r2,zero,152a8 <OSSemPend+0x1f4>
        return;
    }
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
   150e0:	e0bffd17 	ldw	r2,-12(fp)
   150e4:	1000041e 	bne	r2,zero,150f8 <OSSemPend+0x44>
        *perr = OS_ERR_PEVENT_NULL;
   150e8:	e0bfff17 	ldw	r2,-4(fp)
   150ec:	00c00104 	movi	r3,4
   150f0:	10c00005 	stb	r3,0(r2)
        return;
   150f4:	00006d06 	br	152ac <OSSemPend+0x1f8>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
   150f8:	e0bffd17 	ldw	r2,-12(fp)
   150fc:	10800003 	ldbu	r2,0(r2)
   15100:	10803fcc 	andi	r2,r2,255
   15104:	108000e0 	cmpeqi	r2,r2,3
   15108:	1000041e 	bne	r2,zero,1511c <OSSemPend+0x68>
        *perr = OS_ERR_EVENT_TYPE;
   1510c:	e0bfff17 	ldw	r2,-4(fp)
   15110:	00c00044 	movi	r3,1
   15114:	10c00005 	stb	r3,0(r2)
        return;
   15118:	00006406 	br	152ac <OSSemPend+0x1f8>
    }
    if (OSIntNesting > 0) {                           /* See if called from ISR ...                    */
   1511c:	d0a73203 	ldbu	r2,-25400(gp)
   15120:	10803fcc 	andi	r2,r2,255
   15124:	10000426 	beq	r2,zero,15138 <OSSemPend+0x84>
        *perr = OS_ERR_PEND_ISR;                      /* ... can't PEND from an ISR                    */
   15128:	e0bfff17 	ldw	r2,-4(fp)
   1512c:	00c00084 	movi	r3,2
   15130:	10c00005 	stb	r3,0(r2)
        return;
   15134:	00005d06 	br	152ac <OSSemPend+0x1f8>
    }
    if (OSLockNesting > 0) {                          /* See if called with scheduler locked ...       */
   15138:	d0a72403 	ldbu	r2,-25456(gp)
   1513c:	10803fcc 	andi	r2,r2,255
   15140:	10000426 	beq	r2,zero,15154 <OSSemPend+0xa0>
        *perr = OS_ERR_PEND_LOCKED;                   /* ... can't PEND when locked                    */
   15144:	e0bfff17 	ldw	r2,-4(fp)
   15148:	00c00344 	movi	r3,13
   1514c:	10c00005 	stb	r3,0(r2)
        return;
   15150:	00005606 	br	152ac <OSSemPend+0x1f8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   15154:	0005303a 	rdctl	r2,status
   15158:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1515c:	e0fffc17 	ldw	r3,-16(fp)
   15160:	00bfff84 	movi	r2,-2
   15164:	1884703a 	and	r2,r3,r2
   15168:	1001703a 	wrctl	status,r2
  
  return context;
   1516c:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
   15170:	e0bff715 	stw	r2,-36(fp)
    if (pevent->OSEventCnt > 0) {                     /* If sem. is positive, resource available ...   */
   15174:	e0bffd17 	ldw	r2,-12(fp)
   15178:	1080020b 	ldhu	r2,8(r2)
   1517c:	10bfffcc 	andi	r2,r2,65535
   15180:	10000d26 	beq	r2,zero,151b8 <OSSemPend+0x104>
        pevent->OSEventCnt--;                         /* ... decrement semaphore only if positive.     */
   15184:	e0bffd17 	ldw	r2,-12(fp)
   15188:	1080020b 	ldhu	r2,8(r2)
   1518c:	10bfffc4 	addi	r2,r2,-1
   15190:	1007883a 	mov	r3,r2
   15194:	e0bffd17 	ldw	r2,-12(fp)
   15198:	10c0020d 	sth	r3,8(r2)
   1519c:	e0bff717 	ldw	r2,-36(fp)
   151a0:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   151a4:	e0bff817 	ldw	r2,-32(fp)
   151a8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_NONE;
   151ac:	e0bfff17 	ldw	r2,-4(fp)
   151b0:	10000005 	stb	zero,0(r2)
        return;
   151b4:	00003d06 	br	152ac <OSSemPend+0x1f8>
    }
                                                      /* Otherwise, must wait until event occurs       */
    OSTCBCur->OSTCBStat     |= OS_STAT_SEM;           /* Resource not available, pend on semaphore     */
   151b8:	d0a73317 	ldw	r2,-25396(gp)
   151bc:	d0e73317 	ldw	r3,-25396(gp)
   151c0:	18c00c03 	ldbu	r3,48(r3)
   151c4:	18c00054 	ori	r3,r3,1
   151c8:	10c00c05 	stb	r3,48(r2)
    OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
   151cc:	d0a73317 	ldw	r2,-25396(gp)
   151d0:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly       = timeout;               /* Store pend timeout in TCB                     */
   151d4:	d0a73317 	ldw	r2,-25396(gp)
   151d8:	e0fffe0b 	ldhu	r3,-8(fp)
   151dc:	10c00b8d 	sth	r3,46(r2)
    OS_EventTaskWait(pevent);                         /* Suspend task until event or timeout occurs    */
   151e0:	e13ffd17 	ldw	r4,-12(fp)
   151e4:	0010c5c0 	call	10c5c <OS_EventTaskWait>
   151e8:	e0bff717 	ldw	r2,-36(fp)
   151ec:	e0bffb15 	stw	r2,-20(fp)
   151f0:	e0bffb17 	ldw	r2,-20(fp)
   151f4:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OS_Sched();                                       /* Find next highest priority task ready         */
   151f8:	00115100 	call	11510 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   151fc:	0005303a 	rdctl	r2,status
   15200:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   15204:	e0fff917 	ldw	r3,-28(fp)
   15208:	00bfff84 	movi	r2,-2
   1520c:	1884703a 	and	r2,r3,r2
   15210:	1001703a 	wrctl	status,r2
  
  return context;
   15214:	e0bff917 	ldw	r2,-28(fp)
    OS_ENTER_CRITICAL();
   15218:	e0bff715 	stw	r2,-36(fp)
    switch (OSTCBCur->OSTCBStatPend) {                /* See if we timed-out or aborted                */
   1521c:	d0a73317 	ldw	r2,-25396(gp)
   15220:	10800c43 	ldbu	r2,49(r2)
   15224:	10803fcc 	andi	r2,r2,255
   15228:	10000326 	beq	r2,zero,15238 <OSSemPend+0x184>
   1522c:	108000a0 	cmpeqi	r2,r2,2
   15230:	1000041e 	bne	r2,zero,15244 <OSSemPend+0x190>
   15234:	00000706 	br	15254 <OSSemPend+0x1a0>
        case OS_STAT_PEND_OK:
             *perr = OS_ERR_NONE;
   15238:	e0bfff17 	ldw	r2,-4(fp)
   1523c:	10000005 	stb	zero,0(r2)
             break;
   15240:	00000c06 	br	15274 <OSSemPend+0x1c0>

        case OS_STAT_PEND_ABORT:
             *perr = OS_ERR_PEND_ABORT;               /* Indicate that we aborted                      */
   15244:	e0bfff17 	ldw	r2,-4(fp)
   15248:	00c00384 	movi	r3,14
   1524c:	10c00005 	stb	r3,0(r2)
             break;
   15250:	00000806 	br	15274 <OSSemPend+0x1c0>

        case OS_STAT_PEND_TO:
        default:        
             OS_EventTaskRemove(OSTCBCur, pevent);
   15254:	d0a73317 	ldw	r2,-25396(gp)
   15258:	e17ffd17 	ldw	r5,-12(fp)
   1525c:	1009883a 	mov	r4,r2
   15260:	0010ebc0 	call	10ebc <OS_EventTaskRemove>
             *perr = OS_ERR_TIMEOUT;                  /* Indicate that we didn't get event within TO   */
   15264:	e0bfff17 	ldw	r2,-4(fp)
   15268:	00c00284 	movi	r3,10
   1526c:	10c00005 	stb	r3,0(r2)
             break;
   15270:	0001883a 	nop
    }
    OSTCBCur->OSTCBStat          =  OS_STAT_RDY;      /* Set   task  status to ready                   */
   15274:	d0a73317 	ldw	r2,-25396(gp)
   15278:	10000c05 	stb	zero,48(r2)
    OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;  /* Clear pend  status                            */
   1527c:	d0a73317 	ldw	r2,-25396(gp)
   15280:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;    /* Clear event pointers                          */
   15284:	d0a73317 	ldw	r2,-25396(gp)
   15288:	10000715 	stw	zero,28(r2)
#if (OS_EVENT_MULTI_EN > 0)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
   1528c:	d0a73317 	ldw	r2,-25396(gp)
   15290:	10000815 	stw	zero,32(r2)
   15294:	e0bff717 	ldw	r2,-36(fp)
   15298:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1529c:	e0bffa17 	ldw	r2,-24(fp)
   152a0:	1001703a 	wrctl	status,r2
   152a4:	00000106 	br	152ac <OSSemPend+0x1f8>



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
        return;
   152a8:	0001883a 	nop
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;    /* Clear event pointers                          */
#if (OS_EVENT_MULTI_EN > 0)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
#endif
    OS_EXIT_CRITICAL();
}
   152ac:	e037883a 	mov	sp,fp
   152b0:	dfc00117 	ldw	ra,4(sp)
   152b4:	df000017 	ldw	fp,0(sp)
   152b8:	dec00204 	addi	sp,sp,8
   152bc:	f800283a 	ret

000152c0 <OSSemPendAbort>:
*********************************************************************************************************
*/

#if OS_SEM_PEND_ABORT_EN > 0
INT8U  OSSemPendAbort (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
   152c0:	defff604 	addi	sp,sp,-40
   152c4:	dfc00915 	stw	ra,36(sp)
   152c8:	df000815 	stw	fp,32(sp)
   152cc:	df000804 	addi	fp,sp,32
   152d0:	e13ffd15 	stw	r4,-12(fp)
   152d4:	2805883a 	mov	r2,r5
   152d8:	e1bfff15 	stw	r6,-4(fp)
   152dc:	e0bffe05 	stb	r2,-8(fp)
    INT8U      nbr_tasks;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   152e0:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
   152e4:	e0bfff17 	ldw	r2,-4(fp)
   152e8:	1000021e 	bne	r2,zero,152f4 <OSSemPendAbort+0x34>
        return (0);
   152ec:	0005883a 	mov	r2,zero
   152f0:	00004906 	br	15418 <OSSemPendAbort+0x158>
    }
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
   152f4:	e0bffd17 	ldw	r2,-12(fp)
   152f8:	1000051e 	bne	r2,zero,15310 <OSSemPendAbort+0x50>
        *perr = OS_ERR_PEVENT_NULL;
   152fc:	e0bfff17 	ldw	r2,-4(fp)
   15300:	00c00104 	movi	r3,4
   15304:	10c00005 	stb	r3,0(r2)
        return (0);
   15308:	0005883a 	mov	r2,zero
   1530c:	00004206 	br	15418 <OSSemPendAbort+0x158>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
   15310:	e0bffd17 	ldw	r2,-12(fp)
   15314:	10800003 	ldbu	r2,0(r2)
   15318:	10803fcc 	andi	r2,r2,255
   1531c:	108000e0 	cmpeqi	r2,r2,3
   15320:	1000051e 	bne	r2,zero,15338 <OSSemPendAbort+0x78>
        *perr = OS_ERR_EVENT_TYPE;
   15324:	e0bfff17 	ldw	r2,-4(fp)
   15328:	00c00044 	movi	r3,1
   1532c:	10c00005 	stb	r3,0(r2)
        return (0);
   15330:	0005883a 	mov	r2,zero
   15334:	00003806 	br	15418 <OSSemPendAbort+0x158>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   15338:	0005303a 	rdctl	r2,status
   1533c:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   15340:	e0fffc17 	ldw	r3,-16(fp)
   15344:	00bfff84 	movi	r2,-2
   15348:	1884703a 	and	r2,r3,r2
   1534c:	1001703a 	wrctl	status,r2
  
  return context;
   15350:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
   15354:	e0bff915 	stw	r2,-28(fp)
    if (pevent->OSEventGrp != 0) {                    /* See if any task waiting on semaphore?         */
   15358:	e0bffd17 	ldw	r2,-12(fp)
   1535c:	10800283 	ldbu	r2,10(r2)
   15360:	10803fcc 	andi	r2,r2,255
   15364:	10002526 	beq	r2,zero,153fc <OSSemPendAbort+0x13c>
        nbr_tasks = 0;
   15368:	e03ff805 	stb	zero,-32(fp)
        switch (opt) {
   1536c:	e0bffe03 	ldbu	r2,-8(fp)
   15370:	10800060 	cmpeqi	r2,r2,1
   15374:	10000e26 	beq	r2,zero,153b0 <OSSemPendAbort+0xf0>
            case OS_PEND_OPT_BROADCAST:               /* Do we need to abort ALL waiting tasks?        */
                 while (pevent->OSEventGrp != 0) {    /* Yes, ready ALL tasks waiting on semaphore     */
   15378:	00000806 	br	1539c <OSSemPendAbort+0xdc>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_ABORT);
   1537c:	01c00084 	movi	r7,2
   15380:	01800044 	movi	r6,1
   15384:	000b883a 	mov	r5,zero
   15388:	e13ffd17 	ldw	r4,-12(fp)
   1538c:	0010ac40 	call	10ac4 <OS_EventTaskRdy>
                     nbr_tasks++;
   15390:	e0bff803 	ldbu	r2,-32(fp)
   15394:	10800044 	addi	r2,r2,1
   15398:	e0bff805 	stb	r2,-32(fp)
    OS_ENTER_CRITICAL();
    if (pevent->OSEventGrp != 0) {                    /* See if any task waiting on semaphore?         */
        nbr_tasks = 0;
        switch (opt) {
            case OS_PEND_OPT_BROADCAST:               /* Do we need to abort ALL waiting tasks?        */
                 while (pevent->OSEventGrp != 0) {    /* Yes, ready ALL tasks waiting on semaphore     */
   1539c:	e0bffd17 	ldw	r2,-12(fp)
   153a0:	10800283 	ldbu	r2,10(r2)
   153a4:	10803fcc 	andi	r2,r2,255
   153a8:	103ff41e 	bne	r2,zero,1537c <__alt_data_end+0xfffe537c>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_ABORT);
                     nbr_tasks++;
                 }
                 break;
   153ac:	00000906 	br	153d4 <OSSemPendAbort+0x114>
                 
            case OS_PEND_OPT_NONE:
            default:                                  /* No,  ready HPT       waiting on semaphore     */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_ABORT);
   153b0:	01c00084 	movi	r7,2
   153b4:	01800044 	movi	r6,1
   153b8:	000b883a 	mov	r5,zero
   153bc:	e13ffd17 	ldw	r4,-12(fp)
   153c0:	0010ac40 	call	10ac4 <OS_EventTaskRdy>
                 nbr_tasks++;
   153c4:	e0bff803 	ldbu	r2,-32(fp)
   153c8:	10800044 	addi	r2,r2,1
   153cc:	e0bff805 	stb	r2,-32(fp)
                 break;
   153d0:	0001883a 	nop
   153d4:	e0bff917 	ldw	r2,-28(fp)
   153d8:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   153dc:	e0bffa17 	ldw	r2,-24(fp)
   153e0:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        OS_Sched();                                   /* Find HPT ready to run                         */
   153e4:	00115100 	call	11510 <OS_Sched>
        *perr = OS_ERR_PEND_ABORT;
   153e8:	e0bfff17 	ldw	r2,-4(fp)
   153ec:	00c00384 	movi	r3,14
   153f0:	10c00005 	stb	r3,0(r2)
        return (nbr_tasks);
   153f4:	e0bff803 	ldbu	r2,-32(fp)
   153f8:	00000706 	br	15418 <OSSemPendAbort+0x158>
   153fc:	e0bff917 	ldw	r2,-28(fp)
   15400:	e0bffb15 	stw	r2,-20(fp)
   15404:	e0bffb17 	ldw	r2,-20(fp)
   15408:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   1540c:	e0bfff17 	ldw	r2,-4(fp)
   15410:	10000005 	stb	zero,0(r2)
    return (0);                                       /* No tasks waiting on semaphore                 */
   15414:	0005883a 	mov	r2,zero
}
   15418:	e037883a 	mov	sp,fp
   1541c:	dfc00117 	ldw	ra,4(sp)
   15420:	df000017 	ldw	fp,0(sp)
   15424:	dec00204 	addi	sp,sp,8
   15428:	f800283a 	ret

0001542c <OSSemPost>:
*              OS_ERR_PEVENT_NULL  If 'pevent' is a NULL pointer.
*********************************************************************************************************
*/

INT8U  OSSemPost (OS_EVENT *pevent)
{
   1542c:	defff804 	addi	sp,sp,-32
   15430:	dfc00715 	stw	ra,28(sp)
   15434:	df000615 	stw	fp,24(sp)
   15438:	df000604 	addi	fp,sp,24
   1543c:	e13fff15 	stw	r4,-4(fp)
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   15440:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
   15444:	e0bfff17 	ldw	r2,-4(fp)
   15448:	1000021e 	bne	r2,zero,15454 <OSSemPost+0x28>
        return (OS_ERR_PEVENT_NULL);
   1544c:	00800104 	movi	r2,4
   15450:	00003506 	br	15528 <OSSemPost+0xfc>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
   15454:	e0bfff17 	ldw	r2,-4(fp)
   15458:	10800003 	ldbu	r2,0(r2)
   1545c:	10803fcc 	andi	r2,r2,255
   15460:	108000e0 	cmpeqi	r2,r2,3
   15464:	1000021e 	bne	r2,zero,15470 <OSSemPost+0x44>
        return (OS_ERR_EVENT_TYPE);
   15468:	00800044 	movi	r2,1
   1546c:	00002e06 	br	15528 <OSSemPost+0xfc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   15470:	0005303a 	rdctl	r2,status
   15474:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   15478:	e0fffe17 	ldw	r3,-8(fp)
   1547c:	00bfff84 	movi	r2,-2
   15480:	1884703a 	and	r2,r3,r2
   15484:	1001703a 	wrctl	status,r2
  
  return context;
   15488:	e0bffe17 	ldw	r2,-8(fp)
    }
    OS_ENTER_CRITICAL();
   1548c:	e0bffa15 	stw	r2,-24(fp)
    if (pevent->OSEventGrp != 0) {                    /* See if any task waiting for semaphore         */
   15490:	e0bfff17 	ldw	r2,-4(fp)
   15494:	10800283 	ldbu	r2,10(r2)
   15498:	10803fcc 	andi	r2,r2,255
   1549c:	10000c26 	beq	r2,zero,154d0 <OSSemPost+0xa4>
                                                      /* Ready HPT waiting on event                    */
        (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_OK);
   154a0:	000f883a 	mov	r7,zero
   154a4:	01800044 	movi	r6,1
   154a8:	000b883a 	mov	r5,zero
   154ac:	e13fff17 	ldw	r4,-4(fp)
   154b0:	0010ac40 	call	10ac4 <OS_EventTaskRdy>
   154b4:	e0bffa17 	ldw	r2,-24(fp)
   154b8:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   154bc:	e0bffb17 	ldw	r2,-20(fp)
   154c0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                   /* Find HPT ready to run                         */
   154c4:	00115100 	call	11510 <OS_Sched>
        return (OS_ERR_NONE);
   154c8:	0005883a 	mov	r2,zero
   154cc:	00001606 	br	15528 <OSSemPost+0xfc>
    }
    if (pevent->OSEventCnt < 65535u) {                /* Make sure semaphore will not overflow         */
   154d0:	e0bfff17 	ldw	r2,-4(fp)
   154d4:	1080020b 	ldhu	r2,8(r2)
   154d8:	10ffffcc 	andi	r3,r2,65535
   154dc:	00bfffd4 	movui	r2,65535
   154e0:	18800c26 	beq	r3,r2,15514 <OSSemPost+0xe8>
        pevent->OSEventCnt++;                         /* Increment semaphore count to register event   */
   154e4:	e0bfff17 	ldw	r2,-4(fp)
   154e8:	1080020b 	ldhu	r2,8(r2)
   154ec:	10800044 	addi	r2,r2,1
   154f0:	1007883a 	mov	r3,r2
   154f4:	e0bfff17 	ldw	r2,-4(fp)
   154f8:	10c0020d 	sth	r3,8(r2)
   154fc:	e0bffa17 	ldw	r2,-24(fp)
   15500:	e0bffc15 	stw	r2,-16(fp)
   15504:	e0bffc17 	ldw	r2,-16(fp)
   15508:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_NONE);
   1550c:	0005883a 	mov	r2,zero
   15510:	00000506 	br	15528 <OSSemPost+0xfc>
   15514:	e0bffa17 	ldw	r2,-24(fp)
   15518:	e0bffd15 	stw	r2,-12(fp)
   1551c:	e0bffd17 	ldw	r2,-12(fp)
   15520:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();                               /* Semaphore value has reached its maximum       */
    return (OS_ERR_SEM_OVF);
   15524:	00800c84 	movi	r2,50
}
   15528:	e037883a 	mov	sp,fp
   1552c:	dfc00117 	ldw	ra,4(sp)
   15530:	df000017 	ldw	fp,0(sp)
   15534:	dec00204 	addi	sp,sp,8
   15538:	f800283a 	ret

0001553c <OSSemQuery>:
*********************************************************************************************************
*/

#if OS_SEM_QUERY_EN > 0
INT8U  OSSemQuery (OS_EVENT *pevent, OS_SEM_DATA *p_sem_data)
{
   1553c:	defff704 	addi	sp,sp,-36
   15540:	df000815 	stw	fp,32(sp)
   15544:	df000804 	addi	fp,sp,32
   15548:	e13ffe15 	stw	r4,-8(fp)
   1554c:	e17fff15 	stw	r5,-4(fp)
    INT16U    *psrc;
    INT16U    *pdest;
#endif
    INT8U      i;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
   15550:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
   15554:	e0bffe17 	ldw	r2,-8(fp)
   15558:	1000021e 	bne	r2,zero,15564 <OSSemQuery+0x28>
        return (OS_ERR_PEVENT_NULL);
   1555c:	00800104 	movi	r2,4
   15560:	00003606 	br	1563c <OSSemQuery+0x100>
    }
    if (p_sem_data == (OS_SEM_DATA *)0) {                  /* Validate 'p_sem_data'                    */
   15564:	e0bfff17 	ldw	r2,-4(fp)
   15568:	1000021e 	bne	r2,zero,15574 <OSSemQuery+0x38>
        return (OS_ERR_PDATA_NULL);
   1556c:	00800244 	movi	r2,9
   15570:	00003206 	br	1563c <OSSemQuery+0x100>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {        /* Validate event block type                */
   15574:	e0bffe17 	ldw	r2,-8(fp)
   15578:	10800003 	ldbu	r2,0(r2)
   1557c:	10803fcc 	andi	r2,r2,255
   15580:	108000e0 	cmpeqi	r2,r2,3
   15584:	1000021e 	bne	r2,zero,15590 <OSSemQuery+0x54>
        return (OS_ERR_EVENT_TYPE);
   15588:	00800044 	movi	r2,1
   1558c:	00002b06 	br	1563c <OSSemQuery+0x100>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   15590:	0005303a 	rdctl	r2,status
   15594:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   15598:	e0fffd17 	ldw	r3,-12(fp)
   1559c:	00bfff84 	movi	r2,-2
   155a0:	1884703a 	and	r2,r3,r2
   155a4:	1001703a 	wrctl	status,r2
  
  return context;
   155a8:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
   155ac:	e0bffb15 	stw	r2,-20(fp)
    p_sem_data->OSEventGrp = pevent->OSEventGrp;           /* Copy message mailbox wait list           */
   155b0:	e0bffe17 	ldw	r2,-8(fp)
   155b4:	10c00283 	ldbu	r3,10(r2)
   155b8:	e0bfff17 	ldw	r2,-4(fp)
   155bc:	10c00145 	stb	r3,5(r2)
    psrc                   = &pevent->OSEventTbl[0];
   155c0:	e0bffe17 	ldw	r2,-8(fp)
   155c4:	108002c4 	addi	r2,r2,11
   155c8:	e0bff815 	stw	r2,-32(fp)
    pdest                  = &p_sem_data->OSEventTbl[0];
   155cc:	e0bfff17 	ldw	r2,-4(fp)
   155d0:	10800084 	addi	r2,r2,2
   155d4:	e0bff915 	stw	r2,-28(fp)
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
   155d8:	e03ffa05 	stb	zero,-24(fp)
   155dc:	00000b06 	br	1560c <OSSemQuery+0xd0>
        *pdest++ = *psrc++;
   155e0:	e0bff917 	ldw	r2,-28(fp)
   155e4:	10c00044 	addi	r3,r2,1
   155e8:	e0fff915 	stw	r3,-28(fp)
   155ec:	e0fff817 	ldw	r3,-32(fp)
   155f0:	19000044 	addi	r4,r3,1
   155f4:	e13ff815 	stw	r4,-32(fp)
   155f8:	18c00003 	ldbu	r3,0(r3)
   155fc:	10c00005 	stb	r3,0(r2)
    }
    OS_ENTER_CRITICAL();
    p_sem_data->OSEventGrp = pevent->OSEventGrp;           /* Copy message mailbox wait list           */
    psrc                   = &pevent->OSEventTbl[0];
    pdest                  = &p_sem_data->OSEventTbl[0];
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
   15600:	e0bffa03 	ldbu	r2,-24(fp)
   15604:	10800044 	addi	r2,r2,1
   15608:	e0bffa05 	stb	r2,-24(fp)
   1560c:	e0bffa03 	ldbu	r2,-24(fp)
   15610:	108000f0 	cmpltui	r2,r2,3
   15614:	103ff21e 	bne	r2,zero,155e0 <__alt_data_end+0xfffe55e0>
        *pdest++ = *psrc++;
    }
    p_sem_data->OSCnt = pevent->OSEventCnt;                /* Get semaphore count                      */
   15618:	e0bffe17 	ldw	r2,-8(fp)
   1561c:	10c0020b 	ldhu	r3,8(r2)
   15620:	e0bfff17 	ldw	r2,-4(fp)
   15624:	10c0000d 	sth	r3,0(r2)
   15628:	e0bffb17 	ldw	r2,-20(fp)
   1562c:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   15630:	e0bffc17 	ldw	r2,-16(fp)
   15634:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
   15638:	0005883a 	mov	r2,zero
}
   1563c:	e037883a 	mov	sp,fp
   15640:	df000017 	ldw	fp,0(sp)
   15644:	dec00104 	addi	sp,sp,4
   15648:	f800283a 	ret

0001564c <OSSemSet>:
*********************************************************************************************************
*/

#if OS_SEM_SET_EN > 0
void  OSSemSet (OS_EVENT *pevent, INT16U cnt, INT8U *perr)
{
   1564c:	defff904 	addi	sp,sp,-28
   15650:	df000615 	stw	fp,24(sp)
   15654:	df000604 	addi	fp,sp,24
   15658:	e13ffd15 	stw	r4,-12(fp)
   1565c:	2805883a 	mov	r2,r5
   15660:	e1bfff15 	stw	r6,-4(fp)
   15664:	e0bffe0d 	sth	r2,-8(fp)
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   15668:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
   1566c:	e0bfff17 	ldw	r2,-4(fp)
   15670:	10003126 	beq	r2,zero,15738 <OSSemSet+0xec>
        return;
    }
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
   15674:	e0bffd17 	ldw	r2,-12(fp)
   15678:	1000041e 	bne	r2,zero,1568c <OSSemSet+0x40>
        *perr = OS_ERR_PEVENT_NULL;
   1567c:	e0bfff17 	ldw	r2,-4(fp)
   15680:	00c00104 	movi	r3,4
   15684:	10c00005 	stb	r3,0(r2)
        return;
   15688:	00002c06 	br	1573c <OSSemSet+0xf0>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
   1568c:	e0bffd17 	ldw	r2,-12(fp)
   15690:	10800003 	ldbu	r2,0(r2)
   15694:	10803fcc 	andi	r2,r2,255
   15698:	108000e0 	cmpeqi	r2,r2,3
   1569c:	1000041e 	bne	r2,zero,156b0 <OSSemSet+0x64>
        *perr = OS_ERR_EVENT_TYPE;
   156a0:	e0bfff17 	ldw	r2,-4(fp)
   156a4:	00c00044 	movi	r3,1
   156a8:	10c00005 	stb	r3,0(r2)
        return;
   156ac:	00002306 	br	1573c <OSSemSet+0xf0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   156b0:	0005303a 	rdctl	r2,status
   156b4:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   156b8:	e0fffc17 	ldw	r3,-16(fp)
   156bc:	00bfff84 	movi	r2,-2
   156c0:	1884703a 	and	r2,r3,r2
   156c4:	1001703a 	wrctl	status,r2
  
  return context;
   156c8:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
   156cc:	e0bffa15 	stw	r2,-24(fp)
    *perr = OS_ERR_NONE;
   156d0:	e0bfff17 	ldw	r2,-4(fp)
   156d4:	10000005 	stb	zero,0(r2)
    if (pevent->OSEventCnt > 0) {                     /* See if semaphore already has a count          */
   156d8:	e0bffd17 	ldw	r2,-12(fp)
   156dc:	1080020b 	ldhu	r2,8(r2)
   156e0:	10bfffcc 	andi	r2,r2,65535
   156e4:	10000426 	beq	r2,zero,156f8 <OSSemSet+0xac>
        pevent->OSEventCnt = cnt;                     /* Yes, set it to the new value specified.       */
   156e8:	e0bffd17 	ldw	r2,-12(fp)
   156ec:	e0fffe0b 	ldhu	r3,-8(fp)
   156f0:	10c0020d 	sth	r3,8(r2)
   156f4:	00000b06 	br	15724 <OSSemSet+0xd8>
    } else {                                          /* No                                            */
        if (pevent->OSEventGrp == 0) {                /*      See if task(s) waiting?                  */
   156f8:	e0bffd17 	ldw	r2,-12(fp)
   156fc:	10800283 	ldbu	r2,10(r2)
   15700:	10803fcc 	andi	r2,r2,255
   15704:	1000041e 	bne	r2,zero,15718 <OSSemSet+0xcc>
            pevent->OSEventCnt = cnt;                 /*      No, OK to set the value                  */
   15708:	e0bffd17 	ldw	r2,-12(fp)
   1570c:	e0fffe0b 	ldhu	r3,-8(fp)
   15710:	10c0020d 	sth	r3,8(r2)
   15714:	00000306 	br	15724 <OSSemSet+0xd8>
        } else {
            *perr              = OS_ERR_TASK_WAITING;
   15718:	e0bfff17 	ldw	r2,-4(fp)
   1571c:	00c01244 	movi	r3,73
   15720:	10c00005 	stb	r3,0(r2)
   15724:	e0bffa17 	ldw	r2,-24(fp)
   15728:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1572c:	e0bffb17 	ldw	r2,-20(fp)
   15730:	1001703a 	wrctl	status,r2
   15734:	00000106 	br	1573c <OSSemSet+0xf0>



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
        return;
   15738:	0001883a 	nop
        } else {
            *perr              = OS_ERR_TASK_WAITING;
        }
    }
    OS_EXIT_CRITICAL();
}
   1573c:	e037883a 	mov	sp,fp
   15740:	df000017 	ldw	fp,0(sp)
   15744:	dec00104 	addi	sp,sp,4
   15748:	f800283a 	ret

0001574c <OSTaskChangePrio>:
*********************************************************************************************************
*/

#if OS_TASK_CHANGE_PRIO_EN > 0
INT8U  OSTaskChangePrio (INT8U oldprio, INT8U newprio)
{
   1574c:	defff104 	addi	sp,sp,-60
   15750:	dfc00e15 	stw	ra,56(sp)
   15754:	df000d15 	stw	fp,52(sp)
   15758:	df000d04 	addi	fp,sp,52
   1575c:	2007883a 	mov	r3,r4
   15760:	2805883a 	mov	r2,r5
   15764:	e0fffe05 	stb	r3,-8(fp)
   15768:	e0bfff05 	stb	r2,-4(fp)
    INT16U     bitx_new;
    INT16U     bity_old;
    INT16U     bitx_old;
#endif
#if OS_CRITICAL_METHOD == 3
    OS_CPU_SR  cpu_sr = 0;                                  /* Storage for CPU status register         */
   1576c:	e03ff515 	stw	zero,-44(fp)
#endif


/*$PAGE*/
#if OS_ARG_CHK_EN > 0
    if (oldprio >= OS_LOWEST_PRIO) {
   15770:	e0bffe03 	ldbu	r2,-8(fp)
   15774:	10800530 	cmpltui	r2,r2,20
   15778:	1000051e 	bne	r2,zero,15790 <OSTaskChangePrio+0x44>
        if (oldprio != OS_PRIO_SELF) {
   1577c:	e0bffe03 	ldbu	r2,-8(fp)
   15780:	10803fe0 	cmpeqi	r2,r2,255
   15784:	1000021e 	bne	r2,zero,15790 <OSTaskChangePrio+0x44>
            return (OS_ERR_PRIO_INVALID);
   15788:	00800a84 	movi	r2,42
   1578c:	00012606 	br	15c28 <OSTaskChangePrio+0x4dc>
        }
    }
    if (newprio >= OS_LOWEST_PRIO) {
   15790:	e0bfff03 	ldbu	r2,-4(fp)
   15794:	10800530 	cmpltui	r2,r2,20
   15798:	1000021e 	bne	r2,zero,157a4 <OSTaskChangePrio+0x58>
        return (OS_ERR_PRIO_INVALID);
   1579c:	00800a84 	movi	r2,42
   157a0:	00012106 	br	15c28 <OSTaskChangePrio+0x4dc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   157a4:	0005303a 	rdctl	r2,status
   157a8:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   157ac:	e0fffd17 	ldw	r3,-12(fp)
   157b0:	00bfff84 	movi	r2,-2
   157b4:	1884703a 	and	r2,r3,r2
   157b8:	1001703a 	wrctl	status,r2
  
  return context;
   157bc:	e0bffd17 	ldw	r2,-12(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   157c0:	e0bff515 	stw	r2,-44(fp)
    if (OSTCBPrioTbl[newprio] != (OS_TCB *)0) {             /* New priority must not already exist     */
   157c4:	e0ffff03 	ldbu	r3,-4(fp)
   157c8:	008000b4 	movhi	r2,2
   157cc:	10893404 	addi	r2,r2,9424
   157d0:	18c7883a 	add	r3,r3,r3
   157d4:	18c7883a 	add	r3,r3,r3
   157d8:	10c5883a 	add	r2,r2,r3
   157dc:	10800017 	ldw	r2,0(r2)
   157e0:	10000626 	beq	r2,zero,157fc <OSTaskChangePrio+0xb0>
   157e4:	e0bff517 	ldw	r2,-44(fp)
   157e8:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   157ec:	e0bff617 	ldw	r2,-40(fp)
   157f0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_PRIO_EXIST);
   157f4:	00800a04 	movi	r2,40
   157f8:	00010b06 	br	15c28 <OSTaskChangePrio+0x4dc>
    }
    if (oldprio == OS_PRIO_SELF) {                          /* See if changing self                    */
   157fc:	e0bffe03 	ldbu	r2,-8(fp)
   15800:	10803fd8 	cmpnei	r2,r2,255
   15804:	1000031e 	bne	r2,zero,15814 <OSTaskChangePrio+0xc8>
        oldprio = OSTCBCur->OSTCBPrio;                      /* Yes, get priority                       */
   15808:	d0a73317 	ldw	r2,-25396(gp)
   1580c:	10800c83 	ldbu	r2,50(r2)
   15810:	e0bffe05 	stb	r2,-8(fp)
    }
    ptcb = OSTCBPrioTbl[oldprio];
   15814:	e0fffe03 	ldbu	r3,-8(fp)
   15818:	008000b4 	movhi	r2,2
   1581c:	10893404 	addi	r2,r2,9424
   15820:	18c7883a 	add	r3,r3,r3
   15824:	18c7883a 	add	r3,r3,r3
   15828:	10c5883a 	add	r2,r2,r3
   1582c:	10800017 	ldw	r2,0(r2)
   15830:	e0bff815 	stw	r2,-32(fp)
    if (ptcb == (OS_TCB *)0) {                              /* Does task to change exist?              */
   15834:	e0bff817 	ldw	r2,-32(fp)
   15838:	1000061e 	bne	r2,zero,15854 <OSTaskChangePrio+0x108>
   1583c:	e0bff517 	ldw	r2,-44(fp)
   15840:	e0bff715 	stw	r2,-36(fp)
   15844:	e0bff717 	ldw	r2,-36(fp)
   15848:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                                 /* No, can't change its priority!          */
        return (OS_ERR_PRIO);
   1584c:	00800a44 	movi	r2,41
   15850:	0000f506 	br	15c28 <OSTaskChangePrio+0x4dc>
    }
    if (ptcb == OS_TCB_RESERVED) {                          /* Is task assigned to Mutex               */
   15854:	e0bff817 	ldw	r2,-32(fp)
   15858:	10800058 	cmpnei	r2,r2,1
   1585c:	1000061e 	bne	r2,zero,15878 <OSTaskChangePrio+0x12c>
   15860:	e0bff517 	ldw	r2,-44(fp)
   15864:	e0bff915 	stw	r2,-28(fp)
   15868:	e0bff917 	ldw	r2,-28(fp)
   1586c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                                 /* No, can't change its priority!          */
        return (OS_ERR_TASK_NOT_EXIST);
   15870:	008010c4 	movi	r2,67
   15874:	0000ec06 	br	15c28 <OSTaskChangePrio+0x4dc>
    }
#if OS_LOWEST_PRIO <= 63
    y_new                 = (INT8U)(newprio >> 3);          /* Yes, compute new TCB fields             */
   15878:	e0bfff03 	ldbu	r2,-4(fp)
   1587c:	1004d0fa 	srli	r2,r2,3
   15880:	e0bffb05 	stb	r2,-20(fp)
    x_new                 = (INT8U)(newprio & 0x07);
   15884:	e0bfff03 	ldbu	r2,-4(fp)
   15888:	108001cc 	andi	r2,r2,7
   1588c:	e0bffb45 	stb	r2,-19(fp)
    bity_new              = (INT8U)(1 << y_new);
   15890:	e0bffb03 	ldbu	r2,-20(fp)
   15894:	00c00044 	movi	r3,1
   15898:	1884983a 	sll	r2,r3,r2
   1589c:	e0bffb85 	stb	r2,-18(fp)
    bitx_new              = (INT8U)(1 << x_new);
   158a0:	e0bffb43 	ldbu	r2,-19(fp)
   158a4:	00c00044 	movi	r3,1
   158a8:	1884983a 	sll	r2,r3,r2
   158ac:	e0bffbc5 	stb	r2,-17(fp)
    x_new                 = (INT8U)( newprio & 0x0F);
    bity_new              = (INT16U)(1 << y_new);
    bitx_new              = (INT16U)(1 << x_new);
#endif

    OSTCBPrioTbl[oldprio] = (OS_TCB *)0;                    /* Remove TCB from old priority            */
   158b0:	e0fffe03 	ldbu	r3,-8(fp)
   158b4:	008000b4 	movhi	r2,2
   158b8:	10893404 	addi	r2,r2,9424
   158bc:	18c7883a 	add	r3,r3,r3
   158c0:	18c7883a 	add	r3,r3,r3
   158c4:	10c5883a 	add	r2,r2,r3
   158c8:	10000015 	stw	zero,0(r2)
    OSTCBPrioTbl[newprio] =  ptcb;                          /* Place pointer to TCB @ new priority     */
   158cc:	e0ffff03 	ldbu	r3,-4(fp)
   158d0:	008000b4 	movhi	r2,2
   158d4:	10893404 	addi	r2,r2,9424
   158d8:	18c7883a 	add	r3,r3,r3
   158dc:	18c7883a 	add	r3,r3,r3
   158e0:	10c5883a 	add	r2,r2,r3
   158e4:	e0fff817 	ldw	r3,-32(fp)
   158e8:	10c00015 	stw	r3,0(r2)
    y_old                 =  ptcb->OSTCBY;
   158ec:	e0bff817 	ldw	r2,-32(fp)
   158f0:	10800d03 	ldbu	r2,52(r2)
   158f4:	e0bffc05 	stb	r2,-16(fp)
    bity_old              =  ptcb->OSTCBBitY;
   158f8:	e0bff817 	ldw	r2,-32(fp)
   158fc:	10800d83 	ldbu	r2,54(r2)
   15900:	e0bffc45 	stb	r2,-15(fp)
    bitx_old              =  ptcb->OSTCBBitX;
   15904:	e0bff817 	ldw	r2,-32(fp)
   15908:	10800d43 	ldbu	r2,53(r2)
   1590c:	e0bffc85 	stb	r2,-14(fp)
    if ((OSRdyTbl[y_old] &   bitx_old) != 0) {              /* If task is ready make it not            */
   15910:	e0fffc03 	ldbu	r3,-16(fp)
   15914:	d0a73044 	addi	r2,gp,-25407
   15918:	1885883a 	add	r2,r3,r2
   1591c:	10c00003 	ldbu	r3,0(r2)
   15920:	e0bffc83 	ldbu	r2,-14(fp)
   15924:	1884703a 	and	r2,r3,r2
   15928:	10803fcc 	andi	r2,r2,255
   1592c:	10002826 	beq	r2,zero,159d0 <OSTaskChangePrio+0x284>
         OSRdyTbl[y_old] &= ~bitx_old;
   15930:	e0fffc03 	ldbu	r3,-16(fp)
   15934:	e13ffc03 	ldbu	r4,-16(fp)
   15938:	d0a73044 	addi	r2,gp,-25407
   1593c:	2085883a 	add	r2,r4,r2
   15940:	10800003 	ldbu	r2,0(r2)
   15944:	1009883a 	mov	r4,r2
   15948:	e0bffc83 	ldbu	r2,-14(fp)
   1594c:	0084303a 	nor	r2,zero,r2
   15950:	2084703a 	and	r2,r4,r2
   15954:	1009883a 	mov	r4,r2
   15958:	d0a73044 	addi	r2,gp,-25407
   1595c:	1885883a 	add	r2,r3,r2
   15960:	11000005 	stb	r4,0(r2)
         if (OSRdyTbl[y_old] == 0) {
   15964:	e0fffc03 	ldbu	r3,-16(fp)
   15968:	d0a73044 	addi	r2,gp,-25407
   1596c:	1885883a 	add	r2,r3,r2
   15970:	10800003 	ldbu	r2,0(r2)
   15974:	10803fcc 	andi	r2,r2,255
   15978:	1000061e 	bne	r2,zero,15994 <OSTaskChangePrio+0x248>
             OSRdyGrp &= ~bity_old;
   1597c:	e0bffc43 	ldbu	r2,-15(fp)
   15980:	0084303a 	nor	r2,zero,r2
   15984:	1007883a 	mov	r3,r2
   15988:	d0a73003 	ldbu	r2,-25408(gp)
   1598c:	1884703a 	and	r2,r3,r2
   15990:	d0a73005 	stb	r2,-25408(gp)
         }
         OSRdyGrp        |= bity_new;                       /* Make new priority ready to run          */
   15994:	d0e73003 	ldbu	r3,-25408(gp)
   15998:	e0bffb83 	ldbu	r2,-18(fp)
   1599c:	1884b03a 	or	r2,r3,r2
   159a0:	d0a73005 	stb	r2,-25408(gp)
         OSRdyTbl[y_new] |= bitx_new;
   159a4:	e0fffb03 	ldbu	r3,-20(fp)
   159a8:	e13ffb03 	ldbu	r4,-20(fp)
   159ac:	d0a73044 	addi	r2,gp,-25407
   159b0:	2085883a 	add	r2,r4,r2
   159b4:	11000003 	ldbu	r4,0(r2)
   159b8:	e0bffbc3 	ldbu	r2,-17(fp)
   159bc:	2084b03a 	or	r2,r4,r2
   159c0:	1009883a 	mov	r4,r2
   159c4:	d0a73044 	addi	r2,gp,-25407
   159c8:	1885883a 	add	r2,r3,r2
   159cc:	11000005 	stb	r4,0(r2)
    }

#if (OS_EVENT_EN)
    pevent = ptcb->OSTCBEventPtr;
   159d0:	e0bff817 	ldw	r2,-32(fp)
   159d4:	10800717 	ldw	r2,28(r2)
   159d8:	e0bff315 	stw	r2,-52(fp)
    if (pevent != (OS_EVENT *)0) {
   159dc:	e0bff317 	ldw	r2,-52(fp)
   159e0:	10003326 	beq	r2,zero,15ab0 <OSTaskChangePrio+0x364>
        pevent->OSEventTbl[y_old] &= ~bitx_old;             /* Remove old task prio from wait list     */
   159e4:	e0bffc03 	ldbu	r2,-16(fp)
   159e8:	e0fffc03 	ldbu	r3,-16(fp)
   159ec:	e13ff317 	ldw	r4,-52(fp)
   159f0:	20c7883a 	add	r3,r4,r3
   159f4:	18c002c4 	addi	r3,r3,11
   159f8:	18c00003 	ldbu	r3,0(r3)
   159fc:	1809883a 	mov	r4,r3
   15a00:	e0fffc83 	ldbu	r3,-14(fp)
   15a04:	00c6303a 	nor	r3,zero,r3
   15a08:	20c6703a 	and	r3,r4,r3
   15a0c:	1809883a 	mov	r4,r3
   15a10:	e0fff317 	ldw	r3,-52(fp)
   15a14:	1885883a 	add	r2,r3,r2
   15a18:	108002c4 	addi	r2,r2,11
   15a1c:	11000005 	stb	r4,0(r2)
        if (pevent->OSEventTbl[y_old] == 0) {
   15a20:	e0bffc03 	ldbu	r2,-16(fp)
   15a24:	e0fff317 	ldw	r3,-52(fp)
   15a28:	1885883a 	add	r2,r3,r2
   15a2c:	108002c4 	addi	r2,r2,11
   15a30:	10800003 	ldbu	r2,0(r2)
   15a34:	10803fcc 	andi	r2,r2,255
   15a38:	1000091e 	bne	r2,zero,15a60 <OSTaskChangePrio+0x314>
            pevent->OSEventGrp    &= ~bity_old;
   15a3c:	e0bff317 	ldw	r2,-52(fp)
   15a40:	10800283 	ldbu	r2,10(r2)
   15a44:	1007883a 	mov	r3,r2
   15a48:	e0bffc43 	ldbu	r2,-15(fp)
   15a4c:	0084303a 	nor	r2,zero,r2
   15a50:	1884703a 	and	r2,r3,r2
   15a54:	1007883a 	mov	r3,r2
   15a58:	e0bff317 	ldw	r2,-52(fp)
   15a5c:	10c00285 	stb	r3,10(r2)
        }
        pevent->OSEventGrp        |= bity_new;              /* Add    new task prio to   wait list     */
   15a60:	e0bff317 	ldw	r2,-52(fp)
   15a64:	10c00283 	ldbu	r3,10(r2)
   15a68:	e0bffb83 	ldbu	r2,-18(fp)
   15a6c:	1884b03a 	or	r2,r3,r2
   15a70:	1007883a 	mov	r3,r2
   15a74:	e0bff317 	ldw	r2,-52(fp)
   15a78:	10c00285 	stb	r3,10(r2)
        pevent->OSEventTbl[y_new] |= bitx_new;
   15a7c:	e0bffb03 	ldbu	r2,-20(fp)
   15a80:	e0fffb03 	ldbu	r3,-20(fp)
   15a84:	e13ff317 	ldw	r4,-52(fp)
   15a88:	20c7883a 	add	r3,r4,r3
   15a8c:	18c002c4 	addi	r3,r3,11
   15a90:	19000003 	ldbu	r4,0(r3)
   15a94:	e0fffbc3 	ldbu	r3,-17(fp)
   15a98:	20c6b03a 	or	r3,r4,r3
   15a9c:	1809883a 	mov	r4,r3
   15aa0:	e0fff317 	ldw	r3,-52(fp)
   15aa4:	1885883a 	add	r2,r3,r2
   15aa8:	108002c4 	addi	r2,r2,11
   15aac:	11000005 	stb	r4,0(r2)
    }
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {
   15ab0:	e0bff817 	ldw	r2,-32(fp)
   15ab4:	10800817 	ldw	r2,32(r2)
   15ab8:	10004226 	beq	r2,zero,15bc4 <OSTaskChangePrio+0x478>
        pevents =  ptcb->OSTCBEventMultiPtr;
   15abc:	e0bff817 	ldw	r2,-32(fp)
   15ac0:	10800817 	ldw	r2,32(r2)
   15ac4:	e0bff415 	stw	r2,-48(fp)
        pevent  = *pevents;
   15ac8:	e0bff417 	ldw	r2,-48(fp)
   15acc:	10800017 	ldw	r2,0(r2)
   15ad0:	e0bff315 	stw	r2,-52(fp)
        while (pevent != (OS_EVENT *)0) {
   15ad4:	00003906 	br	15bbc <OSTaskChangePrio+0x470>
            pevent->OSEventTbl[y_old] &= ~bitx_old;         /* Remove old task prio from wait lists    */
   15ad8:	e0bffc03 	ldbu	r2,-16(fp)
   15adc:	e0fffc03 	ldbu	r3,-16(fp)
   15ae0:	e13ff317 	ldw	r4,-52(fp)
   15ae4:	20c7883a 	add	r3,r4,r3
   15ae8:	18c002c4 	addi	r3,r3,11
   15aec:	18c00003 	ldbu	r3,0(r3)
   15af0:	1809883a 	mov	r4,r3
   15af4:	e0fffc83 	ldbu	r3,-14(fp)
   15af8:	00c6303a 	nor	r3,zero,r3
   15afc:	20c6703a 	and	r3,r4,r3
   15b00:	1809883a 	mov	r4,r3
   15b04:	e0fff317 	ldw	r3,-52(fp)
   15b08:	1885883a 	add	r2,r3,r2
   15b0c:	108002c4 	addi	r2,r2,11
   15b10:	11000005 	stb	r4,0(r2)
            if (pevent->OSEventTbl[y_old] == 0) {
   15b14:	e0bffc03 	ldbu	r2,-16(fp)
   15b18:	e0fff317 	ldw	r3,-52(fp)
   15b1c:	1885883a 	add	r2,r3,r2
   15b20:	108002c4 	addi	r2,r2,11
   15b24:	10800003 	ldbu	r2,0(r2)
   15b28:	10803fcc 	andi	r2,r2,255
   15b2c:	1000091e 	bne	r2,zero,15b54 <OSTaskChangePrio+0x408>
                pevent->OSEventGrp    &= ~bity_old;
   15b30:	e0bff317 	ldw	r2,-52(fp)
   15b34:	10800283 	ldbu	r2,10(r2)
   15b38:	1007883a 	mov	r3,r2
   15b3c:	e0bffc43 	ldbu	r2,-15(fp)
   15b40:	0084303a 	nor	r2,zero,r2
   15b44:	1884703a 	and	r2,r3,r2
   15b48:	1007883a 	mov	r3,r2
   15b4c:	e0bff317 	ldw	r2,-52(fp)
   15b50:	10c00285 	stb	r3,10(r2)
            }
            pevent->OSEventGrp        |= bity_new;          /* Add    new task prio to   wait lists    */
   15b54:	e0bff317 	ldw	r2,-52(fp)
   15b58:	10c00283 	ldbu	r3,10(r2)
   15b5c:	e0bffb83 	ldbu	r2,-18(fp)
   15b60:	1884b03a 	or	r2,r3,r2
   15b64:	1007883a 	mov	r3,r2
   15b68:	e0bff317 	ldw	r2,-52(fp)
   15b6c:	10c00285 	stb	r3,10(r2)
            pevent->OSEventTbl[y_new] |= bitx_new;
   15b70:	e0bffb03 	ldbu	r2,-20(fp)
   15b74:	e0fffb03 	ldbu	r3,-20(fp)
   15b78:	e13ff317 	ldw	r4,-52(fp)
   15b7c:	20c7883a 	add	r3,r4,r3
   15b80:	18c002c4 	addi	r3,r3,11
   15b84:	19000003 	ldbu	r4,0(r3)
   15b88:	e0fffbc3 	ldbu	r3,-17(fp)
   15b8c:	20c6b03a 	or	r3,r4,r3
   15b90:	1809883a 	mov	r4,r3
   15b94:	e0fff317 	ldw	r3,-52(fp)
   15b98:	1885883a 	add	r2,r3,r2
   15b9c:	108002c4 	addi	r2,r2,11
   15ba0:	11000005 	stb	r4,0(r2)
            pevents++;
   15ba4:	e0bff417 	ldw	r2,-48(fp)
   15ba8:	10800104 	addi	r2,r2,4
   15bac:	e0bff415 	stw	r2,-48(fp)
            pevent                     = *pevents;
   15bb0:	e0bff417 	ldw	r2,-48(fp)
   15bb4:	10800017 	ldw	r2,0(r2)
   15bb8:	e0bff315 	stw	r2,-52(fp)
    }
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {
        pevents =  ptcb->OSTCBEventMultiPtr;
        pevent  = *pevents;
        while (pevent != (OS_EVENT *)0) {
   15bbc:	e0bff317 	ldw	r2,-52(fp)
   15bc0:	103fc51e 	bne	r2,zero,15ad8 <__alt_data_end+0xfffe5ad8>
        }
    }
#endif
#endif

    ptcb->OSTCBPrio = newprio;                              /* Set new task priority                   */
   15bc4:	e0bff817 	ldw	r2,-32(fp)
   15bc8:	e0ffff03 	ldbu	r3,-4(fp)
   15bcc:	10c00c85 	stb	r3,50(r2)
    ptcb->OSTCBY    = y_new;
   15bd0:	e0bff817 	ldw	r2,-32(fp)
   15bd4:	e0fffb03 	ldbu	r3,-20(fp)
   15bd8:	10c00d05 	stb	r3,52(r2)
    ptcb->OSTCBX    = x_new;
   15bdc:	e0bff817 	ldw	r2,-32(fp)
   15be0:	e0fffb43 	ldbu	r3,-19(fp)
   15be4:	10c00cc5 	stb	r3,51(r2)
    ptcb->OSTCBBitY = bity_new;
   15be8:	e0bff817 	ldw	r2,-32(fp)
   15bec:	e0fffb83 	ldbu	r3,-18(fp)
   15bf0:	10c00d85 	stb	r3,54(r2)
    ptcb->OSTCBBitX = bitx_new;
   15bf4:	e0bff817 	ldw	r2,-32(fp)
   15bf8:	e0fffbc3 	ldbu	r3,-17(fp)
   15bfc:	10c00d45 	stb	r3,53(r2)
   15c00:	e0bff517 	ldw	r2,-44(fp)
   15c04:	e0bffa15 	stw	r2,-24(fp)
   15c08:	e0bffa17 	ldw	r2,-24(fp)
   15c0c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    if (OSRunning == OS_TRUE) {
   15c10:	d0a72443 	ldbu	r2,-25455(gp)
   15c14:	10803fcc 	andi	r2,r2,255
   15c18:	10800058 	cmpnei	r2,r2,1
   15c1c:	1000011e 	bne	r2,zero,15c24 <OSTaskChangePrio+0x4d8>
        OS_Sched();                                         /* Find new highest priority task          */
   15c20:	00115100 	call	11510 <OS_Sched>
    }
    return (OS_ERR_NONE);
   15c24:	0005883a 	mov	r2,zero
}
   15c28:	e037883a 	mov	sp,fp
   15c2c:	dfc00117 	ldw	ra,4(sp)
   15c30:	df000017 	ldw	fp,0(sp)
   15c34:	dec00204 	addi	sp,sp,8
   15c38:	f800283a 	ret

00015c3c <OSTaskCreate>:
*********************************************************************************************************
*/

#if OS_TASK_CREATE_EN > 0
INT8U  OSTaskCreate (void (*task)(void *p_arg), void *p_arg, OS_STK *ptos, INT8U prio)
{
   15c3c:	deffee04 	addi	sp,sp,-72
   15c40:	dfc01115 	stw	ra,68(sp)
   15c44:	df001015 	stw	fp,64(sp)
   15c48:	df001004 	addi	fp,sp,64
   15c4c:	e13ffc15 	stw	r4,-16(fp)
   15c50:	e17ffd15 	stw	r5,-12(fp)
   15c54:	e1bffe15 	stw	r6,-8(fp)
   15c58:	3805883a 	mov	r2,r7
   15c5c:	e0bfff05 	stb	r2,-4(fp)
    OS_STK    *psp;
    INT8U      err;
#if OS_CRITICAL_METHOD == 3                  /* Allocate storage for CPU status register               */
    OS_CPU_SR  cpu_sr = 0;
   15c60:	e03ff315 	stw	zero,-52(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {             /* Make sure priority is within allowable range           */
   15c64:	e0bfff03 	ldbu	r2,-4(fp)
   15c68:	10800570 	cmpltui	r2,r2,21
   15c6c:	1000021e 	bne	r2,zero,15c78 <OSTaskCreate+0x3c>
        return (OS_ERR_PRIO_INVALID);
   15c70:	00800a84 	movi	r2,42
   15c74:	00005706 	br	15dd4 <OSTaskCreate+0x198>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   15c78:	0005303a 	rdctl	r2,status
   15c7c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   15c80:	e0fffb17 	ldw	r3,-20(fp)
   15c84:	00bfff84 	movi	r2,-2
   15c88:	1884703a 	and	r2,r3,r2
   15c8c:	1001703a 	wrctl	status,r2
  
  return context;
   15c90:	e0bffb17 	ldw	r2,-20(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   15c94:	e0bff315 	stw	r2,-52(fp)
    if (OSIntNesting > 0) {                  /* Make sure we don't create the task from within an ISR  */
   15c98:	d0a73203 	ldbu	r2,-25400(gp)
   15c9c:	10803fcc 	andi	r2,r2,255
   15ca0:	10000626 	beq	r2,zero,15cbc <OSTaskCreate+0x80>
   15ca4:	e0bff317 	ldw	r2,-52(fp)
   15ca8:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   15cac:	e0bff417 	ldw	r2,-48(fp)
   15cb0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_CREATE_ISR);
   15cb4:	00800f04 	movi	r2,60
   15cb8:	00004606 	br	15dd4 <OSTaskCreate+0x198>
    }
    if (OSTCBPrioTbl[prio] == (OS_TCB *)0) { /* Make sure task doesn't already exist at this priority  */
   15cbc:	e0ffff03 	ldbu	r3,-4(fp)
   15cc0:	008000b4 	movhi	r2,2
   15cc4:	10893404 	addi	r2,r2,9424
   15cc8:	18c7883a 	add	r3,r3,r3
   15ccc:	18c7883a 	add	r3,r3,r3
   15cd0:	10c5883a 	add	r2,r2,r3
   15cd4:	10800017 	ldw	r2,0(r2)
   15cd8:	1000391e 	bne	r2,zero,15dc0 <OSTaskCreate+0x184>
        OSTCBPrioTbl[prio] = OS_TCB_RESERVED;/* Reserve the priority to prevent others from doing ...  */
   15cdc:	e0ffff03 	ldbu	r3,-4(fp)
   15ce0:	008000b4 	movhi	r2,2
   15ce4:	10893404 	addi	r2,r2,9424
   15ce8:	18c7883a 	add	r3,r3,r3
   15cec:	18c7883a 	add	r3,r3,r3
   15cf0:	10c5883a 	add	r2,r2,r3
   15cf4:	00c00044 	movi	r3,1
   15cf8:	10c00015 	stw	r3,0(r2)
   15cfc:	e0bff317 	ldw	r2,-52(fp)
   15d00:	e0bff515 	stw	r2,-44(fp)
   15d04:	e0bff517 	ldw	r2,-44(fp)
   15d08:	1001703a 	wrctl	status,r2
                                             /* ... the same thing until task is created.              */
        OS_EXIT_CRITICAL();
        psp = OSTaskStkInit(task, p_arg, ptos, 0);              /* Initialize the task's stack         */
   15d0c:	000f883a 	mov	r7,zero
   15d10:	e1bffe17 	ldw	r6,-8(fp)
   15d14:	e17ffd17 	ldw	r5,-12(fp)
   15d18:	e13ffc17 	ldw	r4,-16(fp)
   15d1c:	0018c400 	call	18c40 <OSTaskStkInit>
   15d20:	e0bff715 	stw	r2,-36(fp)
        err = OS_TCBInit(prio, psp, (OS_STK *)0, 0, 0, (void *)0, 0);
   15d24:	e0bfff03 	ldbu	r2,-4(fp)
   15d28:	d8000215 	stw	zero,8(sp)
   15d2c:	d8000115 	stw	zero,4(sp)
   15d30:	d8000015 	stw	zero,0(sp)
   15d34:	000f883a 	mov	r7,zero
   15d38:	000d883a 	mov	r6,zero
   15d3c:	e17ff717 	ldw	r5,-36(fp)
   15d40:	1009883a 	mov	r4,r2
   15d44:	00119100 	call	11910 <OS_TCBInit>
   15d48:	e0bff805 	stb	r2,-32(fp)
        if (err == OS_ERR_NONE) {
   15d4c:	e0bff803 	ldbu	r2,-32(fp)
   15d50:	1000061e 	bne	r2,zero,15d6c <OSTaskCreate+0x130>
            if (OSRunning == OS_TRUE) {      /* Find highest priority task if multitasking has started */
   15d54:	d0a72443 	ldbu	r2,-25455(gp)
   15d58:	10803fcc 	andi	r2,r2,255
   15d5c:	10800058 	cmpnei	r2,r2,1
   15d60:	1000151e 	bne	r2,zero,15db8 <OSTaskCreate+0x17c>
                OS_Sched();
   15d64:	00115100 	call	11510 <OS_Sched>
   15d68:	00001306 	br	15db8 <OSTaskCreate+0x17c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   15d6c:	0005303a 	rdctl	r2,status
   15d70:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   15d74:	e0fffa17 	ldw	r3,-24(fp)
   15d78:	00bfff84 	movi	r2,-2
   15d7c:	1884703a 	and	r2,r3,r2
   15d80:	1001703a 	wrctl	status,r2
  
  return context;
   15d84:	e0bffa17 	ldw	r2,-24(fp)
            }
        } else {
            OS_ENTER_CRITICAL();
   15d88:	e0bff315 	stw	r2,-52(fp)
            OSTCBPrioTbl[prio] = (OS_TCB *)0;/* Make this priority available to others                 */
   15d8c:	e0ffff03 	ldbu	r3,-4(fp)
   15d90:	008000b4 	movhi	r2,2
   15d94:	10893404 	addi	r2,r2,9424
   15d98:	18c7883a 	add	r3,r3,r3
   15d9c:	18c7883a 	add	r3,r3,r3
   15da0:	10c5883a 	add	r2,r2,r3
   15da4:	10000015 	stw	zero,0(r2)
   15da8:	e0bff317 	ldw	r2,-52(fp)
   15dac:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   15db0:	e0bff617 	ldw	r2,-40(fp)
   15db4:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
        }
        return (err);
   15db8:	e0bff803 	ldbu	r2,-32(fp)
   15dbc:	00000506 	br	15dd4 <OSTaskCreate+0x198>
   15dc0:	e0bff317 	ldw	r2,-52(fp)
   15dc4:	e0bff915 	stw	r2,-28(fp)
   15dc8:	e0bff917 	ldw	r2,-28(fp)
   15dcc:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_PRIO_EXIST);
   15dd0:	00800a04 	movi	r2,40
}
   15dd4:	e037883a 	mov	sp,fp
   15dd8:	dfc00117 	ldw	ra,4(sp)
   15ddc:	df000017 	ldw	fp,0(sp)
   15de0:	dec00204 	addi	sp,sp,8
   15de4:	f800283a 	ret

00015de8 <OSTaskCreateExt>:
                        INT16U   id,
                        OS_STK  *pbos,
                        INT32U   stk_size,
                        void    *pext,
                        INT16U   opt)
{
   15de8:	deffec04 	addi	sp,sp,-80
   15dec:	dfc01315 	stw	ra,76(sp)
   15df0:	df001215 	stw	fp,72(sp)
   15df4:	df001204 	addi	fp,sp,72
   15df8:	e13ffa15 	stw	r4,-24(fp)
   15dfc:	e17ffb15 	stw	r5,-20(fp)
   15e00:	e1bffc15 	stw	r6,-16(fp)
   15e04:	3809883a 	mov	r4,r7
   15e08:	e0c00217 	ldw	r3,8(fp)
   15e0c:	e0800617 	ldw	r2,24(fp)
   15e10:	e13ffd05 	stb	r4,-12(fp)
   15e14:	e0fffe0d 	sth	r3,-8(fp)
   15e18:	e0bfff0d 	sth	r2,-4(fp)
    OS_STK    *psp;
    INT8U      err;
#if OS_CRITICAL_METHOD == 3                  /* Allocate storage for CPU status register               */
    OS_CPU_SR  cpu_sr = 0;
   15e1c:	e03ff115 	stw	zero,-60(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {             /* Make sure priority is within allowable range           */
   15e20:	e0bffd03 	ldbu	r2,-12(fp)
   15e24:	10800570 	cmpltui	r2,r2,21
   15e28:	1000021e 	bne	r2,zero,15e34 <OSTaskCreateExt+0x4c>
        return (OS_ERR_PRIO_INVALID);
   15e2c:	00800a84 	movi	r2,42
   15e30:	00006106 	br	15fb8 <OSTaskCreateExt+0x1d0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   15e34:	0005303a 	rdctl	r2,status
   15e38:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   15e3c:	e0fff917 	ldw	r3,-28(fp)
   15e40:	00bfff84 	movi	r2,-2
   15e44:	1884703a 	and	r2,r3,r2
   15e48:	1001703a 	wrctl	status,r2
  
  return context;
   15e4c:	e0bff917 	ldw	r2,-28(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   15e50:	e0bff115 	stw	r2,-60(fp)
    if (OSIntNesting > 0) {                  /* Make sure we don't create the task from within an ISR  */
   15e54:	d0a73203 	ldbu	r2,-25400(gp)
   15e58:	10803fcc 	andi	r2,r2,255
   15e5c:	10000626 	beq	r2,zero,15e78 <OSTaskCreateExt+0x90>
   15e60:	e0bff117 	ldw	r2,-60(fp)
   15e64:	e0bff215 	stw	r2,-56(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   15e68:	e0bff217 	ldw	r2,-56(fp)
   15e6c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_CREATE_ISR);
   15e70:	00800f04 	movi	r2,60
   15e74:	00005006 	br	15fb8 <OSTaskCreateExt+0x1d0>
    }
    if (OSTCBPrioTbl[prio] == (OS_TCB *)0) { /* Make sure task doesn't already exist at this priority  */
   15e78:	e0fffd03 	ldbu	r3,-12(fp)
   15e7c:	008000b4 	movhi	r2,2
   15e80:	10893404 	addi	r2,r2,9424
   15e84:	18c7883a 	add	r3,r3,r3
   15e88:	18c7883a 	add	r3,r3,r3
   15e8c:	10c5883a 	add	r2,r2,r3
   15e90:	10800017 	ldw	r2,0(r2)
   15e94:	1000431e 	bne	r2,zero,15fa4 <OSTaskCreateExt+0x1bc>
        OSTCBPrioTbl[prio] = OS_TCB_RESERVED;/* Reserve the priority to prevent others from doing ...  */
   15e98:	e0fffd03 	ldbu	r3,-12(fp)
   15e9c:	008000b4 	movhi	r2,2
   15ea0:	10893404 	addi	r2,r2,9424
   15ea4:	18c7883a 	add	r3,r3,r3
   15ea8:	18c7883a 	add	r3,r3,r3
   15eac:	10c5883a 	add	r2,r2,r3
   15eb0:	00c00044 	movi	r3,1
   15eb4:	10c00015 	stw	r3,0(r2)
   15eb8:	e0bff117 	ldw	r2,-60(fp)
   15ebc:	e0bff315 	stw	r2,-52(fp)
   15ec0:	e0bff317 	ldw	r2,-52(fp)
   15ec4:	1001703a 	wrctl	status,r2
                                             /* ... the same thing until task is created.              */
        OS_EXIT_CRITICAL();

#if (OS_TASK_STAT_STK_CHK_EN > 0)
        OS_TaskStkClr(pbos, stk_size, opt);                    /* Clear the task stack (if needed)     */
   15ec8:	e0bfff0b 	ldhu	r2,-4(fp)
   15ecc:	100d883a 	mov	r6,r2
   15ed0:	e1400417 	ldw	r5,16(fp)
   15ed4:	e1000317 	ldw	r4,12(fp)
   15ed8:	0016e480 	call	16e48 <OS_TaskStkClr>
#endif

        psp = OSTaskStkInit(task, p_arg, ptos, opt);           /* Initialize the task's stack          */
   15edc:	e0bfff0b 	ldhu	r2,-4(fp)
   15ee0:	100f883a 	mov	r7,r2
   15ee4:	e1bffc17 	ldw	r6,-16(fp)
   15ee8:	e17ffb17 	ldw	r5,-20(fp)
   15eec:	e13ffa17 	ldw	r4,-24(fp)
   15ef0:	0018c400 	call	18c40 <OSTaskStkInit>
   15ef4:	e0bff515 	stw	r2,-44(fp)
        err = OS_TCBInit(prio, psp, pbos, id, stk_size, pext, opt);
   15ef8:	e0fffd03 	ldbu	r3,-12(fp)
   15efc:	e13ffe0b 	ldhu	r4,-8(fp)
   15f00:	e0bfff0b 	ldhu	r2,-4(fp)
   15f04:	d8800215 	stw	r2,8(sp)
   15f08:	e0800517 	ldw	r2,20(fp)
   15f0c:	d8800115 	stw	r2,4(sp)
   15f10:	e0800417 	ldw	r2,16(fp)
   15f14:	d8800015 	stw	r2,0(sp)
   15f18:	200f883a 	mov	r7,r4
   15f1c:	e1800317 	ldw	r6,12(fp)
   15f20:	e17ff517 	ldw	r5,-44(fp)
   15f24:	1809883a 	mov	r4,r3
   15f28:	00119100 	call	11910 <OS_TCBInit>
   15f2c:	e0bff605 	stb	r2,-40(fp)
        if (err == OS_ERR_NONE) {
   15f30:	e0bff603 	ldbu	r2,-40(fp)
   15f34:	1000061e 	bne	r2,zero,15f50 <OSTaskCreateExt+0x168>
            if (OSRunning == OS_TRUE) {                        /* Find HPT if multitasking has started */
   15f38:	d0a72443 	ldbu	r2,-25455(gp)
   15f3c:	10803fcc 	andi	r2,r2,255
   15f40:	10800058 	cmpnei	r2,r2,1
   15f44:	1000151e 	bne	r2,zero,15f9c <OSTaskCreateExt+0x1b4>
                OS_Sched();
   15f48:	00115100 	call	11510 <OS_Sched>
   15f4c:	00001306 	br	15f9c <OSTaskCreateExt+0x1b4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   15f50:	0005303a 	rdctl	r2,status
   15f54:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   15f58:	e0fff817 	ldw	r3,-32(fp)
   15f5c:	00bfff84 	movi	r2,-2
   15f60:	1884703a 	and	r2,r3,r2
   15f64:	1001703a 	wrctl	status,r2
  
  return context;
   15f68:	e0bff817 	ldw	r2,-32(fp)
            }
        } else {
            OS_ENTER_CRITICAL();
   15f6c:	e0bff115 	stw	r2,-60(fp)
            OSTCBPrioTbl[prio] = (OS_TCB *)0;                  /* Make this priority avail. to others  */
   15f70:	e0fffd03 	ldbu	r3,-12(fp)
   15f74:	008000b4 	movhi	r2,2
   15f78:	10893404 	addi	r2,r2,9424
   15f7c:	18c7883a 	add	r3,r3,r3
   15f80:	18c7883a 	add	r3,r3,r3
   15f84:	10c5883a 	add	r2,r2,r3
   15f88:	10000015 	stw	zero,0(r2)
   15f8c:	e0bff117 	ldw	r2,-60(fp)
   15f90:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   15f94:	e0bff417 	ldw	r2,-48(fp)
   15f98:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
        }
        return (err);
   15f9c:	e0bff603 	ldbu	r2,-40(fp)
   15fa0:	00000506 	br	15fb8 <OSTaskCreateExt+0x1d0>
   15fa4:	e0bff117 	ldw	r2,-60(fp)
   15fa8:	e0bff715 	stw	r2,-36(fp)
   15fac:	e0bff717 	ldw	r2,-36(fp)
   15fb0:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_PRIO_EXIST);
   15fb4:	00800a04 	movi	r2,40
}
   15fb8:	e037883a 	mov	sp,fp
   15fbc:	dfc00117 	ldw	ra,4(sp)
   15fc0:	df000017 	ldw	fp,0(sp)
   15fc4:	dec00204 	addi	sp,sp,8
   15fc8:	f800283a 	ret

00015fcc <OSTaskDel>:
*********************************************************************************************************
*/

#if OS_TASK_DEL_EN > 0
INT8U  OSTaskDel (INT8U prio)
{
   15fcc:	defff404 	addi	sp,sp,-48
   15fd0:	dfc00b15 	stw	ra,44(sp)
   15fd4:	df000a15 	stw	fp,40(sp)
   15fd8:	df000a04 	addi	fp,sp,40
   15fdc:	2005883a 	mov	r2,r4
   15fe0:	e0bfff05 	stb	r2,-4(fp)
#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0)
    OS_FLAG_NODE *pnode;
#endif
    OS_TCB       *ptcb;
#if OS_CRITICAL_METHOD == 3                             /* Allocate storage for CPU status register    */
    OS_CPU_SR     cpu_sr = 0;
   15fe4:	e03ff615 	stw	zero,-40(fp)
#endif



    if (OSIntNesting > 0) {                             /* See if trying to delete from ISR            */
   15fe8:	d0a73203 	ldbu	r2,-25400(gp)
   15fec:	10803fcc 	andi	r2,r2,255
   15ff0:	10000226 	beq	r2,zero,15ffc <OSTaskDel+0x30>
        return (OS_ERR_TASK_DEL_ISR);
   15ff4:	00801004 	movi	r2,64
   15ff8:	0000c006 	br	162fc <OSTaskDel+0x330>
    }
    if (prio == OS_TASK_IDLE_PRIO) {                    /* Not allowed to delete idle task             */
   15ffc:	e0bfff03 	ldbu	r2,-4(fp)
   16000:	10800518 	cmpnei	r2,r2,20
   16004:	1000021e 	bne	r2,zero,16010 <OSTaskDel+0x44>
        return (OS_ERR_TASK_DEL_IDLE);
   16008:	00800f84 	movi	r2,62
   1600c:	0000bb06 	br	162fc <OSTaskDel+0x330>
    }
#if OS_ARG_CHK_EN > 0
    if (prio >= OS_LOWEST_PRIO) {                       /* Task priority valid ?                       */
   16010:	e0bfff03 	ldbu	r2,-4(fp)
   16014:	10800530 	cmpltui	r2,r2,20
   16018:	1000051e 	bne	r2,zero,16030 <OSTaskDel+0x64>
        if (prio != OS_PRIO_SELF) {
   1601c:	e0bfff03 	ldbu	r2,-4(fp)
   16020:	10803fe0 	cmpeqi	r2,r2,255
   16024:	1000021e 	bne	r2,zero,16030 <OSTaskDel+0x64>
            return (OS_ERR_PRIO_INVALID);
   16028:	00800a84 	movi	r2,42
   1602c:	0000b306 	br	162fc <OSTaskDel+0x330>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   16030:	0005303a 	rdctl	r2,status
   16034:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   16038:	e0fffe17 	ldw	r3,-8(fp)
   1603c:	00bfff84 	movi	r2,-2
   16040:	1884703a 	and	r2,r3,r2
   16044:	1001703a 	wrctl	status,r2
  
  return context;
   16048:	e0bffe17 	ldw	r2,-8(fp)
        }
    }
#endif

/*$PAGE*/
    OS_ENTER_CRITICAL();
   1604c:	e0bff615 	stw	r2,-40(fp)
    if (prio == OS_PRIO_SELF) {                         /* See if requesting to delete self            */
   16050:	e0bfff03 	ldbu	r2,-4(fp)
   16054:	10803fd8 	cmpnei	r2,r2,255
   16058:	1000031e 	bne	r2,zero,16068 <OSTaskDel+0x9c>
        prio = OSTCBCur->OSTCBPrio;                     /* Set priority to delete to current           */
   1605c:	d0a73317 	ldw	r2,-25396(gp)
   16060:	10800c83 	ldbu	r2,50(r2)
   16064:	e0bfff05 	stb	r2,-4(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
   16068:	e0ffff03 	ldbu	r3,-4(fp)
   1606c:	008000b4 	movhi	r2,2
   16070:	10893404 	addi	r2,r2,9424
   16074:	18c7883a 	add	r3,r3,r3
   16078:	18c7883a 	add	r3,r3,r3
   1607c:	10c5883a 	add	r2,r2,r3
   16080:	10800017 	ldw	r2,0(r2)
   16084:	e0bff815 	stw	r2,-32(fp)
    if (ptcb == (OS_TCB *)0) {                          /* Task to delete must exist                   */
   16088:	e0bff817 	ldw	r2,-32(fp)
   1608c:	1000061e 	bne	r2,zero,160a8 <OSTaskDel+0xdc>
   16090:	e0bff617 	ldw	r2,-40(fp)
   16094:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   16098:	e0bff717 	ldw	r2,-36(fp)
   1609c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
   160a0:	008010c4 	movi	r2,67
   160a4:	00009506 	br	162fc <OSTaskDel+0x330>
    }
    if (ptcb == OS_TCB_RESERVED) {                      /* Must not be assigned to Mutex               */
   160a8:	e0bff817 	ldw	r2,-32(fp)
   160ac:	10800058 	cmpnei	r2,r2,1
   160b0:	1000061e 	bne	r2,zero,160cc <OSTaskDel+0x100>
   160b4:	e0bff617 	ldw	r2,-40(fp)
   160b8:	e0bff915 	stw	r2,-28(fp)
   160bc:	e0bff917 	ldw	r2,-28(fp)
   160c0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_DEL);
   160c4:	00800f44 	movi	r2,61
   160c8:	00008c06 	br	162fc <OSTaskDel+0x330>
    }

    OSRdyTbl[ptcb->OSTCBY] &= ~ptcb->OSTCBBitX;
   160cc:	e0bff817 	ldw	r2,-32(fp)
   160d0:	10800d03 	ldbu	r2,52(r2)
   160d4:	10c03fcc 	andi	r3,r2,255
   160d8:	e0bff817 	ldw	r2,-32(fp)
   160dc:	10800d03 	ldbu	r2,52(r2)
   160e0:	11003fcc 	andi	r4,r2,255
   160e4:	d0a73044 	addi	r2,gp,-25407
   160e8:	2085883a 	add	r2,r4,r2
   160ec:	10800003 	ldbu	r2,0(r2)
   160f0:	1009883a 	mov	r4,r2
   160f4:	e0bff817 	ldw	r2,-32(fp)
   160f8:	10800d43 	ldbu	r2,53(r2)
   160fc:	0084303a 	nor	r2,zero,r2
   16100:	2084703a 	and	r2,r4,r2
   16104:	1009883a 	mov	r4,r2
   16108:	d0a73044 	addi	r2,gp,-25407
   1610c:	1885883a 	add	r2,r3,r2
   16110:	11000005 	stb	r4,0(r2)
    if (OSRdyTbl[ptcb->OSTCBY] == 0) {                  /* Make task not ready                         */
   16114:	e0bff817 	ldw	r2,-32(fp)
   16118:	10800d03 	ldbu	r2,52(r2)
   1611c:	10c03fcc 	andi	r3,r2,255
   16120:	d0a73044 	addi	r2,gp,-25407
   16124:	1885883a 	add	r2,r3,r2
   16128:	10800003 	ldbu	r2,0(r2)
   1612c:	10803fcc 	andi	r2,r2,255
   16130:	1000071e 	bne	r2,zero,16150 <OSTaskDel+0x184>
        OSRdyGrp           &= ~ptcb->OSTCBBitY;
   16134:	e0bff817 	ldw	r2,-32(fp)
   16138:	10800d83 	ldbu	r2,54(r2)
   1613c:	0084303a 	nor	r2,zero,r2
   16140:	1007883a 	mov	r3,r2
   16144:	d0a73003 	ldbu	r2,-25408(gp)
   16148:	1884703a 	and	r2,r3,r2
   1614c:	d0a73005 	stb	r2,-25408(gp)
    }
    
#if (OS_EVENT_EN)
    if (ptcb->OSTCBEventPtr != (OS_EVENT *)0) {
   16150:	e0bff817 	ldw	r2,-32(fp)
   16154:	10800717 	ldw	r2,28(r2)
   16158:	10000526 	beq	r2,zero,16170 <OSTaskDel+0x1a4>
        OS_EventTaskRemove(ptcb, ptcb->OSTCBEventPtr);  /* Remove this task from any event   wait list */
   1615c:	e0bff817 	ldw	r2,-32(fp)
   16160:	10800717 	ldw	r2,28(r2)
   16164:	100b883a 	mov	r5,r2
   16168:	e13ff817 	ldw	r4,-32(fp)
   1616c:	0010ebc0 	call	10ebc <OS_EventTaskRemove>
    }
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {   /* Remove this task from any events' wait lists*/
   16170:	e0bff817 	ldw	r2,-32(fp)
   16174:	10800817 	ldw	r2,32(r2)
   16178:	10000526 	beq	r2,zero,16190 <OSTaskDel+0x1c4>
        OS_EventTaskRemoveMulti(ptcb, ptcb->OSTCBEventMultiPtr);
   1617c:	e0bff817 	ldw	r2,-32(fp)
   16180:	10800817 	ldw	r2,32(r2)
   16184:	100b883a 	mov	r5,r2
   16188:	e13ff817 	ldw	r4,-32(fp)
   1618c:	0010f740 	call	10f74 <OS_EventTaskRemoveMulti>
    }
#endif
#endif

#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0)
    pnode = ptcb->OSTCBFlagNode;
   16190:	e0bff817 	ldw	r2,-32(fp)
   16194:	10800a17 	ldw	r2,40(r2)
   16198:	e0bffb15 	stw	r2,-20(fp)
    if (pnode != (OS_FLAG_NODE *)0) {                   /* If task is waiting on event flag            */
   1619c:	e0bffb17 	ldw	r2,-20(fp)
   161a0:	10000226 	beq	r2,zero,161ac <OSTaskDel+0x1e0>
        OS_FlagUnlink(pnode);                           /* Remove from wait list                       */
   161a4:	e13ffb17 	ldw	r4,-20(fp)
   161a8:	00133e40 	call	133e4 <OS_FlagUnlink>
    }
#endif

    ptcb->OSTCBDly      = 0;                            /* Prevent OSTimeTick() from updating          */
   161ac:	e0bff817 	ldw	r2,-32(fp)
   161b0:	10000b8d 	sth	zero,46(r2)
    ptcb->OSTCBStat     = OS_STAT_RDY;                  /* Prevent task from being resumed             */
   161b4:	e0bff817 	ldw	r2,-32(fp)
   161b8:	10000c05 	stb	zero,48(r2)
    ptcb->OSTCBStatPend = OS_STAT_PEND_OK;
   161bc:	e0bff817 	ldw	r2,-32(fp)
   161c0:	10000c45 	stb	zero,49(r2)
    if (OSLockNesting < 255u) {                         /* Make sure we don't context switch           */
   161c4:	d0a72403 	ldbu	r2,-25456(gp)
   161c8:	10803fcc 	andi	r2,r2,255
   161cc:	10803fe0 	cmpeqi	r2,r2,255
   161d0:	1000031e 	bne	r2,zero,161e0 <OSTaskDel+0x214>
        OSLockNesting++;
   161d4:	d0a72403 	ldbu	r2,-25456(gp)
   161d8:	10800044 	addi	r2,r2,1
   161dc:	d0a72405 	stb	r2,-25456(gp)
   161e0:	e0bff617 	ldw	r2,-40(fp)
   161e4:	e0bffd15 	stw	r2,-12(fp)
   161e8:	e0bffd17 	ldw	r2,-12(fp)
   161ec:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();                                 /* Enabling INT. ignores next instruc.         */
    OS_Dummy();                                         /* ... Dummy ensures that INTs will be         */
   161f0:	0010aa40 	call	10aa4 <OS_Dummy>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   161f4:	0005303a 	rdctl	r2,status
   161f8:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   161fc:	e0fffa17 	ldw	r3,-24(fp)
   16200:	00bfff84 	movi	r2,-2
   16204:	1884703a 	and	r2,r3,r2
   16208:	1001703a 	wrctl	status,r2
  
  return context;
   1620c:	e0bffa17 	ldw	r2,-24(fp)
    OS_ENTER_CRITICAL();                                /* ... disabled HERE!                          */
   16210:	e0bff615 	stw	r2,-40(fp)
    if (OSLockNesting > 0) {                            /* Remove context switch lock                  */
   16214:	d0a72403 	ldbu	r2,-25456(gp)
   16218:	10803fcc 	andi	r2,r2,255
   1621c:	10000326 	beq	r2,zero,1622c <OSTaskDel+0x260>
        OSLockNesting--;
   16220:	d0a72403 	ldbu	r2,-25456(gp)
   16224:	10bfffc4 	addi	r2,r2,-1
   16228:	d0a72405 	stb	r2,-25456(gp)
    }
    OSTaskDelHook(ptcb);                                /* Call user defined hook                      */
   1622c:	e13ff817 	ldw	r4,-32(fp)
   16230:	0018dc00 	call	18dc0 <OSTaskDelHook>
    OSTaskCtr--;                                        /* One less task being managed                 */
   16234:	d0a72c43 	ldbu	r2,-25423(gp)
   16238:	10bfffc4 	addi	r2,r2,-1
   1623c:	d0a72c45 	stb	r2,-25423(gp)
    OSTCBPrioTbl[prio] = (OS_TCB *)0;                   /* Clear old priority entry                    */
   16240:	e0ffff03 	ldbu	r3,-4(fp)
   16244:	008000b4 	movhi	r2,2
   16248:	10893404 	addi	r2,r2,9424
   1624c:	18c7883a 	add	r3,r3,r3
   16250:	18c7883a 	add	r3,r3,r3
   16254:	10c5883a 	add	r2,r2,r3
   16258:	10000015 	stw	zero,0(r2)
    if (ptcb->OSTCBPrev == (OS_TCB *)0) {               /* Remove from TCB chain                       */
   1625c:	e0bff817 	ldw	r2,-32(fp)
   16260:	10800617 	ldw	r2,24(r2)
   16264:	1000071e 	bne	r2,zero,16284 <OSTaskDel+0x2b8>
        ptcb->OSTCBNext->OSTCBPrev = (OS_TCB *)0;
   16268:	e0bff817 	ldw	r2,-32(fp)
   1626c:	10800517 	ldw	r2,20(r2)
   16270:	10000615 	stw	zero,24(r2)
        OSTCBList                  = ptcb->OSTCBNext;
   16274:	e0bff817 	ldw	r2,-32(fp)
   16278:	10800517 	ldw	r2,20(r2)
   1627c:	d0a72715 	stw	r2,-25444(gp)
   16280:	00000a06 	br	162ac <OSTaskDel+0x2e0>
    } else {
        ptcb->OSTCBPrev->OSTCBNext = ptcb->OSTCBNext;
   16284:	e0bff817 	ldw	r2,-32(fp)
   16288:	10800617 	ldw	r2,24(r2)
   1628c:	e0fff817 	ldw	r3,-32(fp)
   16290:	18c00517 	ldw	r3,20(r3)
   16294:	10c00515 	stw	r3,20(r2)
        ptcb->OSTCBNext->OSTCBPrev = ptcb->OSTCBPrev;
   16298:	e0bff817 	ldw	r2,-32(fp)
   1629c:	10800517 	ldw	r2,20(r2)
   162a0:	e0fff817 	ldw	r3,-32(fp)
   162a4:	18c00617 	ldw	r3,24(r3)
   162a8:	10c00615 	stw	r3,24(r2)
    }
    ptcb->OSTCBNext   = OSTCBFreeList;                  /* Return TCB to free TCB list                 */
   162ac:	d0e72b17 	ldw	r3,-25428(gp)
   162b0:	e0bff817 	ldw	r2,-32(fp)
   162b4:	10c00515 	stw	r3,20(r2)
    OSTCBFreeList     = ptcb;
   162b8:	e0bff817 	ldw	r2,-32(fp)
   162bc:	d0a72b15 	stw	r2,-25428(gp)
#if OS_TASK_NAME_SIZE > 1
    ptcb->OSTCBTaskName[0] = '?';                       /* Unknown name                                */
   162c0:	e0bff817 	ldw	r2,-32(fp)
   162c4:	00c00fc4 	movi	r3,63
   162c8:	10c01305 	stb	r3,76(r2)
    ptcb->OSTCBTaskName[1] = OS_ASCII_NUL;
   162cc:	e0bff817 	ldw	r2,-32(fp)
   162d0:	10001345 	stb	zero,77(r2)
   162d4:	e0bff617 	ldw	r2,-40(fp)
   162d8:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   162dc:	e0bffc17 	ldw	r2,-16(fp)
   162e0:	1001703a 	wrctl	status,r2
#endif
    OS_EXIT_CRITICAL();
    if (OSRunning == OS_TRUE) {
   162e4:	d0a72443 	ldbu	r2,-25455(gp)
   162e8:	10803fcc 	andi	r2,r2,255
   162ec:	10800058 	cmpnei	r2,r2,1
   162f0:	1000011e 	bne	r2,zero,162f8 <OSTaskDel+0x32c>
        OS_Sched();                                     /* Find new highest priority task              */
   162f4:	00115100 	call	11510 <OS_Sched>
    }
    return (OS_ERR_NONE);
   162f8:	0005883a 	mov	r2,zero
}
   162fc:	e037883a 	mov	sp,fp
   16300:	dfc00117 	ldw	ra,4(sp)
   16304:	df000017 	ldw	fp,0(sp)
   16308:	dec00204 	addi	sp,sp,8
   1630c:	f800283a 	ret

00016310 <OSTaskDelReq>:
*********************************************************************************************************
*/
/*$PAGE*/
#if OS_TASK_DEL_EN > 0
INT8U  OSTaskDelReq (INT8U prio)
{
   16310:	defff504 	addi	sp,sp,-44
   16314:	df000a15 	stw	fp,40(sp)
   16318:	df000a04 	addi	fp,sp,40
   1631c:	2005883a 	mov	r2,r4
   16320:	e0bfff05 	stb	r2,-4(fp)
    INT8U      stat;
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   16324:	e03ff615 	stw	zero,-40(fp)
#endif



    if (prio == OS_TASK_IDLE_PRIO) {                            /* Not allowed to delete idle task     */
   16328:	e0bfff03 	ldbu	r2,-4(fp)
   1632c:	10800518 	cmpnei	r2,r2,20
   16330:	1000021e 	bne	r2,zero,1633c <OSTaskDelReq+0x2c>
        return (OS_ERR_TASK_DEL_IDLE);
   16334:	00800f84 	movi	r2,62
   16338:	00004506 	br	16450 <OSTaskDelReq+0x140>
    }
#if OS_ARG_CHK_EN > 0
    if (prio >= OS_LOWEST_PRIO) {                               /* Task priority valid ?               */
   1633c:	e0bfff03 	ldbu	r2,-4(fp)
   16340:	10800530 	cmpltui	r2,r2,20
   16344:	1000051e 	bne	r2,zero,1635c <OSTaskDelReq+0x4c>
        if (prio != OS_PRIO_SELF) {
   16348:	e0bfff03 	ldbu	r2,-4(fp)
   1634c:	10803fe0 	cmpeqi	r2,r2,255
   16350:	1000021e 	bne	r2,zero,1635c <OSTaskDelReq+0x4c>
            return (OS_ERR_PRIO_INVALID);
   16354:	00800a84 	movi	r2,42
   16358:	00003d06 	br	16450 <OSTaskDelReq+0x140>
        }
    }
#endif
    if (prio == OS_PRIO_SELF) {                                 /* See if a task is requesting to ...  */
   1635c:	e0bfff03 	ldbu	r2,-4(fp)
   16360:	10803fd8 	cmpnei	r2,r2,255
   16364:	1000111e 	bne	r2,zero,163ac <OSTaskDelReq+0x9c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   16368:	0005303a 	rdctl	r2,status
   1636c:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   16370:	e0fff917 	ldw	r3,-28(fp)
   16374:	00bfff84 	movi	r2,-2
   16378:	1884703a 	and	r2,r3,r2
   1637c:	1001703a 	wrctl	status,r2
  
  return context;
   16380:	e0bff917 	ldw	r2,-28(fp)
        OS_ENTER_CRITICAL();                                    /* ... this task to delete itself      */
   16384:	e0bff615 	stw	r2,-40(fp)
        stat = OSTCBCur->OSTCBDelReq;                           /* Return request status to caller     */
   16388:	d0a73317 	ldw	r2,-25396(gp)
   1638c:	10800dc3 	ldbu	r2,55(r2)
   16390:	e0bff805 	stb	r2,-32(fp)
   16394:	e0bff617 	ldw	r2,-40(fp)
   16398:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1639c:	e0bffe17 	ldw	r2,-8(fp)
   163a0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (stat);
   163a4:	e0bff803 	ldbu	r2,-32(fp)
   163a8:	00002906 	br	16450 <OSTaskDelReq+0x140>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   163ac:	0005303a 	rdctl	r2,status
   163b0:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   163b4:	e0fff717 	ldw	r3,-36(fp)
   163b8:	00bfff84 	movi	r2,-2
   163bc:	1884703a 	and	r2,r3,r2
   163c0:	1001703a 	wrctl	status,r2
  
  return context;
   163c4:	e0bff717 	ldw	r2,-36(fp)
    }
    OS_ENTER_CRITICAL();
   163c8:	e0bff615 	stw	r2,-40(fp)
    ptcb = OSTCBPrioTbl[prio];
   163cc:	e0ffff03 	ldbu	r3,-4(fp)
   163d0:	008000b4 	movhi	r2,2
   163d4:	10893404 	addi	r2,r2,9424
   163d8:	18c7883a 	add	r3,r3,r3
   163dc:	18c7883a 	add	r3,r3,r3
   163e0:	10c5883a 	add	r2,r2,r3
   163e4:	10800017 	ldw	r2,0(r2)
   163e8:	e0bffb15 	stw	r2,-20(fp)
    if (ptcb == (OS_TCB *)0) {                                  /* Task to delete must exist           */
   163ec:	e0bffb17 	ldw	r2,-20(fp)
   163f0:	1000061e 	bne	r2,zero,1640c <OSTaskDelReq+0xfc>
   163f4:	e0bff617 	ldw	r2,-40(fp)
   163f8:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   163fc:	e0bffa17 	ldw	r2,-24(fp)
   16400:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);                         /* Task must already be deleted        */
   16404:	008010c4 	movi	r2,67
   16408:	00001106 	br	16450 <OSTaskDelReq+0x140>
    }
    if (ptcb == OS_TCB_RESERVED) {                              /* Must NOT be assigned to a Mutex     */
   1640c:	e0bffb17 	ldw	r2,-20(fp)
   16410:	10800058 	cmpnei	r2,r2,1
   16414:	1000061e 	bne	r2,zero,16430 <OSTaskDelReq+0x120>
   16418:	e0bff617 	ldw	r2,-40(fp)
   1641c:	e0bffc15 	stw	r2,-16(fp)
   16420:	e0bffc17 	ldw	r2,-16(fp)
   16424:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_DEL);
   16428:	00800f44 	movi	r2,61
   1642c:	00000806 	br	16450 <OSTaskDelReq+0x140>
    }
    ptcb->OSTCBDelReq = OS_ERR_TASK_DEL_REQ;                    /* Set flag indicating task to be DEL. */
   16430:	e0bffb17 	ldw	r2,-20(fp)
   16434:	00c00fc4 	movi	r3,63
   16438:	10c00dc5 	stb	r3,55(r2)
   1643c:	e0bff617 	ldw	r2,-40(fp)
   16440:	e0bffd15 	stw	r2,-12(fp)
   16444:	e0bffd17 	ldw	r2,-12(fp)
   16448:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
   1644c:	0005883a 	mov	r2,zero
}
   16450:	e037883a 	mov	sp,fp
   16454:	df000017 	ldw	fp,0(sp)
   16458:	dec00104 	addi	sp,sp,4
   1645c:	f800283a 	ret

00016460 <OSTaskNameGet>:
*********************************************************************************************************
*/

#if OS_TASK_NAME_SIZE > 1
INT8U  OSTaskNameGet (INT8U prio, INT8U *pname, INT8U *perr)
{
   16460:	defff404 	addi	sp,sp,-48
   16464:	dfc00b15 	stw	ra,44(sp)
   16468:	df000a15 	stw	fp,40(sp)
   1646c:	df000a04 	addi	fp,sp,40
   16470:	2005883a 	mov	r2,r4
   16474:	e17ffe15 	stw	r5,-8(fp)
   16478:	e1bfff15 	stw	r6,-4(fp)
   1647c:	e0bffd05 	stb	r2,-12(fp)
    OS_TCB    *ptcb;
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                              /* Allocate storage for CPU status register   */
    OS_CPU_SR  cpu_sr = 0;
   16480:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                            /* Validate 'perr'                            */
   16484:	e0bfff17 	ldw	r2,-4(fp)
   16488:	1000021e 	bne	r2,zero,16494 <OSTaskNameGet+0x34>
        return (0);
   1648c:	0005883a 	mov	r2,zero
   16490:	00005406 	br	165e4 <OSTaskNameGet+0x184>
    }
    if (prio > OS_LOWEST_PRIO) {                         /* Task priority valid ?                      */
   16494:	e0bffd03 	ldbu	r2,-12(fp)
   16498:	10800570 	cmpltui	r2,r2,21
   1649c:	1000081e 	bne	r2,zero,164c0 <OSTaskNameGet+0x60>
        if (prio != OS_PRIO_SELF) {
   164a0:	e0bffd03 	ldbu	r2,-12(fp)
   164a4:	10803fe0 	cmpeqi	r2,r2,255
   164a8:	1000051e 	bne	r2,zero,164c0 <OSTaskNameGet+0x60>
            *perr = OS_ERR_PRIO_INVALID;                 /* No                                         */
   164ac:	e0bfff17 	ldw	r2,-4(fp)
   164b0:	00c00a84 	movi	r3,42
   164b4:	10c00005 	stb	r3,0(r2)
            return (0);
   164b8:	0005883a 	mov	r2,zero
   164bc:	00004906 	br	165e4 <OSTaskNameGet+0x184>
        }
    }
    if (pname == (INT8U *)0) {                           /* Is 'pname' a NULL pointer?                 */
   164c0:	e0bffe17 	ldw	r2,-8(fp)
   164c4:	1000051e 	bne	r2,zero,164dc <OSTaskNameGet+0x7c>
        *perr = OS_ERR_PNAME_NULL;                       /* Yes                                        */
   164c8:	e0bfff17 	ldw	r2,-4(fp)
   164cc:	00c00304 	movi	r3,12
   164d0:	10c00005 	stb	r3,0(r2)
        return (0);
   164d4:	0005883a 	mov	r2,zero
   164d8:	00004206 	br	165e4 <OSTaskNameGet+0x184>
    }
#endif
    if (OSIntNesting > 0) {                              /* See if trying to call from an ISR          */
   164dc:	d0a73203 	ldbu	r2,-25400(gp)
   164e0:	10803fcc 	andi	r2,r2,255
   164e4:	10000526 	beq	r2,zero,164fc <OSTaskNameGet+0x9c>
        *perr = OS_ERR_NAME_GET_ISR;
   164e8:	e0bfff17 	ldw	r2,-4(fp)
   164ec:	00c00444 	movi	r3,17
   164f0:	10c00005 	stb	r3,0(r2)
        return (0);
   164f4:	0005883a 	mov	r2,zero
   164f8:	00003a06 	br	165e4 <OSTaskNameGet+0x184>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   164fc:	0005303a 	rdctl	r2,status
   16500:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   16504:	e0fffc17 	ldw	r3,-16(fp)
   16508:	00bfff84 	movi	r2,-2
   1650c:	1884703a 	and	r2,r3,r2
   16510:	1001703a 	wrctl	status,r2
  
  return context;
   16514:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
   16518:	e0bff615 	stw	r2,-40(fp)
    if (prio == OS_PRIO_SELF) {                          /* See if caller desires it's own name        */
   1651c:	e0bffd03 	ldbu	r2,-12(fp)
   16520:	10803fd8 	cmpnei	r2,r2,255
   16524:	1000031e 	bne	r2,zero,16534 <OSTaskNameGet+0xd4>
        prio = OSTCBCur->OSTCBPrio;
   16528:	d0a73317 	ldw	r2,-25396(gp)
   1652c:	10800c83 	ldbu	r2,50(r2)
   16530:	e0bffd05 	stb	r2,-12(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
   16534:	e0fffd03 	ldbu	r3,-12(fp)
   16538:	008000b4 	movhi	r2,2
   1653c:	10893404 	addi	r2,r2,9424
   16540:	18c7883a 	add	r3,r3,r3
   16544:	18c7883a 	add	r3,r3,r3
   16548:	10c5883a 	add	r2,r2,r3
   1654c:	10800017 	ldw	r2,0(r2)
   16550:	e0bff815 	stw	r2,-32(fp)
    if (ptcb == (OS_TCB *)0) {                           /* Does task exist?                           */
   16554:	e0bff817 	ldw	r2,-32(fp)
   16558:	1000091e 	bne	r2,zero,16580 <OSTaskNameGet+0x120>
   1655c:	e0bff617 	ldw	r2,-40(fp)
   16560:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   16564:	e0bff717 	ldw	r2,-36(fp)
   16568:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                              /* No                                         */
        *perr = OS_ERR_TASK_NOT_EXIST;
   1656c:	e0bfff17 	ldw	r2,-4(fp)
   16570:	00c010c4 	movi	r3,67
   16574:	10c00005 	stb	r3,0(r2)
        return (0);
   16578:	0005883a 	mov	r2,zero
   1657c:	00001906 	br	165e4 <OSTaskNameGet+0x184>
    }
    if (ptcb == OS_TCB_RESERVED) {                       /* Task assigned to a Mutex?                  */
   16580:	e0bff817 	ldw	r2,-32(fp)
   16584:	10800058 	cmpnei	r2,r2,1
   16588:	1000091e 	bne	r2,zero,165b0 <OSTaskNameGet+0x150>
   1658c:	e0bff617 	ldw	r2,-40(fp)
   16590:	e0bff915 	stw	r2,-28(fp)
   16594:	e0bff917 	ldw	r2,-28(fp)
   16598:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                              /* Yes                                        */
        *perr = OS_ERR_TASK_NOT_EXIST;
   1659c:	e0bfff17 	ldw	r2,-4(fp)
   165a0:	00c010c4 	movi	r3,67
   165a4:	10c00005 	stb	r3,0(r2)
        return (0);
   165a8:	0005883a 	mov	r2,zero
   165ac:	00000d06 	br	165e4 <OSTaskNameGet+0x184>
    }
    len   = OS_StrCopy(pname, ptcb->OSTCBTaskName);      /* Yes, copy name from TCB                    */
   165b0:	e0bff817 	ldw	r2,-32(fp)
   165b4:	10801304 	addi	r2,r2,76
   165b8:	100b883a 	mov	r5,r2
   165bc:	e13ffe17 	ldw	r4,-8(fp)
   165c0:	00116540 	call	11654 <OS_StrCopy>
   165c4:	e0bffb05 	stb	r2,-20(fp)
   165c8:	e0bff617 	ldw	r2,-40(fp)
   165cc:	e0bffa15 	stw	r2,-24(fp)
   165d0:	e0bffa17 	ldw	r2,-24(fp)
   165d4:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   165d8:	e0bfff17 	ldw	r2,-4(fp)
   165dc:	10000005 	stb	zero,0(r2)
    return (len);
   165e0:	e0bffb03 	ldbu	r2,-20(fp)
}
   165e4:	e037883a 	mov	sp,fp
   165e8:	dfc00117 	ldw	ra,4(sp)
   165ec:	df000017 	ldw	fp,0(sp)
   165f0:	dec00204 	addi	sp,sp,8
   165f4:	f800283a 	ret

000165f8 <OSTaskNameSet>:
* Returns    : None
*********************************************************************************************************
*/
#if OS_TASK_NAME_SIZE > 1
void  OSTaskNameSet (INT8U prio, INT8U *pname, INT8U *perr)
{
   165f8:	defff304 	addi	sp,sp,-52
   165fc:	dfc00c15 	stw	ra,48(sp)
   16600:	df000b15 	stw	fp,44(sp)
   16604:	df000b04 	addi	fp,sp,44
   16608:	2005883a 	mov	r2,r4
   1660c:	e17ffe15 	stw	r5,-8(fp)
   16610:	e1bfff15 	stw	r6,-4(fp)
   16614:	e0bffd05 	stb	r2,-12(fp)
    INT8U      len;
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                          /* Allocate storage for CPU status register       */
    OS_CPU_SR  cpu_sr = 0;
   16618:	e03ff515 	stw	zero,-44(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                        /* Validate 'perr'                                */
   1661c:	e0bfff17 	ldw	r2,-4(fp)
   16620:	10005c26 	beq	r2,zero,16794 <OSTaskNameSet+0x19c>
        return;
    }
    if (prio > OS_LOWEST_PRIO) {                     /* Task priority valid ?                          */
   16624:	e0bffd03 	ldbu	r2,-12(fp)
   16628:	10800570 	cmpltui	r2,r2,21
   1662c:	1000071e 	bne	r2,zero,1664c <OSTaskNameSet+0x54>
        if (prio != OS_PRIO_SELF) {
   16630:	e0bffd03 	ldbu	r2,-12(fp)
   16634:	10803fe0 	cmpeqi	r2,r2,255
   16638:	1000041e 	bne	r2,zero,1664c <OSTaskNameSet+0x54>
            *perr = OS_ERR_PRIO_INVALID;             /* No                                             */
   1663c:	e0bfff17 	ldw	r2,-4(fp)
   16640:	00c00a84 	movi	r3,42
   16644:	10c00005 	stb	r3,0(r2)
            return;
   16648:	00005306 	br	16798 <OSTaskNameSet+0x1a0>
        }
    }
    if (pname == (INT8U *)0) {                       /* Is 'pname' a NULL pointer?                     */
   1664c:	e0bffe17 	ldw	r2,-8(fp)
   16650:	1000041e 	bne	r2,zero,16664 <OSTaskNameSet+0x6c>
        *perr = OS_ERR_PNAME_NULL;                   /* Yes                                            */
   16654:	e0bfff17 	ldw	r2,-4(fp)
   16658:	00c00304 	movi	r3,12
   1665c:	10c00005 	stb	r3,0(r2)
        return;
   16660:	00004d06 	br	16798 <OSTaskNameSet+0x1a0>
    }
#endif
    if (OSIntNesting > 0) {                          /* See if trying to call from an ISR              */
   16664:	d0a73203 	ldbu	r2,-25400(gp)
   16668:	10803fcc 	andi	r2,r2,255
   1666c:	10000426 	beq	r2,zero,16680 <OSTaskNameSet+0x88>
        *perr = OS_ERR_NAME_SET_ISR;
   16670:	e0bfff17 	ldw	r2,-4(fp)
   16674:	00c00484 	movi	r3,18
   16678:	10c00005 	stb	r3,0(r2)
        return;
   1667c:	00004606 	br	16798 <OSTaskNameSet+0x1a0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   16680:	0005303a 	rdctl	r2,status
   16684:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   16688:	e0fffc17 	ldw	r3,-16(fp)
   1668c:	00bfff84 	movi	r2,-2
   16690:	1884703a 	and	r2,r3,r2
   16694:	1001703a 	wrctl	status,r2
  
  return context;
   16698:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
   1669c:	e0bff515 	stw	r2,-44(fp)
    if (prio == OS_PRIO_SELF) {                      /* See if caller desires to set it's own name     */
   166a0:	e0bffd03 	ldbu	r2,-12(fp)
   166a4:	10803fd8 	cmpnei	r2,r2,255
   166a8:	1000031e 	bne	r2,zero,166b8 <OSTaskNameSet+0xc0>
        prio = OSTCBCur->OSTCBPrio;
   166ac:	d0a73317 	ldw	r2,-25396(gp)
   166b0:	10800c83 	ldbu	r2,50(r2)
   166b4:	e0bffd05 	stb	r2,-12(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
   166b8:	e0fffd03 	ldbu	r3,-12(fp)
   166bc:	008000b4 	movhi	r2,2
   166c0:	10893404 	addi	r2,r2,9424
   166c4:	18c7883a 	add	r3,r3,r3
   166c8:	18c7883a 	add	r3,r3,r3
   166cc:	10c5883a 	add	r2,r2,r3
   166d0:	10800017 	ldw	r2,0(r2)
   166d4:	e0bff715 	stw	r2,-36(fp)
    if (ptcb == (OS_TCB *)0) {                       /* Does task exist?                               */
   166d8:	e0bff717 	ldw	r2,-36(fp)
   166dc:	1000081e 	bne	r2,zero,16700 <OSTaskNameSet+0x108>
   166e0:	e0bff517 	ldw	r2,-44(fp)
   166e4:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   166e8:	e0bff617 	ldw	r2,-40(fp)
   166ec:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                          /* No                                             */
        *perr = OS_ERR_TASK_NOT_EXIST;
   166f0:	e0bfff17 	ldw	r2,-4(fp)
   166f4:	00c010c4 	movi	r3,67
   166f8:	10c00005 	stb	r3,0(r2)
        return;
   166fc:	00002606 	br	16798 <OSTaskNameSet+0x1a0>
    }
    if (ptcb == OS_TCB_RESERVED) {                   /* Task assigned to a Mutex?                      */
   16700:	e0bff717 	ldw	r2,-36(fp)
   16704:	10800058 	cmpnei	r2,r2,1
   16708:	1000081e 	bne	r2,zero,1672c <OSTaskNameSet+0x134>
   1670c:	e0bff517 	ldw	r2,-44(fp)
   16710:	e0bff815 	stw	r2,-32(fp)
   16714:	e0bff817 	ldw	r2,-32(fp)
   16718:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                          /* Yes                                            */
        *perr = OS_ERR_TASK_NOT_EXIST;
   1671c:	e0bfff17 	ldw	r2,-4(fp)
   16720:	00c010c4 	movi	r3,67
   16724:	10c00005 	stb	r3,0(r2)
        return;
   16728:	00001b06 	br	16798 <OSTaskNameSet+0x1a0>
    }
    len = OS_StrLen(pname);                          /* Yes, Can we fit the string in the TCB?         */
   1672c:	e13ffe17 	ldw	r4,-8(fp)
   16730:	00116c80 	call	116c8 <OS_StrLen>
   16734:	e0bffa05 	stb	r2,-24(fp)
    if (len > (OS_TASK_NAME_SIZE - 1)) {             /*      No                                        */
   16738:	e0bffa03 	ldbu	r2,-24(fp)
   1673c:	10800830 	cmpltui	r2,r2,32
   16740:	1000081e 	bne	r2,zero,16764 <OSTaskNameSet+0x16c>
   16744:	e0bff517 	ldw	r2,-44(fp)
   16748:	e0bff915 	stw	r2,-28(fp)
   1674c:	e0bff917 	ldw	r2,-28(fp)
   16750:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_TASK_NAME_TOO_LONG;
   16754:	e0bfff17 	ldw	r2,-4(fp)
   16758:	00c01044 	movi	r3,65
   1675c:	10c00005 	stb	r3,0(r2)
        return;
   16760:	00000d06 	br	16798 <OSTaskNameSet+0x1a0>
    }
    (void)OS_StrCopy(ptcb->OSTCBTaskName, pname);    /*      Yes, copy to TCB                          */
   16764:	e0bff717 	ldw	r2,-36(fp)
   16768:	10801304 	addi	r2,r2,76
   1676c:	e17ffe17 	ldw	r5,-8(fp)
   16770:	1009883a 	mov	r4,r2
   16774:	00116540 	call	11654 <OS_StrCopy>
   16778:	e0bff517 	ldw	r2,-44(fp)
   1677c:	e0bffb15 	stw	r2,-20(fp)
   16780:	e0bffb17 	ldw	r2,-20(fp)
   16784:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   16788:	e0bfff17 	ldw	r2,-4(fp)
   1678c:	10000005 	stb	zero,0(r2)
   16790:	00000106 	br	16798 <OSTaskNameSet+0x1a0>



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                        /* Validate 'perr'                                */
        return;
   16794:	0001883a 	nop
        return;
    }
    (void)OS_StrCopy(ptcb->OSTCBTaskName, pname);    /*      Yes, copy to TCB                          */
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
}
   16798:	e037883a 	mov	sp,fp
   1679c:	dfc00117 	ldw	ra,4(sp)
   167a0:	df000017 	ldw	fp,0(sp)
   167a4:	dec00204 	addi	sp,sp,8
   167a8:	f800283a 	ret

000167ac <OSTaskResume>:
*********************************************************************************************************
*/

#if OS_TASK_SUSPEND_EN > 0
INT8U  OSTaskResume (INT8U prio)
{
   167ac:	defff404 	addi	sp,sp,-48
   167b0:	dfc00b15 	stw	ra,44(sp)
   167b4:	df000a15 	stw	fp,40(sp)
   167b8:	df000a04 	addi	fp,sp,40
   167bc:	2005883a 	mov	r2,r4
   167c0:	e0bfff05 	stb	r2,-4(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                                   /* Storage for CPU status register       */
    OS_CPU_SR  cpu_sr = 0;
   167c4:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio >= OS_LOWEST_PRIO) {                             /* Make sure task priority is valid      */
   167c8:	e0bfff03 	ldbu	r2,-4(fp)
   167cc:	10800530 	cmpltui	r2,r2,20
   167d0:	1000021e 	bne	r2,zero,167dc <OSTaskResume+0x30>
        return (OS_ERR_PRIO_INVALID);
   167d4:	00800a84 	movi	r2,42
   167d8:	00006406 	br	1696c <OSTaskResume+0x1c0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   167dc:	0005303a 	rdctl	r2,status
   167e0:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   167e4:	e0fffe17 	ldw	r3,-8(fp)
   167e8:	00bfff84 	movi	r2,-2
   167ec:	1884703a 	and	r2,r3,r2
   167f0:	1001703a 	wrctl	status,r2
  
  return context;
   167f4:	e0bffe17 	ldw	r2,-8(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   167f8:	e0bff615 	stw	r2,-40(fp)
    ptcb = OSTCBPrioTbl[prio];
   167fc:	e0ffff03 	ldbu	r3,-4(fp)
   16800:	008000b4 	movhi	r2,2
   16804:	10893404 	addi	r2,r2,9424
   16808:	18c7883a 	add	r3,r3,r3
   1680c:	18c7883a 	add	r3,r3,r3
   16810:	10c5883a 	add	r2,r2,r3
   16814:	10800017 	ldw	r2,0(r2)
   16818:	e0bff815 	stw	r2,-32(fp)
    if (ptcb == (OS_TCB *)0) {                                /* Task to suspend must exist            */
   1681c:	e0bff817 	ldw	r2,-32(fp)
   16820:	1000061e 	bne	r2,zero,1683c <OSTaskResume+0x90>
   16824:	e0bff617 	ldw	r2,-40(fp)
   16828:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1682c:	e0bff717 	ldw	r2,-36(fp)
   16830:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_RESUME_PRIO);
   16834:	00801184 	movi	r2,70
   16838:	00004c06 	br	1696c <OSTaskResume+0x1c0>
    }
    if (ptcb == OS_TCB_RESERVED) {                            /* See if assigned to Mutex              */
   1683c:	e0bff817 	ldw	r2,-32(fp)
   16840:	10800058 	cmpnei	r2,r2,1
   16844:	1000061e 	bne	r2,zero,16860 <OSTaskResume+0xb4>
   16848:	e0bff617 	ldw	r2,-40(fp)
   1684c:	e0bff915 	stw	r2,-28(fp)
   16850:	e0bff917 	ldw	r2,-28(fp)
   16854:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
   16858:	008010c4 	movi	r2,67
   1685c:	00004306 	br	1696c <OSTaskResume+0x1c0>
    }
    if ((ptcb->OSTCBStat & OS_STAT_SUSPEND) != OS_STAT_RDY) { /* Task must be suspended                */
   16860:	e0bff817 	ldw	r2,-32(fp)
   16864:	10800c03 	ldbu	r2,48(r2)
   16868:	10803fcc 	andi	r2,r2,255
   1686c:	1080020c 	andi	r2,r2,8
   16870:	10003926 	beq	r2,zero,16958 <OSTaskResume+0x1ac>
        ptcb->OSTCBStat &= ~(INT8U)OS_STAT_SUSPEND;           /* Remove suspension                     */
   16874:	e0bff817 	ldw	r2,-32(fp)
   16878:	10c00c03 	ldbu	r3,48(r2)
   1687c:	00bffdc4 	movi	r2,-9
   16880:	1884703a 	and	r2,r3,r2
   16884:	1007883a 	mov	r3,r2
   16888:	e0bff817 	ldw	r2,-32(fp)
   1688c:	10c00c05 	stb	r3,48(r2)
        if (ptcb->OSTCBStat == OS_STAT_RDY) {                 /* See if task is now ready              */
   16890:	e0bff817 	ldw	r2,-32(fp)
   16894:	10800c03 	ldbu	r2,48(r2)
   16898:	10803fcc 	andi	r2,r2,255
   1689c:	1000281e 	bne	r2,zero,16940 <OSTaskResume+0x194>
            if (ptcb->OSTCBDly == 0) {
   168a0:	e0bff817 	ldw	r2,-32(fp)
   168a4:	10800b8b 	ldhu	r2,46(r2)
   168a8:	10bfffcc 	andi	r2,r2,65535
   168ac:	10001f1e 	bne	r2,zero,1692c <OSTaskResume+0x180>
                OSRdyGrp               |= ptcb->OSTCBBitY;    /* Yes, Make task ready to run           */
   168b0:	e0bff817 	ldw	r2,-32(fp)
   168b4:	10c00d83 	ldbu	r3,54(r2)
   168b8:	d0a73003 	ldbu	r2,-25408(gp)
   168bc:	1884b03a 	or	r2,r3,r2
   168c0:	d0a73005 	stb	r2,-25408(gp)
                OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
   168c4:	e0bff817 	ldw	r2,-32(fp)
   168c8:	10800d03 	ldbu	r2,52(r2)
   168cc:	10c03fcc 	andi	r3,r2,255
   168d0:	e0bff817 	ldw	r2,-32(fp)
   168d4:	10800d03 	ldbu	r2,52(r2)
   168d8:	11003fcc 	andi	r4,r2,255
   168dc:	d0a73044 	addi	r2,gp,-25407
   168e0:	2085883a 	add	r2,r4,r2
   168e4:	11000003 	ldbu	r4,0(r2)
   168e8:	e0bff817 	ldw	r2,-32(fp)
   168ec:	10800d43 	ldbu	r2,53(r2)
   168f0:	2084b03a 	or	r2,r4,r2
   168f4:	1009883a 	mov	r4,r2
   168f8:	d0a73044 	addi	r2,gp,-25407
   168fc:	1885883a 	add	r2,r3,r2
   16900:	11000005 	stb	r4,0(r2)
   16904:	e0bff617 	ldw	r2,-40(fp)
   16908:	e0bffa15 	stw	r2,-24(fp)
   1690c:	e0bffa17 	ldw	r2,-24(fp)
   16910:	1001703a 	wrctl	status,r2
                OS_EXIT_CRITICAL();
                if (OSRunning == OS_TRUE) {
   16914:	d0a72443 	ldbu	r2,-25455(gp)
   16918:	10803fcc 	andi	r2,r2,255
   1691c:	10800058 	cmpnei	r2,r2,1
   16920:	10000b1e 	bne	r2,zero,16950 <OSTaskResume+0x1a4>
                    OS_Sched();                               /* Find new highest priority task        */
   16924:	00115100 	call	11510 <OS_Sched>
   16928:	00000906 	br	16950 <OSTaskResume+0x1a4>
   1692c:	e0bff617 	ldw	r2,-40(fp)
   16930:	e0bffb15 	stw	r2,-20(fp)
   16934:	e0bffb17 	ldw	r2,-20(fp)
   16938:	1001703a 	wrctl	status,r2
   1693c:	00000406 	br	16950 <OSTaskResume+0x1a4>
   16940:	e0bff617 	ldw	r2,-40(fp)
   16944:	e0bffc15 	stw	r2,-16(fp)
   16948:	e0bffc17 	ldw	r2,-16(fp)
   1694c:	1001703a 	wrctl	status,r2
                OS_EXIT_CRITICAL();
            }
        } else {                                              /* Must be pending on event              */
            OS_EXIT_CRITICAL();
        }
        return (OS_ERR_NONE);
   16950:	0005883a 	mov	r2,zero
   16954:	00000506 	br	1696c <OSTaskResume+0x1c0>
   16958:	e0bff617 	ldw	r2,-40(fp)
   1695c:	e0bffd15 	stw	r2,-12(fp)
   16960:	e0bffd17 	ldw	r2,-12(fp)
   16964:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_TASK_NOT_SUSPENDED);
   16968:	00801104 	movi	r2,68
}
   1696c:	e037883a 	mov	sp,fp
   16970:	dfc00117 	ldw	ra,4(sp)
   16974:	df000017 	ldw	fp,0(sp)
   16978:	dec00204 	addi	sp,sp,8
   1697c:	f800283a 	ret

00016980 <OSTaskStkChk>:
*              OS_ERR_PDATA_NULL      if 'p_stk_data' is a NULL pointer
*********************************************************************************************************
*/
#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
INT8U  OSTaskStkChk (INT8U prio, OS_STK_DATA *p_stk_data)
{
   16980:	defff304 	addi	sp,sp,-52
   16984:	df000c15 	stw	fp,48(sp)
   16988:	df000c04 	addi	fp,sp,48
   1698c:	2005883a 	mov	r2,r4
   16990:	e17fff15 	stw	r5,-4(fp)
   16994:	e0bffe05 	stb	r2,-8(fp)
    OS_TCB    *ptcb;
    OS_STK    *pchk;
    INT32U     nfree;
    INT32U     size;
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
   16998:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {                       /* Make sure task priority is valid             */
   1699c:	e0bffe03 	ldbu	r2,-8(fp)
   169a0:	10800570 	cmpltui	r2,r2,21
   169a4:	1000051e 	bne	r2,zero,169bc <OSTaskStkChk+0x3c>
        if (prio != OS_PRIO_SELF) {
   169a8:	e0bffe03 	ldbu	r2,-8(fp)
   169ac:	10803fe0 	cmpeqi	r2,r2,255
   169b0:	1000021e 	bne	r2,zero,169bc <OSTaskStkChk+0x3c>
            return (OS_ERR_PRIO_INVALID);
   169b4:	00800a84 	movi	r2,42
   169b8:	00005d06 	br	16b30 <OSTaskStkChk+0x1b0>
        }
    }
    if (p_stk_data == (OS_STK_DATA *)0) {              /* Validate 'p_stk_data'                        */
   169bc:	e0bfff17 	ldw	r2,-4(fp)
   169c0:	1000021e 	bne	r2,zero,169cc <OSTaskStkChk+0x4c>
        return (OS_ERR_PDATA_NULL);
   169c4:	00800244 	movi	r2,9
   169c8:	00005906 	br	16b30 <OSTaskStkChk+0x1b0>
    }
#endif
    p_stk_data->OSFree = 0;                            /* Assume failure, set to 0 size                */
   169cc:	e0bfff17 	ldw	r2,-4(fp)
   169d0:	10000015 	stw	zero,0(r2)
    p_stk_data->OSUsed = 0;
   169d4:	e0bfff17 	ldw	r2,-4(fp)
   169d8:	10000115 	stw	zero,4(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   169dc:	0005303a 	rdctl	r2,status
   169e0:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   169e4:	e0fffd17 	ldw	r3,-12(fp)
   169e8:	00bfff84 	movi	r2,-2
   169ec:	1884703a 	and	r2,r3,r2
   169f0:	1001703a 	wrctl	status,r2
  
  return context;
   169f4:	e0bffd17 	ldw	r2,-12(fp)
    OS_ENTER_CRITICAL();
   169f8:	e0bff615 	stw	r2,-40(fp)
    if (prio == OS_PRIO_SELF) {                        /* See if check for SELF                        */
   169fc:	e0bffe03 	ldbu	r2,-8(fp)
   16a00:	10803fd8 	cmpnei	r2,r2,255
   16a04:	1000031e 	bne	r2,zero,16a14 <OSTaskStkChk+0x94>
        prio = OSTCBCur->OSTCBPrio;
   16a08:	d0a73317 	ldw	r2,-25396(gp)
   16a0c:	10800c83 	ldbu	r2,50(r2)
   16a10:	e0bffe05 	stb	r2,-8(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
   16a14:	e0fffe03 	ldbu	r3,-8(fp)
   16a18:	008000b4 	movhi	r2,2
   16a1c:	10893404 	addi	r2,r2,9424
   16a20:	18c7883a 	add	r3,r3,r3
   16a24:	18c7883a 	add	r3,r3,r3
   16a28:	10c5883a 	add	r2,r2,r3
   16a2c:	10800017 	ldw	r2,0(r2)
   16a30:	e0bff815 	stw	r2,-32(fp)
    if (ptcb == (OS_TCB *)0) {                         /* Make sure task exist                         */
   16a34:	e0bff817 	ldw	r2,-32(fp)
   16a38:	1000061e 	bne	r2,zero,16a54 <OSTaskStkChk+0xd4>
   16a3c:	e0bff617 	ldw	r2,-40(fp)
   16a40:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   16a44:	e0bff717 	ldw	r2,-36(fp)
   16a48:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
   16a4c:	008010c4 	movi	r2,67
   16a50:	00003706 	br	16b30 <OSTaskStkChk+0x1b0>
    }
    if (ptcb == OS_TCB_RESERVED) {
   16a54:	e0bff817 	ldw	r2,-32(fp)
   16a58:	10800058 	cmpnei	r2,r2,1
   16a5c:	1000061e 	bne	r2,zero,16a78 <OSTaskStkChk+0xf8>
   16a60:	e0bff617 	ldw	r2,-40(fp)
   16a64:	e0bff915 	stw	r2,-28(fp)
   16a68:	e0bff917 	ldw	r2,-28(fp)
   16a6c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
   16a70:	008010c4 	movi	r2,67
   16a74:	00002e06 	br	16b30 <OSTaskStkChk+0x1b0>
    }
    if ((ptcb->OSTCBOpt & OS_TASK_OPT_STK_CHK) == 0) { /* Make sure stack checking option is set       */
   16a78:	e0bff817 	ldw	r2,-32(fp)
   16a7c:	1080040b 	ldhu	r2,16(r2)
   16a80:	10bfffcc 	andi	r2,r2,65535
   16a84:	1080004c 	andi	r2,r2,1
   16a88:	1000061e 	bne	r2,zero,16aa4 <OSTaskStkChk+0x124>
   16a8c:	e0bff617 	ldw	r2,-40(fp)
   16a90:	e0bffa15 	stw	r2,-24(fp)
   16a94:	e0bffa17 	ldw	r2,-24(fp)
   16a98:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_OPT);
   16a9c:	00801144 	movi	r2,69
   16aa0:	00002306 	br	16b30 <OSTaskStkChk+0x1b0>
    }
    nfree = 0;
   16aa4:	e03ff515 	stw	zero,-44(fp)
    size  = ptcb->OSTCBStkSize;
   16aa8:	e0bff817 	ldw	r2,-32(fp)
   16aac:	10800317 	ldw	r2,12(r2)
   16ab0:	e0bffc15 	stw	r2,-16(fp)
    pchk  = ptcb->OSTCBStkBottom;
   16ab4:	e0bff817 	ldw	r2,-32(fp)
   16ab8:	10800217 	ldw	r2,8(r2)
   16abc:	e0bff415 	stw	r2,-48(fp)
   16ac0:	e0bff617 	ldw	r2,-40(fp)
   16ac4:	e0bffb15 	stw	r2,-20(fp)
   16ac8:	e0bffb17 	ldw	r2,-20(fp)
   16acc:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
#if OS_STK_GROWTH == 1
    while (*pchk++ == (OS_STK)0) {                    /* Compute the number of zero entries on the stk */
   16ad0:	00000306 	br	16ae0 <OSTaskStkChk+0x160>
        nfree++;
   16ad4:	e0bff517 	ldw	r2,-44(fp)
   16ad8:	10800044 	addi	r2,r2,1
   16adc:	e0bff515 	stw	r2,-44(fp)
    nfree = 0;
    size  = ptcb->OSTCBStkSize;
    pchk  = ptcb->OSTCBStkBottom;
    OS_EXIT_CRITICAL();
#if OS_STK_GROWTH == 1
    while (*pchk++ == (OS_STK)0) {                    /* Compute the number of zero entries on the stk */
   16ae0:	e0bff417 	ldw	r2,-48(fp)
   16ae4:	10c00104 	addi	r3,r2,4
   16ae8:	e0fff415 	stw	r3,-48(fp)
   16aec:	10800017 	ldw	r2,0(r2)
   16af0:	103ff826 	beq	r2,zero,16ad4 <__alt_data_end+0xfffe6ad4>
#else
    while (*pchk-- == (OS_STK)0) {
        nfree++;
    }
#endif
    p_stk_data->OSFree = nfree * sizeof(OS_STK);          /* Compute number of free bytes on the stack */
   16af4:	e0bff517 	ldw	r2,-44(fp)
   16af8:	1085883a 	add	r2,r2,r2
   16afc:	1085883a 	add	r2,r2,r2
   16b00:	1007883a 	mov	r3,r2
   16b04:	e0bfff17 	ldw	r2,-4(fp)
   16b08:	10c00015 	stw	r3,0(r2)
    p_stk_data->OSUsed = (size - nfree) * sizeof(OS_STK); /* Compute number of bytes used on the stack */
   16b0c:	e0fffc17 	ldw	r3,-16(fp)
   16b10:	e0bff517 	ldw	r2,-44(fp)
   16b14:	1885c83a 	sub	r2,r3,r2
   16b18:	1085883a 	add	r2,r2,r2
   16b1c:	1085883a 	add	r2,r2,r2
   16b20:	1007883a 	mov	r3,r2
   16b24:	e0bfff17 	ldw	r2,-4(fp)
   16b28:	10c00115 	stw	r3,4(r2)
    return (OS_ERR_NONE);
   16b2c:	0005883a 	mov	r2,zero
}
   16b30:	e037883a 	mov	sp,fp
   16b34:	df000017 	ldw	fp,0(sp)
   16b38:	dec00104 	addi	sp,sp,4
   16b3c:	f800283a 	ret

00016b40 <OSTaskSuspend>:
*********************************************************************************************************
*/

#if OS_TASK_SUSPEND_EN > 0
INT8U  OSTaskSuspend (INT8U prio)
{
   16b40:	defff504 	addi	sp,sp,-44
   16b44:	dfc00a15 	stw	ra,40(sp)
   16b48:	df000915 	stw	fp,36(sp)
   16b4c:	df000904 	addi	fp,sp,36
   16b50:	2005883a 	mov	r2,r4
   16b54:	e0bfff05 	stb	r2,-4(fp)
    BOOLEAN    self;
    OS_TCB    *ptcb;
    INT8U      y;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   16b58:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio == OS_TASK_IDLE_PRIO) {                            /* Not allowed to suspend idle task    */
   16b5c:	e0bfff03 	ldbu	r2,-4(fp)
   16b60:	10800518 	cmpnei	r2,r2,20
   16b64:	1000021e 	bne	r2,zero,16b70 <OSTaskSuspend+0x30>
        return (OS_ERR_TASK_SUSPEND_IDLE);
   16b68:	008011c4 	movi	r2,71
   16b6c:	00006806 	br	16d10 <OSTaskSuspend+0x1d0>
    }
    if (prio >= OS_LOWEST_PRIO) {                               /* Task priority valid ?               */
   16b70:	e0bfff03 	ldbu	r2,-4(fp)
   16b74:	10800530 	cmpltui	r2,r2,20
   16b78:	1000051e 	bne	r2,zero,16b90 <OSTaskSuspend+0x50>
        if (prio != OS_PRIO_SELF) {
   16b7c:	e0bfff03 	ldbu	r2,-4(fp)
   16b80:	10803fe0 	cmpeqi	r2,r2,255
   16b84:	1000021e 	bne	r2,zero,16b90 <OSTaskSuspend+0x50>
            return (OS_ERR_PRIO_INVALID);
   16b88:	00800a84 	movi	r2,42
   16b8c:	00006006 	br	16d10 <OSTaskSuspend+0x1d0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   16b90:	0005303a 	rdctl	r2,status
   16b94:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   16b98:	e0fffe17 	ldw	r3,-8(fp)
   16b9c:	00bfff84 	movi	r2,-2
   16ba0:	1884703a 	and	r2,r3,r2
   16ba4:	1001703a 	wrctl	status,r2
  
  return context;
   16ba8:	e0bffe17 	ldw	r2,-8(fp)
        }
    }
#endif
    OS_ENTER_CRITICAL();
   16bac:	e0bff815 	stw	r2,-32(fp)
    if (prio == OS_PRIO_SELF) {                                 /* See if suspend SELF                 */
   16bb0:	e0bfff03 	ldbu	r2,-4(fp)
   16bb4:	10803fd8 	cmpnei	r2,r2,255
   16bb8:	1000061e 	bne	r2,zero,16bd4 <OSTaskSuspend+0x94>
        prio = OSTCBCur->OSTCBPrio;
   16bbc:	d0a73317 	ldw	r2,-25396(gp)
   16bc0:	10800c83 	ldbu	r2,50(r2)
   16bc4:	e0bfff05 	stb	r2,-4(fp)
        self = OS_TRUE;
   16bc8:	00800044 	movi	r2,1
   16bcc:	e0bff705 	stb	r2,-36(fp)
   16bd0:	00000906 	br	16bf8 <OSTaskSuspend+0xb8>
    } else if (prio == OSTCBCur->OSTCBPrio) {                   /* See if suspending self              */
   16bd4:	d0a73317 	ldw	r2,-25396(gp)
   16bd8:	10800c83 	ldbu	r2,50(r2)
   16bdc:	10c03fcc 	andi	r3,r2,255
   16be0:	e0bfff03 	ldbu	r2,-4(fp)
   16be4:	1880031e 	bne	r3,r2,16bf4 <OSTaskSuspend+0xb4>
        self = OS_TRUE;
   16be8:	00800044 	movi	r2,1
   16bec:	e0bff705 	stb	r2,-36(fp)
   16bf0:	00000106 	br	16bf8 <OSTaskSuspend+0xb8>
    } else {
        self = OS_FALSE;                                        /* No suspending another task          */
   16bf4:	e03ff705 	stb	zero,-36(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
   16bf8:	e0ffff03 	ldbu	r3,-4(fp)
   16bfc:	008000b4 	movhi	r2,2
   16c00:	10893404 	addi	r2,r2,9424
   16c04:	18c7883a 	add	r3,r3,r3
   16c08:	18c7883a 	add	r3,r3,r3
   16c0c:	10c5883a 	add	r2,r2,r3
   16c10:	10800017 	ldw	r2,0(r2)
   16c14:	e0bffa15 	stw	r2,-24(fp)
    if (ptcb == (OS_TCB *)0) {                                  /* Task to suspend must exist          */
   16c18:	e0bffa17 	ldw	r2,-24(fp)
   16c1c:	1000061e 	bne	r2,zero,16c38 <OSTaskSuspend+0xf8>
   16c20:	e0bff817 	ldw	r2,-32(fp)
   16c24:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   16c28:	e0bff917 	ldw	r2,-28(fp)
   16c2c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_SUSPEND_PRIO);
   16c30:	00801204 	movi	r2,72
   16c34:	00003606 	br	16d10 <OSTaskSuspend+0x1d0>
    }
    if (ptcb == OS_TCB_RESERVED) {                              /* See if assigned to Mutex            */
   16c38:	e0bffa17 	ldw	r2,-24(fp)
   16c3c:	10800058 	cmpnei	r2,r2,1
   16c40:	1000061e 	bne	r2,zero,16c5c <OSTaskSuspend+0x11c>
   16c44:	e0bff817 	ldw	r2,-32(fp)
   16c48:	e0bffb15 	stw	r2,-20(fp)
   16c4c:	e0bffb17 	ldw	r2,-20(fp)
   16c50:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
   16c54:	008010c4 	movi	r2,67
   16c58:	00002d06 	br	16d10 <OSTaskSuspend+0x1d0>
    }
    y            = ptcb->OSTCBY;
   16c5c:	e0bffa17 	ldw	r2,-24(fp)
   16c60:	10800d03 	ldbu	r2,52(r2)
   16c64:	e0bffd05 	stb	r2,-12(fp)
    OSRdyTbl[y] &= ~ptcb->OSTCBBitX;                            /* Make task not ready                 */
   16c68:	e0fffd03 	ldbu	r3,-12(fp)
   16c6c:	e13ffd03 	ldbu	r4,-12(fp)
   16c70:	d0a73044 	addi	r2,gp,-25407
   16c74:	2085883a 	add	r2,r4,r2
   16c78:	10800003 	ldbu	r2,0(r2)
   16c7c:	1009883a 	mov	r4,r2
   16c80:	e0bffa17 	ldw	r2,-24(fp)
   16c84:	10800d43 	ldbu	r2,53(r2)
   16c88:	0084303a 	nor	r2,zero,r2
   16c8c:	2084703a 	and	r2,r4,r2
   16c90:	1009883a 	mov	r4,r2
   16c94:	d0a73044 	addi	r2,gp,-25407
   16c98:	1885883a 	add	r2,r3,r2
   16c9c:	11000005 	stb	r4,0(r2)
    if (OSRdyTbl[y] == 0) {
   16ca0:	e0fffd03 	ldbu	r3,-12(fp)
   16ca4:	d0a73044 	addi	r2,gp,-25407
   16ca8:	1885883a 	add	r2,r3,r2
   16cac:	10800003 	ldbu	r2,0(r2)
   16cb0:	10803fcc 	andi	r2,r2,255
   16cb4:	1000071e 	bne	r2,zero,16cd4 <OSTaskSuspend+0x194>
        OSRdyGrp &= ~ptcb->OSTCBBitY;
   16cb8:	e0bffa17 	ldw	r2,-24(fp)
   16cbc:	10800d83 	ldbu	r2,54(r2)
   16cc0:	0084303a 	nor	r2,zero,r2
   16cc4:	1007883a 	mov	r3,r2
   16cc8:	d0a73003 	ldbu	r2,-25408(gp)
   16ccc:	1884703a 	and	r2,r3,r2
   16cd0:	d0a73005 	stb	r2,-25408(gp)
    }
    ptcb->OSTCBStat |= OS_STAT_SUSPEND;                         /* Status of task is 'SUSPENDED'       */
   16cd4:	e0bffa17 	ldw	r2,-24(fp)
   16cd8:	10800c03 	ldbu	r2,48(r2)
   16cdc:	10800214 	ori	r2,r2,8
   16ce0:	1007883a 	mov	r3,r2
   16ce4:	e0bffa17 	ldw	r2,-24(fp)
   16ce8:	10c00c05 	stb	r3,48(r2)
   16cec:	e0bff817 	ldw	r2,-32(fp)
   16cf0:	e0bffc15 	stw	r2,-16(fp)
   16cf4:	e0bffc17 	ldw	r2,-16(fp)
   16cf8:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    if (self == OS_TRUE) {                                      /* Context switch only if SELF         */
   16cfc:	e0bff703 	ldbu	r2,-36(fp)
   16d00:	10800058 	cmpnei	r2,r2,1
   16d04:	1000011e 	bne	r2,zero,16d0c <OSTaskSuspend+0x1cc>
        OS_Sched();                                             /* Find new highest priority task      */
   16d08:	00115100 	call	11510 <OS_Sched>
    }
    return (OS_ERR_NONE);
   16d0c:	0005883a 	mov	r2,zero
}
   16d10:	e037883a 	mov	sp,fp
   16d14:	dfc00117 	ldw	ra,4(sp)
   16d18:	df000017 	ldw	fp,0(sp)
   16d1c:	dec00204 	addi	sp,sp,8
   16d20:	f800283a 	ret

00016d24 <OSTaskQuery>:
*********************************************************************************************************
*/

#if OS_TASK_QUERY_EN > 0
INT8U  OSTaskQuery (INT8U prio, OS_TCB *p_task_data)
{
   16d24:	defff604 	addi	sp,sp,-40
   16d28:	dfc00915 	stw	ra,36(sp)
   16d2c:	df000815 	stw	fp,32(sp)
   16d30:	df000804 	addi	fp,sp,32
   16d34:	2005883a 	mov	r2,r4
   16d38:	e17fff15 	stw	r5,-4(fp)
   16d3c:	e0bffe05 	stb	r2,-8(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   16d40:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {                 /* Task priority valid ?                              */
   16d44:	e0bffe03 	ldbu	r2,-8(fp)
   16d48:	10800570 	cmpltui	r2,r2,21
   16d4c:	1000051e 	bne	r2,zero,16d64 <OSTaskQuery+0x40>
        if (prio != OS_PRIO_SELF) {
   16d50:	e0bffe03 	ldbu	r2,-8(fp)
   16d54:	10803fe0 	cmpeqi	r2,r2,255
   16d58:	1000021e 	bne	r2,zero,16d64 <OSTaskQuery+0x40>
            return (OS_ERR_PRIO_INVALID);
   16d5c:	00800a84 	movi	r2,42
   16d60:	00003406 	br	16e34 <OSTaskQuery+0x110>
        }
    }
    if (p_task_data == (OS_TCB *)0) {            /* Validate 'p_task_data'                             */
   16d64:	e0bfff17 	ldw	r2,-4(fp)
   16d68:	1000021e 	bne	r2,zero,16d74 <OSTaskQuery+0x50>
        return (OS_ERR_PDATA_NULL);
   16d6c:	00800244 	movi	r2,9
   16d70:	00003006 	br	16e34 <OSTaskQuery+0x110>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   16d74:	0005303a 	rdctl	r2,status
   16d78:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   16d7c:	e0fffd17 	ldw	r3,-12(fp)
   16d80:	00bfff84 	movi	r2,-2
   16d84:	1884703a 	and	r2,r3,r2
   16d88:	1001703a 	wrctl	status,r2
  
  return context;
   16d8c:	e0bffd17 	ldw	r2,-12(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   16d90:	e0bff815 	stw	r2,-32(fp)
    if (prio == OS_PRIO_SELF) {                  /* See if suspend SELF                                */
   16d94:	e0bffe03 	ldbu	r2,-8(fp)
   16d98:	10803fd8 	cmpnei	r2,r2,255
   16d9c:	1000031e 	bne	r2,zero,16dac <OSTaskQuery+0x88>
        prio = OSTCBCur->OSTCBPrio;
   16da0:	d0a73317 	ldw	r2,-25396(gp)
   16da4:	10800c83 	ldbu	r2,50(r2)
   16da8:	e0bffe05 	stb	r2,-8(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
   16dac:	e0fffe03 	ldbu	r3,-8(fp)
   16db0:	008000b4 	movhi	r2,2
   16db4:	10893404 	addi	r2,r2,9424
   16db8:	18c7883a 	add	r3,r3,r3
   16dbc:	18c7883a 	add	r3,r3,r3
   16dc0:	10c5883a 	add	r2,r2,r3
   16dc4:	10800017 	ldw	r2,0(r2)
   16dc8:	e0bffa15 	stw	r2,-24(fp)
    if (ptcb == (OS_TCB *)0) {                   /* Task to query must exist                           */
   16dcc:	e0bffa17 	ldw	r2,-24(fp)
   16dd0:	1000061e 	bne	r2,zero,16dec <OSTaskQuery+0xc8>
   16dd4:	e0bff817 	ldw	r2,-32(fp)
   16dd8:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   16ddc:	e0bff917 	ldw	r2,-28(fp)
   16de0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_PRIO);
   16de4:	00800a44 	movi	r2,41
   16de8:	00001206 	br	16e34 <OSTaskQuery+0x110>
    }
    if (ptcb == OS_TCB_RESERVED) {               /* Task to query must not be assigned to a Mutex      */
   16dec:	e0bffa17 	ldw	r2,-24(fp)
   16df0:	10800058 	cmpnei	r2,r2,1
   16df4:	1000061e 	bne	r2,zero,16e10 <OSTaskQuery+0xec>
   16df8:	e0bff817 	ldw	r2,-32(fp)
   16dfc:	e0bffb15 	stw	r2,-20(fp)
   16e00:	e0bffb17 	ldw	r2,-20(fp)
   16e04:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
   16e08:	008010c4 	movi	r2,67
   16e0c:	00000906 	br	16e34 <OSTaskQuery+0x110>
    }
                                                 /* Copy TCB into user storage area                    */
    OS_MemCopy((INT8U *)p_task_data, (INT8U *)ptcb, sizeof(OS_TCB));
   16e10:	01801b04 	movi	r6,108
   16e14:	e17ffa17 	ldw	r5,-24(fp)
   16e18:	e13fff17 	ldw	r4,-4(fp)
   16e1c:	00114a80 	call	114a8 <OS_MemCopy>
   16e20:	e0bff817 	ldw	r2,-32(fp)
   16e24:	e0bffc15 	stw	r2,-16(fp)
   16e28:	e0bffc17 	ldw	r2,-16(fp)
   16e2c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
   16e30:	0005883a 	mov	r2,zero
}
   16e34:	e037883a 	mov	sp,fp
   16e38:	dfc00117 	ldw	ra,4(sp)
   16e3c:	df000017 	ldw	fp,0(sp)
   16e40:	dec00204 	addi	sp,sp,8
   16e44:	f800283a 	ret

00016e48 <OS_TaskStkClr>:
* Returns    : none
*********************************************************************************************************
*/
#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
void  OS_TaskStkClr (OS_STK *pbos, INT32U size, INT16U opt)
{
   16e48:	defffc04 	addi	sp,sp,-16
   16e4c:	df000315 	stw	fp,12(sp)
   16e50:	df000304 	addi	fp,sp,12
   16e54:	e13ffd15 	stw	r4,-12(fp)
   16e58:	e17ffe15 	stw	r5,-8(fp)
   16e5c:	3005883a 	mov	r2,r6
   16e60:	e0bfff0d 	sth	r2,-4(fp)
    if ((opt & OS_TASK_OPT_STK_CHK) != 0x0000) {       /* See if stack checking has been enabled       */
   16e64:	e0bfff0b 	ldhu	r2,-4(fp)
   16e68:	1080004c 	andi	r2,r2,1
   16e6c:	10000d26 	beq	r2,zero,16ea4 <OS_TaskStkClr+0x5c>
        if ((opt & OS_TASK_OPT_STK_CLR) != 0x0000) {   /* See if stack needs to be cleared             */
   16e70:	e0bfff0b 	ldhu	r2,-4(fp)
   16e74:	1080008c 	andi	r2,r2,2
   16e78:	10000a26 	beq	r2,zero,16ea4 <OS_TaskStkClr+0x5c>
#if OS_STK_GROWTH == 1
            while (size > 0) {                         /* Stack grows from HIGH to LOW memory          */
   16e7c:	00000706 	br	16e9c <OS_TaskStkClr+0x54>
                size--;
   16e80:	e0bffe17 	ldw	r2,-8(fp)
   16e84:	10bfffc4 	addi	r2,r2,-1
   16e88:	e0bffe15 	stw	r2,-8(fp)
                *pbos++ = (OS_STK)0;                   /* Clear from bottom of stack and up!           */
   16e8c:	e0bffd17 	ldw	r2,-12(fp)
   16e90:	10c00104 	addi	r3,r2,4
   16e94:	e0fffd15 	stw	r3,-12(fp)
   16e98:	10000015 	stw	zero,0(r2)
void  OS_TaskStkClr (OS_STK *pbos, INT32U size, INT16U opt)
{
    if ((opt & OS_TASK_OPT_STK_CHK) != 0x0000) {       /* See if stack checking has been enabled       */
        if ((opt & OS_TASK_OPT_STK_CLR) != 0x0000) {   /* See if stack needs to be cleared             */
#if OS_STK_GROWTH == 1
            while (size > 0) {                         /* Stack grows from HIGH to LOW memory          */
   16e9c:	e0bffe17 	ldw	r2,-8(fp)
   16ea0:	103ff71e 	bne	r2,zero,16e80 <__alt_data_end+0xfffe6e80>
                *pbos-- = (OS_STK)0;                   /* Clear from bottom of stack and down          */
            }
#endif
        }
    }
}
   16ea4:	0001883a 	nop
   16ea8:	e037883a 	mov	sp,fp
   16eac:	df000017 	ldw	fp,0(sp)
   16eb0:	dec00104 	addi	sp,sp,4
   16eb4:	f800283a 	ret

00016eb8 <OSTimeDly>:
* Returns    : none
*********************************************************************************************************
*/

void  OSTimeDly (INT16U ticks)
{
   16eb8:	defff904 	addi	sp,sp,-28
   16ebc:	dfc00615 	stw	ra,24(sp)
   16ec0:	df000515 	stw	fp,20(sp)
   16ec4:	df000504 	addi	fp,sp,20
   16ec8:	2005883a 	mov	r2,r4
   16ecc:	e0bfff0d 	sth	r2,-4(fp)
    INT8U      y;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   16ed0:	e03ffb15 	stw	zero,-20(fp)
#endif



    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
   16ed4:	d0a73203 	ldbu	r2,-25400(gp)
   16ed8:	10803fcc 	andi	r2,r2,255
   16edc:	1000311e 	bne	r2,zero,16fa4 <OSTimeDly+0xec>
        return;
    }
    if (ticks > 0) {                             /* 0 means no delay!                                  */
   16ee0:	e0bfff0b 	ldhu	r2,-4(fp)
   16ee4:	10003026 	beq	r2,zero,16fa8 <OSTimeDly+0xf0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   16ee8:	0005303a 	rdctl	r2,status
   16eec:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   16ef0:	e0fffe17 	ldw	r3,-8(fp)
   16ef4:	00bfff84 	movi	r2,-2
   16ef8:	1884703a 	and	r2,r3,r2
   16efc:	1001703a 	wrctl	status,r2
  
  return context;
   16f00:	e0bffe17 	ldw	r2,-8(fp)
        OS_ENTER_CRITICAL();
   16f04:	e0bffb15 	stw	r2,-20(fp)
        y            =  OSTCBCur->OSTCBY;        /* Delay current task                                 */
   16f08:	d0a73317 	ldw	r2,-25396(gp)
   16f0c:	10800d03 	ldbu	r2,52(r2)
   16f10:	e0bffd05 	stb	r2,-12(fp)
        OSRdyTbl[y] &= ~OSTCBCur->OSTCBBitX;
   16f14:	e0fffd03 	ldbu	r3,-12(fp)
   16f18:	e13ffd03 	ldbu	r4,-12(fp)
   16f1c:	d0a73044 	addi	r2,gp,-25407
   16f20:	2085883a 	add	r2,r4,r2
   16f24:	10800003 	ldbu	r2,0(r2)
   16f28:	1009883a 	mov	r4,r2
   16f2c:	d0a73317 	ldw	r2,-25396(gp)
   16f30:	10800d43 	ldbu	r2,53(r2)
   16f34:	0084303a 	nor	r2,zero,r2
   16f38:	2084703a 	and	r2,r4,r2
   16f3c:	1009883a 	mov	r4,r2
   16f40:	d0a73044 	addi	r2,gp,-25407
   16f44:	1885883a 	add	r2,r3,r2
   16f48:	11000005 	stb	r4,0(r2)
        if (OSRdyTbl[y] == 0) {
   16f4c:	e0fffd03 	ldbu	r3,-12(fp)
   16f50:	d0a73044 	addi	r2,gp,-25407
   16f54:	1885883a 	add	r2,r3,r2
   16f58:	10800003 	ldbu	r2,0(r2)
   16f5c:	10803fcc 	andi	r2,r2,255
   16f60:	1000071e 	bne	r2,zero,16f80 <OSTimeDly+0xc8>
            OSRdyGrp &= ~OSTCBCur->OSTCBBitY;
   16f64:	d0a73317 	ldw	r2,-25396(gp)
   16f68:	10800d83 	ldbu	r2,54(r2)
   16f6c:	0084303a 	nor	r2,zero,r2
   16f70:	1007883a 	mov	r3,r2
   16f74:	d0a73003 	ldbu	r2,-25408(gp)
   16f78:	1884703a 	and	r2,r3,r2
   16f7c:	d0a73005 	stb	r2,-25408(gp)
        }
        OSTCBCur->OSTCBDly = ticks;              /* Load ticks in TCB                                  */
   16f80:	d0a73317 	ldw	r2,-25396(gp)
   16f84:	e0ffff0b 	ldhu	r3,-4(fp)
   16f88:	10c00b8d 	sth	r3,46(r2)
   16f8c:	e0bffb17 	ldw	r2,-20(fp)
   16f90:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   16f94:	e0bffc17 	ldw	r2,-16(fp)
   16f98:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                              /* Find next task to run!                             */
   16f9c:	00115100 	call	11510 <OS_Sched>
   16fa0:	00000106 	br	16fa8 <OSTimeDly+0xf0>
#endif



    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
        return;
   16fa4:	0001883a 	nop
        }
        OSTCBCur->OSTCBDly = ticks;              /* Load ticks in TCB                                  */
        OS_EXIT_CRITICAL();
        OS_Sched();                              /* Find next task to run!                             */
    }
}
   16fa8:	e037883a 	mov	sp,fp
   16fac:	dfc00117 	ldw	ra,4(sp)
   16fb0:	df000017 	ldw	fp,0(sp)
   16fb4:	dec00204 	addi	sp,sp,8
   16fb8:	f800283a 	ret

00016fbc <OSTimeDlyHMSM>:
*********************************************************************************************************
*/

#if OS_TIME_DLY_HMSM_EN > 0
INT8U  OSTimeDlyHMSM (INT8U hours, INT8U minutes, INT8U seconds, INT16U ms)
{
   16fbc:	defff704 	addi	sp,sp,-36
   16fc0:	dfc00815 	stw	ra,32(sp)
   16fc4:	df000715 	stw	fp,28(sp)
   16fc8:	dc000615 	stw	r16,24(sp)
   16fcc:	df000704 	addi	fp,sp,28
   16fd0:	2011883a 	mov	r8,r4
   16fd4:	2809883a 	mov	r4,r5
   16fd8:	3007883a 	mov	r3,r6
   16fdc:	3805883a 	mov	r2,r7
   16fe0:	e23ffb05 	stb	r8,-20(fp)
   16fe4:	e13ffc05 	stb	r4,-16(fp)
   16fe8:	e0fffd05 	stb	r3,-12(fp)
   16fec:	e0bffe0d 	sth	r2,-8(fp)
    INT32U ticks;
    INT16U loops;


    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
   16ff0:	d0a73203 	ldbu	r2,-25400(gp)
   16ff4:	10803fcc 	andi	r2,r2,255
   16ff8:	10000226 	beq	r2,zero,17004 <OSTimeDlyHMSM+0x48>
        return (OS_ERR_TIME_DLY_ISR);
   16ffc:	00801544 	movi	r2,85
   17000:	00004706 	br	17120 <OSTimeDlyHMSM+0x164>
    }
#if OS_ARG_CHK_EN > 0
    if (hours == 0) {
   17004:	e0bffb03 	ldbu	r2,-20(fp)
   17008:	1000081e 	bne	r2,zero,1702c <OSTimeDlyHMSM+0x70>
        if (minutes == 0) {
   1700c:	e0bffc03 	ldbu	r2,-16(fp)
   17010:	1000061e 	bne	r2,zero,1702c <OSTimeDlyHMSM+0x70>
            if (seconds == 0) {
   17014:	e0bffd03 	ldbu	r2,-12(fp)
   17018:	1000041e 	bne	r2,zero,1702c <OSTimeDlyHMSM+0x70>
                if (ms == 0) {
   1701c:	e0bffe0b 	ldhu	r2,-8(fp)
   17020:	1000021e 	bne	r2,zero,1702c <OSTimeDlyHMSM+0x70>
                    return (OS_ERR_TIME_ZERO_DLY);
   17024:	00801504 	movi	r2,84
   17028:	00003d06 	br	17120 <OSTimeDlyHMSM+0x164>
                }
            }
        }
    }
    if (minutes > 59) {
   1702c:	e0bffc03 	ldbu	r2,-16(fp)
   17030:	10800f30 	cmpltui	r2,r2,60
   17034:	1000021e 	bne	r2,zero,17040 <OSTimeDlyHMSM+0x84>
        return (OS_ERR_TIME_INVALID_MINUTES);    /* Validate arguments to be within range              */
   17038:	00801444 	movi	r2,81
   1703c:	00003806 	br	17120 <OSTimeDlyHMSM+0x164>
    }
    if (seconds > 59) {
   17040:	e0bffd03 	ldbu	r2,-12(fp)
   17044:	10800f30 	cmpltui	r2,r2,60
   17048:	1000021e 	bne	r2,zero,17054 <OSTimeDlyHMSM+0x98>
        return (OS_ERR_TIME_INVALID_SECONDS);
   1704c:	00801484 	movi	r2,82
   17050:	00003306 	br	17120 <OSTimeDlyHMSM+0x164>
    }
    if (ms > 999) {
   17054:	e0bffe0b 	ldhu	r2,-8(fp)
   17058:	1080fa30 	cmpltui	r2,r2,1000
   1705c:	1000021e 	bne	r2,zero,17068 <OSTimeDlyHMSM+0xac>
        return (OS_ERR_TIME_INVALID_MS);
   17060:	008014c4 	movi	r2,83
   17064:	00002e06 	br	17120 <OSTimeDlyHMSM+0x164>
    }
#endif
                                                 /* Compute the total number of clock ticks required.. */
                                                 /* .. (rounded to the nearest tick)                   */
    ticks = ((INT32U)hours * 3600L + (INT32U)minutes * 60L + (INT32U)seconds) * OS_TICKS_PER_SEC
   17068:	e0bffb03 	ldbu	r2,-20(fp)
   1706c:	01438404 	movi	r5,3600
   17070:	1009883a 	mov	r4,r2
   17074:	000c3c80 	call	c3c8 <__mulsi3>
   17078:	1021883a 	mov	r16,r2
   1707c:	e0bffc03 	ldbu	r2,-16(fp)
   17080:	01400f04 	movi	r5,60
   17084:	1009883a 	mov	r4,r2
   17088:	000c3c80 	call	c3c8 <__mulsi3>
   1708c:	8087883a 	add	r3,r16,r2
   17090:	e0bffd03 	ldbu	r2,-12(fp)
   17094:	1885883a 	add	r2,r3,r2
   17098:	0140fa04 	movi	r5,1000
   1709c:	1009883a 	mov	r4,r2
   170a0:	000c3c80 	call	c3c8 <__mulsi3>
   170a4:	1021883a 	mov	r16,r2
          + OS_TICKS_PER_SEC * ((INT32U)ms + 500L / OS_TICKS_PER_SEC) / 1000L;
   170a8:	e0bffe0b 	ldhu	r2,-8(fp)
   170ac:	0140fa04 	movi	r5,1000
   170b0:	1009883a 	mov	r4,r2
   170b4:	000c3c80 	call	c3c8 <__mulsi3>
   170b8:	0140fa04 	movi	r5,1000
   170bc:	1009883a 	mov	r4,r2
   170c0:	0000dc40 	call	dc4 <__udivsi3>
        return (OS_ERR_TIME_INVALID_MS);
    }
#endif
                                                 /* Compute the total number of clock ticks required.. */
                                                 /* .. (rounded to the nearest tick)                   */
    ticks = ((INT32U)hours * 3600L + (INT32U)minutes * 60L + (INT32U)seconds) * OS_TICKS_PER_SEC
   170c4:	8085883a 	add	r2,r16,r2
   170c8:	e0bffa15 	stw	r2,-24(fp)
          + OS_TICKS_PER_SEC * ((INT32U)ms + 500L / OS_TICKS_PER_SEC) / 1000L;
    loops = (INT16U)(ticks >> 16);               /* Compute the integral number of 65536 tick delays   */
   170cc:	e0bffa17 	ldw	r2,-24(fp)
   170d0:	1004d43a 	srli	r2,r2,16
   170d4:	e0bff90d 	sth	r2,-28(fp)
    ticks = ticks & 0xFFFFL;                     /* Obtain  the fractional number of ticks             */
   170d8:	e0bffa17 	ldw	r2,-24(fp)
   170dc:	10bfffcc 	andi	r2,r2,65535
   170e0:	e0bffa15 	stw	r2,-24(fp)
    OSTimeDly((INT16U)ticks);
   170e4:	e0bffa17 	ldw	r2,-24(fp)
   170e8:	10bfffcc 	andi	r2,r2,65535
   170ec:	1009883a 	mov	r4,r2
   170f0:	0016eb80 	call	16eb8 <OSTimeDly>
    while (loops > 0) {
   170f4:	00000706 	br	17114 <OSTimeDlyHMSM+0x158>
        OSTimeDly((INT16U)32768u);
   170f8:	01200014 	movui	r4,32768
   170fc:	0016eb80 	call	16eb8 <OSTimeDly>
        OSTimeDly((INT16U)32768u);
   17100:	01200014 	movui	r4,32768
   17104:	0016eb80 	call	16eb8 <OSTimeDly>
        loops--;
   17108:	e0bff90b 	ldhu	r2,-28(fp)
   1710c:	10bfffc4 	addi	r2,r2,-1
   17110:	e0bff90d 	sth	r2,-28(fp)
    ticks = ((INT32U)hours * 3600L + (INT32U)minutes * 60L + (INT32U)seconds) * OS_TICKS_PER_SEC
          + OS_TICKS_PER_SEC * ((INT32U)ms + 500L / OS_TICKS_PER_SEC) / 1000L;
    loops = (INT16U)(ticks >> 16);               /* Compute the integral number of 65536 tick delays   */
    ticks = ticks & 0xFFFFL;                     /* Obtain  the fractional number of ticks             */
    OSTimeDly((INT16U)ticks);
    while (loops > 0) {
   17114:	e0bff90b 	ldhu	r2,-28(fp)
   17118:	103ff71e 	bne	r2,zero,170f8 <__alt_data_end+0xfffe70f8>
        OSTimeDly((INT16U)32768u);
        OSTimeDly((INT16U)32768u);
        loops--;
    }
    return (OS_ERR_NONE);
   1711c:	0005883a 	mov	r2,zero
}
   17120:	e6ffff04 	addi	sp,fp,-4
   17124:	dfc00217 	ldw	ra,8(sp)
   17128:	df000117 	ldw	fp,4(sp)
   1712c:	dc000017 	ldw	r16,0(sp)
   17130:	dec00304 	addi	sp,sp,12
   17134:	f800283a 	ret

00017138 <OSTimeDlyResume>:
*********************************************************************************************************
*/

#if OS_TIME_DLY_RESUME_EN > 0
INT8U  OSTimeDlyResume (INT8U prio)
{
   17138:	defff504 	addi	sp,sp,-44
   1713c:	dfc00a15 	stw	ra,40(sp)
   17140:	df000915 	stw	fp,36(sp)
   17144:	df000904 	addi	fp,sp,36
   17148:	2005883a 	mov	r2,r4
   1714c:	e0bfff05 	stb	r2,-4(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                                    /* Storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   17150:	e03ff715 	stw	zero,-36(fp)
#endif



    if (prio >= OS_LOWEST_PRIO) {
   17154:	e0bfff03 	ldbu	r2,-4(fp)
   17158:	10800530 	cmpltui	r2,r2,20
   1715c:	1000021e 	bne	r2,zero,17168 <OSTimeDlyResume+0x30>
        return (OS_ERR_PRIO_INVALID);
   17160:	00800a84 	movi	r2,42
   17164:	00006406 	br	172f8 <OSTimeDlyResume+0x1c0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   17168:	0005303a 	rdctl	r2,status
   1716c:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   17170:	e0fffe17 	ldw	r3,-8(fp)
   17174:	00bfff84 	movi	r2,-2
   17178:	1884703a 	and	r2,r3,r2
   1717c:	1001703a 	wrctl	status,r2
  
  return context;
   17180:	e0bffe17 	ldw	r2,-8(fp)
    }
    OS_ENTER_CRITICAL();
   17184:	e0bff715 	stw	r2,-36(fp)
    ptcb = OSTCBPrioTbl[prio];                                 /* Make sure that task exist            */
   17188:	e0ffff03 	ldbu	r3,-4(fp)
   1718c:	008000b4 	movhi	r2,2
   17190:	10893404 	addi	r2,r2,9424
   17194:	18c7883a 	add	r3,r3,r3
   17198:	18c7883a 	add	r3,r3,r3
   1719c:	10c5883a 	add	r2,r2,r3
   171a0:	10800017 	ldw	r2,0(r2)
   171a4:	e0bff915 	stw	r2,-28(fp)
    if (ptcb == (OS_TCB *)0) {
   171a8:	e0bff917 	ldw	r2,-28(fp)
   171ac:	1000061e 	bne	r2,zero,171c8 <OSTimeDlyResume+0x90>
   171b0:	e0bff717 	ldw	r2,-36(fp)
   171b4:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   171b8:	e0bff817 	ldw	r2,-32(fp)
   171bc:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);                        /* The task does not exist              */
   171c0:	008010c4 	movi	r2,67
   171c4:	00004c06 	br	172f8 <OSTimeDlyResume+0x1c0>
    }
    if (ptcb == OS_TCB_RESERVED) {
   171c8:	e0bff917 	ldw	r2,-28(fp)
   171cc:	10800058 	cmpnei	r2,r2,1
   171d0:	1000061e 	bne	r2,zero,171ec <OSTimeDlyResume+0xb4>
   171d4:	e0bff717 	ldw	r2,-36(fp)
   171d8:	e0bffa15 	stw	r2,-24(fp)
   171dc:	e0bffa17 	ldw	r2,-24(fp)
   171e0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);                        /* The task does not exist              */
   171e4:	008010c4 	movi	r2,67
   171e8:	00004306 	br	172f8 <OSTimeDlyResume+0x1c0>
    }
    if (ptcb->OSTCBDly == 0) {                                 /* See if task is delayed               */
   171ec:	e0bff917 	ldw	r2,-28(fp)
   171f0:	10800b8b 	ldhu	r2,46(r2)
   171f4:	10bfffcc 	andi	r2,r2,65535
   171f8:	1000061e 	bne	r2,zero,17214 <OSTimeDlyResume+0xdc>
   171fc:	e0bff717 	ldw	r2,-36(fp)
   17200:	e0bffb15 	stw	r2,-20(fp)
   17204:	e0bffb17 	ldw	r2,-20(fp)
   17208:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TIME_NOT_DLY);                          /* Indicate that task was not delayed   */
   1720c:	00801404 	movi	r2,80
   17210:	00003906 	br	172f8 <OSTimeDlyResume+0x1c0>
    }

    ptcb->OSTCBDly = 0;                                        /* Clear the time delay                 */
   17214:	e0bff917 	ldw	r2,-28(fp)
   17218:	10000b8d 	sth	zero,46(r2)
    if ((ptcb->OSTCBStat & OS_STAT_PEND_ANY) != OS_STAT_RDY) {
   1721c:	e0bff917 	ldw	r2,-28(fp)
   17220:	10800c03 	ldbu	r2,48(r2)
   17224:	10803fcc 	andi	r2,r2,255
   17228:	10800dcc 	andi	r2,r2,55
   1722c:	10000b26 	beq	r2,zero,1725c <OSTimeDlyResume+0x124>
        ptcb->OSTCBStat     &= ~OS_STAT_PEND_ANY;              /* Yes, Clear status flag               */
   17230:	e0bff917 	ldw	r2,-28(fp)
   17234:	10c00c03 	ldbu	r3,48(r2)
   17238:	00bff204 	movi	r2,-56
   1723c:	1884703a 	and	r2,r3,r2
   17240:	1007883a 	mov	r3,r2
   17244:	e0bff917 	ldw	r2,-28(fp)
   17248:	10c00c05 	stb	r3,48(r2)
        ptcb->OSTCBStatPend  =  OS_STAT_PEND_TO;               /* Indicate PEND timeout                */
   1724c:	e0bff917 	ldw	r2,-28(fp)
   17250:	00c00044 	movi	r3,1
   17254:	10c00c45 	stb	r3,49(r2)
   17258:	00000206 	br	17264 <OSTimeDlyResume+0x12c>
    } else {
        ptcb->OSTCBStatPend  =  OS_STAT_PEND_OK;
   1725c:	e0bff917 	ldw	r2,-28(fp)
   17260:	10000c45 	stb	zero,49(r2)
    }
    if ((ptcb->OSTCBStat & OS_STAT_SUSPEND) == OS_STAT_RDY) {  /* Is task suspended?                   */
   17264:	e0bff917 	ldw	r2,-28(fp)
   17268:	10800c03 	ldbu	r2,48(r2)
   1726c:	10803fcc 	andi	r2,r2,255
   17270:	1080020c 	andi	r2,r2,8
   17274:	10001b1e 	bne	r2,zero,172e4 <OSTimeDlyResume+0x1ac>
        OSRdyGrp               |= ptcb->OSTCBBitY;             /* No,  Make ready                      */
   17278:	e0bff917 	ldw	r2,-28(fp)
   1727c:	10c00d83 	ldbu	r3,54(r2)
   17280:	d0a73003 	ldbu	r2,-25408(gp)
   17284:	1884b03a 	or	r2,r3,r2
   17288:	d0a73005 	stb	r2,-25408(gp)
        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
   1728c:	e0bff917 	ldw	r2,-28(fp)
   17290:	10800d03 	ldbu	r2,52(r2)
   17294:	10c03fcc 	andi	r3,r2,255
   17298:	e0bff917 	ldw	r2,-28(fp)
   1729c:	10800d03 	ldbu	r2,52(r2)
   172a0:	11003fcc 	andi	r4,r2,255
   172a4:	d0a73044 	addi	r2,gp,-25407
   172a8:	2085883a 	add	r2,r4,r2
   172ac:	11000003 	ldbu	r4,0(r2)
   172b0:	e0bff917 	ldw	r2,-28(fp)
   172b4:	10800d43 	ldbu	r2,53(r2)
   172b8:	2084b03a 	or	r2,r4,r2
   172bc:	1009883a 	mov	r4,r2
   172c0:	d0a73044 	addi	r2,gp,-25407
   172c4:	1885883a 	add	r2,r3,r2
   172c8:	11000005 	stb	r4,0(r2)
   172cc:	e0bff717 	ldw	r2,-36(fp)
   172d0:	e0bffc15 	stw	r2,-16(fp)
   172d4:	e0bffc17 	ldw	r2,-16(fp)
   172d8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                            /* See if this is new highest priority  */
   172dc:	00115100 	call	11510 <OS_Sched>
   172e0:	00000406 	br	172f4 <OSTimeDlyResume+0x1bc>
   172e4:	e0bff717 	ldw	r2,-36(fp)
   172e8:	e0bffd15 	stw	r2,-12(fp)
   172ec:	e0bffd17 	ldw	r2,-12(fp)
   172f0:	1001703a 	wrctl	status,r2
    } else {
        OS_EXIT_CRITICAL();                                    /* Task may be suspended                */
    }
    return (OS_ERR_NONE);
   172f4:	0005883a 	mov	r2,zero
}
   172f8:	e037883a 	mov	sp,fp
   172fc:	dfc00117 	ldw	ra,4(sp)
   17300:	df000017 	ldw	fp,0(sp)
   17304:	dec00204 	addi	sp,sp,8
   17308:	f800283a 	ret

0001730c <OSTimeGet>:
*********************************************************************************************************
*/

#if OS_TIME_GET_SET_EN > 0
INT32U  OSTimeGet (void)
{
   1730c:	defffb04 	addi	sp,sp,-20
   17310:	df000415 	stw	fp,16(sp)
   17314:	df000404 	addi	fp,sp,16
    INT32U     ticks;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   17318:	e03ffc15 	stw	zero,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1731c:	0005303a 	rdctl	r2,status
   17320:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   17324:	e0fffe17 	ldw	r3,-8(fp)
   17328:	00bfff84 	movi	r2,-2
   1732c:	1884703a 	and	r2,r3,r2
   17330:	1001703a 	wrctl	status,r2
  
  return context;
   17334:	e0bffe17 	ldw	r2,-8(fp)
#endif



    OS_ENTER_CRITICAL();
   17338:	e0bffc15 	stw	r2,-16(fp)
    ticks = OSTime;
   1733c:	d0a73417 	ldw	r2,-25392(gp)
   17340:	e0bffd15 	stw	r2,-12(fp)
   17344:	e0bffc17 	ldw	r2,-16(fp)
   17348:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1734c:	e0bfff17 	ldw	r2,-4(fp)
   17350:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (ticks);
   17354:	e0bffd17 	ldw	r2,-12(fp)
}
   17358:	e037883a 	mov	sp,fp
   1735c:	df000017 	ldw	fp,0(sp)
   17360:	dec00104 	addi	sp,sp,4
   17364:	f800283a 	ret

00017368 <OSTimeSet>:
*********************************************************************************************************
*/

#if OS_TIME_GET_SET_EN > 0
void  OSTimeSet (INT32U ticks)
{
   17368:	defffb04 	addi	sp,sp,-20
   1736c:	df000415 	stw	fp,16(sp)
   17370:	df000404 	addi	fp,sp,16
   17374:	e13fff15 	stw	r4,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   17378:	e03ffc15 	stw	zero,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1737c:	0005303a 	rdctl	r2,status
   17380:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   17384:	e0fffd17 	ldw	r3,-12(fp)
   17388:	00bfff84 	movi	r2,-2
   1738c:	1884703a 	and	r2,r3,r2
   17390:	1001703a 	wrctl	status,r2
  
  return context;
   17394:	e0bffd17 	ldw	r2,-12(fp)
#endif



    OS_ENTER_CRITICAL();
   17398:	e0bffc15 	stw	r2,-16(fp)
    OSTime = ticks;
   1739c:	e0bfff17 	ldw	r2,-4(fp)
   173a0:	d0a73415 	stw	r2,-25392(gp)
   173a4:	e0bffc17 	ldw	r2,-16(fp)
   173a8:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   173ac:	e0bffe17 	ldw	r2,-8(fp)
   173b0:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
}
   173b4:	0001883a 	nop
   173b8:	e037883a 	mov	sp,fp
   173bc:	df000017 	ldw	fp,0(sp)
   173c0:	dec00104 	addi	sp,sp,4
   173c4:	f800283a 	ret

000173c8 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
   173c8:	defffd04 	addi	sp,sp,-12
   173cc:	dfc00215 	stw	ra,8(sp)
   173d0:	df000115 	stw	fp,4(sp)
   173d4:	df000104 	addi	fp,sp,4
   173d8:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
   173dc:	d1600904 	addi	r5,gp,-32732
   173e0:	e13fff17 	ldw	r4,-4(fp)
   173e4:	00184400 	call	18440 <alt_dev_llist_insert>
}
   173e8:	e037883a 	mov	sp,fp
   173ec:	dfc00117 	ldw	ra,4(sp)
   173f0:	df000017 	ldw	fp,0(sp)
   173f4:	dec00204 	addi	sp,sp,8
   173f8:	f800283a 	ret

000173fc <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
   173fc:	defffd04 	addi	sp,sp,-12
   17400:	dfc00215 	stw	ra,8(sp)
   17404:	df000115 	stw	fp,4(sp)
   17408:	df000104 	addi	fp,sp,4
   1740c:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( NIOS2, nios2);
   17410:	0018b4c0 	call	18b4c <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
   17414:	00800044 	movi	r2,1
   17418:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
   1741c:	0001883a 	nop
   17420:	e037883a 	mov	sp,fp
   17424:	dfc00117 	ldw	ra,4(sp)
   17428:	df000017 	ldw	fp,0(sp)
   1742c:	dec00204 	addi	sp,sp,8
   17430:	f800283a 	ret

00017434 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
   17434:	defffe04 	addi	sp,sp,-8
   17438:	dfc00115 	stw	ra,4(sp)
   1743c:	df000015 	stw	fp,0(sp)
   17440:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER, timer);
   17444:	01c0fa04 	movi	r7,1000
   17448:	000d883a 	mov	r6,zero
   1744c:	000b883a 	mov	r5,zero
   17450:	01000134 	movhi	r4,4
   17454:	21040004 	addi	r4,r4,4096
   17458:	001823c0 	call	1823c <alt_avalon_timer_sc_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, jtag_uart);
   1745c:	01800044 	movi	r6,1
   17460:	000b883a 	mov	r5,zero
   17464:	010000b4 	movhi	r4,2
   17468:	21291604 	addi	r4,r4,-23464
   1746c:	00175fc0 	call	175fc <altera_avalon_jtag_uart_init>
   17470:	010000b4 	movhi	r4,2
   17474:	21290c04 	addi	r4,r4,-23504
   17478:	00173c80 	call	173c8 <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID, sysid);
   1747c:	0001883a 	nop
}
   17480:	0001883a 	nop
   17484:	e037883a 	mov	sp,fp
   17488:	dfc00117 	ldw	ra,4(sp)
   1748c:	df000017 	ldw	fp,0(sp)
   17490:	dec00204 	addi	sp,sp,8
   17494:	f800283a 	ret

00017498 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
   17498:	defffa04 	addi	sp,sp,-24
   1749c:	dfc00515 	stw	ra,20(sp)
   174a0:	df000415 	stw	fp,16(sp)
   174a4:	df000404 	addi	fp,sp,16
   174a8:	e13ffd15 	stw	r4,-12(fp)
   174ac:	e17ffe15 	stw	r5,-8(fp)
   174b0:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   174b4:	e0bffd17 	ldw	r2,-12(fp)
   174b8:	10800017 	ldw	r2,0(r2)
   174bc:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
   174c0:	e0bffc17 	ldw	r2,-16(fp)
   174c4:	10c00a04 	addi	r3,r2,40
   174c8:	e0bffd17 	ldw	r2,-12(fp)
   174cc:	10800217 	ldw	r2,8(r2)
   174d0:	100f883a 	mov	r7,r2
   174d4:	e1bfff17 	ldw	r6,-4(fp)
   174d8:	e17ffe17 	ldw	r5,-8(fp)
   174dc:	1809883a 	mov	r4,r3
   174e0:	0017c440 	call	17c44 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
   174e4:	e037883a 	mov	sp,fp
   174e8:	dfc00117 	ldw	ra,4(sp)
   174ec:	df000017 	ldw	fp,0(sp)
   174f0:	dec00204 	addi	sp,sp,8
   174f4:	f800283a 	ret

000174f8 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
   174f8:	defffa04 	addi	sp,sp,-24
   174fc:	dfc00515 	stw	ra,20(sp)
   17500:	df000415 	stw	fp,16(sp)
   17504:	df000404 	addi	fp,sp,16
   17508:	e13ffd15 	stw	r4,-12(fp)
   1750c:	e17ffe15 	stw	r5,-8(fp)
   17510:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   17514:	e0bffd17 	ldw	r2,-12(fp)
   17518:	10800017 	ldw	r2,0(r2)
   1751c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
   17520:	e0bffc17 	ldw	r2,-16(fp)
   17524:	10c00a04 	addi	r3,r2,40
   17528:	e0bffd17 	ldw	r2,-12(fp)
   1752c:	10800217 	ldw	r2,8(r2)
   17530:	100f883a 	mov	r7,r2
   17534:	e1bfff17 	ldw	r6,-4(fp)
   17538:	e17ffe17 	ldw	r5,-8(fp)
   1753c:	1809883a 	mov	r4,r3
   17540:	0017f000 	call	17f00 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
   17544:	e037883a 	mov	sp,fp
   17548:	dfc00117 	ldw	ra,4(sp)
   1754c:	df000017 	ldw	fp,0(sp)
   17550:	dec00204 	addi	sp,sp,8
   17554:	f800283a 	ret

00017558 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
   17558:	defffc04 	addi	sp,sp,-16
   1755c:	dfc00315 	stw	ra,12(sp)
   17560:	df000215 	stw	fp,8(sp)
   17564:	df000204 	addi	fp,sp,8
   17568:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   1756c:	e0bfff17 	ldw	r2,-4(fp)
   17570:	10800017 	ldw	r2,0(r2)
   17574:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
   17578:	e0bffe17 	ldw	r2,-8(fp)
   1757c:	10c00a04 	addi	r3,r2,40
   17580:	e0bfff17 	ldw	r2,-4(fp)
   17584:	10800217 	ldw	r2,8(r2)
   17588:	100b883a 	mov	r5,r2
   1758c:	1809883a 	mov	r4,r3
   17590:	0017aec0 	call	17aec <altera_avalon_jtag_uart_close>
}
   17594:	e037883a 	mov	sp,fp
   17598:	dfc00117 	ldw	ra,4(sp)
   1759c:	df000017 	ldw	fp,0(sp)
   175a0:	dec00204 	addi	sp,sp,8
   175a4:	f800283a 	ret

000175a8 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
   175a8:	defffa04 	addi	sp,sp,-24
   175ac:	dfc00515 	stw	ra,20(sp)
   175b0:	df000415 	stw	fp,16(sp)
   175b4:	df000404 	addi	fp,sp,16
   175b8:	e13ffd15 	stw	r4,-12(fp)
   175bc:	e17ffe15 	stw	r5,-8(fp)
   175c0:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
   175c4:	e0bffd17 	ldw	r2,-12(fp)
   175c8:	10800017 	ldw	r2,0(r2)
   175cc:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
   175d0:	e0bffc17 	ldw	r2,-16(fp)
   175d4:	10800a04 	addi	r2,r2,40
   175d8:	e1bfff17 	ldw	r6,-4(fp)
   175dc:	e17ffe17 	ldw	r5,-8(fp)
   175e0:	1009883a 	mov	r4,r2
   175e4:	0017b540 	call	17b54 <altera_avalon_jtag_uart_ioctl>
}
   175e8:	e037883a 	mov	sp,fp
   175ec:	dfc00117 	ldw	ra,4(sp)
   175f0:	df000017 	ldw	fp,0(sp)
   175f4:	dec00204 	addi	sp,sp,8
   175f8:	f800283a 	ret

000175fc <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
   175fc:	defff104 	addi	sp,sp,-60
   17600:	dfc00e15 	stw	ra,56(sp)
   17604:	df000d15 	stw	fp,52(sp)
   17608:	df000d04 	addi	fp,sp,52
   1760c:	e13ff915 	stw	r4,-28(fp)
   17610:	e17ffa15 	stw	r5,-24(fp)
   17614:	e1bffb15 	stw	r6,-20(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
   17618:	e0bff917 	ldw	r2,-28(fp)
   1761c:	10800c04 	addi	r2,r2,48
   17620:	e0bff415 	stw	r2,-48(fp)
   17624:	e03ff80d 	sth	zero,-32(fp)

static ALT_INLINE int ALT_ALWAYS_INLINE alt_flag_create (OS_FLAG_GRP** pgroup, 
               OS_FLAGS flags)
{
  INT8U err;
  *pgroup = OSFlagCreate (flags, &err);
   17628:	e0bff80b 	ldhu	r2,-32(fp)
   1762c:	e0fff884 	addi	r3,fp,-30
   17630:	180b883a 	mov	r5,r3
   17634:	1009883a 	mov	r4,r2
   17638:	001207c0 	call	1207c <OSFlagCreate>
   1763c:	1007883a 	mov	r3,r2
   17640:	e0bff417 	ldw	r2,-48(fp)
   17644:	10c00015 	stw	r3,0(r2)
  ALT_SEM_CREATE(&sp->read_lock, 1);
   17648:	e0bff917 	ldw	r2,-28(fp)
   1764c:	10800a04 	addi	r2,r2,40
   17650:	e0bff515 	stw	r2,-44(fp)
   17654:	00800044 	movi	r2,1
   17658:	e0bff78d 	sth	r2,-34(fp)
   1765c:	e0bff78b 	ldhu	r2,-34(fp)
   17660:	1009883a 	mov	r4,r2
   17664:	0014d9c0 	call	14d9c <OSSemCreate>
   17668:	1007883a 	mov	r3,r2
   1766c:	e0bff517 	ldw	r2,-44(fp)
   17670:	10c00015 	stw	r3,0(r2)
  ALT_SEM_CREATE(&sp->write_lock, 1);
   17674:	e0bff917 	ldw	r2,-28(fp)
   17678:	10800b04 	addi	r2,r2,44
   1767c:	e0bff615 	stw	r2,-40(fp)
   17680:	00800044 	movi	r2,1
   17684:	e0bff70d 	sth	r2,-36(fp)
   17688:	e0bff70b 	ldhu	r2,-36(fp)
   1768c:	1009883a 	mov	r4,r2
   17690:	0014d9c0 	call	14d9c <OSSemCreate>
   17694:	1007883a 	mov	r3,r2
   17698:	e0bff617 	ldw	r2,-40(fp)
   1769c:	10c00015 	stw	r3,0(r2)

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   176a0:	e0bff917 	ldw	r2,-28(fp)
   176a4:	00c00044 	movi	r3,1
   176a8:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
   176ac:	e0bff917 	ldw	r2,-28(fp)
   176b0:	10800017 	ldw	r2,0(r2)
   176b4:	10800104 	addi	r2,r2,4
   176b8:	1007883a 	mov	r3,r2
   176bc:	e0bff917 	ldw	r2,-28(fp)
   176c0:	10800817 	ldw	r2,32(r2)
   176c4:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
   176c8:	e0bffa17 	ldw	r2,-24(fp)
   176cc:	e0fffb17 	ldw	r3,-20(fp)
   176d0:	d8000015 	stw	zero,0(sp)
   176d4:	e1fff917 	ldw	r7,-28(fp)
   176d8:	01800074 	movhi	r6,1
   176dc:	319dd104 	addi	r6,r6,30532
   176e0:	180b883a 	mov	r5,r3
   176e4:	1009883a 	mov	r4,r2
   176e8:	000eec80 	call	eec8 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
   176ec:	e0bff917 	ldw	r2,-28(fp)
   176f0:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
   176f4:	e0bff917 	ldw	r2,-28(fp)
   176f8:	10800204 	addi	r2,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   176fc:	d0e73817 	ldw	r3,-25376(gp)
   17700:	e1fff917 	ldw	r7,-28(fp)
   17704:	01800074 	movhi	r6,1
   17708:	319e7a04 	addi	r6,r6,31208
   1770c:	180b883a 	mov	r5,r3
   17710:	1009883a 	mov	r4,r2
   17714:	00182b80 	call	182b8 <alt_alarm_start>
   17718:	1000040e 	bge	r2,zero,1772c <altera_avalon_jtag_uart_init+0x130>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
   1771c:	e0fff917 	ldw	r3,-28(fp)
   17720:	00a00034 	movhi	r2,32768
   17724:	10bfffc4 	addi	r2,r2,-1
   17728:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
   1772c:	0001883a 	nop
   17730:	e037883a 	mov	sp,fp
   17734:	dfc00117 	ldw	ra,4(sp)
   17738:	df000017 	ldw	fp,0(sp)
   1773c:	dec00204 	addi	sp,sp,8
   17740:	f800283a 	ret

00017744 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
   17744:	defff204 	addi	sp,sp,-56
   17748:	dfc00d15 	stw	ra,52(sp)
   1774c:	df000c15 	stw	fp,48(sp)
   17750:	df000c04 	addi	fp,sp,48
   17754:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
   17758:	e0bfff17 	ldw	r2,-4(fp)
   1775c:	e0bff615 	stw	r2,-40(fp)
  unsigned int base = sp->base;
   17760:	e0bff617 	ldw	r2,-40(fp)
   17764:	10800017 	ldw	r2,0(r2)
   17768:	e0bff715 	stw	r2,-36(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   1776c:	e0bff717 	ldw	r2,-36(fp)
   17770:	10800104 	addi	r2,r2,4
   17774:	10800037 	ldwio	r2,0(r2)
   17778:	e0bff815 	stw	r2,-32(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
   1777c:	e0bff817 	ldw	r2,-32(fp)
   17780:	1080c00c 	andi	r2,r2,768
   17784:	10009126 	beq	r2,zero,179cc <altera_avalon_jtag_uart_irq+0x288>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
   17788:	e0bff817 	ldw	r2,-32(fp)
   1778c:	1080400c 	andi	r2,r2,256
   17790:	10004726 	beq	r2,zero,178b0 <altera_avalon_jtag_uart_irq+0x16c>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
   17794:	00800074 	movhi	r2,1
   17798:	e0bff415 	stw	r2,-48(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   1779c:	e0bff617 	ldw	r2,-40(fp)
   177a0:	10800d17 	ldw	r2,52(r2)
   177a4:	10800044 	addi	r2,r2,1
   177a8:	1081ffcc 	andi	r2,r2,2047
   177ac:	e0bff915 	stw	r2,-28(fp)
        if (next == sp->rx_out)
   177b0:	e0bff617 	ldw	r2,-40(fp)
   177b4:	10c00e17 	ldw	r3,56(r2)
   177b8:	e0bff917 	ldw	r2,-28(fp)
   177bc:	18802726 	beq	r3,r2,1785c <altera_avalon_jtag_uart_irq+0x118>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
   177c0:	e0bff717 	ldw	r2,-36(fp)
   177c4:	10800037 	ldwio	r2,0(r2)
   177c8:	e0bff415 	stw	r2,-48(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
   177cc:	e0bff417 	ldw	r2,-48(fp)
   177d0:	10a0000c 	andi	r2,r2,32768
   177d4:	10002326 	beq	r2,zero,17864 <altera_avalon_jtag_uart_irq+0x120>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
   177d8:	e0bff617 	ldw	r2,-40(fp)
   177dc:	10800d17 	ldw	r2,52(r2)
   177e0:	e0fff417 	ldw	r3,-48(fp)
   177e4:	1809883a 	mov	r4,r3
   177e8:	e0fff617 	ldw	r3,-40(fp)
   177ec:	1885883a 	add	r2,r3,r2
   177f0:	10801104 	addi	r2,r2,68
   177f4:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   177f8:	e0bff617 	ldw	r2,-40(fp)
   177fc:	10800d17 	ldw	r2,52(r2)
   17800:	10800044 	addi	r2,r2,1
   17804:	10c1ffcc 	andi	r3,r2,2047
   17808:	e0bff617 	ldw	r2,-40(fp)
   1780c:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
   17810:	e0bff617 	ldw	r2,-40(fp)
   17814:	10800c17 	ldw	r2,48(r2)
   17818:	e0bffb15 	stw	r2,-20(fp)
   1781c:	00800044 	movi	r2,1
   17820:	e0bffc0d 	sth	r2,-16(fp)
   17824:	00800044 	movi	r2,1
   17828:	e0bffc85 	stb	r2,-14(fp)
                   OS_FLAGS     flags, 
                   INT8U        opt)
{
  INT8U err;

  if (OSRunning)
   1782c:	d0a72443 	ldbu	r2,-25455(gp)
   17830:	10803fcc 	andi	r2,r2,255
   17834:	103fd926 	beq	r2,zero,1779c <__alt_data_end+0xfffe779c>
  {
    OSFlagPost (group, flags, opt, &err);
   17838:	e0bffc0b 	ldhu	r2,-16(fp)
   1783c:	e0fffc83 	ldbu	r3,-14(fp)
   17840:	e13ffdc4 	addi	r4,fp,-9
   17844:	200f883a 	mov	r7,r4
   17848:	180d883a 	mov	r6,r3
   1784c:	100b883a 	mov	r5,r2
   17850:	e13ffb17 	ldw	r4,-20(fp)
   17854:	0012c580 	call	12c58 <OSFlagPost>
      }
   17858:	003fd006 	br	1779c <__alt_data_end+0xfffe779c>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
   1785c:	0001883a 	nop
   17860:	00000106 	br	17868 <altera_avalon_jtag_uart_irq+0x124>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
   17864:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
   17868:	e0bff417 	ldw	r2,-48(fp)
   1786c:	10bfffec 	andhi	r2,r2,65535
   17870:	10000f26 	beq	r2,zero,178b0 <altera_avalon_jtag_uart_irq+0x16c>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   17874:	e0bff617 	ldw	r2,-40(fp)
   17878:	10c00817 	ldw	r3,32(r2)
   1787c:	00bfff84 	movi	r2,-2
   17880:	1886703a 	and	r3,r3,r2
   17884:	e0bff617 	ldw	r2,-40(fp)
   17888:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
   1788c:	e0bff717 	ldw	r2,-36(fp)
   17890:	10800104 	addi	r2,r2,4
   17894:	1007883a 	mov	r3,r2
   17898:	e0bff617 	ldw	r2,-40(fp)
   1789c:	10800817 	ldw	r2,32(r2)
   178a0:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   178a4:	e0bff717 	ldw	r2,-36(fp)
   178a8:	10800104 	addi	r2,r2,4
   178ac:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
   178b0:	e0bff817 	ldw	r2,-32(fp)
   178b4:	1080800c 	andi	r2,r2,512
   178b8:	103fac26 	beq	r2,zero,1776c <__alt_data_end+0xfffe776c>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
   178bc:	e0bff817 	ldw	r2,-32(fp)
   178c0:	1004d43a 	srli	r2,r2,16
   178c4:	e0bff515 	stw	r2,-44(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
   178c8:	00002606 	br	17964 <altera_avalon_jtag_uart_irq+0x220>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
   178cc:	e0bff717 	ldw	r2,-36(fp)
   178d0:	e0fff617 	ldw	r3,-40(fp)
   178d4:	18c01017 	ldw	r3,64(r3)
   178d8:	e13ff617 	ldw	r4,-40(fp)
   178dc:	20c7883a 	add	r3,r4,r3
   178e0:	18c21104 	addi	r3,r3,2116
   178e4:	18c00003 	ldbu	r3,0(r3)
   178e8:	18c03fcc 	andi	r3,r3,255
   178ec:	18c0201c 	xori	r3,r3,128
   178f0:	18ffe004 	addi	r3,r3,-128
   178f4:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   178f8:	e0bff617 	ldw	r2,-40(fp)
   178fc:	10801017 	ldw	r2,64(r2)
   17900:	10800044 	addi	r2,r2,1
   17904:	10c1ffcc 	andi	r3,r2,2047
   17908:	e0bff617 	ldw	r2,-40(fp)
   1790c:	10c01015 	stw	r3,64(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);
   17910:	e0bff617 	ldw	r2,-40(fp)
   17914:	10800c17 	ldw	r2,48(r2)
   17918:	e0bffa15 	stw	r2,-24(fp)
   1791c:	00800084 	movi	r2,2
   17920:	e0bffd0d 	sth	r2,-12(fp)
   17924:	00800044 	movi	r2,1
   17928:	e0bffd85 	stb	r2,-10(fp)
                   OS_FLAGS     flags, 
                   INT8U        opt)
{
  INT8U err;

  if (OSRunning)
   1792c:	d0a72443 	ldbu	r2,-25455(gp)
   17930:	10803fcc 	andi	r2,r2,255
   17934:	10000826 	beq	r2,zero,17958 <altera_avalon_jtag_uart_irq+0x214>
  {
    OSFlagPost (group, flags, opt, &err);
   17938:	e0bffd0b 	ldhu	r2,-12(fp)
   1793c:	e0fffd83 	ldbu	r3,-10(fp)
   17940:	e13ffe04 	addi	r4,fp,-8
   17944:	200f883a 	mov	r7,r4
   17948:	180d883a 	mov	r6,r3
   1794c:	100b883a 	mov	r5,r2
   17950:	e13ffa17 	ldw	r4,-24(fp)
   17954:	0012c580 	call	12c58 <OSFlagPost>

        space--;
   17958:	e0bff517 	ldw	r2,-44(fp)
   1795c:	10bfffc4 	addi	r2,r2,-1
   17960:	e0bff515 	stw	r2,-44(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
   17964:	e0bff517 	ldw	r2,-44(fp)
   17968:	10000526 	beq	r2,zero,17980 <altera_avalon_jtag_uart_irq+0x23c>
   1796c:	e0bff617 	ldw	r2,-40(fp)
   17970:	10c01017 	ldw	r3,64(r2)
   17974:	e0bff617 	ldw	r2,-40(fp)
   17978:	10800f17 	ldw	r2,60(r2)
   1797c:	18bfd31e 	bne	r3,r2,178cc <__alt_data_end+0xfffe78cc>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
   17980:	e0bff517 	ldw	r2,-44(fp)
   17984:	103f7926 	beq	r2,zero,1776c <__alt_data_end+0xfffe776c>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   17988:	e0bff617 	ldw	r2,-40(fp)
   1798c:	10c00817 	ldw	r3,32(r2)
   17990:	00bfff44 	movi	r2,-3
   17994:	1886703a 	and	r3,r3,r2
   17998:	e0bff617 	ldw	r2,-40(fp)
   1799c:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   179a0:	e0bff617 	ldw	r2,-40(fp)
   179a4:	10800017 	ldw	r2,0(r2)
   179a8:	10800104 	addi	r2,r2,4
   179ac:	1007883a 	mov	r3,r2
   179b0:	e0bff617 	ldw	r2,-40(fp)
   179b4:	10800817 	ldw	r2,32(r2)
   179b8:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   179bc:	e0bff717 	ldw	r2,-36(fp)
   179c0:	10800104 	addi	r2,r2,4
   179c4:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
   179c8:	003f6806 	br	1776c <__alt_data_end+0xfffe776c>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
   179cc:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
   179d0:	0001883a 	nop
   179d4:	e037883a 	mov	sp,fp
   179d8:	dfc00117 	ldw	ra,4(sp)
   179dc:	df000017 	ldw	fp,0(sp)
   179e0:	dec00204 	addi	sp,sp,8
   179e4:	f800283a 	ret

000179e8 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
   179e8:	defff904 	addi	sp,sp,-28
   179ec:	dfc00615 	stw	ra,24(sp)
   179f0:	df000515 	stw	fp,20(sp)
   179f4:	df000504 	addi	fp,sp,20
   179f8:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
   179fc:	e0bfff17 	ldw	r2,-4(fp)
   17a00:	e0bffb15 	stw	r2,-20(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
   17a04:	e0bffb17 	ldw	r2,-20(fp)
   17a08:	10800017 	ldw	r2,0(r2)
   17a0c:	10800104 	addi	r2,r2,4
   17a10:	10800037 	ldwio	r2,0(r2)
   17a14:	e0bffc15 	stw	r2,-16(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
   17a18:	e0bffc17 	ldw	r2,-16(fp)
   17a1c:	1081000c 	andi	r2,r2,1024
   17a20:	10000b26 	beq	r2,zero,17a50 <altera_avalon_jtag_uart_timeout+0x68>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
   17a24:	e0bffb17 	ldw	r2,-20(fp)
   17a28:	10800017 	ldw	r2,0(r2)
   17a2c:	10800104 	addi	r2,r2,4
   17a30:	1007883a 	mov	r3,r2
   17a34:	e0bffb17 	ldw	r2,-20(fp)
   17a38:	10800817 	ldw	r2,32(r2)
   17a3c:	10810014 	ori	r2,r2,1024
   17a40:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
   17a44:	e0bffb17 	ldw	r2,-20(fp)
   17a48:	10000915 	stw	zero,36(r2)
   17a4c:	00002106 	br	17ad4 <altera_avalon_jtag_uart_timeout+0xec>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
   17a50:	e0bffb17 	ldw	r2,-20(fp)
   17a54:	10c00917 	ldw	r3,36(r2)
   17a58:	00a00034 	movhi	r2,32768
   17a5c:	10bfff04 	addi	r2,r2,-4
   17a60:	10c01c36 	bltu	r2,r3,17ad4 <altera_avalon_jtag_uart_timeout+0xec>
    sp->host_inactive++;
   17a64:	e0bffb17 	ldw	r2,-20(fp)
   17a68:	10800917 	ldw	r2,36(r2)
   17a6c:	10c00044 	addi	r3,r2,1
   17a70:	e0bffb17 	ldw	r2,-20(fp)
   17a74:	10c00915 	stw	r3,36(r2)
    
    if (sp->host_inactive >= sp->timeout) {
   17a78:	e0bffb17 	ldw	r2,-20(fp)
   17a7c:	10c00917 	ldw	r3,36(r2)
   17a80:	e0bffb17 	ldw	r2,-20(fp)
   17a84:	10800117 	ldw	r2,4(r2)
   17a88:	18801236 	bltu	r3,r2,17ad4 <altera_avalon_jtag_uart_timeout+0xec>
      /* Post an event to indicate host is inactive (for jtag_uart_read */
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
   17a8c:	e0bffb17 	ldw	r2,-20(fp)
   17a90:	10800c17 	ldw	r2,48(r2)
   17a94:	e0bffd15 	stw	r2,-12(fp)
   17a98:	00800104 	movi	r2,4
   17a9c:	e0bffe0d 	sth	r2,-8(fp)
   17aa0:	00800044 	movi	r2,1
   17aa4:	e0bffe85 	stb	r2,-6(fp)
                   OS_FLAGS     flags, 
                   INT8U        opt)
{
  INT8U err;

  if (OSRunning)
   17aa8:	d0a72443 	ldbu	r2,-25455(gp)
   17aac:	10803fcc 	andi	r2,r2,255
   17ab0:	10000826 	beq	r2,zero,17ad4 <altera_avalon_jtag_uart_timeout+0xec>
  {
    OSFlagPost (group, flags, opt, &err);
   17ab4:	e0bffe0b 	ldhu	r2,-8(fp)
   17ab8:	e0fffe83 	ldbu	r3,-6(fp)
   17abc:	e13ffec4 	addi	r4,fp,-5
   17ac0:	200f883a 	mov	r7,r4
   17ac4:	180d883a 	mov	r6,r3
   17ac8:	100b883a 	mov	r5,r2
   17acc:	e13ffd17 	ldw	r4,-12(fp)
   17ad0:	0012c580 	call	12c58 <OSFlagPost>
   17ad4:	d0a73817 	ldw	r2,-25376(gp)
    }
  }

  return alt_ticks_per_second();
}
   17ad8:	e037883a 	mov	sp,fp
   17adc:	dfc00117 	ldw	ra,4(sp)
   17ae0:	df000017 	ldw	fp,0(sp)
   17ae4:	dec00204 	addi	sp,sp,8
   17ae8:	f800283a 	ret

00017aec <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
   17aec:	defffd04 	addi	sp,sp,-12
   17af0:	df000215 	stw	fp,8(sp)
   17af4:	df000204 	addi	fp,sp,8
   17af8:	e13ffe15 	stw	r4,-8(fp)
   17afc:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   17b00:	00000506 	br	17b18 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
   17b04:	e0bfff17 	ldw	r2,-4(fp)
   17b08:	1090000c 	andi	r2,r2,16384
   17b0c:	10000226 	beq	r2,zero,17b18 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
   17b10:	00bffd44 	movi	r2,-11
   17b14:	00000b06 	br	17b44 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   17b18:	e0bffe17 	ldw	r2,-8(fp)
   17b1c:	10c01017 	ldw	r3,64(r2)
   17b20:	e0bffe17 	ldw	r2,-8(fp)
   17b24:	10800f17 	ldw	r2,60(r2)
   17b28:	18800526 	beq	r3,r2,17b40 <altera_avalon_jtag_uart_close+0x54>
   17b2c:	e0bffe17 	ldw	r2,-8(fp)
   17b30:	10c00917 	ldw	r3,36(r2)
   17b34:	e0bffe17 	ldw	r2,-8(fp)
   17b38:	10800117 	ldw	r2,4(r2)
   17b3c:	18bff136 	bltu	r3,r2,17b04 <__alt_data_end+0xfffe7b04>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
   17b40:	0005883a 	mov	r2,zero
}
   17b44:	e037883a 	mov	sp,fp
   17b48:	df000017 	ldw	fp,0(sp)
   17b4c:	dec00104 	addi	sp,sp,4
   17b50:	f800283a 	ret

00017b54 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
   17b54:	defffa04 	addi	sp,sp,-24
   17b58:	df000515 	stw	fp,20(sp)
   17b5c:	df000504 	addi	fp,sp,20
   17b60:	e13ffd15 	stw	r4,-12(fp)
   17b64:	e17ffe15 	stw	r5,-8(fp)
   17b68:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
   17b6c:	00bff9c4 	movi	r2,-25
   17b70:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
   17b74:	e0bffe17 	ldw	r2,-8(fp)
   17b78:	10da8060 	cmpeqi	r3,r2,27137
   17b7c:	1800031e 	bne	r3,zero,17b8c <altera_avalon_jtag_uart_ioctl+0x38>
   17b80:	109a80a0 	cmpeqi	r2,r2,27138
   17b84:	1000181e 	bne	r2,zero,17be8 <altera_avalon_jtag_uart_ioctl+0x94>
      rc = 0;
    }
    break;

  default:
    break;
   17b88:	00002906 	br	17c30 <altera_avalon_jtag_uart_ioctl+0xdc>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
   17b8c:	e0bffd17 	ldw	r2,-12(fp)
   17b90:	10c00117 	ldw	r3,4(r2)
   17b94:	00a00034 	movhi	r2,32768
   17b98:	10bfffc4 	addi	r2,r2,-1
   17b9c:	18802126 	beq	r3,r2,17c24 <altera_avalon_jtag_uart_ioctl+0xd0>
    {
      int timeout = *((int *)arg);
   17ba0:	e0bfff17 	ldw	r2,-4(fp)
   17ba4:	10800017 	ldw	r2,0(r2)
   17ba8:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
   17bac:	e0bffc17 	ldw	r2,-16(fp)
   17bb0:	10800090 	cmplti	r2,r2,2
   17bb4:	1000061e 	bne	r2,zero,17bd0 <altera_avalon_jtag_uart_ioctl+0x7c>
   17bb8:	e0fffc17 	ldw	r3,-16(fp)
   17bbc:	00a00034 	movhi	r2,32768
   17bc0:	10bfffc4 	addi	r2,r2,-1
   17bc4:	18800226 	beq	r3,r2,17bd0 <altera_avalon_jtag_uart_ioctl+0x7c>
   17bc8:	e0bffc17 	ldw	r2,-16(fp)
   17bcc:	00000206 	br	17bd8 <altera_avalon_jtag_uart_ioctl+0x84>
   17bd0:	00a00034 	movhi	r2,32768
   17bd4:	10bfff84 	addi	r2,r2,-2
   17bd8:	e0fffd17 	ldw	r3,-12(fp)
   17bdc:	18800115 	stw	r2,4(r3)
      rc = 0;
   17be0:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   17be4:	00000f06 	br	17c24 <altera_avalon_jtag_uart_ioctl+0xd0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
   17be8:	e0bffd17 	ldw	r2,-12(fp)
   17bec:	10c00117 	ldw	r3,4(r2)
   17bf0:	00a00034 	movhi	r2,32768
   17bf4:	10bfffc4 	addi	r2,r2,-1
   17bf8:	18800c26 	beq	r3,r2,17c2c <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
   17bfc:	e0bffd17 	ldw	r2,-12(fp)
   17c00:	10c00917 	ldw	r3,36(r2)
   17c04:	e0bffd17 	ldw	r2,-12(fp)
   17c08:	10800117 	ldw	r2,4(r2)
   17c0c:	1885803a 	cmpltu	r2,r3,r2
   17c10:	10c03fcc 	andi	r3,r2,255
   17c14:	e0bfff17 	ldw	r2,-4(fp)
   17c18:	10c00015 	stw	r3,0(r2)
      rc = 0;
   17c1c:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   17c20:	00000206 	br	17c2c <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
   17c24:	0001883a 	nop
   17c28:	00000106 	br	17c30 <altera_avalon_jtag_uart_ioctl+0xdc>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
   17c2c:	0001883a 	nop

  default:
    break;
  }

  return rc;
   17c30:	e0bffb17 	ldw	r2,-20(fp)
}
   17c34:	e037883a 	mov	sp,fp
   17c38:	df000017 	ldw	fp,0(sp)
   17c3c:	dec00104 	addi	sp,sp,4
   17c40:	f800283a 	ret

00017c44 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
   17c44:	deffed04 	addi	sp,sp,-76
   17c48:	dfc01215 	stw	ra,72(sp)
   17c4c:	df001115 	stw	fp,68(sp)
   17c50:	df001104 	addi	fp,sp,68
   17c54:	e13ffc15 	stw	r4,-16(fp)
   17c58:	e17ffd15 	stw	r5,-12(fp)
   17c5c:	e1bffe15 	stw	r6,-8(fp)
   17c60:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
   17c64:	e0bffd17 	ldw	r2,-12(fp)
   17c68:	e0bff015 	stw	r2,-64(fp)

  /*
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);
   17c6c:	e0bffc17 	ldw	r2,-16(fp)
   17c70:	10800a17 	ldw	r2,40(r2)
   17c74:	e0bff815 	stw	r2,-32(fp)
   17c78:	e03ff90d 	sth	zero,-28(fp)

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sem_pend (OS_EVENT* sem, 
                  INT16U timeout)
{
  INT8U err;
  OSSemPend (sem, timeout, &err);
   17c7c:	e0bff90b 	ldhu	r2,-28(fp)
   17c80:	e0fffb04 	addi	r3,fp,-20
   17c84:	180d883a 	mov	r6,r3
   17c88:	100b883a 	mov	r5,r2
   17c8c:	e13ff817 	ldw	r4,-32(fp)
   17c90:	00150b40 	call	150b4 <OSSemPend>

  while (space > 0)
   17c94:	00006106 	br	17e1c <altera_avalon_jtag_uart_read+0x1d8>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
   17c98:	e0bffc17 	ldw	r2,-16(fp)
   17c9c:	10800d17 	ldw	r2,52(r2)
   17ca0:	e0bff315 	stw	r2,-52(fp)
      out = sp->rx_out;
   17ca4:	e0bffc17 	ldw	r2,-16(fp)
   17ca8:	10800e17 	ldw	r2,56(r2)
   17cac:	e0bff415 	stw	r2,-48(fp)

      if (in >= out)
   17cb0:	e0fff317 	ldw	r3,-52(fp)
   17cb4:	e0bff417 	ldw	r2,-48(fp)
   17cb8:	18800536 	bltu	r3,r2,17cd0 <altera_avalon_jtag_uart_read+0x8c>
        n = in - out;
   17cbc:	e0fff317 	ldw	r3,-52(fp)
   17cc0:	e0bff417 	ldw	r2,-48(fp)
   17cc4:	1885c83a 	sub	r2,r3,r2
   17cc8:	e0bff115 	stw	r2,-60(fp)
   17ccc:	00000406 	br	17ce0 <altera_avalon_jtag_uart_read+0x9c>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
   17cd0:	00c20004 	movi	r3,2048
   17cd4:	e0bff417 	ldw	r2,-48(fp)
   17cd8:	1885c83a 	sub	r2,r3,r2
   17cdc:	e0bff115 	stw	r2,-60(fp)

      if (n == 0)
   17ce0:	e0bff117 	ldw	r2,-60(fp)
   17ce4:	10001e26 	beq	r2,zero,17d60 <altera_avalon_jtag_uart_read+0x11c>
        break; /* No more data available */

      if (n > space)
   17ce8:	e0fffe17 	ldw	r3,-8(fp)
   17cec:	e0bff117 	ldw	r2,-60(fp)
   17cf0:	1880022e 	bgeu	r3,r2,17cfc <altera_avalon_jtag_uart_read+0xb8>
        n = space;
   17cf4:	e0bffe17 	ldw	r2,-8(fp)
   17cf8:	e0bff115 	stw	r2,-60(fp)

      memcpy(ptr, sp->rx_buf + out, n);
   17cfc:	e0bffc17 	ldw	r2,-16(fp)
   17d00:	10c01104 	addi	r3,r2,68
   17d04:	e0bff417 	ldw	r2,-48(fp)
   17d08:	1885883a 	add	r2,r3,r2
   17d0c:	e1bff117 	ldw	r6,-60(fp)
   17d10:	100b883a 	mov	r5,r2
   17d14:	e13ff017 	ldw	r4,-64(fp)
   17d18:	000769c0 	call	769c <memcpy>
      ptr   += n;
   17d1c:	e0fff017 	ldw	r3,-64(fp)
   17d20:	e0bff117 	ldw	r2,-60(fp)
   17d24:	1885883a 	add	r2,r3,r2
   17d28:	e0bff015 	stw	r2,-64(fp)
      space -= n;
   17d2c:	e0fffe17 	ldw	r3,-8(fp)
   17d30:	e0bff117 	ldw	r2,-60(fp)
   17d34:	1885c83a 	sub	r2,r3,r2
   17d38:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   17d3c:	e0fff417 	ldw	r3,-48(fp)
   17d40:	e0bff117 	ldw	r2,-60(fp)
   17d44:	1885883a 	add	r2,r3,r2
   17d48:	10c1ffcc 	andi	r3,r2,2047
   17d4c:	e0bffc17 	ldw	r2,-16(fp)
   17d50:	10c00e15 	stw	r3,56(r2)
    }
    while (space > 0);
   17d54:	e0bffe17 	ldw	r2,-8(fp)
   17d58:	00bfcf16 	blt	zero,r2,17c98 <__alt_data_end+0xfffe7c98>
   17d5c:	00000106 	br	17d64 <altera_avalon_jtag_uart_read+0x120>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
   17d60:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
   17d64:	e0fff017 	ldw	r3,-64(fp)
   17d68:	e0bffd17 	ldw	r2,-12(fp)
   17d6c:	18802e1e 	bne	r3,r2,17e28 <altera_avalon_jtag_uart_read+0x1e4>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
   17d70:	e0bfff17 	ldw	r2,-4(fp)
   17d74:	1090000c 	andi	r2,r2,16384
   17d78:	10002d1e 	bne	r2,zero,17e30 <altera_avalon_jtag_uart_read+0x1ec>
      break;

#ifdef __ucosii__
    /* OS Present: Pend on a flag if the OS is running, otherwise spin */
    if(OSRunning == OS_TRUE) {
   17d7c:	d0a72443 	ldbu	r2,-25455(gp)
   17d80:	10803fcc 	andi	r2,r2,255
   17d84:	10800058 	cmpnei	r2,r2,1
   17d88:	1000161e 	bne	r2,zero,17de4 <altera_avalon_jtag_uart_read+0x1a0>
       * When running in a multi-threaded mode, we pend on the read event
       * flag set and timeout event flag set in the isr. This avoids wasting CPU
       * cycles waiting in this thread, when we could be doing something more
       * profitable elsewhere.
       */
      ALT_FLAG_PEND (sp->events,
   17d8c:	e0bffc17 	ldw	r2,-16(fp)
   17d90:	10800c17 	ldw	r2,48(r2)
   17d94:	e0bff215 	stw	r2,-56(fp)
   17d98:	00800144 	movi	r2,5
   17d9c:	e0bff98d 	sth	r2,-26(fp)
   17da0:	00bfe0c4 	movi	r2,-125
   17da4:	e0bffa05 	stb	r2,-24(fp)
   17da8:	e03ffa8d 	sth	zero,-22(fp)
                   OS_FLAGS flags, 
                   INT8U wait_type, 
                   INT16U timeout)
{
  INT8U err;
  if (OSRunning)
   17dac:	d0a72443 	ldbu	r2,-25455(gp)
   17db0:	10803fcc 	andi	r2,r2,255
   17db4:	10001526 	beq	r2,zero,17e0c <altera_avalon_jtag_uart_read+0x1c8>
  {
    OSFlagPend (group, flags, wait_type, timeout, &err);
   17db8:	e0fff98b 	ldhu	r3,-26(fp)
   17dbc:	e13ffa03 	ldbu	r4,-24(fp)
   17dc0:	e17ffa8b 	ldhu	r5,-22(fp)
   17dc4:	e0bffb44 	addi	r2,fp,-19
   17dc8:	d8800015 	stw	r2,0(sp)
   17dcc:	280f883a 	mov	r7,r5
   17dd0:	200d883a 	mov	r6,r4
   17dd4:	180b883a 	mov	r5,r3
   17dd8:	e13ff217 	ldw	r4,-56(fp)
   17ddc:	00126400 	call	12640 <OSFlagPend>
   17de0:	00000a06 	br	17e0c <altera_avalon_jtag_uart_read+0x1c8>
                     OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                     0);
    }
    else {
      /* Spin until more data arrives or until host disconnects */
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
   17de4:	0001883a 	nop
   17de8:	e0bffc17 	ldw	r2,-16(fp)
   17dec:	10c00d17 	ldw	r3,52(r2)
   17df0:	e0bff317 	ldw	r2,-52(fp)
   17df4:	1880051e 	bne	r3,r2,17e0c <altera_avalon_jtag_uart_read+0x1c8>
   17df8:	e0bffc17 	ldw	r2,-16(fp)
   17dfc:	10c00917 	ldw	r3,36(r2)
   17e00:	e0bffc17 	ldw	r2,-16(fp)
   17e04:	10800117 	ldw	r2,4(r2)
   17e08:	18bff736 	bltu	r3,r2,17de8 <__alt_data_end+0xfffe7de8>
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
   17e0c:	e0bffc17 	ldw	r2,-16(fp)
   17e10:	10c00d17 	ldw	r3,52(r2)
   17e14:	e0bff317 	ldw	r2,-52(fp)
   17e18:	18800726 	beq	r3,r2,17e38 <altera_avalon_jtag_uart_read+0x1f4>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   17e1c:	e0bffe17 	ldw	r2,-8(fp)
   17e20:	00bf9d16 	blt	zero,r2,17c98 <__alt_data_end+0xfffe7c98>
   17e24:	00000506 	br	17e3c <altera_avalon_jtag_uart_read+0x1f8>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
   17e28:	0001883a 	nop
   17e2c:	00000306 	br	17e3c <altera_avalon_jtag_uart_read+0x1f8>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
   17e30:	0001883a 	nop
   17e34:	00000106 	br	17e3c <altera_avalon_jtag_uart_read+0x1f8>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
   17e38:	0001883a 	nop
  /*
   * Now that access to the circular buffer is complete, release the read
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);
   17e3c:	e0bffc17 	ldw	r2,-16(fp)
   17e40:	10800a17 	ldw	r2,40(r2)
   17e44:	1009883a 	mov	r4,r2
   17e48:	001542c0 	call	1542c <OSSemPost>

  if (ptr != buffer)
   17e4c:	e0fff017 	ldw	r3,-64(fp)
   17e50:	e0bffd17 	ldw	r2,-12(fp)
   17e54:	18801826 	beq	r3,r2,17eb8 <altera_avalon_jtag_uart_read+0x274>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   17e58:	0005303a 	rdctl	r2,status
   17e5c:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   17e60:	e0fff717 	ldw	r3,-36(fp)
   17e64:	00bfff84 	movi	r2,-2
   17e68:	1884703a 	and	r2,r3,r2
   17e6c:	1001703a 	wrctl	status,r2
  
  return context;
   17e70:	e0bff717 	ldw	r2,-36(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
   17e74:	e0bff615 	stw	r2,-40(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   17e78:	e0bffc17 	ldw	r2,-16(fp)
   17e7c:	10800817 	ldw	r2,32(r2)
   17e80:	10c00054 	ori	r3,r2,1
   17e84:	e0bffc17 	ldw	r2,-16(fp)
   17e88:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   17e8c:	e0bffc17 	ldw	r2,-16(fp)
   17e90:	10800017 	ldw	r2,0(r2)
   17e94:	10800104 	addi	r2,r2,4
   17e98:	1007883a 	mov	r3,r2
   17e9c:	e0bffc17 	ldw	r2,-16(fp)
   17ea0:	10800817 	ldw	r2,32(r2)
   17ea4:	18800035 	stwio	r2,0(r3)
   17ea8:	e0bff617 	ldw	r2,-40(fp)
   17eac:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   17eb0:	e0bff517 	ldw	r2,-44(fp)
   17eb4:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
   17eb8:	e0fff017 	ldw	r3,-64(fp)
   17ebc:	e0bffd17 	ldw	r2,-12(fp)
   17ec0:	18800426 	beq	r3,r2,17ed4 <altera_avalon_jtag_uart_read+0x290>
    return ptr - buffer;
   17ec4:	e0fff017 	ldw	r3,-64(fp)
   17ec8:	e0bffd17 	ldw	r2,-12(fp)
   17ecc:	1885c83a 	sub	r2,r3,r2
   17ed0:	00000606 	br	17eec <altera_avalon_jtag_uart_read+0x2a8>
  else if (flags & O_NONBLOCK)
   17ed4:	e0bfff17 	ldw	r2,-4(fp)
   17ed8:	1090000c 	andi	r2,r2,16384
   17edc:	10000226 	beq	r2,zero,17ee8 <altera_avalon_jtag_uart_read+0x2a4>
    return -EWOULDBLOCK;
   17ee0:	00bffd44 	movi	r2,-11
   17ee4:	00000106 	br	17eec <altera_avalon_jtag_uart_read+0x2a8>
  else
    return -EIO;
   17ee8:	00bffec4 	movi	r2,-5
}
   17eec:	e037883a 	mov	sp,fp
   17ef0:	dfc00117 	ldw	ra,4(sp)
   17ef4:	df000017 	ldw	fp,0(sp)
   17ef8:	dec00204 	addi	sp,sp,8
   17efc:	f800283a 	ret

00017f00 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
   17f00:	deffed04 	addi	sp,sp,-76
   17f04:	dfc01215 	stw	ra,72(sp)
   17f08:	df001115 	stw	fp,68(sp)
   17f0c:	df001104 	addi	fp,sp,68
   17f10:	e13ffc15 	stw	r4,-16(fp)
   17f14:	e17ffd15 	stw	r5,-12(fp)
   17f18:	e1bffe15 	stw	r6,-8(fp)
   17f1c:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
   17f20:	e03ff015 	stw	zero,-64(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
   17f24:	e0bffd17 	ldw	r2,-12(fp)
   17f28:	e0bff215 	stw	r2,-56(fp)

  /*
   * When running in a multi threaded environment, obtain the "write_lock"
   * semaphore. This ensures that writing to the device is thread-safe.
   */
  ALT_SEM_PEND (sp->write_lock, 0);
   17f2c:	e0bffc17 	ldw	r2,-16(fp)
   17f30:	10800b17 	ldw	r2,44(r2)
   17f34:	e0bff815 	stw	r2,-32(fp)
   17f38:	e03ff90d 	sth	zero,-28(fp)
   17f3c:	e0bff90b 	ldhu	r2,-28(fp)
   17f40:	e0fffb44 	addi	r3,fp,-19
   17f44:	180d883a 	mov	r6,r3
   17f48:	100b883a 	mov	r5,r2
   17f4c:	e13ff817 	ldw	r4,-32(fp)
   17f50:	00150b40 	call	150b4 <OSSemPend>

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   17f54:	00003706 	br	18034 <altera_avalon_jtag_uart_write+0x134>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
   17f58:	e0bffc17 	ldw	r2,-16(fp)
   17f5c:	10800f17 	ldw	r2,60(r2)
   17f60:	e0bff415 	stw	r2,-48(fp)
      out = sp->tx_out;
   17f64:	e0bffc17 	ldw	r2,-16(fp)
   17f68:	10801017 	ldw	r2,64(r2)
   17f6c:	e0bff015 	stw	r2,-64(fp)

      if (in < out)
   17f70:	e0fff417 	ldw	r3,-48(fp)
   17f74:	e0bff017 	ldw	r2,-64(fp)
   17f78:	1880062e 	bgeu	r3,r2,17f94 <altera_avalon_jtag_uart_write+0x94>
        n = out - 1 - in;
   17f7c:	e0fff017 	ldw	r3,-64(fp)
   17f80:	e0bff417 	ldw	r2,-48(fp)
   17f84:	1885c83a 	sub	r2,r3,r2
   17f88:	10bfffc4 	addi	r2,r2,-1
   17f8c:	e0bff115 	stw	r2,-60(fp)
   17f90:	00000b06 	br	17fc0 <altera_avalon_jtag_uart_write+0xc0>
      else if (out > 0)
   17f94:	e0bff017 	ldw	r2,-64(fp)
   17f98:	10000526 	beq	r2,zero,17fb0 <altera_avalon_jtag_uart_write+0xb0>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
   17f9c:	00c20004 	movi	r3,2048
   17fa0:	e0bff417 	ldw	r2,-48(fp)
   17fa4:	1885c83a 	sub	r2,r3,r2
   17fa8:	e0bff115 	stw	r2,-60(fp)
   17fac:	00000406 	br	17fc0 <altera_avalon_jtag_uart_write+0xc0>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
   17fb0:	00c1ffc4 	movi	r3,2047
   17fb4:	e0bff417 	ldw	r2,-48(fp)
   17fb8:	1885c83a 	sub	r2,r3,r2
   17fbc:	e0bff115 	stw	r2,-60(fp)

      if (n == 0)
   17fc0:	e0bff117 	ldw	r2,-60(fp)
   17fc4:	10001e26 	beq	r2,zero,18040 <altera_avalon_jtag_uart_write+0x140>
        break;

      if (n > count)
   17fc8:	e0fffe17 	ldw	r3,-8(fp)
   17fcc:	e0bff117 	ldw	r2,-60(fp)
   17fd0:	1880022e 	bgeu	r3,r2,17fdc <altera_avalon_jtag_uart_write+0xdc>
        n = count;
   17fd4:	e0bffe17 	ldw	r2,-8(fp)
   17fd8:	e0bff115 	stw	r2,-60(fp)

      memcpy(sp->tx_buf + in, ptr, n);
   17fdc:	e0bffc17 	ldw	r2,-16(fp)
   17fe0:	10c21104 	addi	r3,r2,2116
   17fe4:	e0bff417 	ldw	r2,-48(fp)
   17fe8:	1885883a 	add	r2,r3,r2
   17fec:	e1bff117 	ldw	r6,-60(fp)
   17ff0:	e17ffd17 	ldw	r5,-12(fp)
   17ff4:	1009883a 	mov	r4,r2
   17ff8:	000769c0 	call	769c <memcpy>
      ptr   += n;
   17ffc:	e0fffd17 	ldw	r3,-12(fp)
   18000:	e0bff117 	ldw	r2,-60(fp)
   18004:	1885883a 	add	r2,r3,r2
   18008:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
   1800c:	e0fffe17 	ldw	r3,-8(fp)
   18010:	e0bff117 	ldw	r2,-60(fp)
   18014:	1885c83a 	sub	r2,r3,r2
   18018:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   1801c:	e0fff417 	ldw	r3,-48(fp)
   18020:	e0bff117 	ldw	r2,-60(fp)
   18024:	1885883a 	add	r2,r3,r2
   18028:	10c1ffcc 	andi	r3,r2,2047
   1802c:	e0bffc17 	ldw	r2,-16(fp)
   18030:	10c00f15 	stw	r3,60(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   18034:	e0bffe17 	ldw	r2,-8(fp)
   18038:	00bfc716 	blt	zero,r2,17f58 <__alt_data_end+0xfffe7f58>
   1803c:	00000106 	br	18044 <altera_avalon_jtag_uart_write+0x144>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
   18040:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   18044:	0005303a 	rdctl	r2,status
   18048:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1804c:	e0fff717 	ldw	r3,-36(fp)
   18050:	00bfff84 	movi	r2,-2
   18054:	1884703a 	and	r2,r3,r2
   18058:	1001703a 	wrctl	status,r2
  
  return context;
   1805c:	e0bff717 	ldw	r2,-36(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
   18060:	e0bff615 	stw	r2,-40(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   18064:	e0bffc17 	ldw	r2,-16(fp)
   18068:	10800817 	ldw	r2,32(r2)
   1806c:	10c00094 	ori	r3,r2,2
   18070:	e0bffc17 	ldw	r2,-16(fp)
   18074:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   18078:	e0bffc17 	ldw	r2,-16(fp)
   1807c:	10800017 	ldw	r2,0(r2)
   18080:	10800104 	addi	r2,r2,4
   18084:	1007883a 	mov	r3,r2
   18088:	e0bffc17 	ldw	r2,-16(fp)
   1808c:	10800817 	ldw	r2,32(r2)
   18090:	18800035 	stwio	r2,0(r3)
   18094:	e0bff617 	ldw	r2,-40(fp)
   18098:	e0bff315 	stw	r2,-52(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1809c:	e0bff317 	ldw	r2,-52(fp)
   180a0:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
   180a4:	e0bffe17 	ldw	r2,-8(fp)
   180a8:	00802a0e 	bge	zero,r2,18154 <altera_avalon_jtag_uart_write+0x254>
    {
      if (flags & O_NONBLOCK)
   180ac:	e0bfff17 	ldw	r2,-4(fp)
   180b0:	1090000c 	andi	r2,r2,16384
   180b4:	10002a1e 	bne	r2,zero,18160 <altera_avalon_jtag_uart_write+0x260>
        break;

#ifdef __ucosii__
      /* OS Present: Pend on a flag if the OS is running, otherwise spin */
      if(OSRunning == OS_TRUE) {
   180b8:	d0a72443 	ldbu	r2,-25455(gp)
   180bc:	10803fcc 	andi	r2,r2,255
   180c0:	10800058 	cmpnei	r2,r2,1
   180c4:	1000161e 	bne	r2,zero,18120 <altera_avalon_jtag_uart_write+0x220>
         * more profitable elsewhere.
         */
#ifdef ALTERA_AVALON_JTAG_UART_IGNORE_FIFO_FULL_ERROR
        if(!sp->host_inactive)
#endif
        ALT_FLAG_PEND (sp->events,
   180c8:	e0bffc17 	ldw	r2,-16(fp)
   180cc:	10800c17 	ldw	r2,48(r2)
   180d0:	e0bff515 	stw	r2,-44(fp)
   180d4:	00800184 	movi	r2,6
   180d8:	e0bff98d 	sth	r2,-26(fp)
   180dc:	00bfe0c4 	movi	r2,-125
   180e0:	e0bffa05 	stb	r2,-24(fp)
   180e4:	e03ffa8d 	sth	zero,-22(fp)
                   OS_FLAGS flags, 
                   INT8U wait_type, 
                   INT16U timeout)
{
  INT8U err;
  if (OSRunning)
   180e8:	d0a72443 	ldbu	r2,-25455(gp)
   180ec:	10803fcc 	andi	r2,r2,255
   180f0:	10001526 	beq	r2,zero,18148 <altera_avalon_jtag_uart_write+0x248>
  {
    OSFlagPend (group, flags, wait_type, timeout, &err);
   180f4:	e0fff98b 	ldhu	r3,-26(fp)
   180f8:	e13ffa03 	ldbu	r4,-24(fp)
   180fc:	e17ffa8b 	ldhu	r5,-22(fp)
   18100:	e0bffb04 	addi	r2,fp,-20
   18104:	d8800015 	stw	r2,0(sp)
   18108:	280f883a 	mov	r7,r5
   1810c:	200d883a 	mov	r6,r4
   18110:	180b883a 	mov	r5,r3
   18114:	e13ff517 	ldw	r4,-44(fp)
   18118:	00126400 	call	12640 <OSFlagPend>
   1811c:	00000a06 	br	18148 <altera_avalon_jtag_uart_write+0x248>
        /*
         * OS not running: Wait for data to be removed from buffer.
         * Once the interrupt routine has removed some data then we
         * will be able to insert some more.
         */
        while (out == sp->tx_out && sp->host_inactive < sp->timeout)
   18120:	0001883a 	nop
   18124:	e0bffc17 	ldw	r2,-16(fp)
   18128:	10c01017 	ldw	r3,64(r2)
   1812c:	e0bff017 	ldw	r2,-64(fp)
   18130:	1880051e 	bne	r3,r2,18148 <altera_avalon_jtag_uart_write+0x248>
   18134:	e0bffc17 	ldw	r2,-16(fp)
   18138:	10c00917 	ldw	r3,36(r2)
   1813c:	e0bffc17 	ldw	r2,-16(fp)
   18140:	10800117 	ldw	r2,4(r2)
   18144:	18bff736 	bltu	r3,r2,18124 <__alt_data_end+0xfffe8124>
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
   18148:	e0bffc17 	ldw	r2,-16(fp)
   1814c:	10800917 	ldw	r2,36(r2)
   18150:	1000051e 	bne	r2,zero,18168 <altera_avalon_jtag_uart_write+0x268>
         break;
    }
  }
  while (count > 0);
   18154:	e0bffe17 	ldw	r2,-8(fp)
   18158:	00bfb616 	blt	zero,r2,18034 <__alt_data_end+0xfffe8034>
   1815c:	00000306 	br	1816c <altera_avalon_jtag_uart_write+0x26c>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
   18160:	0001883a 	nop
   18164:	00000106 	br	1816c <altera_avalon_jtag_uart_write+0x26c>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
   18168:	0001883a 	nop

  /*
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);
   1816c:	e0bffc17 	ldw	r2,-16(fp)
   18170:	10800b17 	ldw	r2,44(r2)
   18174:	1009883a 	mov	r4,r2
   18178:	001542c0 	call	1542c <OSSemPost>

  if (ptr != start)
   1817c:	e0fffd17 	ldw	r3,-12(fp)
   18180:	e0bff217 	ldw	r2,-56(fp)
   18184:	18800426 	beq	r3,r2,18198 <altera_avalon_jtag_uart_write+0x298>
    return ptr - start;
   18188:	e0fffd17 	ldw	r3,-12(fp)
   1818c:	e0bff217 	ldw	r2,-56(fp)
   18190:	1885c83a 	sub	r2,r3,r2
   18194:	00000606 	br	181b0 <altera_avalon_jtag_uart_write+0x2b0>
  else if (flags & O_NONBLOCK)
   18198:	e0bfff17 	ldw	r2,-4(fp)
   1819c:	1090000c 	andi	r2,r2,16384
   181a0:	10000226 	beq	r2,zero,181ac <altera_avalon_jtag_uart_write+0x2ac>
    return -EWOULDBLOCK;
   181a4:	00bffd44 	movi	r2,-11
   181a8:	00000106 	br	181b0 <altera_avalon_jtag_uart_write+0x2b0>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
   181ac:	00bffec4 	movi	r2,-5
}
   181b0:	e037883a 	mov	sp,fp
   181b4:	dfc00117 	ldw	ra,4(sp)
   181b8:	df000017 	ldw	fp,0(sp)
   181bc:	dec00204 	addi	sp,sp,8
   181c0:	f800283a 	ret

000181c4 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
   181c4:	defffa04 	addi	sp,sp,-24
   181c8:	dfc00515 	stw	ra,20(sp)
   181cc:	df000415 	stw	fp,16(sp)
   181d0:	df000404 	addi	fp,sp,16
   181d4:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
   181d8:	0007883a 	mov	r3,zero
   181dc:	e0bfff17 	ldw	r2,-4(fp)
   181e0:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
   181e4:	e0bfff17 	ldw	r2,-4(fp)
   181e8:	10800104 	addi	r2,r2,4
   181ec:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   181f0:	0005303a 	rdctl	r2,status
   181f4:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   181f8:	e0fffd17 	ldw	r3,-12(fp)
   181fc:	00bfff84 	movi	r2,-2
   18200:	1884703a 	and	r2,r3,r2
   18204:	1001703a 	wrctl	status,r2
  
  return context;
   18208:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
   1820c:	e0bffc15 	stw	r2,-16(fp)
  alt_tick ();
   18210:	0018a440 	call	18a44 <alt_tick>
   18214:	e0bffc17 	ldw	r2,-16(fp)
   18218:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1821c:	e0bffe17 	ldw	r2,-8(fp)
   18220:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
   18224:	0001883a 	nop
   18228:	e037883a 	mov	sp,fp
   1822c:	dfc00117 	ldw	ra,4(sp)
   18230:	df000017 	ldw	fp,0(sp)
   18234:	dec00204 	addi	sp,sp,8
   18238:	f800283a 	ret

0001823c <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
   1823c:	defff804 	addi	sp,sp,-32
   18240:	dfc00715 	stw	ra,28(sp)
   18244:	df000615 	stw	fp,24(sp)
   18248:	df000604 	addi	fp,sp,24
   1824c:	e13ffc15 	stw	r4,-16(fp)
   18250:	e17ffd15 	stw	r5,-12(fp)
   18254:	e1bffe15 	stw	r6,-8(fp)
   18258:	e1ffff15 	stw	r7,-4(fp)
   1825c:	e0bfff17 	ldw	r2,-4(fp)
   18260:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
   18264:	d0a73817 	ldw	r2,-25376(gp)
   18268:	1000021e 	bne	r2,zero,18274 <alt_avalon_timer_sc_init+0x38>
  {
    _alt_tick_rate = nticks;
   1826c:	e0bffb17 	ldw	r2,-20(fp)
   18270:	d0a73815 	stw	r2,-25376(gp)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
   18274:	e0bffc17 	ldw	r2,-16(fp)
   18278:	10800104 	addi	r2,r2,4
   1827c:	00c001c4 	movi	r3,7
   18280:	10c00035 	stwio	r3,0(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
   18284:	d8000015 	stw	zero,0(sp)
   18288:	e1fffc17 	ldw	r7,-16(fp)
   1828c:	018000b4 	movhi	r6,2
   18290:	31a07104 	addi	r6,r6,-32316
   18294:	e17ffe17 	ldw	r5,-8(fp)
   18298:	e13ffd17 	ldw	r4,-12(fp)
   1829c:	000eec80 	call	eec8 <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
   182a0:	0001883a 	nop
   182a4:	e037883a 	mov	sp,fp
   182a8:	dfc00117 	ldw	ra,4(sp)
   182ac:	df000017 	ldw	fp,0(sp)
   182b0:	dec00204 	addi	sp,sp,8
   182b4:	f800283a 	ret

000182b8 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
   182b8:	defff504 	addi	sp,sp,-44
   182bc:	df000a15 	stw	fp,40(sp)
   182c0:	df000a04 	addi	fp,sp,40
   182c4:	e13ffc15 	stw	r4,-16(fp)
   182c8:	e17ffd15 	stw	r5,-12(fp)
   182cc:	e1bffe15 	stw	r6,-8(fp)
   182d0:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
   182d4:	e03ff615 	stw	zero,-40(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   182d8:	d0a73817 	ldw	r2,-25376(gp)
  
  if (alt_ticks_per_second ())
   182dc:	10003c26 	beq	r2,zero,183d0 <alt_alarm_start+0x118>
  {
    if (alarm)
   182e0:	e0bffc17 	ldw	r2,-16(fp)
   182e4:	10003826 	beq	r2,zero,183c8 <alt_alarm_start+0x110>
    {
      alarm->callback = callback;
   182e8:	e0bffc17 	ldw	r2,-16(fp)
   182ec:	e0fffe17 	ldw	r3,-8(fp)
   182f0:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
   182f4:	e0bffc17 	ldw	r2,-16(fp)
   182f8:	e0ffff17 	ldw	r3,-4(fp)
   182fc:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   18300:	0005303a 	rdctl	r2,status
   18304:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   18308:	e0fff917 	ldw	r3,-28(fp)
   1830c:	00bfff84 	movi	r2,-2
   18310:	1884703a 	and	r2,r3,r2
   18314:	1001703a 	wrctl	status,r2
  
  return context;
   18318:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
   1831c:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
   18320:	d0a73917 	ldw	r2,-25372(gp)
      
      current_nticks = alt_nticks();
   18324:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
   18328:	e0fffd17 	ldw	r3,-12(fp)
   1832c:	e0bff617 	ldw	r2,-40(fp)
   18330:	1885883a 	add	r2,r3,r2
   18334:	10c00044 	addi	r3,r2,1
   18338:	e0bffc17 	ldw	r2,-16(fp)
   1833c:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
   18340:	e0bffc17 	ldw	r2,-16(fp)
   18344:	10c00217 	ldw	r3,8(r2)
   18348:	e0bff617 	ldw	r2,-40(fp)
   1834c:	1880042e 	bgeu	r3,r2,18360 <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
   18350:	e0bffc17 	ldw	r2,-16(fp)
   18354:	00c00044 	movi	r3,1
   18358:	10c00405 	stb	r3,16(r2)
   1835c:	00000206 	br	18368 <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
   18360:	e0bffc17 	ldw	r2,-16(fp)
   18364:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
   18368:	e0bffc17 	ldw	r2,-16(fp)
   1836c:	d0e02e04 	addi	r3,gp,-32584
   18370:	e0fffa15 	stw	r3,-24(fp)
   18374:	e0bffb15 	stw	r2,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   18378:	e0bffb17 	ldw	r2,-20(fp)
   1837c:	e0fffa17 	ldw	r3,-24(fp)
   18380:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   18384:	e0bffa17 	ldw	r2,-24(fp)
   18388:	10c00017 	ldw	r3,0(r2)
   1838c:	e0bffb17 	ldw	r2,-20(fp)
   18390:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   18394:	e0bffa17 	ldw	r2,-24(fp)
   18398:	10800017 	ldw	r2,0(r2)
   1839c:	e0fffb17 	ldw	r3,-20(fp)
   183a0:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   183a4:	e0bffa17 	ldw	r2,-24(fp)
   183a8:	e0fffb17 	ldw	r3,-20(fp)
   183ac:	10c00015 	stw	r3,0(r2)
   183b0:	e0bff817 	ldw	r2,-32(fp)
   183b4:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   183b8:	e0bff717 	ldw	r2,-36(fp)
   183bc:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
   183c0:	0005883a 	mov	r2,zero
   183c4:	00000306 	br	183d4 <alt_alarm_start+0x11c>
    }
    else
    {
      return -EINVAL;
   183c8:	00bffa84 	movi	r2,-22
   183cc:	00000106 	br	183d4 <alt_alarm_start+0x11c>
    }
  }
  else
  {
    return -ENOTSUP;
   183d0:	00bfde84 	movi	r2,-134
  }
}
   183d4:	e037883a 	mov	sp,fp
   183d8:	df000017 	ldw	fp,0(sp)
   183dc:	dec00104 	addi	sp,sp,4
   183e0:	f800283a 	ret

000183e4 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
   183e4:	deffff04 	addi	sp,sp,-4
   183e8:	df000015 	stw	fp,0(sp)
   183ec:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
   183f0:	0001883a 	nop
   183f4:	e037883a 	mov	sp,fp
   183f8:	df000017 	ldw	fp,0(sp)
   183fc:	dec00104 	addi	sp,sp,4
   18400:	f800283a 	ret

00018404 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   18404:	defffe04 	addi	sp,sp,-8
   18408:	dfc00115 	stw	ra,4(sp)
   1840c:	df000015 	stw	fp,0(sp)
   18410:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   18414:	d0a00c17 	ldw	r2,-32720(gp)
   18418:	10000326 	beq	r2,zero,18428 <alt_get_errno+0x24>
   1841c:	d0a00c17 	ldw	r2,-32720(gp)
   18420:	103ee83a 	callr	r2
   18424:	00000106 	br	1842c <alt_get_errno+0x28>
   18428:	d0a71a04 	addi	r2,gp,-25496
}
   1842c:	e037883a 	mov	sp,fp
   18430:	dfc00117 	ldw	ra,4(sp)
   18434:	df000017 	ldw	fp,0(sp)
   18438:	dec00204 	addi	sp,sp,8
   1843c:	f800283a 	ret

00018440 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
   18440:	defffa04 	addi	sp,sp,-24
   18444:	dfc00515 	stw	ra,20(sp)
   18448:	df000415 	stw	fp,16(sp)
   1844c:	df000404 	addi	fp,sp,16
   18450:	e13ffe15 	stw	r4,-8(fp)
   18454:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
   18458:	e0bffe17 	ldw	r2,-8(fp)
   1845c:	10000326 	beq	r2,zero,1846c <alt_dev_llist_insert+0x2c>
   18460:	e0bffe17 	ldw	r2,-8(fp)
   18464:	10800217 	ldw	r2,8(r2)
   18468:	1000061e 	bne	r2,zero,18484 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
   1846c:	00184040 	call	18404 <alt_get_errno>
   18470:	1007883a 	mov	r3,r2
   18474:	00800584 	movi	r2,22
   18478:	18800015 	stw	r2,0(r3)
    return -EINVAL;
   1847c:	00bffa84 	movi	r2,-22
   18480:	00001306 	br	184d0 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
   18484:	e0bffe17 	ldw	r2,-8(fp)
   18488:	e0ffff17 	ldw	r3,-4(fp)
   1848c:	e0fffc15 	stw	r3,-16(fp)
   18490:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   18494:	e0bffd17 	ldw	r2,-12(fp)
   18498:	e0fffc17 	ldw	r3,-16(fp)
   1849c:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   184a0:	e0bffc17 	ldw	r2,-16(fp)
   184a4:	10c00017 	ldw	r3,0(r2)
   184a8:	e0bffd17 	ldw	r2,-12(fp)
   184ac:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   184b0:	e0bffc17 	ldw	r2,-16(fp)
   184b4:	10800017 	ldw	r2,0(r2)
   184b8:	e0fffd17 	ldw	r3,-12(fp)
   184bc:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   184c0:	e0bffc17 	ldw	r2,-16(fp)
   184c4:	e0fffd17 	ldw	r3,-12(fp)
   184c8:	10c00015 	stw	r3,0(r2)

  return 0;  
   184cc:	0005883a 	mov	r2,zero
}
   184d0:	e037883a 	mov	sp,fp
   184d4:	dfc00117 	ldw	ra,4(sp)
   184d8:	df000017 	ldw	fp,0(sp)
   184dc:	dec00204 	addi	sp,sp,8
   184e0:	f800283a 	ret

000184e4 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
   184e4:	defffd04 	addi	sp,sp,-12
   184e8:	dfc00215 	stw	ra,8(sp)
   184ec:	df000115 	stw	fp,4(sp)
   184f0:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   184f4:	008000b4 	movhi	r2,2
   184f8:	10a51b04 	addi	r2,r2,-27540
   184fc:	e0bfff15 	stw	r2,-4(fp)
   18500:	00000606 	br	1851c <_do_ctors+0x38>
        (*ctor) (); 
   18504:	e0bfff17 	ldw	r2,-4(fp)
   18508:	10800017 	ldw	r2,0(r2)
   1850c:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   18510:	e0bfff17 	ldw	r2,-4(fp)
   18514:	10bfff04 	addi	r2,r2,-4
   18518:	e0bfff15 	stw	r2,-4(fp)
   1851c:	e0ffff17 	ldw	r3,-4(fp)
   18520:	008000b4 	movhi	r2,2
   18524:	10a51b04 	addi	r2,r2,-27540
   18528:	18bff62e 	bgeu	r3,r2,18504 <__alt_data_end+0xfffe8504>
        (*ctor) (); 
}
   1852c:	0001883a 	nop
   18530:	e037883a 	mov	sp,fp
   18534:	dfc00117 	ldw	ra,4(sp)
   18538:	df000017 	ldw	fp,0(sp)
   1853c:	dec00204 	addi	sp,sp,8
   18540:	f800283a 	ret

00018544 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
   18544:	defffd04 	addi	sp,sp,-12
   18548:	dfc00215 	stw	ra,8(sp)
   1854c:	df000115 	stw	fp,4(sp)
   18550:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   18554:	008000b4 	movhi	r2,2
   18558:	10a51b04 	addi	r2,r2,-27540
   1855c:	e0bfff15 	stw	r2,-4(fp)
   18560:	00000606 	br	1857c <_do_dtors+0x38>
        (*dtor) (); 
   18564:	e0bfff17 	ldw	r2,-4(fp)
   18568:	10800017 	ldw	r2,0(r2)
   1856c:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   18570:	e0bfff17 	ldw	r2,-4(fp)
   18574:	10bfff04 	addi	r2,r2,-4
   18578:	e0bfff15 	stw	r2,-4(fp)
   1857c:	e0ffff17 	ldw	r3,-4(fp)
   18580:	008000b4 	movhi	r2,2
   18584:	10a51c04 	addi	r2,r2,-27536
   18588:	18bff62e 	bgeu	r3,r2,18564 <__alt_data_end+0xfffe8564>
        (*dtor) (); 
}
   1858c:	0001883a 	nop
   18590:	e037883a 	mov	sp,fp
   18594:	dfc00117 	ldw	ra,4(sp)
   18598:	df000017 	ldw	fp,0(sp)
   1859c:	dec00204 	addi	sp,sp,8
   185a0:	f800283a 	ret

000185a4 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
   185a4:	deffff04 	addi	sp,sp,-4
   185a8:	df000015 	stw	fp,0(sp)
   185ac:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
   185b0:	0001883a 	nop
   185b4:	e037883a 	mov	sp,fp
   185b8:	df000017 	ldw	fp,0(sp)
   185bc:	dec00104 	addi	sp,sp,4
   185c0:	f800283a 	ret

000185c4 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
   185c4:	defff804 	addi	sp,sp,-32
   185c8:	dfc00715 	stw	ra,28(sp)
   185cc:	df000615 	stw	fp,24(sp)
   185d0:	dc000515 	stw	r16,20(sp)
   185d4:	df000604 	addi	fp,sp,24
   185d8:	e13ffb15 	stw	r4,-20(fp)
   185dc:	e17ffc15 	stw	r5,-16(fp)
   185e0:	e1bffd15 	stw	r6,-12(fp)
   185e4:	e1fffe15 	stw	r7,-8(fp)
  int old;

  old = open (name, flags, mode);
   185e8:	e1bffe17 	ldw	r6,-8(fp)
   185ec:	e17ffd17 	ldw	r5,-12(fp)
   185f0:	e13ffc17 	ldw	r4,-16(fp)
   185f4:	001884c0 	call	1884c <open>
   185f8:	e0bffa15 	stw	r2,-24(fp)

  if (old >= 0)
   185fc:	e0bffa17 	ldw	r2,-24(fp)
   18600:	10002216 	blt	r2,zero,1868c <alt_open_fd+0xc8>
  {
    fd->dev      = alt_fd_list[old].dev;
   18604:	040000b4 	movhi	r16,2
   18608:	8428ac04 	addi	r16,r16,-23888
   1860c:	e0bffa17 	ldw	r2,-24(fp)
   18610:	01400304 	movi	r5,12
   18614:	1009883a 	mov	r4,r2
   18618:	000c3c80 	call	c3c8 <__mulsi3>
   1861c:	8085883a 	add	r2,r16,r2
   18620:	10c00017 	ldw	r3,0(r2)
   18624:	e0bffb17 	ldw	r2,-20(fp)
   18628:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
   1862c:	040000b4 	movhi	r16,2
   18630:	8428ac04 	addi	r16,r16,-23888
   18634:	e0bffa17 	ldw	r2,-24(fp)
   18638:	01400304 	movi	r5,12
   1863c:	1009883a 	mov	r4,r2
   18640:	000c3c80 	call	c3c8 <__mulsi3>
   18644:	8085883a 	add	r2,r16,r2
   18648:	10800104 	addi	r2,r2,4
   1864c:	10c00017 	ldw	r3,0(r2)
   18650:	e0bffb17 	ldw	r2,-20(fp)
   18654:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
   18658:	040000b4 	movhi	r16,2
   1865c:	8428ac04 	addi	r16,r16,-23888
   18660:	e0bffa17 	ldw	r2,-24(fp)
   18664:	01400304 	movi	r5,12
   18668:	1009883a 	mov	r4,r2
   1866c:	000c3c80 	call	c3c8 <__mulsi3>
   18670:	8085883a 	add	r2,r16,r2
   18674:	10800204 	addi	r2,r2,8
   18678:	10c00017 	ldw	r3,0(r2)
   1867c:	e0bffb17 	ldw	r2,-20(fp)
   18680:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
   18684:	e13ffa17 	ldw	r4,-24(fp)
   18688:	000f6500 	call	f650 <alt_release_fd>
  }
} 
   1868c:	0001883a 	nop
   18690:	e6ffff04 	addi	sp,fp,-4
   18694:	dfc00217 	ldw	ra,8(sp)
   18698:	df000117 	ldw	fp,4(sp)
   1869c:	dc000017 	ldw	r16,0(sp)
   186a0:	dec00304 	addi	sp,sp,12
   186a4:	f800283a 	ret

000186a8 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
   186a8:	defffb04 	addi	sp,sp,-20
   186ac:	dfc00415 	stw	ra,16(sp)
   186b0:	df000315 	stw	fp,12(sp)
   186b4:	df000304 	addi	fp,sp,12
   186b8:	e13ffd15 	stw	r4,-12(fp)
   186bc:	e17ffe15 	stw	r5,-8(fp)
   186c0:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
   186c4:	01c07fc4 	movi	r7,511
   186c8:	01800044 	movi	r6,1
   186cc:	e17ffd17 	ldw	r5,-12(fp)
   186d0:	010000b4 	movhi	r4,2
   186d4:	2128af04 	addi	r4,r4,-23876
   186d8:	00185c40 	call	185c4 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
   186dc:	01c07fc4 	movi	r7,511
   186e0:	000d883a 	mov	r6,zero
   186e4:	e17ffe17 	ldw	r5,-8(fp)
   186e8:	010000b4 	movhi	r4,2
   186ec:	2128ac04 	addi	r4,r4,-23888
   186f0:	00185c40 	call	185c4 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
   186f4:	01c07fc4 	movi	r7,511
   186f8:	01800044 	movi	r6,1
   186fc:	e17fff17 	ldw	r5,-4(fp)
   18700:	010000b4 	movhi	r4,2
   18704:	2128b204 	addi	r4,r4,-23864
   18708:	00185c40 	call	185c4 <alt_open_fd>
}  
   1870c:	0001883a 	nop
   18710:	e037883a 	mov	sp,fp
   18714:	dfc00117 	ldw	ra,4(sp)
   18718:	df000017 	ldw	fp,0(sp)
   1871c:	dec00204 	addi	sp,sp,8
   18720:	f800283a 	ret

00018724 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   18724:	defffe04 	addi	sp,sp,-8
   18728:	dfc00115 	stw	ra,4(sp)
   1872c:	df000015 	stw	fp,0(sp)
   18730:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   18734:	d0a00c17 	ldw	r2,-32720(gp)
   18738:	10000326 	beq	r2,zero,18748 <alt_get_errno+0x24>
   1873c:	d0a00c17 	ldw	r2,-32720(gp)
   18740:	103ee83a 	callr	r2
   18744:	00000106 	br	1874c <alt_get_errno+0x28>
   18748:	d0a71a04 	addi	r2,gp,-25496
}
   1874c:	e037883a 	mov	sp,fp
   18750:	dfc00117 	ldw	ra,4(sp)
   18754:	df000017 	ldw	fp,0(sp)
   18758:	dec00204 	addi	sp,sp,8
   1875c:	f800283a 	ret

00018760 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
   18760:	defffb04 	addi	sp,sp,-20
   18764:	dfc00415 	stw	ra,16(sp)
   18768:	df000315 	stw	fp,12(sp)
   1876c:	dc000215 	stw	r16,8(sp)
   18770:	df000304 	addi	fp,sp,12
   18774:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
   18778:	e0bffe17 	ldw	r2,-8(fp)
   1877c:	10800217 	ldw	r2,8(r2)
   18780:	10d00034 	orhi	r3,r2,16384
   18784:	e0bffe17 	ldw	r2,-8(fp)
   18788:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   1878c:	e03ffd15 	stw	zero,-12(fp)
   18790:	00002306 	br	18820 <alt_file_locked+0xc0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   18794:	040000b4 	movhi	r16,2
   18798:	8428ac04 	addi	r16,r16,-23888
   1879c:	e0bffd17 	ldw	r2,-12(fp)
   187a0:	01400304 	movi	r5,12
   187a4:	1009883a 	mov	r4,r2
   187a8:	000c3c80 	call	c3c8 <__mulsi3>
   187ac:	8085883a 	add	r2,r16,r2
   187b0:	10c00017 	ldw	r3,0(r2)
   187b4:	e0bffe17 	ldw	r2,-8(fp)
   187b8:	10800017 	ldw	r2,0(r2)
   187bc:	1880151e 	bne	r3,r2,18814 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   187c0:	040000b4 	movhi	r16,2
   187c4:	8428ac04 	addi	r16,r16,-23888
   187c8:	e0bffd17 	ldw	r2,-12(fp)
   187cc:	01400304 	movi	r5,12
   187d0:	1009883a 	mov	r4,r2
   187d4:	000c3c80 	call	c3c8 <__mulsi3>
   187d8:	8085883a 	add	r2,r16,r2
   187dc:	10800204 	addi	r2,r2,8
   187e0:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   187e4:	10000b0e 	bge	r2,zero,18814 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
   187e8:	01400304 	movi	r5,12
   187ec:	e13ffd17 	ldw	r4,-12(fp)
   187f0:	000c3c80 	call	c3c8 <__mulsi3>
   187f4:	1007883a 	mov	r3,r2
   187f8:	008000b4 	movhi	r2,2
   187fc:	10a8ac04 	addi	r2,r2,-23888
   18800:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   18804:	e0bffe17 	ldw	r2,-8(fp)
   18808:	18800226 	beq	r3,r2,18814 <alt_file_locked+0xb4>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
   1880c:	00bffcc4 	movi	r2,-13
   18810:	00000806 	br	18834 <alt_file_locked+0xd4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   18814:	e0bffd17 	ldw	r2,-12(fp)
   18818:	10800044 	addi	r2,r2,1
   1881c:	e0bffd15 	stw	r2,-12(fp)
   18820:	d0a00b17 	ldw	r2,-32724(gp)
   18824:	1007883a 	mov	r3,r2
   18828:	e0bffd17 	ldw	r2,-12(fp)
   1882c:	18bfd92e 	bgeu	r3,r2,18794 <__alt_data_end+0xfffe8794>
    }
  }
  
  /* The device is not locked */
 
  return 0;
   18830:	0005883a 	mov	r2,zero
}
   18834:	e6ffff04 	addi	sp,fp,-4
   18838:	dfc00217 	ldw	ra,8(sp)
   1883c:	df000117 	ldw	fp,4(sp)
   18840:	dc000017 	ldw	r16,0(sp)
   18844:	dec00304 	addi	sp,sp,12
   18848:	f800283a 	ret

0001884c <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
   1884c:	defff604 	addi	sp,sp,-40
   18850:	dfc00915 	stw	ra,36(sp)
   18854:	df000815 	stw	fp,32(sp)
   18858:	df000804 	addi	fp,sp,32
   1885c:	e13ffd15 	stw	r4,-12(fp)
   18860:	e17ffe15 	stw	r5,-8(fp)
   18864:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
   18868:	00bfffc4 	movi	r2,-1
   1886c:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
   18870:	00bffb44 	movi	r2,-19
   18874:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
   18878:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
   1887c:	d1600904 	addi	r5,gp,-32732
   18880:	e13ffd17 	ldw	r4,-12(fp)
   18884:	0018ec80 	call	18ec8 <alt_find_dev>
   18888:	e0bff815 	stw	r2,-32(fp)
   1888c:	e0bff817 	ldw	r2,-32(fp)
   18890:	1000051e 	bne	r2,zero,188a8 <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
   18894:	e13ffd17 	ldw	r4,-12(fp)
   18898:	0018f580 	call	18f58 <alt_find_file>
   1889c:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
   188a0:	00800044 	movi	r2,1
   188a4:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
   188a8:	e0bff817 	ldw	r2,-32(fp)
   188ac:	10002b26 	beq	r2,zero,1895c <open+0x110>
  {
    if ((index = alt_get_fd (dev)) < 0)
   188b0:	e13ff817 	ldw	r4,-32(fp)
   188b4:	00190600 	call	19060 <alt_get_fd>
   188b8:	e0bff915 	stw	r2,-28(fp)
   188bc:	e0bff917 	ldw	r2,-28(fp)
   188c0:	1000030e 	bge	r2,zero,188d0 <open+0x84>
    {
      status = index;
   188c4:	e0bff917 	ldw	r2,-28(fp)
   188c8:	e0bffa15 	stw	r2,-24(fp)
   188cc:	00002506 	br	18964 <open+0x118>
    }
    else
    {
      fd = &alt_fd_list[index];
   188d0:	01400304 	movi	r5,12
   188d4:	e13ff917 	ldw	r4,-28(fp)
   188d8:	000c3c80 	call	c3c8 <__mulsi3>
   188dc:	1007883a 	mov	r3,r2
   188e0:	008000b4 	movhi	r2,2
   188e4:	10a8ac04 	addi	r2,r2,-23888
   188e8:	1885883a 	add	r2,r3,r2
   188ec:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
   188f0:	e0fffe17 	ldw	r3,-8(fp)
   188f4:	00900034 	movhi	r2,16384
   188f8:	10bfffc4 	addi	r2,r2,-1
   188fc:	1886703a 	and	r3,r3,r2
   18900:	e0bffc17 	ldw	r2,-16(fp)
   18904:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
   18908:	e0bffb17 	ldw	r2,-20(fp)
   1890c:	1000051e 	bne	r2,zero,18924 <open+0xd8>
   18910:	e13ffc17 	ldw	r4,-16(fp)
   18914:	00187600 	call	18760 <alt_file_locked>
   18918:	e0bffa15 	stw	r2,-24(fp)
   1891c:	e0bffa17 	ldw	r2,-24(fp)
   18920:	10001016 	blt	r2,zero,18964 <open+0x118>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
   18924:	e0bff817 	ldw	r2,-32(fp)
   18928:	10800317 	ldw	r2,12(r2)
   1892c:	10000826 	beq	r2,zero,18950 <open+0x104>
   18930:	e0bff817 	ldw	r2,-32(fp)
   18934:	10800317 	ldw	r2,12(r2)
   18938:	e1ffff17 	ldw	r7,-4(fp)
   1893c:	e1bffe17 	ldw	r6,-8(fp)
   18940:	e17ffd17 	ldw	r5,-12(fp)
   18944:	e13ffc17 	ldw	r4,-16(fp)
   18948:	103ee83a 	callr	r2
   1894c:	00000106 	br	18954 <open+0x108>
   18950:	0005883a 	mov	r2,zero
   18954:	e0bffa15 	stw	r2,-24(fp)
   18958:	00000206 	br	18964 <open+0x118>
      }
    }
  }
  else
  {
    status = -ENODEV;
   1895c:	00bffb44 	movi	r2,-19
   18960:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
   18964:	e0bffa17 	ldw	r2,-24(fp)
   18968:	1000090e 	bge	r2,zero,18990 <open+0x144>
  {
    alt_release_fd (index);  
   1896c:	e13ff917 	ldw	r4,-28(fp)
   18970:	000f6500 	call	f650 <alt_release_fd>
    ALT_ERRNO = -status;
   18974:	00187240 	call	18724 <alt_get_errno>
   18978:	1007883a 	mov	r3,r2
   1897c:	e0bffa17 	ldw	r2,-24(fp)
   18980:	0085c83a 	sub	r2,zero,r2
   18984:	18800015 	stw	r2,0(r3)
    return -1;
   18988:	00bfffc4 	movi	r2,-1
   1898c:	00000106 	br	18994 <open+0x148>
  }
  
  /* return the reference upon success */

  return index;
   18990:	e0bff917 	ldw	r2,-28(fp)
}
   18994:	e037883a 	mov	sp,fp
   18998:	dfc00117 	ldw	ra,4(sp)
   1899c:	df000017 	ldw	fp,0(sp)
   189a0:	dec00204 	addi	sp,sp,8
   189a4:	f800283a 	ret

000189a8 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
   189a8:	defffa04 	addi	sp,sp,-24
   189ac:	df000515 	stw	fp,20(sp)
   189b0:	df000504 	addi	fp,sp,20
   189b4:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   189b8:	0005303a 	rdctl	r2,status
   189bc:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   189c0:	e0fffc17 	ldw	r3,-16(fp)
   189c4:	00bfff84 	movi	r2,-2
   189c8:	1884703a 	and	r2,r3,r2
   189cc:	1001703a 	wrctl	status,r2
  
  return context;
   189d0:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
   189d4:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
   189d8:	e0bfff17 	ldw	r2,-4(fp)
   189dc:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
   189e0:	e0bffd17 	ldw	r2,-12(fp)
   189e4:	10800017 	ldw	r2,0(r2)
   189e8:	e0fffd17 	ldw	r3,-12(fp)
   189ec:	18c00117 	ldw	r3,4(r3)
   189f0:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
   189f4:	e0bffd17 	ldw	r2,-12(fp)
   189f8:	10800117 	ldw	r2,4(r2)
   189fc:	e0fffd17 	ldw	r3,-12(fp)
   18a00:	18c00017 	ldw	r3,0(r3)
   18a04:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
   18a08:	e0bffd17 	ldw	r2,-12(fp)
   18a0c:	e0fffd17 	ldw	r3,-12(fp)
   18a10:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
   18a14:	e0bffd17 	ldw	r2,-12(fp)
   18a18:	e0fffd17 	ldw	r3,-12(fp)
   18a1c:	10c00015 	stw	r3,0(r2)
   18a20:	e0bffb17 	ldw	r2,-20(fp)
   18a24:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   18a28:	e0bffe17 	ldw	r2,-8(fp)
   18a2c:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
   18a30:	0001883a 	nop
   18a34:	e037883a 	mov	sp,fp
   18a38:	df000017 	ldw	fp,0(sp)
   18a3c:	dec00104 	addi	sp,sp,4
   18a40:	f800283a 	ret

00018a44 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
   18a44:	defffb04 	addi	sp,sp,-20
   18a48:	dfc00415 	stw	ra,16(sp)
   18a4c:	df000315 	stw	fp,12(sp)
   18a50:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
   18a54:	d0a02e17 	ldw	r2,-32584(gp)
   18a58:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
   18a5c:	d0a73917 	ldw	r2,-25372(gp)
   18a60:	10800044 	addi	r2,r2,1
   18a64:	d0a73915 	stw	r2,-25372(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   18a68:	00002e06 	br	18b24 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
   18a6c:	e0bffd17 	ldw	r2,-12(fp)
   18a70:	10800017 	ldw	r2,0(r2)
   18a74:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
   18a78:	e0bffd17 	ldw	r2,-12(fp)
   18a7c:	10800403 	ldbu	r2,16(r2)
   18a80:	10803fcc 	andi	r2,r2,255
   18a84:	10000426 	beq	r2,zero,18a98 <alt_tick+0x54>
   18a88:	d0a73917 	ldw	r2,-25372(gp)
   18a8c:	1000021e 	bne	r2,zero,18a98 <alt_tick+0x54>
    {
      alarm->rollover = 0;
   18a90:	e0bffd17 	ldw	r2,-12(fp)
   18a94:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
   18a98:	e0bffd17 	ldw	r2,-12(fp)
   18a9c:	10800217 	ldw	r2,8(r2)
   18aa0:	d0e73917 	ldw	r3,-25372(gp)
   18aa4:	18801d36 	bltu	r3,r2,18b1c <alt_tick+0xd8>
   18aa8:	e0bffd17 	ldw	r2,-12(fp)
   18aac:	10800403 	ldbu	r2,16(r2)
   18ab0:	10803fcc 	andi	r2,r2,255
   18ab4:	1000191e 	bne	r2,zero,18b1c <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
   18ab8:	e0bffd17 	ldw	r2,-12(fp)
   18abc:	10800317 	ldw	r2,12(r2)
   18ac0:	e0fffd17 	ldw	r3,-12(fp)
   18ac4:	18c00517 	ldw	r3,20(r3)
   18ac8:	1809883a 	mov	r4,r3
   18acc:	103ee83a 	callr	r2
   18ad0:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
   18ad4:	e0bfff17 	ldw	r2,-4(fp)
   18ad8:	1000031e 	bne	r2,zero,18ae8 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
   18adc:	e13ffd17 	ldw	r4,-12(fp)
   18ae0:	00189a80 	call	189a8 <alt_alarm_stop>
   18ae4:	00000d06 	br	18b1c <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
   18ae8:	e0bffd17 	ldw	r2,-12(fp)
   18aec:	10c00217 	ldw	r3,8(r2)
   18af0:	e0bfff17 	ldw	r2,-4(fp)
   18af4:	1887883a 	add	r3,r3,r2
   18af8:	e0bffd17 	ldw	r2,-12(fp)
   18afc:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
   18b00:	e0bffd17 	ldw	r2,-12(fp)
   18b04:	10c00217 	ldw	r3,8(r2)
   18b08:	d0a73917 	ldw	r2,-25372(gp)
   18b0c:	1880032e 	bgeu	r3,r2,18b1c <alt_tick+0xd8>
        {
          alarm->rollover = 1;
   18b10:	e0bffd17 	ldw	r2,-12(fp)
   18b14:	00c00044 	movi	r3,1
   18b18:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
   18b1c:	e0bffe17 	ldw	r2,-8(fp)
   18b20:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   18b24:	e0fffd17 	ldw	r3,-12(fp)
   18b28:	d0a02e04 	addi	r2,gp,-32584
   18b2c:	18bfcf1e 	bne	r3,r2,18a6c <__alt_data_end+0xfffe8a6c>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
   18b30:	00108640 	call	10864 <OSTimeTick>
}
   18b34:	0001883a 	nop
   18b38:	e037883a 	mov	sp,fp
   18b3c:	dfc00117 	ldw	ra,4(sp)
   18b40:	df000017 	ldw	fp,0(sp)
   18b44:	dec00204 	addi	sp,sp,8
   18b48:	f800283a 	ret

00018b4c <altera_nios2_qsys_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
   18b4c:	deffff04 	addi	sp,sp,-4
   18b50:	df000015 	stw	fp,0(sp)
   18b54:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
   18b58:	000170fa 	wrctl	ienable,zero
}
   18b5c:	0001883a 	nop
   18b60:	e037883a 	mov	sp,fp
   18b64:	df000017 	ldw	fp,0(sp)
   18b68:	dec00104 	addi	sp,sp,4
   18b6c:	f800283a 	ret

00018b70 <OSCtxSw>:

      /* 
       * Save the remaining registers to the stack. 
       */

      addi sp, sp, -44
   18b70:	defff504 	addi	sp,sp,-44
      bltu  sp, et, .Lstack_overflow

#endif

#if OS_THREAD_SAFE_NEWLIB
      ldw r3, %gprel(_impure_ptr)(gp)   /* load the pointer */
   18b74:	d0e00217 	ldw	r3,-32760(gp)
#endif /* OS_THREAD_SAFE_NEWLIB */

      ldw r4, %gprel(OSTCBCur)(gp)
   18b78:	d1273317 	ldw	r4,-25396(gp)

      stw ra,  0(sp)
   18b7c:	dfc00015 	stw	ra,0(sp)
      stw fp,  4(sp)
   18b80:	df000115 	stw	fp,4(sp)
      stw r23, 8(sp)
   18b84:	ddc00215 	stw	r23,8(sp)
      stw r22, 12(sp)
   18b88:	dd800315 	stw	r22,12(sp)
      stw r21, 16(sp)
   18b8c:	dd400415 	stw	r21,16(sp)
      stw r20, 20(sp)
   18b90:	dd000515 	stw	r20,20(sp)
      stw r19, 24(sp)
   18b94:	dcc00615 	stw	r19,24(sp)
      stw r18, 28(sp)
   18b98:	dc800715 	stw	r18,28(sp)
      stw r17, 32(sp)
   18b9c:	dc400815 	stw	r17,32(sp)
      stw r16, 36(sp)
   18ba0:	dc000915 	stw	r16,36(sp)
       * store the current value of _impure_ptr so it can be restored
       * later; _impure_ptr is asigned on a per task basis. It is used
       * by Newlib to achieve reentrancy.	
       */

      stw r3, 40(sp)                  /* save the impure pointer */
   18ba4:	d8c00a15 	stw	r3,40(sp)
      /* 
       * Save the current tasks stack pointer into the current tasks OS_TCB.
       * i.e. OSTCBCur->OSTCBStkPtr = sp;
       */

      stw sp, (r4)                  /* save the stack pointer (OSTCBStkPtr */
   18ba8:	26c00015 	stw	sp,0(r4)

      /*
       * Call the user definable OSTaskSWHook()
       */

      call OSTaskSwHook
   18bac:	0018de40 	call	18de4 <OSTaskSwHook>
      /*
       * OSTCBCur = OSTCBHighRdy; 
       * OSPrioCur = OSPrioHighRdy; 
       */

      ldw r4, %gprel(OSTCBHighRdy)(gp)
   18bb0:	d1272e17 	ldw	r4,-25416(gp)
      ldb r5, %gprel(OSPrioHighRdy)(gp)
   18bb4:	d1672607 	ldb	r5,-25448(gp)

      stw r4, %gprel(OSTCBCur)(gp)     /* set the current task to be the new task */
   18bb8:	d1273315 	stw	r4,-25396(gp)
      stb r5, %gprel(OSPrioCur)(gp)    /* store the new task's priority as the current */
   18bbc:	d1672645 	stb	r5,-25447(gp)

      /*
       * Set the stack pointer to point to the new task's stack
       */

      ldw sp, (r4) /* the stack pointer is the first entry in the OS_TCB structure */
   18bc0:	26c00017 	ldw	sp,0(r4)
      /*
       * restore the value of _impure_ptr ; _impure_ptr is asigned on a 
       * per task basis. It is used by Newlib to achieve reentrancy.	
       */

      ldw r3, 40(sp)                  /* load the new impure pointer */
   18bc4:	d8c00a17 	ldw	r3,40(sp)

      /*
       * Restore the saved registers for the new task.
       */

      ldw ra,  0(sp)
   18bc8:	dfc00017 	ldw	ra,0(sp)
      ldw fp,  4(sp)
   18bcc:	df000117 	ldw	fp,4(sp)
      ldw r23, 8(sp)
   18bd0:	ddc00217 	ldw	r23,8(sp)
      ldw r22, 12(sp)
   18bd4:	dd800317 	ldw	r22,12(sp)
      ldw r21, 16(sp)
   18bd8:	dd400417 	ldw	r21,16(sp)
      ldw r20, 20(sp)
   18bdc:	dd000517 	ldw	r20,20(sp)
      ldw r19, 24(sp)
   18be0:	dcc00617 	ldw	r19,24(sp)
      ldw r18, 28(sp)
   18be4:	dc800717 	ldw	r18,28(sp)
      ldw r17, 32(sp)
   18be8:	dc400817 	ldw	r17,32(sp)
      ldw r16, 36(sp)
   18bec:	dc000917 	ldw	r16,36(sp)

#if OS_THREAD_SAFE_NEWLIB

      stw r3, %gprel(_impure_ptr)(gp) /* update _impure_ptr */
   18bf0:	d0e00215 	stw	r3,-32760(gp)

      stw et, %gprel(alt_stack_limit_value)(gp)

#endif

      addi sp, sp, 44
   18bf4:	dec00b04 	addi	sp,sp,44

      /*
       * resume execution of the new task.
       */

      ret
   18bf8:	f800283a 	ret

00018bfc <OSStartHighRdy>:

      /*
       * disable interrupts so that the scheduler doesn't run while
       * we're initialising this task.
       */  
      rdctl r18, status
   18bfc:	0025303a 	rdctl	r18,status
      subi  r17, zero, 2   /* r17 = 0xfffffffe */
   18c00:	047fff84 	movi	r17,-2
      and   r18, r18, r17
   18c04:	9464703a 	and	r18,r18,r17
      wrctl status, r18
   18c08:	9001703a 	wrctl	status,r18

      /*
       * Call the user definable OSTaskSWHook()
       */

      call OSTaskSwHook
   18c0c:	0018de40 	call	18de4 <OSTaskSwHook>

      /* 
       * set OSRunning = TRUE.
       */

      movi r18, 1                    /* set r18 to the value 'TRUE' */
   18c10:	04800044 	movi	r18,1
      stb r18, %gprel(OSRunning)(gp) /* save this to OSRunning */
   18c14:	d4a72445 	stb	r18,-25455(gp)

      /*
       * start execution of the new task.
       */

      br 9b
   18c18:	003fe506 	br	18bb0 <__alt_data_end+0xfffe8bb0>

00018c1c <OSStartTsk>:

OSStartTsk:
      /* This instruction is never executed.  Its here to make the
       * backtrace work right 
       */
      movi sp, 0
   18c1c:	06c00004 	movi	sp,0

      /* Enable interrupts */
      rdctl r2, status
   18c20:	0005303a 	rdctl	r2,status
      ori   r2, r2, 0x1
   18c24:	10800054 	ori	r2,r2,1
      wrctl status, r2
   18c28:	1001703a 	wrctl	status,r2

      ldw r2, 4(sp)
   18c2c:	d8800117 	ldw	r2,4(sp)
      ldw r4, 0(sp)
   18c30:	d9000017 	ldw	r4,0(sp)

      addi sp, sp, 8
   18c34:	dec00204 	addi	sp,sp,8

      callr r2
   18c38:	103ee83a 	callr	r2

      nop
   18c3c:	0001883a 	nop

00018c40 <OSTaskStkInit>:
 *              been placed on the stack in the proper order.
 *
 ***********************************************************************************************/

OS_STK *OSTaskStkInit(void (*task)(void *pd), void *pdata, OS_STK *pstk, INT16U opt)
{
   18c40:	defff704 	addi	sp,sp,-36
   18c44:	dfc00815 	stw	ra,32(sp)
   18c48:	df000715 	stw	fp,28(sp)
   18c4c:	df000704 	addi	fp,sp,28
   18c50:	e13ffc15 	stw	r4,-16(fp)
   18c54:	e17ffd15 	stw	r5,-12(fp)
   18c58:	e1bffe15 	stw	r6,-8(fp)
   18c5c:	3805883a 	mov	r2,r7
   18c60:	e0bfff0d 	sth	r2,-4(fp)
    * create and initialise the impure pointer used for Newlib thread local storage.
    * This is only done if the C library is being used in a thread safe mode. Otherwise
    * a single reent structure is used for all threads, which saves memory.
    */

   local_impure_ptr = (struct _reent*)((((INT32U)(pstk)) & ~0x3) - sizeof(struct _reent));
   18c64:	e0fffe17 	ldw	r3,-8(fp)
   18c68:	00bfff04 	movi	r2,-4
   18c6c:	1884703a 	and	r2,r3,r2
   18c70:	10bef704 	addi	r2,r2,-1060
   18c74:	e0bff915 	stw	r2,-28(fp)

   _REENT_INIT_PTR (local_impure_ptr);
   18c78:	01810904 	movi	r6,1060
   18c7c:	000b883a 	mov	r5,zero
   18c80:	e13ff917 	ldw	r4,-28(fp)
   18c84:	00079400 	call	7940 <memset>
   18c88:	e0bff917 	ldw	r2,-28(fp)
   18c8c:	10c0bb04 	addi	r3,r2,748
   18c90:	e0bff917 	ldw	r2,-28(fp)
   18c94:	10c00115 	stw	r3,4(r2)
   18c98:	e0bff917 	ldw	r2,-28(fp)
   18c9c:	10c0d504 	addi	r3,r2,852
   18ca0:	e0bff917 	ldw	r2,-28(fp)
   18ca4:	10c00215 	stw	r3,8(r2)
   18ca8:	e0bff917 	ldw	r2,-28(fp)
   18cac:	10c0ef04 	addi	r3,r2,956
   18cb0:	e0bff917 	ldw	r2,-28(fp)
   18cb4:	10c00315 	stw	r3,12(r2)
   18cb8:	e0fff917 	ldw	r3,-28(fp)
   18cbc:	008000b4 	movhi	r2,2
   18cc0:	10a67804 	addi	r2,r2,-26144
   18cc4:	18800d15 	stw	r2,52(r3)
   18cc8:	e0bff917 	ldw	r2,-28(fp)
   18ccc:	00c00044 	movi	r3,1
   18cd0:	10c02915 	stw	r3,164(r2)
   18cd4:	10002a15 	stw	zero,168(r2)
   18cd8:	e0bff917 	ldw	r2,-28(fp)
   18cdc:	00ccc384 	movi	r3,13070
   18ce0:	10c02b0d 	sth	r3,172(r2)
   18ce4:	e0bff917 	ldw	r2,-28(fp)
   18ce8:	00eaf344 	movi	r3,-21555
   18cec:	10c02b8d 	sth	r3,174(r2)
   18cf0:	e0bff917 	ldw	r2,-28(fp)
   18cf4:	00c48d04 	movi	r3,4660
   18cf8:	10c02c0d 	sth	r3,176(r2)
   18cfc:	e0bff917 	ldw	r2,-28(fp)
   18d00:	00f99b44 	movi	r3,-6547
   18d04:	10c02c8d 	sth	r3,178(r2)
   18d08:	e0bff917 	ldw	r2,-28(fp)
   18d0c:	00f7bb04 	movi	r3,-8468
   18d10:	10c02d0d 	sth	r3,180(r2)
   18d14:	e0bff917 	ldw	r2,-28(fp)
   18d18:	00c00144 	movi	r3,5
   18d1c:	10c02d8d 	sth	r3,182(r2)
   18d20:	e0bff917 	ldw	r2,-28(fp)
   18d24:	00c002c4 	movi	r3,11
   18d28:	10c02e0d 	sth	r3,184(r2)
   /* 
    * create a stack frame at the top of the stack (leaving space for the 
    * reentrant data structure).
    */

   frame_pointer = (INT32U*) local_impure_ptr;
   18d2c:	e0bff917 	ldw	r2,-28(fp)
   18d30:	e0bffa15 	stw	r2,-24(fp)
#else
   frame_pointer =   (INT32U*) (((INT32U)(pstk)) & ~0x3);
#endif /* OS_THREAD_SAFE_NEWLIB */
   stk = frame_pointer - 13;
   18d34:	e0bffa17 	ldw	r2,-24(fp)
   18d38:	10bff304 	addi	r2,r2,-52
   18d3c:	e0bffb15 	stw	r2,-20(fp)

   /* Now fill the stack frame. */

   stk[12] = (INT32U)task;            /* task address (ra) */
   18d40:	e0bffb17 	ldw	r2,-20(fp)
   18d44:	10800c04 	addi	r2,r2,48
   18d48:	e0fffc17 	ldw	r3,-16(fp)
   18d4c:	10c00015 	stw	r3,0(r2)
   stk[11] = (INT32U) pdata;          /* first register argument (r4) */
   18d50:	e0bffb17 	ldw	r2,-20(fp)
   18d54:	10800b04 	addi	r2,r2,44
   18d58:	e0fffd17 	ldw	r3,-12(fp)
   18d5c:	10c00015 	stw	r3,0(r2)

#if OS_THREAD_SAFE_NEWLIB
   stk[10] = (INT32U) local_impure_ptr; /* value of _impure_ptr for this thread */
   18d60:	e0bffb17 	ldw	r2,-20(fp)
   18d64:	10800a04 	addi	r2,r2,40
   18d68:	e0fff917 	ldw	r3,-28(fp)
   18d6c:	10c00015 	stw	r3,0(r2)
#endif /* OS_THREAD_SAFE_NEWLIB */
   stk[0]  = ((INT32U)&OSStartTsk) + 4;/* exception return address (ea) */  
   18d70:	008000b4 	movhi	r2,2
   18d74:	10a30704 	addi	r2,r2,-29668
   18d78:	10c00104 	addi	r3,r2,4
   18d7c:	e0bffb17 	ldw	r2,-20(fp)
   18d80:	10c00015 	stw	r3,0(r2)
    */
   __asm__ (".set OSTCBNext_OFFSET,%0" :: "i" (offsetof(OS_TCB, OSTCBNext)));
   __asm__ (".set OSTCBPrio_OFFSET,%0" :: "i" (offsetof(OS_TCB, OSTCBPrio)));
   __asm__ (".set OSTCBStkPtr_OFFSET,%0" :: "i" (offsetof(OS_TCB, OSTCBStkPtr)));
  
   return((OS_STK *)stk);
   18d84:	e0bffb17 	ldw	r2,-20(fp)
}
   18d88:	e037883a 	mov	sp,fp
   18d8c:	dfc00117 	ldw	ra,4(sp)
   18d90:	df000017 	ldw	fp,0(sp)
   18d94:	dec00204 	addi	sp,sp,8
   18d98:	f800283a 	ret

00018d9c <OSTaskCreateHook>:
*
* Note(s)    : 1) Interrupts are disabled during this call.
*********************************************************************************************************
*/
void OSTaskCreateHook (OS_TCB *ptcb)
{
   18d9c:	defffe04 	addi	sp,sp,-8
   18da0:	df000115 	stw	fp,4(sp)
   18da4:	df000104 	addi	fp,sp,4
   18da8:	e13fff15 	stw	r4,-4(fp)
    ptcb = ptcb;                       /* Prevent compiler warning */
}
   18dac:	0001883a 	nop
   18db0:	e037883a 	mov	sp,fp
   18db4:	df000017 	ldw	fp,0(sp)
   18db8:	dec00104 	addi	sp,sp,4
   18dbc:	f800283a 	ret

00018dc0 <OSTaskDelHook>:
*
* Note(s)    : 1) Interrupts are disabled during this call.
*********************************************************************************************************
*/
void OSTaskDelHook (OS_TCB *ptcb)
{
   18dc0:	defffe04 	addi	sp,sp,-8
   18dc4:	df000115 	stw	fp,4(sp)
   18dc8:	df000104 	addi	fp,sp,4
   18dcc:	e13fff15 	stw	r4,-4(fp)
    ptcb = ptcb;                       /* Prevent compiler warning                                     */
}
   18dd0:	0001883a 	nop
   18dd4:	e037883a 	mov	sp,fp
   18dd8:	df000017 	ldw	fp,0(sp)
   18ddc:	dec00104 	addi	sp,sp,4
   18de0:	f800283a 	ret

00018de4 <OSTaskSwHook>:
*                 will be 'switched in' (i.e. the highest priority task) and, 'OSTCBCur' points to the
*                 task being switched out (i.e. the preempted task).
*********************************************************************************************************
*/
void OSTaskSwHook (void)
{
   18de4:	deffff04 	addi	sp,sp,-4
   18de8:	df000015 	stw	fp,0(sp)
   18dec:	d839883a 	mov	fp,sp
}
   18df0:	0001883a 	nop
   18df4:	e037883a 	mov	sp,fp
   18df8:	df000017 	ldw	fp,0(sp)
   18dfc:	dec00104 	addi	sp,sp,4
   18e00:	f800283a 	ret

00018e04 <OSTaskStatHook>:
*
* Arguments  : none
*********************************************************************************************************
*/
void OSTaskStatHook (void)
{
   18e04:	deffff04 	addi	sp,sp,-4
   18e08:	df000015 	stw	fp,0(sp)
   18e0c:	d839883a 	mov	fp,sp
}
   18e10:	0001883a 	nop
   18e14:	e037883a 	mov	sp,fp
   18e18:	df000017 	ldw	fp,0(sp)
   18e1c:	dec00104 	addi	sp,sp,4
   18e20:	f800283a 	ret

00018e24 <OSTimeTickHook>:
#ifdef ALT_INICHE
void cticks_hook(void);
#endif

void OSTimeTickHook (void)
{
   18e24:	deffff04 	addi	sp,sp,-4
   18e28:	df000015 	stw	fp,0(sp)
   18e2c:	d839883a 	mov	fp,sp
    
#ifdef ALT_INICHE
    /* Service the Interniche timer */
    cticks_hook();
#endif
}
   18e30:	0001883a 	nop
   18e34:	e037883a 	mov	sp,fp
   18e38:	df000017 	ldw	fp,0(sp)
   18e3c:	dec00104 	addi	sp,sp,4
   18e40:	f800283a 	ret

00018e44 <OSInitHookBegin>:

void OSInitHookBegin(void)
{
   18e44:	deffff04 	addi	sp,sp,-4
   18e48:	df000015 	stw	fp,0(sp)
   18e4c:	d839883a 	mov	fp,sp
#if OS_TMR_EN > 0
    OSTmrCtr = 0;
#endif
}
   18e50:	0001883a 	nop
   18e54:	e037883a 	mov	sp,fp
   18e58:	df000017 	ldw	fp,0(sp)
   18e5c:	dec00104 	addi	sp,sp,4
   18e60:	f800283a 	ret

00018e64 <OSInitHookEnd>:

void OSInitHookEnd(void)
{
   18e64:	deffff04 	addi	sp,sp,-4
   18e68:	df000015 	stw	fp,0(sp)
   18e6c:	d839883a 	mov	fp,sp
}
   18e70:	0001883a 	nop
   18e74:	e037883a 	mov	sp,fp
   18e78:	df000017 	ldw	fp,0(sp)
   18e7c:	dec00104 	addi	sp,sp,4
   18e80:	f800283a 	ret

00018e84 <OSTaskIdleHook>:

void OSTaskIdleHook(void)
{
   18e84:	deffff04 	addi	sp,sp,-4
   18e88:	df000015 	stw	fp,0(sp)
   18e8c:	d839883a 	mov	fp,sp
}
   18e90:	0001883a 	nop
   18e94:	e037883a 	mov	sp,fp
   18e98:	df000017 	ldw	fp,0(sp)
   18e9c:	dec00104 	addi	sp,sp,4
   18ea0:	f800283a 	ret

00018ea4 <OSTCBInitHook>:

void OSTCBInitHook(OS_TCB *ptcb)
{
   18ea4:	defffe04 	addi	sp,sp,-8
   18ea8:	df000115 	stw	fp,4(sp)
   18eac:	df000104 	addi	fp,sp,4
   18eb0:	e13fff15 	stw	r4,-4(fp)
}
   18eb4:	0001883a 	nop
   18eb8:	e037883a 	mov	sp,fp
   18ebc:	df000017 	ldw	fp,0(sp)
   18ec0:	dec00104 	addi	sp,sp,4
   18ec4:	f800283a 	ret

00018ec8 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
   18ec8:	defffa04 	addi	sp,sp,-24
   18ecc:	dfc00515 	stw	ra,20(sp)
   18ed0:	df000415 	stw	fp,16(sp)
   18ed4:	df000404 	addi	fp,sp,16
   18ed8:	e13ffe15 	stw	r4,-8(fp)
   18edc:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
   18ee0:	e0bfff17 	ldw	r2,-4(fp)
   18ee4:	10800017 	ldw	r2,0(r2)
   18ee8:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
   18eec:	e13ffe17 	ldw	r4,-8(fp)
   18ef0:	000124c0 	call	124c <strlen>
   18ef4:	10800044 	addi	r2,r2,1
   18ef8:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   18efc:	00000d06 	br	18f34 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
   18f00:	e0bffc17 	ldw	r2,-16(fp)
   18f04:	10800217 	ldw	r2,8(r2)
   18f08:	e0fffd17 	ldw	r3,-12(fp)
   18f0c:	180d883a 	mov	r6,r3
   18f10:	e17ffe17 	ldw	r5,-8(fp)
   18f14:	1009883a 	mov	r4,r2
   18f18:	00076200 	call	7620 <memcmp>
   18f1c:	1000021e 	bne	r2,zero,18f28 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
   18f20:	e0bffc17 	ldw	r2,-16(fp)
   18f24:	00000706 	br	18f44 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
   18f28:	e0bffc17 	ldw	r2,-16(fp)
   18f2c:	10800017 	ldw	r2,0(r2)
   18f30:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   18f34:	e0fffc17 	ldw	r3,-16(fp)
   18f38:	e0bfff17 	ldw	r2,-4(fp)
   18f3c:	18bff01e 	bne	r3,r2,18f00 <__alt_data_end+0xfffe8f00>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
   18f40:	0005883a 	mov	r2,zero
}
   18f44:	e037883a 	mov	sp,fp
   18f48:	dfc00117 	ldw	ra,4(sp)
   18f4c:	df000017 	ldw	fp,0(sp)
   18f50:	dec00204 	addi	sp,sp,8
   18f54:	f800283a 	ret

00018f58 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
   18f58:	defffb04 	addi	sp,sp,-20
   18f5c:	dfc00415 	stw	ra,16(sp)
   18f60:	df000315 	stw	fp,12(sp)
   18f64:	df000304 	addi	fp,sp,12
   18f68:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
   18f6c:	d0a00717 	ldw	r2,-32740(gp)
   18f70:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   18f74:	00003106 	br	1903c <alt_find_file+0xe4>
  {
    len = strlen(next->name);
   18f78:	e0bffd17 	ldw	r2,-12(fp)
   18f7c:	10800217 	ldw	r2,8(r2)
   18f80:	1009883a 	mov	r4,r2
   18f84:	000124c0 	call	124c <strlen>
   18f88:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
   18f8c:	e0bffd17 	ldw	r2,-12(fp)
   18f90:	10c00217 	ldw	r3,8(r2)
   18f94:	e0bffe17 	ldw	r2,-8(fp)
   18f98:	10bfffc4 	addi	r2,r2,-1
   18f9c:	1885883a 	add	r2,r3,r2
   18fa0:	10800003 	ldbu	r2,0(r2)
   18fa4:	10803fcc 	andi	r2,r2,255
   18fa8:	1080201c 	xori	r2,r2,128
   18fac:	10bfe004 	addi	r2,r2,-128
   18fb0:	10800bd8 	cmpnei	r2,r2,47
   18fb4:	1000031e 	bne	r2,zero,18fc4 <alt_find_file+0x6c>
    {
      len -= 1;
   18fb8:	e0bffe17 	ldw	r2,-8(fp)
   18fbc:	10bfffc4 	addi	r2,r2,-1
   18fc0:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   18fc4:	e0bffe17 	ldw	r2,-8(fp)
   18fc8:	e0ffff17 	ldw	r3,-4(fp)
   18fcc:	1885883a 	add	r2,r3,r2
   18fd0:	10800003 	ldbu	r2,0(r2)
   18fd4:	10803fcc 	andi	r2,r2,255
   18fd8:	1080201c 	xori	r2,r2,128
   18fdc:	10bfe004 	addi	r2,r2,-128
   18fe0:	10800be0 	cmpeqi	r2,r2,47
   18fe4:	1000081e 	bne	r2,zero,19008 <alt_find_file+0xb0>
   18fe8:	e0bffe17 	ldw	r2,-8(fp)
   18fec:	e0ffff17 	ldw	r3,-4(fp)
   18ff0:	1885883a 	add	r2,r3,r2
   18ff4:	10800003 	ldbu	r2,0(r2)
   18ff8:	10803fcc 	andi	r2,r2,255
   18ffc:	1080201c 	xori	r2,r2,128
   19000:	10bfe004 	addi	r2,r2,-128
   19004:	10000a1e 	bne	r2,zero,19030 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
   19008:	e0bffd17 	ldw	r2,-12(fp)
   1900c:	10800217 	ldw	r2,8(r2)
   19010:	e0fffe17 	ldw	r3,-8(fp)
   19014:	180d883a 	mov	r6,r3
   19018:	e17fff17 	ldw	r5,-4(fp)
   1901c:	1009883a 	mov	r4,r2
   19020:	00076200 	call	7620 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   19024:	1000021e 	bne	r2,zero,19030 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
   19028:	e0bffd17 	ldw	r2,-12(fp)
   1902c:	00000706 	br	1904c <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
   19030:	e0bffd17 	ldw	r2,-12(fp)
   19034:	10800017 	ldw	r2,0(r2)
   19038:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   1903c:	e0fffd17 	ldw	r3,-12(fp)
   19040:	d0a00704 	addi	r2,gp,-32740
   19044:	18bfcc1e 	bne	r3,r2,18f78 <__alt_data_end+0xfffe8f78>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
   19048:	0005883a 	mov	r2,zero
}
   1904c:	e037883a 	mov	sp,fp
   19050:	dfc00117 	ldw	ra,4(sp)
   19054:	df000017 	ldw	fp,0(sp)
   19058:	dec00204 	addi	sp,sp,8
   1905c:	f800283a 	ret

00019060 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
   19060:	defff804 	addi	sp,sp,-32
   19064:	dfc00715 	stw	ra,28(sp)
   19068:	df000615 	stw	fp,24(sp)
   1906c:	dc000515 	stw	r16,20(sp)
   19070:	df000604 	addi	fp,sp,24
   19074:	e13ffe15 	stw	r4,-8(fp)
  alt_32 i;
  int rc = -EMFILE;
   19078:	00bffa04 	movi	r2,-24
   1907c:	e0bffb15 	stw	r2,-20(fp)
  /* 
   * Take the alt_fd_list_lock semaphore in order to avoid races when 
   * accessing the file descriptor pool.
   */
  
  ALT_SEM_PEND(alt_fd_list_lock, 0);
   19080:	d0a71b17 	ldw	r2,-25492(gp)
   19084:	e0bffc15 	stw	r2,-16(fp)
   19088:	e03ffd0d 	sth	zero,-12(fp)
   1908c:	e0bffd0b 	ldhu	r2,-12(fp)
   19090:	e0fffd84 	addi	r3,fp,-10
   19094:	180d883a 	mov	r6,r3
   19098:	100b883a 	mov	r5,r2
   1909c:	e13ffc17 	ldw	r4,-16(fp)
   190a0:	00150b40 	call	150b4 <OSSemPend>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   190a4:	e03ffa15 	stw	zero,-24(fp)
   190a8:	00001d06 	br	19120 <alt_get_fd+0xc0>
  {
    if (!alt_fd_list[i].dev)
   190ac:	040000b4 	movhi	r16,2
   190b0:	8428ac04 	addi	r16,r16,-23888
   190b4:	e0bffa17 	ldw	r2,-24(fp)
   190b8:	01400304 	movi	r5,12
   190bc:	1009883a 	mov	r4,r2
   190c0:	000c3c80 	call	c3c8 <__mulsi3>
   190c4:	8085883a 	add	r2,r16,r2
   190c8:	10800017 	ldw	r2,0(r2)
   190cc:	1000111e 	bne	r2,zero,19114 <alt_get_fd+0xb4>
    {
      alt_fd_list[i].dev = dev;
   190d0:	040000b4 	movhi	r16,2
   190d4:	8428ac04 	addi	r16,r16,-23888
   190d8:	e0bffa17 	ldw	r2,-24(fp)
   190dc:	01400304 	movi	r5,12
   190e0:	1009883a 	mov	r4,r2
   190e4:	000c3c80 	call	c3c8 <__mulsi3>
   190e8:	8085883a 	add	r2,r16,r2
   190ec:	e0fffe17 	ldw	r3,-8(fp)
   190f0:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
   190f4:	d0e00b17 	ldw	r3,-32724(gp)
   190f8:	e0bffa17 	ldw	r2,-24(fp)
   190fc:	1880020e 	bge	r3,r2,19108 <alt_get_fd+0xa8>
      {
        alt_max_fd = i;
   19100:	e0bffa17 	ldw	r2,-24(fp)
   19104:	d0a00b15 	stw	r2,-32724(gp)
      }
      rc = i;
   19108:	e0bffa17 	ldw	r2,-24(fp)
   1910c:	e0bffb15 	stw	r2,-20(fp)
      goto alt_get_fd_exit;
   19110:	00000606 	br	1912c <alt_get_fd+0xcc>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   19114:	e0bffa17 	ldw	r2,-24(fp)
   19118:	10800044 	addi	r2,r2,1
   1911c:	e0bffa15 	stw	r2,-24(fp)
   19120:	e0bffa17 	ldw	r2,-24(fp)
   19124:	10800810 	cmplti	r2,r2,32
   19128:	103fe01e 	bne	r2,zero,190ac <__alt_data_end+0xfffe90ac>
  /*
   * Release the alt_fd_list_lock semaphore now that we are done with the
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);
   1912c:	d0a71b17 	ldw	r2,-25492(gp)
   19130:	1009883a 	mov	r4,r2
   19134:	001542c0 	call	1542c <OSSemPost>

  return rc;
   19138:	e0bffb17 	ldw	r2,-20(fp)
}
   1913c:	e6ffff04 	addi	sp,fp,-4
   19140:	dfc00217 	ldw	ra,8(sp)
   19144:	df000117 	ldw	fp,4(sp)
   19148:	dc000017 	ldw	r16,0(sp)
   1914c:	dec00304 	addi	sp,sp,12
   19150:	f800283a 	ret

00019154 <atexit>:
   19154:	200b883a 	mov	r5,r4
   19158:	000f883a 	mov	r7,zero
   1915c:	000d883a 	mov	r6,zero
   19160:	0009883a 	mov	r4,zero
   19164:	00191a01 	jmpi	191a0 <__register_exitproc>

00019168 <exit>:
   19168:	defffe04 	addi	sp,sp,-8
   1916c:	000b883a 	mov	r5,zero
   19170:	dc000015 	stw	r16,0(sp)
   19174:	dfc00115 	stw	ra,4(sp)
   19178:	2021883a 	mov	r16,r4
   1917c:	00192b80 	call	192b8 <__call_exitprocs>
   19180:	008000b4 	movhi	r2,2
   19184:	10ad2804 	addi	r2,r2,-19296
   19188:	11000017 	ldw	r4,0(r2)
   1918c:	20800f17 	ldw	r2,60(r4)
   19190:	10000126 	beq	r2,zero,19198 <exit+0x30>
   19194:	103ee83a 	callr	r2
   19198:	8009883a 	mov	r4,r16
   1919c:	00194380 	call	19438 <_exit>

000191a0 <__register_exitproc>:
   191a0:	defffa04 	addi	sp,sp,-24
   191a4:	dc000315 	stw	r16,12(sp)
   191a8:	040000b4 	movhi	r16,2
   191ac:	842d2804 	addi	r16,r16,-19296
   191b0:	80c00017 	ldw	r3,0(r16)
   191b4:	dc400415 	stw	r17,16(sp)
   191b8:	dfc00515 	stw	ra,20(sp)
   191bc:	18805217 	ldw	r2,328(r3)
   191c0:	2023883a 	mov	r17,r4
   191c4:	10003726 	beq	r2,zero,192a4 <__register_exitproc+0x104>
   191c8:	10c00117 	ldw	r3,4(r2)
   191cc:	010007c4 	movi	r4,31
   191d0:	20c00e16 	blt	r4,r3,1920c <__register_exitproc+0x6c>
   191d4:	1a000044 	addi	r8,r3,1
   191d8:	8800221e 	bne	r17,zero,19264 <__register_exitproc+0xc4>
   191dc:	18c00084 	addi	r3,r3,2
   191e0:	18c7883a 	add	r3,r3,r3
   191e4:	18c7883a 	add	r3,r3,r3
   191e8:	12000115 	stw	r8,4(r2)
   191ec:	10c7883a 	add	r3,r2,r3
   191f0:	19400015 	stw	r5,0(r3)
   191f4:	0005883a 	mov	r2,zero
   191f8:	dfc00517 	ldw	ra,20(sp)
   191fc:	dc400417 	ldw	r17,16(sp)
   19200:	dc000317 	ldw	r16,12(sp)
   19204:	dec00604 	addi	sp,sp,24
   19208:	f800283a 	ret
   1920c:	00800034 	movhi	r2,0
   19210:	10800004 	addi	r2,r2,0
   19214:	10002626 	beq	r2,zero,192b0 <__register_exitproc+0x110>
   19218:	01006404 	movi	r4,400
   1921c:	d9400015 	stw	r5,0(sp)
   19220:	d9800115 	stw	r6,4(sp)
   19224:	d9c00215 	stw	r7,8(sp)
   19228:	00000000 	call	0 <__reset>
   1922c:	d9400017 	ldw	r5,0(sp)
   19230:	d9800117 	ldw	r6,4(sp)
   19234:	d9c00217 	ldw	r7,8(sp)
   19238:	10001d26 	beq	r2,zero,192b0 <__register_exitproc+0x110>
   1923c:	81000017 	ldw	r4,0(r16)
   19240:	10000115 	stw	zero,4(r2)
   19244:	02000044 	movi	r8,1
   19248:	22405217 	ldw	r9,328(r4)
   1924c:	0007883a 	mov	r3,zero
   19250:	12400015 	stw	r9,0(r2)
   19254:	20805215 	stw	r2,328(r4)
   19258:	10006215 	stw	zero,392(r2)
   1925c:	10006315 	stw	zero,396(r2)
   19260:	883fde26 	beq	r17,zero,191dc <__alt_data_end+0xfffe91dc>
   19264:	18c9883a 	add	r4,r3,r3
   19268:	2109883a 	add	r4,r4,r4
   1926c:	1109883a 	add	r4,r2,r4
   19270:	21802215 	stw	r6,136(r4)
   19274:	01800044 	movi	r6,1
   19278:	12406217 	ldw	r9,392(r2)
   1927c:	30cc983a 	sll	r6,r6,r3
   19280:	4992b03a 	or	r9,r9,r6
   19284:	12406215 	stw	r9,392(r2)
   19288:	21c04215 	stw	r7,264(r4)
   1928c:	01000084 	movi	r4,2
   19290:	893fd21e 	bne	r17,r4,191dc <__alt_data_end+0xfffe91dc>
   19294:	11006317 	ldw	r4,396(r2)
   19298:	218cb03a 	or	r6,r4,r6
   1929c:	11806315 	stw	r6,396(r2)
   192a0:	003fce06 	br	191dc <__alt_data_end+0xfffe91dc>
   192a4:	18805304 	addi	r2,r3,332
   192a8:	18805215 	stw	r2,328(r3)
   192ac:	003fc606 	br	191c8 <__alt_data_end+0xfffe91c8>
   192b0:	00bfffc4 	movi	r2,-1
   192b4:	003fd006 	br	191f8 <__alt_data_end+0xfffe91f8>

000192b8 <__call_exitprocs>:
   192b8:	defff504 	addi	sp,sp,-44
   192bc:	df000915 	stw	fp,36(sp)
   192c0:	dd400615 	stw	r21,24(sp)
   192c4:	dc800315 	stw	r18,12(sp)
   192c8:	dfc00a15 	stw	ra,40(sp)
   192cc:	ddc00815 	stw	r23,32(sp)
   192d0:	dd800715 	stw	r22,28(sp)
   192d4:	dd000515 	stw	r20,20(sp)
   192d8:	dcc00415 	stw	r19,16(sp)
   192dc:	dc400215 	stw	r17,8(sp)
   192e0:	dc000115 	stw	r16,4(sp)
   192e4:	d9000015 	stw	r4,0(sp)
   192e8:	2839883a 	mov	fp,r5
   192ec:	04800044 	movi	r18,1
   192f0:	057fffc4 	movi	r21,-1
   192f4:	008000b4 	movhi	r2,2
   192f8:	10ad2804 	addi	r2,r2,-19296
   192fc:	12000017 	ldw	r8,0(r2)
   19300:	45005217 	ldw	r20,328(r8)
   19304:	44c05204 	addi	r19,r8,328
   19308:	a0001c26 	beq	r20,zero,1937c <__call_exitprocs+0xc4>
   1930c:	a0800117 	ldw	r2,4(r20)
   19310:	15ffffc4 	addi	r23,r2,-1
   19314:	b8000d16 	blt	r23,zero,1934c <__call_exitprocs+0x94>
   19318:	14000044 	addi	r16,r2,1
   1931c:	8421883a 	add	r16,r16,r16
   19320:	8421883a 	add	r16,r16,r16
   19324:	84402004 	addi	r17,r16,128
   19328:	a463883a 	add	r17,r20,r17
   1932c:	a421883a 	add	r16,r20,r16
   19330:	e0001e26 	beq	fp,zero,193ac <__call_exitprocs+0xf4>
   19334:	80804017 	ldw	r2,256(r16)
   19338:	e0801c26 	beq	fp,r2,193ac <__call_exitprocs+0xf4>
   1933c:	bdffffc4 	addi	r23,r23,-1
   19340:	843fff04 	addi	r16,r16,-4
   19344:	8c7fff04 	addi	r17,r17,-4
   19348:	bd7ff91e 	bne	r23,r21,19330 <__alt_data_end+0xfffe9330>
   1934c:	00800034 	movhi	r2,0
   19350:	10800004 	addi	r2,r2,0
   19354:	10000926 	beq	r2,zero,1937c <__call_exitprocs+0xc4>
   19358:	a0800117 	ldw	r2,4(r20)
   1935c:	1000301e 	bne	r2,zero,19420 <__call_exitprocs+0x168>
   19360:	a0800017 	ldw	r2,0(r20)
   19364:	10003226 	beq	r2,zero,19430 <__call_exitprocs+0x178>
   19368:	a009883a 	mov	r4,r20
   1936c:	98800015 	stw	r2,0(r19)
   19370:	00000000 	call	0 <__reset>
   19374:	9d000017 	ldw	r20,0(r19)
   19378:	a03fe41e 	bne	r20,zero,1930c <__alt_data_end+0xfffe930c>
   1937c:	dfc00a17 	ldw	ra,40(sp)
   19380:	df000917 	ldw	fp,36(sp)
   19384:	ddc00817 	ldw	r23,32(sp)
   19388:	dd800717 	ldw	r22,28(sp)
   1938c:	dd400617 	ldw	r21,24(sp)
   19390:	dd000517 	ldw	r20,20(sp)
   19394:	dcc00417 	ldw	r19,16(sp)
   19398:	dc800317 	ldw	r18,12(sp)
   1939c:	dc400217 	ldw	r17,8(sp)
   193a0:	dc000117 	ldw	r16,4(sp)
   193a4:	dec00b04 	addi	sp,sp,44
   193a8:	f800283a 	ret
   193ac:	a0800117 	ldw	r2,4(r20)
   193b0:	80c00017 	ldw	r3,0(r16)
   193b4:	10bfffc4 	addi	r2,r2,-1
   193b8:	15c01426 	beq	r2,r23,1940c <__call_exitprocs+0x154>
   193bc:	80000015 	stw	zero,0(r16)
   193c0:	183fde26 	beq	r3,zero,1933c <__alt_data_end+0xfffe933c>
   193c4:	95c8983a 	sll	r4,r18,r23
   193c8:	a0806217 	ldw	r2,392(r20)
   193cc:	a5800117 	ldw	r22,4(r20)
   193d0:	2084703a 	and	r2,r4,r2
   193d4:	10000b26 	beq	r2,zero,19404 <__call_exitprocs+0x14c>
   193d8:	a0806317 	ldw	r2,396(r20)
   193dc:	2088703a 	and	r4,r4,r2
   193e0:	20000c1e 	bne	r4,zero,19414 <__call_exitprocs+0x15c>
   193e4:	89400017 	ldw	r5,0(r17)
   193e8:	d9000017 	ldw	r4,0(sp)
   193ec:	183ee83a 	callr	r3
   193f0:	a0800117 	ldw	r2,4(r20)
   193f4:	15bfbf1e 	bne	r2,r22,192f4 <__alt_data_end+0xfffe92f4>
   193f8:	98800017 	ldw	r2,0(r19)
   193fc:	153fcf26 	beq	r2,r20,1933c <__alt_data_end+0xfffe933c>
   19400:	003fbc06 	br	192f4 <__alt_data_end+0xfffe92f4>
   19404:	183ee83a 	callr	r3
   19408:	003ff906 	br	193f0 <__alt_data_end+0xfffe93f0>
   1940c:	a5c00115 	stw	r23,4(r20)
   19410:	003feb06 	br	193c0 <__alt_data_end+0xfffe93c0>
   19414:	89000017 	ldw	r4,0(r17)
   19418:	183ee83a 	callr	r3
   1941c:	003ff406 	br	193f0 <__alt_data_end+0xfffe93f0>
   19420:	a0800017 	ldw	r2,0(r20)
   19424:	a027883a 	mov	r19,r20
   19428:	1029883a 	mov	r20,r2
   1942c:	003fb606 	br	19308 <__alt_data_end+0xfffe9308>
   19430:	0005883a 	mov	r2,zero
   19434:	003ffb06 	br	19424 <__alt_data_end+0xfffe9424>

00019438 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
   19438:	defffd04 	addi	sp,sp,-12
   1943c:	df000215 	stw	fp,8(sp)
   19440:	df000204 	addi	fp,sp,8
   19444:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
   19448:	d0272445 	stb	zero,-25455(gp)
   1944c:	e0bfff17 	ldw	r2,-4(fp)
   19450:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
   19454:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
   19458:	10000226 	beq	r2,zero,19464 <_exit+0x2c>
    ALT_SIM_FAIL();
   1945c:	002af070 	cmpltui	zero,zero,43969
   19460:	00000106 	br	19468 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
   19464:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
   19468:	003fff06 	br	19468 <__alt_data_end+0xfffe9468>
   1946c:	00000af8 	rdprs	zero,zero,43
